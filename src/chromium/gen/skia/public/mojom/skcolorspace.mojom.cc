// skia/public/mojom/skcolorspace.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "skia/public/mojom/skcolorspace.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/thread_pool/thread_pool_instance.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/features.h"
#include "mojo/public/cpp/bindings/lib/default_construct_tag_internal.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/cpp/bindings/urgent_message_scope.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "skia/public/mojom/skcolorspace.mojom-params-data.h"
#include "skia/public/mojom/skcolorspace.mojom-shared-message-ids.h"

#include "skia/public/mojom/skcolorspace.mojom-import-headers.h"
#include "skia/public/mojom/skcolorspace.mojom-test-utils.h"


namespace skia::mojom {
SkcmsMatrix3x3::SkcmsMatrix3x3()
    : vals() {}

SkcmsMatrix3x3::SkcmsMatrix3x3(
    std::vector<float> vals_in)
    : vals(std::move(vals_in)) {}

SkcmsMatrix3x3::~SkcmsMatrix3x3() = default;

void SkcmsMatrix3x3::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "vals"), this->vals,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<float>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SkcmsMatrix3x3::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SkcmsTransferFunction::SkcmsTransferFunction()
    : g(),
      a(),
      b(),
      c(),
      d(),
      e(),
      f() {}

SkcmsTransferFunction::SkcmsTransferFunction(
    float g_in,
    float a_in,
    float b_in,
    float c_in,
    float d_in,
    float e_in,
    float f_in)
    : g(std::move(g_in)),
      a(std::move(a_in)),
      b(std::move(b_in)),
      c(std::move(c_in)),
      d(std::move(d_in)),
      e(std::move(e_in)),
      f(std::move(f_in)) {}

SkcmsTransferFunction::~SkcmsTransferFunction() = default;

void SkcmsTransferFunction::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "g"), this->g,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "a"), this->a,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "b"), this->b,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "c"), this->c,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "d"), this->d,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "e"), this->e,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "f"), this->f,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SkcmsTransferFunction::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SkColorSpace::SkColorSpace()
    : to_linear(),
      to_xyzd50() {}

SkColorSpace::SkColorSpace(
    const std::optional<::skcms_TransferFunction>& to_linear_in,
    const std::optional<::skcms_Matrix3x3>& to_xyzd50_in)
    : to_linear(std::move(to_linear_in)),
      to_xyzd50(std::move(to_xyzd50_in)) {}

SkColorSpace::~SkColorSpace() = default;

void SkColorSpace::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "to_linear"), this->to_linear,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::optional<::skcms_TransferFunction>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "to_xyzd50"), this->to_xyzd50,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::optional<::skcms_Matrix3x3>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SkColorSpace::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // skia::mojom


namespace mojo {


// static
bool StructTraits<::skia::mojom::SkcmsMatrix3x3::DataView, ::skia::mojom::SkcmsMatrix3x3Ptr>::Read(
    ::skia::mojom::SkcmsMatrix3x3::DataView input,
    ::skia::mojom::SkcmsMatrix3x3Ptr* output) {
  bool success = true;
  ::skia::mojom::SkcmsMatrix3x3Ptr result(::skia::mojom::SkcmsMatrix3x3::New());
  
      if (success && !input.ReadVals(&result->vals))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::skia::mojom::SkcmsTransferFunction::DataView, ::skia::mojom::SkcmsTransferFunctionPtr>::Read(
    ::skia::mojom::SkcmsTransferFunction::DataView input,
    ::skia::mojom::SkcmsTransferFunctionPtr* output) {
  bool success = true;
  ::skia::mojom::SkcmsTransferFunctionPtr result(::skia::mojom::SkcmsTransferFunction::New());
  
      if (success)
        result->g = input.g();
      if (success)
        result->a = input.a();
      if (success)
        result->b = input.b();
      if (success)
        result->c = input.c();
      if (success)
        result->d = input.d();
      if (success)
        result->e = input.e();
      if (success)
        result->f = input.f();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::skia::mojom::SkColorSpace::DataView, ::skia::mojom::SkColorSpacePtr>::Read(
    ::skia::mojom::SkColorSpace::DataView input,
    ::skia::mojom::SkColorSpacePtr* output) {
  bool success = true;
  ::skia::mojom::SkColorSpacePtr result(::skia::mojom::SkColorSpace::New());
  
      if (success && !input.ReadToLinear(&result->to_linear))
        success = false;
      if (success && !input.ReadToXyzd50(&result->to_xyzd50))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace skia::mojom {




}  // skia::mojom


#if defined(__clang__)
#pragma clang diagnostic pop
#endif