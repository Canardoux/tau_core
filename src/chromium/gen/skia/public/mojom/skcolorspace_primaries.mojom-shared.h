// skia/public/mojom/skcolorspace_primaries.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SKIA_PUBLIC_MOJOM_SKCOLORSPACE_PRIMARIES_MOJOM_SHARED_H_
#define SKIA_PUBLIC_MOJOM_SKCOLORSPACE_PRIMARIES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "skia/public/mojom/skcolorspace_primaries.mojom-shared-internal.h"







namespace skia::mojom {
class SkColorSpacePrimariesDataView;



}  // skia::mojom

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::skia::mojom::SkColorSpacePrimariesDataView> {
  using Data = ::skia::mojom::internal::SkColorSpacePrimaries_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace skia::mojom {


class SkColorSpacePrimariesDataView {
 public:
  SkColorSpacePrimariesDataView() = default;

  SkColorSpacePrimariesDataView(
      internal::SkColorSpacePrimaries_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  float rX() const {
    return data_->rX;
  }
  float rY() const {
    return data_->rY;
  }
  float gX() const {
    return data_->gX;
  }
  float gY() const {
    return data_->gY;
  }
  float bX() const {
    return data_->bX;
  }
  float bY() const {
    return data_->bY;
  }
  float wX() const {
    return data_->wX;
  }
  float wY() const {
    return data_->wY;
  }
 private:
  internal::SkColorSpacePrimaries_Data* data_ = nullptr;
};


}  // skia::mojom

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::skia::mojom::SkColorSpacePrimariesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::skia::mojom::SkColorSpacePrimariesDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::skia::mojom::internal::SkColorSpacePrimaries_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->rX = Traits::rX(input);
    fragment->rY = Traits::rY(input);
    fragment->gX = Traits::gX(input);
    fragment->gY = Traits::gY(input);
    fragment->bX = Traits::bX(input);
    fragment->bY = Traits::bY(input);
    fragment->wX = Traits::wX(input);
    fragment->wY = Traits::wY(input);
  }

  static bool Deserialize(::skia::mojom::internal::SkColorSpacePrimaries_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::skia::mojom::SkColorSpacePrimariesDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace skia::mojom {




}  // skia::mojom

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // SKIA_PUBLIC_MOJOM_SKCOLORSPACE_PRIMARIES_MOJOM_SHARED_H_