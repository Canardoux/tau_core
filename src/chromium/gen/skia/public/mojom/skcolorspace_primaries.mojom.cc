// skia/public/mojom/skcolorspace_primaries.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "skia/public/mojom/skcolorspace_primaries.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/thread_pool/thread_pool_instance.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/features.h"
#include "mojo/public/cpp/bindings/lib/default_construct_tag_internal.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/cpp/bindings/urgent_message_scope.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "skia/public/mojom/skcolorspace_primaries.mojom-params-data.h"
#include "skia/public/mojom/skcolorspace_primaries.mojom-shared-message-ids.h"

#include "skia/public/mojom/skcolorspace_primaries.mojom-import-headers.h"
#include "skia/public/mojom/skcolorspace_primaries.mojom-test-utils.h"


namespace skia::mojom {
SkColorSpacePrimaries::SkColorSpacePrimaries()
    : rX(),
      rY(),
      gX(),
      gY(),
      bX(),
      bY(),
      wX(),
      wY() {}

SkColorSpacePrimaries::SkColorSpacePrimaries(
    float rX_in,
    float rY_in,
    float gX_in,
    float gY_in,
    float bX_in,
    float bY_in,
    float wX_in,
    float wY_in)
    : rX(std::move(rX_in)),
      rY(std::move(rY_in)),
      gX(std::move(gX_in)),
      gY(std::move(gY_in)),
      bX(std::move(bX_in)),
      bY(std::move(bY_in)),
      wX(std::move(wX_in)),
      wY(std::move(wY_in)) {}

SkColorSpacePrimaries::~SkColorSpacePrimaries() = default;

void SkColorSpacePrimaries::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "rX"), this->rX,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "rY"), this->rY,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "gX"), this->gX,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "gY"), this->gY,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bX"), this->bX,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bY"), this->bY,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "wX"), this->wX,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "wY"), this->wY,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SkColorSpacePrimaries::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // skia::mojom


namespace mojo {


// static
bool StructTraits<::skia::mojom::SkColorSpacePrimaries::DataView, ::skia::mojom::SkColorSpacePrimariesPtr>::Read(
    ::skia::mojom::SkColorSpacePrimaries::DataView input,
    ::skia::mojom::SkColorSpacePrimariesPtr* output) {
  bool success = true;
  ::skia::mojom::SkColorSpacePrimariesPtr result(::skia::mojom::SkColorSpacePrimaries::New());
  
      if (success)
        result->rX = input.rX();
      if (success)
        result->rY = input.rY();
      if (success)
        result->gX = input.gX();
      if (success)
        result->gY = input.gY();
      if (success)
        result->bX = input.bX();
      if (success)
        result->bY = input.bY();
      if (success)
        result->wX = input.wX();
      if (success)
        result->wY = input.wY();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace skia::mojom {




}  // skia::mojom


#if defined(__clang__)
#pragma clang diagnostic pop
#endif