// skia/public/mojom/skcolorspace.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SKIA_PUBLIC_MOJOM_SKCOLORSPACE_MOJOM_SHARED_INTERNAL_H_
#define SKIA_PUBLIC_MOJOM_SKCOLORSPACE_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}


namespace skia::mojom {
namespace internal {
class SkcmsMatrix3x3_Data;
class SkcmsTransferFunction_Data;
class SkColorSpace_Data;

#pragma pack(push, 1)
class  SkcmsMatrix3x3_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<float>> vals;

 private:
  friend class mojo::internal::MessageFragment<SkcmsMatrix3x3_Data>;

  SkcmsMatrix3x3_Data();
  ~SkcmsMatrix3x3_Data() = delete;
};
static_assert(sizeof(SkcmsMatrix3x3_Data) == 16,
              "Bad sizeof(SkcmsMatrix3x3_Data)");
// Used by SkcmsMatrix3x3::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SkcmsMatrix3x3_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SkcmsMatrix3x3_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SkcmsMatrix3x3_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SkcmsMatrix3x3_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SkcmsMatrix3x3_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SkcmsTransferFunction_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float g;
  float a;
  float b;
  float c;
  float d;
  float e;
  float f;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SkcmsTransferFunction_Data>;

  SkcmsTransferFunction_Data();
  ~SkcmsTransferFunction_Data() = delete;
};
static_assert(sizeof(SkcmsTransferFunction_Data) == 40,
              "Bad sizeof(SkcmsTransferFunction_Data)");
// Used by SkcmsTransferFunction::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SkcmsTransferFunction_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SkcmsTransferFunction_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SkcmsTransferFunction_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SkcmsTransferFunction_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SkcmsTransferFunction_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SkColorSpace_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SkcmsTransferFunction_Data> to_linear;
  mojo::internal::Pointer<internal::SkcmsMatrix3x3_Data> to_xyzd50;

 private:
  friend class mojo::internal::MessageFragment<SkColorSpace_Data>;

  SkColorSpace_Data();
  ~SkColorSpace_Data() = delete;
};
static_assert(sizeof(SkColorSpace_Data) == 24,
              "Bad sizeof(SkColorSpace_Data)");
// Used by SkColorSpace::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SkColorSpace_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SkColorSpace_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SkColorSpace_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SkColorSpace_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SkColorSpace_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal

}  // skia::mojom

#endif  // SKIA_PUBLIC_MOJOM_SKCOLORSPACE_MOJOM_SHARED_INTERNAL_H_