// skia/public/mojom/bitmap.mojom-webui.ts is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '//resources/mojo/mojo/public/js/bindings.js';

import {
  BigBuffer as mojoBase_mojom_BigBuffer,
  BigBufferSpec as mojoBase_mojom_BigBufferSpec
} from '../../../mojo/public/mojom/base/big_buffer.mojom-webui.js';
import {
  BitmapN32ImageInfo as skia_mojom_BitmapN32ImageInfo,
  BitmapN32ImageInfoSpec as skia_mojom_BitmapN32ImageInfoSpec,
  ImageInfo as skia_mojom_ImageInfo,
  ImageInfoSpec as skia_mojom_ImageInfoSpec
} from './image_info.mojom-webui.js';






export const BitmapN32Spec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const BitmapWithArbitraryBppSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const BitmapMappedFromTrustedProcessSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const InlineBitmapSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };




export interface BitmapN32MojoType {
  imageInfo: skia_mojom_BitmapN32ImageInfo;
  pixelData: mojoBase_mojom_BigBuffer;
}


export type BitmapN32 = BitmapN32MojoType;
mojo.internal.Struct(
    BitmapN32Spec.$,
    'BitmapN32',
    [
      mojo.internal.StructField(
        'imageInfo', 0,
        0,
        skia_mojom_BitmapN32ImageInfoSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'pixelData', 8,
        0,
        mojoBase_mojom_BigBufferSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 32],]);





export interface BitmapWithArbitraryBppMojoType {
  imageInfo: skia_mojom_ImageInfo;
  uNUSEDRowBytes: bigint;
  pixelData: mojoBase_mojom_BigBuffer;
}


export type BitmapWithArbitraryBpp = BitmapWithArbitraryBppMojoType;
mojo.internal.Struct(
    BitmapWithArbitraryBppSpec.$,
    'BitmapWithArbitraryBpp',
    [
      mojo.internal.StructField(
        'imageInfo', 0,
        0,
        skia_mojom_ImageInfoSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'uNUSEDRowBytes', 8,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'pixelData', 16,
        0,
        mojoBase_mojom_BigBufferSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 40],]);





export interface BitmapMappedFromTrustedProcessMojoType {
  imageInfo: skia_mojom_ImageInfo;
  uNUSEDRowBytes: bigint;
  pixelData: mojoBase_mojom_BigBuffer;
}


export type BitmapMappedFromTrustedProcess = BitmapMappedFromTrustedProcessMojoType;
mojo.internal.Struct(
    BitmapMappedFromTrustedProcessSpec.$,
    'BitmapMappedFromTrustedProcess',
    [
      mojo.internal.StructField(
        'imageInfo', 0,
        0,
        skia_mojom_ImageInfoSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'uNUSEDRowBytes', 8,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'pixelData', 16,
        0,
        mojoBase_mojom_BigBufferSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 40],]);





export interface InlineBitmapMojoType {
  imageInfo: skia_mojom_BitmapN32ImageInfo;
  pixelData: number[];
}


export type InlineBitmap = InlineBitmapMojoType;
mojo.internal.Struct(
    InlineBitmapSpec.$,
    'InlineBitmap',
    [
      mojo.internal.StructField(
        'imageInfo', 0,
        0,
        skia_mojom_BitmapN32ImageInfoSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'pixelData', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);



