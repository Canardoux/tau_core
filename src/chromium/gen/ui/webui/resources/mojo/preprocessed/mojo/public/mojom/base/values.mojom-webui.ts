// mojo/public/mojom/base/values.mojom-webui.ts is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '//resources/mojo/mojo/public/js/bindings.js';







export const DictionaryValueSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const ListValueSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const ValueSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };




export interface DictionaryValueMojoType {
  storage: {[key: string]: Value};
}


export type DictionaryValue = DictionaryValueMojoType;
mojo.internal.Struct(
    DictionaryValueSpec.$,
    'DictionaryValue',
    [
      mojo.internal.StructField(
        'storage', 0,
        0,
        mojo.internal.Map(mojo.internal.String, ValueSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface ListValueMojoType {
  storage: Value[];
}


export type ListValue = ListValueMojoType;
mojo.internal.Struct(
    ListValueSpec.$,
    'ListValue',
    [
      mojo.internal.StructField(
        'storage', 0,
        0,
        mojo.internal.Array(ValueSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);



mojo.internal.Union(
    ValueSpec.$, 'Value',
    {
      'nullValue': {
        'ordinal': 0,
        'type': mojo.internal.Uint8,
      },
      'boolValue': {
        'ordinal': 1,
        'type': mojo.internal.Bool,
      },
      'intValue': {
        'ordinal': 2,
        'type': mojo.internal.Int32,
      },
      'doubleValue': {
        'ordinal': 3,
        'type': mojo.internal.Double,
      },
      'stringValue': {
        'ordinal': 4,
        'type': mojo.internal.String,
      },
      'binaryValue': {
        'ordinal': 5,
        'type': mojo.internal.Array(mojo.internal.Uint8, false),
      },
      'dictionaryValue': {
        'ordinal': 6,
        'type': DictionaryValueSpec.$,
      },
      'listValue': {
        'ordinal': 7,
        'type': ListValueSpec.$,
      },
    });

export interface Value {
  nullValue?: number,
  boolValue?: boolean,
  intValue?: number,
  doubleValue?: number,
  stringValue?: string,
  binaryValue?: number[],
  dictionaryValue?: DictionaryValue,
  listValue?: ListValue,
}
