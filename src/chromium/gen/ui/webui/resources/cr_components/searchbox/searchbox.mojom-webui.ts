// ui/webui/resources/cr_components/searchbox/searchbox.mojom-webui.ts is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '//resources/mojo/mojo/public/js/bindings.js';

import {
  NavigationPredictor as omnibox_mojom_NavigationPredictor,
  NavigationPredictorSpec as omnibox_mojom_NavigationPredictorSpec
} from './omnibox.mojom-webui.js';
import {
  String16 as mojoBase_mojom_String16,
  String16Spec as mojoBase_mojom_String16Spec
} from '//resources/mojo/mojo/public/mojom/base/string16.mojom-webui.js';
import {
  TimeTicks as mojoBase_mojom_TimeTicks,
  TimeTicksSpec as mojoBase_mojom_TimeTicksSpec
} from '//resources/mojo/mojo/public/mojom/base/time.mojom-webui.js';
import {
  Size as gfx_mojom_Size,
  SizeSpec as gfx_mojom_SizeSpec
} from '//resources/mojo/ui/gfx/geometry/mojom/geometry.mojom-webui.js';
import {
  Url as url_mojom_Url,
  UrlSpec as url_mojom_UrlSpec
} from '//resources/mojo/url/mojom/url.mojom-webui.js';





export const SideTypeSpec: { $: mojo.internal.MojomType } = { $: mojo.internal.Enum() };

export enum SideType {

  MIN_VALUE = 0,
  MAX_VALUE = 1,
  kDefaultPrimary = 0,
  kSecondary = 1,
}

export const RenderTypeSpec: { $: mojo.internal.MojomType } = { $: mojo.internal.Enum() };

export enum RenderType {

  MIN_VALUE = 0,
  MAX_VALUE = 2,
  kDefaultVertical = 0,
  kHorizontal = 1,
  kGrid = 2,
}

export const SelectionLineStateSpec: { $: mojo.internal.MojomType } = { $: mojo.internal.Enum() };

export enum SelectionLineState {

  MIN_VALUE = 0,
  MAX_VALUE = 4,
  kFocusedButtonHeader = 0,
  kNormal = 1,
  kKeywordMode = 2,
  kFocusedButtonAction = 3,
  kFocusedButtonRemoveSuggestion = 4,
}



export class PageHandlerPendingReceiver implements
    mojo.internal.interfaceSupport.PendingReceiver {

  handle: mojo.internal.interfaceSupport.Endpoint;
  constructor(handle: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  bindInBrowser(scope: string = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        'searchbox.mojom.PageHandler',
        scope);
  }
}

export interface PageHandlerInterface {
  setPage(page: PageRemote): void;
  onFocusChanged(focused: boolean): void;
  queryAutocomplete(input: mojoBase_mojom_String16, preventInlineAutocomplete: boolean): void;
  stopAutocomplete(clearResult: boolean): void;
  openAutocompleteMatch(line: number, url: url_mojom_Url, areMatchesShowing: boolean, mouseButton: number, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): void;
  onNavigationLikely(line: number, url: url_mojom_Url, navigationPredictor: omnibox_mojom_NavigationPredictor): void;
  deleteAutocompleteMatch(line: number, url: url_mojom_Url): void;
  toggleSuggestionGroupIdVisibility(suggestionGroupId: number): void;
  executeAction(line: number, actionIndex: number, url: url_mojom_Url, matchSelectionTimestamp: mojoBase_mojom_TimeTicks, mouseButton: number, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): void;
  popupElementSizeChanged(size: gfx_mojom_Size): void;
  onThumbnailRemoved(): void;
}

export class PageHandlerRemote implements PageHandlerInterface {
  private proxy: mojo.internal.interfaceSupport.InterfaceRemoteBase<PageHandlerPendingReceiver>;
  $: mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<PageHandlerPendingReceiver>;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor(
      handle?: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PageHandlerPendingReceiver, handle);

    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  setPage(
      page: PageRemote): void {
    this.proxy.sendMessage(
        0,
        PageHandler_SetPage_ParamsSpec.$,
        null,
        [
          page
        ]);
  }

  onFocusChanged(
      focused: boolean): void {
    this.proxy.sendMessage(
        1,
        PageHandler_OnFocusChanged_ParamsSpec.$,
        null,
        [
          focused
        ]);
  }

  queryAutocomplete(
      input: mojoBase_mojom_String16,
      preventInlineAutocomplete: boolean): void {
    this.proxy.sendMessage(
        2,
        PageHandler_QueryAutocomplete_ParamsSpec.$,
        null,
        [
          input,
          preventInlineAutocomplete
        ]);
  }

  stopAutocomplete(
      clearResult: boolean): void {
    this.proxy.sendMessage(
        3,
        PageHandler_StopAutocomplete_ParamsSpec.$,
        null,
        [
          clearResult
        ]);
  }

  openAutocompleteMatch(
      line: number,
      url: url_mojom_Url,
      areMatchesShowing: boolean,
      mouseButton: number,
      altKey: boolean,
      ctrlKey: boolean,
      metaKey: boolean,
      shiftKey: boolean): void {
    this.proxy.sendMessage(
        4,
        PageHandler_OpenAutocompleteMatch_ParamsSpec.$,
        null,
        [
          line,
          url,
          areMatchesShowing,
          mouseButton,
          altKey,
          ctrlKey,
          metaKey,
          shiftKey
        ]);
  }

  onNavigationLikely(
      line: number,
      url: url_mojom_Url,
      navigationPredictor: omnibox_mojom_NavigationPredictor): void {
    this.proxy.sendMessage(
        5,
        PageHandler_OnNavigationLikely_ParamsSpec.$,
        null,
        [
          line,
          url,
          navigationPredictor
        ]);
  }

  deleteAutocompleteMatch(
      line: number,
      url: url_mojom_Url): void {
    this.proxy.sendMessage(
        6,
        PageHandler_DeleteAutocompleteMatch_ParamsSpec.$,
        null,
        [
          line,
          url
        ]);
  }

  toggleSuggestionGroupIdVisibility(
      suggestionGroupId: number): void {
    this.proxy.sendMessage(
        7,
        PageHandler_ToggleSuggestionGroupIdVisibility_ParamsSpec.$,
        null,
        [
          suggestionGroupId
        ]);
  }

  executeAction(
      line: number,
      actionIndex: number,
      url: url_mojom_Url,
      matchSelectionTimestamp: mojoBase_mojom_TimeTicks,
      mouseButton: number,
      altKey: boolean,
      ctrlKey: boolean,
      metaKey: boolean,
      shiftKey: boolean): void {
    this.proxy.sendMessage(
        8,
        PageHandler_ExecuteAction_ParamsSpec.$,
        null,
        [
          line,
          actionIndex,
          url,
          matchSelectionTimestamp,
          mouseButton,
          altKey,
          ctrlKey,
          metaKey,
          shiftKey
        ]);
  }

  popupElementSizeChanged(
      size: gfx_mojom_Size): void {
    this.proxy.sendMessage(
        9,
        PageHandler_PopupElementSizeChanged_ParamsSpec.$,
        null,
        [
          size
        ]);
  }

  onThumbnailRemoved(): void {
    this.proxy.sendMessage(
        10,
        PageHandler_OnThumbnailRemoved_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the PageHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class PageHandlerReceiver {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<PageHandlerRemote>;

  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<PageHandlerRemote>;

  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;


  constructor(impl: PageHandlerInterface) {

    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PageHandlerRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PageHandler_SetPage_ParamsSpec.$,
        null,
        impl.setPage.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        PageHandler_OnFocusChanged_ParamsSpec.$,
        null,
        impl.onFocusChanged.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        PageHandler_QueryAutocomplete_ParamsSpec.$,
        null,
        impl.queryAutocomplete.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        PageHandler_StopAutocomplete_ParamsSpec.$,
        null,
        impl.stopAutocomplete.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        PageHandler_OpenAutocompleteMatch_ParamsSpec.$,
        null,
        impl.openAutocompleteMatch.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        PageHandler_OnNavigationLikely_ParamsSpec.$,
        null,
        impl.onNavigationLikely.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        PageHandler_DeleteAutocompleteMatch_ParamsSpec.$,
        null,
        impl.deleteAutocompleteMatch.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        PageHandler_ToggleSuggestionGroupIdVisibility_ParamsSpec.$,
        null,
        impl.toggleSuggestionGroupIdVisibility.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        PageHandler_ExecuteAction_ParamsSpec.$,
        null,
        impl.executeAction.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        PageHandler_PopupElementSizeChanged_ParamsSpec.$,
        null,
        impl.popupElementSizeChanged.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        PageHandler_OnThumbnailRemoved_ParamsSpec.$,
        null,
        impl.onThumbnailRemoved.bind(impl));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class PageHandler {
  static get $interfaceName(): string {
    return "searchbox.mojom.PageHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   */
  static getRemote(): PageHandlerRemote {
    let remote = new PageHandlerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}

/**
 * An object which receives request messages for the PageHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class PageHandlerCallbackRouter {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<PageHandlerRemote>;
  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<PageHandlerRemote>;
  router_: mojo.internal.interfaceSupport.CallbackRouter;

  setPage: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onFocusChanged: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  queryAutocomplete: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  stopAutocomplete: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  openAutocompleteMatch: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onNavigationLikely: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  deleteAutocompleteMatch: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  toggleSuggestionGroupIdVisibility: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  executeAction: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  popupElementSizeChanged: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onThumbnailRemoved: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PageHandlerRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    this.setPage =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PageHandler_SetPage_ParamsSpec.$,
        null,
        this.setPage.createReceiverHandler(false /* expectsResponse */));
    this.onFocusChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        PageHandler_OnFocusChanged_ParamsSpec.$,
        null,
        this.onFocusChanged.createReceiverHandler(false /* expectsResponse */));
    this.queryAutocomplete =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        PageHandler_QueryAutocomplete_ParamsSpec.$,
        null,
        this.queryAutocomplete.createReceiverHandler(false /* expectsResponse */));
    this.stopAutocomplete =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        PageHandler_StopAutocomplete_ParamsSpec.$,
        null,
        this.stopAutocomplete.createReceiverHandler(false /* expectsResponse */));
    this.openAutocompleteMatch =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        PageHandler_OpenAutocompleteMatch_ParamsSpec.$,
        null,
        this.openAutocompleteMatch.createReceiverHandler(false /* expectsResponse */));
    this.onNavigationLikely =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        PageHandler_OnNavigationLikely_ParamsSpec.$,
        null,
        this.onNavigationLikely.createReceiverHandler(false /* expectsResponse */));
    this.deleteAutocompleteMatch =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        PageHandler_DeleteAutocompleteMatch_ParamsSpec.$,
        null,
        this.deleteAutocompleteMatch.createReceiverHandler(false /* expectsResponse */));
    this.toggleSuggestionGroupIdVisibility =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        PageHandler_ToggleSuggestionGroupIdVisibility_ParamsSpec.$,
        null,
        this.toggleSuggestionGroupIdVisibility.createReceiverHandler(false /* expectsResponse */));
    this.executeAction =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        PageHandler_ExecuteAction_ParamsSpec.$,
        null,
        this.executeAction.createReceiverHandler(false /* expectsResponse */));
    this.popupElementSizeChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        PageHandler_PopupElementSizeChanged_ParamsSpec.$,
        null,
        this.popupElementSizeChanged.createReceiverHandler(false /* expectsResponse */));
    this.onThumbnailRemoved =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        PageHandler_OnThumbnailRemoved_ParamsSpec.$,
        null,
        this.onThumbnailRemoved.createReceiverHandler(false /* expectsResponse */));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param id An ID returned by a prior call to addListener.
   * @return True iff the identified listener was found and removed.
   */
  removeListener(id: number): boolean {
    return this.router_.removeListener(id);
  }
}


export class PagePendingReceiver implements
    mojo.internal.interfaceSupport.PendingReceiver {

  handle: mojo.internal.interfaceSupport.Endpoint;
  constructor(handle: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  bindInBrowser(scope: string = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        'searchbox.mojom.Page',
        scope);
  }
}

export interface PageInterface {
  autocompleteResultChanged(result: AutocompleteResult): void;
  updateSelection(oldSelection: OmniboxPopupSelection, selection: OmniboxPopupSelection): void;
  setInputText(input: string): void;
  setThumbnail(thumbnailUrl: string): void;
}

export class PageRemote implements PageInterface {
  private proxy: mojo.internal.interfaceSupport.InterfaceRemoteBase<PagePendingReceiver>;
  $: mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<PagePendingReceiver>;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor(
      handle?: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PagePendingReceiver, handle);

    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  autocompleteResultChanged(
      result: AutocompleteResult): void {
    this.proxy.sendMessage(
        0,
        Page_AutocompleteResultChanged_ParamsSpec.$,
        null,
        [
          result
        ]);
  }

  updateSelection(
      oldSelection: OmniboxPopupSelection,
      selection: OmniboxPopupSelection): void {
    this.proxy.sendMessage(
        1,
        Page_UpdateSelection_ParamsSpec.$,
        null,
        [
          oldSelection,
          selection
        ]);
  }

  setInputText(
      input: string): void {
    this.proxy.sendMessage(
        2,
        Page_SetInputText_ParamsSpec.$,
        null,
        [
          input
        ]);
  }

  setThumbnail(
      thumbnailUrl: string): void {
    this.proxy.sendMessage(
        3,
        Page_SetThumbnail_ParamsSpec.$,
        null,
        [
          thumbnailUrl
        ]);
  }
};

/**
 * An object which receives request messages for the Page
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class PageReceiver {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<PageRemote>;

  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<PageRemote>;

  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;


  constructor(impl: PageInterface) {

    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PageRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        Page_AutocompleteResultChanged_ParamsSpec.$,
        null,
        impl.autocompleteResultChanged.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        Page_UpdateSelection_ParamsSpec.$,
        null,
        impl.updateSelection.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        Page_SetInputText_ParamsSpec.$,
        null,
        impl.setInputText.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        Page_SetThumbnail_ParamsSpec.$,
        null,
        impl.setThumbnail.bind(impl));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class Page {
  static get $interfaceName(): string {
    return "searchbox.mojom.Page";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   */
  static getRemote(): PageRemote {
    let remote = new PageRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}

/**
 * An object which receives request messages for the Page
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class PageCallbackRouter {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<PageRemote>;
  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<PageRemote>;
  router_: mojo.internal.interfaceSupport.CallbackRouter;

  autocompleteResultChanged: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  updateSelection: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  setInputText: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  setThumbnail: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PageRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    this.autocompleteResultChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        Page_AutocompleteResultChanged_ParamsSpec.$,
        null,
        this.autocompleteResultChanged.createReceiverHandler(false /* expectsResponse */));
    this.updateSelection =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        Page_UpdateSelection_ParamsSpec.$,
        null,
        this.updateSelection.createReceiverHandler(false /* expectsResponse */));
    this.setInputText =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        Page_SetInputText_ParamsSpec.$,
        null,
        this.setInputText.createReceiverHandler(false /* expectsResponse */));
    this.setThumbnail =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        Page_SetThumbnail_ParamsSpec.$,
        null,
        this.setThumbnail.createReceiverHandler(false /* expectsResponse */));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param id An ID returned by a prior call to addListener.
   * @return True iff the identified listener was found and removed.
   */
  removeListener(id: number): boolean {
    return this.router_.removeListener(id);
  }
}

export const ACMatchClassificationSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const ActionSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const SuggestionAnswerSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const AutocompleteMatchSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const SuggestionGroupSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const AutocompleteResultSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const OmniboxPopupSelectionSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_SetPage_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_OnFocusChanged_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_QueryAutocomplete_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_StopAutocomplete_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_OpenAutocompleteMatch_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_OnNavigationLikely_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_DeleteAutocompleteMatch_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_ToggleSuggestionGroupIdVisibility_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_ExecuteAction_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_PopupElementSizeChanged_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const PageHandler_OnThumbnailRemoved_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const Page_AutocompleteResultChanged_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const Page_UpdateSelection_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const Page_SetInputText_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const Page_SetThumbnail_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };




export interface ACMatchClassificationMojoType {
  offset: number;
  style: number;
}


export type ACMatchClassification = ACMatchClassificationMojoType;
mojo.internal.Struct(
    ACMatchClassificationSpec.$,
    'ACMatchClassification',
    [
      mojo.internal.StructField(
        'offset', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'style', 4,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface ActionMojoType {
  a11yLabel: mojoBase_mojom_String16;
  hint: mojoBase_mojom_String16;
  suggestionContents: mojoBase_mojom_String16;
  iconUrl: string;
}


export type Action = ActionMojoType;
mojo.internal.Struct(
    ActionSpec.$,
    'Action',
    [
      mojo.internal.StructField(
        'a11yLabel', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'hint', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'suggestionContents', 16,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'iconUrl', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 40],]);





export interface SuggestionAnswerMojoType {
  firstLine: mojoBase_mojom_String16;
  secondLine: mojoBase_mojom_String16;
}


export type SuggestionAnswer = SuggestionAnswerMojoType;
mojo.internal.Struct(
    SuggestionAnswerSpec.$,
    'SuggestionAnswer',
    [
      mojo.internal.StructField(
        'firstLine', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'secondLine', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface AutocompleteMatchMojoType {
  a11yLabel: mojoBase_mojom_String16;
  allowedToBeDefaultMatch: boolean;
  isWeatherAnswerSuggestion: (boolean | null);
  isRichSuggestion: boolean;
  isSearchType: boolean;
  swapContentsAndDescription: boolean;
  supportsDeletion: boolean;
  suggestionGroupId: number;
  actions: Action[];
  answer: (SuggestionAnswer | null);
  contents: mojoBase_mojom_String16;
  contentsClass: ACMatchClassification[];
  description: mojoBase_mojom_String16;
  descriptionClass: ACMatchClassification[];
  destinationUrl: url_mojom_Url;
  inlineAutocompletion: mojoBase_mojom_String16;
  fillIntoEdit: mojoBase_mojom_String16;
  iconUrl: string;
  imageDominantColor: string;
  imageUrl: string;
  type: string;
  removeButtonA11yLabel: mojoBase_mojom_String16;
  tailSuggestCommonPrefix: (mojoBase_mojom_String16 | null);
}


export type AutocompleteMatch = AutocompleteMatchMojoType;
mojo.internal.Struct(
    AutocompleteMatchSpec.$,
    'AutocompleteMatch',
    [
      mojo.internal.StructField(
        'a11yLabel', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'allowedToBeDefaultMatch', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'actions', 16,
        0,
        mojo.internal.Array(ActionSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'answer', 24,
        0,
        SuggestionAnswerSpec.$,
        null,
        true /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'contents', 32,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'contentsClass', 40,
        0,
        mojo.internal.Array(ACMatchClassificationSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'description', 48,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'descriptionClass', 56,
        0,
        mojo.internal.Array(ACMatchClassificationSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'destinationUrl', 64,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'inlineAutocompletion', 72,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'fillIntoEdit', 80,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'is_weather_answer_suggestion_$flag', 8,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
        {
          isPrimary: true,
          linkedValueFieldName: "is_weather_answer_suggestion_$value",
          originalFieldName: "isWeatherAnswerSuggestion",
        }
    ),
      mojo.internal.StructField(
        'is_weather_answer_suggestion_$value', 8,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
        {
          isPrimary: false,
          originalFieldName: "isWeatherAnswerSuggestion",
        }
    ),
      mojo.internal.StructField(
        'iconUrl', 88,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'imageDominantColor', 96,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'imageUrl', 104,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'isRichSuggestion', 8,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'isSearchType', 8,
        4,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'type', 112,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'removeButtonA11yLabel', 120,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'swapContentsAndDescription', 8,
        5,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'suggestionGroupId', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'supportsDeletion', 8,
        6,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'tailSuggestCommonPrefix', 128,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        true /* nullable */,
        0,
    ),
    ],
    [[0, 144],]);





export interface SuggestionGroupMojoType {
  header: mojoBase_mojom_String16;
  hideGroupA11yLabel: mojoBase_mojom_String16;
  showGroupA11yLabel: mojoBase_mojom_String16;
  hidden: boolean;
  renderType: RenderType;
  sideType: SideType;
}


export type SuggestionGroup = SuggestionGroupMojoType;
mojo.internal.Struct(
    SuggestionGroupSpec.$,
    'SuggestionGroup',
    [
      mojo.internal.StructField(
        'header', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'hideGroupA11yLabel', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'showGroupA11yLabel', 16,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'hidden', 24,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'renderType', 28,
        0,
        RenderTypeSpec.$,
        RenderType.kDefaultVertical,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'sideType', 32,
        0,
        SideTypeSpec.$,
        SideType.kDefaultPrimary,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 48],]);





export interface AutocompleteResultMojoType {
  input: mojoBase_mojom_String16;
  suggestionGroupsMap: {[key: number]: SuggestionGroup};
  matches: AutocompleteMatch[];
}


export type AutocompleteResult = AutocompleteResultMojoType;
mojo.internal.Struct(
    AutocompleteResultSpec.$,
    'AutocompleteResult',
    [
      mojo.internal.StructField(
        'input', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'suggestionGroupsMap', 8,
        0,
        mojo.internal.Map(mojo.internal.Int32, SuggestionGroupSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'matches', 16,
        0,
        mojo.internal.Array(AutocompleteMatchSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 32],]);





export interface OmniboxPopupSelectionMojoType {
  line: number;
  actionIndex: number;
  state: SelectionLineState;
}


export type OmniboxPopupSelection = OmniboxPopupSelectionMojoType;
mojo.internal.Struct(
    OmniboxPopupSelectionSpec.$,
    'OmniboxPopupSelection',
    [
      mojo.internal.StructField(
        'line', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'state', 4,
        0,
        SelectionLineStateSpec.$,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'actionIndex', 1,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface PageHandler_SetPage_ParamsMojoType {
  page: PageRemote;
}


export type PageHandler_SetPage_Params = PageHandler_SetPage_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_SetPage_ParamsSpec.$,
    'PageHandler_SetPage_Params',
    [
      mojo.internal.StructField(
        'page', 0,
        0,
        mojo.internal.InterfaceProxy(PageRemote),
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface PageHandler_OnFocusChanged_ParamsMojoType {
  focused: boolean;
}


export type PageHandler_OnFocusChanged_Params = PageHandler_OnFocusChanged_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_OnFocusChanged_ParamsSpec.$,
    'PageHandler_OnFocusChanged_Params',
    [
      mojo.internal.StructField(
        'focused', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface PageHandler_QueryAutocomplete_ParamsMojoType {
  input: mojoBase_mojom_String16;
  preventInlineAutocomplete: boolean;
}


export type PageHandler_QueryAutocomplete_Params = PageHandler_QueryAutocomplete_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_QueryAutocomplete_ParamsSpec.$,
    'PageHandler_QueryAutocomplete_Params',
    [
      mojo.internal.StructField(
        'input', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'preventInlineAutocomplete', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface PageHandler_StopAutocomplete_ParamsMojoType {
  clearResult: boolean;
}


export type PageHandler_StopAutocomplete_Params = PageHandler_StopAutocomplete_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_StopAutocomplete_ParamsSpec.$,
    'PageHandler_StopAutocomplete_Params',
    [
      mojo.internal.StructField(
        'clearResult', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface PageHandler_OpenAutocompleteMatch_ParamsMojoType {
  line: number;
  areMatchesShowing: boolean;
  altKey: boolean;
  ctrlKey: boolean;
  metaKey: boolean;
  shiftKey: boolean;
  mouseButton: number;
  url: url_mojom_Url;
}


export type PageHandler_OpenAutocompleteMatch_Params = PageHandler_OpenAutocompleteMatch_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_OpenAutocompleteMatch_ParamsSpec.$,
    'PageHandler_OpenAutocompleteMatch_Params',
    [
      mojo.internal.StructField(
        'line', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'url', 8,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'areMatchesShowing', 1,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'mouseButton', 2,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'altKey', 1,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'ctrlKey', 1,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'metaKey', 1,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'shiftKey', 1,
        4,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface PageHandler_OnNavigationLikely_ParamsMojoType {
  line: number;
  navigationPredictor: omnibox_mojom_NavigationPredictor;
  url: url_mojom_Url;
}


export type PageHandler_OnNavigationLikely_Params = PageHandler_OnNavigationLikely_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_OnNavigationLikely_ParamsSpec.$,
    'PageHandler_OnNavigationLikely_Params',
    [
      mojo.internal.StructField(
        'line', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'url', 8,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'navigationPredictor', 4,
        0,
        omnibox_mojom_NavigationPredictorSpec.$,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface PageHandler_DeleteAutocompleteMatch_ParamsMojoType {
  line: number;
  url: url_mojom_Url;
}


export type PageHandler_DeleteAutocompleteMatch_Params = PageHandler_DeleteAutocompleteMatch_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_DeleteAutocompleteMatch_ParamsSpec.$,
    'PageHandler_DeleteAutocompleteMatch_Params',
    [
      mojo.internal.StructField(
        'line', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'url', 8,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface PageHandler_ToggleSuggestionGroupIdVisibility_ParamsMojoType {
  suggestionGroupId: number;
}


export type PageHandler_ToggleSuggestionGroupIdVisibility_Params = PageHandler_ToggleSuggestionGroupIdVisibility_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_ToggleSuggestionGroupIdVisibility_ParamsSpec.$,
    'PageHandler_ToggleSuggestionGroupIdVisibility_Params',
    [
      mojo.internal.StructField(
        'suggestionGroupId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface PageHandler_ExecuteAction_ParamsMojoType {
  line: number;
  actionIndex: number;
  mouseButton: number;
  altKey: boolean;
  ctrlKey: boolean;
  metaKey: boolean;
  shiftKey: boolean;
  url: url_mojom_Url;
  matchSelectionTimestamp: mojoBase_mojom_TimeTicks;
}


export type PageHandler_ExecuteAction_Params = PageHandler_ExecuteAction_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_ExecuteAction_ParamsSpec.$,
    'PageHandler_ExecuteAction_Params',
    [
      mojo.internal.StructField(
        'line', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'actionIndex', 1,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'url', 8,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'matchSelectionTimestamp', 16,
        0,
        mojoBase_mojom_TimeTicksSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'mouseButton', 2,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'altKey', 3,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'ctrlKey', 3,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'metaKey', 3,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'shiftKey', 3,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 32],]);





export interface PageHandler_PopupElementSizeChanged_ParamsMojoType {
  size: gfx_mojom_Size;
}


export type PageHandler_PopupElementSizeChanged_Params = PageHandler_PopupElementSizeChanged_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_PopupElementSizeChanged_ParamsSpec.$,
    'PageHandler_PopupElementSizeChanged_Params',
    [
      mojo.internal.StructField(
        'size', 0,
        0,
        gfx_mojom_SizeSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface PageHandler_OnThumbnailRemoved_ParamsMojoType {
}


export type PageHandler_OnThumbnailRemoved_Params = PageHandler_OnThumbnailRemoved_ParamsMojoType;
mojo.internal.Struct(
    PageHandler_OnThumbnailRemoved_ParamsSpec.$,
    'PageHandler_OnThumbnailRemoved_Params',
    [
    ],
    [[0, 8],]);





export interface Page_AutocompleteResultChanged_ParamsMojoType {
  result: AutocompleteResult;
}


export type Page_AutocompleteResultChanged_Params = Page_AutocompleteResultChanged_ParamsMojoType;
mojo.internal.Struct(
    Page_AutocompleteResultChanged_ParamsSpec.$,
    'Page_AutocompleteResultChanged_Params',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        AutocompleteResultSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface Page_UpdateSelection_ParamsMojoType {
  oldSelection: OmniboxPopupSelection;
  selection: OmniboxPopupSelection;
}


export type Page_UpdateSelection_Params = Page_UpdateSelection_ParamsMojoType;
mojo.internal.Struct(
    Page_UpdateSelection_ParamsSpec.$,
    'Page_UpdateSelection_Params',
    [
      mojo.internal.StructField(
        'oldSelection', 0,
        0,
        OmniboxPopupSelectionSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'selection', 8,
        0,
        OmniboxPopupSelectionSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface Page_SetInputText_ParamsMojoType {
  input: string;
}


export type Page_SetInputText_Params = Page_SetInputText_ParamsMojoType;
mojo.internal.Struct(
    Page_SetInputText_ParamsSpec.$,
    'Page_SetInputText_Params',
    [
      mojo.internal.StructField(
        'input', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface Page_SetThumbnail_ParamsMojoType {
  thumbnailUrl: string;
}


export type Page_SetThumbnail_Params = Page_SetThumbnail_ParamsMojoType;
mojo.internal.Struct(
    Page_SetThumbnail_ParamsSpec.$,
    'Page_SetThumbnail_Params',
    [
      mojo.internal.StructField(
        'thumbnailUrl', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);



