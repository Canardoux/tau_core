// ui/webui/resources/cr_components/customize_color_scheme_mode/customize_color_scheme_mode.mojom-webui.ts is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '//resources/mojo/mojo/public/js/bindings.js';






export const ColorSchemeModeSpec: { $: mojo.internal.MojomType } = { $: mojo.internal.Enum() };

export enum ColorSchemeMode {

  MIN_VALUE = 0,
  MAX_VALUE = 2,
  kSystem = 0,
  kLight = 1,
  kDark = 2,
}



export class CustomizeColorSchemeModeHandlerFactoryPendingReceiver implements
    mojo.internal.interfaceSupport.PendingReceiver {

  handle: mojo.internal.interfaceSupport.Endpoint;
  constructor(handle: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  bindInBrowser(scope: string = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        'customize_color_scheme_mode.mojom.CustomizeColorSchemeModeHandlerFactory',
        scope);
  }
}

export interface CustomizeColorSchemeModeHandlerFactoryInterface {
  createCustomizeColorSchemeModeHandler(pendingClient: CustomizeColorSchemeModeClientRemote, pendingHandler: CustomizeColorSchemeModeHandlerPendingReceiver): void;
}

export class CustomizeColorSchemeModeHandlerFactoryRemote implements CustomizeColorSchemeModeHandlerFactoryInterface {
  private proxy: mojo.internal.interfaceSupport.InterfaceRemoteBase<CustomizeColorSchemeModeHandlerFactoryPendingReceiver>;
  $: mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<CustomizeColorSchemeModeHandlerFactoryPendingReceiver>;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor(
      handle?: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CustomizeColorSchemeModeHandlerFactoryPendingReceiver, handle);

    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  createCustomizeColorSchemeModeHandler(
      pendingClient: CustomizeColorSchemeModeClientRemote,
      pendingHandler: CustomizeColorSchemeModeHandlerPendingReceiver): void {
    this.proxy.sendMessage(
        0,
        CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_ParamsSpec.$,
        null,
        [
          pendingClient,
          pendingHandler
        ]);
  }
};

/**
 * An object which receives request messages for the CustomizeColorSchemeModeHandlerFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CustomizeColorSchemeModeHandlerFactoryReceiver {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<CustomizeColorSchemeModeHandlerFactoryRemote>;

  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<CustomizeColorSchemeModeHandlerFactoryRemote>;

  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;


  constructor(impl: CustomizeColorSchemeModeHandlerFactoryInterface) {

    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CustomizeColorSchemeModeHandlerFactoryRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_ParamsSpec.$,
        null,
        impl.createCustomizeColorSchemeModeHandler.bind(impl));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CustomizeColorSchemeModeHandlerFactory {
  static get $interfaceName(): string {
    return "customize_color_scheme_mode.mojom.CustomizeColorSchemeModeHandlerFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   */
  static getRemote(): CustomizeColorSchemeModeHandlerFactoryRemote {
    let remote = new CustomizeColorSchemeModeHandlerFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}

/**
 * An object which receives request messages for the CustomizeColorSchemeModeHandlerFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CustomizeColorSchemeModeHandlerFactoryCallbackRouter {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<CustomizeColorSchemeModeHandlerFactoryRemote>;
  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<CustomizeColorSchemeModeHandlerFactoryRemote>;
  router_: mojo.internal.interfaceSupport.CallbackRouter;

  createCustomizeColorSchemeModeHandler: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CustomizeColorSchemeModeHandlerFactoryRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    this.createCustomizeColorSchemeModeHandler =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_ParamsSpec.$,
        null,
        this.createCustomizeColorSchemeModeHandler.createReceiverHandler(false /* expectsResponse */));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param id An ID returned by a prior call to addListener.
   * @return True iff the identified listener was found and removed.
   */
  removeListener(id: number): boolean {
    return this.router_.removeListener(id);
  }
}


export class CustomizeColorSchemeModeHandlerPendingReceiver implements
    mojo.internal.interfaceSupport.PendingReceiver {

  handle: mojo.internal.interfaceSupport.Endpoint;
  constructor(handle: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  bindInBrowser(scope: string = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        'customize_color_scheme_mode.mojom.CustomizeColorSchemeModeHandler',
        scope);
  }
}

export interface CustomizeColorSchemeModeHandlerInterface {
  setColorSchemeMode(colorSchemeMode: ColorSchemeMode): void;
  initializeColorSchemeMode(): void;
}

export class CustomizeColorSchemeModeHandlerRemote implements CustomizeColorSchemeModeHandlerInterface {
  private proxy: mojo.internal.interfaceSupport.InterfaceRemoteBase<CustomizeColorSchemeModeHandlerPendingReceiver>;
  $: mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<CustomizeColorSchemeModeHandlerPendingReceiver>;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor(
      handle?: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CustomizeColorSchemeModeHandlerPendingReceiver, handle);

    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  setColorSchemeMode(
      colorSchemeMode: ColorSchemeMode): void {
    this.proxy.sendMessage(
        0,
        CustomizeColorSchemeModeHandler_SetColorSchemeMode_ParamsSpec.$,
        null,
        [
          colorSchemeMode
        ]);
  }

  initializeColorSchemeMode(): void {
    this.proxy.sendMessage(
        1,
        CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the CustomizeColorSchemeModeHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CustomizeColorSchemeModeHandlerReceiver {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<CustomizeColorSchemeModeHandlerRemote>;

  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<CustomizeColorSchemeModeHandlerRemote>;

  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;


  constructor(impl: CustomizeColorSchemeModeHandlerInterface) {

    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CustomizeColorSchemeModeHandlerRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CustomizeColorSchemeModeHandler_SetColorSchemeMode_ParamsSpec.$,
        null,
        impl.setColorSchemeMode.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_ParamsSpec.$,
        null,
        impl.initializeColorSchemeMode.bind(impl));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CustomizeColorSchemeModeHandler {
  static get $interfaceName(): string {
    return "customize_color_scheme_mode.mojom.CustomizeColorSchemeModeHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   */
  static getRemote(): CustomizeColorSchemeModeHandlerRemote {
    let remote = new CustomizeColorSchemeModeHandlerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}

/**
 * An object which receives request messages for the CustomizeColorSchemeModeHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CustomizeColorSchemeModeHandlerCallbackRouter {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<CustomizeColorSchemeModeHandlerRemote>;
  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<CustomizeColorSchemeModeHandlerRemote>;
  router_: mojo.internal.interfaceSupport.CallbackRouter;

  setColorSchemeMode: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  initializeColorSchemeMode: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CustomizeColorSchemeModeHandlerRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    this.setColorSchemeMode =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CustomizeColorSchemeModeHandler_SetColorSchemeMode_ParamsSpec.$,
        null,
        this.setColorSchemeMode.createReceiverHandler(false /* expectsResponse */));
    this.initializeColorSchemeMode =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_ParamsSpec.$,
        null,
        this.initializeColorSchemeMode.createReceiverHandler(false /* expectsResponse */));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param id An ID returned by a prior call to addListener.
   * @return True iff the identified listener was found and removed.
   */
  removeListener(id: number): boolean {
    return this.router_.removeListener(id);
  }
}


export class CustomizeColorSchemeModeClientPendingReceiver implements
    mojo.internal.interfaceSupport.PendingReceiver {

  handle: mojo.internal.interfaceSupport.Endpoint;
  constructor(handle: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  bindInBrowser(scope: string = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        'customize_color_scheme_mode.mojom.CustomizeColorSchemeModeClient',
        scope);
  }
}

export interface CustomizeColorSchemeModeClientInterface {
  setColorSchemeMode(colorSchemeMode: ColorSchemeMode): void;
}

export class CustomizeColorSchemeModeClientRemote implements CustomizeColorSchemeModeClientInterface {
  private proxy: mojo.internal.interfaceSupport.InterfaceRemoteBase<CustomizeColorSchemeModeClientPendingReceiver>;
  $: mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<CustomizeColorSchemeModeClientPendingReceiver>;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor(
      handle?: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CustomizeColorSchemeModeClientPendingReceiver, handle);

    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  setColorSchemeMode(
      colorSchemeMode: ColorSchemeMode): void {
    this.proxy.sendMessage(
        0,
        CustomizeColorSchemeModeClient_SetColorSchemeMode_ParamsSpec.$,
        null,
        [
          colorSchemeMode
        ]);
  }
};

/**
 * An object which receives request messages for the CustomizeColorSchemeModeClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CustomizeColorSchemeModeClientReceiver {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<CustomizeColorSchemeModeClientRemote>;

  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<CustomizeColorSchemeModeClientRemote>;

  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;


  constructor(impl: CustomizeColorSchemeModeClientInterface) {

    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CustomizeColorSchemeModeClientRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CustomizeColorSchemeModeClient_SetColorSchemeMode_ParamsSpec.$,
        null,
        impl.setColorSchemeMode.bind(impl));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CustomizeColorSchemeModeClient {
  static get $interfaceName(): string {
    return "customize_color_scheme_mode.mojom.CustomizeColorSchemeModeClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   */
  static getRemote(): CustomizeColorSchemeModeClientRemote {
    let remote = new CustomizeColorSchemeModeClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}

/**
 * An object which receives request messages for the CustomizeColorSchemeModeClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CustomizeColorSchemeModeClientCallbackRouter {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<CustomizeColorSchemeModeClientRemote>;
  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<CustomizeColorSchemeModeClientRemote>;
  router_: mojo.internal.interfaceSupport.CallbackRouter;

  setColorSchemeMode: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CustomizeColorSchemeModeClientRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    this.setColorSchemeMode =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CustomizeColorSchemeModeClient_SetColorSchemeMode_ParamsSpec.$,
        null,
        this.setColorSchemeMode.createReceiverHandler(false /* expectsResponse */));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param id An ID returned by a prior call to addListener.
   * @return True iff the identified listener was found and removed.
   */
  removeListener(id: number): boolean {
    return this.router_.removeListener(id);
  }
}

export const CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const CustomizeColorSchemeModeHandler_SetColorSchemeMode_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const CustomizeColorSchemeModeClient_SetColorSchemeMode_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };




export interface CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_ParamsMojoType {
  pendingClient: CustomizeColorSchemeModeClientRemote;
  pendingHandler: CustomizeColorSchemeModeHandlerPendingReceiver;
}


export type CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_Params = CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_ParamsMojoType;
mojo.internal.Struct(
    CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_ParamsSpec.$,
    'CustomizeColorSchemeModeHandlerFactory_CreateCustomizeColorSchemeModeHandler_Params',
    [
      mojo.internal.StructField(
        'pendingClient', 0,
        0,
        mojo.internal.InterfaceProxy(CustomizeColorSchemeModeClientRemote),
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'pendingHandler', 8,
        0,
        mojo.internal.InterfaceRequest(CustomizeColorSchemeModeHandlerPendingReceiver),
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface CustomizeColorSchemeModeHandler_SetColorSchemeMode_ParamsMojoType {
  colorSchemeMode: ColorSchemeMode;
}


export type CustomizeColorSchemeModeHandler_SetColorSchemeMode_Params = CustomizeColorSchemeModeHandler_SetColorSchemeMode_ParamsMojoType;
mojo.internal.Struct(
    CustomizeColorSchemeModeHandler_SetColorSchemeMode_ParamsSpec.$,
    'CustomizeColorSchemeModeHandler_SetColorSchemeMode_Params',
    [
      mojo.internal.StructField(
        'colorSchemeMode', 0,
        0,
        ColorSchemeModeSpec.$,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_ParamsMojoType {
}


export type CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_Params = CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_ParamsMojoType;
mojo.internal.Struct(
    CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_ParamsSpec.$,
    'CustomizeColorSchemeModeHandler_InitializeColorSchemeMode_Params',
    [
    ],
    [[0, 8],]);





export interface CustomizeColorSchemeModeClient_SetColorSchemeMode_ParamsMojoType {
  colorSchemeMode: ColorSchemeMode;
}


export type CustomizeColorSchemeModeClient_SetColorSchemeMode_Params = CustomizeColorSchemeModeClient_SetColorSchemeMode_ParamsMojoType;
mojo.internal.Struct(
    CustomizeColorSchemeModeClient_SetColorSchemeMode_ParamsSpec.$,
    'CustomizeColorSchemeModeClient_SetColorSchemeMode_Params',
    [
      mojo.internal.StructField(
        'colorSchemeMode', 0,
        0,
        ColorSchemeModeSpec.$,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);



