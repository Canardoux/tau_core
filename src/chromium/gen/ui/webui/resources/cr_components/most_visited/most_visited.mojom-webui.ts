// ui/webui/resources/cr_components/most_visited/most_visited.mojom-webui.ts is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '//resources/mojo/mojo/public/js/bindings.js';

import {
  TextDirection as mojoBase_mojom_TextDirection,
  TextDirectionSpec as mojoBase_mojom_TextDirectionSpec
} from '//resources/mojo/mojo/public/mojom/base/text_direction.mojom-webui.js';
import {
  SkColor as skia_mojom_SkColor,
  SkColorSpec as skia_mojom_SkColorSpec
} from '//resources/mojo/skia/public/mojom/skcolor.mojom-webui.js';
import {
  Url as url_mojom_Url,
  UrlSpec as url_mojom_UrlSpec
} from '//resources/mojo/url/mojom/url.mojom-webui.js';







export class MostVisitedPageHandlerFactoryPendingReceiver implements
    mojo.internal.interfaceSupport.PendingReceiver {

  handle: mojo.internal.interfaceSupport.Endpoint;
  constructor(handle: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  bindInBrowser(scope: string = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        'most_visited.mojom.MostVisitedPageHandlerFactory',
        scope);
  }
}

export interface MostVisitedPageHandlerFactoryInterface {
  createPageHandler(page: MostVisitedPageRemote, handler: MostVisitedPageHandlerPendingReceiver): void;
}

export class MostVisitedPageHandlerFactoryRemote implements MostVisitedPageHandlerFactoryInterface {
  private proxy: mojo.internal.interfaceSupport.InterfaceRemoteBase<MostVisitedPageHandlerFactoryPendingReceiver>;
  $: mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<MostVisitedPageHandlerFactoryPendingReceiver>;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor(
      handle?: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MostVisitedPageHandlerFactoryPendingReceiver, handle);

    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  createPageHandler(
      page: MostVisitedPageRemote,
      handler: MostVisitedPageHandlerPendingReceiver): void {
    this.proxy.sendMessage(
        0,
        MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec.$,
        null,
        [
          page,
          handler
        ]);
  }
};

/**
 * An object which receives request messages for the MostVisitedPageHandlerFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MostVisitedPageHandlerFactoryReceiver {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<MostVisitedPageHandlerFactoryRemote>;

  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<MostVisitedPageHandlerFactoryRemote>;

  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;


  constructor(impl: MostVisitedPageHandlerFactoryInterface) {

    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MostVisitedPageHandlerFactoryRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec.$,
        null,
        impl.createPageHandler.bind(impl));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MostVisitedPageHandlerFactory {
  static get $interfaceName(): string {
    return "most_visited.mojom.MostVisitedPageHandlerFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   */
  static getRemote(): MostVisitedPageHandlerFactoryRemote {
    let remote = new MostVisitedPageHandlerFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}

/**
 * An object which receives request messages for the MostVisitedPageHandlerFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MostVisitedPageHandlerFactoryCallbackRouter {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<MostVisitedPageHandlerFactoryRemote>;
  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<MostVisitedPageHandlerFactoryRemote>;
  router_: mojo.internal.interfaceSupport.CallbackRouter;

  createPageHandler: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MostVisitedPageHandlerFactoryRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    this.createPageHandler =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec.$,
        null,
        this.createPageHandler.createReceiverHandler(false /* expectsResponse */));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param id An ID returned by a prior call to addListener.
   * @return True iff the identified listener was found and removed.
   */
  removeListener(id: number): boolean {
    return this.router_.removeListener(id);
  }
}


export class MostVisitedPageHandlerPendingReceiver implements
    mojo.internal.interfaceSupport.PendingReceiver {

  handle: mojo.internal.interfaceSupport.Endpoint;
  constructor(handle: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  bindInBrowser(scope: string = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        'most_visited.mojom.MostVisitedPageHandler',
        scope);
  }
}

export interface MostVisitedPageHandlerInterface {
  addMostVisitedTile(url: url_mojom_Url, title: string): Promise<{
        success: boolean, }>;
  deleteMostVisitedTile(url: url_mojom_Url): void;
  reorderMostVisitedTile(url: url_mojom_Url, newPos: number): void;
  restoreMostVisitedDefaults(): void;
  undoMostVisitedTileAction(): void;
  updateMostVisitedInfo(): void;
  updateMostVisitedTile(url: url_mojom_Url, newUrl: url_mojom_Url, newTitle: string): Promise<{
        success: boolean, }>;
  prerenderMostVisitedTile(tile: MostVisitedTile, isHoverTrigger: boolean): void;
  preconnectMostVisitedTile(tile: MostVisitedTile): void;
  cancelPrerender(): void;
  onMostVisitedTilesRendered(tiles: MostVisitedTile[], time: number): void;
  onMostVisitedTileNavigation(tile: MostVisitedTile, index: number, mouseButton: number, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): void;
}

export class MostVisitedPageHandlerRemote implements MostVisitedPageHandlerInterface {
  private proxy: mojo.internal.interfaceSupport.InterfaceRemoteBase<MostVisitedPageHandlerPendingReceiver>;
  $: mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<MostVisitedPageHandlerPendingReceiver>;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor(
      handle?: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MostVisitedPageHandlerPendingReceiver, handle);

    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  addMostVisitedTile(
      url: url_mojom_Url,
      title: string): Promise<{
        success: boolean, }> {
    return this.proxy.sendMessage(
        0,
        MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec.$,
        MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec.$,
        [
          url,
          title
        ]);
  }

  deleteMostVisitedTile(
      url: url_mojom_Url): void {
    this.proxy.sendMessage(
        1,
        MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec.$,
        null,
        [
          url
        ]);
  }

  reorderMostVisitedTile(
      url: url_mojom_Url,
      newPos: number): void {
    this.proxy.sendMessage(
        2,
        MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec.$,
        null,
        [
          url,
          newPos
        ]);
  }

  restoreMostVisitedDefaults(): void {
    this.proxy.sendMessage(
        3,
        MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec.$,
        null,
        [
        ]);
  }

  undoMostVisitedTileAction(): void {
    this.proxy.sendMessage(
        4,
        MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec.$,
        null,
        [
        ]);
  }

  updateMostVisitedInfo(): void {
    this.proxy.sendMessage(
        5,
        MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec.$,
        null,
        [
        ]);
  }

  updateMostVisitedTile(
      url: url_mojom_Url,
      newUrl: url_mojom_Url,
      newTitle: string): Promise<{
        success: boolean, }> {
    return this.proxy.sendMessage(
        6,
        MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec.$,
        MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec.$,
        [
          url,
          newUrl,
          newTitle
        ]);
  }

  prerenderMostVisitedTile(
      tile: MostVisitedTile,
      isHoverTrigger: boolean): void {
    this.proxy.sendMessage(
        7,
        MostVisitedPageHandler_PrerenderMostVisitedTile_ParamsSpec.$,
        null,
        [
          tile,
          isHoverTrigger
        ]);
  }

  preconnectMostVisitedTile(
      tile: MostVisitedTile): void {
    this.proxy.sendMessage(
        8,
        MostVisitedPageHandler_PreconnectMostVisitedTile_ParamsSpec.$,
        null,
        [
          tile
        ]);
  }

  cancelPrerender(): void {
    this.proxy.sendMessage(
        9,
        MostVisitedPageHandler_CancelPrerender_ParamsSpec.$,
        null,
        [
        ]);
  }

  onMostVisitedTilesRendered(
      tiles: MostVisitedTile[],
      time: number): void {
    this.proxy.sendMessage(
        10,
        MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec.$,
        null,
        [
          tiles,
          time
        ]);
  }

  onMostVisitedTileNavigation(
      tile: MostVisitedTile,
      index: number,
      mouseButton: number,
      altKey: boolean,
      ctrlKey: boolean,
      metaKey: boolean,
      shiftKey: boolean): void {
    this.proxy.sendMessage(
        11,
        MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec.$,
        null,
        [
          tile,
          index,
          mouseButton,
          altKey,
          ctrlKey,
          metaKey,
          shiftKey
        ]);
  }
};

/**
 * An object which receives request messages for the MostVisitedPageHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MostVisitedPageHandlerReceiver {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<MostVisitedPageHandlerRemote>;

  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<MostVisitedPageHandlerRemote>;

  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;


  constructor(impl: MostVisitedPageHandlerInterface) {

    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MostVisitedPageHandlerRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec.$,
        MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec.$,
        impl.addMostVisitedTile.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec.$,
        null,
        impl.deleteMostVisitedTile.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec.$,
        null,
        impl.reorderMostVisitedTile.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec.$,
        null,
        impl.restoreMostVisitedDefaults.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec.$,
        null,
        impl.undoMostVisitedTileAction.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec.$,
        null,
        impl.updateMostVisitedInfo.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec.$,
        MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec.$,
        impl.updateMostVisitedTile.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        MostVisitedPageHandler_PrerenderMostVisitedTile_ParamsSpec.$,
        null,
        impl.prerenderMostVisitedTile.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        MostVisitedPageHandler_PreconnectMostVisitedTile_ParamsSpec.$,
        null,
        impl.preconnectMostVisitedTile.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        MostVisitedPageHandler_CancelPrerender_ParamsSpec.$,
        null,
        impl.cancelPrerender.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec.$,
        null,
        impl.onMostVisitedTilesRendered.bind(impl));
    this.helper_internal_.registerHandler(
        11,
        MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec.$,
        null,
        impl.onMostVisitedTileNavigation.bind(impl));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MostVisitedPageHandler {
  static get $interfaceName(): string {
    return "most_visited.mojom.MostVisitedPageHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   */
  static getRemote(): MostVisitedPageHandlerRemote {
    let remote = new MostVisitedPageHandlerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}

/**
 * An object which receives request messages for the MostVisitedPageHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MostVisitedPageHandlerCallbackRouter {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<MostVisitedPageHandlerRemote>;
  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<MostVisitedPageHandlerRemote>;
  router_: mojo.internal.interfaceSupport.CallbackRouter;

  addMostVisitedTile: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  deleteMostVisitedTile: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  reorderMostVisitedTile: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  restoreMostVisitedDefaults: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  undoMostVisitedTileAction: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  updateMostVisitedInfo: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  updateMostVisitedTile: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  prerenderMostVisitedTile: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  preconnectMostVisitedTile: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  cancelPrerender: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onMostVisitedTilesRendered: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onMostVisitedTileNavigation: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MostVisitedPageHandlerRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    this.addMostVisitedTile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec.$,
        MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec.$,
        this.addMostVisitedTile.createReceiverHandler(true /* expectsResponse */));
    this.deleteMostVisitedTile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec.$,
        null,
        this.deleteMostVisitedTile.createReceiverHandler(false /* expectsResponse */));
    this.reorderMostVisitedTile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec.$,
        null,
        this.reorderMostVisitedTile.createReceiverHandler(false /* expectsResponse */));
    this.restoreMostVisitedDefaults =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec.$,
        null,
        this.restoreMostVisitedDefaults.createReceiverHandler(false /* expectsResponse */));
    this.undoMostVisitedTileAction =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec.$,
        null,
        this.undoMostVisitedTileAction.createReceiverHandler(false /* expectsResponse */));
    this.updateMostVisitedInfo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec.$,
        null,
        this.updateMostVisitedInfo.createReceiverHandler(false /* expectsResponse */));
    this.updateMostVisitedTile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec.$,
        MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec.$,
        this.updateMostVisitedTile.createReceiverHandler(true /* expectsResponse */));
    this.prerenderMostVisitedTile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        MostVisitedPageHandler_PrerenderMostVisitedTile_ParamsSpec.$,
        null,
        this.prerenderMostVisitedTile.createReceiverHandler(false /* expectsResponse */));
    this.preconnectMostVisitedTile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        MostVisitedPageHandler_PreconnectMostVisitedTile_ParamsSpec.$,
        null,
        this.preconnectMostVisitedTile.createReceiverHandler(false /* expectsResponse */));
    this.cancelPrerender =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        MostVisitedPageHandler_CancelPrerender_ParamsSpec.$,
        null,
        this.cancelPrerender.createReceiverHandler(false /* expectsResponse */));
    this.onMostVisitedTilesRendered =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec.$,
        null,
        this.onMostVisitedTilesRendered.createReceiverHandler(false /* expectsResponse */));
    this.onMostVisitedTileNavigation =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        11,
        MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec.$,
        null,
        this.onMostVisitedTileNavigation.createReceiverHandler(false /* expectsResponse */));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param id An ID returned by a prior call to addListener.
   * @return True iff the identified listener was found and removed.
   */
  removeListener(id: number): boolean {
    return this.router_.removeListener(id);
  }
}


export class MostVisitedPagePendingReceiver implements
    mojo.internal.interfaceSupport.PendingReceiver {

  handle: mojo.internal.interfaceSupport.Endpoint;
  constructor(handle: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  bindInBrowser(scope: string = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        'most_visited.mojom.MostVisitedPage',
        scope);
  }
}

export interface MostVisitedPageInterface {
  setMostVisitedInfo(info: MostVisitedInfo): void;
}

export class MostVisitedPageRemote implements MostVisitedPageInterface {
  private proxy: mojo.internal.interfaceSupport.InterfaceRemoteBase<MostVisitedPagePendingReceiver>;
  $: mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<MostVisitedPagePendingReceiver>;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor(
      handle?: MojoHandle|mojo.internal.interfaceSupport.Endpoint) {
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MostVisitedPagePendingReceiver, handle);

    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  setMostVisitedInfo(
      info: MostVisitedInfo): void {
    this.proxy.sendMessage(
        0,
        MostVisitedPage_SetMostVisitedInfo_ParamsSpec.$,
        null,
        [
          info
        ]);
  }
};

/**
 * An object which receives request messages for the MostVisitedPage
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MostVisitedPageReceiver {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<MostVisitedPageRemote>;

  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<MostVisitedPageRemote>;

  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;


  constructor(impl: MostVisitedPageInterface) {

    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MostVisitedPageRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MostVisitedPage_SetMostVisitedInfo_ParamsSpec.$,
        null,
        impl.setMostVisitedInfo.bind(impl));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MostVisitedPage {
  static get $interfaceName(): string {
    return "most_visited.mojom.MostVisitedPage";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   */
  static getRemote(): MostVisitedPageRemote {
    let remote = new MostVisitedPageRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}

/**
 * An object which receives request messages for the MostVisitedPage
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MostVisitedPageCallbackRouter {
  private helper_internal_: mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<MostVisitedPageRemote>;
  $: mojo.internal.interfaceSupport.InterfaceReceiverHelper<MostVisitedPageRemote>;
  router_: mojo.internal.interfaceSupport.CallbackRouter;

  setMostVisitedInfo: mojo.internal.interfaceSupport.InterfaceCallbackReceiver;
  onConnectionError: mojo.internal.interfaceSupport.ConnectionErrorEventRouter;

  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MostVisitedPageRemote);

    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    this.setMostVisitedInfo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MostVisitedPage_SetMostVisitedInfo_ParamsSpec.$,
        null,
        this.setMostVisitedInfo.createReceiverHandler(false /* expectsResponse */));
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param id An ID returned by a prior call to addListener.
   * @return True iff the identified listener was found and removed.
   */
  removeListener(id: number): boolean {
    return this.router_.removeListener(id);
  }
}

export const MostVisitedTileSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedThemeSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedInfoSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_PrerenderMostVisitedTile_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_PreconnectMostVisitedTile_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_CancelPrerender_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };

export const MostVisitedPage_SetMostVisitedInfo_ParamsSpec: { $: mojo.internal.MojomType } =
    { $: {} as unknown as mojo.internal.MojomType };




export interface MostVisitedTileMojoType {
  title: string;
  titleDirection: mojoBase_mojom_TextDirection;
  isQueryTile: boolean;
  url: url_mojom_Url;
  source: number;
  titleSource: number;
}


export type MostVisitedTile = MostVisitedTileMojoType;
mojo.internal.Struct(
    MostVisitedTileSpec.$,
    'MostVisitedTile',
    [
      mojo.internal.StructField(
        'title', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'titleDirection', 8,
        0,
        mojoBase_mojom_TextDirectionSpec.$,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'url', 16,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'isQueryTile', 12,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'source', 24,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'titleSource', 28,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 40],]);





export interface MostVisitedThemeMojoType {
  backgroundColor: skia_mojom_SkColor;
  useWhiteTileIcon: boolean;
  isDark: boolean;
}


export type MostVisitedTheme = MostVisitedThemeMojoType;
mojo.internal.Struct(
    MostVisitedThemeSpec.$,
    'MostVisitedTheme',
    [
      mojo.internal.StructField(
        'backgroundColor', 0,
        0,
        skia_mojom_SkColorSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'useWhiteTileIcon', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'isDark', 8,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface MostVisitedInfoMojoType {
  customLinksEnabled: boolean;
  visible: boolean;
  tiles: MostVisitedTile[];
}


export type MostVisitedInfo = MostVisitedInfoMojoType;
mojo.internal.Struct(
    MostVisitedInfoSpec.$,
    'MostVisitedInfo',
    [
      mojo.internal.StructField(
        'customLinksEnabled', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'visible', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'tiles', 8,
        0,
        mojo.internal.Array(MostVisitedTileSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface MostVisitedPageHandlerFactory_CreatePageHandler_ParamsMojoType {
  page: MostVisitedPageRemote;
  handler: MostVisitedPageHandlerPendingReceiver;
}


export type MostVisitedPageHandlerFactory_CreatePageHandler_Params = MostVisitedPageHandlerFactory_CreatePageHandler_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec.$,
    'MostVisitedPageHandlerFactory_CreatePageHandler_Params',
    [
      mojo.internal.StructField(
        'page', 0,
        0,
        mojo.internal.InterfaceProxy(MostVisitedPageRemote),
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'handler', 8,
        0,
        mojo.internal.InterfaceRequest(MostVisitedPageHandlerPendingReceiver),
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface MostVisitedPageHandler_AddMostVisitedTile_ParamsMojoType {
  url: url_mojom_Url;
  title: string;
}


export type MostVisitedPageHandler_AddMostVisitedTile_Params = MostVisitedPageHandler_AddMostVisitedTile_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec.$,
    'MostVisitedPageHandler_AddMostVisitedTile_Params',
    [
      mojo.internal.StructField(
        'url', 0,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'title', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsMojoType {
  success: boolean;
}


export type MostVisitedPageHandler_AddMostVisitedTile_ResponseParams = MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec.$,
    'MostVisitedPageHandler_AddMostVisitedTile_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface MostVisitedPageHandler_DeleteMostVisitedTile_ParamsMojoType {
  url: url_mojom_Url;
}


export type MostVisitedPageHandler_DeleteMostVisitedTile_Params = MostVisitedPageHandler_DeleteMostVisitedTile_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec.$,
    'MostVisitedPageHandler_DeleteMostVisitedTile_Params',
    [
      mojo.internal.StructField(
        'url', 0,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface MostVisitedPageHandler_ReorderMostVisitedTile_ParamsMojoType {
  url: url_mojom_Url;
  newPos: number;
}


export type MostVisitedPageHandler_ReorderMostVisitedTile_Params = MostVisitedPageHandler_ReorderMostVisitedTile_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec.$,
    'MostVisitedPageHandler_ReorderMostVisitedTile_Params',
    [
      mojo.internal.StructField(
        'url', 0,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'newPos', 8,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsMojoType {
}


export type MostVisitedPageHandler_RestoreMostVisitedDefaults_Params = MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec.$,
    'MostVisitedPageHandler_RestoreMostVisitedDefaults_Params',
    [
    ],
    [[0, 8],]);





export interface MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsMojoType {
}


export type MostVisitedPageHandler_UndoMostVisitedTileAction_Params = MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec.$,
    'MostVisitedPageHandler_UndoMostVisitedTileAction_Params',
    [
    ],
    [[0, 8],]);





export interface MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsMojoType {
}


export type MostVisitedPageHandler_UpdateMostVisitedInfo_Params = MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec.$,
    'MostVisitedPageHandler_UpdateMostVisitedInfo_Params',
    [
    ],
    [[0, 8],]);





export interface MostVisitedPageHandler_UpdateMostVisitedTile_ParamsMojoType {
  url: url_mojom_Url;
  newUrl: url_mojom_Url;
  newTitle: string;
}


export type MostVisitedPageHandler_UpdateMostVisitedTile_Params = MostVisitedPageHandler_UpdateMostVisitedTile_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec.$,
    'MostVisitedPageHandler_UpdateMostVisitedTile_Params',
    [
      mojo.internal.StructField(
        'url', 0,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'newUrl', 8,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'newTitle', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 32],]);





export interface MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsMojoType {
  success: boolean;
}


export type MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParams = MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec.$,
    'MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface MostVisitedPageHandler_PrerenderMostVisitedTile_ParamsMojoType {
  tile: MostVisitedTile;
  isHoverTrigger: boolean;
}


export type MostVisitedPageHandler_PrerenderMostVisitedTile_Params = MostVisitedPageHandler_PrerenderMostVisitedTile_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_PrerenderMostVisitedTile_ParamsSpec.$,
    'MostVisitedPageHandler_PrerenderMostVisitedTile_Params',
    [
      mojo.internal.StructField(
        'tile', 0,
        0,
        MostVisitedTileSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'isHoverTrigger', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface MostVisitedPageHandler_PreconnectMostVisitedTile_ParamsMojoType {
  tile: MostVisitedTile;
}


export type MostVisitedPageHandler_PreconnectMostVisitedTile_Params = MostVisitedPageHandler_PreconnectMostVisitedTile_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_PreconnectMostVisitedTile_ParamsSpec.$,
    'MostVisitedPageHandler_PreconnectMostVisitedTile_Params',
    [
      mojo.internal.StructField(
        'tile', 0,
        0,
        MostVisitedTileSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);





export interface MostVisitedPageHandler_CancelPrerender_ParamsMojoType {
}


export type MostVisitedPageHandler_CancelPrerender_Params = MostVisitedPageHandler_CancelPrerender_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_CancelPrerender_ParamsSpec.$,
    'MostVisitedPageHandler_CancelPrerender_Params',
    [
    ],
    [[0, 8],]);





export interface MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsMojoType {
  tiles: MostVisitedTile[];
  time: number;
}


export type MostVisitedPageHandler_OnMostVisitedTilesRendered_Params = MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec.$,
    'MostVisitedPageHandler_OnMostVisitedTilesRendered_Params',
    [
      mojo.internal.StructField(
        'tiles', 0,
        0,
        mojo.internal.Array(MostVisitedTileSpec.$, false),
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'time', 8,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsMojoType {
  tile: MostVisitedTile;
  index: number;
  mouseButton: number;
  altKey: boolean;
  ctrlKey: boolean;
  metaKey: boolean;
  shiftKey: boolean;
}


export type MostVisitedPageHandler_OnMostVisitedTileNavigation_Params = MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec.$,
    'MostVisitedPageHandler_OnMostVisitedTileNavigation_Params',
    [
      mojo.internal.StructField(
        'tile', 0,
        0,
        MostVisitedTileSpec.$,
        null,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'index', 8,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'mouseButton', 12,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'altKey', 13,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'ctrlKey', 13,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'metaKey', 13,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
      mojo.internal.StructField(
        'shiftKey', 13,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 24],]);





export interface MostVisitedPage_SetMostVisitedInfo_ParamsMojoType {
  info: MostVisitedInfo;
}


export type MostVisitedPage_SetMostVisitedInfo_Params = MostVisitedPage_SetMostVisitedInfo_ParamsMojoType;
mojo.internal.Struct(
    MostVisitedPage_SetMostVisitedInfo_ParamsSpec.$,
    'MostVisitedPage_SetMostVisitedInfo_Params',
    [
      mojo.internal.StructField(
        'info', 0,
        0,
        MostVisitedInfoSpec.$,
        null,
        false /* nullable */,
        0,
    ),
    ],
    [[0, 16],]);



