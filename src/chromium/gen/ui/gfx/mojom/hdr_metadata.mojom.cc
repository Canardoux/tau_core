// ui/gfx/mojom/hdr_metadata.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "ui/gfx/mojom/hdr_metadata.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/thread_pool/thread_pool_instance.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/features.h"
#include "mojo/public/cpp/bindings/lib/default_construct_tag_internal.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/cpp/bindings/urgent_message_scope.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "ui/gfx/mojom/hdr_metadata.mojom-params-data.h"
#include "ui/gfx/mojom/hdr_metadata.mojom-shared-message-ids.h"

#include "ui/gfx/mojom/hdr_metadata.mojom-import-headers.h"
#include "ui/gfx/mojom/hdr_metadata.mojom-test-utils.h"


namespace gfx::mojom {
HdrMetadataCta861_3::HdrMetadataCta861_3()
    : max_content_light_level(),
      max_frame_average_light_level() {}

HdrMetadataCta861_3::HdrMetadataCta861_3(
    uint32_t max_content_light_level_in,
    uint32_t max_frame_average_light_level_in)
    : max_content_light_level(std::move(max_content_light_level_in)),
      max_frame_average_light_level(std::move(max_frame_average_light_level_in)) {}

HdrMetadataCta861_3::~HdrMetadataCta861_3() = default;

void HdrMetadataCta861_3::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "max_content_light_level"), this->max_content_light_level,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "max_frame_average_light_level"), this->max_frame_average_light_level,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool HdrMetadataCta861_3::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
HdrMetadataSmpteSt2086::HdrMetadataSmpteSt2086()
    : primaries(),
      luminance_max(),
      luminance_min() {}

HdrMetadataSmpteSt2086::HdrMetadataSmpteSt2086(
    const ::SkColorSpacePrimaries& primaries_in,
    float luminance_max_in,
    float luminance_min_in)
    : primaries(std::move(primaries_in)),
      luminance_max(std::move(luminance_max_in)),
      luminance_min(std::move(luminance_min_in)) {}

HdrMetadataSmpteSt2086::~HdrMetadataSmpteSt2086() = default;

void HdrMetadataSmpteSt2086::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "primaries"), this->primaries,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::SkColorSpacePrimaries&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "luminance_max"), this->luminance_max,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "luminance_min"), this->luminance_min,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool HdrMetadataSmpteSt2086::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
HdrMetadataNdwl::HdrMetadataNdwl()
    : nits() {}

HdrMetadataNdwl::HdrMetadataNdwl(
    float nits_in)
    : nits(std::move(nits_in)) {}

HdrMetadataNdwl::~HdrMetadataNdwl() = default;

void HdrMetadataNdwl::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "nits"), this->nits,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool HdrMetadataNdwl::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
HdrMetadataExtendedRange::HdrMetadataExtendedRange()
    : current_headroom(),
      desired_headroom() {}

HdrMetadataExtendedRange::HdrMetadataExtendedRange(
    float current_headroom_in,
    float desired_headroom_in)
    : current_headroom(std::move(current_headroom_in)),
      desired_headroom(std::move(desired_headroom_in)) {}

HdrMetadataExtendedRange::~HdrMetadataExtendedRange() = default;

void HdrMetadataExtendedRange::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "current_headroom"), this->current_headroom,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "desired_headroom"), this->desired_headroom,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool HdrMetadataExtendedRange::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
HDRMetadata::HDRMetadata()
    : smpte_st_2086(),
      cta_861_3(),
      ndwl(),
      extended_range() {}

HDRMetadata::HDRMetadata(
    const std::optional<::gfx::HdrMetadataSmpteSt2086>& smpte_st_2086_in,
    const std::optional<::gfx::HdrMetadataCta861_3>& cta_861_3_in,
    const std::optional<::gfx::HdrMetadataNdwl>& ndwl_in,
    const std::optional<::gfx::HdrMetadataExtendedRange>& extended_range_in)
    : smpte_st_2086(std::move(smpte_st_2086_in)),
      cta_861_3(std::move(cta_861_3_in)),
      ndwl(std::move(ndwl_in)),
      extended_range(std::move(extended_range_in)) {}

HDRMetadata::~HDRMetadata() = default;

void HDRMetadata::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "smpte_st_2086"), this->smpte_st_2086,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::optional<::gfx::HdrMetadataSmpteSt2086>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cta_861_3"), this->cta_861_3,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::optional<::gfx::HdrMetadataCta861_3>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ndwl"), this->ndwl,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::optional<::gfx::HdrMetadataNdwl>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "extended_range"), this->extended_range,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::optional<::gfx::HdrMetadataExtendedRange>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool HDRMetadata::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // gfx::mojom


namespace mojo {


// static
bool StructTraits<::gfx::mojom::HdrMetadataCta861_3::DataView, ::gfx::mojom::HdrMetadataCta861_3Ptr>::Read(
    ::gfx::mojom::HdrMetadataCta861_3::DataView input,
    ::gfx::mojom::HdrMetadataCta861_3Ptr* output) {
  bool success = true;
  ::gfx::mojom::HdrMetadataCta861_3Ptr result(::gfx::mojom::HdrMetadataCta861_3::New());
  
      if (success)
        result->max_content_light_level = input.max_content_light_level();
      if (success)
        result->max_frame_average_light_level = input.max_frame_average_light_level();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::gfx::mojom::HdrMetadataSmpteSt2086::DataView, ::gfx::mojom::HdrMetadataSmpteSt2086Ptr>::Read(
    ::gfx::mojom::HdrMetadataSmpteSt2086::DataView input,
    ::gfx::mojom::HdrMetadataSmpteSt2086Ptr* output) {
  bool success = true;
  ::gfx::mojom::HdrMetadataSmpteSt2086Ptr result(::gfx::mojom::HdrMetadataSmpteSt2086::New());
  
      if (success && !input.ReadPrimaries(&result->primaries))
        success = false;
      if (success)
        result->luminance_max = input.luminance_max();
      if (success)
        result->luminance_min = input.luminance_min();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::gfx::mojom::HdrMetadataNdwl::DataView, ::gfx::mojom::HdrMetadataNdwlPtr>::Read(
    ::gfx::mojom::HdrMetadataNdwl::DataView input,
    ::gfx::mojom::HdrMetadataNdwlPtr* output) {
  bool success = true;
  ::gfx::mojom::HdrMetadataNdwlPtr result(::gfx::mojom::HdrMetadataNdwl::New());
  
      if (success)
        result->nits = input.nits();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::gfx::mojom::HdrMetadataExtendedRange::DataView, ::gfx::mojom::HdrMetadataExtendedRangePtr>::Read(
    ::gfx::mojom::HdrMetadataExtendedRange::DataView input,
    ::gfx::mojom::HdrMetadataExtendedRangePtr* output) {
  bool success = true;
  ::gfx::mojom::HdrMetadataExtendedRangePtr result(::gfx::mojom::HdrMetadataExtendedRange::New());
  
      if (success)
        result->current_headroom = input.current_headroom();
      if (success)
        result->desired_headroom = input.desired_headroom();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::gfx::mojom::HDRMetadata::DataView, ::gfx::mojom::HDRMetadataPtr>::Read(
    ::gfx::mojom::HDRMetadata::DataView input,
    ::gfx::mojom::HDRMetadataPtr* output) {
  bool success = true;
  ::gfx::mojom::HDRMetadataPtr result(::gfx::mojom::HDRMetadata::New());
  
      if (success && !input.ReadSmpteSt2086(&result->smpte_st_2086))
        success = false;
      if (success && !input.ReadCta8613(&result->cta_861_3))
        success = false;
      if (success && !input.ReadNdwl(&result->ndwl))
        success = false;
      if (success && !input.ReadExtendedRange(&result->extended_range))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace gfx::mojom {




}  // gfx::mojom


#if defined(__clang__)
#pragma clang diagnostic pop
#endif