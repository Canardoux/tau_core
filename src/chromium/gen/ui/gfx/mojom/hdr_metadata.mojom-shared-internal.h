// ui/gfx/mojom/hdr_metadata.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_INTERNAL_H_
#define UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "skia/public/mojom/skcolorspace_primaries.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}


namespace gfx::mojom {
namespace internal {
class HdrMetadataCta861_3_Data;
class HdrMetadataSmpteSt2086_Data;
class HdrMetadataNdwl_Data;
class HdrMetadataExtendedRange_Data;
class HDRMetadata_Data;

#pragma pack(push, 1)
class  HdrMetadataCta861_3_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t max_content_light_level;
  uint32_t max_frame_average_light_level;

 private:
  friend class mojo::internal::MessageFragment<HdrMetadataCta861_3_Data>;

  HdrMetadataCta861_3_Data();
  ~HdrMetadataCta861_3_Data() = delete;
};
static_assert(sizeof(HdrMetadataCta861_3_Data) == 16,
              "Bad sizeof(HdrMetadataCta861_3_Data)");
// Used by HdrMetadataCta861_3::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HdrMetadataCta861_3_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HdrMetadataCta861_3_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HdrMetadataCta861_3_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HdrMetadataCta861_3_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HdrMetadataCta861_3_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  HdrMetadataSmpteSt2086_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkColorSpacePrimaries_Data> primaries;
  float luminance_max;
  float luminance_min;

 private:
  friend class mojo::internal::MessageFragment<HdrMetadataSmpteSt2086_Data>;

  HdrMetadataSmpteSt2086_Data();
  ~HdrMetadataSmpteSt2086_Data() = delete;
};
static_assert(sizeof(HdrMetadataSmpteSt2086_Data) == 24,
              "Bad sizeof(HdrMetadataSmpteSt2086_Data)");
// Used by HdrMetadataSmpteSt2086::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HdrMetadataSmpteSt2086_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HdrMetadataSmpteSt2086_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HdrMetadataSmpteSt2086_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HdrMetadataSmpteSt2086_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HdrMetadataSmpteSt2086_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  HdrMetadataNdwl_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float nits;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HdrMetadataNdwl_Data>;

  HdrMetadataNdwl_Data();
  ~HdrMetadataNdwl_Data() = delete;
};
static_assert(sizeof(HdrMetadataNdwl_Data) == 16,
              "Bad sizeof(HdrMetadataNdwl_Data)");
// Used by HdrMetadataNdwl::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HdrMetadataNdwl_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HdrMetadataNdwl_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HdrMetadataNdwl_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HdrMetadataNdwl_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HdrMetadataNdwl_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  HdrMetadataExtendedRange_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float current_headroom;
  float desired_headroom;

 private:
  friend class mojo::internal::MessageFragment<HdrMetadataExtendedRange_Data>;

  HdrMetadataExtendedRange_Data();
  ~HdrMetadataExtendedRange_Data() = delete;
};
static_assert(sizeof(HdrMetadataExtendedRange_Data) == 16,
              "Bad sizeof(HdrMetadataExtendedRange_Data)");
// Used by HdrMetadataExtendedRange::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HdrMetadataExtendedRange_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HdrMetadataExtendedRange_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HdrMetadataExtendedRange_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HdrMetadataExtendedRange_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HdrMetadataExtendedRange_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  HDRMetadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::HdrMetadataSmpteSt2086_Data> smpte_st_2086;
  mojo::internal::Pointer<internal::HdrMetadataCta861_3_Data> cta_861_3;
  mojo::internal::Pointer<internal::HdrMetadataNdwl_Data> ndwl;
  mojo::internal::Pointer<internal::HdrMetadataExtendedRange_Data> extended_range;

 private:
  friend class mojo::internal::MessageFragment<HDRMetadata_Data>;

  HDRMetadata_Data();
  ~HDRMetadata_Data() = delete;
};
static_assert(sizeof(HDRMetadata_Data) == 40,
              "Bad sizeof(HDRMetadata_Data)");
// Used by HDRMetadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HDRMetadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HDRMetadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HDRMetadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HDRMetadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HDRMetadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal

}  // gfx::mojom

#endif  // UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_INTERNAL_H_