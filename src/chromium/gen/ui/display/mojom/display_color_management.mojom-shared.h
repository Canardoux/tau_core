// ui/display/mojom/display_color_management.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_DISPLAY_MOJOM_DISPLAY_COLOR_MANAGEMENT_MOJOM_SHARED_H_
#define UI_DISPLAY_MOJOM_DISPLAY_COLOR_MANAGEMENT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/display/mojom/display_color_management.mojom-shared-internal.h"
#include "skia/public/mojom/skcolorspace.mojom-shared.h"
#include "ui/display/mojom/gamma_ramp_rgb_entry.mojom-shared.h"







namespace display::mojom {
class GammaCurveDataView;

class ColorCalibrationDataView;

class ColorTemperatureAdjustmentDataView;

class GammaAdjustmentDataView;



}  // display::mojom

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::display::mojom::GammaCurveDataView> {
  using Data = ::display::mojom::internal::GammaCurve_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::display::mojom::ColorCalibrationDataView> {
  using Data = ::display::mojom::internal::ColorCalibration_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::display::mojom::ColorTemperatureAdjustmentDataView> {
  using Data = ::display::mojom::internal::ColorTemperatureAdjustment_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::display::mojom::GammaAdjustmentDataView> {
  using Data = ::display::mojom::internal::GammaAdjustment_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace display::mojom {


class GammaCurveDataView {
 public:
  GammaCurveDataView() = default;

  GammaCurveDataView(
      internal::GammaCurve_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLutDataView(
      mojo::ArrayDataView<::display::mojom::GammaRampRGBEntryDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLut(UserType* output) {
    
    auto* pointer = data_->lut.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::display::mojom::GammaRampRGBEntryDataView>>(
        pointer, output, message_);
  }
 private:
  internal::GammaCurve_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class ColorCalibrationDataView {
 public:
  ColorCalibrationDataView() = default;

  ColorCalibrationDataView(
      internal::ColorCalibration_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSrgbToLinearDataView(
      GammaCurveDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSrgbToLinear(UserType* output) {
    
    auto* pointer = data_->srgb_to_linear.Get();
    return mojo::internal::Deserialize<::display::mojom::GammaCurveDataView>(
        pointer, output, message_);
  }
  inline void GetSrgbToDeviceMatrixDataView(
      ::skia::mojom::SkcmsMatrix3x3DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSrgbToDeviceMatrix(UserType* output) {
    
    auto* pointer = data_->srgb_to_device_matrix.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkcmsMatrix3x3DataView>(
        pointer, output, message_);
  }
  inline void GetLinearToDeviceDataView(
      GammaCurveDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLinearToDevice(UserType* output) {
    
    auto* pointer = data_->linear_to_device.Get();
    return mojo::internal::Deserialize<::display::mojom::GammaCurveDataView>(
        pointer, output, message_);
  }
 private:
  internal::ColorCalibration_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class ColorTemperatureAdjustmentDataView {
 public:
  ColorTemperatureAdjustmentDataView() = default;

  ColorTemperatureAdjustmentDataView(
      internal::ColorTemperatureAdjustment_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSrgbMatrixDataView(
      ::skia::mojom::SkcmsMatrix3x3DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSrgbMatrix(UserType* output) {
    
    auto* pointer = data_->srgb_matrix.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkcmsMatrix3x3DataView>(
        pointer, output, message_);
  }
 private:
  internal::ColorTemperatureAdjustment_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class GammaAdjustmentDataView {
 public:
  GammaAdjustmentDataView() = default;

  GammaAdjustmentDataView(
      internal::GammaAdjustment_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCurveDataView(
      GammaCurveDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCurve(UserType* output) {
    
    auto* pointer = data_->curve.Get();
    return mojo::internal::Deserialize<::display::mojom::GammaCurveDataView>(
        pointer, output, message_);
  }
 private:
  internal::GammaAdjustment_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


}  // display::mojom

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::display::mojom::GammaCurveDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::display::mojom::GammaCurveDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::display::mojom::internal::GammaCurve_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::lut(input)) in_lut = Traits::lut(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->lut)::BaseType>
        lut_fragment(fragment.message());
    constexpr const mojo::internal::ContainerValidateParams& lut_validate_params =
        mojo::internal::GetArrayValidator<0, false, nullptr>();
    mojo::internal::Serialize<mojo::ArrayDataView<::display::mojom::GammaRampRGBEntryDataView>>(
        in_lut, lut_fragment, &lut_validate_params);
    fragment->lut.Set(
        lut_fragment.is_null() ? nullptr : lut_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->lut.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null lut in GammaCurve struct");
  }

  static bool Deserialize(::display::mojom::internal::GammaCurve_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::display::mojom::GammaCurveDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::display::mojom::ColorCalibrationDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::display::mojom::ColorCalibrationDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::display::mojom::internal::ColorCalibration_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::srgb_to_linear(input)) in_srgb_to_linear = Traits::srgb_to_linear(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->srgb_to_linear)::BaseType> srgb_to_linear_fragment(
            fragment.message());
    mojo::internal::Serialize<::display::mojom::GammaCurveDataView>(
        in_srgb_to_linear, srgb_to_linear_fragment);
    fragment->srgb_to_linear.Set(
        srgb_to_linear_fragment.is_null() ? nullptr : srgb_to_linear_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->srgb_to_linear.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null srgb_to_linear in ColorCalibration struct");
    decltype(Traits::srgb_to_device_matrix(input)) in_srgb_to_device_matrix = Traits::srgb_to_device_matrix(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->srgb_to_device_matrix)::BaseType> srgb_to_device_matrix_fragment(
            fragment.message());
    mojo::internal::Serialize<::skia::mojom::SkcmsMatrix3x3DataView>(
        in_srgb_to_device_matrix, srgb_to_device_matrix_fragment);
    fragment->srgb_to_device_matrix.Set(
        srgb_to_device_matrix_fragment.is_null() ? nullptr : srgb_to_device_matrix_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->srgb_to_device_matrix.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null srgb_to_device_matrix in ColorCalibration struct");
    decltype(Traits::linear_to_device(input)) in_linear_to_device = Traits::linear_to_device(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->linear_to_device)::BaseType> linear_to_device_fragment(
            fragment.message());
    mojo::internal::Serialize<::display::mojom::GammaCurveDataView>(
        in_linear_to_device, linear_to_device_fragment);
    fragment->linear_to_device.Set(
        linear_to_device_fragment.is_null() ? nullptr : linear_to_device_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->linear_to_device.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null linear_to_device in ColorCalibration struct");
  }

  static bool Deserialize(::display::mojom::internal::ColorCalibration_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::display::mojom::ColorCalibrationDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::display::mojom::ColorTemperatureAdjustmentDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::display::mojom::ColorTemperatureAdjustmentDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::display::mojom::internal::ColorTemperatureAdjustment_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::srgb_matrix(input)) in_srgb_matrix = Traits::srgb_matrix(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->srgb_matrix)::BaseType> srgb_matrix_fragment(
            fragment.message());
    mojo::internal::Serialize<::skia::mojom::SkcmsMatrix3x3DataView>(
        in_srgb_matrix, srgb_matrix_fragment);
    fragment->srgb_matrix.Set(
        srgb_matrix_fragment.is_null() ? nullptr : srgb_matrix_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->srgb_matrix.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null srgb_matrix in ColorTemperatureAdjustment struct");
  }

  static bool Deserialize(::display::mojom::internal::ColorTemperatureAdjustment_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::display::mojom::ColorTemperatureAdjustmentDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::display::mojom::GammaAdjustmentDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::display::mojom::GammaAdjustmentDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::display::mojom::internal::GammaAdjustment_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::curve(input)) in_curve = Traits::curve(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->curve)::BaseType> curve_fragment(
            fragment.message());
    mojo::internal::Serialize<::display::mojom::GammaCurveDataView>(
        in_curve, curve_fragment);
    fragment->curve.Set(
        curve_fragment.is_null() ? nullptr : curve_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->curve.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null curve in GammaAdjustment struct");
  }

  static bool Deserialize(::display::mojom::internal::GammaAdjustment_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::display::mojom::GammaAdjustmentDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace display::mojom {

inline void GammaCurveDataView::GetLutDataView(
    mojo::ArrayDataView<::display::mojom::GammaRampRGBEntryDataView>* output) {
  auto pointer = data_->lut.Get();
  *output = mojo::ArrayDataView<::display::mojom::GammaRampRGBEntryDataView>(pointer, message_);
}


inline void ColorCalibrationDataView::GetSrgbToLinearDataView(
    GammaCurveDataView* output) {
  auto pointer = data_->srgb_to_linear.Get();
  *output = GammaCurveDataView(pointer, message_);
}
inline void ColorCalibrationDataView::GetSrgbToDeviceMatrixDataView(
    ::skia::mojom::SkcmsMatrix3x3DataView* output) {
  auto pointer = data_->srgb_to_device_matrix.Get();
  *output = ::skia::mojom::SkcmsMatrix3x3DataView(pointer, message_);
}
inline void ColorCalibrationDataView::GetLinearToDeviceDataView(
    GammaCurveDataView* output) {
  auto pointer = data_->linear_to_device.Get();
  *output = GammaCurveDataView(pointer, message_);
}


inline void ColorTemperatureAdjustmentDataView::GetSrgbMatrixDataView(
    ::skia::mojom::SkcmsMatrix3x3DataView* output) {
  auto pointer = data_->srgb_matrix.Get();
  *output = ::skia::mojom::SkcmsMatrix3x3DataView(pointer, message_);
}


inline void GammaAdjustmentDataView::GetCurveDataView(
    GammaCurveDataView* output) {
  auto pointer = data_->curve.Get();
  *output = GammaCurveDataView(pointer, message_);
}



}  // display::mojom

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // UI_DISPLAY_MOJOM_DISPLAY_COLOR_MANAGEMENT_MOJOM_SHARED_H_