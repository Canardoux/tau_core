// ui/display/mojom/display_color_management.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_DISPLAY_MOJOM_DISPLAY_COLOR_MANAGEMENT_MOJOM_SHARED_INTERNAL_H_
#define UI_DISPLAY_MOJOM_DISPLAY_COLOR_MANAGEMENT_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "skia/public/mojom/skcolorspace.mojom-shared-internal.h"
#include "ui/display/mojom/gamma_ramp_rgb_entry.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}


namespace display::mojom {
namespace internal {
class GammaCurve_Data;
class ColorCalibration_Data;
class ColorTemperatureAdjustment_Data;
class GammaAdjustment_Data;

#pragma pack(push, 1)
class  GammaCurve_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::display::mojom::internal::GammaRampRGBEntry_Data>>> lut;

 private:
  friend class mojo::internal::MessageFragment<GammaCurve_Data>;

  GammaCurve_Data();
  ~GammaCurve_Data() = delete;
};
static_assert(sizeof(GammaCurve_Data) == 16,
              "Bad sizeof(GammaCurve_Data)");
// Used by GammaCurve::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct GammaCurve_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  GammaCurve_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~GammaCurve_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<GammaCurve_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    GammaCurve_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ColorCalibration_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::GammaCurve_Data> srgb_to_linear;
  mojo::internal::Pointer<::skia::mojom::internal::SkcmsMatrix3x3_Data> srgb_to_device_matrix;
  mojo::internal::Pointer<internal::GammaCurve_Data> linear_to_device;

 private:
  friend class mojo::internal::MessageFragment<ColorCalibration_Data>;

  ColorCalibration_Data();
  ~ColorCalibration_Data() = delete;
};
static_assert(sizeof(ColorCalibration_Data) == 32,
              "Bad sizeof(ColorCalibration_Data)");
// Used by ColorCalibration::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ColorCalibration_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ColorCalibration_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ColorCalibration_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ColorCalibration_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ColorCalibration_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ColorTemperatureAdjustment_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkcmsMatrix3x3_Data> srgb_matrix;

 private:
  friend class mojo::internal::MessageFragment<ColorTemperatureAdjustment_Data>;

  ColorTemperatureAdjustment_Data();
  ~ColorTemperatureAdjustment_Data() = delete;
};
static_assert(sizeof(ColorTemperatureAdjustment_Data) == 16,
              "Bad sizeof(ColorTemperatureAdjustment_Data)");
// Used by ColorTemperatureAdjustment::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ColorTemperatureAdjustment_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ColorTemperatureAdjustment_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ColorTemperatureAdjustment_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ColorTemperatureAdjustment_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ColorTemperatureAdjustment_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  GammaAdjustment_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::GammaCurve_Data> curve;

 private:
  friend class mojo::internal::MessageFragment<GammaAdjustment_Data>;

  GammaAdjustment_Data();
  ~GammaAdjustment_Data() = delete;
};
static_assert(sizeof(GammaAdjustment_Data) == 16,
              "Bad sizeof(GammaAdjustment_Data)");
// Used by GammaAdjustment::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct GammaAdjustment_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  GammaAdjustment_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~GammaAdjustment_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<GammaAdjustment_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    GammaAdjustment_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal

}  // display::mojom

#endif  // UI_DISPLAY_MOJOM_DISPLAY_COLOR_MANAGEMENT_MOJOM_SHARED_INTERNAL_H_