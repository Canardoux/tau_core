// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structured_data.proto

#include "structured_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR StructuredEventProto_Metric_RepeatedInt64::StructuredEventProto_Metric_RepeatedInt64(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal() {}
  union {
    StructuredEventProto_Metric_RepeatedInt64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredEventProto_Metric_RepeatedInt64DefaultTypeInternal _StructuredEventProto_Metric_RepeatedInt64_default_instance_;
PROTOBUF_CONSTEXPR StructuredEventProto_Metric::StructuredEventProto_Metric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct StructuredEventProto_MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredEventProto_MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredEventProto_MetricDefaultTypeInternal() {}
  union {
    StructuredEventProto_Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredEventProto_MetricDefaultTypeInternal _StructuredEventProto_Metric_default_instance_;
PROTOBUF_CONSTEXPR StructuredEventProto_EventSequenceMetadata::StructuredEventProto_EventSequenceMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_unique_id_)*/uint64_t{0u}
  , /*decltype(_impl_.system_uptime_)*/int64_t{0}
  , /*decltype(_impl_.reset_counter_)*/int64_t{0}
  , /*decltype(_impl_.client_id_rotation_weeks_)*/0u
  , /*decltype(_impl_.primary_user_segment_)*/0} {}
struct StructuredEventProto_EventSequenceMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredEventProto_EventSequenceMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredEventProto_EventSequenceMetadataDefaultTypeInternal() {}
  union {
    StructuredEventProto_EventSequenceMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredEventProto_EventSequenceMetadataDefaultTypeInternal _StructuredEventProto_EventSequenceMetadata_default_instance_;
PROTOBUF_CONSTEXPR StructuredEventProto::StructuredEventProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_.event_sequence_metadata_)*/nullptr
  , /*decltype(_impl_.profile_event_id_)*/uint64_t{0u}
  , /*decltype(_impl_.event_name_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.project_name_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.user_project_id_)*/uint64_t{0u}
  , /*decltype(_impl_.device_project_id_)*/uint64_t{0u}
  , /*decltype(_impl_.event_type_)*/0} {}
struct StructuredEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredEventProtoDefaultTypeInternal() {}
  union {
    StructuredEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredEventProtoDefaultTypeInternal _StructuredEventProto_default_instance_;
PROTOBUF_CONSTEXPR StructuredDataProto::StructuredDataProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.is_device_enrolled_)*/false
  , /*decltype(_impl_.device_segment_)*/0} {}
struct StructuredDataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredDataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredDataProtoDefaultTypeInternal() {}
  union {
    StructuredDataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredDataProtoDefaultTypeInternal _StructuredDataProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool StructuredEventProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StructuredEventProto_EventType_strings[4] = {};

static const char StructuredEventProto_EventType_names[] =
  "RAW_STRING"
  "REGULAR"
  "SEQUENCE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StructuredEventProto_EventType_entries[] = {
  { {StructuredEventProto_EventType_names + 0, 10}, 2 },
  { {StructuredEventProto_EventType_names + 10, 7}, 1 },
  { {StructuredEventProto_EventType_names + 17, 8}, 3 },
  { {StructuredEventProto_EventType_names + 25, 7}, 0 },
};

static const int StructuredEventProto_EventType_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  1, // 1 -> REGULAR
  0, // 2 -> RAW_STRING
  2, // 3 -> SEQUENCE
};

const std::string& StructuredEventProto_EventType_Name(
    StructuredEventProto_EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StructuredEventProto_EventType_entries,
          StructuredEventProto_EventType_entries_by_number,
          4, StructuredEventProto_EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StructuredEventProto_EventType_entries,
      StructuredEventProto_EventType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StructuredEventProto_EventType_strings[idx].get();
}
bool StructuredEventProto_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StructuredEventProto_EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StructuredEventProto_EventType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<StructuredEventProto_EventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StructuredEventProto_EventType StructuredEventProto::UNKNOWN;
constexpr StructuredEventProto_EventType StructuredEventProto::REGULAR;
constexpr StructuredEventProto_EventType StructuredEventProto::RAW_STRING;
constexpr StructuredEventProto_EventType StructuredEventProto::SEQUENCE;
constexpr StructuredEventProto_EventType StructuredEventProto::EventType_MIN;
constexpr StructuredEventProto_EventType StructuredEventProto::EventType_MAX;
constexpr int StructuredEventProto::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool StructuredEventProto_PrimaryUserSegment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StructuredEventProto_PrimaryUserSegment_strings[9] = {};

static const char StructuredEventProto_PrimaryUserSegment_names[] =
  "DEMO_MODE"
  "ENTERPRISE_ORGANIZATION"
  "K12"
  "KIOS_APP"
  "MANAGED_GUEST_SESSION"
  "NON_PROFIT"
  "UNIVERSITY"
  "UNKNOWN_PRIMARY_USER_TYPE"
  "UNMANAGED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StructuredEventProto_PrimaryUserSegment_entries[] = {
  { {StructuredEventProto_PrimaryUserSegment_names + 0, 9}, 8 },
  { {StructuredEventProto_PrimaryUserSegment_names + 9, 23}, 5 },
  { {StructuredEventProto_PrimaryUserSegment_names + 32, 3}, 2 },
  { {StructuredEventProto_PrimaryUserSegment_names + 35, 8}, 6 },
  { {StructuredEventProto_PrimaryUserSegment_names + 43, 21}, 7 },
  { {StructuredEventProto_PrimaryUserSegment_names + 64, 10}, 4 },
  { {StructuredEventProto_PrimaryUserSegment_names + 74, 10}, 3 },
  { {StructuredEventProto_PrimaryUserSegment_names + 84, 25}, 0 },
  { {StructuredEventProto_PrimaryUserSegment_names + 109, 9}, 1 },
};

static const int StructuredEventProto_PrimaryUserSegment_entries_by_number[] = {
  7, // 0 -> UNKNOWN_PRIMARY_USER_TYPE
  8, // 1 -> UNMANAGED
  2, // 2 -> K12
  6, // 3 -> UNIVERSITY
  5, // 4 -> NON_PROFIT
  1, // 5 -> ENTERPRISE_ORGANIZATION
  3, // 6 -> KIOS_APP
  4, // 7 -> MANAGED_GUEST_SESSION
  0, // 8 -> DEMO_MODE
};

const std::string& StructuredEventProto_PrimaryUserSegment_Name(
    StructuredEventProto_PrimaryUserSegment value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StructuredEventProto_PrimaryUserSegment_entries,
          StructuredEventProto_PrimaryUserSegment_entries_by_number,
          9, StructuredEventProto_PrimaryUserSegment_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StructuredEventProto_PrimaryUserSegment_entries,
      StructuredEventProto_PrimaryUserSegment_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StructuredEventProto_PrimaryUserSegment_strings[idx].get();
}
bool StructuredEventProto_PrimaryUserSegment_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StructuredEventProto_PrimaryUserSegment* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StructuredEventProto_PrimaryUserSegment_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<StructuredEventProto_PrimaryUserSegment>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::UNKNOWN_PRIMARY_USER_TYPE;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::UNMANAGED;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::K12;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::UNIVERSITY;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::NON_PROFIT;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::ENTERPRISE_ORGANIZATION;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::KIOS_APP;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::MANAGED_GUEST_SESSION;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::DEMO_MODE;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::PrimaryUserSegment_MIN;
constexpr StructuredEventProto_PrimaryUserSegment StructuredEventProto::PrimaryUserSegment_MAX;
constexpr int StructuredEventProto::PrimaryUserSegment_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool StructuredDataProto_DeviceSegment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StructuredDataProto_DeviceSegment_strings[4] = {};

static const char StructuredDataProto_DeviceSegment_names[] =
  "CONSUMER"
  "EDUCATION"
  "ENTERPRISE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StructuredDataProto_DeviceSegment_entries[] = {
  { {StructuredDataProto_DeviceSegment_names + 0, 8}, 1 },
  { {StructuredDataProto_DeviceSegment_names + 8, 9}, 2 },
  { {StructuredDataProto_DeviceSegment_names + 17, 10}, 3 },
  { {StructuredDataProto_DeviceSegment_names + 27, 7}, 0 },
};

static const int StructuredDataProto_DeviceSegment_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  0, // 1 -> CONSUMER
  1, // 2 -> EDUCATION
  2, // 3 -> ENTERPRISE
};

const std::string& StructuredDataProto_DeviceSegment_Name(
    StructuredDataProto_DeviceSegment value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StructuredDataProto_DeviceSegment_entries,
          StructuredDataProto_DeviceSegment_entries_by_number,
          4, StructuredDataProto_DeviceSegment_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StructuredDataProto_DeviceSegment_entries,
      StructuredDataProto_DeviceSegment_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StructuredDataProto_DeviceSegment_strings[idx].get();
}
bool StructuredDataProto_DeviceSegment_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StructuredDataProto_DeviceSegment* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StructuredDataProto_DeviceSegment_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<StructuredDataProto_DeviceSegment>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StructuredDataProto_DeviceSegment StructuredDataProto::UNKNOWN;
constexpr StructuredDataProto_DeviceSegment StructuredDataProto::CONSUMER;
constexpr StructuredDataProto_DeviceSegment StructuredDataProto::EDUCATION;
constexpr StructuredDataProto_DeviceSegment StructuredDataProto::ENTERPRISE;
constexpr StructuredDataProto_DeviceSegment StructuredDataProto::DeviceSegment_MIN;
constexpr StructuredDataProto_DeviceSegment StructuredDataProto::DeviceSegment_MAX;
constexpr int StructuredDataProto::DeviceSegment_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StructuredEventProto_Metric_RepeatedInt64::_Internal {
 public:
};

StructuredEventProto_Metric_RepeatedInt64::StructuredEventProto_Metric_RepeatedInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredEventProto.Metric.RepeatedInt64)
}
StructuredEventProto_Metric_RepeatedInt64::StructuredEventProto_Metric_RepeatedInt64(const StructuredEventProto_Metric_RepeatedInt64& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StructuredEventProto_Metric_RepeatedInt64* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredEventProto.Metric.RepeatedInt64)
}

inline void StructuredEventProto_Metric_RepeatedInt64::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StructuredEventProto_Metric_RepeatedInt64::~StructuredEventProto_Metric_RepeatedInt64() {
  // @@protoc_insertion_point(destructor:metrics.StructuredEventProto.Metric.RepeatedInt64)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredEventProto_Metric_RepeatedInt64::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void StructuredEventProto_Metric_RepeatedInt64::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructuredEventProto_Metric_RepeatedInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredEventProto_Metric_RepeatedInt64::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 values = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredEventProto_Metric_RepeatedInt64::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 values = 1 [packed = true];
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredEventProto.Metric.RepeatedInt64)
  return target;
}

size_t StructuredEventProto_Metric_RepeatedInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 values = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredEventProto_Metric_RepeatedInt64::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredEventProto_Metric_RepeatedInt64*>(
      &from));
}

void StructuredEventProto_Metric_RepeatedInt64::MergeFrom(const StructuredEventProto_Metric_RepeatedInt64& from) {
  StructuredEventProto_Metric_RepeatedInt64* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredEventProto_Metric_RepeatedInt64::CopyFrom(const StructuredEventProto_Metric_RepeatedInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredEventProto.Metric.RepeatedInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredEventProto_Metric_RepeatedInt64::IsInitialized() const {
  return true;
}

void StructuredEventProto_Metric_RepeatedInt64::InternalSwap(StructuredEventProto_Metric_RepeatedInt64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

std::string StructuredEventProto_Metric_RepeatedInt64::GetTypeName() const {
  return "metrics.StructuredEventProto.Metric.RepeatedInt64";
}


// ===================================================================

class StructuredEventProto_Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredEventProto_Metric>()._impl_._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metrics::StructuredEventProto_Metric_RepeatedInt64& value_repeated_int64(const StructuredEventProto_Metric* msg);
};

const ::metrics::StructuredEventProto_Metric_RepeatedInt64&
StructuredEventProto_Metric::_Internal::value_repeated_int64(const StructuredEventProto_Metric* msg) {
  return *msg->_impl_.value_.value_repeated_int64_;
}
void StructuredEventProto_Metric::set_allocated_value_repeated_int64(::metrics::StructuredEventProto_Metric_RepeatedInt64* value_repeated_int64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (value_repeated_int64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_repeated_int64);
    if (message_arena != submessage_arena) {
      value_repeated_int64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_repeated_int64, submessage_arena);
    }
    set_has_value_repeated_int64();
    _impl_.value_.value_repeated_int64_ = value_repeated_int64;
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.StructuredEventProto.Metric.value_repeated_int64)
}
StructuredEventProto_Metric::StructuredEventProto_Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredEventProto.Metric)
}
StructuredEventProto_Metric::StructuredEventProto_Metric(const StructuredEventProto_Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StructuredEventProto_Metric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_hash_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.name_hash_ = from._impl_.name_hash_;
  clear_has_value();
  switch (from.value_case()) {
    case kValueHmac: {
      _this->_internal_set_value_hmac(from._internal_value_hmac());
      break;
    }
    case kValueInt64: {
      _this->_internal_set_value_int64(from._internal_value_int64());
      break;
    }
    case kValueString: {
      _this->_internal_set_value_string(from._internal_value_string());
      break;
    }
    case kValueDouble: {
      _this->_internal_set_value_double(from._internal_value_double());
      break;
    }
    case kValueRepeatedInt64: {
      _this->_internal_mutable_value_repeated_int64()->::metrics::StructuredEventProto_Metric_RepeatedInt64::MergeFrom(
          from._internal_value_repeated_int64());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredEventProto.Metric)
}

inline void StructuredEventProto_Metric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_hash_){uint64_t{0u}}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

StructuredEventProto_Metric::~StructuredEventProto_Metric() {
  // @@protoc_insertion_point(destructor:metrics.StructuredEventProto.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredEventProto_Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void StructuredEventProto_Metric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructuredEventProto_Metric::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:metrics.StructuredEventProto.Metric)
  switch (value_case()) {
    case kValueHmac: {
      // No need to clear
      break;
    }
    case kValueInt64: {
      // No need to clear
      break;
    }
    case kValueString: {
      _impl_.value_.value_string_.Destroy();
      break;
    }
    case kValueDouble: {
      // No need to clear
      break;
    }
    case kValueRepeatedInt64: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.value_repeated_int64_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void StructuredEventProto_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredEventProto.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_hash_ = uint64_t{0u};
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredEventProto_Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          _impl_.name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 value_hmac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_value_hmac(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // int64 value_int64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_value_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double value_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _internal_set_value_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .metrics.StructuredEventProto.Metric.RepeatedInt64 value_repeated_int64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_repeated_int64(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredEventProto_Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredEventProto.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_name_hash(), target);
  }

  switch (value_case()) {
    case kValueHmac: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_value_hmac(), target);
      break;
    }
    case kValueInt64: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_value_int64(), target);
      break;
    }
    case kValueString: {
      target = stream->WriteStringMaybeAliased(
          4, this->_internal_value_string(), target);
      break;
    }
    case kValueDouble: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_value_double(), target);
      break;
    }
    case kValueRepeatedInt64: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::value_repeated_int64(this),
          _Internal::value_repeated_int64(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredEventProto.Metric)
  return target;
}

size_t StructuredEventProto_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredEventProto.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 name_hash = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  switch (value_case()) {
    // fixed64 value_hmac = 2;
    case kValueHmac: {
      total_size += 1 + 8;
      break;
    }
    // int64 value_int64 = 3;
    case kValueInt64: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value_int64());
      break;
    }
    // string value_string = 4;
    case kValueString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_string());
      break;
    }
    // double value_double = 5;
    case kValueDouble: {
      total_size += 1 + 8;
      break;
    }
    // .metrics.StructuredEventProto.Metric.RepeatedInt64 value_repeated_int64 = 6;
    case kValueRepeatedInt64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.value_repeated_int64_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredEventProto_Metric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredEventProto_Metric*>(
      &from));
}

void StructuredEventProto_Metric::MergeFrom(const StructuredEventProto_Metric& from) {
  StructuredEventProto_Metric* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredEventProto.Metric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name_hash()) {
    _this->_internal_set_name_hash(from._internal_name_hash());
  }
  switch (from.value_case()) {
    case kValueHmac: {
      _this->_internal_set_value_hmac(from._internal_value_hmac());
      break;
    }
    case kValueInt64: {
      _this->_internal_set_value_int64(from._internal_value_int64());
      break;
    }
    case kValueString: {
      _this->_internal_set_value_string(from._internal_value_string());
      break;
    }
    case kValueDouble: {
      _this->_internal_set_value_double(from._internal_value_double());
      break;
    }
    case kValueRepeatedInt64: {
      _this->_internal_mutable_value_repeated_int64()->::metrics::StructuredEventProto_Metric_RepeatedInt64::MergeFrom(
          from._internal_value_repeated_int64());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredEventProto_Metric::CopyFrom(const StructuredEventProto_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredEventProto.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredEventProto_Metric::IsInitialized() const {
  return true;
}

void StructuredEventProto_Metric::InternalSwap(StructuredEventProto_Metric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.name_hash_, other->_impl_.name_hash_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string StructuredEventProto_Metric::GetTypeName() const {
  return "metrics.StructuredEventProto.Metric";
}


// ===================================================================

class StructuredEventProto_EventSequenceMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredEventProto_EventSequenceMetadata>()._impl_._has_bits_);
  static void set_has_event_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_system_uptime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reset_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_id_rotation_weeks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_primary_user_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StructuredEventProto_EventSequenceMetadata::StructuredEventProto_EventSequenceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredEventProto.EventSequenceMetadata)
}
StructuredEventProto_EventSequenceMetadata::StructuredEventProto_EventSequenceMetadata(const StructuredEventProto_EventSequenceMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StructuredEventProto_EventSequenceMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_unique_id_){}
    , decltype(_impl_.system_uptime_){}
    , decltype(_impl_.reset_counter_){}
    , decltype(_impl_.client_id_rotation_weeks_){}
    , decltype(_impl_.primary_user_segment_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.event_unique_id_, &from._impl_.event_unique_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primary_user_segment_) -
    reinterpret_cast<char*>(&_impl_.event_unique_id_)) + sizeof(_impl_.primary_user_segment_));
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredEventProto.EventSequenceMetadata)
}

inline void StructuredEventProto_EventSequenceMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_unique_id_){uint64_t{0u}}
    , decltype(_impl_.system_uptime_){int64_t{0}}
    , decltype(_impl_.reset_counter_){int64_t{0}}
    , decltype(_impl_.client_id_rotation_weeks_){0u}
    , decltype(_impl_.primary_user_segment_){0}
  };
}

StructuredEventProto_EventSequenceMetadata::~StructuredEventProto_EventSequenceMetadata() {
  // @@protoc_insertion_point(destructor:metrics.StructuredEventProto.EventSequenceMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredEventProto_EventSequenceMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StructuredEventProto_EventSequenceMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructuredEventProto_EventSequenceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredEventProto.EventSequenceMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.event_unique_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.primary_user_segment_) -
        reinterpret_cast<char*>(&_impl_.event_unique_id_)) + sizeof(_impl_.primary_user_segment_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredEventProto_EventSequenceMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 event_unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_event_unique_id(&has_bits);
          _impl_.event_unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 system_uptime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_system_uptime(&has_bits);
          _impl_.system_uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 reset_counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reset_counter(&has_bits);
          _impl_.reset_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_id_rotation_weeks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_client_id_rotation_weeks(&has_bits);
          _impl_.client_id_rotation_weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.StructuredEventProto.PrimaryUserSegment primary_user_segment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::StructuredEventProto_PrimaryUserSegment_IsValid(val))) {
            _internal_set_primary_user_segment(static_cast<::metrics::StructuredEventProto_PrimaryUserSegment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredEventProto_EventSequenceMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredEventProto.EventSequenceMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 event_unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_event_unique_id(), target);
  }

  // optional int64 system_uptime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_system_uptime(), target);
  }

  // optional int64 reset_counter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_reset_counter(), target);
  }

  // optional uint32 client_id_rotation_weeks = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_client_id_rotation_weeks(), target);
  }

  // optional .metrics.StructuredEventProto.PrimaryUserSegment primary_user_segment = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_primary_user_segment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredEventProto.EventSequenceMetadata)
  return target;
}

size_t StructuredEventProto_EventSequenceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredEventProto.EventSequenceMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 event_unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 system_uptime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_system_uptime());
    }

    // optional int64 reset_counter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reset_counter());
    }

    // optional uint32 client_id_rotation_weeks = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id_rotation_weeks());
    }

    // optional .metrics.StructuredEventProto.PrimaryUserSegment primary_user_segment = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_primary_user_segment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredEventProto_EventSequenceMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredEventProto_EventSequenceMetadata*>(
      &from));
}

void StructuredEventProto_EventSequenceMetadata::MergeFrom(const StructuredEventProto_EventSequenceMetadata& from) {
  StructuredEventProto_EventSequenceMetadata* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredEventProto.EventSequenceMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_unique_id_ = from._impl_.event_unique_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.system_uptime_ = from._impl_.system_uptime_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reset_counter_ = from._impl_.reset_counter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_id_rotation_weeks_ = from._impl_.client_id_rotation_weeks_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.primary_user_segment_ = from._impl_.primary_user_segment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredEventProto_EventSequenceMetadata::CopyFrom(const StructuredEventProto_EventSequenceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredEventProto.EventSequenceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredEventProto_EventSequenceMetadata::IsInitialized() const {
  return true;
}

void StructuredEventProto_EventSequenceMetadata::InternalSwap(StructuredEventProto_EventSequenceMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredEventProto_EventSequenceMetadata, _impl_.primary_user_segment_)
      + sizeof(StructuredEventProto_EventSequenceMetadata::_impl_.primary_user_segment_)
      - PROTOBUF_FIELD_OFFSET(StructuredEventProto_EventSequenceMetadata, _impl_.event_unique_id_)>(
          reinterpret_cast<char*>(&_impl_.event_unique_id_),
          reinterpret_cast<char*>(&other->_impl_.event_unique_id_));
}

std::string StructuredEventProto_EventSequenceMetadata::GetTypeName() const {
  return "metrics.StructuredEventProto.EventSequenceMetadata";
}


// ===================================================================

class StructuredEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredEventProto>()._impl_._has_bits_);
  static void set_has_profile_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_project_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_project_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_event_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_project_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::metrics::StructuredEventProto_EventSequenceMetadata& event_sequence_metadata(const StructuredEventProto* msg);
  static void set_has_event_sequence_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::StructuredEventProto_EventSequenceMetadata&
StructuredEventProto::_Internal::event_sequence_metadata(const StructuredEventProto* msg) {
  return *msg->_impl_.event_sequence_metadata_;
}
StructuredEventProto::StructuredEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredEventProto)
}
StructuredEventProto::StructuredEventProto(const StructuredEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StructuredEventProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metrics_){from._impl_.metrics_}
    , decltype(_impl_.event_sequence_metadata_){nullptr}
    , decltype(_impl_.profile_event_id_){}
    , decltype(_impl_.event_name_hash_){}
    , decltype(_impl_.project_name_hash_){}
    , decltype(_impl_.user_project_id_){}
    , decltype(_impl_.device_project_id_){}
    , decltype(_impl_.event_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_event_sequence_metadata()) {
    _this->_impl_.event_sequence_metadata_ = new ::metrics::StructuredEventProto_EventSequenceMetadata(*from._impl_.event_sequence_metadata_);
  }
  ::memcpy(&_impl_.profile_event_id_, &from._impl_.profile_event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_type_) -
    reinterpret_cast<char*>(&_impl_.profile_event_id_)) + sizeof(_impl_.event_type_));
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredEventProto)
}

inline void StructuredEventProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metrics_){arena}
    , decltype(_impl_.event_sequence_metadata_){nullptr}
    , decltype(_impl_.profile_event_id_){uint64_t{0u}}
    , decltype(_impl_.event_name_hash_){uint64_t{0u}}
    , decltype(_impl_.project_name_hash_){uint64_t{0u}}
    , decltype(_impl_.user_project_id_){uint64_t{0u}}
    , decltype(_impl_.device_project_id_){uint64_t{0u}}
    , decltype(_impl_.event_type_){0}
  };
}

StructuredEventProto::~StructuredEventProto() {
  // @@protoc_insertion_point(destructor:metrics.StructuredEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.event_sequence_metadata_;
}

void StructuredEventProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructuredEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.event_sequence_metadata_ != nullptr);
    _impl_.event_sequence_metadata_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.profile_event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_type_) -
        reinterpret_cast<char*>(&_impl_.profile_event_id_)) + sizeof(_impl_.event_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 profile_event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_profile_event_id(&has_bits);
          _impl_.profile_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 event_name_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_event_name_hash(&has_bits);
          _impl_.event_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.StructuredEventProto.Metric metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.StructuredEventProto.EventType event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::StructuredEventProto_EventType_IsValid(val))) {
            _internal_set_event_type(static_cast<::metrics::StructuredEventProto_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 project_name_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_project_name_hash(&has_bits);
          _impl_.project_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.StructuredEventProto.EventSequenceMetadata event_sequence_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_sequence_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 user_project_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_user_project_id(&has_bits);
          _impl_.user_project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 device_project_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_device_project_id(&has_bits);
          _impl_.device_project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 profile_event_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_profile_event_id(), target);
  }

  // optional fixed64 event_name_hash = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_event_name_hash(), target);
  }

  // repeated .metrics.StructuredEventProto.Metric metrics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .metrics.StructuredEventProto.EventType event_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_type(), target);
  }

  // optional fixed64 project_name_hash = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_project_name_hash(), target);
  }

  // optional .metrics.StructuredEventProto.EventSequenceMetadata event_sequence_metadata = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::event_sequence_metadata(this),
        _Internal::event_sequence_metadata(this).GetCachedSize(), target, stream);
  }

  // optional fixed64 user_project_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_user_project_id(), target);
  }

  // optional fixed64 device_project_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_device_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredEventProto)
  return target;
}

size_t StructuredEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.StructuredEventProto.Metric metrics = 3;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .metrics.StructuredEventProto.EventSequenceMetadata event_sequence_metadata = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_sequence_metadata_);
    }

    // optional fixed64 profile_event_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 event_name_hash = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 project_name_hash = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_project_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_project_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .metrics.StructuredEventProto.EventType event_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredEventProto*>(
      &from));
}

void StructuredEventProto::MergeFrom(const StructuredEventProto& from) {
  StructuredEventProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredEventProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_event_sequence_metadata()->::metrics::StructuredEventProto_EventSequenceMetadata::MergeFrom(
          from._internal_event_sequence_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.profile_event_id_ = from._impl_.profile_event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_name_hash_ = from._impl_.event_name_hash_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.project_name_hash_ = from._impl_.project_name_hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_project_id_ = from._impl_.user_project_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.device_project_id_ = from._impl_.device_project_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredEventProto::CopyFrom(const StructuredEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredEventProto::IsInitialized() const {
  return true;
}

void StructuredEventProto::InternalSwap(StructuredEventProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredEventProto, _impl_.event_type_)
      + sizeof(StructuredEventProto::_impl_.event_type_)
      - PROTOBUF_FIELD_OFFSET(StructuredEventProto, _impl_.event_sequence_metadata_)>(
          reinterpret_cast<char*>(&_impl_.event_sequence_metadata_),
          reinterpret_cast<char*>(&other->_impl_.event_sequence_metadata_));
}

std::string StructuredEventProto::GetTypeName() const {
  return "metrics.StructuredEventProto";
}


// ===================================================================

class StructuredDataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredDataProto>()._impl_._has_bits_);
  static void set_has_is_device_enrolled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StructuredDataProto::StructuredDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.StructuredDataProto)
}
StructuredDataProto::StructuredDataProto(const StructuredDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StructuredDataProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.is_device_enrolled_){}
    , decltype(_impl_.device_segment_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.is_device_enrolled_, &from._impl_.is_device_enrolled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_segment_) -
    reinterpret_cast<char*>(&_impl_.is_device_enrolled_)) + sizeof(_impl_.device_segment_));
  // @@protoc_insertion_point(copy_constructor:metrics.StructuredDataProto)
}

inline void StructuredDataProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.is_device_enrolled_){false}
    , decltype(_impl_.device_segment_){0}
  };
}

StructuredDataProto::~StructuredDataProto() {
  // @@protoc_insertion_point(destructor:metrics.StructuredDataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredDataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void StructuredDataProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructuredDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.StructuredDataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.is_device_enrolled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.device_segment_) -
        reinterpret_cast<char*>(&_impl_.is_device_enrolled_)) + sizeof(_impl_.device_segment_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StructuredDataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .metrics.StructuredEventProto events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_device_enrolled = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_device_enrolled(&has_bits);
          _impl_.is_device_enrolled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.StructuredDataProto.DeviceSegment device_segment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::StructuredDataProto_DeviceSegment_IsValid(val))) {
            _internal_set_device_segment(static_cast<::metrics::StructuredDataProto_DeviceSegment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredDataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.StructuredDataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.StructuredEventProto events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_device_enrolled = 2 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_device_enrolled(), target);
  }

  // optional .metrics.StructuredDataProto.DeviceSegment device_segment = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_device_segment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.StructuredDataProto)
  return target;
}

size_t StructuredDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.StructuredDataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.StructuredEventProto events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_device_enrolled = 2 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .metrics.StructuredDataProto.DeviceSegment device_segment = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_device_segment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredDataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StructuredDataProto*>(
      &from));
}

void StructuredDataProto::MergeFrom(const StructuredDataProto& from) {
  StructuredDataProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.StructuredDataProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.is_device_enrolled_ = from._impl_.is_device_enrolled_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.device_segment_ = from._impl_.device_segment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StructuredDataProto::CopyFrom(const StructuredDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.StructuredDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredDataProto::IsInitialized() const {
  return true;
}

void StructuredDataProto::InternalSwap(StructuredDataProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredDataProto, _impl_.device_segment_)
      + sizeof(StructuredDataProto::_impl_.device_segment_)
      - PROTOBUF_FIELD_OFFSET(StructuredDataProto, _impl_.is_device_enrolled_)>(
          reinterpret_cast<char*>(&_impl_.is_device_enrolled_),
          reinterpret_cast<char*>(&other->_impl_.is_device_enrolled_));
}

std::string StructuredDataProto::GetTypeName() const {
  return "metrics.StructuredDataProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::StructuredEventProto_Metric_RepeatedInt64*
Arena::CreateMaybeMessage< ::metrics::StructuredEventProto_Metric_RepeatedInt64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredEventProto_Metric_RepeatedInt64 >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::StructuredEventProto_Metric*
Arena::CreateMaybeMessage< ::metrics::StructuredEventProto_Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredEventProto_Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::StructuredEventProto_EventSequenceMetadata*
Arena::CreateMaybeMessage< ::metrics::StructuredEventProto_EventSequenceMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredEventProto_EventSequenceMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::StructuredEventProto*
Arena::CreateMaybeMessage< ::metrics::StructuredEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::StructuredDataProto*
Arena::CreateMaybeMessage< ::metrics::StructuredDataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::StructuredDataProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
