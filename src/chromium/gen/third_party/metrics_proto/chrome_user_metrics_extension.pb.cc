// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_user_metrics_extension.proto

#include "chrome_user_metrics_extension.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR ChromeUserMetricsExtension_RealLocalTime::ChromeUserMetricsExtension_RealLocalTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_sec_)*/int64_t{0}
  , /*decltype(_impl_.time_source_)*/0
  , /*decltype(_impl_.time_zone_offset_from_gmt_sec_)*/0} {}
struct ChromeUserMetricsExtension_RealLocalTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeUserMetricsExtension_RealLocalTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeUserMetricsExtension_RealLocalTimeDefaultTypeInternal() {}
  union {
    ChromeUserMetricsExtension_RealLocalTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeUserMetricsExtension_RealLocalTimeDefaultTypeInternal _ChromeUserMetricsExtension_RealLocalTime_default_instance_;
PROTOBUF_CONSTEXPR ChromeUserMetricsExtension::ChromeUserMetricsExtension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_action_event_)*/{}
  , /*decltype(_impl_.omnibox_event_)*/{}
  , /*decltype(_impl_.histogram_event_)*/{}
  , /*decltype(_impl_.sampled_profile_)*/{}
  , /*decltype(_impl_.translate_event_)*/{}
  , /*decltype(_impl_.printer_event_)*/{}
  , /*decltype(_impl_.trace_log_)*/{}
  , /*decltype(_impl_.chrome_os_app_list_launch_event_)*/{}
  , /*decltype(_impl_.system_profile_)*/nullptr
  , /*decltype(_impl_.cast_logs_)*/nullptr
  , /*decltype(_impl_.reporting_info_)*/nullptr
  , /*decltype(_impl_.user_demographics_)*/nullptr
  , /*decltype(_impl_.structured_data_)*/nullptr
  , /*decltype(_impl_.time_log_created_)*/nullptr
  , /*decltype(_impl_.time_log_closed_)*/nullptr
  , /*decltype(_impl_.custom_tab_session_)*/nullptr
  , /*decltype(_impl_.client_id_)*/uint64_t{0u}
  , /*decltype(_impl_.session_id_)*/0
  , /*decltype(_impl_.product_)*/0
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.record_id_)*/int64_t{0}
  , /*decltype(_impl_.finalized_record_id_)*/int64_t{0}} {}
struct ChromeUserMetricsExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeUserMetricsExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeUserMetricsExtensionDefaultTypeInternal() {}
  union {
    ChromeUserMetricsExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeUserMetricsExtensionDefaultTypeInternal _ChromeUserMetricsExtension_default_instance_;
}  // namespace metrics
namespace metrics {
bool ChromeUserMetricsExtension_RealLocalTime_TimeSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeUserMetricsExtension_RealLocalTime_TimeSource_strings[3] = {};

static const char ChromeUserMetricsExtension_RealLocalTime_TimeSource_names[] =
  "CLIENT_CLOCK"
  "NETWORK_TIME_CLOCK"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeUserMetricsExtension_RealLocalTime_TimeSource_entries[] = {
  { {ChromeUserMetricsExtension_RealLocalTime_TimeSource_names + 0, 12}, 1 },
  { {ChromeUserMetricsExtension_RealLocalTime_TimeSource_names + 12, 18}, 2 },
  { {ChromeUserMetricsExtension_RealLocalTime_TimeSource_names + 30, 11}, 0 },
};

static const int ChromeUserMetricsExtension_RealLocalTime_TimeSource_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  0, // 1 -> CLIENT_CLOCK
  1, // 2 -> NETWORK_TIME_CLOCK
};

const std::string& ChromeUserMetricsExtension_RealLocalTime_TimeSource_Name(
    ChromeUserMetricsExtension_RealLocalTime_TimeSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeUserMetricsExtension_RealLocalTime_TimeSource_entries,
          ChromeUserMetricsExtension_RealLocalTime_TimeSource_entries_by_number,
          3, ChromeUserMetricsExtension_RealLocalTime_TimeSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeUserMetricsExtension_RealLocalTime_TimeSource_entries,
      ChromeUserMetricsExtension_RealLocalTime_TimeSource_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeUserMetricsExtension_RealLocalTime_TimeSource_strings[idx].get();
}
bool ChromeUserMetricsExtension_RealLocalTime_TimeSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserMetricsExtension_RealLocalTime_TimeSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeUserMetricsExtension_RealLocalTime_TimeSource_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeUserMetricsExtension_RealLocalTime_TimeSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime::UNSPECIFIED;
constexpr ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime::CLIENT_CLOCK;
constexpr ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime::NETWORK_TIME_CLOCK;
constexpr ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime::TimeSource_MIN;
constexpr ChromeUserMetricsExtension_RealLocalTime_TimeSource ChromeUserMetricsExtension_RealLocalTime::TimeSource_MAX;
constexpr int ChromeUserMetricsExtension_RealLocalTime::TimeSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeUserMetricsExtension_Product_IsValid(int value) {
  switch (value) {
    case 0:
    case 20:
    case 25:
    case 35:
    case 56:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeUserMetricsExtension_Product_strings[5] = {};

static const char ChromeUserMetricsExtension_Product_names[] =
  "ANDROID_WEBLAYER"
  "ANDROID_WEBVIEW"
  "CAST"
  "CAST_ASSISTANT"
  "CHROME";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeUserMetricsExtension_Product_entries[] = {
  { {ChromeUserMetricsExtension_Product_names + 0, 16}, 56 },
  { {ChromeUserMetricsExtension_Product_names + 16, 15}, 20 },
  { {ChromeUserMetricsExtension_Product_names + 31, 4}, 35 },
  { {ChromeUserMetricsExtension_Product_names + 35, 14}, 25 },
  { {ChromeUserMetricsExtension_Product_names + 49, 6}, 0 },
};

static const int ChromeUserMetricsExtension_Product_entries_by_number[] = {
  4, // 0 -> CHROME
  1, // 20 -> ANDROID_WEBVIEW
  3, // 25 -> CAST_ASSISTANT
  2, // 35 -> CAST
  0, // 56 -> ANDROID_WEBLAYER
};

const std::string& ChromeUserMetricsExtension_Product_Name(
    ChromeUserMetricsExtension_Product value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeUserMetricsExtension_Product_entries,
          ChromeUserMetricsExtension_Product_entries_by_number,
          5, ChromeUserMetricsExtension_Product_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeUserMetricsExtension_Product_entries,
      ChromeUserMetricsExtension_Product_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeUserMetricsExtension_Product_strings[idx].get();
}
bool ChromeUserMetricsExtension_Product_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserMetricsExtension_Product* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeUserMetricsExtension_Product_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ChromeUserMetricsExtension_Product>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::CHROME;
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::ANDROID_WEBVIEW;
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::CAST_ASSISTANT;
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::CAST;
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::ANDROID_WEBLAYER;
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::Product_MIN;
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::Product_MAX;
constexpr int ChromeUserMetricsExtension::Product_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeUserMetricsExtension_RealLocalTime::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeUserMetricsExtension_RealLocalTime>()._impl_._has_bits_);
  static void set_has_time_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_zone_offset_from_gmt_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChromeUserMetricsExtension_RealLocalTime::ChromeUserMetricsExtension_RealLocalTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.ChromeUserMetricsExtension.RealLocalTime)
}
ChromeUserMetricsExtension_RealLocalTime::ChromeUserMetricsExtension_RealLocalTime(const ChromeUserMetricsExtension_RealLocalTime& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeUserMetricsExtension_RealLocalTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_sec_){}
    , decltype(_impl_.time_source_){}
    , decltype(_impl_.time_zone_offset_from_gmt_sec_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.time_sec_, &from._impl_.time_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_zone_offset_from_gmt_sec_) -
    reinterpret_cast<char*>(&_impl_.time_sec_)) + sizeof(_impl_.time_zone_offset_from_gmt_sec_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeUserMetricsExtension.RealLocalTime)
}

inline void ChromeUserMetricsExtension_RealLocalTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_sec_){int64_t{0}}
    , decltype(_impl_.time_source_){0}
    , decltype(_impl_.time_zone_offset_from_gmt_sec_){0}
  };
}

ChromeUserMetricsExtension_RealLocalTime::~ChromeUserMetricsExtension_RealLocalTime() {
  // @@protoc_insertion_point(destructor:metrics.ChromeUserMetricsExtension.RealLocalTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeUserMetricsExtension_RealLocalTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeUserMetricsExtension_RealLocalTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeUserMetricsExtension_RealLocalTime::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeUserMetricsExtension.RealLocalTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.time_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_zone_offset_from_gmt_sec_) -
        reinterpret_cast<char*>(&_impl_.time_sec_)) + sizeof(_impl_.time_zone_offset_from_gmt_sec_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeUserMetricsExtension_RealLocalTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.ChromeUserMetricsExtension.RealLocalTime.TimeSource time_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource_IsValid(val))) {
            _internal_set_time_source(static_cast<::metrics::ChromeUserMetricsExtension_RealLocalTime_TimeSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 time_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_sec(&has_bits);
          _impl_.time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_zone_offset_from_gmt_sec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_zone_offset_from_gmt_sec(&has_bits);
          _impl_.time_zone_offset_from_gmt_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeUserMetricsExtension_RealLocalTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.ChromeUserMetricsExtension.RealLocalTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .metrics.ChromeUserMetricsExtension.RealLocalTime.TimeSource time_source = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_time_source(), target);
  }

  // optional int64 time_sec = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_sec(), target);
  }

  // optional int32 time_zone_offset_from_gmt_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_zone_offset_from_gmt_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.ChromeUserMetricsExtension.RealLocalTime)
  return target;
}

size_t ChromeUserMetricsExtension_RealLocalTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeUserMetricsExtension.RealLocalTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 time_sec = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_sec());
    }

    // optional .metrics.ChromeUserMetricsExtension.RealLocalTime.TimeSource time_source = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_time_source());
    }

    // optional int32 time_zone_offset_from_gmt_sec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_zone_offset_from_gmt_sec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeUserMetricsExtension_RealLocalTime::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeUserMetricsExtension_RealLocalTime*>(
      &from));
}

void ChromeUserMetricsExtension_RealLocalTime::MergeFrom(const ChromeUserMetricsExtension_RealLocalTime& from) {
  ChromeUserMetricsExtension_RealLocalTime* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeUserMetricsExtension.RealLocalTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.time_sec_ = from._impl_.time_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_source_ = from._impl_.time_source_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_zone_offset_from_gmt_sec_ = from._impl_.time_zone_offset_from_gmt_sec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeUserMetricsExtension_RealLocalTime::CopyFrom(const ChromeUserMetricsExtension_RealLocalTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeUserMetricsExtension.RealLocalTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserMetricsExtension_RealLocalTime::IsInitialized() const {
  return true;
}

void ChromeUserMetricsExtension_RealLocalTime::InternalSwap(ChromeUserMetricsExtension_RealLocalTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeUserMetricsExtension_RealLocalTime, _impl_.time_zone_offset_from_gmt_sec_)
      + sizeof(ChromeUserMetricsExtension_RealLocalTime::_impl_.time_zone_offset_from_gmt_sec_)
      - PROTOBUF_FIELD_OFFSET(ChromeUserMetricsExtension_RealLocalTime, _impl_.time_sec_)>(
          reinterpret_cast<char*>(&_impl_.time_sec_),
          reinterpret_cast<char*>(&other->_impl_.time_sec_));
}

std::string ChromeUserMetricsExtension_RealLocalTime::GetTypeName() const {
  return "metrics.ChromeUserMetricsExtension.RealLocalTime";
}


// ===================================================================

class ChromeUserMetricsExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeUserMetricsExtension>()._impl_._has_bits_);
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_record_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_finalized_record_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::metrics::ChromeUserMetricsExtension_RealLocalTime& time_log_created(const ChromeUserMetricsExtension* msg);
  static void set_has_time_log_created(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::metrics::ChromeUserMetricsExtension_RealLocalTime& time_log_closed(const ChromeUserMetricsExtension* msg);
  static void set_has_time_log_closed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::metrics::SystemProfileProto& system_profile(const ChromeUserMetricsExtension* msg);
  static void set_has_system_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metrics::UserDemographicsProto& user_demographics(const ChromeUserMetricsExtension* msg);
  static void set_has_user_demographics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::metrics::StructuredDataProto& structured_data(const ChromeUserMetricsExtension* msg);
  static void set_has_structured_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::metrics::CastLogsProto& cast_logs(const ChromeUserMetricsExtension* msg);
  static void set_has_cast_logs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::metrics::ReportingInfo& reporting_info(const ChromeUserMetricsExtension* msg);
  static void set_has_reporting_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::metrics::CustomTabSessionProto& custom_tab_session(const ChromeUserMetricsExtension* msg);
  static void set_has_custom_tab_session(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::metrics::ChromeUserMetricsExtension_RealLocalTime&
ChromeUserMetricsExtension::_Internal::time_log_created(const ChromeUserMetricsExtension* msg) {
  return *msg->_impl_.time_log_created_;
}
const ::metrics::ChromeUserMetricsExtension_RealLocalTime&
ChromeUserMetricsExtension::_Internal::time_log_closed(const ChromeUserMetricsExtension* msg) {
  return *msg->_impl_.time_log_closed_;
}
const ::metrics::SystemProfileProto&
ChromeUserMetricsExtension::_Internal::system_profile(const ChromeUserMetricsExtension* msg) {
  return *msg->_impl_.system_profile_;
}
const ::metrics::UserDemographicsProto&
ChromeUserMetricsExtension::_Internal::user_demographics(const ChromeUserMetricsExtension* msg) {
  return *msg->_impl_.user_demographics_;
}
const ::metrics::StructuredDataProto&
ChromeUserMetricsExtension::_Internal::structured_data(const ChromeUserMetricsExtension* msg) {
  return *msg->_impl_.structured_data_;
}
const ::metrics::CastLogsProto&
ChromeUserMetricsExtension::_Internal::cast_logs(const ChromeUserMetricsExtension* msg) {
  return *msg->_impl_.cast_logs_;
}
const ::metrics::ReportingInfo&
ChromeUserMetricsExtension::_Internal::reporting_info(const ChromeUserMetricsExtension* msg) {
  return *msg->_impl_.reporting_info_;
}
const ::metrics::CustomTabSessionProto&
ChromeUserMetricsExtension::_Internal::custom_tab_session(const ChromeUserMetricsExtension* msg) {
  return *msg->_impl_.custom_tab_session_;
}
void ChromeUserMetricsExtension::clear_system_profile() {
  if (_impl_.system_profile_ != nullptr) _impl_.system_profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChromeUserMetricsExtension::clear_user_demographics() {
  if (_impl_.user_demographics_ != nullptr) _impl_.user_demographics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChromeUserMetricsExtension::clear_user_action_event() {
  _impl_.user_action_event_.Clear();
}
void ChromeUserMetricsExtension::clear_omnibox_event() {
  _impl_.omnibox_event_.Clear();
}
void ChromeUserMetricsExtension::clear_histogram_event() {
  _impl_.histogram_event_.Clear();
}
void ChromeUserMetricsExtension::clear_translate_event() {
  _impl_.translate_event_.Clear();
}
void ChromeUserMetricsExtension::clear_printer_event() {
  _impl_.printer_event_.Clear();
}
void ChromeUserMetricsExtension::clear_chrome_os_app_list_launch_event() {
  _impl_.chrome_os_app_list_launch_event_.Clear();
}
void ChromeUserMetricsExtension::clear_structured_data() {
  if (_impl_.structured_data_ != nullptr) _impl_.structured_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChromeUserMetricsExtension::clear_sampled_profile() {
  _impl_.sampled_profile_.Clear();
}
void ChromeUserMetricsExtension::clear_cast_logs() {
  if (_impl_.cast_logs_ != nullptr) _impl_.cast_logs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChromeUserMetricsExtension::clear_reporting_info() {
  if (_impl_.reporting_info_ != nullptr) _impl_.reporting_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChromeUserMetricsExtension::clear_trace_log() {
  _impl_.trace_log_.Clear();
}
void ChromeUserMetricsExtension::clear_custom_tab_session() {
  if (_impl_.custom_tab_session_ != nullptr) _impl_.custom_tab_session_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
ChromeUserMetricsExtension::ChromeUserMetricsExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.ChromeUserMetricsExtension)
}
ChromeUserMetricsExtension::ChromeUserMetricsExtension(const ChromeUserMetricsExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeUserMetricsExtension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_action_event_){from._impl_.user_action_event_}
    , decltype(_impl_.omnibox_event_){from._impl_.omnibox_event_}
    , decltype(_impl_.histogram_event_){from._impl_.histogram_event_}
    , decltype(_impl_.sampled_profile_){from._impl_.sampled_profile_}
    , decltype(_impl_.translate_event_){from._impl_.translate_event_}
    , decltype(_impl_.printer_event_){from._impl_.printer_event_}
    , decltype(_impl_.trace_log_){from._impl_.trace_log_}
    , decltype(_impl_.chrome_os_app_list_launch_event_){from._impl_.chrome_os_app_list_launch_event_}
    , decltype(_impl_.system_profile_){nullptr}
    , decltype(_impl_.cast_logs_){nullptr}
    , decltype(_impl_.reporting_info_){nullptr}
    , decltype(_impl_.user_demographics_){nullptr}
    , decltype(_impl_.structured_data_){nullptr}
    , decltype(_impl_.time_log_created_){nullptr}
    , decltype(_impl_.time_log_closed_){nullptr}
    , decltype(_impl_.custom_tab_session_){nullptr}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.record_id_){}
    , decltype(_impl_.finalized_record_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_system_profile()) {
    _this->_impl_.system_profile_ = new ::metrics::SystemProfileProto(*from._impl_.system_profile_);
  }
  if (from._internal_has_cast_logs()) {
    _this->_impl_.cast_logs_ = new ::metrics::CastLogsProto(*from._impl_.cast_logs_);
  }
  if (from._internal_has_reporting_info()) {
    _this->_impl_.reporting_info_ = new ::metrics::ReportingInfo(*from._impl_.reporting_info_);
  }
  if (from._internal_has_user_demographics()) {
    _this->_impl_.user_demographics_ = new ::metrics::UserDemographicsProto(*from._impl_.user_demographics_);
  }
  if (from._internal_has_structured_data()) {
    _this->_impl_.structured_data_ = new ::metrics::StructuredDataProto(*from._impl_.structured_data_);
  }
  if (from._internal_has_time_log_created()) {
    _this->_impl_.time_log_created_ = new ::metrics::ChromeUserMetricsExtension_RealLocalTime(*from._impl_.time_log_created_);
  }
  if (from._internal_has_time_log_closed()) {
    _this->_impl_.time_log_closed_ = new ::metrics::ChromeUserMetricsExtension_RealLocalTime(*from._impl_.time_log_closed_);
  }
  if (from._internal_has_custom_tab_session()) {
    _this->_impl_.custom_tab_session_ = new ::metrics::CustomTabSessionProto(*from._impl_.custom_tab_session_);
  }
  ::memcpy(&_impl_.client_id_, &from._impl_.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.finalized_record_id_) -
    reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.finalized_record_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeUserMetricsExtension)
}

inline void ChromeUserMetricsExtension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_action_event_){arena}
    , decltype(_impl_.omnibox_event_){arena}
    , decltype(_impl_.histogram_event_){arena}
    , decltype(_impl_.sampled_profile_){arena}
    , decltype(_impl_.translate_event_){arena}
    , decltype(_impl_.printer_event_){arena}
    , decltype(_impl_.trace_log_){arena}
    , decltype(_impl_.chrome_os_app_list_launch_event_){arena}
    , decltype(_impl_.system_profile_){nullptr}
    , decltype(_impl_.cast_logs_){nullptr}
    , decltype(_impl_.reporting_info_){nullptr}
    , decltype(_impl_.user_demographics_){nullptr}
    , decltype(_impl_.structured_data_){nullptr}
    , decltype(_impl_.time_log_created_){nullptr}
    , decltype(_impl_.time_log_closed_){nullptr}
    , decltype(_impl_.custom_tab_session_){nullptr}
    , decltype(_impl_.client_id_){uint64_t{0u}}
    , decltype(_impl_.session_id_){0}
    , decltype(_impl_.product_){0}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.record_id_){int64_t{0}}
    , decltype(_impl_.finalized_record_id_){int64_t{0}}
  };
}

ChromeUserMetricsExtension::~ChromeUserMetricsExtension() {
  // @@protoc_insertion_point(destructor:metrics.ChromeUserMetricsExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeUserMetricsExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_action_event_.~RepeatedPtrField();
  _impl_.omnibox_event_.~RepeatedPtrField();
  _impl_.histogram_event_.~RepeatedPtrField();
  _impl_.sampled_profile_.~RepeatedPtrField();
  _impl_.translate_event_.~RepeatedPtrField();
  _impl_.printer_event_.~RepeatedPtrField();
  _impl_.trace_log_.~RepeatedPtrField();
  _impl_.chrome_os_app_list_launch_event_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.system_profile_;
  if (this != internal_default_instance()) delete _impl_.cast_logs_;
  if (this != internal_default_instance()) delete _impl_.reporting_info_;
  if (this != internal_default_instance()) delete _impl_.user_demographics_;
  if (this != internal_default_instance()) delete _impl_.structured_data_;
  if (this != internal_default_instance()) delete _impl_.time_log_created_;
  if (this != internal_default_instance()) delete _impl_.time_log_closed_;
  if (this != internal_default_instance()) delete _impl_.custom_tab_session_;
}

void ChromeUserMetricsExtension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeUserMetricsExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeUserMetricsExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_action_event_.Clear();
  _impl_.omnibox_event_.Clear();
  _impl_.histogram_event_.Clear();
  _impl_.sampled_profile_.Clear();
  _impl_.translate_event_.Clear();
  _impl_.printer_event_.Clear();
  _impl_.trace_log_.Clear();
  _impl_.chrome_os_app_list_launch_event_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.system_profile_ != nullptr);
      _impl_.system_profile_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cast_logs_ != nullptr);
      _impl_.cast_logs_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.reporting_info_ != nullptr);
      _impl_.reporting_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.user_demographics_ != nullptr);
      _impl_.user_demographics_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.structured_data_ != nullptr);
      _impl_.structured_data_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.time_log_created_ != nullptr);
      _impl_.time_log_created_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.time_log_closed_ != nullptr);
      _impl_.time_log_closed_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.custom_tab_session_ != nullptr);
      _impl_.custom_tab_session_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.finalized_record_id_) -
        reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.finalized_record_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeUserMetricsExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_session_id(&has_bits);
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.SystemProfileProto system_profile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.UserActionEventProto user_action_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_action_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.OmniboxEventProto omnibox_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_omnibox_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.HistogramEventProto histogram_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histogram_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 product = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_product(&has_bits);
          _impl_.product_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.SampledProfile sampled_profile = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sampled_profile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto cast_logs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cast_logs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.TranslateEventProto translate_event = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_translate_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.PrinterEventProto printer_event = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_printer_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.ReportingInfo reporting_info = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_reporting_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.TraceLog trace_log = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_trace_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.ChromeOSAppListLaunchEventProto chrome_os_app_list_launch_event = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chrome_os_app_list_launch_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.UserDemographicsProto user_demographics = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_demographics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.StructuredDataProto structured_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_structured_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 user_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_created = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_log_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_closed = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_log_closed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CustomTabSessionProto custom_tab_session = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_tab_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 record_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_record_id(&has_bits);
          _impl_.record_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 finalized_record_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_finalized_record_id(&has_bits);
          _impl_.finalized_record_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeUserMetricsExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.ChromeUserMetricsExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 client_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_client_id(), target);
  }

  // optional int32 session_id = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_session_id(), target);
  }

  // optional .metrics.SystemProfileProto system_profile = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::system_profile(this),
        _Internal::system_profile(this).GetCachedSize(), target, stream);
  }

  // repeated .metrics.UserActionEventProto user_action_event = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_action_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_action_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.OmniboxEventProto omnibox_event = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_omnibox_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_omnibox_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.HistogramEventProto histogram_event = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_histogram_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_histogram_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 product = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_product(), target);
  }

  // repeated .metrics.SampledProfile sampled_profile = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sampled_profile_size()); i < n; i++) {
    const auto& repfield = this->_internal_sampled_profile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .metrics.CastLogsProto cast_logs = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::cast_logs(this),
        _Internal::cast_logs(this).GetCachedSize(), target, stream);
  }

  // repeated .metrics.TranslateEventProto translate_event = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_translate_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_translate_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.PrinterEventProto printer_event = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_printer_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_printer_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .metrics.ReportingInfo reporting_info = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::reporting_info(this),
        _Internal::reporting_info(this).GetCachedSize(), target, stream);
  }

  // repeated .metrics.TraceLog trace_log = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trace_log_size()); i < n; i++) {
    const auto& repfield = this->_internal_trace_log(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.ChromeOSAppListLaunchEventProto chrome_os_app_list_launch_event = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chrome_os_app_list_launch_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_chrome_os_app_list_launch_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .metrics.UserDemographicsProto user_demographics = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::user_demographics(this),
        _Internal::user_demographics(this).GetCachedSize(), target, stream);
  }

  // optional .metrics.StructuredDataProto structured_data = 23;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::structured_data(this),
        _Internal::structured_data(this).GetCachedSize(), target, stream);
  }

  // optional fixed64 user_id = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(24, this->_internal_user_id(), target);
  }

  // optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_created = 25;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::time_log_created(this),
        _Internal::time_log_created(this).GetCachedSize(), target, stream);
  }

  // optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_closed = 26;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::time_log_closed(this),
        _Internal::time_log_closed(this).GetCachedSize(), target, stream);
  }

  // optional .metrics.CustomTabSessionProto custom_tab_session = 27;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::custom_tab_session(this),
        _Internal::custom_tab_session(this).GetCachedSize(), target, stream);
  }

  // optional int64 record_id = 28;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_record_id(), target);
  }

  // optional int64 finalized_record_id = 29;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_finalized_record_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.ChromeUserMetricsExtension)
  return target;
}

size_t ChromeUserMetricsExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeUserMetricsExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.UserActionEventProto user_action_event = 4;
  total_size += 1UL * this->_internal_user_action_event_size();
  for (const auto& msg : this->_impl_.user_action_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.OmniboxEventProto omnibox_event = 5;
  total_size += 1UL * this->_internal_omnibox_event_size();
  for (const auto& msg : this->_impl_.omnibox_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.HistogramEventProto histogram_event = 6;
  total_size += 1UL * this->_internal_histogram_event_size();
  for (const auto& msg : this->_impl_.histogram_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.SampledProfile sampled_profile = 11;
  total_size += 1UL * this->_internal_sampled_profile_size();
  for (const auto& msg : this->_impl_.sampled_profile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.TranslateEventProto translate_event = 15;
  total_size += 1UL * this->_internal_translate_event_size();
  for (const auto& msg : this->_impl_.translate_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.PrinterEventProto printer_event = 16;
  total_size += 2UL * this->_internal_printer_event_size();
  for (const auto& msg : this->_impl_.printer_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.TraceLog trace_log = 19;
  total_size += 2UL * this->_internal_trace_log_size();
  for (const auto& msg : this->_impl_.trace_log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.ChromeOSAppListLaunchEventProto chrome_os_app_list_launch_event = 20;
  total_size += 2UL * this->_internal_chrome_os_app_list_launch_event_size();
  for (const auto& msg : this->_impl_.chrome_os_app_list_launch_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .metrics.SystemProfileProto system_profile = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_profile_);
    }

    // optional .metrics.CastLogsProto cast_logs = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cast_logs_);
    }

    // optional .metrics.ReportingInfo reporting_info = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reporting_info_);
    }

    // optional .metrics.UserDemographicsProto user_demographics = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_demographics_);
    }

    // optional .metrics.StructuredDataProto structured_data = 23;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.structured_data_);
    }

    // optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_created = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_log_created_);
    }

    // optional .metrics.ChromeUserMetricsExtension.RealLocalTime time_log_closed = 26;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_log_closed_);
    }

    // optional .metrics.CustomTabSessionProto custom_tab_session = 27;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_tab_session_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional fixed64 client_id = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int32 session_id = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
    }

    // optional int32 product = 10 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_product());
    }

    // optional fixed64 user_id = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional int64 record_id = 28;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_record_id());
    }

    // optional int64 finalized_record_id = 29;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_finalized_record_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeUserMetricsExtension::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeUserMetricsExtension*>(
      &from));
}

void ChromeUserMetricsExtension::MergeFrom(const ChromeUserMetricsExtension& from) {
  ChromeUserMetricsExtension* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeUserMetricsExtension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_action_event_.MergeFrom(from._impl_.user_action_event_);
  _this->_impl_.omnibox_event_.MergeFrom(from._impl_.omnibox_event_);
  _this->_impl_.histogram_event_.MergeFrom(from._impl_.histogram_event_);
  _this->_impl_.sampled_profile_.MergeFrom(from._impl_.sampled_profile_);
  _this->_impl_.translate_event_.MergeFrom(from._impl_.translate_event_);
  _this->_impl_.printer_event_.MergeFrom(from._impl_.printer_event_);
  _this->_impl_.trace_log_.MergeFrom(from._impl_.trace_log_);
  _this->_impl_.chrome_os_app_list_launch_event_.MergeFrom(from._impl_.chrome_os_app_list_launch_event_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_system_profile()->::metrics::SystemProfileProto::MergeFrom(
          from._internal_system_profile());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cast_logs()->::metrics::CastLogsProto::MergeFrom(
          from._internal_cast_logs());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_reporting_info()->::metrics::ReportingInfo::MergeFrom(
          from._internal_reporting_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_user_demographics()->::metrics::UserDemographicsProto::MergeFrom(
          from._internal_user_demographics());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_structured_data()->::metrics::StructuredDataProto::MergeFrom(
          from._internal_structured_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_time_log_created()->::metrics::ChromeUserMetricsExtension_RealLocalTime::MergeFrom(
          from._internal_time_log_created());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_time_log_closed()->::metrics::ChromeUserMetricsExtension_RealLocalTime::MergeFrom(
          from._internal_time_log_closed());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_custom_tab_session()->::metrics::CustomTabSessionProto::MergeFrom(
          from._internal_custom_tab_session());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.client_id_ = from._impl_.client_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.session_id_ = from._impl_.session_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.product_ = from._impl_.product_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.record_id_ = from._impl_.record_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.finalized_record_id_ = from._impl_.finalized_record_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeUserMetricsExtension::CopyFrom(const ChromeUserMetricsExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeUserMetricsExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserMetricsExtension::IsInitialized() const {
  return true;
}

void ChromeUserMetricsExtension::InternalSwap(ChromeUserMetricsExtension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_action_event_.InternalSwap(&other->_impl_.user_action_event_);
  _impl_.omnibox_event_.InternalSwap(&other->_impl_.omnibox_event_);
  _impl_.histogram_event_.InternalSwap(&other->_impl_.histogram_event_);
  _impl_.sampled_profile_.InternalSwap(&other->_impl_.sampled_profile_);
  _impl_.translate_event_.InternalSwap(&other->_impl_.translate_event_);
  _impl_.printer_event_.InternalSwap(&other->_impl_.printer_event_);
  _impl_.trace_log_.InternalSwap(&other->_impl_.trace_log_);
  _impl_.chrome_os_app_list_launch_event_.InternalSwap(&other->_impl_.chrome_os_app_list_launch_event_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeUserMetricsExtension, _impl_.finalized_record_id_)
      + sizeof(ChromeUserMetricsExtension::_impl_.finalized_record_id_)
      - PROTOBUF_FIELD_OFFSET(ChromeUserMetricsExtension, _impl_.system_profile_)>(
          reinterpret_cast<char*>(&_impl_.system_profile_),
          reinterpret_cast<char*>(&other->_impl_.system_profile_));
}

std::string ChromeUserMetricsExtension::GetTypeName() const {
  return "metrics.ChromeUserMetricsExtension";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::ChromeUserMetricsExtension_RealLocalTime*
Arena::CreateMaybeMessage< ::metrics::ChromeUserMetricsExtension_RealLocalTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::ChromeUserMetricsExtension_RealLocalTime >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::ChromeUserMetricsExtension*
Arena::CreateMaybeMessage< ::metrics::ChromeUserMetricsExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::ChromeUserMetricsExtension >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
