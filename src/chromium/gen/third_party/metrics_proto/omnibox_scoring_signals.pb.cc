// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omnibox_scoring_signals.proto

#include "omnibox_scoring_signals.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR OmniboxScoringSignals::OmniboxScoringSignals(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.typed_count_)*/0
  , /*decltype(_impl_.visit_count_)*/0
  , /*decltype(_impl_.elapsed_time_last_visit_secs_)*/int64_t{0}
  , /*decltype(_impl_.shortcut_visit_count_)*/0
  , /*decltype(_impl_.shortest_shortcut_len_)*/0
  , /*decltype(_impl_.elapsed_time_last_shortcut_visit_sec_)*/int64_t{0}
  , /*decltype(_impl_.num_bookmarks_of_url_)*/0
  , /*decltype(_impl_.first_bookmark_title_match_position_)*/0
  , /*decltype(_impl_.total_bookmark_title_match_length_)*/0
  , /*decltype(_impl_.num_input_terms_matched_by_bookmark_title_)*/0
  , /*decltype(_impl_.first_url_match_position_)*/0
  , /*decltype(_impl_.total_url_match_length_)*/0
  , /*decltype(_impl_.total_host_match_length_)*/0
  , /*decltype(_impl_.total_path_match_length_)*/0
  , /*decltype(_impl_.is_host_only_)*/false
  , /*decltype(_impl_.host_match_at_word_boundary_)*/false
  , /*decltype(_impl_.has_non_scheme_www_match_)*/false
  , /*decltype(_impl_.allowed_to_be_default_match_)*/false
  , /*decltype(_impl_.total_query_or_ref_match_length_)*/0
  , /*decltype(_impl_.total_title_match_length_)*/0
  , /*decltype(_impl_.num_input_terms_matched_by_title_)*/0
  , /*decltype(_impl_.num_input_terms_matched_by_url_)*/0
  , /*decltype(_impl_.length_of_url_)*/0
  , /*decltype(_impl_.site_engagement_)*/0
  , /*decltype(_impl_.search_suggest_relevance_)*/0
  , /*decltype(_impl_.is_search_suggest_entity_)*/false
  , /*decltype(_impl_.is_verbatim_)*/false
  , /*decltype(_impl_.is_navsuggest_)*/false
  , /*decltype(_impl_.is_search_suggest_tail_)*/false
  , /*decltype(_impl_.is_answer_suggest_)*/false
  , /*decltype(_impl_.is_calculator_suggest_)*/false} {}
struct OmniboxScoringSignalsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OmniboxScoringSignalsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OmniboxScoringSignalsDefaultTypeInternal() {}
  union {
    OmniboxScoringSignals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OmniboxScoringSignalsDefaultTypeInternal _OmniboxScoringSignals_default_instance_;
}  // namespace metrics
namespace metrics {

// ===================================================================

class OmniboxScoringSignals::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxScoringSignals>()._impl_._has_bits_);
  static void set_has_typed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_visit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_elapsed_time_last_visit_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shortcut_visit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shortest_shortcut_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_elapsed_time_last_shortcut_visit_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_host_only(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_num_bookmarks_of_url(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_first_bookmark_title_match_position(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_bookmark_title_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_input_terms_matched_by_bookmark_title(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_first_url_match_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_url_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_host_match_at_word_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_total_host_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_path_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_total_query_or_ref_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_total_title_match_length(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_has_non_scheme_www_match(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_num_input_terms_matched_by_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_num_input_terms_matched_by_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_length_of_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_site_engagement(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_allowed_to_be_default_match(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_search_suggest_relevance(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_is_search_suggest_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_is_verbatim(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_is_navsuggest(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_is_search_suggest_tail(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_is_answer_suggest(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_is_calculator_suggest(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

OmniboxScoringSignals::OmniboxScoringSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.OmniboxScoringSignals)
}
OmniboxScoringSignals::OmniboxScoringSignals(const OmniboxScoringSignals& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OmniboxScoringSignals* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.typed_count_){}
    , decltype(_impl_.visit_count_){}
    , decltype(_impl_.elapsed_time_last_visit_secs_){}
    , decltype(_impl_.shortcut_visit_count_){}
    , decltype(_impl_.shortest_shortcut_len_){}
    , decltype(_impl_.elapsed_time_last_shortcut_visit_sec_){}
    , decltype(_impl_.num_bookmarks_of_url_){}
    , decltype(_impl_.first_bookmark_title_match_position_){}
    , decltype(_impl_.total_bookmark_title_match_length_){}
    , decltype(_impl_.num_input_terms_matched_by_bookmark_title_){}
    , decltype(_impl_.first_url_match_position_){}
    , decltype(_impl_.total_url_match_length_){}
    , decltype(_impl_.total_host_match_length_){}
    , decltype(_impl_.total_path_match_length_){}
    , decltype(_impl_.is_host_only_){}
    , decltype(_impl_.host_match_at_word_boundary_){}
    , decltype(_impl_.has_non_scheme_www_match_){}
    , decltype(_impl_.allowed_to_be_default_match_){}
    , decltype(_impl_.total_query_or_ref_match_length_){}
    , decltype(_impl_.total_title_match_length_){}
    , decltype(_impl_.num_input_terms_matched_by_title_){}
    , decltype(_impl_.num_input_terms_matched_by_url_){}
    , decltype(_impl_.length_of_url_){}
    , decltype(_impl_.site_engagement_){}
    , decltype(_impl_.search_suggest_relevance_){}
    , decltype(_impl_.is_search_suggest_entity_){}
    , decltype(_impl_.is_verbatim_){}
    , decltype(_impl_.is_navsuggest_){}
    , decltype(_impl_.is_search_suggest_tail_){}
    , decltype(_impl_.is_answer_suggest_){}
    , decltype(_impl_.is_calculator_suggest_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.typed_count_, &from._impl_.typed_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_calculator_suggest_) -
    reinterpret_cast<char*>(&_impl_.typed_count_)) + sizeof(_impl_.is_calculator_suggest_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxScoringSignals)
}

inline void OmniboxScoringSignals::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.typed_count_){0}
    , decltype(_impl_.visit_count_){0}
    , decltype(_impl_.elapsed_time_last_visit_secs_){int64_t{0}}
    , decltype(_impl_.shortcut_visit_count_){0}
    , decltype(_impl_.shortest_shortcut_len_){0}
    , decltype(_impl_.elapsed_time_last_shortcut_visit_sec_){int64_t{0}}
    , decltype(_impl_.num_bookmarks_of_url_){0}
    , decltype(_impl_.first_bookmark_title_match_position_){0}
    , decltype(_impl_.total_bookmark_title_match_length_){0}
    , decltype(_impl_.num_input_terms_matched_by_bookmark_title_){0}
    , decltype(_impl_.first_url_match_position_){0}
    , decltype(_impl_.total_url_match_length_){0}
    , decltype(_impl_.total_host_match_length_){0}
    , decltype(_impl_.total_path_match_length_){0}
    , decltype(_impl_.is_host_only_){false}
    , decltype(_impl_.host_match_at_word_boundary_){false}
    , decltype(_impl_.has_non_scheme_www_match_){false}
    , decltype(_impl_.allowed_to_be_default_match_){false}
    , decltype(_impl_.total_query_or_ref_match_length_){0}
    , decltype(_impl_.total_title_match_length_){0}
    , decltype(_impl_.num_input_terms_matched_by_title_){0}
    , decltype(_impl_.num_input_terms_matched_by_url_){0}
    , decltype(_impl_.length_of_url_){0}
    , decltype(_impl_.site_engagement_){0}
    , decltype(_impl_.search_suggest_relevance_){0}
    , decltype(_impl_.is_search_suggest_entity_){false}
    , decltype(_impl_.is_verbatim_){false}
    , decltype(_impl_.is_navsuggest_){false}
    , decltype(_impl_.is_search_suggest_tail_){false}
    , decltype(_impl_.is_answer_suggest_){false}
    , decltype(_impl_.is_calculator_suggest_){false}
  };
}

OmniboxScoringSignals::~OmniboxScoringSignals() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxScoringSignals)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OmniboxScoringSignals::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OmniboxScoringSignals::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OmniboxScoringSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxScoringSignals)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.typed_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.first_bookmark_title_match_position_) -
        reinterpret_cast<char*>(&_impl_.typed_count_)) + sizeof(_impl_.first_bookmark_title_match_position_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.total_bookmark_title_match_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.host_match_at_word_boundary_) -
        reinterpret_cast<char*>(&_impl_.total_bookmark_title_match_length_)) + sizeof(_impl_.host_match_at_word_boundary_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.has_non_scheme_www_match_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.site_engagement_) -
        reinterpret_cast<char*>(&_impl_.has_non_scheme_www_match_)) + sizeof(_impl_.site_engagement_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&_impl_.search_suggest_relevance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_calculator_suggest_) -
        reinterpret_cast<char*>(&_impl_.search_suggest_relevance_)) + sizeof(_impl_.is_calculator_suggest_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OmniboxScoringSignals::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 typed_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_typed_count(&has_bits);
          _impl_.typed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 visit_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_visit_count(&has_bits);
          _impl_.visit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 elapsed_time_last_visit_secs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_elapsed_time_last_visit_secs(&has_bits);
          _impl_.elapsed_time_last_visit_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shortcut_visit_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shortcut_visit_count(&has_bits);
          _impl_.shortcut_visit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shortest_shortcut_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shortest_shortcut_len(&has_bits);
          _impl_.shortest_shortcut_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 elapsed_time_last_shortcut_visit_sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_elapsed_time_last_shortcut_visit_sec(&has_bits);
          _impl_.elapsed_time_last_shortcut_visit_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_host_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_host_only(&has_bits);
          _impl_.is_host_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_bookmarks_of_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_num_bookmarks_of_url(&has_bits);
          _impl_.num_bookmarks_of_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_bookmark_title_match_position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_first_bookmark_title_match_position(&has_bits);
          _impl_.first_bookmark_title_match_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_bookmark_title_match_length = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_total_bookmark_title_match_length(&has_bits);
          _impl_.total_bookmark_title_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_input_terms_matched_by_bookmark_title = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_num_input_terms_matched_by_bookmark_title(&has_bits);
          _impl_.num_input_terms_matched_by_bookmark_title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_url_match_position = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_first_url_match_position(&has_bits);
          _impl_.first_url_match_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_url_match_length = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_total_url_match_length(&has_bits);
          _impl_.total_url_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool host_match_at_word_boundary = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_host_match_at_word_boundary(&has_bits);
          _impl_.host_match_at_word_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_host_match_length = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_total_host_match_length(&has_bits);
          _impl_.total_host_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_path_match_length = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_total_path_match_length(&has_bits);
          _impl_.total_path_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_query_or_ref_match_length = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_total_query_or_ref_match_length(&has_bits);
          _impl_.total_query_or_ref_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_title_match_length = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_total_title_match_length(&has_bits);
          _impl_.total_title_match_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_non_scheme_www_match = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_has_non_scheme_www_match(&has_bits);
          _impl_.has_non_scheme_www_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_input_terms_matched_by_title = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_num_input_terms_matched_by_title(&has_bits);
          _impl_.num_input_terms_matched_by_title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_input_terms_matched_by_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_num_input_terms_matched_by_url(&has_bits);
          _impl_.num_input_terms_matched_by_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 length_of_url = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_length_of_url(&has_bits);
          _impl_.length_of_url_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float site_engagement = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_site_engagement(&has_bits);
          _impl_.site_engagement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool allowed_to_be_default_match = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_allowed_to_be_default_match(&has_bits);
          _impl_.allowed_to_be_default_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 search_suggest_relevance = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_search_suggest_relevance(&has_bits);
          _impl_.search_suggest_relevance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_search_suggest_entity = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_is_search_suggest_entity(&has_bits);
          _impl_.is_search_suggest_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_verbatim = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_is_verbatim(&has_bits);
          _impl_.is_verbatim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_navsuggest = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_is_navsuggest(&has_bits);
          _impl_.is_navsuggest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_search_suggest_tail = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_is_search_suggest_tail(&has_bits);
          _impl_.is_search_suggest_tail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_answer_suggest = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_is_answer_suggest(&has_bits);
          _impl_.is_answer_suggest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_calculator_suggest = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_is_calculator_suggest(&has_bits);
          _impl_.is_calculator_suggest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OmniboxScoringSignals::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.OmniboxScoringSignals)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 typed_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_typed_count(), target);
  }

  // optional int32 visit_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_visit_count(), target);
  }

  // optional int64 elapsed_time_last_visit_secs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_elapsed_time_last_visit_secs(), target);
  }

  // optional int32 shortcut_visit_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_shortcut_visit_count(), target);
  }

  // optional int32 shortest_shortcut_len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_shortest_shortcut_len(), target);
  }

  // optional int64 elapsed_time_last_shortcut_visit_sec = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_elapsed_time_last_shortcut_visit_sec(), target);
  }

  // optional bool is_host_only = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_host_only(), target);
  }

  // optional int32 num_bookmarks_of_url = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_bookmarks_of_url(), target);
  }

  // optional int32 first_bookmark_title_match_position = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_first_bookmark_title_match_position(), target);
  }

  // optional int32 total_bookmark_title_match_length = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_total_bookmark_title_match_length(), target);
  }

  // optional int32 num_input_terms_matched_by_bookmark_title = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_num_input_terms_matched_by_bookmark_title(), target);
  }

  // optional int32 first_url_match_position = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_first_url_match_position(), target);
  }

  // optional int32 total_url_match_length = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_total_url_match_length(), target);
  }

  // optional bool host_match_at_word_boundary = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_host_match_at_word_boundary(), target);
  }

  // optional int32 total_host_match_length = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_total_host_match_length(), target);
  }

  // optional int32 total_path_match_length = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_total_path_match_length(), target);
  }

  // optional int32 total_query_or_ref_match_length = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_total_query_or_ref_match_length(), target);
  }

  // optional int32 total_title_match_length = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_total_title_match_length(), target);
  }

  // optional bool has_non_scheme_www_match = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_has_non_scheme_www_match(), target);
  }

  // optional int32 num_input_terms_matched_by_title = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_num_input_terms_matched_by_title(), target);
  }

  // optional int32 num_input_terms_matched_by_url = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_num_input_terms_matched_by_url(), target);
  }

  // optional int32 length_of_url = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_length_of_url(), target);
  }

  // optional float site_engagement = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_site_engagement(), target);
  }

  // optional bool allowed_to_be_default_match = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_allowed_to_be_default_match(), target);
  }

  // optional int32 search_suggest_relevance = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_search_suggest_relevance(), target);
  }

  // optional bool is_search_suggest_entity = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_is_search_suggest_entity(), target);
  }

  // optional bool is_verbatim = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_is_verbatim(), target);
  }

  // optional bool is_navsuggest = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_is_navsuggest(), target);
  }

  // optional bool is_search_suggest_tail = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_is_search_suggest_tail(), target);
  }

  // optional bool is_answer_suggest = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_is_answer_suggest(), target);
  }

  // optional bool is_calculator_suggest = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_is_calculator_suggest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.OmniboxScoringSignals)
  return target;
}

size_t OmniboxScoringSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxScoringSignals)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 typed_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typed_count());
    }

    // optional int32 visit_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_visit_count());
    }

    // optional int64 elapsed_time_last_visit_secs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_elapsed_time_last_visit_secs());
    }

    // optional int32 shortcut_visit_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shortcut_visit_count());
    }

    // optional int32 shortest_shortcut_len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shortest_shortcut_len());
    }

    // optional int64 elapsed_time_last_shortcut_visit_sec = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_elapsed_time_last_shortcut_visit_sec());
    }

    // optional int32 num_bookmarks_of_url = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_bookmarks_of_url());
    }

    // optional int32 first_bookmark_title_match_position = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first_bookmark_title_match_position());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 total_bookmark_title_match_length = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_bookmark_title_match_length());
    }

    // optional int32 num_input_terms_matched_by_bookmark_title = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_input_terms_matched_by_bookmark_title());
    }

    // optional int32 first_url_match_position = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first_url_match_position());
    }

    // optional int32 total_url_match_length = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_url_match_length());
    }

    // optional int32 total_host_match_length = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_host_match_length());
    }

    // optional int32 total_path_match_length = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_total_path_match_length());
    }

    // optional bool is_host_only = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool host_match_at_word_boundary = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool has_non_scheme_www_match = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool allowed_to_be_default_match = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 total_query_or_ref_match_length = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_total_query_or_ref_match_length());
    }

    // optional int32 total_title_match_length = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_total_title_match_length());
    }

    // optional int32 num_input_terms_matched_by_title = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_input_terms_matched_by_title());
    }

    // optional int32 num_input_terms_matched_by_url = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_input_terms_matched_by_url());
    }

    // optional int32 length_of_url = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_length_of_url());
    }

    // optional float site_engagement = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional int32 search_suggest_relevance = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_search_suggest_relevance());
    }

    // optional bool is_search_suggest_entity = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_verbatim = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_navsuggest = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_search_suggest_tail = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_answer_suggest = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_calculator_suggest = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxScoringSignals::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OmniboxScoringSignals*>(
      &from));
}

void OmniboxScoringSignals::MergeFrom(const OmniboxScoringSignals& from) {
  OmniboxScoringSignals* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxScoringSignals)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.typed_count_ = from._impl_.typed_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.visit_count_ = from._impl_.visit_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.elapsed_time_last_visit_secs_ = from._impl_.elapsed_time_last_visit_secs_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.shortcut_visit_count_ = from._impl_.shortcut_visit_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shortest_shortcut_len_ = from._impl_.shortest_shortcut_len_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.elapsed_time_last_shortcut_visit_sec_ = from._impl_.elapsed_time_last_shortcut_visit_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.num_bookmarks_of_url_ = from._impl_.num_bookmarks_of_url_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.first_bookmark_title_match_position_ = from._impl_.first_bookmark_title_match_position_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.total_bookmark_title_match_length_ = from._impl_.total_bookmark_title_match_length_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.num_input_terms_matched_by_bookmark_title_ = from._impl_.num_input_terms_matched_by_bookmark_title_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.first_url_match_position_ = from._impl_.first_url_match_position_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.total_url_match_length_ = from._impl_.total_url_match_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.total_host_match_length_ = from._impl_.total_host_match_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.total_path_match_length_ = from._impl_.total_path_match_length_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_host_only_ = from._impl_.is_host_only_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.host_match_at_word_boundary_ = from._impl_.host_match_at_word_boundary_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.has_non_scheme_www_match_ = from._impl_.has_non_scheme_www_match_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.allowed_to_be_default_match_ = from._impl_.allowed_to_be_default_match_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.total_query_or_ref_match_length_ = from._impl_.total_query_or_ref_match_length_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.total_title_match_length_ = from._impl_.total_title_match_length_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.num_input_terms_matched_by_title_ = from._impl_.num_input_terms_matched_by_title_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.num_input_terms_matched_by_url_ = from._impl_.num_input_terms_matched_by_url_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.length_of_url_ = from._impl_.length_of_url_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.site_engagement_ = from._impl_.site_engagement_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.search_suggest_relevance_ = from._impl_.search_suggest_relevance_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.is_search_suggest_entity_ = from._impl_.is_search_suggest_entity_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.is_verbatim_ = from._impl_.is_verbatim_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.is_navsuggest_ = from._impl_.is_navsuggest_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.is_search_suggest_tail_ = from._impl_.is_search_suggest_tail_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.is_answer_suggest_ = from._impl_.is_answer_suggest_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.is_calculator_suggest_ = from._impl_.is_calculator_suggest_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OmniboxScoringSignals::CopyFrom(const OmniboxScoringSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxScoringSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxScoringSignals::IsInitialized() const {
  return true;
}

void OmniboxScoringSignals::InternalSwap(OmniboxScoringSignals* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OmniboxScoringSignals, _impl_.is_calculator_suggest_)
      + sizeof(OmniboxScoringSignals::_impl_.is_calculator_suggest_)
      - PROTOBUF_FIELD_OFFSET(OmniboxScoringSignals, _impl_.typed_count_)>(
          reinterpret_cast<char*>(&_impl_.typed_count_),
          reinterpret_cast<char*>(&other->_impl_.typed_count_));
}

std::string OmniboxScoringSignals::GetTypeName() const {
  return "metrics.OmniboxScoringSignals";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::OmniboxScoringSignals*
Arena::CreateMaybeMessage< ::metrics::OmniboxScoringSignals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::OmniboxScoringSignals >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
