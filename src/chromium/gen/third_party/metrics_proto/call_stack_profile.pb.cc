// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: call_stack_profile.proto

#include "call_stack_profile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR CallStackProfile_ModuleIdentifier::CallStackProfile_ModuleIdentifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.build_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_md5_prefix_)*/uint64_t{0u}} {}
struct CallStackProfile_ModuleIdentifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallStackProfile_ModuleIdentifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallStackProfile_ModuleIdentifierDefaultTypeInternal() {}
  union {
    CallStackProfile_ModuleIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallStackProfile_ModuleIdentifierDefaultTypeInternal _CallStackProfile_ModuleIdentifier_default_instance_;
PROTOBUF_CONSTEXPR CallStackProfile_Location::CallStackProfile_Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.function_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/uint64_t{0u}
  , /*decltype(_impl_.module_id_index_)*/0} {}
struct CallStackProfile_LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallStackProfile_LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallStackProfile_LocationDefaultTypeInternal() {}
  union {
    CallStackProfile_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallStackProfile_LocationDefaultTypeInternal _CallStackProfile_Location_default_instance_;
PROTOBUF_CONSTEXPR CallStackProfile_Stack::CallStackProfile_Stack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.frame_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallStackProfile_StackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallStackProfile_StackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallStackProfile_StackDefaultTypeInternal() {}
  union {
    CallStackProfile_Stack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallStackProfile_StackDefaultTypeInternal _CallStackProfile_Stack_default_instance_;
PROTOBUF_CONSTEXPR CallStackProfile_MetadataItem::CallStackProfile_MetadataItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.key_)*/int64_t{0}
  , /*decltype(_impl_.name_hash_index_)*/0} {}
struct CallStackProfile_MetadataItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallStackProfile_MetadataItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallStackProfile_MetadataItemDefaultTypeInternal() {}
  union {
    CallStackProfile_MetadataItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallStackProfile_MetadataItemDefaultTypeInternal _CallStackProfile_MetadataItem_default_instance_;
PROTOBUF_CONSTEXPR CallStackProfile_AsyncBacktrace::CallStackProfile_AsyncBacktrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallStackProfile_AsyncBacktraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallStackProfile_AsyncBacktraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallStackProfile_AsyncBacktraceDefaultTypeInternal() {}
  union {
    CallStackProfile_AsyncBacktrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallStackProfile_AsyncBacktraceDefaultTypeInternal _CallStackProfile_AsyncBacktrace_default_instance_;
PROTOBUF_CONSTEXPR CallStackProfile_Sample::CallStackProfile_Sample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frame_)*/{}
  , /*decltype(_impl_.process_phase_)*/{}
  , /*decltype(_impl_.count_)*/int64_t{0}} {}
struct CallStackProfile_SampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallStackProfile_SampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallStackProfile_SampleDefaultTypeInternal() {}
  union {
    CallStackProfile_Sample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallStackProfile_SampleDefaultTypeInternal _CallStackProfile_Sample_default_instance_;
PROTOBUF_CONSTEXPR CallStackProfile_StackSample::CallStackProfile_StackSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.stack_index_)*/0
  , /*decltype(_impl_.sample_time_offset_ms_)*/0
  , /*decltype(_impl_.continued_work_)*/false
  , /*decltype(_impl_.async_backtrace_index_)*/0
  , /*decltype(_impl_.weight_)*/int64_t{0}
  , /*decltype(_impl_.count_)*/int64_t{1}} {}
struct CallStackProfile_StackSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallStackProfile_StackSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallStackProfile_StackSampleDefaultTypeInternal() {}
  union {
    CallStackProfile_StackSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallStackProfile_StackSampleDefaultTypeInternal _CallStackProfile_StackSample_default_instance_;
PROTOBUF_CONSTEXPR CallStackProfile::CallStackProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deprecated_sample_)*/{}
  , /*decltype(_impl_.module_id_)*/{}
  , /*decltype(_impl_.metadata_name_hash_)*/{}
  , /*decltype(_impl_.profile_metadata_)*/{}
  , /*decltype(_impl_.async_backtrace_)*/{}
  , /*decltype(_impl_.stack_)*/{}
  , /*decltype(_impl_.stack_sample_)*/{}
  , /*decltype(_impl_.profile_duration_ms_)*/0
  , /*decltype(_impl_.sampling_period_ms_)*/0
  , /*decltype(_impl_.profile_time_offset_ms_)*/int64_t{0}} {}
struct CallStackProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallStackProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallStackProfileDefaultTypeInternal() {}
  union {
    CallStackProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallStackProfileDefaultTypeInternal _CallStackProfile_default_instance_;
}  // namespace metrics
namespace metrics {

// ===================================================================

class CallStackProfile_ModuleIdentifier::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_ModuleIdentifier>()._impl_._has_bits_);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallStackProfile_ModuleIdentifier::CallStackProfile_ModuleIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CallStackProfile.ModuleIdentifier)
}
CallStackProfile_ModuleIdentifier::CallStackProfile_ModuleIdentifier(const CallStackProfile_ModuleIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallStackProfile_ModuleIdentifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_id_){}
    , decltype(_impl_.name_md5_prefix_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.build_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_build_id()) {
    _this->_impl_.build_id_.Set(from._internal_build_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.name_md5_prefix_ = from._impl_.name_md5_prefix_;
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.ModuleIdentifier)
}

inline void CallStackProfile_ModuleIdentifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_id_){}
    , decltype(_impl_.name_md5_prefix_){uint64_t{0u}}
  };
  _impl_.build_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallStackProfile_ModuleIdentifier::~CallStackProfile_ModuleIdentifier() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.ModuleIdentifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallStackProfile_ModuleIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.build_id_.Destroy();
}

void CallStackProfile_ModuleIdentifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallStackProfile_ModuleIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.ModuleIdentifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.build_id_.ClearNonDefaultToEmpty();
  }
  _impl_.name_md5_prefix_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallStackProfile_ModuleIdentifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string build_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_build_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 name_md5_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_name_md5_prefix(&has_bits);
          _impl_.name_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallStackProfile_ModuleIdentifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CallStackProfile.ModuleIdentifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_build_id(), target);
  }

  // optional fixed64 name_md5_prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_name_md5_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CallStackProfile.ModuleIdentifier)
  return target;
}

size_t CallStackProfile_ModuleIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.ModuleIdentifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string build_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_build_id());
    }

    // optional fixed64 name_md5_prefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_ModuleIdentifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallStackProfile_ModuleIdentifier*>(
      &from));
}

void CallStackProfile_ModuleIdentifier::MergeFrom(const CallStackProfile_ModuleIdentifier& from) {
  CallStackProfile_ModuleIdentifier* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.ModuleIdentifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_build_id(from._internal_build_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.name_md5_prefix_ = from._impl_.name_md5_prefix_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallStackProfile_ModuleIdentifier::CopyFrom(const CallStackProfile_ModuleIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.ModuleIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_ModuleIdentifier::IsInitialized() const {
  return true;
}

void CallStackProfile_ModuleIdentifier::InternalSwap(CallStackProfile_ModuleIdentifier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.build_id_, lhs_arena,
      &other->_impl_.build_id_, rhs_arena
  );
  swap(_impl_.name_md5_prefix_, other->_impl_.name_md5_prefix_);
}

std::string CallStackProfile_ModuleIdentifier::GetTypeName() const {
  return "metrics.CallStackProfile.ModuleIdentifier";
}


// ===================================================================

class CallStackProfile_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_Location>()._impl_._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_module_id_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallStackProfile_Location::CallStackProfile_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CallStackProfile.Location)
}
CallStackProfile_Location::CallStackProfile_Location(const CallStackProfile_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallStackProfile_Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.module_id_index_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_function_name()) {
    _this->_impl_.function_name_.Set(from._internal_function_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.address_, &from._impl_.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.module_id_index_) -
    reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.module_id_index_));
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.Location)
}

inline void CallStackProfile_Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_name_){}
    , decltype(_impl_.address_){uint64_t{0u}}
    , decltype(_impl_.module_id_index_){0}
  };
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallStackProfile_Location::~CallStackProfile_Location() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallStackProfile_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_name_.Destroy();
}

void CallStackProfile_Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallStackProfile_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.function_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.module_id_index_) -
        reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.module_id_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallStackProfile_Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_address(&has_bits);
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 module_id_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_module_id_index(&has_bits);
          _impl_.module_id_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string function_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_function_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallStackProfile_Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CallStackProfile.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 address = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(), target);
  }

  // optional int32 module_id_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_module_id_index(), target);
  }

  // optional string function_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_function_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CallStackProfile.Location)
  return target;
}

size_t CallStackProfile_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string function_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_function_name());
    }

    // optional uint64 address = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_address());
    }

    // optional int32 module_id_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_module_id_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_Location::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallStackProfile_Location*>(
      &from));
}

void CallStackProfile_Location::MergeFrom(const CallStackProfile_Location& from) {
  CallStackProfile_Location* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.address_ = from._impl_.address_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.module_id_index_ = from._impl_.module_id_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallStackProfile_Location::CopyFrom(const CallStackProfile_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_Location::IsInitialized() const {
  return true;
}

void CallStackProfile_Location::InternalSwap(CallStackProfile_Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.function_name_, lhs_arena,
      &other->_impl_.function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallStackProfile_Location, _impl_.module_id_index_)
      + sizeof(CallStackProfile_Location::_impl_.module_id_index_)
      - PROTOBUF_FIELD_OFFSET(CallStackProfile_Location, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

std::string CallStackProfile_Location::GetTypeName() const {
  return "metrics.CallStackProfile.Location";
}


// ===================================================================

class CallStackProfile_Stack::_Internal {
 public:
};

CallStackProfile_Stack::CallStackProfile_Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CallStackProfile.Stack)
}
CallStackProfile_Stack::CallStackProfile_Stack(const CallStackProfile_Stack& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallStackProfile_Stack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_){from._impl_.frame_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.Stack)
}

inline void CallStackProfile_Stack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallStackProfile_Stack::~CallStackProfile_Stack() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.Stack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallStackProfile_Stack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frame_.~RepeatedPtrField();
}

void CallStackProfile_Stack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallStackProfile_Stack::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.Stack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frame_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallStackProfile_Stack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .metrics.CallStackProfile.Location frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallStackProfile_Stack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CallStackProfile.Stack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location frame = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frame_size()); i < n; i++) {
    const auto& repfield = this->_internal_frame(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CallStackProfile.Stack)
  return target;
}

size_t CallStackProfile_Stack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.Stack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location frame = 1;
  total_size += 1UL * this->_internal_frame_size();
  for (const auto& msg : this->_impl_.frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_Stack::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallStackProfile_Stack*>(
      &from));
}

void CallStackProfile_Stack::MergeFrom(const CallStackProfile_Stack& from) {
  CallStackProfile_Stack* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.Stack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.frame_.MergeFrom(from._impl_.frame_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallStackProfile_Stack::CopyFrom(const CallStackProfile_Stack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.Stack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_Stack::IsInitialized() const {
  return true;
}

void CallStackProfile_Stack::InternalSwap(CallStackProfile_Stack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.frame_.InternalSwap(&other->_impl_.frame_);
}

std::string CallStackProfile_Stack::GetTypeName() const {
  return "metrics.CallStackProfile.Stack";
}


// ===================================================================

class CallStackProfile_MetadataItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_MetadataItem>()._impl_._has_bits_);
  static void set_has_name_hash_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallStackProfile_MetadataItem::CallStackProfile_MetadataItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CallStackProfile.MetadataItem)
}
CallStackProfile_MetadataItem::CallStackProfile_MetadataItem(const CallStackProfile_MetadataItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallStackProfile_MetadataItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.name_hash_index_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.name_hash_index_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.name_hash_index_));
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.MetadataItem)
}

inline void CallStackProfile_MetadataItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.key_){int64_t{0}}
    , decltype(_impl_.name_hash_index_){0}
  };
}

CallStackProfile_MetadataItem::~CallStackProfile_MetadataItem() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.MetadataItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallStackProfile_MetadataItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallStackProfile_MetadataItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallStackProfile_MetadataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.MetadataItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.name_hash_index_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.name_hash_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallStackProfile_MetadataItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 name_hash_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_name_hash_index(&has_bits);
          _impl_.name_hash_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_key(&has_bits);
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallStackProfile_MetadataItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CallStackProfile.MetadataItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 name_hash_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_name_hash_index(), target);
  }

  // optional sint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_value(), target);
  }

  // optional sint64 key = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(3, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CallStackProfile.MetadataItem)
  return target;
}

size_t CallStackProfile_MetadataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.MetadataItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional sint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_value());
    }

    // optional sint64 key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_key());
    }

    // optional int32 name_hash_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_name_hash_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_MetadataItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallStackProfile_MetadataItem*>(
      &from));
}

void CallStackProfile_MetadataItem::MergeFrom(const CallStackProfile_MetadataItem& from) {
  CallStackProfile_MetadataItem* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.MetadataItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.name_hash_index_ = from._impl_.name_hash_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallStackProfile_MetadataItem::CopyFrom(const CallStackProfile_MetadataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.MetadataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_MetadataItem::IsInitialized() const {
  return true;
}

void CallStackProfile_MetadataItem::InternalSwap(CallStackProfile_MetadataItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallStackProfile_MetadataItem, _impl_.name_hash_index_)
      + sizeof(CallStackProfile_MetadataItem::_impl_.name_hash_index_)
      - PROTOBUF_FIELD_OFFSET(CallStackProfile_MetadataItem, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

std::string CallStackProfile_MetadataItem::GetTypeName() const {
  return "metrics.CallStackProfile.MetadataItem";
}


// ===================================================================

class CallStackProfile_AsyncBacktrace::_Internal {
 public:
};

CallStackProfile_AsyncBacktrace::CallStackProfile_AsyncBacktrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CallStackProfile.AsyncBacktrace)
}
CallStackProfile_AsyncBacktrace::CallStackProfile_AsyncBacktrace(const CallStackProfile_AsyncBacktrace& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallStackProfile_AsyncBacktrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){from._impl_.location_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.AsyncBacktrace)
}

inline void CallStackProfile_AsyncBacktrace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallStackProfile_AsyncBacktrace::~CallStackProfile_AsyncBacktrace() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.AsyncBacktrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallStackProfile_AsyncBacktrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_.~RepeatedPtrField();
}

void CallStackProfile_AsyncBacktrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallStackProfile_AsyncBacktrace::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.AsyncBacktrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallStackProfile_AsyncBacktrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .metrics.CallStackProfile.Location location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallStackProfile_AsyncBacktrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CallStackProfile.AsyncBacktrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location location = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_location_size()); i < n; i++) {
    const auto& repfield = this->_internal_location(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CallStackProfile.AsyncBacktrace)
  return target;
}

size_t CallStackProfile_AsyncBacktrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.AsyncBacktrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location location = 1;
  total_size += 1UL * this->_internal_location_size();
  for (const auto& msg : this->_impl_.location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_AsyncBacktrace::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallStackProfile_AsyncBacktrace*>(
      &from));
}

void CallStackProfile_AsyncBacktrace::MergeFrom(const CallStackProfile_AsyncBacktrace& from) {
  CallStackProfile_AsyncBacktrace* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.AsyncBacktrace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.location_.MergeFrom(from._impl_.location_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallStackProfile_AsyncBacktrace::CopyFrom(const CallStackProfile_AsyncBacktrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.AsyncBacktrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_AsyncBacktrace::IsInitialized() const {
  return true;
}

void CallStackProfile_AsyncBacktrace::InternalSwap(CallStackProfile_AsyncBacktrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.location_.InternalSwap(&other->_impl_.location_);
}

std::string CallStackProfile_AsyncBacktrace::GetTypeName() const {
  return "metrics.CallStackProfile.AsyncBacktrace";
}


// ===================================================================

class CallStackProfile_Sample::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_Sample>()._impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallStackProfile_Sample::CallStackProfile_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CallStackProfile.Sample)
}
CallStackProfile_Sample::CallStackProfile_Sample(const CallStackProfile_Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallStackProfile_Sample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_){from._impl_.frame_}
    , decltype(_impl_.process_phase_){from._impl_.process_phase_}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.Sample)
}

inline void CallStackProfile_Sample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_){arena}
    , decltype(_impl_.process_phase_){arena}
    , decltype(_impl_.count_){int64_t{0}}
  };
}

CallStackProfile_Sample::~CallStackProfile_Sample() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.Sample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallStackProfile_Sample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frame_.~RepeatedPtrField();
  _impl_.process_phase_.~RepeatedField();
}

void CallStackProfile_Sample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallStackProfile_Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.Sample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frame_.Clear();
  _impl_.process_phase_.Clear();
  _impl_.count_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallStackProfile_Sample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .metrics.CallStackProfile.Location frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.ProcessPhase process_phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::metrics::ProcessPhase_IsValid(val))) {
              _internal_add_process_phase(static_cast<::metrics::ProcessPhase>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_process_phase(), ptr, ctx, ::metrics::ProcessPhase_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallStackProfile_Sample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CallStackProfile.Sample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location frame = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frame_size()); i < n; i++) {
    const auto& repfield = this->_internal_frame(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  // repeated .metrics.ProcessPhase process_phase = 3;
  for (int i = 0, n = this->_internal_process_phase_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_process_phase(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CallStackProfile.Sample)
  return target;
}

size_t CallStackProfile_Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.Sample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location frame = 1;
  total_size += 1UL * this->_internal_frame_size();
  for (const auto& msg : this->_impl_.frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.ProcessPhase process_phase = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_process_phase_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_process_phase(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional int64 count = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_Sample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallStackProfile_Sample*>(
      &from));
}

void CallStackProfile_Sample::MergeFrom(const CallStackProfile_Sample& from) {
  CallStackProfile_Sample* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.Sample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.frame_.MergeFrom(from._impl_.frame_);
  _this->_impl_.process_phase_.MergeFrom(from._impl_.process_phase_);
  if (from._internal_has_count()) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallStackProfile_Sample::CopyFrom(const CallStackProfile_Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_Sample::IsInitialized() const {
  return true;
}

void CallStackProfile_Sample::InternalSwap(CallStackProfile_Sample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.frame_.InternalSwap(&other->_impl_.frame_);
  _impl_.process_phase_.InternalSwap(&other->_impl_.process_phase_);
  swap(_impl_.count_, other->_impl_.count_);
}

std::string CallStackProfile_Sample::GetTypeName() const {
  return "metrics.CallStackProfile.Sample";
}


// ===================================================================

class CallStackProfile_StackSample::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_StackSample>()._impl_._has_bits_);
  static void set_has_stack_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sample_time_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continued_work(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_async_backtrace_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CallStackProfile_StackSample::CallStackProfile_StackSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CallStackProfile.StackSample)
}
CallStackProfile_StackSample::CallStackProfile_StackSample(const CallStackProfile_StackSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallStackProfile_StackSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.stack_index_){}
    , decltype(_impl_.sample_time_offset_ms_){}
    , decltype(_impl_.continued_work_){}
    , decltype(_impl_.async_backtrace_index_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.stack_index_, &from._impl_.stack_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.stack_index_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.StackSample)
}

inline void CallStackProfile_StackSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){arena}
    , decltype(_impl_.stack_index_){0}
    , decltype(_impl_.sample_time_offset_ms_){0}
    , decltype(_impl_.continued_work_){false}
    , decltype(_impl_.async_backtrace_index_){0}
    , decltype(_impl_.weight_){int64_t{0}}
    , decltype(_impl_.count_){int64_t{1}}
  };
}

CallStackProfile_StackSample::~CallStackProfile_StackSample() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.StackSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallStackProfile_StackSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.~RepeatedPtrField();
}

void CallStackProfile_StackSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallStackProfile_StackSample::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.StackSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.stack_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.weight_) -
        reinterpret_cast<char*>(&_impl_.stack_index_)) + sizeof(_impl_.weight_));
    _impl_.count_ = int64_t{1};
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallStackProfile_StackSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 stack_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stack_index(&has_bits);
          _impl_.stack_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sample_time_offset_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sample_time_offset_ms(&has_bits);
          _impl_.sample_time_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool continued_work = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_continued_work(&has_bits);
          _impl_.continued_work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 async_backtrace_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_async_backtrace_index(&has_bits);
          _impl_.async_backtrace_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_weight(&has_bits);
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 count = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallStackProfile_StackSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CallStackProfile.StackSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 stack_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_stack_index(), target);
  }

  // optional int32 sample_time_offset_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sample_time_offset_ms(), target);
  }

  // optional bool continued_work = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_continued_work(), target);
  }

  // optional int32 async_backtrace_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_async_backtrace_index(), target);
  }

  // repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 weight = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_weight(), target);
  }

  // optional int64 count = 7 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CallStackProfile.StackSample)
  return target;
}

size_t CallStackProfile_StackSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.StackSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_impl_.metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 stack_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stack_index());
    }

    // optional int32 sample_time_offset_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_time_offset_ms());
    }

    // optional bool continued_work = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 async_backtrace_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_async_backtrace_index());
    }

    // optional int64 weight = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_weight());
    }

    // optional int64 count = 7 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_StackSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallStackProfile_StackSample*>(
      &from));
}

void CallStackProfile_StackSample::MergeFrom(const CallStackProfile_StackSample& from) {
  CallStackProfile_StackSample* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.StackSample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stack_index_ = from._impl_.stack_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sample_time_offset_ms_ = from._impl_.sample_time_offset_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.continued_work_ = from._impl_.continued_work_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.async_backtrace_index_ = from._impl_.async_backtrace_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.weight_ = from._impl_.weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallStackProfile_StackSample::CopyFrom(const CallStackProfile_StackSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.StackSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_StackSample::IsInitialized() const {
  return true;
}

void CallStackProfile_StackSample::InternalSwap(CallStackProfile_StackSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallStackProfile_StackSample, _impl_.weight_)
      + sizeof(CallStackProfile_StackSample::_impl_.weight_)
      - PROTOBUF_FIELD_OFFSET(CallStackProfile_StackSample, _impl_.stack_index_)>(
          reinterpret_cast<char*>(&_impl_.stack_index_),
          reinterpret_cast<char*>(&other->_impl_.stack_index_));
  swap(_impl_.count_, other->_impl_.count_);
}

std::string CallStackProfile_StackSample::GetTypeName() const {
  return "metrics.CallStackProfile.StackSample";
}


// ===================================================================

class CallStackProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile>()._impl_._has_bits_);
  static void set_has_profile_time_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_profile_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampling_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallStackProfile::CallStackProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CallStackProfile)
}
CallStackProfile::CallStackProfile(const CallStackProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallStackProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deprecated_sample_){from._impl_.deprecated_sample_}
    , decltype(_impl_.module_id_){from._impl_.module_id_}
    , decltype(_impl_.metadata_name_hash_){from._impl_.metadata_name_hash_}
    , decltype(_impl_.profile_metadata_){from._impl_.profile_metadata_}
    , decltype(_impl_.async_backtrace_){from._impl_.async_backtrace_}
    , decltype(_impl_.stack_){from._impl_.stack_}
    , decltype(_impl_.stack_sample_){from._impl_.stack_sample_}
    , decltype(_impl_.profile_duration_ms_){}
    , decltype(_impl_.sampling_period_ms_){}
    , decltype(_impl_.profile_time_offset_ms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.profile_duration_ms_, &from._impl_.profile_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.profile_time_offset_ms_) -
    reinterpret_cast<char*>(&_impl_.profile_duration_ms_)) + sizeof(_impl_.profile_time_offset_ms_));
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile)
}

inline void CallStackProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deprecated_sample_){arena}
    , decltype(_impl_.module_id_){arena}
    , decltype(_impl_.metadata_name_hash_){arena}
    , decltype(_impl_.profile_metadata_){arena}
    , decltype(_impl_.async_backtrace_){arena}
    , decltype(_impl_.stack_){arena}
    , decltype(_impl_.stack_sample_){arena}
    , decltype(_impl_.profile_duration_ms_){0}
    , decltype(_impl_.sampling_period_ms_){0}
    , decltype(_impl_.profile_time_offset_ms_){int64_t{0}}
  };
}

CallStackProfile::~CallStackProfile() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallStackProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deprecated_sample_.~RepeatedPtrField();
  _impl_.module_id_.~RepeatedPtrField();
  _impl_.metadata_name_hash_.~RepeatedField();
  _impl_.profile_metadata_.~RepeatedPtrField();
  _impl_.async_backtrace_.~RepeatedPtrField();
  _impl_.stack_.~RepeatedPtrField();
  _impl_.stack_sample_.~RepeatedPtrField();
}

void CallStackProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallStackProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deprecated_sample_.Clear();
  _impl_.module_id_.Clear();
  _impl_.metadata_name_hash_.Clear();
  _impl_.profile_metadata_.Clear();
  _impl_.async_backtrace_.Clear();
  _impl_.stack_.Clear();
  _impl_.stack_sample_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.profile_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.profile_time_offset_ms_) -
        reinterpret_cast<char*>(&_impl_.profile_duration_ms_)) + sizeof(_impl_.profile_time_offset_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallStackProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deprecated_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 profile_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_profile_duration_ms(&has_bits);
          _impl_.profile_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sampling_period_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sampling_period_ms(&has_bits);
          _impl_.sampling_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 metadata_name_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_metadata_name_hash(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_metadata_name_hash(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profile_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_async_backtrace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.Stack stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 profile_time_offset_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_profile_time_offset_ms(&has_bits);
          _impl_.profile_time_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallStackProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CallStackProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deprecated_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_deprecated_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_module_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_module_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 profile_duration_ms = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_profile_duration_ms(), target);
  }

  // optional int32 sampling_period_ms = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sampling_period_ms(), target);
  }

  // repeated fixed64 metadata_name_hash = 5;
  for (int i = 0, n = this->_internal_metadata_name_hash_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_metadata_name_hash(i), target);
  }

  // repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_profile_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_profile_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_async_backtrace_size()); i < n; i++) {
    const auto& repfield = this->_internal_async_backtrace(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.CallStackProfile.Stack stack = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stack_size()); i < n; i++) {
    const auto& repfield = this->_internal_stack(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stack_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_stack_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 profile_time_offset_ms = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_profile_time_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CallStackProfile)
  return target;
}

size_t CallStackProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
  total_size += 1UL * this->_internal_deprecated_sample_size();
  for (const auto& msg : this->_impl_.deprecated_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
  total_size += 1UL * this->_internal_module_id_size();
  for (const auto& msg : this->_impl_.module_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 metadata_name_hash = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_metadata_name_hash_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_metadata_name_hash_size());
    total_size += data_size;
  }

  // repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
  total_size += 1UL * this->_internal_profile_metadata_size();
  for (const auto& msg : this->_impl_.profile_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
  total_size += 1UL * this->_internal_async_backtrace_size();
  for (const auto& msg : this->_impl_.async_backtrace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.CallStackProfile.Stack stack = 8;
  total_size += 1UL * this->_internal_stack_size();
  for (const auto& msg : this->_impl_.stack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
  total_size += 1UL * this->_internal_stack_sample_size();
  for (const auto& msg : this->_impl_.stack_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 profile_duration_ms = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_profile_duration_ms());
    }

    // optional int32 sampling_period_ms = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sampling_period_ms());
    }

    // optional int64 profile_time_offset_ms = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_profile_time_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallStackProfile*>(
      &from));
}

void CallStackProfile::MergeFrom(const CallStackProfile& from) {
  CallStackProfile* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.deprecated_sample_.MergeFrom(from._impl_.deprecated_sample_);
  _this->_impl_.module_id_.MergeFrom(from._impl_.module_id_);
  _this->_impl_.metadata_name_hash_.MergeFrom(from._impl_.metadata_name_hash_);
  _this->_impl_.profile_metadata_.MergeFrom(from._impl_.profile_metadata_);
  _this->_impl_.async_backtrace_.MergeFrom(from._impl_.async_backtrace_);
  _this->_impl_.stack_.MergeFrom(from._impl_.stack_);
  _this->_impl_.stack_sample_.MergeFrom(from._impl_.stack_sample_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.profile_duration_ms_ = from._impl_.profile_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sampling_period_ms_ = from._impl_.sampling_period_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.profile_time_offset_ms_ = from._impl_.profile_time_offset_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallStackProfile::CopyFrom(const CallStackProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile::IsInitialized() const {
  return true;
}

void CallStackProfile::InternalSwap(CallStackProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.deprecated_sample_.InternalSwap(&other->_impl_.deprecated_sample_);
  _impl_.module_id_.InternalSwap(&other->_impl_.module_id_);
  _impl_.metadata_name_hash_.InternalSwap(&other->_impl_.metadata_name_hash_);
  _impl_.profile_metadata_.InternalSwap(&other->_impl_.profile_metadata_);
  _impl_.async_backtrace_.InternalSwap(&other->_impl_.async_backtrace_);
  _impl_.stack_.InternalSwap(&other->_impl_.stack_);
  _impl_.stack_sample_.InternalSwap(&other->_impl_.stack_sample_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallStackProfile, _impl_.profile_time_offset_ms_)
      + sizeof(CallStackProfile::_impl_.profile_time_offset_ms_)
      - PROTOBUF_FIELD_OFFSET(CallStackProfile, _impl_.profile_duration_ms_)>(
          reinterpret_cast<char*>(&_impl_.profile_duration_ms_),
          reinterpret_cast<char*>(&other->_impl_.profile_duration_ms_));
}

std::string CallStackProfile::GetTypeName() const {
  return "metrics.CallStackProfile";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_ModuleIdentifier*
Arena::CreateMaybeMessage< ::metrics::CallStackProfile_ModuleIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CallStackProfile_ModuleIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_Location*
Arena::CreateMaybeMessage< ::metrics::CallStackProfile_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CallStackProfile_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_Stack*
Arena::CreateMaybeMessage< ::metrics::CallStackProfile_Stack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CallStackProfile_Stack >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_MetadataItem*
Arena::CreateMaybeMessage< ::metrics::CallStackProfile_MetadataItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CallStackProfile_MetadataItem >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_AsyncBacktrace*
Arena::CreateMaybeMessage< ::metrics::CallStackProfile_AsyncBacktrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CallStackProfile_AsyncBacktrace >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_Sample*
Arena::CreateMaybeMessage< ::metrics::CallStackProfile_Sample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CallStackProfile_Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_StackSample*
Arena::CreateMaybeMessage< ::metrics::CallStackProfile_StackSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CallStackProfile_StackSample >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile*
Arena::CreateMaybeMessage< ::metrics::CallStackProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CallStackProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
