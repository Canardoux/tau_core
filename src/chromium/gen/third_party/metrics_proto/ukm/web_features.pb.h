// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/web_features.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukm_2fweb_5ffeatures_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukm_2fweb_5ffeatures_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukm_2fweb_5ffeatures_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukm_2fweb_5ffeatures_2eproto {
  static const uint32_t offsets[];
};
namespace ukm {
class HighLevelWebFeatures;
struct HighLevelWebFeaturesDefaultTypeInternal;
extern HighLevelWebFeaturesDefaultTypeInternal _HighLevelWebFeatures_default_instance_;
}  // namespace ukm
PROTOBUF_NAMESPACE_OPEN
template<> ::ukm::HighLevelWebFeatures* Arena::CreateMaybeMessage<::ukm::HighLevelWebFeatures>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukm {

// ===================================================================

class HighLevelWebFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ukm.HighLevelWebFeatures) */ {
 public:
  inline HighLevelWebFeatures() : HighLevelWebFeatures(nullptr) {}
  ~HighLevelWebFeatures() override;
  explicit PROTOBUF_CONSTEXPR HighLevelWebFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HighLevelWebFeatures(const HighLevelWebFeatures& from);
  HighLevelWebFeatures(HighLevelWebFeatures&& from) noexcept
    : HighLevelWebFeatures() {
    *this = ::std::move(from);
  }

  inline HighLevelWebFeatures& operator=(const HighLevelWebFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline HighLevelWebFeatures& operator=(HighLevelWebFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HighLevelWebFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const HighLevelWebFeatures* internal_default_instance() {
    return reinterpret_cast<const HighLevelWebFeatures*>(
               &_HighLevelWebFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HighLevelWebFeatures& a, HighLevelWebFeatures& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HighLevelWebFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HighLevelWebFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HighLevelWebFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HighLevelWebFeatures>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HighLevelWebFeatures& from);
  void MergeFrom(const HighLevelWebFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HighLevelWebFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukm.HighLevelWebFeatures";
  }
  protected:
  explicit HighLevelWebFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitVectorFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kEncodingVersionFieldNumber = 3,
    kMaxIndexFieldNumber = 4,
  };
  // optional bytes bit_vector = 1;
  bool has_bit_vector() const;
  private:
  bool _internal_has_bit_vector() const;
  public:
  void clear_bit_vector();
  const std::string& bit_vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bit_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bit_vector();
  PROTOBUF_NODISCARD std::string* release_bit_vector();
  void set_allocated_bit_vector(std::string* bit_vector);
  private:
  const std::string& _internal_bit_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bit_vector(const std::string& value);
  std::string* _internal_mutable_bit_vector();
  public:

  // optional int64 source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  int64_t source_id() const;
  void set_source_id(int64_t value);
  private:
  int64_t _internal_source_id() const;
  void _internal_set_source_id(int64_t value);
  public:

  // optional uint32 encoding_version = 3 [default = 0];
  bool has_encoding_version() const;
  private:
  bool _internal_has_encoding_version() const;
  public:
  void clear_encoding_version();
  uint32_t encoding_version() const;
  void set_encoding_version(uint32_t value);
  private:
  uint32_t _internal_encoding_version() const;
  void _internal_set_encoding_version(uint32_t value);
  public:

  // optional int32 max_index = 4;
  bool has_max_index() const;
  private:
  bool _internal_has_max_index() const;
  public:
  void clear_max_index();
  int32_t max_index() const;
  void set_max_index(int32_t value);
  private:
  int32_t _internal_max_index() const;
  void _internal_set_max_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ukm.HighLevelWebFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bit_vector_;
    int64_t source_id_;
    uint32_t encoding_version_;
    int32_t max_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ukm_2fweb_5ffeatures_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HighLevelWebFeatures

// optional bytes bit_vector = 1;
inline bool HighLevelWebFeatures::_internal_has_bit_vector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HighLevelWebFeatures::has_bit_vector() const {
  return _internal_has_bit_vector();
}
inline void HighLevelWebFeatures::clear_bit_vector() {
  _impl_.bit_vector_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HighLevelWebFeatures::bit_vector() const {
  // @@protoc_insertion_point(field_get:ukm.HighLevelWebFeatures.bit_vector)
  return _internal_bit_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HighLevelWebFeatures::set_bit_vector(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.bit_vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ukm.HighLevelWebFeatures.bit_vector)
}
inline std::string* HighLevelWebFeatures::mutable_bit_vector() {
  std::string* _s = _internal_mutable_bit_vector();
  // @@protoc_insertion_point(field_mutable:ukm.HighLevelWebFeatures.bit_vector)
  return _s;
}
inline const std::string& HighLevelWebFeatures::_internal_bit_vector() const {
  return _impl_.bit_vector_.Get();
}
inline void HighLevelWebFeatures::_internal_set_bit_vector(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bit_vector_.Set(value, GetArenaForAllocation());
}
inline std::string* HighLevelWebFeatures::_internal_mutable_bit_vector() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.bit_vector_.Mutable(GetArenaForAllocation());
}
inline std::string* HighLevelWebFeatures::release_bit_vector() {
  // @@protoc_insertion_point(field_release:ukm.HighLevelWebFeatures.bit_vector)
  if (!_internal_has_bit_vector()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.bit_vector_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bit_vector_.IsDefault()) {
    _impl_.bit_vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HighLevelWebFeatures::set_allocated_bit_vector(std::string* bit_vector) {
  if (bit_vector != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bit_vector_.SetAllocated(bit_vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bit_vector_.IsDefault()) {
    _impl_.bit_vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ukm.HighLevelWebFeatures.bit_vector)
}

// optional int32 max_index = 4;
inline bool HighLevelWebFeatures::_internal_has_max_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HighLevelWebFeatures::has_max_index() const {
  return _internal_has_max_index();
}
inline void HighLevelWebFeatures::clear_max_index() {
  _impl_.max_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t HighLevelWebFeatures::_internal_max_index() const {
  return _impl_.max_index_;
}
inline int32_t HighLevelWebFeatures::max_index() const {
  // @@protoc_insertion_point(field_get:ukm.HighLevelWebFeatures.max_index)
  return _internal_max_index();
}
inline void HighLevelWebFeatures::_internal_set_max_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_index_ = value;
}
inline void HighLevelWebFeatures::set_max_index(int32_t value) {
  _internal_set_max_index(value);
  // @@protoc_insertion_point(field_set:ukm.HighLevelWebFeatures.max_index)
}

// optional int64 source_id = 2;
inline bool HighLevelWebFeatures::_internal_has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HighLevelWebFeatures::has_source_id() const {
  return _internal_has_source_id();
}
inline void HighLevelWebFeatures::clear_source_id() {
  _impl_.source_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t HighLevelWebFeatures::_internal_source_id() const {
  return _impl_.source_id_;
}
inline int64_t HighLevelWebFeatures::source_id() const {
  // @@protoc_insertion_point(field_get:ukm.HighLevelWebFeatures.source_id)
  return _internal_source_id();
}
inline void HighLevelWebFeatures::_internal_set_source_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_id_ = value;
}
inline void HighLevelWebFeatures::set_source_id(int64_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:ukm.HighLevelWebFeatures.source_id)
}

// optional uint32 encoding_version = 3 [default = 0];
inline bool HighLevelWebFeatures::_internal_has_encoding_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HighLevelWebFeatures::has_encoding_version() const {
  return _internal_has_encoding_version();
}
inline void HighLevelWebFeatures::clear_encoding_version() {
  _impl_.encoding_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t HighLevelWebFeatures::_internal_encoding_version() const {
  return _impl_.encoding_version_;
}
inline uint32_t HighLevelWebFeatures::encoding_version() const {
  // @@protoc_insertion_point(field_get:ukm.HighLevelWebFeatures.encoding_version)
  return _internal_encoding_version();
}
inline void HighLevelWebFeatures::_internal_set_encoding_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.encoding_version_ = value;
}
inline void HighLevelWebFeatures::set_encoding_version(uint32_t value) {
  _internal_set_encoding_version(value);
  // @@protoc_insertion_point(field_set:ukm.HighLevelWebFeatures.encoding_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukm_2fweb_5ffeatures_2eproto
