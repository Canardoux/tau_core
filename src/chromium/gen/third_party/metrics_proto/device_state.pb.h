// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_5fstate_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum ThermalState : int {
  THERMAL_STATE_UNKNOWN = 0,
  THERMAL_STATE_NOMINAL = 1,
  THERMAL_STATE_FAIR = 2,
  THERMAL_STATE_SERIOUS = 3,
  THERMAL_STATE_CRITICAL = 4
};
bool ThermalState_IsValid(int value);
constexpr ThermalState ThermalState_MIN = THERMAL_STATE_UNKNOWN;
constexpr ThermalState ThermalState_MAX = THERMAL_STATE_CRITICAL;
constexpr int ThermalState_ARRAYSIZE = ThermalState_MAX + 1;

const std::string& ThermalState_Name(ThermalState value);
template<typename T>
inline const std::string& ThermalState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ThermalState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ThermalState_Name.");
  return ThermalState_Name(static_cast<ThermalState>(enum_t_value));
}
bool ThermalState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ThermalState* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::ThermalState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_5fstate_2eproto
