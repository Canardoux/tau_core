// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_state.proto

#include "device_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
}  // namespace metrics
namespace metrics {
bool ThermalState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ThermalState_strings[5] = {};

static const char ThermalState_names[] =
  "THERMAL_STATE_CRITICAL"
  "THERMAL_STATE_FAIR"
  "THERMAL_STATE_NOMINAL"
  "THERMAL_STATE_SERIOUS"
  "THERMAL_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ThermalState_entries[] = {
  { {ThermalState_names + 0, 22}, 4 },
  { {ThermalState_names + 22, 18}, 2 },
  { {ThermalState_names + 40, 21}, 1 },
  { {ThermalState_names + 61, 21}, 3 },
  { {ThermalState_names + 82, 21}, 0 },
};

static const int ThermalState_entries_by_number[] = {
  4, // 0 -> THERMAL_STATE_UNKNOWN
  2, // 1 -> THERMAL_STATE_NOMINAL
  1, // 2 -> THERMAL_STATE_FAIR
  3, // 3 -> THERMAL_STATE_SERIOUS
  0, // 4 -> THERMAL_STATE_CRITICAL
};

const std::string& ThermalState_Name(
    ThermalState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ThermalState_entries,
          ThermalState_entries_by_number,
          5, ThermalState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ThermalState_entries,
      ThermalState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ThermalState_strings[idx].get();
}
bool ThermalState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ThermalState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ThermalState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ThermalState>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
