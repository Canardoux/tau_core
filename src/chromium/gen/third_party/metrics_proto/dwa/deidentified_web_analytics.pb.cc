// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dwa/deidentified_web_analytics.proto

#include "dwa/deidentified_web_analytics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dwa {
PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsReport::DeidentifiedWebAnalyticsReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.page_load_events_)*/{}
  , /*decltype(_impl_.encrypted_page_load_events_)*/{}
  , /*decltype(_impl_.coarse_system_info_)*/nullptr
  , /*decltype(_impl_.dwa_ephemeral_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct DeidentifiedWebAnalyticsReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeidentifiedWebAnalyticsReportDefaultTypeInternal() {}
  union {
    DeidentifiedWebAnalyticsReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeidentifiedWebAnalyticsReportDefaultTypeInternal _DeidentifiedWebAnalyticsReport_default_instance_;
PROTOBUF_CONSTEXPR CoarseSystemInfo::CoarseSystemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.geo_designation_)*/0
  , /*decltype(_impl_.client_age_)*/0
  , /*decltype(_impl_.milestone_prefix_trimmed_)*/0
  , /*decltype(_impl_.is_ukm_enabled_)*/false} {}
struct CoarseSystemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoarseSystemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoarseSystemInfoDefaultTypeInternal() {}
  union {
    CoarseSystemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoarseSystemInfoDefaultTypeInternal _CoarseSystemInfo_default_instance_;
PROTOBUF_CONSTEXPR PageLoadEvents::PageLoadEvents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PageLoadEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageLoadEventsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageLoadEventsDefaultTypeInternal() {}
  union {
    PageLoadEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageLoadEventsDefaultTypeInternal _PageLoadEvents_default_instance_;
PROTOBUF_CONSTEXPR EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encrypted_event_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_trials_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.event_hash_)*/uint64_t{0u}} {}
struct EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEventDefaultTypeInternal() {}
  union {
    EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEventDefaultTypeInternal _EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent_default_instance_;
PROTOBUF_CONSTEXPR EncryptedPageLoadEvents_EncryptedPageLoadEvent::EncryptedPageLoadEvents_EncryptedPageLoadEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_deidentified_web_analytics_events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncryptedPageLoadEvents_EncryptedPageLoadEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedPageLoadEvents_EncryptedPageLoadEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedPageLoadEvents_EncryptedPageLoadEventDefaultTypeInternal() {}
  union {
    EncryptedPageLoadEvents_EncryptedPageLoadEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedPageLoadEvents_EncryptedPageLoadEventDefaultTypeInternal _EncryptedPageLoadEvents_EncryptedPageLoadEvent_default_instance_;
PROTOBUF_CONSTEXPR EncryptedPageLoadEvents::EncryptedPageLoadEvents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_page_load_events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncryptedPageLoadEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedPageLoadEventsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedPageLoadEventsDefaultTypeInternal() {}
  union {
    EncryptedPageLoadEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedPageLoadEventsDefaultTypeInternal _EncryptedPageLoadEvents_default_instance_;
PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.value_)*/int64_t{0}} {}
struct DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_MetricDefaultTypeInternal() {}
  union {
    DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_MetricDefaultTypeInternal _DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric_default_instance_;
PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metric_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetricsDefaultTypeInternal() {}
  union {
    DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetricsDefaultTypeInternal _DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_default_instance_;
PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsEvent_ContentMetric::DeidentifiedWebAnalyticsEvent_ContentMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_.content_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.content_type_)*/0} {}
struct DeidentifiedWebAnalyticsEvent_ContentMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsEvent_ContentMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeidentifiedWebAnalyticsEvent_ContentMetricDefaultTypeInternal() {}
  union {
    DeidentifiedWebAnalyticsEvent_ContentMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeidentifiedWebAnalyticsEvent_ContentMetricDefaultTypeInternal _DeidentifiedWebAnalyticsEvent_ContentMetric_default_instance_;
PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsEvent::DeidentifiedWebAnalyticsEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_metrics_)*/{}
  , /*decltype(_impl_.field_trials_)*/{}
  , /*decltype(_impl_.event_hash_)*/uint64_t{0u}} {}
struct DeidentifiedWebAnalyticsEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeidentifiedWebAnalyticsEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeidentifiedWebAnalyticsEventDefaultTypeInternal() {}
  union {
    DeidentifiedWebAnalyticsEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeidentifiedWebAnalyticsEventDefaultTypeInternal _DeidentifiedWebAnalyticsEvent_default_instance_;
}  // namespace dwa
namespace dwa {
bool CoarseSystemInfo_Channel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CoarseSystemInfo_Channel_strings[3] = {};

static const char CoarseSystemInfo_Channel_names[] =
  "CHANNEL_INVALID"
  "CHANNEL_NOT_STABLE"
  "CHANNEL_STABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CoarseSystemInfo_Channel_entries[] = {
  { {CoarseSystemInfo_Channel_names + 0, 15}, 0 },
  { {CoarseSystemInfo_Channel_names + 15, 18}, 2 },
  { {CoarseSystemInfo_Channel_names + 33, 14}, 1 },
};

static const int CoarseSystemInfo_Channel_entries_by_number[] = {
  0, // 0 -> CHANNEL_INVALID
  2, // 1 -> CHANNEL_STABLE
  1, // 2 -> CHANNEL_NOT_STABLE
};

const std::string& CoarseSystemInfo_Channel_Name(
    CoarseSystemInfo_Channel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CoarseSystemInfo_Channel_entries,
          CoarseSystemInfo_Channel_entries_by_number,
          3, CoarseSystemInfo_Channel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CoarseSystemInfo_Channel_entries,
      CoarseSystemInfo_Channel_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CoarseSystemInfo_Channel_strings[idx].get();
}
bool CoarseSystemInfo_Channel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CoarseSystemInfo_Channel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CoarseSystemInfo_Channel_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CoarseSystemInfo_Channel>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CoarseSystemInfo_Channel CoarseSystemInfo::CHANNEL_INVALID;
constexpr CoarseSystemInfo_Channel CoarseSystemInfo::CHANNEL_STABLE;
constexpr CoarseSystemInfo_Channel CoarseSystemInfo::CHANNEL_NOT_STABLE;
constexpr CoarseSystemInfo_Channel CoarseSystemInfo::Channel_MIN;
constexpr CoarseSystemInfo_Channel CoarseSystemInfo::Channel_MAX;
constexpr int CoarseSystemInfo::Channel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CoarseSystemInfo_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CoarseSystemInfo_Platform_strings[13] = {};

static const char CoarseSystemInfo_Platform_names[] =
  "PLATFORM_ANDROID"
  "PLATFORM_ANDROID_BROWSER_APP"
  "PLATFORM_ANDROID_CCT"
  "PLATFORM_ANDROID_PWA"
  "PLATFORM_ANDROID_TWA"
  "PLATFORM_ANDROID_WEBVIEW"
  "PLATFORM_CHROMEOS"
  "PLATFORM_INVALID"
  "PLATFORM_IOS"
  "PLATFORM_LINUX"
  "PLATFORM_MACOS"
  "PLATFORM_OTHER"
  "PLATFORM_WINDOWS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CoarseSystemInfo_Platform_entries[] = {
  { {CoarseSystemInfo_Platform_names + 0, 16}, 12 },
  { {CoarseSystemInfo_Platform_names + 16, 28}, 3 },
  { {CoarseSystemInfo_Platform_names + 44, 20}, 4 },
  { {CoarseSystemInfo_Platform_names + 64, 20}, 5 },
  { {CoarseSystemInfo_Platform_names + 84, 20}, 6 },
  { {CoarseSystemInfo_Platform_names + 104, 24}, 2 },
  { {CoarseSystemInfo_Platform_names + 128, 17}, 11 },
  { {CoarseSystemInfo_Platform_names + 145, 16}, 0 },
  { {CoarseSystemInfo_Platform_names + 161, 12}, 7 },
  { {CoarseSystemInfo_Platform_names + 173, 14}, 10 },
  { {CoarseSystemInfo_Platform_names + 187, 14}, 9 },
  { {CoarseSystemInfo_Platform_names + 201, 14}, 1 },
  { {CoarseSystemInfo_Platform_names + 215, 16}, 8 },
};

static const int CoarseSystemInfo_Platform_entries_by_number[] = {
  7, // 0 -> PLATFORM_INVALID
  11, // 1 -> PLATFORM_OTHER
  5, // 2 -> PLATFORM_ANDROID_WEBVIEW
  1, // 3 -> PLATFORM_ANDROID_BROWSER_APP
  2, // 4 -> PLATFORM_ANDROID_CCT
  3, // 5 -> PLATFORM_ANDROID_PWA
  4, // 6 -> PLATFORM_ANDROID_TWA
  8, // 7 -> PLATFORM_IOS
  12, // 8 -> PLATFORM_WINDOWS
  10, // 9 -> PLATFORM_MACOS
  9, // 10 -> PLATFORM_LINUX
  6, // 11 -> PLATFORM_CHROMEOS
  0, // 12 -> PLATFORM_ANDROID
};

const std::string& CoarseSystemInfo_Platform_Name(
    CoarseSystemInfo_Platform value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CoarseSystemInfo_Platform_entries,
          CoarseSystemInfo_Platform_entries_by_number,
          13, CoarseSystemInfo_Platform_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CoarseSystemInfo_Platform_entries,
      CoarseSystemInfo_Platform_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CoarseSystemInfo_Platform_strings[idx].get();
}
bool CoarseSystemInfo_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CoarseSystemInfo_Platform* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CoarseSystemInfo_Platform_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<CoarseSystemInfo_Platform>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_INVALID;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_OTHER;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_ANDROID_WEBVIEW;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_ANDROID_BROWSER_APP;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_ANDROID_CCT;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_ANDROID_PWA;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_ANDROID_TWA;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_IOS;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_WINDOWS;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_MACOS;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_LINUX;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_CHROMEOS;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::PLATFORM_ANDROID;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::Platform_MIN;
constexpr CoarseSystemInfo_Platform CoarseSystemInfo::Platform_MAX;
constexpr int CoarseSystemInfo::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CoarseSystemInfo_GeoDesignation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CoarseSystemInfo_GeoDesignation_strings[3] = {};

static const char CoarseSystemInfo_GeoDesignation_names[] =
  "GEO_DESIGNATION_EEA"
  "GEO_DESIGNATION_INVALID"
  "GEO_DESIGNATION_ROW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CoarseSystemInfo_GeoDesignation_entries[] = {
  { {CoarseSystemInfo_GeoDesignation_names + 0, 19}, 1 },
  { {CoarseSystemInfo_GeoDesignation_names + 19, 23}, 0 },
  { {CoarseSystemInfo_GeoDesignation_names + 42, 19}, 2 },
};

static const int CoarseSystemInfo_GeoDesignation_entries_by_number[] = {
  1, // 0 -> GEO_DESIGNATION_INVALID
  0, // 1 -> GEO_DESIGNATION_EEA
  2, // 2 -> GEO_DESIGNATION_ROW
};

const std::string& CoarseSystemInfo_GeoDesignation_Name(
    CoarseSystemInfo_GeoDesignation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CoarseSystemInfo_GeoDesignation_entries,
          CoarseSystemInfo_GeoDesignation_entries_by_number,
          3, CoarseSystemInfo_GeoDesignation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CoarseSystemInfo_GeoDesignation_entries,
      CoarseSystemInfo_GeoDesignation_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CoarseSystemInfo_GeoDesignation_strings[idx].get();
}
bool CoarseSystemInfo_GeoDesignation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CoarseSystemInfo_GeoDesignation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CoarseSystemInfo_GeoDesignation_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CoarseSystemInfo_GeoDesignation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CoarseSystemInfo_GeoDesignation CoarseSystemInfo::GEO_DESIGNATION_INVALID;
constexpr CoarseSystemInfo_GeoDesignation CoarseSystemInfo::GEO_DESIGNATION_EEA;
constexpr CoarseSystemInfo_GeoDesignation CoarseSystemInfo::GEO_DESIGNATION_ROW;
constexpr CoarseSystemInfo_GeoDesignation CoarseSystemInfo::GeoDesignation_MIN;
constexpr CoarseSystemInfo_GeoDesignation CoarseSystemInfo::GeoDesignation_MAX;
constexpr int CoarseSystemInfo::GeoDesignation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CoarseSystemInfo_ClientAge_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CoarseSystemInfo_ClientAge_strings[3] = {};

static const char CoarseSystemInfo_ClientAge_names[] =
  "CLIENT_AGE_INVALID"
  "CLIENT_AGE_NOT_RECENT"
  "CLIENT_AGE_RECENT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CoarseSystemInfo_ClientAge_entries[] = {
  { {CoarseSystemInfo_ClientAge_names + 0, 18}, 0 },
  { {CoarseSystemInfo_ClientAge_names + 18, 21}, 2 },
  { {CoarseSystemInfo_ClientAge_names + 39, 17}, 1 },
};

static const int CoarseSystemInfo_ClientAge_entries_by_number[] = {
  0, // 0 -> CLIENT_AGE_INVALID
  2, // 1 -> CLIENT_AGE_RECENT
  1, // 2 -> CLIENT_AGE_NOT_RECENT
};

const std::string& CoarseSystemInfo_ClientAge_Name(
    CoarseSystemInfo_ClientAge value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CoarseSystemInfo_ClientAge_entries,
          CoarseSystemInfo_ClientAge_entries_by_number,
          3, CoarseSystemInfo_ClientAge_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CoarseSystemInfo_ClientAge_entries,
      CoarseSystemInfo_ClientAge_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CoarseSystemInfo_ClientAge_strings[idx].get();
}
bool CoarseSystemInfo_ClientAge_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CoarseSystemInfo_ClientAge* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CoarseSystemInfo_ClientAge_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CoarseSystemInfo_ClientAge>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CoarseSystemInfo_ClientAge CoarseSystemInfo::CLIENT_AGE_INVALID;
constexpr CoarseSystemInfo_ClientAge CoarseSystemInfo::CLIENT_AGE_RECENT;
constexpr CoarseSystemInfo_ClientAge CoarseSystemInfo::CLIENT_AGE_NOT_RECENT;
constexpr CoarseSystemInfo_ClientAge CoarseSystemInfo::ClientAge_MIN;
constexpr CoarseSystemInfo_ClientAge CoarseSystemInfo::ClientAge_MAX;
constexpr int CoarseSystemInfo::ClientAge_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_strings[2] = {};

static const char DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_names[] =
  "CONTENT_TYPE_INVALID"
  "CONTENT_TYPE_URL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_entries[] = {
  { {DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_names + 0, 20}, 0 },
  { {DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_names + 20, 16}, 1 },
};

static const int DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_entries_by_number[] = {
  0, // 0 -> CONTENT_TYPE_INVALID
  1, // 1 -> CONTENT_TYPE_URL
};

const std::string& DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_Name(
    DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_entries,
          DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_entries_by_number,
          2, DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_entries,
      DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_strings[idx].get();
}
bool DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType DeidentifiedWebAnalyticsEvent_ContentMetric::CONTENT_TYPE_INVALID;
constexpr DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType DeidentifiedWebAnalyticsEvent_ContentMetric::CONTENT_TYPE_URL;
constexpr DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType DeidentifiedWebAnalyticsEvent_ContentMetric::ContentType_MIN;
constexpr DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType DeidentifiedWebAnalyticsEvent_ContentMetric::ContentType_MAX;
constexpr int DeidentifiedWebAnalyticsEvent_ContentMetric::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DeidentifiedWebAnalyticsReport::_Internal {
 public:
  using HasBits = decltype(std::declval<DeidentifiedWebAnalyticsReport>()._impl_._has_bits_);
  static const ::dwa::CoarseSystemInfo& coarse_system_info(const DeidentifiedWebAnalyticsReport* msg);
  static void set_has_coarse_system_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dwa_ephemeral_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::dwa::CoarseSystemInfo&
DeidentifiedWebAnalyticsReport::_Internal::coarse_system_info(const DeidentifiedWebAnalyticsReport* msg) {
  return *msg->_impl_.coarse_system_info_;
}
DeidentifiedWebAnalyticsReport::DeidentifiedWebAnalyticsReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.DeidentifiedWebAnalyticsReport)
}
DeidentifiedWebAnalyticsReport::DeidentifiedWebAnalyticsReport(const DeidentifiedWebAnalyticsReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeidentifiedWebAnalyticsReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.page_load_events_){from._impl_.page_load_events_}
    , decltype(_impl_.encrypted_page_load_events_){from._impl_.encrypted_page_load_events_}
    , decltype(_impl_.coarse_system_info_){nullptr}
    , decltype(_impl_.dwa_ephemeral_id_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_coarse_system_info()) {
    _this->_impl_.coarse_system_info_ = new ::dwa::CoarseSystemInfo(*from._impl_.coarse_system_info_);
  }
  ::memcpy(&_impl_.dwa_ephemeral_id_, &from._impl_.dwa_ephemeral_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.dwa_ephemeral_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:dwa.DeidentifiedWebAnalyticsReport)
}

inline void DeidentifiedWebAnalyticsReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.page_load_events_){arena}
    , decltype(_impl_.encrypted_page_load_events_){arena}
    , decltype(_impl_.coarse_system_info_){nullptr}
    , decltype(_impl_.dwa_ephemeral_id_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

DeidentifiedWebAnalyticsReport::~DeidentifiedWebAnalyticsReport() {
  // @@protoc_insertion_point(destructor:dwa.DeidentifiedWebAnalyticsReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeidentifiedWebAnalyticsReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.page_load_events_.~RepeatedPtrField();
  _impl_.encrypted_page_load_events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.coarse_system_info_;
}

void DeidentifiedWebAnalyticsReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeidentifiedWebAnalyticsReport::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.DeidentifiedWebAnalyticsReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.page_load_events_.Clear();
  _impl_.encrypted_page_load_events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.coarse_system_info_ != nullptr);
    _impl_.coarse_system_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.dwa_ephemeral_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.dwa_ephemeral_id_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeidentifiedWebAnalyticsReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .dwa.CoarseSystemInfo coarse_system_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coarse_system_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 dwa_ephemeral_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_dwa_ephemeral_id(&has_bits);
          _impl_.dwa_ephemeral_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .dwa.PageLoadEvents page_load_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_load_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dwa.EncryptedPageLoadEvents encrypted_page_load_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_page_load_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeidentifiedWebAnalyticsReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.DeidentifiedWebAnalyticsReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .dwa.CoarseSystemInfo coarse_system_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::coarse_system_info(this),
        _Internal::coarse_system_info(this).GetCachedSize(), target, stream);
  }

  // optional fixed64 dwa_ephemeral_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_dwa_ephemeral_id(), target);
  }

  // repeated .dwa.PageLoadEvents page_load_events = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_page_load_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_page_load_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dwa.EncryptedPageLoadEvents encrypted_page_load_events = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_encrypted_page_load_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_encrypted_page_load_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 timestamp = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.DeidentifiedWebAnalyticsReport)
  return target;
}

size_t DeidentifiedWebAnalyticsReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.DeidentifiedWebAnalyticsReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dwa.PageLoadEvents page_load_events = 3;
  total_size += 1UL * this->_internal_page_load_events_size();
  for (const auto& msg : this->_impl_.page_load_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dwa.EncryptedPageLoadEvents encrypted_page_load_events = 4;
  total_size += 1UL * this->_internal_encrypted_page_load_events_size();
  for (const auto& msg : this->_impl_.encrypted_page_load_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .dwa.CoarseSystemInfo coarse_system_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.coarse_system_info_);
    }

    // optional fixed64 dwa_ephemeral_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int64 timestamp = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifiedWebAnalyticsReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeidentifiedWebAnalyticsReport*>(
      &from));
}

void DeidentifiedWebAnalyticsReport::MergeFrom(const DeidentifiedWebAnalyticsReport& from) {
  DeidentifiedWebAnalyticsReport* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.DeidentifiedWebAnalyticsReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.page_load_events_.MergeFrom(from._impl_.page_load_events_);
  _this->_impl_.encrypted_page_load_events_.MergeFrom(from._impl_.encrypted_page_load_events_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_coarse_system_info()->::dwa::CoarseSystemInfo::MergeFrom(
          from._internal_coarse_system_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dwa_ephemeral_id_ = from._impl_.dwa_ephemeral_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeidentifiedWebAnalyticsReport::CopyFrom(const DeidentifiedWebAnalyticsReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.DeidentifiedWebAnalyticsReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifiedWebAnalyticsReport::IsInitialized() const {
  return true;
}

void DeidentifiedWebAnalyticsReport::InternalSwap(DeidentifiedWebAnalyticsReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.page_load_events_.InternalSwap(&other->_impl_.page_load_events_);
  _impl_.encrypted_page_load_events_.InternalSwap(&other->_impl_.encrypted_page_load_events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeidentifiedWebAnalyticsReport, _impl_.timestamp_)
      + sizeof(DeidentifiedWebAnalyticsReport::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(DeidentifiedWebAnalyticsReport, _impl_.coarse_system_info_)>(
          reinterpret_cast<char*>(&_impl_.coarse_system_info_),
          reinterpret_cast<char*>(&other->_impl_.coarse_system_info_));
}

std::string DeidentifiedWebAnalyticsReport::GetTypeName() const {
  return "dwa.DeidentifiedWebAnalyticsReport";
}


// ===================================================================

class CoarseSystemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CoarseSystemInfo>()._impl_._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_geo_designation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_age(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_milestone_prefix_trimmed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_ukm_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CoarseSystemInfo::CoarseSystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.CoarseSystemInfo)
}
CoarseSystemInfo::CoarseSystemInfo(const CoarseSystemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CoarseSystemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.geo_designation_){}
    , decltype(_impl_.client_age_){}
    , decltype(_impl_.milestone_prefix_trimmed_){}
    , decltype(_impl_.is_ukm_enabled_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.channel_, &from._impl_.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_ukm_enabled_) -
    reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.is_ukm_enabled_));
  // @@protoc_insertion_point(copy_constructor:dwa.CoarseSystemInfo)
}

inline void CoarseSystemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.geo_designation_){0}
    , decltype(_impl_.client_age_){0}
    , decltype(_impl_.milestone_prefix_trimmed_){0}
    , decltype(_impl_.is_ukm_enabled_){false}
  };
}

CoarseSystemInfo::~CoarseSystemInfo() {
  // @@protoc_insertion_point(destructor:dwa.CoarseSystemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoarseSystemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CoarseSystemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoarseSystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.CoarseSystemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_ukm_enabled_) -
        reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.is_ukm_enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CoarseSystemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .dwa.CoarseSystemInfo.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::dwa::CoarseSystemInfo_Channel_IsValid(val))) {
            _internal_set_channel(static_cast<::dwa::CoarseSystemInfo_Channel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .dwa.CoarseSystemInfo.Platform platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::dwa::CoarseSystemInfo_Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::dwa::CoarseSystemInfo_Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .dwa.CoarseSystemInfo.GeoDesignation geo_designation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::dwa::CoarseSystemInfo_GeoDesignation_IsValid(val))) {
            _internal_set_geo_designation(static_cast<::dwa::CoarseSystemInfo_GeoDesignation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .dwa.CoarseSystemInfo.ClientAge client_age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::dwa::CoarseSystemInfo_ClientAge_IsValid(val))) {
            _internal_set_client_age(static_cast<::dwa::CoarseSystemInfo_ClientAge>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 milestone_prefix_trimmed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_milestone_prefix_trimmed(&has_bits);
          _impl_.milestone_prefix_trimmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_ukm_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_ukm_enabled(&has_bits);
          _impl_.is_ukm_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoarseSystemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.CoarseSystemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .dwa.CoarseSystemInfo.Channel channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_channel(), target);
  }

  // optional .dwa.CoarseSystemInfo.Platform platform = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_platform(), target);
  }

  // optional .dwa.CoarseSystemInfo.GeoDesignation geo_designation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_geo_designation(), target);
  }

  // optional .dwa.CoarseSystemInfo.ClientAge client_age = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_age(), target);
  }

  // optional int32 milestone_prefix_trimmed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_milestone_prefix_trimmed(), target);
  }

  // optional bool is_ukm_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_ukm_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.CoarseSystemInfo)
  return target;
}

size_t CoarseSystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.CoarseSystemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .dwa.CoarseSystemInfo.Channel channel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
    }

    // optional .dwa.CoarseSystemInfo.Platform platform = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional .dwa.CoarseSystemInfo.GeoDesignation geo_designation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_geo_designation());
    }

    // optional .dwa.CoarseSystemInfo.ClientAge client_age = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_client_age());
    }

    // optional int32 milestone_prefix_trimmed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_milestone_prefix_trimmed());
    }

    // optional bool is_ukm_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoarseSystemInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CoarseSystemInfo*>(
      &from));
}

void CoarseSystemInfo::MergeFrom(const CoarseSystemInfo& from) {
  CoarseSystemInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.CoarseSystemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.platform_ = from._impl_.platform_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.geo_designation_ = from._impl_.geo_designation_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_age_ = from._impl_.client_age_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.milestone_prefix_trimmed_ = from._impl_.milestone_prefix_trimmed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_ukm_enabled_ = from._impl_.is_ukm_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CoarseSystemInfo::CopyFrom(const CoarseSystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.CoarseSystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoarseSystemInfo::IsInitialized() const {
  return true;
}

void CoarseSystemInfo::InternalSwap(CoarseSystemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoarseSystemInfo, _impl_.is_ukm_enabled_)
      + sizeof(CoarseSystemInfo::_impl_.is_ukm_enabled_)
      - PROTOBUF_FIELD_OFFSET(CoarseSystemInfo, _impl_.channel_)>(
          reinterpret_cast<char*>(&_impl_.channel_),
          reinterpret_cast<char*>(&other->_impl_.channel_));
}

std::string CoarseSystemInfo::GetTypeName() const {
  return "dwa.CoarseSystemInfo";
}


// ===================================================================

class PageLoadEvents::_Internal {
 public:
};

PageLoadEvents::PageLoadEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.PageLoadEvents)
}
PageLoadEvents::PageLoadEvents(const PageLoadEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PageLoadEvents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dwa.PageLoadEvents)
}

inline void PageLoadEvents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PageLoadEvents::~PageLoadEvents() {
  // @@protoc_insertion_point(destructor:dwa.PageLoadEvents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageLoadEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void PageLoadEvents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PageLoadEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.PageLoadEvents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PageLoadEvents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dwa.DeidentifiedWebAnalyticsEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageLoadEvents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.PageLoadEvents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dwa.DeidentifiedWebAnalyticsEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.PageLoadEvents)
  return target;
}

size_t PageLoadEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.PageLoadEvents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dwa.DeidentifiedWebAnalyticsEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageLoadEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PageLoadEvents*>(
      &from));
}

void PageLoadEvents::MergeFrom(const PageLoadEvents& from) {
  PageLoadEvents* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.PageLoadEvents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PageLoadEvents::CopyFrom(const PageLoadEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.PageLoadEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageLoadEvents::IsInitialized() const {
  return true;
}

void PageLoadEvents::InternalSwap(PageLoadEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

std::string PageLoadEvents::GetTypeName() const {
  return "dwa.PageLoadEvents";
}


// ===================================================================

class EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent>()._impl_._has_bits_);
  static void set_has_encrypted_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_trials_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
}
EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent(const EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encrypted_event_){}
    , decltype(_impl_.field_trials_hash_){}
    , decltype(_impl_.event_hash_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.encrypted_event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encrypted_event()) {
    _this->_impl_.encrypted_event_.Set(from._internal_encrypted_event(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.field_trials_hash_, &from._impl_.field_trials_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_hash_) -
    reinterpret_cast<char*>(&_impl_.field_trials_hash_)) + sizeof(_impl_.event_hash_));
  // @@protoc_insertion_point(copy_constructor:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
}

inline void EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encrypted_event_){}
    , decltype(_impl_.field_trials_hash_){uint64_t{0u}}
    , decltype(_impl_.event_hash_){uint64_t{0u}}
  };
  _impl_.encrypted_event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::~EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent() {
  // @@protoc_insertion_point(destructor:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_event_.Destroy();
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.encrypted_event_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.field_trials_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_hash_) -
        reinterpret_cast<char*>(&_impl_.field_trials_hash_)) + sizeof(_impl_.event_hash_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes encrypted_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encrypted_event();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 field_trials_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_field_trials_hash(&has_bits);
          _impl_.field_trials_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 event_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_event_hash(&has_bits);
          _impl_.event_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes encrypted_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encrypted_event(), target);
  }

  // optional fixed64 field_trials_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_field_trials_hash(), target);
  }

  // optional fixed64 event_hash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_event_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
  return target;
}

size_t EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes encrypted_event = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encrypted_event());
    }

    // optional fixed64 field_trials_hash = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 event_hash = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent*>(
      &from));
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::MergeFrom(const EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent& from) {
  EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_encrypted_event(from._internal_encrypted_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_trials_hash_ = from._impl_.field_trials_hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_hash_ = from._impl_.event_hash_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::CopyFrom(const EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::IsInitialized() const {
  return true;
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::InternalSwap(EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_event_, lhs_arena,
      &other->_impl_.encrypted_event_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent, _impl_.event_hash_)
      + sizeof(EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::_impl_.event_hash_)
      - PROTOBUF_FIELD_OFFSET(EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent, _impl_.field_trials_hash_)>(
          reinterpret_cast<char*>(&_impl_.field_trials_hash_),
          reinterpret_cast<char*>(&other->_impl_.field_trials_hash_));
}

std::string EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent::GetTypeName() const {
  return "dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent";
}


// ===================================================================

class EncryptedPageLoadEvents_EncryptedPageLoadEvent::_Internal {
 public:
};

EncryptedPageLoadEvents_EncryptedPageLoadEvent::EncryptedPageLoadEvents_EncryptedPageLoadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
}
EncryptedPageLoadEvents_EncryptedPageLoadEvent::EncryptedPageLoadEvents_EncryptedPageLoadEvent(const EncryptedPageLoadEvents_EncryptedPageLoadEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EncryptedPageLoadEvents_EncryptedPageLoadEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_deidentified_web_analytics_events_){from._impl_.encrypted_deidentified_web_analytics_events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
}

inline void EncryptedPageLoadEvents_EncryptedPageLoadEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_deidentified_web_analytics_events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EncryptedPageLoadEvents_EncryptedPageLoadEvent::~EncryptedPageLoadEvents_EncryptedPageLoadEvent() {
  // @@protoc_insertion_point(destructor:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedPageLoadEvents_EncryptedPageLoadEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_deidentified_web_analytics_events_.~RepeatedPtrField();
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encrypted_deidentified_web_analytics_events_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedPageLoadEvents_EncryptedPageLoadEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent encrypted_deidentified_web_analytics_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_deidentified_web_analytics_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedPageLoadEvents_EncryptedPageLoadEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent encrypted_deidentified_web_analytics_events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_encrypted_deidentified_web_analytics_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_encrypted_deidentified_web_analytics_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
  return target;
}

size_t EncryptedPageLoadEvents_EncryptedPageLoadEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent.EncryptedDeidentifiedWebAnalyticsEvent encrypted_deidentified_web_analytics_events = 1;
  total_size += 1UL * this->_internal_encrypted_deidentified_web_analytics_events_size();
  for (const auto& msg : this->_impl_.encrypted_deidentified_web_analytics_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedPageLoadEvents_EncryptedPageLoadEvent*>(
      &from));
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent::MergeFrom(const EncryptedPageLoadEvents_EncryptedPageLoadEvent& from) {
  EncryptedPageLoadEvents_EncryptedPageLoadEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.encrypted_deidentified_web_analytics_events_.MergeFrom(from._impl_.encrypted_deidentified_web_analytics_events_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent::CopyFrom(const EncryptedPageLoadEvents_EncryptedPageLoadEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedPageLoadEvents_EncryptedPageLoadEvent::IsInitialized() const {
  return true;
}

void EncryptedPageLoadEvents_EncryptedPageLoadEvent::InternalSwap(EncryptedPageLoadEvents_EncryptedPageLoadEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.encrypted_deidentified_web_analytics_events_.InternalSwap(&other->_impl_.encrypted_deidentified_web_analytics_events_);
}

std::string EncryptedPageLoadEvents_EncryptedPageLoadEvent::GetTypeName() const {
  return "dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent";
}


// ===================================================================

class EncryptedPageLoadEvents::_Internal {
 public:
};

EncryptedPageLoadEvents::EncryptedPageLoadEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.EncryptedPageLoadEvents)
}
EncryptedPageLoadEvents::EncryptedPageLoadEvents(const EncryptedPageLoadEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EncryptedPageLoadEvents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_page_load_events_){from._impl_.encrypted_page_load_events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dwa.EncryptedPageLoadEvents)
}

inline void EncryptedPageLoadEvents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_page_load_events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EncryptedPageLoadEvents::~EncryptedPageLoadEvents() {
  // @@protoc_insertion_point(destructor:dwa.EncryptedPageLoadEvents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedPageLoadEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_page_load_events_.~RepeatedPtrField();
}

void EncryptedPageLoadEvents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedPageLoadEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.EncryptedPageLoadEvents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encrypted_page_load_events_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedPageLoadEvents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent encrypted_page_load_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_page_load_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedPageLoadEvents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.EncryptedPageLoadEvents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent encrypted_page_load_events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_encrypted_page_load_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_encrypted_page_load_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.EncryptedPageLoadEvents)
  return target;
}

size_t EncryptedPageLoadEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.EncryptedPageLoadEvents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dwa.EncryptedPageLoadEvents.EncryptedPageLoadEvent encrypted_page_load_events = 1;
  total_size += 1UL * this->_internal_encrypted_page_load_events_size();
  for (const auto& msg : this->_impl_.encrypted_page_load_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedPageLoadEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedPageLoadEvents*>(
      &from));
}

void EncryptedPageLoadEvents::MergeFrom(const EncryptedPageLoadEvents& from) {
  EncryptedPageLoadEvents* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.EncryptedPageLoadEvents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.encrypted_page_load_events_.MergeFrom(from._impl_.encrypted_page_load_events_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedPageLoadEvents::CopyFrom(const EncryptedPageLoadEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.EncryptedPageLoadEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedPageLoadEvents::IsInitialized() const {
  return true;
}

void EncryptedPageLoadEvents::InternalSwap(EncryptedPageLoadEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.encrypted_page_load_events_.InternalSwap(&other->_impl_.encrypted_page_load_events_);
}

std::string EncryptedPageLoadEvents::GetTypeName() const {
  return "dwa.EncryptedPageLoadEvents";
}


// ===================================================================

class DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric>()._impl_._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
}
DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric(const DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_hash_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.name_hash_, &from._impl_.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.name_hash_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
}

inline void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_hash_){uint64_t{0u}}
    , decltype(_impl_.value_){int64_t{0}}
  };
}

DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::~DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric() {
  // @@protoc_insertion_point(destructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.name_hash_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          _impl_.name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_name_hash(), target);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
  return target;
}

size_t DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 name_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric*>(
      &from));
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::MergeFrom(const DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric& from) {
  DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.name_hash_ = from._impl_.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::CopyFrom(const DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::IsInitialized() const {
  return true;
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::InternalSwap(DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric, _impl_.value_)
      + sizeof(DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric, _impl_.name_hash_)>(
          reinterpret_cast<char*>(&_impl_.name_hash_),
          reinterpret_cast<char*>(&other->_impl_.name_hash_));
}

std::string DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric::GetTypeName() const {
  return "dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric";
}


// ===================================================================

class DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::_Internal {
 public:
};

DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
}
DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics(const DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_){from._impl_.metric_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
}

inline void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::~DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics() {
  // @@protoc_insertion_point(destructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metric_.~RepeatedPtrField();
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metric_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric metric = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metric_size()); i < n; i++) {
    const auto& repfield = this->_internal_metric(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
  return target;
}

size_t DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics.Metric metric = 1;
  total_size += 1UL * this->_internal_metric_size();
  for (const auto& msg : this->_impl_.metric_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics*>(
      &from));
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::MergeFrom(const DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics& from) {
  DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metric_.MergeFrom(from._impl_.metric_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::CopyFrom(const DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::IsInitialized() const {
  return true;
}

void DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::InternalSwap(DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metric_.InternalSwap(&other->_impl_.metric_);
}

std::string DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics::GetTypeName() const {
  return "dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics";
}


// ===================================================================

class DeidentifiedWebAnalyticsEvent_ContentMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<DeidentifiedWebAnalyticsEvent_ContentMetric>()._impl_._has_bits_);
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeidentifiedWebAnalyticsEvent_ContentMetric::DeidentifiedWebAnalyticsEvent_ContentMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
}
DeidentifiedWebAnalyticsEvent_ContentMetric::DeidentifiedWebAnalyticsEvent_ContentMetric(const DeidentifiedWebAnalyticsEvent_ContentMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeidentifiedWebAnalyticsEvent_ContentMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metrics_){from._impl_.metrics_}
    , decltype(_impl_.content_hash_){}
    , decltype(_impl_.content_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.content_hash_, &from._impl_.content_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.content_type_) -
    reinterpret_cast<char*>(&_impl_.content_hash_)) + sizeof(_impl_.content_type_));
  // @@protoc_insertion_point(copy_constructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
}

inline void DeidentifiedWebAnalyticsEvent_ContentMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metrics_){arena}
    , decltype(_impl_.content_hash_){uint64_t{0u}}
    , decltype(_impl_.content_type_){0}
  };
}

DeidentifiedWebAnalyticsEvent_ContentMetric::~DeidentifiedWebAnalyticsEvent_ContentMetric() {
  // @@protoc_insertion_point(destructor:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeidentifiedWebAnalyticsEvent_ContentMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.~RepeatedPtrField();
}

void DeidentifiedWebAnalyticsEvent_ContentMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeidentifiedWebAnalyticsEvent_ContentMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.content_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.content_type_) -
        reinterpret_cast<char*>(&_impl_.content_hash_)) + sizeof(_impl_.content_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeidentifiedWebAnalyticsEvent_ContentMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.ContentType content_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType_IsValid(val))) {
            _internal_set_content_type(static_cast<::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric_ContentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 content_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_content_hash(&has_bits);
          _impl_.content_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeidentifiedWebAnalyticsEvent_ContentMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.ContentType content_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_content_type(), target);
  }

  // optional fixed64 content_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_content_hash(), target);
  }

  // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics metrics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
  return target;
}

size_t DeidentifiedWebAnalyticsEvent_ContentMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.EntryMetrics metrics = 3;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 content_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric.ContentType content_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_content_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifiedWebAnalyticsEvent_ContentMetric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeidentifiedWebAnalyticsEvent_ContentMetric*>(
      &from));
}

void DeidentifiedWebAnalyticsEvent_ContentMetric::MergeFrom(const DeidentifiedWebAnalyticsEvent_ContentMetric& from) {
  DeidentifiedWebAnalyticsEvent_ContentMetric* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.content_hash_ = from._impl_.content_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.content_type_ = from._impl_.content_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeidentifiedWebAnalyticsEvent_ContentMetric::CopyFrom(const DeidentifiedWebAnalyticsEvent_ContentMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.DeidentifiedWebAnalyticsEvent.ContentMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifiedWebAnalyticsEvent_ContentMetric::IsInitialized() const {
  return true;
}

void DeidentifiedWebAnalyticsEvent_ContentMetric::InternalSwap(DeidentifiedWebAnalyticsEvent_ContentMetric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeidentifiedWebAnalyticsEvent_ContentMetric, _impl_.content_type_)
      + sizeof(DeidentifiedWebAnalyticsEvent_ContentMetric::_impl_.content_type_)
      - PROTOBUF_FIELD_OFFSET(DeidentifiedWebAnalyticsEvent_ContentMetric, _impl_.content_hash_)>(
          reinterpret_cast<char*>(&_impl_.content_hash_),
          reinterpret_cast<char*>(&other->_impl_.content_hash_));
}

std::string DeidentifiedWebAnalyticsEvent_ContentMetric::GetTypeName() const {
  return "dwa.DeidentifiedWebAnalyticsEvent.ContentMetric";
}


// ===================================================================

class DeidentifiedWebAnalyticsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DeidentifiedWebAnalyticsEvent>()._impl_._has_bits_);
  static void set_has_event_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void DeidentifiedWebAnalyticsEvent::clear_field_trials() {
  _impl_.field_trials_.Clear();
}
DeidentifiedWebAnalyticsEvent::DeidentifiedWebAnalyticsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dwa.DeidentifiedWebAnalyticsEvent)
}
DeidentifiedWebAnalyticsEvent::DeidentifiedWebAnalyticsEvent(const DeidentifiedWebAnalyticsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeidentifiedWebAnalyticsEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_metrics_){from._impl_.content_metrics_}
    , decltype(_impl_.field_trials_){from._impl_.field_trials_}
    , decltype(_impl_.event_hash_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.event_hash_ = from._impl_.event_hash_;
  // @@protoc_insertion_point(copy_constructor:dwa.DeidentifiedWebAnalyticsEvent)
}

inline void DeidentifiedWebAnalyticsEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_metrics_){arena}
    , decltype(_impl_.field_trials_){arena}
    , decltype(_impl_.event_hash_){uint64_t{0u}}
  };
}

DeidentifiedWebAnalyticsEvent::~DeidentifiedWebAnalyticsEvent() {
  // @@protoc_insertion_point(destructor:dwa.DeidentifiedWebAnalyticsEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeidentifiedWebAnalyticsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_metrics_.~RepeatedPtrField();
  _impl_.field_trials_.~RepeatedPtrField();
}

void DeidentifiedWebAnalyticsEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeidentifiedWebAnalyticsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dwa.DeidentifiedWebAnalyticsEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_metrics_.Clear();
  _impl_.field_trials_.Clear();
  _impl_.event_hash_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeidentifiedWebAnalyticsEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 event_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_event_hash(&has_bits);
          _impl_.event_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric content_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.SystemProfileProto.FieldTrial field_trials = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_trials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeidentifiedWebAnalyticsEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dwa.DeidentifiedWebAnalyticsEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 event_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_event_hash(), target);
  }

  // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric content_metrics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_content_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.SystemProfileProto.FieldTrial field_trials = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_trials_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_trials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dwa.DeidentifiedWebAnalyticsEvent)
  return target;
}

size_t DeidentifiedWebAnalyticsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dwa.DeidentifiedWebAnalyticsEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dwa.DeidentifiedWebAnalyticsEvent.ContentMetric content_metrics = 2;
  total_size += 1UL * this->_internal_content_metrics_size();
  for (const auto& msg : this->_impl_.content_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.SystemProfileProto.FieldTrial field_trials = 3;
  total_size += 1UL * this->_internal_field_trials_size();
  for (const auto& msg : this->_impl_.field_trials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed64 event_hash = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifiedWebAnalyticsEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeidentifiedWebAnalyticsEvent*>(
      &from));
}

void DeidentifiedWebAnalyticsEvent::MergeFrom(const DeidentifiedWebAnalyticsEvent& from) {
  DeidentifiedWebAnalyticsEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:dwa.DeidentifiedWebAnalyticsEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.content_metrics_.MergeFrom(from._impl_.content_metrics_);
  _this->_impl_.field_trials_.MergeFrom(from._impl_.field_trials_);
  if (from._internal_has_event_hash()) {
    _this->_internal_set_event_hash(from._internal_event_hash());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeidentifiedWebAnalyticsEvent::CopyFrom(const DeidentifiedWebAnalyticsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dwa.DeidentifiedWebAnalyticsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifiedWebAnalyticsEvent::IsInitialized() const {
  return true;
}

void DeidentifiedWebAnalyticsEvent::InternalSwap(DeidentifiedWebAnalyticsEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_metrics_.InternalSwap(&other->_impl_.content_metrics_);
  _impl_.field_trials_.InternalSwap(&other->_impl_.field_trials_);
  swap(_impl_.event_hash_, other->_impl_.event_hash_);
}

std::string DeidentifiedWebAnalyticsEvent::GetTypeName() const {
  return "dwa.DeidentifiedWebAnalyticsEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dwa
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dwa::DeidentifiedWebAnalyticsReport*
Arena::CreateMaybeMessage< ::dwa::DeidentifiedWebAnalyticsReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::DeidentifiedWebAnalyticsReport >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::CoarseSystemInfo*
Arena::CreateMaybeMessage< ::dwa::CoarseSystemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::CoarseSystemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::PageLoadEvents*
Arena::CreateMaybeMessage< ::dwa::PageLoadEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::PageLoadEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent*
Arena::CreateMaybeMessage< ::dwa::EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::EncryptedPageLoadEvents_EncryptedPageLoadEvent_EncryptedDeidentifiedWebAnalyticsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::EncryptedPageLoadEvents_EncryptedPageLoadEvent*
Arena::CreateMaybeMessage< ::dwa::EncryptedPageLoadEvents_EncryptedPageLoadEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::EncryptedPageLoadEvents_EncryptedPageLoadEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::EncryptedPageLoadEvents*
Arena::CreateMaybeMessage< ::dwa::EncryptedPageLoadEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::EncryptedPageLoadEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric*
Arena::CreateMaybeMessage< ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics_Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics*
Arena::CreateMaybeMessage< ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric_EntryMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric*
Arena::CreateMaybeMessage< ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::DeidentifiedWebAnalyticsEvent_ContentMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::dwa::DeidentifiedWebAnalyticsEvent*
Arena::CreateMaybeMessage< ::dwa::DeidentifiedWebAnalyticsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dwa::DeidentifiedWebAnalyticsEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
