// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_logs.proto

#include "cast_logs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nand_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mfg_date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.build_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emmc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.board_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal() {}
  union {
    CastLogsProto_CastDeviceInfo_HardwareInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal _CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_;
PROTOBUF_CONSTEXPR CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hardware_revision_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.manufacturer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hardware_info_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct CastLogsProto_CastDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastLogsProto_CastDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastLogsProto_CastDeviceInfoDefaultTypeInternal() {}
  union {
    CastLogsProto_CastDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastLogsProto_CastDeviceInfoDefaultTypeInternal _CastLogsProto_CastDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chrome_browser_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_device_id_)*/uint64_t{0u}
  , /*decltype(_impl_.sdk_type_)*/0
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.transport_connection_type_)*/0
  , /*decltype(_impl_.sender_local_ip_fragment_)*/0} {}
struct CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal() {}
  union {
    CastLogsProto_CastConnectionInfo_SenderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal _CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_;
PROTOBUF_CONSTEXPR CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_info_)*/nullptr
  , /*decltype(_impl_.transport_connection_id_)*/0u
  , /*decltype(_impl_.virtual_connection_id_)*/0u} {}
struct CastLogsProto_CastConnectionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastLogsProto_CastConnectionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastLogsProto_CastConnectionInfoDefaultTypeInternal() {}
  union {
    CastLogsProto_CastConnectionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastLogsProto_CastConnectionInfoDefaultTypeInternal _CastLogsProto_CastConnectionInfo_default_instance_;
PROTOBUF_CONSTEXPR CastLogsProto_CastEventProto_Metadata::CastLogsProto_CastEventProto_Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.value_)*/int64_t{0}} {}
struct CastLogsProto_CastEventProto_MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastLogsProto_CastEventProto_MetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastLogsProto_CastEventProto_MetadataDefaultTypeInternal() {}
  union {
    CastLogsProto_CastEventProto_Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastLogsProto_CastEventProto_MetadataDefaultTypeInternal _CastLogsProto_CastEventProto_Metadata_default_instance_;
PROTOBUF_CONSTEXPR CastLogsProto_CastEventProto::CastLogsProto_CastEventProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.feature_vector_)*/{}
  , /*decltype(_impl_.event_id_list_)*/{}
  , /*decltype(_impl_.conversation_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aogh_request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ui_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aogh_agent_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selinux_audit_detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hotword_model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aogh_standard_agent_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.time_msec_)*/int64_t{0}
  , /*decltype(_impl_.application_session_id_)*/uint64_t{0u}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.transport_connection_id_)*/0u
  , /*decltype(_impl_.cast_receiver_version_)*/uint64_t{0u}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.cast_mpl_version_)*/uint64_t{0u}
  , /*decltype(_impl_.virtual_connection_id_)*/0u
  , /*decltype(_impl_.request_id_)*/0u
  , /*decltype(_impl_.group_uuid_)*/uint64_t{0u}
  , /*decltype(_impl_.aogh_local_device_id_)*/int64_t{0}
  , /*decltype(_impl_.remote_app_id_)*/0u
  , /*decltype(_impl_.launch_from_)*/0
  , /*decltype(_impl_.duo_core_version_)*/uint64_t{0u}
  , /*decltype(_impl_.runtime_type_)*/0} {}
struct CastLogsProto_CastEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastLogsProto_CastEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastLogsProto_CastEventProtoDefaultTypeInternal() {}
  union {
    CastLogsProto_CastEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastLogsProto_CastEventProtoDefaultTypeInternal _CastLogsProto_CastEventProto_default_instance_;
PROTOBUF_CONSTEXPR CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.backdrop_app_device_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latest_ui_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.google_wifi_station_shmac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.installed_manifest_platform_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_bundle_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_build_number_)*/uint64_t{0u}
  , /*decltype(_impl_.last_reboot_type_)*/0
  , /*decltype(_impl_.release_version_)*/0u
  , /*decltype(_impl_.netif_ip_version_)*/0
  , /*decltype(_impl_.ip_dual_stack_supported_)*/false
  , /*decltype(_impl_.installed_manifest_version_)*/0u} {}
struct CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal() {}
  union {
    CastLogsProto_CastDeviceMutableInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal _CastLogsProto_CastDeviceMutableInfo_default_instance_;
PROTOBUF_CONSTEXPR CastLogsProto::CastLogsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cast_connection_info_)*/{}
  , /*decltype(_impl_.cast_event_)*/{}
  , /*decltype(_impl_.cast_device_info_)*/nullptr
  , /*decltype(_impl_.cast_device_mutable_info_)*/nullptr
  , /*decltype(_impl_.receiver_metrics_id_)*/uint64_t{0u}
  , /*decltype(_impl_.virtual_release_track_)*/0u
  , /*decltype(_impl_.source_virtual_release_track_)*/0u
  , /*decltype(_impl_.ephemeral_id_)*/uint64_t{0u}} {}
struct CastLogsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CastLogsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CastLogsProtoDefaultTypeInternal() {}
  union {
    CastLogsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CastLogsProtoDefaultTypeInternal _CastLogsProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool CastLogsProto_CastDeviceInfo_CastProductType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastLogsProto_CastDeviceInfo_CastProductType_strings[14] = {};

static const char CastLogsProto_CastDeviceInfo_CastProductType_names[] =
  "CAST_PRODUCT_TYPE_11"
  "CAST_PRODUCT_TYPE_ANDROID"
  "CAST_PRODUCT_TYPE_ANDROID_AUTOMOTIVE"
  "CAST_PRODUCT_TYPE_ANDROID_THINGS"
  "CAST_PRODUCT_TYPE_ANDROID_TV"
  "CAST_PRODUCT_TYPE_ASSISTANT"
  "CAST_PRODUCT_TYPE_AUDIO"
  "CAST_PRODUCT_TYPE_CHROMECAST"
  "CAST_PRODUCT_TYPE_CHROME_OS"
  "CAST_PRODUCT_TYPE_CORE"
  "CAST_PRODUCT_TYPE_FUCHSIA_OS"
  "CAST_PRODUCT_TYPE_LITE"
  "CAST_PRODUCT_TYPE_TV"
  "CAST_PRODUCT_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastLogsProto_CastDeviceInfo_CastProductType_entries[] = {
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 0, 20}, 11 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 20, 25}, 13 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 45, 36}, 12 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 81, 32}, 6 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 113, 28}, 4 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 141, 27}, 5 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 168, 23}, 3 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 191, 28}, 1 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 219, 27}, 7 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 246, 22}, 10 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 268, 28}, 8 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 296, 22}, 9 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 318, 20}, 2 },
  { {CastLogsProto_CastDeviceInfo_CastProductType_names + 338, 25}, 0 },
};

static const int CastLogsProto_CastDeviceInfo_CastProductType_entries_by_number[] = {
  13, // 0 -> CAST_PRODUCT_TYPE_UNKNOWN
  7, // 1 -> CAST_PRODUCT_TYPE_CHROMECAST
  12, // 2 -> CAST_PRODUCT_TYPE_TV
  6, // 3 -> CAST_PRODUCT_TYPE_AUDIO
  4, // 4 -> CAST_PRODUCT_TYPE_ANDROID_TV
  5, // 5 -> CAST_PRODUCT_TYPE_ASSISTANT
  3, // 6 -> CAST_PRODUCT_TYPE_ANDROID_THINGS
  8, // 7 -> CAST_PRODUCT_TYPE_CHROME_OS
  10, // 8 -> CAST_PRODUCT_TYPE_FUCHSIA_OS
  11, // 9 -> CAST_PRODUCT_TYPE_LITE
  9, // 10 -> CAST_PRODUCT_TYPE_CORE
  0, // 11 -> CAST_PRODUCT_TYPE_11
  2, // 12 -> CAST_PRODUCT_TYPE_ANDROID_AUTOMOTIVE
  1, // 13 -> CAST_PRODUCT_TYPE_ANDROID
};

const std::string& CastLogsProto_CastDeviceInfo_CastProductType_Name(
    CastLogsProto_CastDeviceInfo_CastProductType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastLogsProto_CastDeviceInfo_CastProductType_entries,
          CastLogsProto_CastDeviceInfo_CastProductType_entries_by_number,
          14, CastLogsProto_CastDeviceInfo_CastProductType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastLogsProto_CastDeviceInfo_CastProductType_entries,
      CastLogsProto_CastDeviceInfo_CastProductType_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastLogsProto_CastDeviceInfo_CastProductType_strings[idx].get();
}
bool CastLogsProto_CastDeviceInfo_CastProductType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastLogsProto_CastDeviceInfo_CastProductType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastLogsProto_CastDeviceInfo_CastProductType_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<CastLogsProto_CastDeviceInfo_CastProductType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_UNKNOWN;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CHROMECAST;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_TV;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_AUDIO;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_TV;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ASSISTANT;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_THINGS;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CHROME_OS;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_FUCHSIA_OS;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_LITE;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CORE;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_11;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_AUTOMOTIVE;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CastProductType_MIN;
constexpr CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CastProductType_MAX;
constexpr int CastLogsProto_CastDeviceInfo::CastProductType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_strings[3] = {};

static const char CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_names[] =
  "SDK_CHROME_EXTENSION"
  "SDK_NATIVE"
  "SDK_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_entries[] = {
  { {CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_names + 0, 20}, 2 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_names + 20, 10}, 1 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_names + 30, 11}, 0 },
};

static const int CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_entries_by_number[] = {
  2, // 0 -> SDK_UNKNOWN
  1, // 1 -> SDK_NATIVE
  0, // 2 -> SDK_CHROME_EXTENSION
};

const std::string& CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_Name(
    CastLogsProto_CastConnectionInfo_SenderInfo_SDKType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_entries,
          CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_entries_by_number,
          3, CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_entries,
      CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_strings[idx].get();
}
bool CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastLogsProto_CastConnectionInfo_SenderInfo_SDKType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CastLogsProto_CastConnectionInfo_SenderInfo_SDKType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_UNKNOWN;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_NATIVE;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_CHROME_EXTENSION;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_MIN;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_MAX;
constexpr int CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastLogsProto_CastConnectionInfo_SenderInfo_Platform_strings[8] = {};

static const char CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names[] =
  "PLATFORM_ANDROID"
  "PLATFORM_CAST"
  "PLATFORM_CHROMEOS"
  "PLATFORM_IOS"
  "PLATFORM_LINUX"
  "PLATFORM_OSX"
  "PLATFORM_OTHER"
  "PLATFORM_WINDOWS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastLogsProto_CastConnectionInfo_SenderInfo_Platform_entries[] = {
  { {CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names + 0, 16}, 1 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names + 16, 13}, 7 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names + 29, 17}, 5 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names + 46, 12}, 2 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names + 58, 14}, 6 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names + 72, 12}, 4 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names + 84, 14}, 0 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_Platform_names + 98, 16}, 3 },
};

static const int CastLogsProto_CastConnectionInfo_SenderInfo_Platform_entries_by_number[] = {
  6, // 0 -> PLATFORM_OTHER
  0, // 1 -> PLATFORM_ANDROID
  3, // 2 -> PLATFORM_IOS
  7, // 3 -> PLATFORM_WINDOWS
  5, // 4 -> PLATFORM_OSX
  2, // 5 -> PLATFORM_CHROMEOS
  4, // 6 -> PLATFORM_LINUX
  1, // 7 -> PLATFORM_CAST
};

const std::string& CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Name(
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastLogsProto_CastConnectionInfo_SenderInfo_Platform_entries,
          CastLogsProto_CastConnectionInfo_SenderInfo_Platform_entries_by_number,
          8, CastLogsProto_CastConnectionInfo_SenderInfo_Platform_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastLogsProto_CastConnectionInfo_SenderInfo_Platform_entries,
      CastLogsProto_CastConnectionInfo_SenderInfo_Platform_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastLogsProto_CastConnectionInfo_SenderInfo_Platform_strings[idx].get();
}
bool CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastLogsProto_CastConnectionInfo_SenderInfo_Platform* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastLogsProto_CastConnectionInfo_SenderInfo_Platform_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<CastLogsProto_CastConnectionInfo_SenderInfo_Platform>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_OTHER;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_ANDROID;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_IOS;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_WINDOWS;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_OSX;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_CHROMEOS;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_LINUX;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_CAST;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::Platform_MIN;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::Platform_MAX;
constexpr int CastLogsProto_CastConnectionInfo_SenderInfo::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_strings[4] = {};

static const char CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_names[] =
  "CONNECTION_TYPE_INTERNAL"
  "CONNECTION_TYPE_LOCAL"
  "CONNECTION_TYPE_RELAY"
  "CONNECTION_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_entries[] = {
  { {CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_names + 0, 24}, 3 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_names + 24, 21}, 1 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_names + 45, 21}, 2 },
  { {CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_names + 66, 23}, 0 },
};

static const int CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_entries_by_number[] = {
  3, // 0 -> CONNECTION_TYPE_UNKNOWN
  1, // 1 -> CONNECTION_TYPE_LOCAL
  2, // 2 -> CONNECTION_TYPE_RELAY
  0, // 3 -> CONNECTION_TYPE_INTERNAL
};

const std::string& CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_Name(
    CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_entries,
          CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_entries_by_number,
          4, CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_entries,
      CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_strings[idx].get();
}
bool CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_UNKNOWN;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_LOCAL;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_RELAY;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_INTERNAL;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_MIN;
constexpr CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_MAX;
constexpr int CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CastLogsProto_CastEventProto_LaunchFrom_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastLogsProto_CastEventProto_LaunchFrom_strings[5] = {};

static const char CastLogsProto_CastEventProto_LaunchFrom_names[] =
  "FROM_CAST_V2"
  "FROM_CCS"
  "FROM_DIAL"
  "FROM_LOCAL"
  "FROM_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastLogsProto_CastEventProto_LaunchFrom_entries[] = {
  { {CastLogsProto_CastEventProto_LaunchFrom_names + 0, 12}, 3 },
  { {CastLogsProto_CastEventProto_LaunchFrom_names + 12, 8}, 4 },
  { {CastLogsProto_CastEventProto_LaunchFrom_names + 20, 9}, 2 },
  { {CastLogsProto_CastEventProto_LaunchFrom_names + 29, 10}, 1 },
  { {CastLogsProto_CastEventProto_LaunchFrom_names + 39, 12}, 0 },
};

static const int CastLogsProto_CastEventProto_LaunchFrom_entries_by_number[] = {
  4, // 0 -> FROM_UNKNOWN
  3, // 1 -> FROM_LOCAL
  2, // 2 -> FROM_DIAL
  0, // 3 -> FROM_CAST_V2
  1, // 4 -> FROM_CCS
};

const std::string& CastLogsProto_CastEventProto_LaunchFrom_Name(
    CastLogsProto_CastEventProto_LaunchFrom value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastLogsProto_CastEventProto_LaunchFrom_entries,
          CastLogsProto_CastEventProto_LaunchFrom_entries_by_number,
          5, CastLogsProto_CastEventProto_LaunchFrom_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastLogsProto_CastEventProto_LaunchFrom_entries,
      CastLogsProto_CastEventProto_LaunchFrom_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastLogsProto_CastEventProto_LaunchFrom_strings[idx].get();
}
bool CastLogsProto_CastEventProto_LaunchFrom_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastLogsProto_CastEventProto_LaunchFrom* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastLogsProto_CastEventProto_LaunchFrom_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<CastLogsProto_CastEventProto_LaunchFrom>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_UNKNOWN;
constexpr CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_LOCAL;
constexpr CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_DIAL;
constexpr CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_CAST_V2;
constexpr CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_CCS;
constexpr CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::LaunchFrom_MIN;
constexpr CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::LaunchFrom_MAX;
constexpr int CastLogsProto_CastEventProto::LaunchFrom_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CastLogsProto_CastEventProto_RuntimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastLogsProto_CastEventProto_RuntimeType_strings[4] = {};

static const char CastLogsProto_CastEventProto_RuntimeType_names[] =
  "RUNTIME_TYPE_CAST_LITE"
  "RUNTIME_TYPE_CAST_WEB"
  "RUNTIME_TYPE_NATIVE"
  "RUNTIME_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastLogsProto_CastEventProto_RuntimeType_entries[] = {
  { {CastLogsProto_CastEventProto_RuntimeType_names + 0, 22}, 2 },
  { {CastLogsProto_CastEventProto_RuntimeType_names + 22, 21}, 1 },
  { {CastLogsProto_CastEventProto_RuntimeType_names + 43, 19}, 3 },
  { {CastLogsProto_CastEventProto_RuntimeType_names + 62, 20}, 0 },
};

static const int CastLogsProto_CastEventProto_RuntimeType_entries_by_number[] = {
  3, // 0 -> RUNTIME_TYPE_UNKNOWN
  1, // 1 -> RUNTIME_TYPE_CAST_WEB
  0, // 2 -> RUNTIME_TYPE_CAST_LITE
  2, // 3 -> RUNTIME_TYPE_NATIVE
};

const std::string& CastLogsProto_CastEventProto_RuntimeType_Name(
    CastLogsProto_CastEventProto_RuntimeType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastLogsProto_CastEventProto_RuntimeType_entries,
          CastLogsProto_CastEventProto_RuntimeType_entries_by_number,
          4, CastLogsProto_CastEventProto_RuntimeType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastLogsProto_CastEventProto_RuntimeType_entries,
      CastLogsProto_CastEventProto_RuntimeType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastLogsProto_CastEventProto_RuntimeType_strings[idx].get();
}
bool CastLogsProto_CastEventProto_RuntimeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastLogsProto_CastEventProto_RuntimeType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastLogsProto_CastEventProto_RuntimeType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CastLogsProto_CastEventProto_RuntimeType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RUNTIME_TYPE_UNKNOWN;
constexpr CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RUNTIME_TYPE_CAST_WEB;
constexpr CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RUNTIME_TYPE_CAST_LITE;
constexpr CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RUNTIME_TYPE_NATIVE;
constexpr CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RuntimeType_MIN;
constexpr CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RuntimeType_MAX;
constexpr int CastLogsProto_CastEventProto::RuntimeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastLogsProto_CastDeviceMutableInfo_RebootType_strings[22] = {};

static const char CastLogsProto_CastDeviceMutableInfo_RebootType_names[] =
  "ANOMALY_DETECTION"
  "EXPERIMENT_CHANGE"
  "KERNEL_PANIC"
  "MULTI_SERVICE_BUG"
  "POWER_MANAGER"
  "REBOOT_TYPE_API"
  "REBOOT_TYPE_CRASH_UPLOADER"
  "REBOOT_TYPE_FDR"
  "REBOOT_TYPE_FORCED"
  "REBOOT_TYPE_GRACEFUL_RESTART"
  "REBOOT_TYPE_HW_WATCHDOG"
  "REBOOT_TYPE_NIGHTLY"
  "REBOOT_TYPE_OTA"
  "REBOOT_TYPE_OVERHEAT"
  "REBOOT_TYPE_PROCESS_MANAGER"
  "REBOOT_TYPE_REGENERATE_CLOUD_ID"
  "REBOOT_TYPE_REPEATED_OOM"
  "REBOOT_TYPE_SW_OTHER"
  "REBOOT_TYPE_UNGRACEFUL_RESTART"
  "REBOOT_TYPE_UNKNOWN"
  "REBOOT_TYPE_UTILITY_PROCESS_CRASH"
  "REBOOT_TYPE_WATCHDOG";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastLogsProto_CastDeviceMutableInfo_RebootType_entries[] = {
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 0, 17}, 20 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 17, 17}, 19 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 34, 12}, 21 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 46, 17}, 17 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 63, 13}, 18 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 76, 15}, 2 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 91, 26}, 7 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 117, 15}, 8 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 132, 18}, 1 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 150, 28}, 15 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 178, 23}, 9 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 201, 19}, 3 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 220, 15}, 4 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 235, 20}, 11 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 255, 27}, 6 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 282, 31}, 12 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 313, 24}, 13 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 337, 20}, 10 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 357, 30}, 16 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 387, 19}, 0 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 406, 33}, 14 },
  { {CastLogsProto_CastDeviceMutableInfo_RebootType_names + 439, 20}, 5 },
};

static const int CastLogsProto_CastDeviceMutableInfo_RebootType_entries_by_number[] = {
  19, // 0 -> REBOOT_TYPE_UNKNOWN
  8, // 1 -> REBOOT_TYPE_FORCED
  5, // 2 -> REBOOT_TYPE_API
  11, // 3 -> REBOOT_TYPE_NIGHTLY
  12, // 4 -> REBOOT_TYPE_OTA
  21, // 5 -> REBOOT_TYPE_WATCHDOG
  14, // 6 -> REBOOT_TYPE_PROCESS_MANAGER
  6, // 7 -> REBOOT_TYPE_CRASH_UPLOADER
  7, // 8 -> REBOOT_TYPE_FDR
  10, // 9 -> REBOOT_TYPE_HW_WATCHDOG
  17, // 10 -> REBOOT_TYPE_SW_OTHER
  13, // 11 -> REBOOT_TYPE_OVERHEAT
  15, // 12 -> REBOOT_TYPE_REGENERATE_CLOUD_ID
  16, // 13 -> REBOOT_TYPE_REPEATED_OOM
  20, // 14 -> REBOOT_TYPE_UTILITY_PROCESS_CRASH
  9, // 15 -> REBOOT_TYPE_GRACEFUL_RESTART
  18, // 16 -> REBOOT_TYPE_UNGRACEFUL_RESTART
  3, // 17 -> MULTI_SERVICE_BUG
  4, // 18 -> POWER_MANAGER
  1, // 19 -> EXPERIMENT_CHANGE
  0, // 20 -> ANOMALY_DETECTION
  2, // 21 -> KERNEL_PANIC
};

const std::string& CastLogsProto_CastDeviceMutableInfo_RebootType_Name(
    CastLogsProto_CastDeviceMutableInfo_RebootType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastLogsProto_CastDeviceMutableInfo_RebootType_entries,
          CastLogsProto_CastDeviceMutableInfo_RebootType_entries_by_number,
          22, CastLogsProto_CastDeviceMutableInfo_RebootType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastLogsProto_CastDeviceMutableInfo_RebootType_entries,
      CastLogsProto_CastDeviceMutableInfo_RebootType_entries_by_number,
      22, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastLogsProto_CastDeviceMutableInfo_RebootType_strings[idx].get();
}
bool CastLogsProto_CastDeviceMutableInfo_RebootType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastLogsProto_CastDeviceMutableInfo_RebootType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastLogsProto_CastDeviceMutableInfo_RebootType_entries, 22, name, &int_value);
  if (success) {
    *value = static_cast<CastLogsProto_CastDeviceMutableInfo_RebootType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_UNKNOWN;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_FORCED;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_API;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_NIGHTLY;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_OTA;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_WATCHDOG;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_PROCESS_MANAGER;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_CRASH_UPLOADER;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_FDR;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_HW_WATCHDOG;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_SW_OTHER;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_OVERHEAT;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_REGENERATE_CLOUD_ID;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_REPEATED_OOM;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_UTILITY_PROCESS_CRASH;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_GRACEFUL_RESTART;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_UNGRACEFUL_RESTART;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::MULTI_SERVICE_BUG;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::POWER_MANAGER;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::EXPERIMENT_CHANGE;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::ANOMALY_DETECTION;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::KERNEL_PANIC;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::RebootType_MIN;
constexpr CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::RebootType_MAX;
constexpr int CastLogsProto_CastDeviceMutableInfo::RebootType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_strings[4] = {};

static const char CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_names[] =
  "IP_DUAL_STACK"
  "IP_UNKNOWN"
  "IP_V4"
  "IP_V6";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_entries[] = {
  { {CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_names + 0, 13}, 3 },
  { {CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_names + 13, 10}, 0 },
  { {CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_names + 23, 5}, 1 },
  { {CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_names + 28, 5}, 2 },
};

static const int CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_entries_by_number[] = {
  1, // 0 -> IP_UNKNOWN
  2, // 1 -> IP_V4
  3, // 2 -> IP_V6
  0, // 3 -> IP_DUAL_STACK
};

const std::string& CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_Name(
    CastLogsProto_CastDeviceMutableInfo_NetifIPVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_entries,
          CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_entries_by_number,
          4, CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_entries,
      CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_strings[idx].get();
}
bool CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CastLogsProto_CastDeviceMutableInfo_NetifIPVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CastLogsProto_CastDeviceMutableInfo_NetifIPVersion>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_UNKNOWN;
constexpr CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_V4;
constexpr CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_V6;
constexpr CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_DUAL_STACK;
constexpr CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_MIN;
constexpr CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_MAX;
constexpr int CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CastLogsProto_CastDeviceInfo_HardwareInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CastLogsProto_CastDeviceInfo_HardwareInfo>()._impl_._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nand(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mfg_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_build_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_emmc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_display(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_amp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_board_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}
CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo(const CastLogsProto_CastDeviceInfo_HardwareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CastLogsProto_CastDeviceInfo_HardwareInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){}
    , decltype(_impl_.mic_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.nand_){}
    , decltype(_impl_.mfg_date_){}
    , decltype(_impl_.build_name_){}
    , decltype(_impl_.config_){}
    , decltype(_impl_.emmc_){}
    , decltype(_impl_.display_){}
    , decltype(_impl_.amp_){}
    , decltype(_impl_.board_name_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_color()) {
    _this->_impl_.color_.Set(from._internal_color(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mic()) {
    _this->_impl_.mic_.Set(from._internal_mic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_memory()) {
    _this->_impl_.memory_.Set(from._internal_memory(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nand_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nand()) {
    _this->_impl_.nand_.Set(from._internal_nand(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mfg_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mfg_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mfg_date()) {
    _this->_impl_.mfg_date_.Set(from._internal_mfg_date(), 
      _this->GetArenaForAllocation());
  }
  _impl_.build_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_build_name()) {
    _this->_impl_.build_name_.Set(from._internal_build_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_config()) {
    _this->_impl_.config_.Set(from._internal_config(), 
      _this->GetArenaForAllocation());
  }
  _impl_.emmc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.emmc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_emmc()) {
    _this->_impl_.emmc_.Set(from._internal_emmc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display()) {
    _this->_impl_.display_.Set(from._internal_display(), 
      _this->GetArenaForAllocation());
  }
  _impl_.amp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amp()) {
    _this->_impl_.amp_.Set(from._internal_amp(), 
      _this->GetArenaForAllocation());
  }
  _impl_.board_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.board_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_board_name()) {
    _this->_impl_.board_name_.Set(from._internal_board_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}

inline void CastLogsProto_CastDeviceInfo_HardwareInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){}
    , decltype(_impl_.mic_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.nand_){}
    , decltype(_impl_.mfg_date_){}
    , decltype(_impl_.build_name_){}
    , decltype(_impl_.config_){}
    , decltype(_impl_.emmc_){}
    , decltype(_impl_.display_){}
    , decltype(_impl_.amp_){}
    , decltype(_impl_.board_name_){}
  };
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nand_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mfg_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mfg_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.build_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.emmc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.emmc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.board_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.board_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CastLogsProto_CastDeviceInfo_HardwareInfo::~CastLogsProto_CastDeviceInfo_HardwareInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastLogsProto_CastDeviceInfo_HardwareInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.color_.Destroy();
  _impl_.mic_.Destroy();
  _impl_.memory_.Destroy();
  _impl_.nand_.Destroy();
  _impl_.mfg_date_.Destroy();
  _impl_.build_name_.Destroy();
  _impl_.config_.Destroy();
  _impl_.emmc_.Destroy();
  _impl_.display_.Destroy();
  _impl_.amp_.Destroy();
  _impl_.board_name_.Destroy();
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.memory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.nand_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mfg_date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.build_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.config_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.emmc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.display_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.amp_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.board_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastLogsProto_CastDeviceInfo_HardwareInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nand = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nand();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mfg_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mfg_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string build_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_build_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_config();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string emmc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_emmc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_display();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_amp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string board_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_board_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastLogsProto_CastDeviceInfo_HardwareInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_color(), target);
  }

  // optional string mic = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mic(), target);
  }

  // optional string memory = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memory(), target);
  }

  // optional string nand = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nand(), target);
  }

  // optional string mfg_date = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mfg_date(), target);
  }

  // optional string build_name = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_build_name(), target);
  }

  // optional string config = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_config(), target);
  }

  // optional string emmc = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_emmc(), target);
  }

  // optional string display = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_display(), target);
  }

  // optional string amp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_amp(), target);
  }

  // optional string board_name = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_board_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  return target;
}

size_t CastLogsProto_CastDeviceInfo_HardwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color());
    }

    // optional string mic = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mic());
    }

    // optional string memory = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memory());
    }

    // optional string nand = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nand());
    }

    // optional string mfg_date = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mfg_date());
    }

    // optional string build_name = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_build_name());
    }

    // optional string config = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_config());
    }

    // optional string emmc = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_emmc());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional string display = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display());
    }

    // optional string amp = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amp());
    }

    // optional string board_name = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_board_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastLogsProto_CastDeviceInfo_HardwareInfo*>(
      &from));
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
  CastLogsProto_CastDeviceInfo_HardwareInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_color(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mic(from._internal_mic());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_memory(from._internal_memory());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_nand(from._internal_nand());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mfg_date(from._internal_mfg_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_build_name(from._internal_build_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_config(from._internal_config());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_emmc(from._internal_emmc());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_display(from._internal_display());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_amp(from._internal_amp());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_board_name(from._internal_board_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::CopyFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceInfo_HardwareInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::InternalSwap(CastLogsProto_CastDeviceInfo_HardwareInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.color_, lhs_arena,
      &other->_impl_.color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mic_, lhs_arena,
      &other->_impl_.mic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memory_, lhs_arena,
      &other->_impl_.memory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nand_, lhs_arena,
      &other->_impl_.nand_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mfg_date_, lhs_arena,
      &other->_impl_.mfg_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.build_name_, lhs_arena,
      &other->_impl_.build_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.config_, lhs_arena,
      &other->_impl_.config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.emmc_, lhs_arena,
      &other->_impl_.emmc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_, lhs_arena,
      &other->_impl_.display_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.amp_, lhs_arena,
      &other->_impl_.amp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.board_name_, lhs_arena,
      &other->_impl_.board_name_, rhs_arena
  );
}

std::string CastLogsProto_CastDeviceInfo_HardwareInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo";
}


// ===================================================================

class CastLogsProto_CastDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CastLogsProto_CastDeviceInfo>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hardware_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo& hardware_info(const CastLogsProto_CastDeviceInfo* msg);
  static void set_has_hardware_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo&
CastLogsProto_CastDeviceInfo::_Internal::hardware_info(const CastLogsProto_CastDeviceInfo* msg) {
  return *msg->_impl_.hardware_info_;
}
CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CastLogsProto.CastDeviceInfo)
}
CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo(const CastLogsProto_CastDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CastLogsProto_CastDeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hardware_revision_){}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.hardware_info_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hardware_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardware_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hardware_revision()) {
    _this->_impl_.hardware_revision_.Set(from._internal_hardware_revision(), 
      _this->GetArenaForAllocation());
  }
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manufacturer()) {
    _this->_impl_.manufacturer_.Set(from._internal_manufacturer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serial_number()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hardware_info()) {
    _this->_impl_.hardware_info_ = new ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo(*from._impl_.hardware_info_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceInfo)
}

inline void CastLogsProto_CastDeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hardware_revision_){}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.hardware_info_){nullptr}
    , decltype(_impl_.type_){0}
  };
  _impl_.hardware_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardware_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CastLogsProto_CastDeviceInfo::~CastLogsProto_CastDeviceInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastLogsProto_CastDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hardware_revision_.Destroy();
  _impl_.manufacturer_.Destroy();
  _impl_.model_.Destroy();
  _impl_.serial_number_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hardware_info_;
}

void CastLogsProto_CastDeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CastLogsProto_CastDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hardware_revision_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.hardware_info_ != nullptr);
      _impl_.hardware_info_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastLogsProto_CastDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::CastLogsProto_CastDeviceInfo_CastProductType_IsValid(val))) {
            _internal_set_type(static_cast<::metrics::CastLogsProto_CastDeviceInfo_CastProductType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string hardware_revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hardware_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string manufacturer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string serial_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastLogsProto_CastDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string hardware_revision = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hardware_revision(), target);
  }

  // optional string manufacturer = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_manufacturer(), target);
  }

  // optional string model = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model(), target);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_serial_number(), target);
  }

  // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::hardware_info(this),
        _Internal::hardware_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastDeviceInfo)
  return target;
}

size_t CastLogsProto_CastDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string hardware_revision = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hardware_revision());
    }

    // optional string manufacturer = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manufacturer());
    }

    // optional string model = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional string serial_number = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hardware_info_);
    }

    // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastDeviceInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastLogsProto_CastDeviceInfo*>(
      &from));
}

void CastLogsProto_CastDeviceInfo::MergeFrom(const CastLogsProto_CastDeviceInfo& from) {
  CastLogsProto_CastDeviceInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hardware_revision(from._internal_hardware_revision());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_manufacturer(from._internal_manufacturer());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_hardware_info()->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(
          from._internal_hardware_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastLogsProto_CastDeviceInfo::CopyFrom(const CastLogsProto_CastDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceInfo::InternalSwap(CastLogsProto_CastDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hardware_revision_, lhs_arena,
      &other->_impl_.hardware_revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manufacturer_, lhs_arena,
      &other->_impl_.manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_number_, lhs_arena,
      &other->_impl_.serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, _impl_.type_)
      + sizeof(CastLogsProto_CastDeviceInfo::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, _impl_.hardware_info_)>(
          reinterpret_cast<char*>(&_impl_.hardware_info_),
          reinterpret_cast<char*>(&other->_impl_.hardware_info_));
}

std::string CastLogsProto_CastDeviceInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceInfo";
}


// ===================================================================

class CastLogsProto_CastConnectionInfo_SenderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CastLogsProto_CastConnectionInfo_SenderInfo>()._impl_._has_bits_);
  static void set_has_sender_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sdk_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chrome_browser_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_system_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transport_connection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sender_local_ip_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}
CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo(const CastLogsProto_CastConnectionInfo_SenderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CastLogsProto_CastConnectionInfo_SenderInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.chrome_browser_version_){}
    , decltype(_impl_.system_version_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.sender_device_id_){}
    , decltype(_impl_.sdk_type_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.transport_connection_type_){}
    , decltype(_impl_.sender_local_ip_fragment_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chrome_browser_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chrome_browser_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chrome_browser_version()) {
    _this->_impl_.chrome_browser_version_.Set(from._internal_chrome_browser_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.system_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_system_version()) {
    _this->_impl_.system_version_.Set(from._internal_system_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_device_id_, &from._impl_.sender_device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sender_local_ip_fragment_) -
    reinterpret_cast<char*>(&_impl_.sender_device_id_)) + sizeof(_impl_.sender_local_ip_fragment_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}

inline void CastLogsProto_CastConnectionInfo_SenderInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.chrome_browser_version_){}
    , decltype(_impl_.system_version_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.sender_device_id_){uint64_t{0u}}
    , decltype(_impl_.sdk_type_){0}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.transport_connection_type_){0}
    , decltype(_impl_.sender_local_ip_fragment_){0}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chrome_browser_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chrome_browser_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.system_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CastLogsProto_CastConnectionInfo_SenderInfo::~CastLogsProto_CastConnectionInfo_SenderInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastLogsProto_CastConnectionInfo_SenderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.chrome_browser_version_.Destroy();
  _impl_.system_version_.Destroy();
  _impl_.model_.Destroy();
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CastLogsProto_CastConnectionInfo_SenderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.chrome_browser_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.system_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.model_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.sender_device_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.transport_connection_type_) -
        reinterpret_cast<char*>(&_impl_.sender_device_id_)) + sizeof(_impl_.transport_connection_type_));
  }
  _impl_.sender_local_ip_fragment_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastLogsProto_CastConnectionInfo_SenderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 sender_device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_sender_device_id(&has_bits);
          _impl_.sender_device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(val))) {
            _internal_set_sdk_type(static_cast<::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chrome_browser_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chrome_browser_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string system_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_system_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(val))) {
            _internal_set_transport_connection_type(static_cast<::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string model = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sender_local_ip_fragment = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_sender_local_ip_fragment(&has_bits);
          _impl_.sender_local_ip_fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastLogsProto_CastConnectionInfo_SenderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 sender_device_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_sender_device_id(), target);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sdk_type(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional string chrome_browser_version = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chrome_browser_version(), target);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_platform(), target);
  }

  // optional string system_version = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_system_version(), target);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_transport_connection_type(), target);
  }

  // optional string model = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_model(), target);
  }

  // optional int32 sender_local_ip_fragment = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_sender_local_ip_fragment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  return target;
}

size_t CastLogsProto_CastConnectionInfo_SenderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string version = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string chrome_browser_version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chrome_browser_version());
    }

    // optional string system_version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_system_version());
    }

    // optional string model = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional fixed64 sender_device_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sdk_type());
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_transport_connection_type());
    }

  }
  // optional int32 sender_local_ip_fragment = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_local_ip_fragment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastLogsProto_CastConnectionInfo_SenderInfo*>(
      &from));
}

void CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
  CastLogsProto_CastConnectionInfo_SenderInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_chrome_browser_version(from._internal_chrome_browser_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_system_version(from._internal_system_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sender_device_id_ = from._impl_.sender_device_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sdk_type_ = from._impl_.sdk_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.platform_ = from._impl_.platform_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.transport_connection_type_ = from._impl_.transport_connection_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_sender_local_ip_fragment(from._internal_sender_local_ip_fragment());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastLogsProto_CastConnectionInfo_SenderInfo::CopyFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastConnectionInfo_SenderInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::InternalSwap(CastLogsProto_CastConnectionInfo_SenderInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chrome_browser_version_, lhs_arena,
      &other->_impl_.chrome_browser_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.system_version_, lhs_arena,
      &other->_impl_.system_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, _impl_.sender_local_ip_fragment_)
      + sizeof(CastLogsProto_CastConnectionInfo_SenderInfo::_impl_.sender_local_ip_fragment_)
      - PROTOBUF_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, _impl_.sender_device_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_device_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_device_id_));
}

std::string CastLogsProto_CastConnectionInfo_SenderInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastConnectionInfo.SenderInfo";
}


// ===================================================================

class CastLogsProto_CastConnectionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CastLogsProto_CastConnectionInfo>()._impl_._has_bits_);
  static void set_has_transport_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_virtual_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo& sender_info(const CastLogsProto_CastConnectionInfo* msg);
  static void set_has_sender_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo&
CastLogsProto_CastConnectionInfo::_Internal::sender_info(const CastLogsProto_CastConnectionInfo* msg) {
  return *msg->_impl_.sender_info_;
}
CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CastLogsProto.CastConnectionInfo)
}
CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo(const CastLogsProto_CastConnectionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CastLogsProto_CastConnectionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_info_){nullptr}
    , decltype(_impl_.transport_connection_id_){}
    , decltype(_impl_.virtual_connection_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sender_info()) {
    _this->_impl_.sender_info_ = new ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo(*from._impl_.sender_info_);
  }
  ::memcpy(&_impl_.transport_connection_id_, &from._impl_.transport_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.virtual_connection_id_) -
    reinterpret_cast<char*>(&_impl_.transport_connection_id_)) + sizeof(_impl_.virtual_connection_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastConnectionInfo)
}

inline void CastLogsProto_CastConnectionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_info_){nullptr}
    , decltype(_impl_.transport_connection_id_){0u}
    , decltype(_impl_.virtual_connection_id_){0u}
  };
}

CastLogsProto_CastConnectionInfo::~CastLogsProto_CastConnectionInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastConnectionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastLogsProto_CastConnectionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sender_info_;
}

void CastLogsProto_CastConnectionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CastLogsProto_CastConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastConnectionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.sender_info_ != nullptr);
    _impl_.sender_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.transport_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.virtual_connection_id_) -
        reinterpret_cast<char*>(&_impl_.transport_connection_id_)) + sizeof(_impl_.virtual_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastLogsProto_CastConnectionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 transport_connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_transport_connection_id(&has_bits);
          _impl_.transport_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 virtual_connection_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_virtual_connection_id(&has_bits);
          _impl_.virtual_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastLogsProto_CastConnectionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastConnectionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 transport_connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_transport_connection_id(), target);
  }

  // optional fixed32 virtual_connection_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_virtual_connection_id(), target);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sender_info(this),
        _Internal::sender_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastConnectionInfo)
  return target;
}

size_t CastLogsProto_CastConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastConnectionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sender_info_);
    }

    // optional fixed32 transport_connection_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 virtual_connection_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastConnectionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastLogsProto_CastConnectionInfo*>(
      &from));
}

void CastLogsProto_CastConnectionInfo::MergeFrom(const CastLogsProto_CastConnectionInfo& from) {
  CastLogsProto_CastConnectionInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastConnectionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sender_info()->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(
          from._internal_sender_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.transport_connection_id_ = from._impl_.transport_connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.virtual_connection_id_ = from._impl_.virtual_connection_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastLogsProto_CastConnectionInfo::CopyFrom(const CastLogsProto_CastConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastConnectionInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastConnectionInfo::InternalSwap(CastLogsProto_CastConnectionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastLogsProto_CastConnectionInfo, _impl_.virtual_connection_id_)
      + sizeof(CastLogsProto_CastConnectionInfo::_impl_.virtual_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CastLogsProto_CastConnectionInfo, _impl_.sender_info_)>(
          reinterpret_cast<char*>(&_impl_.sender_info_),
          reinterpret_cast<char*>(&other->_impl_.sender_info_));
}

std::string CastLogsProto_CastConnectionInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastConnectionInfo";
}


// ===================================================================

class CastLogsProto_CastEventProto_Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CastLogsProto_CastEventProto_Metadata>()._impl_._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CastLogsProto_CastEventProto_Metadata::CastLogsProto_CastEventProto_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CastLogsProto.CastEventProto.Metadata)
}
CastLogsProto_CastEventProto_Metadata::CastLogsProto_CastEventProto_Metadata(const CastLogsProto_CastEventProto_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CastLogsProto_CastEventProto_Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_hash_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.name_hash_, &from._impl_.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.name_hash_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastEventProto.Metadata)
}

inline void CastLogsProto_CastEventProto_Metadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_hash_){uint64_t{0u}}
    , decltype(_impl_.value_){int64_t{0}}
  };
}

CastLogsProto_CastEventProto_Metadata::~CastLogsProto_CastEventProto_Metadata() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastEventProto.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastLogsProto_CastEventProto_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CastLogsProto_CastEventProto_Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CastLogsProto_CastEventProto_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastEventProto.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.name_hash_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastLogsProto_CastEventProto_Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          _impl_.name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastLogsProto_CastEventProto_Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastEventProto.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_name_hash(), target);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastEventProto.Metadata)
  return target;
}

size_t CastLogsProto_CastEventProto_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastEventProto.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 name_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastEventProto_Metadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastLogsProto_CastEventProto_Metadata*>(
      &from));
}

void CastLogsProto_CastEventProto_Metadata::MergeFrom(const CastLogsProto_CastEventProto_Metadata& from) {
  CastLogsProto_CastEventProto_Metadata* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastEventProto.Metadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.name_hash_ = from._impl_.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastLogsProto_CastEventProto_Metadata::CopyFrom(const CastLogsProto_CastEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastEventProto.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastEventProto_Metadata::IsInitialized() const {
  return true;
}

void CastLogsProto_CastEventProto_Metadata::InternalSwap(CastLogsProto_CastEventProto_Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastLogsProto_CastEventProto_Metadata, _impl_.value_)
      + sizeof(CastLogsProto_CastEventProto_Metadata::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CastLogsProto_CastEventProto_Metadata, _impl_.name_hash_)>(
          reinterpret_cast<char*>(&_impl_.name_hash_),
          reinterpret_cast<char*>(&other->_impl_.name_hash_));
}

std::string CastLogsProto_CastEventProto_Metadata::GetTypeName() const {
  return "metrics.CastLogsProto.CastEventProto.Metadata";
}


// ===================================================================

class CastLogsProto_CastEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CastLogsProto_CastEventProto>()._impl_._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_remote_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_application_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cast_receiver_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cast_mpl_version(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_transport_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_virtual_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_group_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_conversation_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_aogh_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_aogh_local_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_aogh_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_aogh_standard_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timezone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ui_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_selinux_audit_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_duo_core_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_hotword_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_launch_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_runtime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

CastLogsProto_CastEventProto::CastLogsProto_CastEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CastLogsProto.CastEventProto)
}
CastLogsProto_CastEventProto::CastLogsProto_CastEventProto(const CastLogsProto_CastEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CastLogsProto_CastEventProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.feature_vector_){from._impl_.feature_vector_}
    , decltype(_impl_.event_id_list_){from._impl_.event_id_list_}
    , decltype(_impl_.conversation_key_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.aogh_request_id_){}
    , decltype(_impl_.timezone_id_){}
    , decltype(_impl_.ui_version_){}
    , decltype(_impl_.aogh_agent_id_){}
    , decltype(_impl_.selinux_audit_detail_){}
    , decltype(_impl_.hotword_model_id_){}
    , decltype(_impl_.aogh_standard_agent_id_){}
    , decltype(_impl_.name_hash_){}
    , decltype(_impl_.time_msec_){}
    , decltype(_impl_.application_session_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.transport_connection_id_){}
    , decltype(_impl_.cast_receiver_version_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.cast_mpl_version_){}
    , decltype(_impl_.virtual_connection_id_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.group_uuid_){}
    , decltype(_impl_.aogh_local_device_id_){}
    , decltype(_impl_.remote_app_id_){}
    , decltype(_impl_.launch_from_){}
    , decltype(_impl_.duo_core_version_){}
    , decltype(_impl_.runtime_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.conversation_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversation_key()) {
    _this->_impl_.conversation_key_.Set(from._internal_conversation_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_id()) {
    _this->_impl_.event_id_.Set(from._internal_event_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aogh_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aogh_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_aogh_request_id()) {
    _this->_impl_.aogh_request_id_.Set(from._internal_aogh_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timezone_id()) {
    _this->_impl_.timezone_id_.Set(from._internal_timezone_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ui_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ui_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ui_version()) {
    _this->_impl_.ui_version_.Set(from._internal_ui_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aogh_agent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aogh_agent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_aogh_agent_id()) {
    _this->_impl_.aogh_agent_id_.Set(from._internal_aogh_agent_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selinux_audit_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selinux_audit_detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selinux_audit_detail()) {
    _this->_impl_.selinux_audit_detail_.Set(from._internal_selinux_audit_detail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hotword_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hotword_model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hotword_model_id()) {
    _this->_impl_.hotword_model_id_.Set(from._internal_hotword_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aogh_standard_agent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aogh_standard_agent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_aogh_standard_agent_id()) {
    _this->_impl_.aogh_standard_agent_id_.Set(from._internal_aogh_standard_agent_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.name_hash_, &from._impl_.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.runtime_type_) -
    reinterpret_cast<char*>(&_impl_.name_hash_)) + sizeof(_impl_.runtime_type_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastEventProto)
}

inline void CastLogsProto_CastEventProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){arena}
    , decltype(_impl_.feature_vector_){arena}
    , decltype(_impl_.event_id_list_){arena}
    , decltype(_impl_.conversation_key_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.aogh_request_id_){}
    , decltype(_impl_.timezone_id_){}
    , decltype(_impl_.ui_version_){}
    , decltype(_impl_.aogh_agent_id_){}
    , decltype(_impl_.selinux_audit_detail_){}
    , decltype(_impl_.hotword_model_id_){}
    , decltype(_impl_.aogh_standard_agent_id_){}
    , decltype(_impl_.name_hash_){uint64_t{0u}}
    , decltype(_impl_.time_msec_){int64_t{0}}
    , decltype(_impl_.application_session_id_){uint64_t{0u}}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.transport_connection_id_){0u}
    , decltype(_impl_.cast_receiver_version_){uint64_t{0u}}
    , decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.cast_mpl_version_){uint64_t{0u}}
    , decltype(_impl_.virtual_connection_id_){0u}
    , decltype(_impl_.request_id_){0u}
    , decltype(_impl_.group_uuid_){uint64_t{0u}}
    , decltype(_impl_.aogh_local_device_id_){int64_t{0}}
    , decltype(_impl_.remote_app_id_){0u}
    , decltype(_impl_.launch_from_){0}
    , decltype(_impl_.duo_core_version_){uint64_t{0u}}
    , decltype(_impl_.runtime_type_){0}
  };
  _impl_.conversation_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aogh_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aogh_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ui_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ui_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aogh_agent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aogh_agent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selinux_audit_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selinux_audit_detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hotword_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hotword_model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aogh_standard_agent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aogh_standard_agent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CastLogsProto_CastEventProto::~CastLogsProto_CastEventProto() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastLogsProto_CastEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.~RepeatedPtrField();
  _impl_.feature_vector_.~RepeatedField();
  _impl_.event_id_list_.~RepeatedPtrField();
  _impl_.conversation_key_.Destroy();
  _impl_.event_id_.Destroy();
  _impl_.aogh_request_id_.Destroy();
  _impl_.timezone_id_.Destroy();
  _impl_.ui_version_.Destroy();
  _impl_.aogh_agent_id_.Destroy();
  _impl_.selinux_audit_detail_.Destroy();
  _impl_.hotword_model_id_.Destroy();
  _impl_.aogh_standard_agent_id_.Destroy();
}

void CastLogsProto_CastEventProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CastLogsProto_CastEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.feature_vector_.Clear();
  _impl_.event_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.conversation_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.event_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.aogh_request_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.timezone_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ui_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.aogh_agent_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.selinux_audit_detail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.hotword_model_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _impl_.aogh_standard_agent_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.name_hash_)) + sizeof(_impl_.value_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.cast_mpl_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duo_core_version_) -
        reinterpret_cast<char*>(&_impl_.cast_mpl_version_)) + sizeof(_impl_.duo_core_version_));
  }
  _impl_.runtime_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastLogsProto_CastEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          _impl_.name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time_msec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_msec(&has_bits);
          _impl_.time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 application_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_application_session_id(&has_bits);
          _impl_.application_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 cast_receiver_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_cast_receiver_version(&has_bits);
          _impl_.cast_receiver_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 transport_connection_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_transport_connection_id(&has_bits);
          _impl_.transport_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 virtual_connection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_virtual_connection_id(&has_bits);
          _impl_.virtual_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 cast_mpl_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_cast_mpl_version(&has_bits);
          _impl_.cast_mpl_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 group_uuid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_group_uuid(&has_bits);
          _impl_.group_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string conversation_key = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_conversation_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 request_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string event_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float feature_vector = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_feature_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<125>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_feature_vector(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string aogh_request_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_aogh_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string timezone_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_timezone_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 aogh_local_device_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_aogh_local_device_id(&has_bits);
          _impl_.aogh_local_device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 remote_app_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_remote_app_id(&has_bits);
          _impl_.remote_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string ui_version = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_ui_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string aogh_agent_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_aogh_agent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string selinux_audit_detail = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_selinux_audit_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string event_id_list = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_event_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 duo_core_version = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_duo_core_version(&has_bits);
          _impl_.duo_core_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string hotword_model_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_hotword_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastEventProto.LaunchFrom launch_from = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::CastLogsProto_CastEventProto_LaunchFrom_IsValid(val))) {
            _internal_set_launch_from(static_cast<::metrics::CastLogsProto_CastEventProto_LaunchFrom>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastEventProto.RuntimeType runtime_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::CastLogsProto_CastEventProto_RuntimeType_IsValid(val))) {
            _internal_set_runtime_type(static_cast<::metrics::CastLogsProto_CastEventProto_RuntimeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string aogh_standard_agent_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_aogh_standard_agent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastLogsProto_CastEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_name_hash(), target);
  }

  // optional int64 time_msec = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_msec(), target);
  }

  // optional fixed32 app_id = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_app_id(), target);
  }

  // optional fixed64 application_session_id = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_application_session_id(), target);
  }

  // optional fixed64 cast_receiver_version = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_cast_receiver_version(), target);
  }

  // optional fixed32 transport_connection_id = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_transport_connection_id(), target);
  }

  // optional fixed32 virtual_connection_id = 7;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_virtual_connection_id(), target);
  }

  // optional int64 value = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_value(), target);
  }

  // optional fixed64 cast_mpl_version = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(9, this->_internal_cast_mpl_version(), target);
  }

  // optional fixed64 group_uuid = 10;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(10, this->_internal_group_uuid(), target);
  }

  // optional string conversation_key = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_conversation_key(), target);
  }

  // optional fixed32 request_id = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(12, this->_internal_request_id(), target);
  }

  // optional string event_id = 13;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_event_id(), target);
  }

  // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float feature_vector = 15;
  for (int i = 0, n = this->_internal_feature_vector_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_feature_vector(i), target);
  }

  // optional string aogh_request_id = 16;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_aogh_request_id(), target);
  }

  // optional string timezone_id = 17;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_timezone_id(), target);
  }

  // optional int64 aogh_local_device_id = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_aogh_local_device_id(), target);
  }

  // optional fixed32 remote_app_id = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(19, this->_internal_remote_app_id(), target);
  }

  // optional string ui_version = 20;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_ui_version(), target);
  }

  // optional string aogh_agent_id = 21;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_aogh_agent_id(), target);
  }

  // optional string selinux_audit_detail = 22;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_selinux_audit_detail(), target);
  }

  // repeated string event_id_list = 23;
  for (int i = 0, n = this->_internal_event_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_event_id_list(i);
    target = stream->WriteString(23, s, target);
  }

  // optional fixed64 duo_core_version = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(24, this->_internal_duo_core_version(), target);
  }

  // optional string hotword_model_id = 25;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_hotword_model_id(), target);
  }

  // optional .metrics.CastLogsProto.CastEventProto.LaunchFrom launch_from = 26;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_launch_from(), target);
  }

  // optional .metrics.CastLogsProto.CastEventProto.RuntimeType runtime_type = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_runtime_type(), target);
  }

  // optional string aogh_standard_agent_id = 28;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_aogh_standard_agent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastEventProto)
  return target;
}

size_t CastLogsProto_CastEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_impl_.metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float feature_vector = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_feature_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_feature_vector_size());
    total_size += data_size;
  }

  // repeated string event_id_list = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.event_id_list_.size());
  for (int i = 0, n = _impl_.event_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.event_id_list_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string conversation_key = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversation_key());
    }

    // optional string event_id = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_id());
    }

    // optional string aogh_request_id = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_aogh_request_id());
    }

    // optional string timezone_id = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezone_id());
    }

    // optional string ui_version = 20;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ui_version());
    }

    // optional string aogh_agent_id = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_aogh_agent_id());
    }

    // optional string selinux_audit_detail = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selinux_audit_detail());
    }

    // optional string hotword_model_id = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hotword_model_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string aogh_standard_agent_id = 28;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_aogh_standard_agent_id());
    }

    // optional fixed64 name_hash = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int64 time_msec = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_msec());
    }

    // optional fixed64 application_session_id = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional fixed32 app_id = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 transport_connection_id = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional fixed64 cast_receiver_version = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional int64 value = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 cast_mpl_version = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional fixed32 virtual_connection_id = 7;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 request_id = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional fixed64 group_uuid = 10;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional int64 aogh_local_device_id = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_aogh_local_device_id());
    }

    // optional fixed32 remote_app_id = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional .metrics.CastLogsProto.CastEventProto.LaunchFrom launch_from = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_launch_from());
    }

    // optional fixed64 duo_core_version = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  // optional .metrics.CastLogsProto.CastEventProto.RuntimeType runtime_type = 27;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_runtime_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastLogsProto_CastEventProto*>(
      &from));
}

void CastLogsProto_CastEventProto::MergeFrom(const CastLogsProto_CastEventProto& from) {
  CastLogsProto_CastEventProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastEventProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_impl_.feature_vector_.MergeFrom(from._impl_.feature_vector_);
  _this->_impl_.event_id_list_.MergeFrom(from._impl_.event_id_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_conversation_key(from._internal_conversation_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_event_id(from._internal_event_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_aogh_request_id(from._internal_aogh_request_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_timezone_id(from._internal_timezone_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_ui_version(from._internal_ui_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_aogh_agent_id(from._internal_aogh_agent_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_selinux_audit_detail(from._internal_selinux_audit_detail());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_hotword_model_id(from._internal_hotword_model_id());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_aogh_standard_agent_id(from._internal_aogh_standard_agent_id());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.name_hash_ = from._impl_.name_hash_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.time_msec_ = from._impl_.time_msec_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.application_session_id_ = from._impl_.application_session_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.transport_connection_id_ = from._impl_.transport_connection_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.cast_receiver_version_ = from._impl_.cast_receiver_version_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.cast_mpl_version_ = from._impl_.cast_mpl_version_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.virtual_connection_id_ = from._impl_.virtual_connection_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.group_uuid_ = from._impl_.group_uuid_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.aogh_local_device_id_ = from._impl_.aogh_local_device_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.remote_app_id_ = from._impl_.remote_app_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.launch_from_ = from._impl_.launch_from_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.duo_core_version_ = from._impl_.duo_core_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _this->_internal_set_runtime_type(from._internal_runtime_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastLogsProto_CastEventProto::CopyFrom(const CastLogsProto_CastEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastEventProto::IsInitialized() const {
  return true;
}

void CastLogsProto_CastEventProto::InternalSwap(CastLogsProto_CastEventProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.feature_vector_.InternalSwap(&other->_impl_.feature_vector_);
  _impl_.event_id_list_.InternalSwap(&other->_impl_.event_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_key_, lhs_arena,
      &other->_impl_.conversation_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_id_, lhs_arena,
      &other->_impl_.event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aogh_request_id_, lhs_arena,
      &other->_impl_.aogh_request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_id_, lhs_arena,
      &other->_impl_.timezone_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ui_version_, lhs_arena,
      &other->_impl_.ui_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aogh_agent_id_, lhs_arena,
      &other->_impl_.aogh_agent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selinux_audit_detail_, lhs_arena,
      &other->_impl_.selinux_audit_detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hotword_model_id_, lhs_arena,
      &other->_impl_.hotword_model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aogh_standard_agent_id_, lhs_arena,
      &other->_impl_.aogh_standard_agent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastLogsProto_CastEventProto, _impl_.runtime_type_)
      + sizeof(CastLogsProto_CastEventProto::_impl_.runtime_type_)
      - PROTOBUF_FIELD_OFFSET(CastLogsProto_CastEventProto, _impl_.name_hash_)>(
          reinterpret_cast<char*>(&_impl_.name_hash_),
          reinterpret_cast<char*>(&other->_impl_.name_hash_));
}

std::string CastLogsProto_CastEventProto::GetTypeName() const {
  return "metrics.CastLogsProto.CastEventProto";
}


// ===================================================================

class CastLogsProto_CastDeviceMutableInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CastLogsProto_CastDeviceMutableInfo>()._impl_._has_bits_);
  static void set_has_last_reboot_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_system_build_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_backdrop_app_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_release_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_netif_ip_version(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ip_dual_stack_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timezone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latest_ui_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_google_wifi_station_shmac(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_installed_manifest_platform_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_installed_manifest_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_system_bundle_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CastLogsProto.CastDeviceMutableInfo)
}
CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo(const CastLogsProto_CastDeviceMutableInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CastLogsProto_CastDeviceMutableInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.backdrop_app_device_id_){}
    , decltype(_impl_.timezone_id_){}
    , decltype(_impl_.latest_ui_version_){}
    , decltype(_impl_.google_wifi_station_shmac_){}
    , decltype(_impl_.installed_manifest_platform_version_){}
    , decltype(_impl_.system_bundle_version_){}
    , decltype(_impl_.system_build_number_){}
    , decltype(_impl_.last_reboot_type_){}
    , decltype(_impl_.release_version_){}
    , decltype(_impl_.netif_ip_version_){}
    , decltype(_impl_.ip_dual_stack_supported_){}
    , decltype(_impl_.installed_manifest_version_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.backdrop_app_device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backdrop_app_device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_backdrop_app_device_id()) {
    _this->_impl_.backdrop_app_device_id_.Set(from._internal_backdrop_app_device_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timezone_id()) {
    _this->_impl_.timezone_id_.Set(from._internal_timezone_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.latest_ui_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.latest_ui_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_latest_ui_version()) {
    _this->_impl_.latest_ui_version_.Set(from._internal_latest_ui_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.google_wifi_station_shmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.google_wifi_station_shmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_google_wifi_station_shmac()) {
    _this->_impl_.google_wifi_station_shmac_.Set(from._internal_google_wifi_station_shmac(), 
      _this->GetArenaForAllocation());
  }
  _impl_.installed_manifest_platform_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installed_manifest_platform_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_installed_manifest_platform_version()) {
    _this->_impl_.installed_manifest_platform_version_.Set(from._internal_installed_manifest_platform_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.system_bundle_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_bundle_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_system_bundle_version()) {
    _this->_impl_.system_bundle_version_.Set(from._internal_system_bundle_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.system_build_number_, &from._impl_.system_build_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.installed_manifest_version_) -
    reinterpret_cast<char*>(&_impl_.system_build_number_)) + sizeof(_impl_.installed_manifest_version_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceMutableInfo)
}

inline void CastLogsProto_CastDeviceMutableInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.backdrop_app_device_id_){}
    , decltype(_impl_.timezone_id_){}
    , decltype(_impl_.latest_ui_version_){}
    , decltype(_impl_.google_wifi_station_shmac_){}
    , decltype(_impl_.installed_manifest_platform_version_){}
    , decltype(_impl_.system_bundle_version_){}
    , decltype(_impl_.system_build_number_){uint64_t{0u}}
    , decltype(_impl_.last_reboot_type_){0}
    , decltype(_impl_.release_version_){0u}
    , decltype(_impl_.netif_ip_version_){0}
    , decltype(_impl_.ip_dual_stack_supported_){false}
    , decltype(_impl_.installed_manifest_version_){0u}
  };
  _impl_.backdrop_app_device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backdrop_app_device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.latest_ui_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.latest_ui_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.google_wifi_station_shmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.google_wifi_station_shmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.installed_manifest_platform_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installed_manifest_platform_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.system_bundle_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_bundle_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CastLogsProto_CastDeviceMutableInfo::~CastLogsProto_CastDeviceMutableInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceMutableInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastLogsProto_CastDeviceMutableInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.backdrop_app_device_id_.Destroy();
  _impl_.timezone_id_.Destroy();
  _impl_.latest_ui_version_.Destroy();
  _impl_.google_wifi_station_shmac_.Destroy();
  _impl_.installed_manifest_platform_version_.Destroy();
  _impl_.system_bundle_version_.Destroy();
}

void CastLogsProto_CastDeviceMutableInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CastLogsProto_CastDeviceMutableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.backdrop_app_device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timezone_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.latest_ui_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.google_wifi_station_shmac_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.installed_manifest_platform_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.system_bundle_version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.system_build_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_reboot_type_) -
        reinterpret_cast<char*>(&_impl_.system_build_number_)) + sizeof(_impl_.last_reboot_type_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.release_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.installed_manifest_version_) -
        reinterpret_cast<char*>(&_impl_.release_version_)) + sizeof(_impl_.installed_manifest_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastLogsProto_CastDeviceMutableInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(val))) {
            _internal_set_last_reboot_type(static_cast<::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 system_build_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_system_build_number(&has_bits);
          _impl_.system_build_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string backdrop_app_device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_backdrop_app_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 release_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_release_version(&has_bits);
          _impl_.release_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(val))) {
            _internal_set_netif_ip_version(static_cast<::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool ip_dual_stack_supported = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ip_dual_stack_supported(&has_bits);
          _impl_.ip_dual_stack_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string timezone_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_timezone_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string latest_ui_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_latest_ui_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string google_wifi_station_shmac = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_google_wifi_station_shmac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string installed_manifest_platform_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_installed_manifest_platform_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 installed_manifest_version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_installed_manifest_version(&has_bits);
          _impl_.installed_manifest_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string system_bundle_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_system_bundle_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastLogsProto_CastDeviceMutableInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_last_reboot_type(), target);
  }

  // optional fixed64 system_build_number = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_system_build_number(), target);
  }

  // optional string backdrop_app_device_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_backdrop_app_device_id(), target);
  }

  // optional fixed32 release_version = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_release_version(), target);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_netif_ip_version(), target);
  }

  // optional bool ip_dual_stack_supported = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ip_dual_stack_supported(), target);
  }

  // optional string timezone_id = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_timezone_id(), target);
  }

  // optional string latest_ui_version = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_latest_ui_version(), target);
  }

  // optional string google_wifi_station_shmac = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_google_wifi_station_shmac(), target);
  }

  // optional string installed_manifest_platform_version = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_installed_manifest_platform_version(), target);
  }

  // optional uint32 installed_manifest_version = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_installed_manifest_version(), target);
  }

  // optional string system_bundle_version = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_system_bundle_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastDeviceMutableInfo)
  return target;
}

size_t CastLogsProto_CastDeviceMutableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string backdrop_app_device_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_backdrop_app_device_id());
    }

    // optional string timezone_id = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezone_id());
    }

    // optional string latest_ui_version = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_latest_ui_version());
    }

    // optional string google_wifi_station_shmac = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_google_wifi_station_shmac());
    }

    // optional string installed_manifest_platform_version = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_installed_manifest_platform_version());
    }

    // optional string system_bundle_version = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_system_bundle_version());
    }

    // optional fixed64 system_build_number = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_last_reboot_type());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed32 release_version = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_netif_ip_version());
    }

    // optional bool ip_dual_stack_supported = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 installed_manifest_version = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_installed_manifest_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastDeviceMutableInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastLogsProto_CastDeviceMutableInfo*>(
      &from));
}

void CastLogsProto_CastDeviceMutableInfo::MergeFrom(const CastLogsProto_CastDeviceMutableInfo& from) {
  CastLogsProto_CastDeviceMutableInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_backdrop_app_device_id(from._internal_backdrop_app_device_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_timezone_id(from._internal_timezone_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_latest_ui_version(from._internal_latest_ui_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_google_wifi_station_shmac(from._internal_google_wifi_station_shmac());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_installed_manifest_platform_version(from._internal_installed_manifest_platform_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_system_bundle_version(from._internal_system_bundle_version());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.system_build_number_ = from._impl_.system_build_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_reboot_type_ = from._impl_.last_reboot_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.release_version_ = from._impl_.release_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.netif_ip_version_ = from._impl_.netif_ip_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ip_dual_stack_supported_ = from._impl_.ip_dual_stack_supported_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.installed_manifest_version_ = from._impl_.installed_manifest_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastLogsProto_CastDeviceMutableInfo::CopyFrom(const CastLogsProto_CastDeviceMutableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceMutableInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceMutableInfo::InternalSwap(CastLogsProto_CastDeviceMutableInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backdrop_app_device_id_, lhs_arena,
      &other->_impl_.backdrop_app_device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_id_, lhs_arena,
      &other->_impl_.timezone_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.latest_ui_version_, lhs_arena,
      &other->_impl_.latest_ui_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.google_wifi_station_shmac_, lhs_arena,
      &other->_impl_.google_wifi_station_shmac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.installed_manifest_platform_version_, lhs_arena,
      &other->_impl_.installed_manifest_platform_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.system_bundle_version_, lhs_arena,
      &other->_impl_.system_bundle_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, _impl_.installed_manifest_version_)
      + sizeof(CastLogsProto_CastDeviceMutableInfo::_impl_.installed_manifest_version_)
      - PROTOBUF_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, _impl_.system_build_number_)>(
          reinterpret_cast<char*>(&_impl_.system_build_number_),
          reinterpret_cast<char*>(&other->_impl_.system_build_number_));
}

std::string CastLogsProto_CastDeviceMutableInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceMutableInfo";
}


// ===================================================================

class CastLogsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CastLogsProto>()._impl_._has_bits_);
  static const ::metrics::CastLogsProto_CastDeviceInfo& cast_device_info(const CastLogsProto* msg);
  static void set_has_cast_device_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_virtual_release_track(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::metrics::CastLogsProto_CastDeviceMutableInfo& cast_device_mutable_info(const CastLogsProto* msg);
  static void set_has_cast_device_mutable_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_receiver_metrics_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ephemeral_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_source_virtual_release_track(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::metrics::CastLogsProto_CastDeviceInfo&
CastLogsProto::_Internal::cast_device_info(const CastLogsProto* msg) {
  return *msg->_impl_.cast_device_info_;
}
const ::metrics::CastLogsProto_CastDeviceMutableInfo&
CastLogsProto::_Internal::cast_device_mutable_info(const CastLogsProto* msg) {
  return *msg->_impl_.cast_device_mutable_info_;
}
CastLogsProto::CastLogsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:metrics.CastLogsProto)
}
CastLogsProto::CastLogsProto(const CastLogsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CastLogsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cast_connection_info_){from._impl_.cast_connection_info_}
    , decltype(_impl_.cast_event_){from._impl_.cast_event_}
    , decltype(_impl_.cast_device_info_){nullptr}
    , decltype(_impl_.cast_device_mutable_info_){nullptr}
    , decltype(_impl_.receiver_metrics_id_){}
    , decltype(_impl_.virtual_release_track_){}
    , decltype(_impl_.source_virtual_release_track_){}
    , decltype(_impl_.ephemeral_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_cast_device_info()) {
    _this->_impl_.cast_device_info_ = new ::metrics::CastLogsProto_CastDeviceInfo(*from._impl_.cast_device_info_);
  }
  if (from._internal_has_cast_device_mutable_info()) {
    _this->_impl_.cast_device_mutable_info_ = new ::metrics::CastLogsProto_CastDeviceMutableInfo(*from._impl_.cast_device_mutable_info_);
  }
  ::memcpy(&_impl_.receiver_metrics_id_, &from._impl_.receiver_metrics_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ephemeral_id_) -
    reinterpret_cast<char*>(&_impl_.receiver_metrics_id_)) + sizeof(_impl_.ephemeral_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto)
}

inline void CastLogsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cast_connection_info_){arena}
    , decltype(_impl_.cast_event_){arena}
    , decltype(_impl_.cast_device_info_){nullptr}
    , decltype(_impl_.cast_device_mutable_info_){nullptr}
    , decltype(_impl_.receiver_metrics_id_){uint64_t{0u}}
    , decltype(_impl_.virtual_release_track_){0u}
    , decltype(_impl_.source_virtual_release_track_){0u}
    , decltype(_impl_.ephemeral_id_){uint64_t{0u}}
  };
}

CastLogsProto::~CastLogsProto() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CastLogsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cast_connection_info_.~RepeatedPtrField();
  _impl_.cast_event_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cast_device_info_;
  if (this != internal_default_instance()) delete _impl_.cast_device_mutable_info_;
}

void CastLogsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CastLogsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cast_connection_info_.Clear();
  _impl_.cast_event_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cast_device_info_ != nullptr);
      _impl_.cast_device_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cast_device_mutable_info_ != nullptr);
      _impl_.cast_device_mutable_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.receiver_metrics_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ephemeral_id_) -
        reinterpret_cast<char*>(&_impl_.receiver_metrics_id_)) + sizeof(_impl_.ephemeral_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastLogsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cast_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cast_connection_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cast_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 virtual_release_track = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_virtual_release_track(&has_bits);
          _impl_.virtual_release_track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cast_device_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 receiver_metrics_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_receiver_metrics_id(&has_bits);
          _impl_.receiver_metrics_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ephemeral_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ephemeral_id(&has_bits);
          _impl_.ephemeral_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 source_virtual_release_track = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_source_virtual_release_track(&has_bits);
          _impl_.source_virtual_release_track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CastLogsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cast_device_info(this),
        _Internal::cast_device_info(this).GetCachedSize(), target, stream);
  }

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cast_connection_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_cast_connection_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cast_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_cast_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed32 virtual_release_track = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_virtual_release_track(), target);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cast_device_mutable_info(this),
        _Internal::cast_device_mutable_info(this).GetCachedSize(), target, stream);
  }

  // optional fixed64 receiver_metrics_id = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_receiver_metrics_id(), target);
  }

  // optional uint64 ephemeral_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_ephemeral_id(), target);
  }

  // optional fixed32 source_virtual_release_track = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_source_virtual_release_track(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto)
  return target;
}

size_t CastLogsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  total_size += 1UL * this->_internal_cast_connection_info_size();
  for (const auto& msg : this->_impl_.cast_connection_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  total_size += 1UL * this->_internal_cast_event_size();
  for (const auto& msg : this->_impl_.cast_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cast_device_info_);
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cast_device_mutable_info_);
    }

    // optional fixed64 receiver_metrics_id = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 virtual_release_track = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 source_virtual_release_track = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint64 ephemeral_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ephemeral_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CastLogsProto*>(
      &from));
}

void CastLogsProto::MergeFrom(const CastLogsProto& from) {
  CastLogsProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cast_connection_info_.MergeFrom(from._impl_.cast_connection_info_);
  _this->_impl_.cast_event_.MergeFrom(from._impl_.cast_event_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cast_device_info()->::metrics::CastLogsProto_CastDeviceInfo::MergeFrom(
          from._internal_cast_device_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cast_device_mutable_info()->::metrics::CastLogsProto_CastDeviceMutableInfo::MergeFrom(
          from._internal_cast_device_mutable_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.receiver_metrics_id_ = from._impl_.receiver_metrics_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.virtual_release_track_ = from._impl_.virtual_release_track_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_virtual_release_track_ = from._impl_.source_virtual_release_track_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ephemeral_id_ = from._impl_.ephemeral_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CastLogsProto::CopyFrom(const CastLogsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto::IsInitialized() const {
  return true;
}

void CastLogsProto::InternalSwap(CastLogsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cast_connection_info_.InternalSwap(&other->_impl_.cast_connection_info_);
  _impl_.cast_event_.InternalSwap(&other->_impl_.cast_event_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CastLogsProto, _impl_.ephemeral_id_)
      + sizeof(CastLogsProto::_impl_.ephemeral_id_)
      - PROTOBUF_FIELD_OFFSET(CastLogsProto, _impl_.cast_device_info_)>(
          reinterpret_cast<char*>(&_impl_.cast_device_info_),
          reinterpret_cast<char*>(&other->_impl_.cast_device_info_));
}

std::string CastLogsProto::GetTypeName() const {
  return "metrics.CastLogsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo*
Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastLogsProto_CastDeviceInfo*
Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastLogsProto_CastDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo*
Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastLogsProto_CastConnectionInfo*
Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastConnectionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastLogsProto_CastConnectionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastLogsProto_CastEventProto_Metadata*
Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastEventProto_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastLogsProto_CastEventProto_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastLogsProto_CastEventProto*
Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastLogsProto_CastEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastLogsProto_CastDeviceMutableInfo*
Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastDeviceMutableInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastLogsProto_CastDeviceMutableInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastLogsProto*
Arena::CreateMaybeMessage< ::metrics::CastLogsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::CastLogsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
