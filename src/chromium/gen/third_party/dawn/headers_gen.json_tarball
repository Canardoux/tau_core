{"include/dawn/webgpu.h": "// BSD 3-Clause License\n//\n// Copyright (c) 2019, \"WebGPU native\" developers\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice, this\n//    list of conditions and the following disclaimer.\n//\n// 2. Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n// 3. Neither the name of the copyright holder nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#ifdef __EMSCRIPTEN__\n#error \"Do not include this header. Emscripten already provides headers needed for WebGPU.\"\n#endif\n\n#ifndef WEBGPU_H_\n#define WEBGPU_H_\n\n#define WGPU_BREAKING_CHANGE_STRING_VIEW_LABELS\n#define WGPU_BREAKING_CHANGE_STRING_VIEW_OUTPUT_STRUCTS\n#define WGPU_BREAKING_CHANGE_STRING_VIEW_CALLBACKS\n\n#if defined(WGPU_SHARED_LIBRARY)\n#    if defined(_WIN32)\n#        if defined(WGPU_IMPLEMENTATION)\n#            define WGPU_EXPORT __declspec(dllexport)\n#        else\n#            define WGPU_EXPORT __declspec(dllimport)\n#        endif\n#    else  // defined(_WIN32)\n#        if defined(WGPU_IMPLEMENTATION)\n#            define WGPU_EXPORT __attribute__((visibility(\"default\")))\n#        else\n#            define WGPU_EXPORT\n#        endif\n#    endif  // defined(_WIN32)\n#else       // defined(WGPU_SHARED_LIBRARY)\n#    define WGPU_EXPORT\n#endif  // defined(WGPU_SHARED_LIBRARY)\n\n#if !defined(WGPU_OBJECT_ATTRIBUTE)\n#define WGPU_OBJECT_ATTRIBUTE\n#endif\n#if !defined(WGPU_ENUM_ATTRIBUTE)\n#define WGPU_ENUM_ATTRIBUTE\n#endif\n#if !defined(WGPU_STRUCTURE_ATTRIBUTE)\n#define WGPU_STRUCTURE_ATTRIBUTE\n#endif\n#if !defined(WGPU_FUNCTION_ATTRIBUTE)\n#define WGPU_FUNCTION_ATTRIBUTE\n#endif\n#if !defined(WGPU_NULLABLE)\n#define WGPU_NULLABLE\n#endif\n\n#define WGPU_BREAKING_CHANGE_DROP_DESCRIPTOR\n\n#include <stdint.h>\n#include <stddef.h>\n\n#if defined(__cplusplus)\n#  if __cplusplus >= 201103L\n#    define WGPU_MAKE_INIT_STRUCT(type, value) (type value)\n#  else\n#    define WGPU_MAKE_INIT_STRUCT(type, value) value\n#  endif\n#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n#  define WGPU_MAKE_INIT_STRUCT(type, value) ((type) value)\n#else\n#  define WGPU_MAKE_INIT_STRUCT(type, value) value\n#endif\n\n#define WGPU_ARRAY_LAYER_COUNT_UNDEFINED UINT32_MAX\n#define WGPU_COPY_STRIDE_UNDEFINED UINT32_MAX\n#define WGPU_DEPTH_SLICE_UNDEFINED UINT32_MAX\n#define WGPU_LIMIT_U32_UNDEFINED UINT32_MAX\n#define WGPU_LIMIT_U64_UNDEFINED UINT64_MAX\n#define WGPU_MIP_LEVEL_COUNT_UNDEFINED UINT32_MAX\n#define WGPU_QUERY_SET_INDEX_UNDEFINED UINT32_MAX\n#define WGPU_STRLEN SIZE_MAX\n#define WGPU_WHOLE_MAP_SIZE SIZE_MAX\n#define WGPU_WHOLE_SIZE UINT64_MAX\n\ntypedef uint64_t WGPUFlags;\ntypedef uint32_t WGPUBool;\n\ntypedef struct WGPUAdapterImpl* WGPUAdapter WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUBindGroupImpl* WGPUBindGroup WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUBindGroupLayoutImpl* WGPUBindGroupLayout WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUBufferImpl* WGPUBuffer WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUCommandBufferImpl* WGPUCommandBuffer WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUCommandEncoderImpl* WGPUCommandEncoder WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUComputePassEncoderImpl* WGPUComputePassEncoder WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUComputePipelineImpl* WGPUComputePipeline WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUDeviceImpl* WGPUDevice WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUExternalTextureImpl* WGPUExternalTexture WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUInstanceImpl* WGPUInstance WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUPipelineLayoutImpl* WGPUPipelineLayout WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUQuerySetImpl* WGPUQuerySet WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUQueueImpl* WGPUQueue WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPURenderBundleImpl* WGPURenderBundle WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPURenderBundleEncoderImpl* WGPURenderBundleEncoder WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPURenderPassEncoderImpl* WGPURenderPassEncoder WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPURenderPipelineImpl* WGPURenderPipeline WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUSamplerImpl* WGPUSampler WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUShaderModuleImpl* WGPUShaderModule WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUSharedBufferMemoryImpl* WGPUSharedBufferMemory WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUSharedFenceImpl* WGPUSharedFence WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUSharedTextureMemoryImpl* WGPUSharedTextureMemory WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUSurfaceImpl* WGPUSurface WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUTextureImpl* WGPUTexture WGPU_OBJECT_ATTRIBUTE;\ntypedef struct WGPUTextureViewImpl* WGPUTextureView WGPU_OBJECT_ATTRIBUTE;\n\n// Structure forward declarations\nstruct WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER;\nstruct WGPUAdapterPropertiesD3D;\nstruct WGPUAdapterPropertiesSubgroups;\nstruct WGPUAdapterPropertiesVk;\nstruct WGPUBindGroupEntry;\nstruct WGPUBlendComponent;\nstruct WGPUBufferBindingLayout;\nstruct WGPUBufferHostMappedPointer;\nstruct WGPUBufferMapCallbackInfo;\nstruct WGPUColor;\nstruct WGPUColorTargetStateExpandResolveTextureDawn;\nstruct WGPUCompilationInfoCallbackInfo;\nstruct WGPUComputePassTimestampWrites;\nstruct WGPUCopyTextureForBrowserOptions;\nstruct WGPUCreateComputePipelineAsyncCallbackInfo;\nstruct WGPUCreateRenderPipelineAsyncCallbackInfo;\nstruct WGPUDawnWGSLBlocklist;\nstruct WGPUDawnAdapterPropertiesPowerPreference;\nstruct WGPUDawnBufferDescriptorErrorInfoFromWireClient;\nstruct WGPUDawnEncoderInternalUsageDescriptor;\nstruct WGPUDawnExperimentalImmediateDataLimits;\nstruct WGPUDawnExperimentalSubgroupLimits;\nstruct WGPUDawnRenderPassColorAttachmentRenderToSingleSampled;\nstruct WGPUDawnShaderModuleSPIRVOptionsDescriptor;\nstruct WGPUDawnTexelCopyBufferRowAlignmentLimits;\nstruct WGPUDawnTextureInternalUsageDescriptor;\nstruct WGPUDawnTogglesDescriptor;\nstruct WGPUDawnWireWGSLControl;\nstruct WGPUDeviceLostCallbackInfo;\nstruct WGPUDrmFormatProperties;\nstruct WGPUExtent2D;\nstruct WGPUExtent3D;\nstruct WGPUExternalTextureBindingEntry;\nstruct WGPUExternalTextureBindingLayout;\nstruct WGPUFormatCapabilities;\nstruct WGPUFuture;\nstruct WGPUInstanceFeatures;\nstruct WGPULimits;\nstruct WGPUMemoryHeapInfo;\nstruct WGPUMultisampleState;\nstruct WGPUOrigin2D;\nstruct WGPUOrigin3D;\nstruct WGPUPipelineLayoutStorageAttachment;\nstruct WGPUPopErrorScopeCallbackInfo;\nstruct WGPUPrimitiveState;\nstruct WGPUQueueWorkDoneCallbackInfo;\nstruct WGPURenderPassDepthStencilAttachment;\nstruct WGPURenderPassDescriptorExpandResolveRect;\nstruct WGPURenderPassMaxDrawCount;\nstruct WGPURenderPassTimestampWrites;\nstruct WGPURequestAdapterCallbackInfo;\nstruct WGPURequestAdapterOptions;\nstruct WGPURequestDeviceCallbackInfo;\nstruct WGPUSamplerBindingLayout;\nstruct WGPUShaderModuleCompilationOptions;\nstruct WGPUShaderSourceSPIRV;\nstruct WGPUSharedBufferMemoryBeginAccessDescriptor;\nstruct WGPUSharedBufferMemoryEndAccessState;\nstruct WGPUSharedBufferMemoryProperties;\nstruct WGPUSharedFenceDXGISharedHandleDescriptor;\nstruct WGPUSharedFenceDXGISharedHandleExportInfo;\nstruct WGPUSharedFenceMTLSharedEventDescriptor;\nstruct WGPUSharedFenceMTLSharedEventExportInfo;\nstruct WGPUSharedFenceExportInfo;\nstruct WGPUSharedFenceSyncFDDescriptor;\nstruct WGPUSharedFenceSyncFDExportInfo;\nstruct WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor;\nstruct WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo;\nstruct WGPUSharedFenceVkSemaphoreZirconHandleDescriptor;\nstruct WGPUSharedFenceVkSemaphoreZirconHandleExportInfo;\nstruct WGPUSharedTextureMemoryD3DSwapchainBeginState;\nstruct WGPUSharedTextureMemoryDXGISharedHandleDescriptor;\nstruct WGPUSharedTextureMemoryEGLImageDescriptor;\nstruct WGPUSharedTextureMemoryIOSurfaceDescriptor;\nstruct WGPUSharedTextureMemoryAHardwareBufferDescriptor;\nstruct WGPUSharedTextureMemoryBeginAccessDescriptor;\nstruct WGPUSharedTextureMemoryDmaBufPlane;\nstruct WGPUSharedTextureMemoryEndAccessState;\nstruct WGPUSharedTextureMemoryOpaqueFDDescriptor;\nstruct WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor;\nstruct WGPUSharedTextureMemoryVkImageLayoutBeginState;\nstruct WGPUSharedTextureMemoryVkImageLayoutEndState;\nstruct WGPUSharedTextureMemoryZirconHandleDescriptor;\nstruct WGPUStaticSamplerBindingLayout;\nstruct WGPUStencilFaceState;\nstruct WGPUStorageTextureBindingLayout;\nstruct WGPUStringView;\nstruct WGPUSupportedFeatures;\nstruct WGPUSurfaceCapabilities;\nstruct WGPUSurfaceConfiguration;\nstruct WGPUSurfaceDescriptorFromWindowsCoreWindow;\nstruct WGPUSurfaceDescriptorFromWindowsSwapChainPanel;\nstruct WGPUSurfaceSourceXCBWindow;\nstruct WGPUSurfaceSourceAndroidNativeWindow;\nstruct WGPUSurfaceSourceMetalLayer;\nstruct WGPUSurfaceSourceWaylandSurface;\nstruct WGPUSurfaceSourceWindowsHWND;\nstruct WGPUSurfaceSourceXlibWindow;\nstruct WGPUSurfaceTexture;\nstruct WGPUTextureBindingLayout;\nstruct WGPUTextureBindingViewDimensionDescriptor;\nstruct WGPUTextureDataLayout;\nstruct WGPUUncapturedErrorCallbackInfo;\nstruct WGPUVertexAttribute;\nstruct WGPUYCbCrVkDescriptor;\nstruct WGPUAHardwareBufferProperties;\nstruct WGPUAdapterInfo;\nstruct WGPUAdapterPropertiesMemoryHeaps;\nstruct WGPUBindGroupDescriptor;\nstruct WGPUBindGroupLayoutEntry;\nstruct WGPUBlendState;\nstruct WGPUBufferDescriptor;\nstruct WGPUCommandBufferDescriptor;\nstruct WGPUCommandEncoderDescriptor;\nstruct WGPUCompilationMessage;\nstruct WGPUComputePassDescriptor;\nstruct WGPUConstantEntry;\nstruct WGPUDawnCacheDeviceDescriptor;\nstruct WGPUDepthStencilState;\nstruct WGPUDrmFormatCapabilities;\nstruct WGPUExternalTextureDescriptor;\nstruct WGPUFutureWaitInfo;\nstruct WGPUImageCopyBuffer;\nstruct WGPUImageCopyExternalTexture;\nstruct WGPUImageCopyTexture;\nstruct WGPUInstanceDescriptor;\nstruct WGPUPipelineLayoutDescriptor;\nstruct WGPUPipelineLayoutPixelLocalStorage;\nstruct WGPUQuerySetDescriptor;\nstruct WGPUQueueDescriptor;\nstruct WGPURenderBundleDescriptor;\nstruct WGPURenderBundleEncoderDescriptor;\nstruct WGPURenderPassColorAttachment;\nstruct WGPURenderPassStorageAttachment;\nstruct WGPURequiredLimits;\nstruct WGPUSamplerDescriptor;\nstruct WGPUShaderModuleDescriptor;\nstruct WGPUShaderSourceWGSL;\nstruct WGPUSharedBufferMemoryDescriptor;\nstruct WGPUSharedFenceDescriptor;\nstruct WGPUSharedTextureMemoryAHardwareBufferProperties;\nstruct WGPUSharedTextureMemoryDescriptor;\nstruct WGPUSharedTextureMemoryDmaBufDescriptor;\nstruct WGPUSharedTextureMemoryProperties;\nstruct WGPUSupportedLimits;\nstruct WGPUSurfaceDescriptor;\nstruct WGPUSurfaceSourceCanvasHTMLSelector_Emscripten;\nstruct WGPUTextureDescriptor;\nstruct WGPUTextureViewDescriptor;\nstruct WGPUVertexBufferLayout;\nstruct WGPUBindGroupLayoutDescriptor;\nstruct WGPUColorTargetState;\nstruct WGPUCompilationInfo;\nstruct WGPUComputeState;\nstruct WGPUDeviceDescriptor;\nstruct WGPURenderPassDescriptor;\nstruct WGPURenderPassPixelLocalStorage;\nstruct WGPUVertexState;\nstruct WGPUComputePipelineDescriptor;\nstruct WGPUFragmentState;\nstruct WGPURenderPipelineDescriptor;\n\ntypedef enum WGPUWGSLFeatureName {\n    WGPUWGSLFeatureName_ReadonlyAndReadwriteStorageTextures = 0x00000001,\n    WGPUWGSLFeatureName_Packed4x8IntegerDotProduct = 0x00000002,\n    WGPUWGSLFeatureName_UnrestrictedPointerParameters = 0x00000003,\n    WGPUWGSLFeatureName_PointerCompositeAccess = 0x00000004,\n    WGPUWGSLFeatureName_ChromiumTestingUnimplemented = 0x00050000,\n    WGPUWGSLFeatureName_ChromiumTestingUnsafeExperimental = 0x00050001,\n    WGPUWGSLFeatureName_ChromiumTestingExperimental = 0x00050002,\n    WGPUWGSLFeatureName_ChromiumTestingShippedWithKillswitch = 0x00050003,\n    WGPUWGSLFeatureName_ChromiumTestingShipped = 0x00050004,\n    WGPUWGSLFeatureName_Force32 = 0x7FFFFFFF\n} WGPUWGSLFeatureName WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUAdapterType {\n    WGPUAdapterType_DiscreteGPU = 0x00000001,\n    WGPUAdapterType_IntegratedGPU = 0x00000002,\n    WGPUAdapterType_CPU = 0x00000003,\n    WGPUAdapterType_Unknown = 0x00000004,\n    WGPUAdapterType_Force32 = 0x7FFFFFFF\n} WGPUAdapterType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUAddressMode {\n    WGPUAddressMode_Undefined = 0x00000000,\n    WGPUAddressMode_ClampToEdge = 0x00000001,\n    WGPUAddressMode_Repeat = 0x00000002,\n    WGPUAddressMode_MirrorRepeat = 0x00000003,\n    WGPUAddressMode_Force32 = 0x7FFFFFFF\n} WGPUAddressMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUAlphaMode {\n    WGPUAlphaMode_Opaque = 0x00000001,\n    WGPUAlphaMode_Premultiplied = 0x00000002,\n    WGPUAlphaMode_Unpremultiplied = 0x00000003,\n    WGPUAlphaMode_Force32 = 0x7FFFFFFF\n} WGPUAlphaMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUBackendType {\n    WGPUBackendType_Undefined = 0x00000000,\n    WGPUBackendType_Null = 0x00000001,\n    WGPUBackendType_WebGPU = 0x00000002,\n    WGPUBackendType_D3D11 = 0x00000003,\n    WGPUBackendType_D3D12 = 0x00000004,\n    WGPUBackendType_Metal = 0x00000005,\n    WGPUBackendType_Vulkan = 0x00000006,\n    WGPUBackendType_OpenGL = 0x00000007,\n    WGPUBackendType_OpenGLES = 0x00000008,\n    WGPUBackendType_Force32 = 0x7FFFFFFF\n} WGPUBackendType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUBlendFactor {\n    WGPUBlendFactor_Undefined = 0x00000000,\n    WGPUBlendFactor_Zero = 0x00000001,\n    WGPUBlendFactor_One = 0x00000002,\n    WGPUBlendFactor_Src = 0x00000003,\n    WGPUBlendFactor_OneMinusSrc = 0x00000004,\n    WGPUBlendFactor_SrcAlpha = 0x00000005,\n    WGPUBlendFactor_OneMinusSrcAlpha = 0x00000006,\n    WGPUBlendFactor_Dst = 0x00000007,\n    WGPUBlendFactor_OneMinusDst = 0x00000008,\n    WGPUBlendFactor_DstAlpha = 0x00000009,\n    WGPUBlendFactor_OneMinusDstAlpha = 0x0000000A,\n    WGPUBlendFactor_SrcAlphaSaturated = 0x0000000B,\n    WGPUBlendFactor_Constant = 0x0000000C,\n    WGPUBlendFactor_OneMinusConstant = 0x0000000D,\n    WGPUBlendFactor_Src1 = 0x0000000E,\n    WGPUBlendFactor_OneMinusSrc1 = 0x0000000F,\n    WGPUBlendFactor_Src1Alpha = 0x00000010,\n    WGPUBlendFactor_OneMinusSrc1Alpha = 0x00000011,\n    WGPUBlendFactor_Force32 = 0x7FFFFFFF\n} WGPUBlendFactor WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUBlendOperation {\n    WGPUBlendOperation_Undefined = 0x00000000,\n    WGPUBlendOperation_Add = 0x00000001,\n    WGPUBlendOperation_Subtract = 0x00000002,\n    WGPUBlendOperation_ReverseSubtract = 0x00000003,\n    WGPUBlendOperation_Min = 0x00000004,\n    WGPUBlendOperation_Max = 0x00000005,\n    WGPUBlendOperation_Force32 = 0x7FFFFFFF\n} WGPUBlendOperation WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUBufferBindingType {\n    WGPUBufferBindingType_BindingNotUsed = 0x00000000,\n    WGPUBufferBindingType_Uniform = 0x00000001,\n    WGPUBufferBindingType_Storage = 0x00000002,\n    WGPUBufferBindingType_ReadOnlyStorage = 0x00000003,\n    WGPUBufferBindingType_Force32 = 0x7FFFFFFF\n} WGPUBufferBindingType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUBufferMapAsyncStatus {\n    WGPUBufferMapAsyncStatus_Success = 0x00000001,\n    WGPUBufferMapAsyncStatus_InstanceDropped = 0x00000002,\n    WGPUBufferMapAsyncStatus_ValidationError = 0x00000003,\n    WGPUBufferMapAsyncStatus_Unknown = 0x00000004,\n    WGPUBufferMapAsyncStatus_DeviceLost = 0x00000005,\n    WGPUBufferMapAsyncStatus_DestroyedBeforeCallback = 0x00000006,\n    WGPUBufferMapAsyncStatus_UnmappedBeforeCallback = 0x00000007,\n    WGPUBufferMapAsyncStatus_MappingAlreadyPending = 0x00000008,\n    WGPUBufferMapAsyncStatus_OffsetOutOfRange = 0x00000009,\n    WGPUBufferMapAsyncStatus_SizeOutOfRange = 0x0000000A,\n    WGPUBufferMapAsyncStatus_Force32 = 0x7FFFFFFF\n} WGPUBufferMapAsyncStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUBufferMapState {\n    WGPUBufferMapState_Unmapped = 0x00000001,\n    WGPUBufferMapState_Pending = 0x00000002,\n    WGPUBufferMapState_Mapped = 0x00000003,\n    WGPUBufferMapState_Force32 = 0x7FFFFFFF\n} WGPUBufferMapState WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUCallbackMode {\n    WGPUCallbackMode_WaitAnyOnly = 0x00000001,\n    WGPUCallbackMode_AllowProcessEvents = 0x00000002,\n    WGPUCallbackMode_AllowSpontaneous = 0x00000003,\n    WGPUCallbackMode_Force32 = 0x7FFFFFFF\n} WGPUCallbackMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUCompareFunction {\n    WGPUCompareFunction_Undefined = 0x00000000,\n    WGPUCompareFunction_Never = 0x00000001,\n    WGPUCompareFunction_Less = 0x00000002,\n    WGPUCompareFunction_Equal = 0x00000003,\n    WGPUCompareFunction_LessEqual = 0x00000004,\n    WGPUCompareFunction_Greater = 0x00000005,\n    WGPUCompareFunction_NotEqual = 0x00000006,\n    WGPUCompareFunction_GreaterEqual = 0x00000007,\n    WGPUCompareFunction_Always = 0x00000008,\n    WGPUCompareFunction_Force32 = 0x7FFFFFFF\n} WGPUCompareFunction WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUCompilationInfoRequestStatus {\n    WGPUCompilationInfoRequestStatus_Success = 0x00000001,\n    WGPUCompilationInfoRequestStatus_InstanceDropped = 0x00000002,\n    WGPUCompilationInfoRequestStatus_Error = 0x00000003,\n    WGPUCompilationInfoRequestStatus_DeviceLost = 0x00000004,\n    WGPUCompilationInfoRequestStatus_Unknown = 0x00000005,\n    WGPUCompilationInfoRequestStatus_Force32 = 0x7FFFFFFF\n} WGPUCompilationInfoRequestStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUCompilationMessageType {\n    WGPUCompilationMessageType_Error = 0x00000001,\n    WGPUCompilationMessageType_Warning = 0x00000002,\n    WGPUCompilationMessageType_Info = 0x00000003,\n    WGPUCompilationMessageType_Force32 = 0x7FFFFFFF\n} WGPUCompilationMessageType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUCompositeAlphaMode {\n    WGPUCompositeAlphaMode_Auto = 0x00000000,\n    WGPUCompositeAlphaMode_Opaque = 0x00000001,\n    WGPUCompositeAlphaMode_Premultiplied = 0x00000002,\n    WGPUCompositeAlphaMode_Unpremultiplied = 0x00000003,\n    WGPUCompositeAlphaMode_Inherit = 0x00000004,\n    WGPUCompositeAlphaMode_Force32 = 0x7FFFFFFF\n} WGPUCompositeAlphaMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUCreatePipelineAsyncStatus {\n    WGPUCreatePipelineAsyncStatus_Success = 0x00000001,\n    WGPUCreatePipelineAsyncStatus_InstanceDropped = 0x00000002,\n    WGPUCreatePipelineAsyncStatus_ValidationError = 0x00000003,\n    WGPUCreatePipelineAsyncStatus_InternalError = 0x00000004,\n    WGPUCreatePipelineAsyncStatus_DeviceLost = 0x00000005,\n    WGPUCreatePipelineAsyncStatus_DeviceDestroyed = 0x00000006,\n    WGPUCreatePipelineAsyncStatus_Unknown = 0x00000007,\n    WGPUCreatePipelineAsyncStatus_Force32 = 0x7FFFFFFF\n} WGPUCreatePipelineAsyncStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUCullMode {\n    WGPUCullMode_Undefined = 0x00000000,\n    WGPUCullMode_None = 0x00000001,\n    WGPUCullMode_Front = 0x00000002,\n    WGPUCullMode_Back = 0x00000003,\n    WGPUCullMode_Force32 = 0x7FFFFFFF\n} WGPUCullMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUDeviceLostReason {\n    WGPUDeviceLostReason_Unknown = 0x00000001,\n    WGPUDeviceLostReason_Destroyed = 0x00000002,\n    WGPUDeviceLostReason_InstanceDropped = 0x00000003,\n    WGPUDeviceLostReason_FailedCreation = 0x00000004,\n    WGPUDeviceLostReason_Force32 = 0x7FFFFFFF\n} WGPUDeviceLostReason WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUErrorFilter {\n    WGPUErrorFilter_Validation = 0x00000001,\n    WGPUErrorFilter_OutOfMemory = 0x00000002,\n    WGPUErrorFilter_Internal = 0x00000003,\n    WGPUErrorFilter_Force32 = 0x7FFFFFFF\n} WGPUErrorFilter WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUErrorType {\n    WGPUErrorType_NoError = 0x00000001,\n    WGPUErrorType_Validation = 0x00000002,\n    WGPUErrorType_OutOfMemory = 0x00000003,\n    WGPUErrorType_Internal = 0x00000004,\n    WGPUErrorType_Unknown = 0x00000005,\n    WGPUErrorType_DeviceLost = 0x00000006,\n    WGPUErrorType_Force32 = 0x7FFFFFFF\n} WGPUErrorType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUExternalTextureRotation {\n    WGPUExternalTextureRotation_Rotate0Degrees = 0x00000001,\n    WGPUExternalTextureRotation_Rotate90Degrees = 0x00000002,\n    WGPUExternalTextureRotation_Rotate180Degrees = 0x00000003,\n    WGPUExternalTextureRotation_Rotate270Degrees = 0x00000004,\n    WGPUExternalTextureRotation_Force32 = 0x7FFFFFFF\n} WGPUExternalTextureRotation WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUFeatureName {\n    WGPUFeatureName_DepthClipControl = 0x00000001,\n    WGPUFeatureName_Depth32FloatStencil8 = 0x00000002,\n    WGPUFeatureName_TimestampQuery = 0x00000003,\n    WGPUFeatureName_TextureCompressionBC = 0x00000004,\n    WGPUFeatureName_TextureCompressionETC2 = 0x00000005,\n    WGPUFeatureName_TextureCompressionASTC = 0x00000006,\n    WGPUFeatureName_IndirectFirstInstance = 0x00000007,\n    WGPUFeatureName_ShaderF16 = 0x00000008,\n    WGPUFeatureName_RG11B10UfloatRenderable = 0x00000009,\n    WGPUFeatureName_BGRA8UnormStorage = 0x0000000A,\n    WGPUFeatureName_Float32Filterable = 0x0000000B,\n    WGPUFeatureName_Float32Blendable = 0x0000000C,\n    WGPUFeatureName_Subgroups = 0x0000000D,\n    WGPUFeatureName_SubgroupsF16 = 0x0000000E,\n    WGPUFeatureName_DawnInternalUsages = 0x00050000,\n    WGPUFeatureName_DawnMultiPlanarFormats = 0x00050001,\n    WGPUFeatureName_DawnNative = 0x00050002,\n    WGPUFeatureName_ChromiumExperimentalTimestampQueryInsidePasses = 0x00050003,\n    WGPUFeatureName_ImplicitDeviceSynchronization = 0x00050004,\n    WGPUFeatureName_ChromiumExperimentalImmediateData = 0x00050005,\n    WGPUFeatureName_TransientAttachments = 0x00050006,\n    WGPUFeatureName_MSAARenderToSingleSampled = 0x00050007,\n    WGPUFeatureName_DualSourceBlending = 0x00050008,\n    WGPUFeatureName_D3D11MultithreadProtected = 0x00050009,\n    WGPUFeatureName_ANGLETextureSharing = 0x0005000A,\n    WGPUFeatureName_PixelLocalStorageCoherent = 0x0005000B,\n    WGPUFeatureName_PixelLocalStorageNonCoherent = 0x0005000C,\n    WGPUFeatureName_Unorm16TextureFormats = 0x0005000D,\n    WGPUFeatureName_Snorm16TextureFormats = 0x0005000E,\n    WGPUFeatureName_MultiPlanarFormatExtendedUsages = 0x0005000F,\n    WGPUFeatureName_MultiPlanarFormatP010 = 0x00050010,\n    WGPUFeatureName_HostMappedPointer = 0x00050011,\n    WGPUFeatureName_MultiPlanarRenderTargets = 0x00050012,\n    WGPUFeatureName_MultiPlanarFormatNv12a = 0x00050013,\n    WGPUFeatureName_FramebufferFetch = 0x00050014,\n    WGPUFeatureName_BufferMapExtendedUsages = 0x00050015,\n    WGPUFeatureName_AdapterPropertiesMemoryHeaps = 0x00050016,\n    WGPUFeatureName_AdapterPropertiesD3D = 0x00050017,\n    WGPUFeatureName_AdapterPropertiesVk = 0x00050018,\n    WGPUFeatureName_R8UnormStorage = 0x00050019,\n    WGPUFeatureName_FormatCapabilities = 0x0005001A,\n    WGPUFeatureName_DrmFormatCapabilities = 0x0005001B,\n    WGPUFeatureName_Norm16TextureFormats = 0x0005001C,\n    WGPUFeatureName_MultiPlanarFormatNv16 = 0x0005001D,\n    WGPUFeatureName_MultiPlanarFormatNv24 = 0x0005001E,\n    WGPUFeatureName_MultiPlanarFormatP210 = 0x0005001F,\n    WGPUFeatureName_MultiPlanarFormatP410 = 0x00050020,\n    WGPUFeatureName_SharedTextureMemoryVkDedicatedAllocation = 0x00050021,\n    WGPUFeatureName_SharedTextureMemoryAHardwareBuffer = 0x00050022,\n    WGPUFeatureName_SharedTextureMemoryDmaBuf = 0x00050023,\n    WGPUFeatureName_SharedTextureMemoryOpaqueFD = 0x00050024,\n    WGPUFeatureName_SharedTextureMemoryZirconHandle = 0x00050025,\n    WGPUFeatureName_SharedTextureMemoryDXGISharedHandle = 0x00050026,\n    WGPUFeatureName_SharedTextureMemoryD3D11Texture2D = 0x00050027,\n    WGPUFeatureName_SharedTextureMemoryIOSurface = 0x00050028,\n    WGPUFeatureName_SharedTextureMemoryEGLImage = 0x00050029,\n    WGPUFeatureName_SharedFenceVkSemaphoreOpaqueFD = 0x0005002A,\n    WGPUFeatureName_SharedFenceSyncFD = 0x0005002B,\n    WGPUFeatureName_SharedFenceVkSemaphoreZirconHandle = 0x0005002C,\n    WGPUFeatureName_SharedFenceDXGISharedHandle = 0x0005002D,\n    WGPUFeatureName_SharedFenceMTLSharedEvent = 0x0005002E,\n    WGPUFeatureName_SharedBufferMemoryD3D12Resource = 0x0005002F,\n    WGPUFeatureName_StaticSamplers = 0x00050030,\n    WGPUFeatureName_YCbCrVulkanSamplers = 0x00050031,\n    WGPUFeatureName_ShaderModuleCompilationOptions = 0x00050032,\n    WGPUFeatureName_DawnLoadResolveTexture = 0x00050033,\n    WGPUFeatureName_DawnPartialLoadResolveTexture = 0x00050034,\n    WGPUFeatureName_MultiDrawIndirect = 0x00050035,\n    WGPUFeatureName_ClipDistances = 0x00050036,\n    WGPUFeatureName_DawnTexelCopyBufferRowAlignment = 0x00050037,\n    WGPUFeatureName_Force32 = 0x7FFFFFFF\n} WGPUFeatureName WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUFilterMode {\n    WGPUFilterMode_Undefined = 0x00000000,\n    WGPUFilterMode_Nearest = 0x00000001,\n    WGPUFilterMode_Linear = 0x00000002,\n    WGPUFilterMode_Force32 = 0x7FFFFFFF\n} WGPUFilterMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUFrontFace {\n    WGPUFrontFace_Undefined = 0x00000000,\n    WGPUFrontFace_CCW = 0x00000001,\n    WGPUFrontFace_CW = 0x00000002,\n    WGPUFrontFace_Force32 = 0x7FFFFFFF\n} WGPUFrontFace WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUIndexFormat {\n    WGPUIndexFormat_Undefined = 0x00000000,\n    WGPUIndexFormat_Uint16 = 0x00000001,\n    WGPUIndexFormat_Uint32 = 0x00000002,\n    WGPUIndexFormat_Force32 = 0x7FFFFFFF\n} WGPUIndexFormat WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPULoadOp {\n    WGPULoadOp_Undefined = 0x00000000,\n    WGPULoadOp_Load = 0x00000001,\n    WGPULoadOp_Clear = 0x00000002,\n    WGPULoadOp_ExpandResolveTexture = 0x00050003,\n    WGPULoadOp_Force32 = 0x7FFFFFFF\n} WGPULoadOp WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPULoggingType {\n    WGPULoggingType_Verbose = 0x00000001,\n    WGPULoggingType_Info = 0x00000002,\n    WGPULoggingType_Warning = 0x00000003,\n    WGPULoggingType_Error = 0x00000004,\n    WGPULoggingType_Force32 = 0x7FFFFFFF\n} WGPULoggingType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUMapAsyncStatus {\n    WGPUMapAsyncStatus_Success = 0x00000001,\n    WGPUMapAsyncStatus_InstanceDropped = 0x00000002,\n    WGPUMapAsyncStatus_Error = 0x00000003,\n    WGPUMapAsyncStatus_Aborted = 0x00000004,\n    WGPUMapAsyncStatus_Unknown = 0x00000005,\n    WGPUMapAsyncStatus_Force32 = 0x7FFFFFFF\n} WGPUMapAsyncStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUMipmapFilterMode {\n    WGPUMipmapFilterMode_Undefined = 0x00000000,\n    WGPUMipmapFilterMode_Nearest = 0x00000001,\n    WGPUMipmapFilterMode_Linear = 0x00000002,\n    WGPUMipmapFilterMode_Force32 = 0x7FFFFFFF\n} WGPUMipmapFilterMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUOptionalBool {\n    WGPUOptionalBool_False = 0x00000000,\n    WGPUOptionalBool_True = 0x00000001,\n    WGPUOptionalBool_Undefined = 0x00000002,\n    WGPUOptionalBool_Force32 = 0x7FFFFFFF\n} WGPUOptionalBool WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUPopErrorScopeStatus {\n    WGPUPopErrorScopeStatus_Success = 0x00000001,\n    WGPUPopErrorScopeStatus_InstanceDropped = 0x00000002,\n    WGPUPopErrorScopeStatus_Force32 = 0x7FFFFFFF\n} WGPUPopErrorScopeStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUPowerPreference {\n    WGPUPowerPreference_Undefined = 0x00000000,\n    WGPUPowerPreference_LowPower = 0x00000001,\n    WGPUPowerPreference_HighPerformance = 0x00000002,\n    WGPUPowerPreference_Force32 = 0x7FFFFFFF\n} WGPUPowerPreference WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUPresentMode {\n    WGPUPresentMode_Fifo = 0x00000001,\n    WGPUPresentMode_FifoRelaxed = 0x00000002,\n    WGPUPresentMode_Immediate = 0x00000003,\n    WGPUPresentMode_Mailbox = 0x00000004,\n    WGPUPresentMode_Force32 = 0x7FFFFFFF\n} WGPUPresentMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUPrimitiveTopology {\n    WGPUPrimitiveTopology_Undefined = 0x00000000,\n    WGPUPrimitiveTopology_PointList = 0x00000001,\n    WGPUPrimitiveTopology_LineList = 0x00000002,\n    WGPUPrimitiveTopology_LineStrip = 0x00000003,\n    WGPUPrimitiveTopology_TriangleList = 0x00000004,\n    WGPUPrimitiveTopology_TriangleStrip = 0x00000005,\n    WGPUPrimitiveTopology_Force32 = 0x7FFFFFFF\n} WGPUPrimitiveTopology WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUQueryType {\n    WGPUQueryType_Occlusion = 0x00000001,\n    WGPUQueryType_Timestamp = 0x00000002,\n    WGPUQueryType_Force32 = 0x7FFFFFFF\n} WGPUQueryType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUQueueWorkDoneStatus {\n    WGPUQueueWorkDoneStatus_Success = 0x00000001,\n    WGPUQueueWorkDoneStatus_InstanceDropped = 0x00000002,\n    WGPUQueueWorkDoneStatus_Error = 0x00000003,\n    WGPUQueueWorkDoneStatus_Unknown = 0x00000004,\n    WGPUQueueWorkDoneStatus_DeviceLost = 0x00000005,\n    WGPUQueueWorkDoneStatus_Force32 = 0x7FFFFFFF\n} WGPUQueueWorkDoneStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPURequestAdapterStatus {\n    WGPURequestAdapterStatus_Success = 0x00000001,\n    WGPURequestAdapterStatus_InstanceDropped = 0x00000002,\n    WGPURequestAdapterStatus_Unavailable = 0x00000003,\n    WGPURequestAdapterStatus_Error = 0x00000004,\n    WGPURequestAdapterStatus_Unknown = 0x00000005,\n    WGPURequestAdapterStatus_Force32 = 0x7FFFFFFF\n} WGPURequestAdapterStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPURequestDeviceStatus {\n    WGPURequestDeviceStatus_Success = 0x00000001,\n    WGPURequestDeviceStatus_InstanceDropped = 0x00000002,\n    WGPURequestDeviceStatus_Error = 0x00000003,\n    WGPURequestDeviceStatus_Unknown = 0x00000004,\n    WGPURequestDeviceStatus_Force32 = 0x7FFFFFFF\n} WGPURequestDeviceStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUSType {\n    WGPUSType_ShaderSourceSPIRV = 0x00000001,\n    WGPUSType_ShaderSourceWGSL = 0x00000002,\n    WGPUSType_RenderPassMaxDrawCount = 0x00000003,\n    WGPUSType_SurfaceSourceMetalLayer = 0x00000004,\n    WGPUSType_SurfaceSourceWindowsHWND = 0x00000005,\n    WGPUSType_SurfaceSourceXlibWindow = 0x00000006,\n    WGPUSType_SurfaceSourceWaylandSurface = 0x00000007,\n    WGPUSType_SurfaceSourceAndroidNativeWindow = 0x00000008,\n    WGPUSType_SurfaceSourceXCBWindow = 0x00000009,\n    WGPUSType_AdapterPropertiesSubgroups = 0x0000000A,\n    WGPUSType_TextureBindingViewDimensionDescriptor = 0x00020000,\n    WGPUSType_SurfaceSourceCanvasHTMLSelector_Emscripten = 0x00040000,\n    WGPUSType_SurfaceDescriptorFromWindowsCoreWindow = 0x00050000,\n    WGPUSType_ExternalTextureBindingEntry = 0x00050001,\n    WGPUSType_ExternalTextureBindingLayout = 0x00050002,\n    WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel = 0x00050003,\n    WGPUSType_DawnTextureInternalUsageDescriptor = 0x00050004,\n    WGPUSType_DawnEncoderInternalUsageDescriptor = 0x00050005,\n    WGPUSType_DawnInstanceDescriptor = 0x00050006,\n    WGPUSType_DawnCacheDeviceDescriptor = 0x00050007,\n    WGPUSType_DawnAdapterPropertiesPowerPreference = 0x00050008,\n    WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient = 0x00050009,\n    WGPUSType_DawnTogglesDescriptor = 0x0005000A,\n    WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor = 0x0005000B,\n    WGPUSType_RequestAdapterOptionsLUID = 0x0005000C,\n    WGPUSType_RequestAdapterOptionsGetGLProc = 0x0005000D,\n    WGPUSType_RequestAdapterOptionsD3D11Device = 0x0005000E,\n    WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled = 0x0005000F,\n    WGPUSType_RenderPassPixelLocalStorage = 0x00050010,\n    WGPUSType_PipelineLayoutPixelLocalStorage = 0x00050011,\n    WGPUSType_BufferHostMappedPointer = 0x00050012,\n    WGPUSType_DawnExperimentalSubgroupLimits = 0x00050013,\n    WGPUSType_AdapterPropertiesMemoryHeaps = 0x00050014,\n    WGPUSType_AdapterPropertiesD3D = 0x00050015,\n    WGPUSType_AdapterPropertiesVk = 0x00050016,\n    WGPUSType_DawnWireWGSLControl = 0x00050017,\n    WGPUSType_DawnWGSLBlocklist = 0x00050018,\n    WGPUSType_DrmFormatCapabilities = 0x00050019,\n    WGPUSType_ShaderModuleCompilationOptions = 0x0005001A,\n    WGPUSType_ColorTargetStateExpandResolveTextureDawn = 0x0005001B,\n    WGPUSType_RenderPassDescriptorExpandResolveRect = 0x0005001C,\n    WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor = 0x0005001D,\n    WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor = 0x0005001E,\n    WGPUSType_SharedTextureMemoryDmaBufDescriptor = 0x0005001F,\n    WGPUSType_SharedTextureMemoryOpaqueFDDescriptor = 0x00050020,\n    WGPUSType_SharedTextureMemoryZirconHandleDescriptor = 0x00050021,\n    WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor = 0x00050022,\n    WGPUSType_SharedTextureMemoryD3D11Texture2DDescriptor = 0x00050023,\n    WGPUSType_SharedTextureMemoryIOSurfaceDescriptor = 0x00050024,\n    WGPUSType_SharedTextureMemoryEGLImageDescriptor = 0x00050025,\n    WGPUSType_SharedTextureMemoryInitializedBeginState = 0x00050026,\n    WGPUSType_SharedTextureMemoryInitializedEndState = 0x00050027,\n    WGPUSType_SharedTextureMemoryVkImageLayoutBeginState = 0x00050028,\n    WGPUSType_SharedTextureMemoryVkImageLayoutEndState = 0x00050029,\n    WGPUSType_SharedTextureMemoryD3DSwapchainBeginState = 0x0005002A,\n    WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor = 0x0005002B,\n    WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo = 0x0005002C,\n    WGPUSType_SharedFenceSyncFDDescriptor = 0x0005002D,\n    WGPUSType_SharedFenceSyncFDExportInfo = 0x0005002E,\n    WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor = 0x0005002F,\n    WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo = 0x00050030,\n    WGPUSType_SharedFenceDXGISharedHandleDescriptor = 0x00050031,\n    WGPUSType_SharedFenceDXGISharedHandleExportInfo = 0x00050032,\n    WGPUSType_SharedFenceMTLSharedEventDescriptor = 0x00050033,\n    WGPUSType_SharedFenceMTLSharedEventExportInfo = 0x00050034,\n    WGPUSType_SharedBufferMemoryD3D12ResourceDescriptor = 0x00050035,\n    WGPUSType_StaticSamplerBindingLayout = 0x00050036,\n    WGPUSType_YCbCrVkDescriptor = 0x00050037,\n    WGPUSType_SharedTextureMemoryAHardwareBufferProperties = 0x00050038,\n    WGPUSType_AHardwareBufferProperties = 0x00050039,\n    WGPUSType_DawnExperimentalImmediateDataLimits = 0x0005003A,\n    WGPUSType_DawnTexelCopyBufferRowAlignmentLimits = 0x0005003B,\n    WGPUSType_Force32 = 0x7FFFFFFF\n} WGPUSType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUSamplerBindingType {\n    WGPUSamplerBindingType_BindingNotUsed = 0x00000000,\n    WGPUSamplerBindingType_Filtering = 0x00000001,\n    WGPUSamplerBindingType_NonFiltering = 0x00000002,\n    WGPUSamplerBindingType_Comparison = 0x00000003,\n    WGPUSamplerBindingType_Force32 = 0x7FFFFFFF\n} WGPUSamplerBindingType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUSharedFenceType {\n    WGPUSharedFenceType_VkSemaphoreOpaqueFD = 0x00000001,\n    WGPUSharedFenceType_SyncFD = 0x00000002,\n    WGPUSharedFenceType_VkSemaphoreZirconHandle = 0x00000003,\n    WGPUSharedFenceType_DXGISharedHandle = 0x00000004,\n    WGPUSharedFenceType_MTLSharedEvent = 0x00000005,\n    WGPUSharedFenceType_Force32 = 0x7FFFFFFF\n} WGPUSharedFenceType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUStatus {\n    WGPUStatus_Success = 0x00000001,\n    WGPUStatus_Error = 0x00000002,\n    WGPUStatus_Force32 = 0x7FFFFFFF\n} WGPUStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUStencilOperation {\n    WGPUStencilOperation_Undefined = 0x00000000,\n    WGPUStencilOperation_Keep = 0x00000001,\n    WGPUStencilOperation_Zero = 0x00000002,\n    WGPUStencilOperation_Replace = 0x00000003,\n    WGPUStencilOperation_Invert = 0x00000004,\n    WGPUStencilOperation_IncrementClamp = 0x00000005,\n    WGPUStencilOperation_DecrementClamp = 0x00000006,\n    WGPUStencilOperation_IncrementWrap = 0x00000007,\n    WGPUStencilOperation_DecrementWrap = 0x00000008,\n    WGPUStencilOperation_Force32 = 0x7FFFFFFF\n} WGPUStencilOperation WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUStorageTextureAccess {\n    WGPUStorageTextureAccess_BindingNotUsed = 0x00000000,\n    WGPUStorageTextureAccess_WriteOnly = 0x00000001,\n    WGPUStorageTextureAccess_ReadOnly = 0x00000002,\n    WGPUStorageTextureAccess_ReadWrite = 0x00000003,\n    WGPUStorageTextureAccess_Force32 = 0x7FFFFFFF\n} WGPUStorageTextureAccess WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUStoreOp {\n    WGPUStoreOp_Undefined = 0x00000000,\n    WGPUStoreOp_Store = 0x00000001,\n    WGPUStoreOp_Discard = 0x00000002,\n    WGPUStoreOp_Force32 = 0x7FFFFFFF\n} WGPUStoreOp WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUSurfaceGetCurrentTextureStatus {\n    WGPUSurfaceGetCurrentTextureStatus_Success = 0x00000001,\n    WGPUSurfaceGetCurrentTextureStatus_Timeout = 0x00000002,\n    WGPUSurfaceGetCurrentTextureStatus_Outdated = 0x00000003,\n    WGPUSurfaceGetCurrentTextureStatus_Lost = 0x00000004,\n    WGPUSurfaceGetCurrentTextureStatus_OutOfMemory = 0x00000005,\n    WGPUSurfaceGetCurrentTextureStatus_DeviceLost = 0x00000006,\n    WGPUSurfaceGetCurrentTextureStatus_Error = 0x00000007,\n    WGPUSurfaceGetCurrentTextureStatus_Force32 = 0x7FFFFFFF\n} WGPUSurfaceGetCurrentTextureStatus WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUTextureAspect {\n    WGPUTextureAspect_Undefined = 0x00000000,\n    WGPUTextureAspect_All = 0x00000001,\n    WGPUTextureAspect_StencilOnly = 0x00000002,\n    WGPUTextureAspect_DepthOnly = 0x00000003,\n    WGPUTextureAspect_Plane0Only = 0x00050000,\n    WGPUTextureAspect_Plane1Only = 0x00050001,\n    WGPUTextureAspect_Plane2Only = 0x00050002,\n    WGPUTextureAspect_Force32 = 0x7FFFFFFF\n} WGPUTextureAspect WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUTextureDimension {\n    WGPUTextureDimension_Undefined = 0x00000000,\n    WGPUTextureDimension_1D = 0x00000001,\n    WGPUTextureDimension_2D = 0x00000002,\n    WGPUTextureDimension_3D = 0x00000003,\n    WGPUTextureDimension_Force32 = 0x7FFFFFFF\n} WGPUTextureDimension WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUTextureFormat {\n    WGPUTextureFormat_Undefined = 0x00000000,\n    WGPUTextureFormat_R8Unorm = 0x00000001,\n    WGPUTextureFormat_R8Snorm = 0x00000002,\n    WGPUTextureFormat_R8Uint = 0x00000003,\n    WGPUTextureFormat_R8Sint = 0x00000004,\n    WGPUTextureFormat_R16Uint = 0x00000005,\n    WGPUTextureFormat_R16Sint = 0x00000006,\n    WGPUTextureFormat_R16Float = 0x00000007,\n    WGPUTextureFormat_RG8Unorm = 0x00000008,\n    WGPUTextureFormat_RG8Snorm = 0x00000009,\n    WGPUTextureFormat_RG8Uint = 0x0000000A,\n    WGPUTextureFormat_RG8Sint = 0x0000000B,\n    WGPUTextureFormat_R32Float = 0x0000000C,\n    WGPUTextureFormat_R32Uint = 0x0000000D,\n    WGPUTextureFormat_R32Sint = 0x0000000E,\n    WGPUTextureFormat_RG16Uint = 0x0000000F,\n    WGPUTextureFormat_RG16Sint = 0x00000010,\n    WGPUTextureFormat_RG16Float = 0x00000011,\n    WGPUTextureFormat_RGBA8Unorm = 0x00000012,\n    WGPUTextureFormat_RGBA8UnormSrgb = 0x00000013,\n    WGPUTextureFormat_RGBA8Snorm = 0x00000014,\n    WGPUTextureFormat_RGBA8Uint = 0x00000015,\n    WGPUTextureFormat_RGBA8Sint = 0x00000016,\n    WGPUTextureFormat_BGRA8Unorm = 0x00000017,\n    WGPUTextureFormat_BGRA8UnormSrgb = 0x00000018,\n    WGPUTextureFormat_RGB10A2Uint = 0x00000019,\n    WGPUTextureFormat_RGB10A2Unorm = 0x0000001A,\n    WGPUTextureFormat_RG11B10Ufloat = 0x0000001B,\n    WGPUTextureFormat_RGB9E5Ufloat = 0x0000001C,\n    WGPUTextureFormat_RG32Float = 0x0000001D,\n    WGPUTextureFormat_RG32Uint = 0x0000001E,\n    WGPUTextureFormat_RG32Sint = 0x0000001F,\n    WGPUTextureFormat_RGBA16Uint = 0x00000020,\n    WGPUTextureFormat_RGBA16Sint = 0x00000021,\n    WGPUTextureFormat_RGBA16Float = 0x00000022,\n    WGPUTextureFormat_RGBA32Float = 0x00000023,\n    WGPUTextureFormat_RGBA32Uint = 0x00000024,\n    WGPUTextureFormat_RGBA32Sint = 0x00000025,\n    WGPUTextureFormat_Stencil8 = 0x00000026,\n    WGPUTextureFormat_Depth16Unorm = 0x00000027,\n    WGPUTextureFormat_Depth24Plus = 0x00000028,\n    WGPUTextureFormat_Depth24PlusStencil8 = 0x00000029,\n    WGPUTextureFormat_Depth32Float = 0x0000002A,\n    WGPUTextureFormat_Depth32FloatStencil8 = 0x0000002B,\n    WGPUTextureFormat_BC1RGBAUnorm = 0x0000002C,\n    WGPUTextureFormat_BC1RGBAUnormSrgb = 0x0000002D,\n    WGPUTextureFormat_BC2RGBAUnorm = 0x0000002E,\n    WGPUTextureFormat_BC2RGBAUnormSrgb = 0x0000002F,\n    WGPUTextureFormat_BC3RGBAUnorm = 0x00000030,\n    WGPUTextureFormat_BC3RGBAUnormSrgb = 0x00000031,\n    WGPUTextureFormat_BC4RUnorm = 0x00000032,\n    WGPUTextureFormat_BC4RSnorm = 0x00000033,\n    WGPUTextureFormat_BC5RGUnorm = 0x00000034,\n    WGPUTextureFormat_BC5RGSnorm = 0x00000035,\n    WGPUTextureFormat_BC6HRGBUfloat = 0x00000036,\n    WGPUTextureFormat_BC6HRGBFloat = 0x00000037,\n    WGPUTextureFormat_BC7RGBAUnorm = 0x00000038,\n    WGPUTextureFormat_BC7RGBAUnormSrgb = 0x00000039,\n    WGPUTextureFormat_ETC2RGB8Unorm = 0x0000003A,\n    WGPUTextureFormat_ETC2RGB8UnormSrgb = 0x0000003B,\n    WGPUTextureFormat_ETC2RGB8A1Unorm = 0x0000003C,\n    WGPUTextureFormat_ETC2RGB8A1UnormSrgb = 0x0000003D,\n    WGPUTextureFormat_ETC2RGBA8Unorm = 0x0000003E,\n    WGPUTextureFormat_ETC2RGBA8UnormSrgb = 0x0000003F,\n    WGPUTextureFormat_EACR11Unorm = 0x00000040,\n    WGPUTextureFormat_EACR11Snorm = 0x00000041,\n    WGPUTextureFormat_EACRG11Unorm = 0x00000042,\n    WGPUTextureFormat_EACRG11Snorm = 0x00000043,\n    WGPUTextureFormat_ASTC4x4Unorm = 0x00000044,\n    WGPUTextureFormat_ASTC4x4UnormSrgb = 0x00000045,\n    WGPUTextureFormat_ASTC5x4Unorm = 0x00000046,\n    WGPUTextureFormat_ASTC5x4UnormSrgb = 0x00000047,\n    WGPUTextureFormat_ASTC5x5Unorm = 0x00000048,\n    WGPUTextureFormat_ASTC5x5UnormSrgb = 0x00000049,\n    WGPUTextureFormat_ASTC6x5Unorm = 0x0000004A,\n    WGPUTextureFormat_ASTC6x5UnormSrgb = 0x0000004B,\n    WGPUTextureFormat_ASTC6x6Unorm = 0x0000004C,\n    WGPUTextureFormat_ASTC6x6UnormSrgb = 0x0000004D,\n    WGPUTextureFormat_ASTC8x5Unorm = 0x0000004E,\n    WGPUTextureFormat_ASTC8x5UnormSrgb = 0x0000004F,\n    WGPUTextureFormat_ASTC8x6Unorm = 0x00000050,\n    WGPUTextureFormat_ASTC8x6UnormSrgb = 0x00000051,\n    WGPUTextureFormat_ASTC8x8Unorm = 0x00000052,\n    WGPUTextureFormat_ASTC8x8UnormSrgb = 0x00000053,\n    WGPUTextureFormat_ASTC10x5Unorm = 0x00000054,\n    WGPUTextureFormat_ASTC10x5UnormSrgb = 0x00000055,\n    WGPUTextureFormat_ASTC10x6Unorm = 0x00000056,\n    WGPUTextureFormat_ASTC10x6UnormSrgb = 0x00000057,\n    WGPUTextureFormat_ASTC10x8Unorm = 0x00000058,\n    WGPUTextureFormat_ASTC10x8UnormSrgb = 0x00000059,\n    WGPUTextureFormat_ASTC10x10Unorm = 0x0000005A,\n    WGPUTextureFormat_ASTC10x10UnormSrgb = 0x0000005B,\n    WGPUTextureFormat_ASTC12x10Unorm = 0x0000005C,\n    WGPUTextureFormat_ASTC12x10UnormSrgb = 0x0000005D,\n    WGPUTextureFormat_ASTC12x12Unorm = 0x0000005E,\n    WGPUTextureFormat_ASTC12x12UnormSrgb = 0x0000005F,\n    WGPUTextureFormat_R16Unorm = 0x00050000,\n    WGPUTextureFormat_RG16Unorm = 0x00050001,\n    WGPUTextureFormat_RGBA16Unorm = 0x00050002,\n    WGPUTextureFormat_R16Snorm = 0x00050003,\n    WGPUTextureFormat_RG16Snorm = 0x00050004,\n    WGPUTextureFormat_RGBA16Snorm = 0x00050005,\n    WGPUTextureFormat_R8BG8Biplanar420Unorm = 0x00050006,\n    WGPUTextureFormat_R10X6BG10X6Biplanar420Unorm = 0x00050007,\n    WGPUTextureFormat_R8BG8A8Triplanar420Unorm = 0x00050008,\n    WGPUTextureFormat_R8BG8Biplanar422Unorm = 0x00050009,\n    WGPUTextureFormat_R8BG8Biplanar444Unorm = 0x0005000A,\n    WGPUTextureFormat_R10X6BG10X6Biplanar422Unorm = 0x0005000B,\n    WGPUTextureFormat_R10X6BG10X6Biplanar444Unorm = 0x0005000C,\n    WGPUTextureFormat_External = 0x0005000D,\n    WGPUTextureFormat_Force32 = 0x7FFFFFFF\n} WGPUTextureFormat WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUTextureSampleType {\n    WGPUTextureSampleType_BindingNotUsed = 0x00000000,\n    WGPUTextureSampleType_Float = 0x00000001,\n    WGPUTextureSampleType_UnfilterableFloat = 0x00000002,\n    WGPUTextureSampleType_Depth = 0x00000003,\n    WGPUTextureSampleType_Sint = 0x00000004,\n    WGPUTextureSampleType_Uint = 0x00000005,\n    WGPUTextureSampleType_Force32 = 0x7FFFFFFF\n} WGPUTextureSampleType WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUTextureViewDimension {\n    WGPUTextureViewDimension_Undefined = 0x00000000,\n    WGPUTextureViewDimension_1D = 0x00000001,\n    WGPUTextureViewDimension_2D = 0x00000002,\n    WGPUTextureViewDimension_2DArray = 0x00000003,\n    WGPUTextureViewDimension_Cube = 0x00000004,\n    WGPUTextureViewDimension_CubeArray = 0x00000005,\n    WGPUTextureViewDimension_3D = 0x00000006,\n    WGPUTextureViewDimension_Force32 = 0x7FFFFFFF\n} WGPUTextureViewDimension WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUVertexFormat {\n    WGPUVertexFormat_Uint8 = 0x00000001,\n    WGPUVertexFormat_Uint8x2 = 0x00000002,\n    WGPUVertexFormat_Uint8x4 = 0x00000003,\n    WGPUVertexFormat_Sint8 = 0x00000004,\n    WGPUVertexFormat_Sint8x2 = 0x00000005,\n    WGPUVertexFormat_Sint8x4 = 0x00000006,\n    WGPUVertexFormat_Unorm8 = 0x00000007,\n    WGPUVertexFormat_Unorm8x2 = 0x00000008,\n    WGPUVertexFormat_Unorm8x4 = 0x00000009,\n    WGPUVertexFormat_Snorm8 = 0x0000000A,\n    WGPUVertexFormat_Snorm8x2 = 0x0000000B,\n    WGPUVertexFormat_Snorm8x4 = 0x0000000C,\n    WGPUVertexFormat_Uint16 = 0x0000000D,\n    WGPUVertexFormat_Uint16x2 = 0x0000000E,\n    WGPUVertexFormat_Uint16x4 = 0x0000000F,\n    WGPUVertexFormat_Sint16 = 0x00000010,\n    WGPUVertexFormat_Sint16x2 = 0x00000011,\n    WGPUVertexFormat_Sint16x4 = 0x00000012,\n    WGPUVertexFormat_Unorm16 = 0x00000013,\n    WGPUVertexFormat_Unorm16x2 = 0x00000014,\n    WGPUVertexFormat_Unorm16x4 = 0x00000015,\n    WGPUVertexFormat_Snorm16 = 0x00000016,\n    WGPUVertexFormat_Snorm16x2 = 0x00000017,\n    WGPUVertexFormat_Snorm16x4 = 0x00000018,\n    WGPUVertexFormat_Float16 = 0x00000019,\n    WGPUVertexFormat_Float16x2 = 0x0000001A,\n    WGPUVertexFormat_Float16x4 = 0x0000001B,\n    WGPUVertexFormat_Float32 = 0x0000001C,\n    WGPUVertexFormat_Float32x2 = 0x0000001D,\n    WGPUVertexFormat_Float32x3 = 0x0000001E,\n    WGPUVertexFormat_Float32x4 = 0x0000001F,\n    WGPUVertexFormat_Uint32 = 0x00000020,\n    WGPUVertexFormat_Uint32x2 = 0x00000021,\n    WGPUVertexFormat_Uint32x3 = 0x00000022,\n    WGPUVertexFormat_Uint32x4 = 0x00000023,\n    WGPUVertexFormat_Sint32 = 0x00000024,\n    WGPUVertexFormat_Sint32x2 = 0x00000025,\n    WGPUVertexFormat_Sint32x3 = 0x00000026,\n    WGPUVertexFormat_Sint32x4 = 0x00000027,\n    WGPUVertexFormat_Unorm10_10_10_2 = 0x00000028,\n    WGPUVertexFormat_Unorm8x4BGRA = 0x00000029,\n    WGPUVertexFormat_Force32 = 0x7FFFFFFF\n} WGPUVertexFormat WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUVertexStepMode {\n    WGPUVertexStepMode_VertexBufferNotUsed = 0x00000000,\n    WGPUVertexStepMode_Undefined = 0x00000001,\n    WGPUVertexStepMode_Vertex = 0x00000002,\n    WGPUVertexStepMode_Instance = 0x00000003,\n    WGPUVertexStepMode_Force32 = 0x7FFFFFFF\n} WGPUVertexStepMode WGPU_ENUM_ATTRIBUTE;\ntypedef enum WGPUWaitStatus {\n    WGPUWaitStatus_Success = 0x00000001,\n    WGPUWaitStatus_TimedOut = 0x00000002,\n    WGPUWaitStatus_UnsupportedTimeout = 0x00000003,\n    WGPUWaitStatus_UnsupportedCount = 0x00000004,\n    WGPUWaitStatus_UnsupportedMixedSources = 0x00000005,\n    WGPUWaitStatus_Unknown = 0x00000006,\n    WGPUWaitStatus_Force32 = 0x7FFFFFFF\n} WGPUWaitStatus WGPU_ENUM_ATTRIBUTE;\n\ntypedef WGPUFlags WGPUBufferUsage;\nstatic const WGPUBufferUsage WGPUBufferUsage_None = 0x0000000000000000;\nstatic const WGPUBufferUsage WGPUBufferUsage_MapRead = 0x0000000000000001;\nstatic const WGPUBufferUsage WGPUBufferUsage_MapWrite = 0x0000000000000002;\nstatic const WGPUBufferUsage WGPUBufferUsage_CopySrc = 0x0000000000000004;\nstatic const WGPUBufferUsage WGPUBufferUsage_CopyDst = 0x0000000000000008;\nstatic const WGPUBufferUsage WGPUBufferUsage_Index = 0x0000000000000010;\nstatic const WGPUBufferUsage WGPUBufferUsage_Vertex = 0x0000000000000020;\nstatic const WGPUBufferUsage WGPUBufferUsage_Uniform = 0x0000000000000040;\nstatic const WGPUBufferUsage WGPUBufferUsage_Storage = 0x0000000000000080;\nstatic const WGPUBufferUsage WGPUBufferUsage_Indirect = 0x0000000000000100;\nstatic const WGPUBufferUsage WGPUBufferUsage_QueryResolve = 0x0000000000000200;\ntypedef WGPUFlags WGPUColorWriteMask;\nstatic const WGPUColorWriteMask WGPUColorWriteMask_None = 0x0000000000000000;\nstatic const WGPUColorWriteMask WGPUColorWriteMask_Red = 0x0000000000000001;\nstatic const WGPUColorWriteMask WGPUColorWriteMask_Green = 0x0000000000000002;\nstatic const WGPUColorWriteMask WGPUColorWriteMask_Blue = 0x0000000000000004;\nstatic const WGPUColorWriteMask WGPUColorWriteMask_Alpha = 0x0000000000000008;\nstatic const WGPUColorWriteMask WGPUColorWriteMask_All = 0x000000000000000F;\ntypedef WGPUFlags WGPUHeapProperty;\nstatic const WGPUHeapProperty WGPUHeapProperty_DeviceLocal = 0x0000000000000001;\nstatic const WGPUHeapProperty WGPUHeapProperty_HostVisible = 0x0000000000000002;\nstatic const WGPUHeapProperty WGPUHeapProperty_HostCoherent = 0x0000000000000004;\nstatic const WGPUHeapProperty WGPUHeapProperty_HostUncached = 0x0000000000000008;\nstatic const WGPUHeapProperty WGPUHeapProperty_HostCached = 0x0000000000000010;\ntypedef WGPUFlags WGPUMapMode;\nstatic const WGPUMapMode WGPUMapMode_None = 0x0000000000000000;\nstatic const WGPUMapMode WGPUMapMode_Read = 0x0000000000000001;\nstatic const WGPUMapMode WGPUMapMode_Write = 0x0000000000000002;\ntypedef WGPUFlags WGPUShaderStage;\nstatic const WGPUShaderStage WGPUShaderStage_None = 0x0000000000000000;\nstatic const WGPUShaderStage WGPUShaderStage_Vertex = 0x0000000000000001;\nstatic const WGPUShaderStage WGPUShaderStage_Fragment = 0x0000000000000002;\nstatic const WGPUShaderStage WGPUShaderStage_Compute = 0x0000000000000004;\ntypedef WGPUFlags WGPUTextureUsage;\nstatic const WGPUTextureUsage WGPUTextureUsage_None = 0x0000000000000000;\nstatic const WGPUTextureUsage WGPUTextureUsage_CopySrc = 0x0000000000000001;\nstatic const WGPUTextureUsage WGPUTextureUsage_CopyDst = 0x0000000000000002;\nstatic const WGPUTextureUsage WGPUTextureUsage_TextureBinding = 0x0000000000000004;\nstatic const WGPUTextureUsage WGPUTextureUsage_StorageBinding = 0x0000000000000008;\nstatic const WGPUTextureUsage WGPUTextureUsage_RenderAttachment = 0x0000000000000010;\nstatic const WGPUTextureUsage WGPUTextureUsage_TransientAttachment = 0x0000000000000020;\nstatic const WGPUTextureUsage WGPUTextureUsage_StorageAttachment = 0x0000000000000040;\ntypedef void (*WGPUBufferMapCallback)(WGPUBufferMapAsyncStatus status, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUCallback)(void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUCompilationInfoCallback)(WGPUCompilationInfoRequestStatus status, struct WGPUCompilationInfo const * compilationInfo, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUCreateComputePipelineAsyncCallback)(WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUCreateRenderPipelineAsyncCallback)(WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef size_t (*WGPUDawnLoadCacheDataFunction)(void const * key, size_t keySize, void * value, size_t valueSize, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUDawnStoreCacheDataFunction)(void const * key, size_t keySize, void const * value, size_t valueSize, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUDeviceLostCallback)(WGPUDeviceLostReason reason, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUDeviceLostCallbackNew)(WGPUDevice const * device, WGPUDeviceLostReason reason, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUErrorCallback)(WGPUErrorType type, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPULoggingCallback)(WGPULoggingType type, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUPopErrorScopeCallback)(WGPUPopErrorScopeStatus status, WGPUErrorType type, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProc)(void) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUQueueWorkDoneCallback)(WGPUQueueWorkDoneStatus status, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPURequestAdapterCallback)(WGPURequestAdapterStatus status, WGPUAdapter adapter, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPURequestDeviceCallback)(WGPURequestDeviceStatus status, WGPUDevice device, struct WGPUStringView message, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\n\n// Callback function pointers\ntypedef void (*WGPUBufferMapCallback2)(WGPUMapAsyncStatus status, struct WGPUStringView message, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUCompilationInfoCallback2)(WGPUCompilationInfoRequestStatus status, struct WGPUCompilationInfo const * compilationInfo, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUCreateComputePipelineAsyncCallback2)(WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, struct WGPUStringView message, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUCreateRenderPipelineAsyncCallback2)(WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, struct WGPUStringView message, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUDeviceLostCallback2)(WGPUDevice const * device, WGPUDeviceLostReason reason, struct WGPUStringView message, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUPopErrorScopeCallback2)(WGPUPopErrorScopeStatus status, WGPUErrorType type, struct WGPUStringView message, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUQueueWorkDoneCallback2)(WGPUQueueWorkDoneStatus status, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPURequestAdapterCallback2)(WGPURequestAdapterStatus status, WGPUAdapter adapter, struct WGPUStringView message, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPURequestDeviceCallback2)(WGPURequestDeviceStatus status, WGPUDevice device, struct WGPUStringView message, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUUncapturedErrorCallback)(WGPUDevice const * device, WGPUErrorType type, struct WGPUStringView message, void* userdata1, void* userdata2) WGPU_FUNCTION_ATTRIBUTE;\n\ntypedef struct WGPUChainedStruct {\n    struct WGPUChainedStruct const * next;\n    WGPUSType sType;\n} WGPUChainedStruct WGPU_STRUCTURE_ATTRIBUTE;\n\ntypedef struct WGPUChainedStructOut {\n    struct WGPUChainedStructOut * next;\n    WGPUSType sType;\n} WGPUChainedStructOut WGPU_STRUCTURE_ATTRIBUTE;\n\n\n#define WGPU_COMMA ,\n\ntypedef struct WGPUBufferMapCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPUBufferMapCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPUBufferMapCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BUFFER_MAP_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferMapCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUCompilationInfoCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPUCompilationInfoCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPUCompilationInfoCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMPILATION_INFO_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUCompilationInfoCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUCreateComputePipelineAsyncCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPUCreateComputePipelineAsyncCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPUCreateComputePipelineAsyncCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_CREATE_COMPUTE_PIPELINE_ASYNC_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUCreateComputePipelineAsyncCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUCreateRenderPipelineAsyncCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPUCreateRenderPipelineAsyncCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPUCreateRenderPipelineAsyncCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_CREATE_RENDER_PIPELINE_ASYNC_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUCreateRenderPipelineAsyncCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUDeviceLostCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPUDeviceLostCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPUDeviceLostCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DEVICE_LOST_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUDeviceLostCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUPopErrorScopeCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPUPopErrorScopeCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPUPopErrorScopeCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_POP_ERROR_SCOPE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUPopErrorScopeCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUQueueWorkDoneCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPUQueueWorkDoneCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPUQueueWorkDoneCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_QUEUE_WORK_DONE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUQueueWorkDoneCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPURequestAdapterCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPURequestAdapterCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPURequestAdapterCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_REQUEST_ADAPTER_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestAdapterCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPURequestDeviceCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUCallbackMode mode;\n    WGPURequestDeviceCallback2 callback;\n    void* userdata1;\n    void* userdata2;\n} WGPURequestDeviceCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_REQUEST_DEVICE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestDeviceCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUUncapturedErrorCallbackInfo2 {\n    WGPUChainedStruct const* nextInChain;\n    WGPUUncapturedErrorCallback callback;\n    void* userdata1;\n    void* userdata2;\n} WGPUUncapturedErrorCallbackInfo2 WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_UNCAPTURED_ERROR_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUUncapturedErrorCallbackInfo2, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata1=*/nullptr WGPU_COMMA \\\n    /*.userdata2=*/nullptr WGPU_COMMA \\\n})\n\n\ntypedef struct WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER {\n    WGPUBool unused;\n} WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_INTERNAL__HAVE_EMDAWNWEBGPU_HEADER_INIT WGPU_MAKE_INIT_STRUCT(WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER, { \\\n    /*.unused=*/false WGPU_COMMA \\\n})\n\n// Can be chained in WGPUAdapterInfo\ntypedef struct WGPUAdapterPropertiesD3D {\n    WGPUChainedStructOut chain;\n    uint32_t shaderModel;\n} WGPUAdapterPropertiesD3D WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_ADAPTER_PROPERTIES_D3D_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterPropertiesD3D, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_AdapterPropertiesD3D} WGPU_COMMA \\\n    /*.shaderModel=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUAdapterInfo\ntypedef struct WGPUAdapterPropertiesSubgroups {\n    WGPUChainedStructOut chain;\n    uint32_t subgroupMinSize;\n    uint32_t subgroupMaxSize;\n} WGPUAdapterPropertiesSubgroups WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_ADAPTER_PROPERTIES_SUBGROUPS_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterPropertiesSubgroups, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_AdapterPropertiesSubgroups} WGPU_COMMA \\\n    /*.subgroupMinSize=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.subgroupMaxSize=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n})\n\n// Can be chained in WGPUAdapterInfo\ntypedef struct WGPUAdapterPropertiesVk {\n    WGPUChainedStructOut chain;\n    uint32_t driverVersion;\n} WGPUAdapterPropertiesVk WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_ADAPTER_PROPERTIES_VK_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterPropertiesVk, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_AdapterPropertiesVk} WGPU_COMMA \\\n    /*.driverVersion=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUBindGroupEntry {\n    WGPUChainedStruct const * nextInChain;\n    uint32_t binding;\n    WGPU_NULLABLE WGPUBuffer buffer;\n    uint64_t offset;\n    uint64_t size;\n    WGPU_NULLABLE WGPUSampler sampler;\n    WGPU_NULLABLE WGPUTextureView textureView;\n} WGPUBindGroupEntry WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BIND_GROUP_ENTRY_INIT WGPU_MAKE_INIT_STRUCT(WGPUBindGroupEntry, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.binding=*/{} WGPU_COMMA \\\n    /*.buffer=*/nullptr WGPU_COMMA \\\n    /*.offset=*/0 WGPU_COMMA \\\n    /*.size=*/WGPU_WHOLE_SIZE WGPU_COMMA \\\n    /*.sampler=*/nullptr WGPU_COMMA \\\n    /*.textureView=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUBlendComponent {\n    WGPUBlendOperation operation;\n    WGPUBlendFactor srcFactor;\n    WGPUBlendFactor dstFactor;\n} WGPUBlendComponent WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BLEND_COMPONENT_INIT WGPU_MAKE_INIT_STRUCT(WGPUBlendComponent, { \\\n    /*.operation=*/WGPUBlendOperation_Add WGPU_COMMA \\\n    /*.srcFactor=*/WGPUBlendFactor_One WGPU_COMMA \\\n    /*.dstFactor=*/WGPUBlendFactor_Zero WGPU_COMMA \\\n})\n\ntypedef struct WGPUBufferBindingLayout {\n    WGPUChainedStruct const * nextInChain;\n    WGPUBufferBindingType type;\n    WGPUBool hasDynamicOffset;\n    uint64_t minBindingSize;\n} WGPUBufferBindingLayout WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BUFFER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferBindingLayout, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.type=*/WGPUBufferBindingType_BindingNotUsed WGPU_COMMA \\\n    /*.hasDynamicOffset=*/false WGPU_COMMA \\\n    /*.minBindingSize=*/0 WGPU_COMMA \\\n})\n\n// Can be chained in WGPUBufferDescriptor\ntypedef struct WGPUBufferHostMappedPointer {\n    WGPUChainedStruct chain;\n    void * pointer;\n    WGPUCallback disposeCallback;\n    void * userdata;\n} WGPUBufferHostMappedPointer WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BUFFER_HOST_MAPPED_POINTER_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferHostMappedPointer, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_BufferHostMappedPointer} WGPU_COMMA \\\n    /*.pointer=*/{} WGPU_COMMA \\\n    /*.disposeCallback=*/{} WGPU_COMMA \\\n    /*.userdata=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUBufferMapCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPUBufferMapCallback callback;\n    void * userdata;\n} WGPUBufferMapCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BUFFER_MAP_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferMapCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/{} WGPU_COMMA \\\n    /*.userdata=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUColor {\n    double r;\n    double g;\n    double b;\n    double a;\n} WGPUColor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COLOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUColor, { \\\n    /*.r=*/{} WGPU_COMMA \\\n    /*.g=*/{} WGPU_COMMA \\\n    /*.b=*/{} WGPU_COMMA \\\n    /*.a=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUColorTargetState\ntypedef struct WGPUColorTargetStateExpandResolveTextureDawn {\n    WGPUChainedStruct chain;\n    WGPUBool enabled;\n} WGPUColorTargetStateExpandResolveTextureDawn WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COLOR_TARGET_STATE_EXPAND_RESOLVE_TEXTURE_DAWN_INIT WGPU_MAKE_INIT_STRUCT(WGPUColorTargetStateExpandResolveTextureDawn, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_ColorTargetStateExpandResolveTextureDawn} WGPU_COMMA \\\n    /*.enabled=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPUCompilationInfoCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPUCompilationInfoCallback callback;\n    void * userdata;\n} WGPUCompilationInfoCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMPILATION_INFO_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUCompilationInfoCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/{} WGPU_COMMA \\\n    /*.userdata=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUComputePassTimestampWrites {\n    WGPUQuerySet querySet;\n    uint32_t beginningOfPassWriteIndex;\n    uint32_t endOfPassWriteIndex;\n} WGPUComputePassTimestampWrites WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMPUTE_PASS_TIMESTAMP_WRITES_INIT WGPU_MAKE_INIT_STRUCT(WGPUComputePassTimestampWrites, { \\\n    /*.querySet=*/{} WGPU_COMMA \\\n    /*.beginningOfPassWriteIndex=*/WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA \\\n    /*.endOfPassWriteIndex=*/WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA \\\n})\n\ntypedef struct WGPUCopyTextureForBrowserOptions {\n    WGPUChainedStruct const * nextInChain;\n    WGPUBool flipY;\n    WGPUBool needsColorSpaceConversion;\n    WGPUAlphaMode srcAlphaMode;\n    WGPU_NULLABLE float const * srcTransferFunctionParameters;\n    WGPU_NULLABLE float const * conversionMatrix;\n    WGPU_NULLABLE float const * dstTransferFunctionParameters;\n    WGPUAlphaMode dstAlphaMode;\n    WGPUBool internalUsage;\n} WGPUCopyTextureForBrowserOptions WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COPY_TEXTURE_FOR_BROWSER_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT(WGPUCopyTextureForBrowserOptions, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.flipY=*/false WGPU_COMMA \\\n    /*.needsColorSpaceConversion=*/false WGPU_COMMA \\\n    /*.srcAlphaMode=*/WGPUAlphaMode_Unpremultiplied WGPU_COMMA \\\n    /*.srcTransferFunctionParameters=*/nullptr WGPU_COMMA \\\n    /*.conversionMatrix=*/nullptr WGPU_COMMA \\\n    /*.dstTransferFunctionParameters=*/nullptr WGPU_COMMA \\\n    /*.dstAlphaMode=*/WGPUAlphaMode_Unpremultiplied WGPU_COMMA \\\n    /*.internalUsage=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPUCreateComputePipelineAsyncCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPUCreateComputePipelineAsyncCallback callback;\n    void * userdata;\n} WGPUCreateComputePipelineAsyncCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_CREATE_COMPUTE_PIPELINE_ASYNC_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUCreateComputePipelineAsyncCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/{} WGPU_COMMA \\\n    /*.userdata=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUCreateRenderPipelineAsyncCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPUCreateRenderPipelineAsyncCallback callback;\n    void * userdata;\n} WGPUCreateRenderPipelineAsyncCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_CREATE_RENDER_PIPELINE_ASYNC_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUCreateRenderPipelineAsyncCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/{} WGPU_COMMA \\\n    /*.userdata=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUInstanceDescriptor\ntypedef struct WGPUDawnWGSLBlocklist {\n    WGPUChainedStruct chain;\n    size_t blocklistedFeatureCount;\n    const char* const * blocklistedFeatures;\n} WGPUDawnWGSLBlocklist WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_WGSL_BLOCKLIST_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnWGSLBlocklist, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnWGSLBlocklist} WGPU_COMMA \\\n    /*.blocklistedFeatureCount=*/0 WGPU_COMMA \\\n    /*.blocklistedFeatures=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUAdapterInfo\ntypedef struct WGPUDawnAdapterPropertiesPowerPreference {\n    WGPUChainedStructOut chain;\n    WGPUPowerPreference powerPreference;\n} WGPUDawnAdapterPropertiesPowerPreference WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_ADAPTER_PROPERTIES_POWER_PREFERENCE_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnAdapterPropertiesPowerPreference, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnAdapterPropertiesPowerPreference} WGPU_COMMA \\\n    /*.powerPreference=*/WGPUPowerPreference_Undefined WGPU_COMMA \\\n})\n\n// Can be chained in WGPUBufferDescriptor\ntypedef struct WGPUDawnBufferDescriptorErrorInfoFromWireClient {\n    WGPUChainedStruct chain;\n    WGPUBool outOfMemory;\n} WGPUDawnBufferDescriptorErrorInfoFromWireClient WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_BUFFER_DESCRIPTOR_ERROR_INFO_FROM_WIRE_CLIENT_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnBufferDescriptorErrorInfoFromWireClient, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient} WGPU_COMMA \\\n    /*.outOfMemory=*/false WGPU_COMMA \\\n})\n\n// Can be chained in WGPUCommandEncoderDescriptor\ntypedef struct WGPUDawnEncoderInternalUsageDescriptor {\n    WGPUChainedStruct chain;\n    WGPUBool useInternalUsages;\n} WGPUDawnEncoderInternalUsageDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_ENCODER_INTERNAL_USAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnEncoderInternalUsageDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnEncoderInternalUsageDescriptor} WGPU_COMMA \\\n    /*.useInternalUsages=*/false WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSupportedLimits\ntypedef struct WGPUDawnExperimentalImmediateDataLimits {\n    WGPUChainedStructOut chain;\n    uint32_t maxImmediateDataRangeByteSize;\n} WGPUDawnExperimentalImmediateDataLimits WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_EXPERIMENTAL_IMMEDIATE_DATA_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnExperimentalImmediateDataLimits, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnExperimentalImmediateDataLimits} WGPU_COMMA \\\n    /*.maxImmediateDataRangeByteSize=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSupportedLimits\ntypedef struct WGPUDawnExperimentalSubgroupLimits {\n    WGPUChainedStructOut chain;\n    uint32_t minSubgroupSize;\n    uint32_t maxSubgroupSize;\n} WGPUDawnExperimentalSubgroupLimits WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_EXPERIMENTAL_SUBGROUP_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnExperimentalSubgroupLimits, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnExperimentalSubgroupLimits} WGPU_COMMA \\\n    /*.minSubgroupSize=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxSubgroupSize=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n})\n\n// Can be chained in WGPURenderPassColorAttachment\ntypedef struct WGPUDawnRenderPassColorAttachmentRenderToSingleSampled {\n    WGPUChainedStruct chain;\n    uint32_t implicitSampleCount;\n} WGPUDawnRenderPassColorAttachmentRenderToSingleSampled WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_RENDER_PASS_COLOR_ATTACHMENT_RENDER_TO_SINGLE_SAMPLED_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnRenderPassColorAttachmentRenderToSingleSampled, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled} WGPU_COMMA \\\n    /*.implicitSampleCount=*/1 WGPU_COMMA \\\n})\n\n// Can be chained in WGPUShaderModuleDescriptor\ntypedef struct WGPUDawnShaderModuleSPIRVOptionsDescriptor {\n    WGPUChainedStruct chain;\n    WGPUBool allowNonUniformDerivatives;\n} WGPUDawnShaderModuleSPIRVOptionsDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_SHADER_MODULE_SPIRV_OPTIONS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnShaderModuleSPIRVOptionsDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor} WGPU_COMMA \\\n    /*.allowNonUniformDerivatives=*/false WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSupportedLimits\ntypedef struct WGPUDawnTexelCopyBufferRowAlignmentLimits {\n    WGPUChainedStructOut chain;\n    uint32_t minTexelCopyBufferRowAlignment;\n} WGPUDawnTexelCopyBufferRowAlignmentLimits WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_TEXEL_COPY_BUFFER_ROW_ALIGNMENT_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnTexelCopyBufferRowAlignmentLimits, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnTexelCopyBufferRowAlignmentLimits} WGPU_COMMA \\\n    /*.minTexelCopyBufferRowAlignment=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n})\n\n// Can be chained in WGPUTextureDescriptor\ntypedef struct WGPUDawnTextureInternalUsageDescriptor {\n    WGPUChainedStruct chain;\n    WGPUTextureUsage internalUsage;\n} WGPUDawnTextureInternalUsageDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_TEXTURE_INTERNAL_USAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnTextureInternalUsageDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnTextureInternalUsageDescriptor} WGPU_COMMA \\\n    /*.internalUsage=*/WGPUTextureUsage_None WGPU_COMMA \\\n})\n\n// Can be chained in WGPUInstanceDescriptor\n// Can be chained in WGPURequestAdapterOptions\n// Can be chained in WGPUDeviceDescriptor\ntypedef struct WGPUDawnTogglesDescriptor {\n    WGPUChainedStruct chain;\n    size_t enabledToggleCount;\n    const char* const * enabledToggles;\n    size_t disabledToggleCount;\n    const char* const * disabledToggles;\n} WGPUDawnTogglesDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_TOGGLES_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnTogglesDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnTogglesDescriptor} WGPU_COMMA \\\n    /*.enabledToggleCount=*/0 WGPU_COMMA \\\n    /*.enabledToggles=*/{} WGPU_COMMA \\\n    /*.disabledToggleCount=*/0 WGPU_COMMA \\\n    /*.disabledToggles=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUInstanceDescriptor\ntypedef struct WGPUDawnWireWGSLControl {\n    WGPUChainedStruct chain;\n    WGPUBool enableExperimental;\n    WGPUBool enableUnsafe;\n    WGPUBool enableTesting;\n} WGPUDawnWireWGSLControl WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_WIRE_WGSL_CONTROL_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnWireWGSLControl, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnWireWGSLControl} WGPU_COMMA \\\n    /*.enableExperimental=*/false WGPU_COMMA \\\n    /*.enableUnsafe=*/false WGPU_COMMA \\\n    /*.enableTesting=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPUDeviceLostCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPUDeviceLostCallbackNew callback;\n    void * userdata;\n} WGPUDeviceLostCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DEVICE_LOST_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUDeviceLostCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/WGPUCallbackMode_WaitAnyOnly WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUDrmFormatProperties {\n    uint64_t modifier;\n    uint32_t modifierPlaneCount;\n} WGPUDrmFormatProperties WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DRM_FORMAT_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUDrmFormatProperties, { \\\n    /*.modifier=*/{} WGPU_COMMA \\\n    /*.modifierPlaneCount=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUExtent2D {\n    uint32_t width;\n    uint32_t height;\n} WGPUExtent2D WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_EXTENT_2D_INIT WGPU_MAKE_INIT_STRUCT(WGPUExtent2D, { \\\n    /*.width=*/{} WGPU_COMMA \\\n    /*.height=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUExtent3D {\n    uint32_t width;\n    uint32_t height;\n    uint32_t depthOrArrayLayers;\n} WGPUExtent3D WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_EXTENT_3D_INIT WGPU_MAKE_INIT_STRUCT(WGPUExtent3D, { \\\n    /*.width=*/{} WGPU_COMMA \\\n    /*.height=*/1 WGPU_COMMA \\\n    /*.depthOrArrayLayers=*/1 WGPU_COMMA \\\n})\n\n// Can be chained in WGPUBindGroupEntry\ntypedef struct WGPUExternalTextureBindingEntry {\n    WGPUChainedStruct chain;\n    WGPUExternalTexture externalTexture;\n} WGPUExternalTextureBindingEntry WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_EXTERNAL_TEXTURE_BINDING_ENTRY_INIT WGPU_MAKE_INIT_STRUCT(WGPUExternalTextureBindingEntry, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_ExternalTextureBindingEntry} WGPU_COMMA \\\n    /*.externalTexture=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUBindGroupLayoutEntry\ntypedef struct WGPUExternalTextureBindingLayout {\n    WGPUChainedStruct chain;\n} WGPUExternalTextureBindingLayout WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_EXTERNAL_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUExternalTextureBindingLayout, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_ExternalTextureBindingLayout} WGPU_COMMA \\\n})\n\ntypedef struct WGPUFormatCapabilities {\n    WGPUChainedStructOut * nextInChain;\n} WGPUFormatCapabilities WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_FORMAT_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUFormatCapabilities, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUFuture {\n    uint64_t id;\n} WGPUFuture WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_FUTURE_INIT WGPU_MAKE_INIT_STRUCT(WGPUFuture, { \\\n    /*.id=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUInstanceFeatures {\n    WGPUChainedStruct const * nextInChain;\n    WGPUBool timedWaitAnyEnable;\n    size_t timedWaitAnyMaxCount;\n} WGPUInstanceFeatures WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_INSTANCE_FEATURES_INIT WGPU_MAKE_INIT_STRUCT(WGPUInstanceFeatures, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.timedWaitAnyEnable=*/false WGPU_COMMA \\\n    /*.timedWaitAnyMaxCount=*/0 WGPU_COMMA \\\n})\n\ntypedef struct WGPULimits {\n    uint32_t maxTextureDimension1D;\n    uint32_t maxTextureDimension2D;\n    uint32_t maxTextureDimension3D;\n    uint32_t maxTextureArrayLayers;\n    uint32_t maxBindGroups;\n    uint32_t maxBindGroupsPlusVertexBuffers;\n    uint32_t maxBindingsPerBindGroup;\n    uint32_t maxDynamicUniformBuffersPerPipelineLayout;\n    uint32_t maxDynamicStorageBuffersPerPipelineLayout;\n    uint32_t maxSampledTexturesPerShaderStage;\n    uint32_t maxSamplersPerShaderStage;\n    uint32_t maxStorageBuffersPerShaderStage;\n    uint32_t maxStorageTexturesPerShaderStage;\n    uint32_t maxUniformBuffersPerShaderStage;\n    uint64_t maxUniformBufferBindingSize;\n    uint64_t maxStorageBufferBindingSize;\n    uint32_t minUniformBufferOffsetAlignment;\n    uint32_t minStorageBufferOffsetAlignment;\n    uint32_t maxVertexBuffers;\n    uint64_t maxBufferSize;\n    uint32_t maxVertexAttributes;\n    uint32_t maxVertexBufferArrayStride;\n    uint32_t maxInterStageShaderComponents;\n    uint32_t maxInterStageShaderVariables;\n    uint32_t maxColorAttachments;\n    uint32_t maxColorAttachmentBytesPerSample;\n    uint32_t maxComputeWorkgroupStorageSize;\n    uint32_t maxComputeInvocationsPerWorkgroup;\n    uint32_t maxComputeWorkgroupSizeX;\n    uint32_t maxComputeWorkgroupSizeY;\n    uint32_t maxComputeWorkgroupSizeZ;\n    uint32_t maxComputeWorkgroupsPerDimension;\n} WGPULimits WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(WGPULimits, { \\\n    /*.maxTextureDimension1D=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxTextureDimension2D=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxTextureDimension3D=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxTextureArrayLayers=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxBindGroups=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxBindGroupsPlusVertexBuffers=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxBindingsPerBindGroup=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxDynamicUniformBuffersPerPipelineLayout=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxDynamicStorageBuffersPerPipelineLayout=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxSampledTexturesPerShaderStage=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxSamplersPerShaderStage=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxStorageBuffersPerShaderStage=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxStorageTexturesPerShaderStage=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxUniformBuffersPerShaderStage=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxUniformBufferBindingSize=*/WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA \\\n    /*.maxStorageBufferBindingSize=*/WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA \\\n    /*.minUniformBufferOffsetAlignment=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.minStorageBufferOffsetAlignment=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxVertexBuffers=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxBufferSize=*/WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA \\\n    /*.maxVertexAttributes=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxVertexBufferArrayStride=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxInterStageShaderComponents=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxInterStageShaderVariables=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxColorAttachments=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxColorAttachmentBytesPerSample=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxComputeWorkgroupStorageSize=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxComputeInvocationsPerWorkgroup=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxComputeWorkgroupSizeX=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxComputeWorkgroupSizeY=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxComputeWorkgroupSizeZ=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n    /*.maxComputeWorkgroupsPerDimension=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n})\n\ntypedef struct WGPUMemoryHeapInfo {\n    WGPUHeapProperty properties;\n    uint64_t size;\n} WGPUMemoryHeapInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_MEMORY_HEAP_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUMemoryHeapInfo, { \\\n    /*.properties=*/{} WGPU_COMMA \\\n    /*.size=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUMultisampleState {\n    WGPUChainedStruct const * nextInChain;\n    uint32_t count;\n    uint32_t mask;\n    WGPUBool alphaToCoverageEnabled;\n} WGPUMultisampleState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_MULTISAMPLE_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUMultisampleState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.count=*/1 WGPU_COMMA \\\n    /*.mask=*/0xFFFFFFFF WGPU_COMMA \\\n    /*.alphaToCoverageEnabled=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPUOrigin2D {\n    uint32_t x;\n    uint32_t y;\n} WGPUOrigin2D WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_ORIGIN_2D_INIT WGPU_MAKE_INIT_STRUCT(WGPUOrigin2D, { \\\n    /*.x=*/0 WGPU_COMMA \\\n    /*.y=*/0 WGPU_COMMA \\\n})\n\ntypedef struct WGPUOrigin3D {\n    uint32_t x;\n    uint32_t y;\n    uint32_t z;\n} WGPUOrigin3D WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_ORIGIN_3D_INIT WGPU_MAKE_INIT_STRUCT(WGPUOrigin3D, { \\\n    /*.x=*/0 WGPU_COMMA \\\n    /*.y=*/0 WGPU_COMMA \\\n    /*.z=*/0 WGPU_COMMA \\\n})\n\ntypedef struct WGPUPipelineLayoutStorageAttachment {\n    WGPUChainedStruct const * nextInChain;\n    uint64_t offset;\n    WGPUTextureFormat format;\n} WGPUPipelineLayoutStorageAttachment WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_PIPELINE_LAYOUT_STORAGE_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT(WGPUPipelineLayoutStorageAttachment, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.offset=*/0 WGPU_COMMA \\\n    /*.format=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUPopErrorScopeCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPUPopErrorScopeCallback callback;\n    WGPUErrorCallback oldCallback;\n    void * userdata;\n} WGPUPopErrorScopeCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_POP_ERROR_SCOPE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUPopErrorScopeCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/WGPUCallbackMode_WaitAnyOnly WGPU_COMMA \\\n    /*.callback=*/{} WGPU_COMMA \\\n    /*.oldCallback=*/{} WGPU_COMMA \\\n    /*.userdata=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUPrimitiveState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUPrimitiveTopology topology;\n    WGPUIndexFormat stripIndexFormat;\n    WGPUFrontFace frontFace;\n    WGPUCullMode cullMode;\n    WGPUBool unclippedDepth;\n} WGPUPrimitiveState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_PRIMITIVE_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUPrimitiveState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.topology=*/WGPUPrimitiveTopology_TriangleList WGPU_COMMA \\\n    /*.stripIndexFormat=*/WGPUIndexFormat_Undefined WGPU_COMMA \\\n    /*.frontFace=*/WGPUFrontFace_CCW WGPU_COMMA \\\n    /*.cullMode=*/WGPUCullMode_None WGPU_COMMA \\\n    /*.unclippedDepth=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPUQueueWorkDoneCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPUQueueWorkDoneCallback callback;\n    void * userdata;\n} WGPUQueueWorkDoneCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_QUEUE_WORK_DONE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUQueueWorkDoneCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/{} WGPU_COMMA \\\n    /*.userdata=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPURenderPassDepthStencilAttachment {\n    WGPUTextureView view;\n    WGPULoadOp depthLoadOp;\n    WGPUStoreOp depthStoreOp;\n    float depthClearValue;\n    WGPUBool depthReadOnly;\n    WGPULoadOp stencilLoadOp;\n    WGPUStoreOp stencilStoreOp;\n    uint32_t stencilClearValue;\n    WGPUBool stencilReadOnly;\n} WGPURenderPassDepthStencilAttachment WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PASS_DEPTH_STENCIL_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassDepthStencilAttachment, { \\\n    /*.view=*/{} WGPU_COMMA \\\n    /*.depthLoadOp=*/WGPULoadOp_Undefined WGPU_COMMA \\\n    /*.depthStoreOp=*/WGPUStoreOp_Undefined WGPU_COMMA \\\n    /*.depthClearValue=*/NAN WGPU_COMMA \\\n    /*.depthReadOnly=*/false WGPU_COMMA \\\n    /*.stencilLoadOp=*/WGPULoadOp_Undefined WGPU_COMMA \\\n    /*.stencilStoreOp=*/WGPUStoreOp_Undefined WGPU_COMMA \\\n    /*.stencilClearValue=*/0 WGPU_COMMA \\\n    /*.stencilReadOnly=*/false WGPU_COMMA \\\n})\n\n// Can be chained in WGPURenderPassDescriptor\ntypedef struct WGPURenderPassDescriptorExpandResolveRect {\n    WGPUChainedStruct chain;\n    uint32_t x;\n    uint32_t y;\n    uint32_t width;\n    uint32_t height;\n} WGPURenderPassDescriptorExpandResolveRect WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PASS_DESCRIPTOR_EXPAND_RESOLVE_RECT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassDescriptorExpandResolveRect, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_RenderPassDescriptorExpandResolveRect} WGPU_COMMA \\\n    /*.x=*/{} WGPU_COMMA \\\n    /*.y=*/{} WGPU_COMMA \\\n    /*.width=*/{} WGPU_COMMA \\\n    /*.height=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPURenderPassDescriptor\ntypedef struct WGPURenderPassMaxDrawCount {\n    WGPUChainedStruct chain;\n    uint64_t maxDrawCount;\n} WGPURenderPassMaxDrawCount WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PASS_MAX_DRAW_COUNT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassMaxDrawCount, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_RenderPassMaxDrawCount} WGPU_COMMA \\\n    /*.maxDrawCount=*/50000000 WGPU_COMMA \\\n})\n\ntypedef struct WGPURenderPassTimestampWrites {\n    WGPUQuerySet querySet;\n    uint32_t beginningOfPassWriteIndex;\n    uint32_t endOfPassWriteIndex;\n} WGPURenderPassTimestampWrites WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PASS_TIMESTAMP_WRITES_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassTimestampWrites, { \\\n    /*.querySet=*/{} WGPU_COMMA \\\n    /*.beginningOfPassWriteIndex=*/WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA \\\n    /*.endOfPassWriteIndex=*/WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA \\\n})\n\ntypedef struct WGPURequestAdapterCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPURequestAdapterCallback callback;\n    void * userdata;\n} WGPURequestAdapterCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_REQUEST_ADAPTER_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestAdapterCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/{} WGPU_COMMA \\\n    /*.userdata=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPURequestAdapterOptions {\n    WGPUChainedStruct const * nextInChain;\n    WGPU_NULLABLE WGPUSurface compatibleSurface;\n    WGPUPowerPreference powerPreference;\n    WGPUBackendType backendType;\n    WGPUBool forceFallbackAdapter;\n    WGPUBool compatibilityMode;\n} WGPURequestAdapterOptions WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_REQUEST_ADAPTER_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestAdapterOptions, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.compatibleSurface=*/nullptr WGPU_COMMA \\\n    /*.powerPreference=*/WGPUPowerPreference_Undefined WGPU_COMMA \\\n    /*.backendType=*/WGPUBackendType_Undefined WGPU_COMMA \\\n    /*.forceFallbackAdapter=*/false WGPU_COMMA \\\n    /*.compatibilityMode=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPURequestDeviceCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUCallbackMode mode;\n    WGPURequestDeviceCallback callback;\n    void * userdata;\n} WGPURequestDeviceCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_REQUEST_DEVICE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestDeviceCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.mode=*/{} WGPU_COMMA \\\n    /*.callback=*/{} WGPU_COMMA \\\n    /*.userdata=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSamplerBindingLayout {\n    WGPUChainedStruct const * nextInChain;\n    WGPUSamplerBindingType type;\n} WGPUSamplerBindingLayout WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SAMPLER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUSamplerBindingLayout, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.type=*/WGPUSamplerBindingType_BindingNotUsed WGPU_COMMA \\\n})\n\n// Can be chained in WGPUShaderModuleDescriptor\ntypedef struct WGPUShaderModuleCompilationOptions {\n    WGPUChainedStruct chain;\n    WGPUBool strictMath;\n} WGPUShaderModuleCompilationOptions WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHADER_MODULE_COMPILATION_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT(WGPUShaderModuleCompilationOptions, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_ShaderModuleCompilationOptions} WGPU_COMMA \\\n    /*.strictMath=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUShaderModuleDescriptor\ntypedef struct WGPUShaderSourceSPIRV {\n    WGPUChainedStruct chain;\n    uint32_t codeSize;\n    uint32_t const * code;\n} WGPUShaderSourceSPIRV WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHADER_SOURCE_SPIRV_INIT WGPU_MAKE_INIT_STRUCT(WGPUShaderSourceSPIRV, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_ShaderSourceSPIRV} WGPU_COMMA \\\n    /*.codeSize=*/{} WGPU_COMMA \\\n    /*.code=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedBufferMemoryBeginAccessDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUBool initialized;\n    size_t fenceCount;\n    WGPUSharedFence const * fences;\n    uint64_t const * signaledValues;\n} WGPUSharedBufferMemoryBeginAccessDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_BUFFER_MEMORY_BEGIN_ACCESS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedBufferMemoryBeginAccessDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.initialized=*/{} WGPU_COMMA \\\n    /*.fenceCount=*/0 WGPU_COMMA \\\n    /*.fences=*/{} WGPU_COMMA \\\n    /*.signaledValues=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedBufferMemoryEndAccessState {\n    WGPUChainedStructOut * nextInChain;\n    WGPUBool initialized;\n    size_t fenceCount;\n    WGPUSharedFence const * fences;\n    uint64_t const * signaledValues;\n} WGPUSharedBufferMemoryEndAccessState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_BUFFER_MEMORY_END_ACCESS_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedBufferMemoryEndAccessState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.initialized=*/{} WGPU_COMMA \\\n    /*.fenceCount=*/0 WGPU_COMMA \\\n    /*.fences=*/{} WGPU_COMMA \\\n    /*.signaledValues=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedBufferMemoryProperties {\n    WGPUChainedStructOut * nextInChain;\n    WGPUBufferUsage usage;\n    uint64_t size;\n} WGPUSharedBufferMemoryProperties WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_BUFFER_MEMORY_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedBufferMemoryProperties, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.usage=*/{} WGPU_COMMA \\\n    /*.size=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceDescriptor\ntypedef struct WGPUSharedFenceDXGISharedHandleDescriptor {\n    WGPUChainedStruct chain;\n    void * handle;\n} WGPUSharedFenceDXGISharedHandleDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_DXGI_SHARED_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceDXGISharedHandleDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceDXGISharedHandleDescriptor} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceExportInfo\ntypedef struct WGPUSharedFenceDXGISharedHandleExportInfo {\n    WGPUChainedStructOut chain;\n    void * handle;\n} WGPUSharedFenceDXGISharedHandleExportInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_DXGI_SHARED_HANDLE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceDXGISharedHandleExportInfo, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceDXGISharedHandleExportInfo} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceDescriptor\ntypedef struct WGPUSharedFenceMTLSharedEventDescriptor {\n    WGPUChainedStruct chain;\n    void * sharedEvent;\n} WGPUSharedFenceMTLSharedEventDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_MTL_SHARED_EVENT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceMTLSharedEventDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceMTLSharedEventDescriptor} WGPU_COMMA \\\n    /*.sharedEvent=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceExportInfo\ntypedef struct WGPUSharedFenceMTLSharedEventExportInfo {\n    WGPUChainedStructOut chain;\n    void * sharedEvent;\n} WGPUSharedFenceMTLSharedEventExportInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_MTL_SHARED_EVENT_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceMTLSharedEventExportInfo, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceMTLSharedEventExportInfo} WGPU_COMMA \\\n    /*.sharedEvent=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedFenceExportInfo {\n    WGPUChainedStructOut * nextInChain;\n    WGPUSharedFenceType type;\n} WGPUSharedFenceExportInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceExportInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.type=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceDescriptor\ntypedef struct WGPUSharedFenceSyncFDDescriptor {\n    WGPUChainedStruct chain;\n    int handle;\n} WGPUSharedFenceSyncFDDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_SYNC_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceSyncFDDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceSyncFDDescriptor} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceExportInfo\ntypedef struct WGPUSharedFenceSyncFDExportInfo {\n    WGPUChainedStructOut chain;\n    int handle;\n} WGPUSharedFenceSyncFDExportInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_SYNC_FD_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceSyncFDExportInfo, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceSyncFDExportInfo} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceDescriptor\ntypedef struct WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor {\n    WGPUChainedStruct chain;\n    int handle;\n} WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_VK_SEMAPHORE_OPAQUE_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceExportInfo\ntypedef struct WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo {\n    WGPUChainedStructOut chain;\n    int handle;\n} WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_VK_SEMAPHORE_OPAQUE_FD_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceDescriptor\ntypedef struct WGPUSharedFenceVkSemaphoreZirconHandleDescriptor {\n    WGPUChainedStruct chain;\n    uint32_t handle;\n} WGPUSharedFenceVkSemaphoreZirconHandleDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_VK_SEMAPHORE_ZIRCON_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceVkSemaphoreZirconHandleDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedFenceExportInfo\ntypedef struct WGPUSharedFenceVkSemaphoreZirconHandleExportInfo {\n    WGPUChainedStructOut chain;\n    uint32_t handle;\n} WGPUSharedFenceVkSemaphoreZirconHandleExportInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_VK_SEMAPHORE_ZIRCON_HANDLE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceVkSemaphoreZirconHandleExportInfo, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryBeginAccessDescriptor\ntypedef struct WGPUSharedTextureMemoryD3DSwapchainBeginState {\n    WGPUChainedStruct chain;\n    WGPUBool isSwapchain;\n} WGPUSharedTextureMemoryD3DSwapchainBeginState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_D3D_SWAPCHAIN_BEGIN_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryD3DSwapchainBeginState, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryD3DSwapchainBeginState} WGPU_COMMA \\\n    /*.isSwapchain=*/false WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryDescriptor\ntypedef struct WGPUSharedTextureMemoryDXGISharedHandleDescriptor {\n    WGPUChainedStruct chain;\n    void * handle;\n    WGPUBool useKeyedMutex;\n} WGPUSharedTextureMemoryDXGISharedHandleDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_DXGI_SHARED_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryDXGISharedHandleDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n    /*.useKeyedMutex=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryDescriptor\ntypedef struct WGPUSharedTextureMemoryEGLImageDescriptor {\n    WGPUChainedStruct chain;\n    void * image;\n} WGPUSharedTextureMemoryEGLImageDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_EGL_IMAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryEGLImageDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryEGLImageDescriptor} WGPU_COMMA \\\n    /*.image=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryDescriptor\ntypedef struct WGPUSharedTextureMemoryIOSurfaceDescriptor {\n    WGPUChainedStruct chain;\n    void * ioSurface;\n} WGPUSharedTextureMemoryIOSurfaceDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_IO_SURFACE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryIOSurfaceDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryIOSurfaceDescriptor} WGPU_COMMA \\\n    /*.ioSurface=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryDescriptor\ntypedef struct WGPUSharedTextureMemoryAHardwareBufferDescriptor {\n    WGPUChainedStruct chain;\n    void * handle;\n    WGPUBool useExternalFormat;\n} WGPUSharedTextureMemoryAHardwareBufferDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_A_HARDWARE_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryAHardwareBufferDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor} WGPU_COMMA \\\n    /*.handle=*/{} WGPU_COMMA \\\n    /*.useExternalFormat=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedTextureMemoryBeginAccessDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUBool concurrentRead;\n    WGPUBool initialized;\n    size_t fenceCount;\n    WGPUSharedFence const * fences;\n    uint64_t const * signaledValues;\n} WGPUSharedTextureMemoryBeginAccessDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_BEGIN_ACCESS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryBeginAccessDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.concurrentRead=*/{} WGPU_COMMA \\\n    /*.initialized=*/{} WGPU_COMMA \\\n    /*.fenceCount=*/{} WGPU_COMMA \\\n    /*.fences=*/{} WGPU_COMMA \\\n    /*.signaledValues=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedTextureMemoryDmaBufPlane {\n    int fd;\n    uint64_t offset;\n    uint32_t stride;\n} WGPUSharedTextureMemoryDmaBufPlane WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_DMA_BUF_PLANE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryDmaBufPlane, { \\\n    /*.fd=*/{} WGPU_COMMA \\\n    /*.offset=*/{} WGPU_COMMA \\\n    /*.stride=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedTextureMemoryEndAccessState {\n    WGPUChainedStructOut * nextInChain;\n    WGPUBool initialized;\n    size_t fenceCount;\n    WGPUSharedFence const * fences;\n    uint64_t const * signaledValues;\n} WGPUSharedTextureMemoryEndAccessState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_END_ACCESS_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryEndAccessState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.initialized=*/{} WGPU_COMMA \\\n    /*.fenceCount=*/{} WGPU_COMMA \\\n    /*.fences=*/{} WGPU_COMMA \\\n    /*.signaledValues=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryDescriptor\ntypedef struct WGPUSharedTextureMemoryOpaqueFDDescriptor {\n    WGPUChainedStruct chain;\n    void const * vkImageCreateInfo;\n    int memoryFD;\n    uint32_t memoryTypeIndex;\n    uint64_t allocationSize;\n    WGPUBool dedicatedAllocation;\n} WGPUSharedTextureMemoryOpaqueFDDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_OPAQUE_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryOpaqueFDDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryOpaqueFDDescriptor} WGPU_COMMA \\\n    /*.vkImageCreateInfo=*/{} WGPU_COMMA \\\n    /*.memoryFD=*/{} WGPU_COMMA \\\n    /*.memoryTypeIndex=*/{} WGPU_COMMA \\\n    /*.allocationSize=*/{} WGPU_COMMA \\\n    /*.dedicatedAllocation=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryDescriptor\ntypedef struct WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor {\n    WGPUChainedStruct chain;\n    WGPUBool dedicatedAllocation;\n} WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_VK_DEDICATED_ALLOCATION_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor} WGPU_COMMA \\\n    /*.dedicatedAllocation=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryBeginAccessDescriptor\ntypedef struct WGPUSharedTextureMemoryVkImageLayoutBeginState {\n    WGPUChainedStruct chain;\n    int32_t oldLayout;\n    int32_t newLayout;\n} WGPUSharedTextureMemoryVkImageLayoutBeginState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_VK_IMAGE_LAYOUT_BEGIN_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryVkImageLayoutBeginState, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryVkImageLayoutBeginState} WGPU_COMMA \\\n    /*.oldLayout=*/{} WGPU_COMMA \\\n    /*.newLayout=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryEndAccessState\ntypedef struct WGPUSharedTextureMemoryVkImageLayoutEndState {\n    WGPUChainedStructOut chain;\n    int32_t oldLayout;\n    int32_t newLayout;\n} WGPUSharedTextureMemoryVkImageLayoutEndState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_VK_IMAGE_LAYOUT_END_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryVkImageLayoutEndState, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryVkImageLayoutEndState} WGPU_COMMA \\\n    /*.oldLayout=*/{} WGPU_COMMA \\\n    /*.newLayout=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryDescriptor\ntypedef struct WGPUSharedTextureMemoryZirconHandleDescriptor {\n    WGPUChainedStruct chain;\n    uint32_t memoryFD;\n    uint64_t allocationSize;\n} WGPUSharedTextureMemoryZirconHandleDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_ZIRCON_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryZirconHandleDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryZirconHandleDescriptor} WGPU_COMMA \\\n    /*.memoryFD=*/{} WGPU_COMMA \\\n    /*.allocationSize=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUBindGroupLayoutEntry\ntypedef struct WGPUStaticSamplerBindingLayout {\n    WGPUChainedStruct chain;\n    WGPUSampler sampler;\n    uint32_t sampledTextureBinding;\n} WGPUStaticSamplerBindingLayout WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_STATIC_SAMPLER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUStaticSamplerBindingLayout, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_StaticSamplerBindingLayout} WGPU_COMMA \\\n    /*.sampler=*/{} WGPU_COMMA \\\n    /*.sampledTextureBinding=*/WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \\\n})\n\ntypedef struct WGPUStencilFaceState {\n    WGPUCompareFunction compare;\n    WGPUStencilOperation failOp;\n    WGPUStencilOperation depthFailOp;\n    WGPUStencilOperation passOp;\n} WGPUStencilFaceState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_STENCIL_FACE_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUStencilFaceState, { \\\n    /*.compare=*/WGPUCompareFunction_Always WGPU_COMMA \\\n    /*.failOp=*/WGPUStencilOperation_Keep WGPU_COMMA \\\n    /*.depthFailOp=*/WGPUStencilOperation_Keep WGPU_COMMA \\\n    /*.passOp=*/WGPUStencilOperation_Keep WGPU_COMMA \\\n})\n\ntypedef struct WGPUStorageTextureBindingLayout {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStorageTextureAccess access;\n    WGPUTextureFormat format;\n    WGPUTextureViewDimension viewDimension;\n} WGPUStorageTextureBindingLayout WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUStorageTextureBindingLayout, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.access=*/WGPUStorageTextureAccess_BindingNotUsed WGPU_COMMA \\\n    /*.format=*/WGPUTextureFormat_Undefined WGPU_COMMA \\\n    /*.viewDimension=*/WGPUTextureViewDimension_2D WGPU_COMMA \\\n})\n\ntypedef struct WGPUStringView {\n    WGPU_NULLABLE char const * data;\n    size_t length;\n} WGPUStringView WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_STRING_VIEW_INIT WGPU_MAKE_INIT_STRUCT(WGPUStringView, { \\\n    /*.data=*/nullptr WGPU_COMMA \\\n    /*.length=*/WGPU_STRLEN WGPU_COMMA \\\n})\n\ntypedef struct WGPUSupportedFeatures {\n    size_t featureCount;\n    WGPUFeatureName const * features;\n} WGPUSupportedFeatures WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SUPPORTED_FEATURES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSupportedFeatures, { \\\n    /*.featureCount=*/{} WGPU_COMMA \\\n    /*.features=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSurfaceCapabilities {\n    WGPUChainedStructOut * nextInChain;\n    WGPUTextureUsage usages;\n    size_t formatCount;\n    WGPUTextureFormat const * formats;\n    size_t presentModeCount;\n    WGPUPresentMode const * presentModes;\n    size_t alphaModeCount;\n    WGPUCompositeAlphaMode const * alphaModes;\n} WGPUSurfaceCapabilities WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceCapabilities, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.usages=*/{} WGPU_COMMA \\\n    /*.formatCount=*/{} WGPU_COMMA \\\n    /*.formats=*/{} WGPU_COMMA \\\n    /*.presentModeCount=*/{} WGPU_COMMA \\\n    /*.presentModes=*/{} WGPU_COMMA \\\n    /*.alphaModeCount=*/{} WGPU_COMMA \\\n    /*.alphaModes=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSurfaceConfiguration {\n    WGPUChainedStruct const * nextInChain;\n    WGPUDevice device;\n    WGPUTextureFormat format;\n    WGPUTextureUsage usage;\n    size_t viewFormatCount;\n    WGPUTextureFormat const * viewFormats;\n    WGPUCompositeAlphaMode alphaMode;\n    uint32_t width;\n    uint32_t height;\n    WGPUPresentMode presentMode;\n} WGPUSurfaceConfiguration WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_CONFIGURATION_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceConfiguration, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.device=*/{} WGPU_COMMA \\\n    /*.format=*/{} WGPU_COMMA \\\n    /*.usage=*/WGPUTextureUsage_RenderAttachment WGPU_COMMA \\\n    /*.viewFormatCount=*/0 WGPU_COMMA \\\n    /*.viewFormats=*/nullptr WGPU_COMMA \\\n    /*.alphaMode=*/WGPUCompositeAlphaMode_Auto WGPU_COMMA \\\n    /*.width=*/{} WGPU_COMMA \\\n    /*.height=*/{} WGPU_COMMA \\\n    /*.presentMode=*/WGPUPresentMode_Fifo WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromWindowsCoreWindow {\n    WGPUChainedStruct chain;\n    void * coreWindow;\n} WGPUSurfaceDescriptorFromWindowsCoreWindow WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_DESCRIPTOR_FROM_WINDOWS_CORE_WINDOW_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceDescriptorFromWindowsCoreWindow, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceDescriptorFromWindowsCoreWindow} WGPU_COMMA \\\n    /*.coreWindow=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromWindowsSwapChainPanel {\n    WGPUChainedStruct chain;\n    void * swapChainPanel;\n} WGPUSurfaceDescriptorFromWindowsSwapChainPanel WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_DESCRIPTOR_FROM_WINDOWS_SWAP_CHAIN_PANEL_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceDescriptorFromWindowsSwapChainPanel, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel} WGPU_COMMA \\\n    /*.swapChainPanel=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceSourceXCBWindow {\n    WGPUChainedStruct chain;\n    void * connection;\n    uint32_t window;\n} WGPUSurfaceSourceXCBWindow WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_SOURCE_XCB_WINDOW_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceXCBWindow, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceSourceXCBWindow} WGPU_COMMA \\\n    /*.connection=*/{} WGPU_COMMA \\\n    /*.window=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceSourceAndroidNativeWindow {\n    WGPUChainedStruct chain;\n    void * window;\n} WGPUSurfaceSourceAndroidNativeWindow WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_SOURCE_ANDROID_NATIVE_WINDOW_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceAndroidNativeWindow, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceSourceAndroidNativeWindow} WGPU_COMMA \\\n    /*.window=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceSourceMetalLayer {\n    WGPUChainedStruct chain;\n    void * layer;\n} WGPUSurfaceSourceMetalLayer WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_SOURCE_METAL_LAYER_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceMetalLayer, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceSourceMetalLayer} WGPU_COMMA \\\n    /*.layer=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceSourceWaylandSurface {\n    WGPUChainedStruct chain;\n    void * display;\n    void * surface;\n} WGPUSurfaceSourceWaylandSurface WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_SOURCE_WAYLAND_SURFACE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceWaylandSurface, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceSourceWaylandSurface} WGPU_COMMA \\\n    /*.display=*/{} WGPU_COMMA \\\n    /*.surface=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceSourceWindowsHWND {\n    WGPUChainedStruct chain;\n    void * hinstance;\n    void * hwnd;\n} WGPUSurfaceSourceWindowsHWND WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_SOURCE_WINDOWS_HWND_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceWindowsHWND, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceSourceWindowsHWND} WGPU_COMMA \\\n    /*.hinstance=*/{} WGPU_COMMA \\\n    /*.hwnd=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceSourceXlibWindow {\n    WGPUChainedStruct chain;\n    void * display;\n    uint64_t window;\n} WGPUSurfaceSourceXlibWindow WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_SOURCE_XLIB_WINDOW_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceXlibWindow, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceSourceXlibWindow} WGPU_COMMA \\\n    /*.display=*/{} WGPU_COMMA \\\n    /*.window=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSurfaceTexture {\n    WGPUTexture texture;\n    WGPUBool suboptimal;\n    WGPUSurfaceGetCurrentTextureStatus status;\n} WGPUSurfaceTexture WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceTexture, { \\\n    /*.texture=*/{} WGPU_COMMA \\\n    /*.suboptimal=*/{} WGPU_COMMA \\\n    /*.status=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUTextureBindingLayout {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureSampleType sampleType;\n    WGPUTextureViewDimension viewDimension;\n    WGPUBool multisampled;\n} WGPUTextureBindingLayout WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureBindingLayout, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.sampleType=*/WGPUTextureSampleType_BindingNotUsed WGPU_COMMA \\\n    /*.viewDimension=*/WGPUTextureViewDimension_2D WGPU_COMMA \\\n    /*.multisampled=*/false WGPU_COMMA \\\n})\n\n// Can be chained in WGPUTextureDescriptor\ntypedef struct WGPUTextureBindingViewDimensionDescriptor {\n    WGPUChainedStruct chain;\n    WGPUTextureViewDimension textureBindingViewDimension;\n} WGPUTextureBindingViewDimensionDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_TEXTURE_BINDING_VIEW_DIMENSION_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureBindingViewDimensionDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_TextureBindingViewDimensionDescriptor} WGPU_COMMA \\\n    /*.textureBindingViewDimension=*/WGPUTextureViewDimension_Undefined WGPU_COMMA \\\n})\n\ntypedef struct WGPUTextureDataLayout {\n    WGPUChainedStruct const * nextInChain;\n    uint64_t offset;\n    uint32_t bytesPerRow;\n    uint32_t rowsPerImage;\n} WGPUTextureDataLayout WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_TEXTURE_DATA_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureDataLayout, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.offset=*/0 WGPU_COMMA \\\n    /*.bytesPerRow=*/WGPU_COPY_STRIDE_UNDEFINED WGPU_COMMA \\\n    /*.rowsPerImage=*/WGPU_COPY_STRIDE_UNDEFINED WGPU_COMMA \\\n})\n\ntypedef struct WGPUUncapturedErrorCallbackInfo {\n    WGPUChainedStruct const * nextInChain;\n    WGPUErrorCallback callback;\n    void * userdata;\n} WGPUUncapturedErrorCallbackInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_UNCAPTURED_ERROR_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUUncapturedErrorCallbackInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.callback=*/nullptr WGPU_COMMA \\\n    /*.userdata=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUVertexAttribute {\n    WGPUVertexFormat format;\n    uint64_t offset;\n    uint32_t shaderLocation;\n} WGPUVertexAttribute WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_VERTEX_ATTRIBUTE_INIT WGPU_MAKE_INIT_STRUCT(WGPUVertexAttribute, { \\\n    /*.format=*/{} WGPU_COMMA \\\n    /*.offset=*/{} WGPU_COMMA \\\n    /*.shaderLocation=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSamplerDescriptor\n// Can be chained in WGPUTextureViewDescriptor\ntypedef struct WGPUYCbCrVkDescriptor {\n    WGPUChainedStruct chain;\n    uint32_t vkFormat;\n    uint32_t vkYCbCrModel;\n    uint32_t vkYCbCrRange;\n    uint32_t vkComponentSwizzleRed;\n    uint32_t vkComponentSwizzleGreen;\n    uint32_t vkComponentSwizzleBlue;\n    uint32_t vkComponentSwizzleAlpha;\n    uint32_t vkXChromaOffset;\n    uint32_t vkYChromaOffset;\n    WGPUFilterMode vkChromaFilter;\n    WGPUBool forceExplicitReconstruction;\n    uint64_t externalFormat;\n} WGPUYCbCrVkDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUYCbCrVkDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_YCbCrVkDescriptor} WGPU_COMMA \\\n    /*.vkFormat=*/0 WGPU_COMMA \\\n    /*.vkYCbCrModel=*/0 WGPU_COMMA \\\n    /*.vkYCbCrRange=*/0 WGPU_COMMA \\\n    /*.vkComponentSwizzleRed=*/0 WGPU_COMMA \\\n    /*.vkComponentSwizzleGreen=*/0 WGPU_COMMA \\\n    /*.vkComponentSwizzleBlue=*/0 WGPU_COMMA \\\n    /*.vkComponentSwizzleAlpha=*/0 WGPU_COMMA \\\n    /*.vkXChromaOffset=*/0 WGPU_COMMA \\\n    /*.vkYChromaOffset=*/0 WGPU_COMMA \\\n    /*.vkChromaFilter=*/WGPUFilterMode_Nearest WGPU_COMMA \\\n    /*.forceExplicitReconstruction=*/false WGPU_COMMA \\\n    /*.externalFormat=*/0 WGPU_COMMA \\\n})\n\ntypedef struct WGPUAHardwareBufferProperties {\n    WGPUYCbCrVkDescriptor yCbCrInfo;\n} WGPUAHardwareBufferProperties WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_A_HARDWARE_BUFFER_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUAHardwareBufferProperties, { \\\n    /*.yCbCrInfo=*/WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUAdapterInfo {\n    WGPUChainedStructOut * nextInChain;\n    WGPUStringView vendor;\n    WGPUStringView architecture;\n    WGPUStringView device;\n    WGPUStringView description;\n    WGPUBackendType backendType;\n    WGPUAdapterType adapterType;\n    uint32_t vendorID;\n    uint32_t deviceID;\n    WGPUBool compatibilityMode;\n} WGPUAdapterInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_ADAPTER_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.vendor=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.architecture=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.device=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.description=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.backendType=*/{} WGPU_COMMA \\\n    /*.adapterType=*/{} WGPU_COMMA \\\n    /*.vendorID=*/{} WGPU_COMMA \\\n    /*.deviceID=*/{} WGPU_COMMA \\\n    /*.compatibilityMode=*/false WGPU_COMMA \\\n})\n\n// Can be chained in WGPUAdapterInfo\ntypedef struct WGPUAdapterPropertiesMemoryHeaps {\n    WGPUChainedStructOut chain;\n    size_t heapCount;\n    WGPUMemoryHeapInfo const * heapInfo;\n} WGPUAdapterPropertiesMemoryHeaps WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_ADAPTER_PROPERTIES_MEMORY_HEAPS_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterPropertiesMemoryHeaps, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_AdapterPropertiesMemoryHeaps} WGPU_COMMA \\\n    /*.heapCount=*/{} WGPU_COMMA \\\n    /*.heapInfo=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUBindGroupDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPUBindGroupLayout layout;\n    size_t entryCount;\n    WGPUBindGroupEntry const * entries;\n} WGPUBindGroupDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BIND_GROUP_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUBindGroupDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.layout=*/{} WGPU_COMMA \\\n    /*.entryCount=*/{} WGPU_COMMA \\\n    /*.entries=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUBindGroupLayoutEntry {\n    WGPUChainedStruct const * nextInChain;\n    uint32_t binding;\n    WGPUShaderStage visibility;\n    WGPUBufferBindingLayout buffer;\n    WGPUSamplerBindingLayout sampler;\n    WGPUTextureBindingLayout texture;\n    WGPUStorageTextureBindingLayout storageTexture;\n} WGPUBindGroupLayoutEntry WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BIND_GROUP_LAYOUT_ENTRY_INIT WGPU_MAKE_INIT_STRUCT(WGPUBindGroupLayoutEntry, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.binding=*/{} WGPU_COMMA \\\n    /*.visibility=*/{} WGPU_COMMA \\\n    /*.buffer=*/WGPU_BUFFER_BINDING_LAYOUT_INIT WGPU_COMMA \\\n    /*.sampler=*/WGPU_SAMPLER_BINDING_LAYOUT_INIT WGPU_COMMA \\\n    /*.texture=*/WGPU_TEXTURE_BINDING_LAYOUT_INIT WGPU_COMMA \\\n    /*.storageTexture=*/WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUBlendState {\n    WGPUBlendComponent color;\n    WGPUBlendComponent alpha;\n} WGPUBlendState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BLEND_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUBlendState, { \\\n    /*.color=*/WGPU_BLEND_COMPONENT_INIT WGPU_COMMA \\\n    /*.alpha=*/WGPU_BLEND_COMPONENT_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUBufferDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPUBufferUsage usage;\n    uint64_t size;\n    WGPUBool mappedAtCreation;\n} WGPUBufferDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.usage=*/{} WGPU_COMMA \\\n    /*.size=*/{} WGPU_COMMA \\\n    /*.mappedAtCreation=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPUCommandBufferDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPUCommandBufferDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMMAND_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUCommandBufferDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUCommandEncoderDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPUCommandEncoderDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMMAND_ENCODER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUCommandEncoderDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUCompilationMessage {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView message;\n    WGPUCompilationMessageType type;\n    uint64_t lineNum;\n    uint64_t linePos;\n    uint64_t offset;\n    uint64_t length;\n    uint64_t utf16LinePos;\n    uint64_t utf16Offset;\n    uint64_t utf16Length;\n} WGPUCompilationMessage WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMPILATION_MESSAGE_INIT WGPU_MAKE_INIT_STRUCT(WGPUCompilationMessage, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.message=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.type=*/{} WGPU_COMMA \\\n    /*.lineNum=*/{} WGPU_COMMA \\\n    /*.linePos=*/{} WGPU_COMMA \\\n    /*.offset=*/{} WGPU_COMMA \\\n    /*.length=*/{} WGPU_COMMA \\\n    /*.utf16LinePos=*/{} WGPU_COMMA \\\n    /*.utf16Offset=*/{} WGPU_COMMA \\\n    /*.utf16Length=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUComputePassDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPU_NULLABLE WGPUComputePassTimestampWrites const * timestampWrites;\n} WGPUComputePassDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMPUTE_PASS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUComputePassDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.timestampWrites=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUConstantEntry {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView key;\n    double value;\n} WGPUConstantEntry WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_CONSTANT_ENTRY_INIT WGPU_MAKE_INIT_STRUCT(WGPUConstantEntry, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.key=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.value=*/{} WGPU_COMMA \\\n})\n\n// Can be chained in WGPUDeviceDescriptor\ntypedef struct WGPUDawnCacheDeviceDescriptor {\n    WGPUChainedStruct chain;\n    WGPUStringView isolationKey;\n    WGPUDawnLoadCacheDataFunction loadDataFunction;\n    WGPUDawnStoreCacheDataFunction storeDataFunction;\n    void * functionUserdata;\n} WGPUDawnCacheDeviceDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DAWN_CACHE_DEVICE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnCacheDeviceDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DawnCacheDeviceDescriptor} WGPU_COMMA \\\n    /*.isolationKey=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.loadDataFunction=*/nullptr WGPU_COMMA \\\n    /*.storeDataFunction=*/nullptr WGPU_COMMA \\\n    /*.functionUserdata=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUDepthStencilState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureFormat format;\n    WGPUOptionalBool depthWriteEnabled;\n    WGPUCompareFunction depthCompare;\n    WGPUStencilFaceState stencilFront;\n    WGPUStencilFaceState stencilBack;\n    uint32_t stencilReadMask;\n    uint32_t stencilWriteMask;\n    int32_t depthBias;\n    float depthBiasSlopeScale;\n    float depthBiasClamp;\n} WGPUDepthStencilState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DEPTH_STENCIL_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUDepthStencilState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.format=*/{} WGPU_COMMA \\\n    /*.depthWriteEnabled=*/WGPUOptionalBool_Undefined WGPU_COMMA \\\n    /*.depthCompare=*/WGPUCompareFunction_Undefined WGPU_COMMA \\\n    /*.stencilFront=*/WGPU_STENCIL_FACE_STATE_INIT WGPU_COMMA \\\n    /*.stencilBack=*/WGPU_STENCIL_FACE_STATE_INIT WGPU_COMMA \\\n    /*.stencilReadMask=*/0xFFFFFFFF WGPU_COMMA \\\n    /*.stencilWriteMask=*/0xFFFFFFFF WGPU_COMMA \\\n    /*.depthBias=*/0 WGPU_COMMA \\\n    /*.depthBiasSlopeScale=*/0.0f WGPU_COMMA \\\n    /*.depthBiasClamp=*/0.0f WGPU_COMMA \\\n})\n\n// Can be chained in WGPUFormatCapabilities\ntypedef struct WGPUDrmFormatCapabilities {\n    WGPUChainedStructOut chain;\n    size_t propertiesCount;\n    WGPUDrmFormatProperties const * properties;\n} WGPUDrmFormatCapabilities WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DRM_FORMAT_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUDrmFormatCapabilities, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_DrmFormatCapabilities} WGPU_COMMA \\\n    /*.propertiesCount=*/{} WGPU_COMMA \\\n    /*.properties=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUExternalTextureDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPUTextureView plane0;\n    WGPU_NULLABLE WGPUTextureView plane1;\n    WGPUOrigin2D cropOrigin;\n    WGPUExtent2D cropSize;\n    WGPUExtent2D apparentSize;\n    WGPUBool doYuvToRgbConversionOnly;\n    WGPU_NULLABLE float const * yuvToRgbConversionMatrix;\n    float const * srcTransferFunctionParameters;\n    float const * dstTransferFunctionParameters;\n    float const * gamutConversionMatrix;\n    WGPUBool mirrored;\n    WGPUExternalTextureRotation rotation;\n} WGPUExternalTextureDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUExternalTextureDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.plane0=*/{} WGPU_COMMA \\\n    /*.plane1=*/nullptr WGPU_COMMA \\\n    /*.cropOrigin=*/WGPU_ORIGIN_2D_INIT WGPU_COMMA \\\n    /*.cropSize=*/WGPU_EXTENT_2D_INIT WGPU_COMMA \\\n    /*.apparentSize=*/WGPU_EXTENT_2D_INIT WGPU_COMMA \\\n    /*.doYuvToRgbConversionOnly=*/false WGPU_COMMA \\\n    /*.yuvToRgbConversionMatrix=*/nullptr WGPU_COMMA \\\n    /*.srcTransferFunctionParameters=*/{} WGPU_COMMA \\\n    /*.dstTransferFunctionParameters=*/{} WGPU_COMMA \\\n    /*.gamutConversionMatrix=*/{} WGPU_COMMA \\\n    /*.mirrored=*/false WGPU_COMMA \\\n    /*.rotation=*/WGPUExternalTextureRotation_Rotate0Degrees WGPU_COMMA \\\n})\n\ntypedef struct WGPUFutureWaitInfo {\n    WGPUFuture future;\n    WGPUBool completed;\n} WGPUFutureWaitInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_FUTURE_WAIT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUFutureWaitInfo, { \\\n    /*.future=*/WGPU_FUTURE_INIT WGPU_COMMA \\\n    /*.completed=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPUImageCopyBuffer {\n    WGPUTextureDataLayout layout;\n    WGPUBuffer buffer;\n} WGPUImageCopyBuffer WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_IMAGE_COPY_BUFFER_INIT WGPU_MAKE_INIT_STRUCT(WGPUImageCopyBuffer, { \\\n    /*.layout=*/WGPU_TEXTURE_DATA_LAYOUT_INIT WGPU_COMMA \\\n    /*.buffer=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUImageCopyExternalTexture {\n    WGPUChainedStruct const * nextInChain;\n    WGPUExternalTexture externalTexture;\n    WGPUOrigin3D origin;\n    WGPUExtent2D naturalSize;\n} WGPUImageCopyExternalTexture WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_IMAGE_COPY_EXTERNAL_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT(WGPUImageCopyExternalTexture, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.externalTexture=*/{} WGPU_COMMA \\\n    /*.origin=*/WGPU_ORIGIN_3D_INIT WGPU_COMMA \\\n    /*.naturalSize=*/WGPU_EXTENT_2D_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUImageCopyTexture {\n    WGPUTexture texture;\n    uint32_t mipLevel;\n    WGPUOrigin3D origin;\n    WGPUTextureAspect aspect;\n} WGPUImageCopyTexture WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_IMAGE_COPY_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT(WGPUImageCopyTexture, { \\\n    /*.texture=*/{} WGPU_COMMA \\\n    /*.mipLevel=*/0 WGPU_COMMA \\\n    /*.origin=*/WGPU_ORIGIN_3D_INIT WGPU_COMMA \\\n    /*.aspect=*/WGPUTextureAspect_All WGPU_COMMA \\\n})\n\ntypedef struct WGPUInstanceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUInstanceFeatures features;\n} WGPUInstanceDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_INSTANCE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUInstanceDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.features=*/WGPU_INSTANCE_FEATURES_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUPipelineLayoutDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    size_t bindGroupLayoutCount;\n    WGPU_NULLABLE WGPUBindGroupLayout const * bindGroupLayouts;\n    uint32_t immediateDataRangeByteSize;\n} WGPUPipelineLayoutDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_PIPELINE_LAYOUT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUPipelineLayoutDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.bindGroupLayoutCount=*/{} WGPU_COMMA \\\n    /*.bindGroupLayouts=*/nullptr WGPU_COMMA \\\n    /*.immediateDataRangeByteSize=*/0 WGPU_COMMA \\\n})\n\n// Can be chained in WGPUPipelineLayoutDescriptor\ntypedef struct WGPUPipelineLayoutPixelLocalStorage {\n    WGPUChainedStruct chain;\n    uint64_t totalPixelLocalStorageSize;\n    size_t storageAttachmentCount;\n    WGPUPipelineLayoutStorageAttachment const * storageAttachments;\n} WGPUPipelineLayoutPixelLocalStorage WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_PIPELINE_LAYOUT_PIXEL_LOCAL_STORAGE_INIT WGPU_MAKE_INIT_STRUCT(WGPUPipelineLayoutPixelLocalStorage, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_PipelineLayoutPixelLocalStorage} WGPU_COMMA \\\n    /*.totalPixelLocalStorageSize=*/{} WGPU_COMMA \\\n    /*.storageAttachmentCount=*/0 WGPU_COMMA \\\n    /*.storageAttachments=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUQuerySetDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPUQueryType type;\n    uint32_t count;\n} WGPUQuerySetDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_QUERY_SET_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUQuerySetDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.type=*/{} WGPU_COMMA \\\n    /*.count=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUQueueDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPUQueueDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_QUEUE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUQueueDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPURenderBundleDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPURenderBundleDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_BUNDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderBundleDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPURenderBundleEncoderDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    size_t colorFormatCount;\n    WGPUTextureFormat const * colorFormats;\n    WGPUTextureFormat depthStencilFormat;\n    uint32_t sampleCount;\n    WGPUBool depthReadOnly;\n    WGPUBool stencilReadOnly;\n} WGPURenderBundleEncoderDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_BUNDLE_ENCODER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderBundleEncoderDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.colorFormatCount=*/{} WGPU_COMMA \\\n    /*.colorFormats=*/{} WGPU_COMMA \\\n    /*.depthStencilFormat=*/WGPUTextureFormat_Undefined WGPU_COMMA \\\n    /*.sampleCount=*/1 WGPU_COMMA \\\n    /*.depthReadOnly=*/false WGPU_COMMA \\\n    /*.stencilReadOnly=*/false WGPU_COMMA \\\n})\n\ntypedef struct WGPURenderPassColorAttachment {\n    WGPUChainedStruct const * nextInChain;\n    WGPU_NULLABLE WGPUTextureView view;\n    uint32_t depthSlice;\n    WGPU_NULLABLE WGPUTextureView resolveTarget;\n    WGPULoadOp loadOp;\n    WGPUStoreOp storeOp;\n    WGPUColor clearValue;\n} WGPURenderPassColorAttachment WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PASS_COLOR_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassColorAttachment, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.view=*/nullptr WGPU_COMMA \\\n    /*.depthSlice=*/WGPU_DEPTH_SLICE_UNDEFINED WGPU_COMMA \\\n    /*.resolveTarget=*/nullptr WGPU_COMMA \\\n    /*.loadOp=*/{} WGPU_COMMA \\\n    /*.storeOp=*/{} WGPU_COMMA \\\n    /*.clearValue=*/WGPU_COLOR_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPURenderPassStorageAttachment {\n    WGPUChainedStruct const * nextInChain;\n    uint64_t offset;\n    WGPUTextureView storage;\n    WGPULoadOp loadOp;\n    WGPUStoreOp storeOp;\n    WGPUColor clearValue;\n} WGPURenderPassStorageAttachment WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PASS_STORAGE_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassStorageAttachment, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.offset=*/0 WGPU_COMMA \\\n    /*.storage=*/{} WGPU_COMMA \\\n    /*.loadOp=*/{} WGPU_COMMA \\\n    /*.storeOp=*/{} WGPU_COMMA \\\n    /*.clearValue=*/WGPU_COLOR_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPURequiredLimits {\n    WGPUChainedStruct const * nextInChain;\n    WGPULimits limits;\n} WGPURequiredLimits WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_REQUIRED_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(WGPURequiredLimits, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.limits=*/WGPU_LIMITS_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUSamplerDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPUAddressMode addressModeU;\n    WGPUAddressMode addressModeV;\n    WGPUAddressMode addressModeW;\n    WGPUFilterMode magFilter;\n    WGPUFilterMode minFilter;\n    WGPUMipmapFilterMode mipmapFilter;\n    float lodMinClamp;\n    float lodMaxClamp;\n    WGPUCompareFunction compare;\n    uint16_t maxAnisotropy;\n} WGPUSamplerDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SAMPLER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSamplerDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.addressModeU=*/WGPUAddressMode_ClampToEdge WGPU_COMMA \\\n    /*.addressModeV=*/WGPUAddressMode_ClampToEdge WGPU_COMMA \\\n    /*.addressModeW=*/WGPUAddressMode_ClampToEdge WGPU_COMMA \\\n    /*.magFilter=*/WGPUFilterMode_Nearest WGPU_COMMA \\\n    /*.minFilter=*/WGPUFilterMode_Nearest WGPU_COMMA \\\n    /*.mipmapFilter=*/WGPUMipmapFilterMode_Nearest WGPU_COMMA \\\n    /*.lodMinClamp=*/0.0f WGPU_COMMA \\\n    /*.lodMaxClamp=*/32.0f WGPU_COMMA \\\n    /*.compare=*/WGPUCompareFunction_Undefined WGPU_COMMA \\\n    /*.maxAnisotropy=*/1 WGPU_COMMA \\\n})\n\ntypedef struct WGPUShaderModuleDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPUShaderModuleDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHADER_MODULE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUShaderModuleDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\n// Can be chained in WGPUShaderModuleDescriptor\ntypedef struct WGPUShaderSourceWGSL {\n    WGPUChainedStruct chain;\n    WGPUStringView code;\n} WGPUShaderSourceWGSL WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHADER_SOURCE_WGSL_INIT WGPU_MAKE_INIT_STRUCT(WGPUShaderSourceWGSL, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_ShaderSourceWGSL} WGPU_COMMA \\\n    /*.code=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedBufferMemoryDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPUSharedBufferMemoryDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_BUFFER_MEMORY_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedBufferMemoryDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedFenceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPUSharedFenceDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_FENCE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryProperties\ntypedef struct WGPUSharedTextureMemoryAHardwareBufferProperties {\n    WGPUChainedStructOut chain;\n    WGPUYCbCrVkDescriptor yCbCrInfo;\n} WGPUSharedTextureMemoryAHardwareBufferProperties WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_A_HARDWARE_BUFFER_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryAHardwareBufferProperties, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryAHardwareBufferProperties} WGPU_COMMA \\\n    /*.yCbCrInfo=*/WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedTextureMemoryDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPUSharedTextureMemoryDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSharedTextureMemoryDescriptor\ntypedef struct WGPUSharedTextureMemoryDmaBufDescriptor {\n    WGPUChainedStruct chain;\n    WGPUExtent3D size;\n    uint32_t drmFormat;\n    uint64_t drmModifier;\n    size_t planeCount;\n    WGPUSharedTextureMemoryDmaBufPlane const * planes;\n} WGPUSharedTextureMemoryDmaBufDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_DMA_BUF_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryDmaBufDescriptor, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SharedTextureMemoryDmaBufDescriptor} WGPU_COMMA \\\n    /*.size=*/WGPU_EXTENT_3D_INIT WGPU_COMMA \\\n    /*.drmFormat=*/{} WGPU_COMMA \\\n    /*.drmModifier=*/{} WGPU_COMMA \\\n    /*.planeCount=*/{} WGPU_COMMA \\\n    /*.planes=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSharedTextureMemoryProperties {\n    WGPUChainedStructOut * nextInChain;\n    WGPUTextureUsage usage;\n    WGPUExtent3D size;\n    WGPUTextureFormat format;\n} WGPUSharedTextureMemoryProperties WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SHARED_TEXTURE_MEMORY_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryProperties, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.usage=*/{} WGPU_COMMA \\\n    /*.size=*/WGPU_EXTENT_3D_INIT WGPU_COMMA \\\n    /*.format=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUSupportedLimits {\n    WGPUChainedStructOut * nextInChain;\n    WGPULimits limits;\n} WGPUSupportedLimits WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SUPPORTED_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(WGPUSupportedLimits, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.limits=*/WGPU_LIMITS_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUSurfaceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n} WGPUSurfaceDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceSourceCanvasHTMLSelector_Emscripten {\n    WGPUChainedStruct chain;\n    WGPUStringView selector;\n} WGPUSurfaceSourceCanvasHTMLSelector_Emscripten WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_SURFACE_SOURCE_CANVAS_HTML_SELECTOR__EMSCRIPTEN_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceCanvasHTMLSelector_Emscripten, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_SurfaceSourceCanvasHTMLSelector_Emscripten} WGPU_COMMA \\\n    /*.selector=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUTextureDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPUTextureUsage usage;\n    WGPUTextureDimension dimension;\n    WGPUExtent3D size;\n    WGPUTextureFormat format;\n    uint32_t mipLevelCount;\n    uint32_t sampleCount;\n    size_t viewFormatCount;\n    WGPUTextureFormat const * viewFormats;\n} WGPUTextureDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_TEXTURE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.usage=*/{} WGPU_COMMA \\\n    /*.dimension=*/WGPUTextureDimension_2D WGPU_COMMA \\\n    /*.size=*/WGPU_EXTENT_3D_INIT WGPU_COMMA \\\n    /*.format=*/{} WGPU_COMMA \\\n    /*.mipLevelCount=*/1 WGPU_COMMA \\\n    /*.sampleCount=*/1 WGPU_COMMA \\\n    /*.viewFormatCount=*/0 WGPU_COMMA \\\n    /*.viewFormats=*/nullptr WGPU_COMMA \\\n})\n\ntypedef struct WGPUTextureViewDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPUTextureFormat format;\n    WGPUTextureViewDimension dimension;\n    uint32_t baseMipLevel;\n    uint32_t mipLevelCount;\n    uint32_t baseArrayLayer;\n    uint32_t arrayLayerCount;\n    WGPUTextureAspect aspect;\n    WGPUTextureUsage usage;\n} WGPUTextureViewDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_TEXTURE_VIEW_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureViewDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.format=*/WGPUTextureFormat_Undefined WGPU_COMMA \\\n    /*.dimension=*/WGPUTextureViewDimension_Undefined WGPU_COMMA \\\n    /*.baseMipLevel=*/0 WGPU_COMMA \\\n    /*.mipLevelCount=*/WGPU_MIP_LEVEL_COUNT_UNDEFINED WGPU_COMMA \\\n    /*.baseArrayLayer=*/0 WGPU_COMMA \\\n    /*.arrayLayerCount=*/WGPU_ARRAY_LAYER_COUNT_UNDEFINED WGPU_COMMA \\\n    /*.aspect=*/WGPUTextureAspect_All WGPU_COMMA \\\n    /*.usage=*/WGPUTextureUsage_None WGPU_COMMA \\\n})\n\ntypedef struct WGPUVertexBufferLayout {\n    uint64_t arrayStride;\n    WGPUVertexStepMode stepMode;\n    size_t attributeCount;\n    WGPUVertexAttribute const * attributes;\n} WGPUVertexBufferLayout WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_VERTEX_BUFFER_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUVertexBufferLayout, { \\\n    /*.arrayStride=*/{} WGPU_COMMA \\\n    /*.stepMode=*/{} WGPU_COMMA \\\n    /*.attributeCount=*/{} WGPU_COMMA \\\n    /*.attributes=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUBindGroupLayoutDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    size_t entryCount;\n    WGPUBindGroupLayoutEntry const * entries;\n} WGPUBindGroupLayoutDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_BIND_GROUP_LAYOUT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUBindGroupLayoutDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.entryCount=*/{} WGPU_COMMA \\\n    /*.entries=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUColorTargetState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureFormat format;\n    WGPU_NULLABLE WGPUBlendState const * blend;\n    WGPUColorWriteMask writeMask;\n} WGPUColorTargetState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COLOR_TARGET_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUColorTargetState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.format=*/{} WGPU_COMMA \\\n    /*.blend=*/nullptr WGPU_COMMA \\\n    /*.writeMask=*/WGPUColorWriteMask_All WGPU_COMMA \\\n})\n\ntypedef struct WGPUCompilationInfo {\n    WGPUChainedStruct const * nextInChain;\n    size_t messageCount;\n    WGPUCompilationMessage const * messages;\n} WGPUCompilationInfo WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMPILATION_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUCompilationInfo, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.messageCount=*/{} WGPU_COMMA \\\n    /*.messages=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUComputeState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUShaderModule module;\n    WGPUStringView entryPoint;\n    size_t constantCount;\n    WGPUConstantEntry const * constants;\n} WGPUComputeState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMPUTE_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUComputeState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.module=*/{} WGPU_COMMA \\\n    /*.entryPoint=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.constantCount=*/0 WGPU_COMMA \\\n    /*.constants=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUDeviceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    size_t requiredFeatureCount;\n    WGPUFeatureName const * requiredFeatures;\n    WGPU_NULLABLE WGPURequiredLimits const * requiredLimits;\n    WGPUQueueDescriptor defaultQueue;\n    WGPUDeviceLostCallbackInfo2 deviceLostCallbackInfo2;\n    WGPUUncapturedErrorCallbackInfo2 uncapturedErrorCallbackInfo2;\n} WGPUDeviceDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_DEVICE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDeviceDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.requiredFeatureCount=*/0 WGPU_COMMA \\\n    /*.requiredFeatures=*/nullptr WGPU_COMMA \\\n    /*.requiredLimits=*/nullptr WGPU_COMMA \\\n    /*.defaultQueue=*/WGPU_QUEUE_DESCRIPTOR_INIT WGPU_COMMA \\\n    /*.deviceLostCallbackInfo2=*/{} WGPU_COMMA \\\n    /*.uncapturedErrorCallbackInfo2=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPURenderPassDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    size_t colorAttachmentCount;\n    WGPURenderPassColorAttachment const * colorAttachments;\n    WGPU_NULLABLE WGPURenderPassDepthStencilAttachment const * depthStencilAttachment;\n    WGPU_NULLABLE WGPUQuerySet occlusionQuerySet;\n    WGPU_NULLABLE WGPURenderPassTimestampWrites const * timestampWrites;\n} WGPURenderPassDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PASS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.colorAttachmentCount=*/{} WGPU_COMMA \\\n    /*.colorAttachments=*/{} WGPU_COMMA \\\n    /*.depthStencilAttachment=*/nullptr WGPU_COMMA \\\n    /*.occlusionQuerySet=*/nullptr WGPU_COMMA \\\n    /*.timestampWrites=*/nullptr WGPU_COMMA \\\n})\n\n// Can be chained in WGPURenderPassDescriptor\ntypedef struct WGPURenderPassPixelLocalStorage {\n    WGPUChainedStruct chain;\n    uint64_t totalPixelLocalStorageSize;\n    size_t storageAttachmentCount;\n    WGPURenderPassStorageAttachment const * storageAttachments;\n} WGPURenderPassPixelLocalStorage WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PASS_PIXEL_LOCAL_STORAGE_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassPixelLocalStorage, { \\\n    /*.chain=*/{/*.nextInChain*/nullptr WGPU_COMMA /*.sType*/WGPUSType_RenderPassPixelLocalStorage} WGPU_COMMA \\\n    /*.totalPixelLocalStorageSize=*/{} WGPU_COMMA \\\n    /*.storageAttachmentCount=*/0 WGPU_COMMA \\\n    /*.storageAttachments=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUVertexState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUShaderModule module;\n    WGPUStringView entryPoint;\n    size_t constantCount;\n    WGPUConstantEntry const * constants;\n    size_t bufferCount;\n    WGPUVertexBufferLayout const * buffers;\n} WGPUVertexState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_VERTEX_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUVertexState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.module=*/{} WGPU_COMMA \\\n    /*.entryPoint=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.constantCount=*/0 WGPU_COMMA \\\n    /*.constants=*/{} WGPU_COMMA \\\n    /*.bufferCount=*/0 WGPU_COMMA \\\n    /*.buffers=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPUComputePipelineDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPU_NULLABLE WGPUPipelineLayout layout;\n    WGPUComputeState compute;\n} WGPUComputePipelineDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_COMPUTE_PIPELINE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUComputePipelineDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.layout=*/nullptr WGPU_COMMA \\\n    /*.compute=*/WGPU_COMPUTE_STATE_INIT WGPU_COMMA \\\n})\n\ntypedef struct WGPUFragmentState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUShaderModule module;\n    WGPUStringView entryPoint;\n    size_t constantCount;\n    WGPUConstantEntry const * constants;\n    size_t targetCount;\n    WGPUColorTargetState const * targets;\n} WGPUFragmentState WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_FRAGMENT_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUFragmentState, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.module=*/{} WGPU_COMMA \\\n    /*.entryPoint=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.constantCount=*/0 WGPU_COMMA \\\n    /*.constants=*/{} WGPU_COMMA \\\n    /*.targetCount=*/{} WGPU_COMMA \\\n    /*.targets=*/{} WGPU_COMMA \\\n})\n\ntypedef struct WGPURenderPipelineDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStringView label;\n    WGPU_NULLABLE WGPUPipelineLayout layout;\n    WGPUVertexState vertex;\n    WGPUPrimitiveState primitive;\n    WGPU_NULLABLE WGPUDepthStencilState const * depthStencil;\n    WGPUMultisampleState multisample;\n    WGPU_NULLABLE WGPUFragmentState const * fragment;\n} WGPURenderPipelineDescriptor WGPU_STRUCTURE_ATTRIBUTE;\n\n#define WGPU_RENDER_PIPELINE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPipelineDescriptor, { \\\n    /*.nextInChain=*/nullptr WGPU_COMMA \\\n    /*.label=*/WGPU_STRING_VIEW_INIT WGPU_COMMA \\\n    /*.layout=*/nullptr WGPU_COMMA \\\n    /*.vertex=*/WGPU_VERTEX_STATE_INIT WGPU_COMMA \\\n    /*.primitive=*/WGPU_PRIMITIVE_STATE_INIT WGPU_COMMA \\\n    /*.depthStencil=*/nullptr WGPU_COMMA \\\n    /*.multisample=*/WGPU_MULTISAMPLE_STATE_INIT WGPU_COMMA \\\n    /*.fragment=*/nullptr WGPU_COMMA \\\n})\n\n// WGPUProgrammableStageDescriptor is deprecated.\n// Use WGPUComputeState instead.\ntypedef WGPUComputeState WGPUProgrammableStageDescriptor;\n\n// WGPURenderPassDescriptorMaxDrawCount is deprecated.\n// Use WGPURenderPassMaxDrawCount instead.\ntypedef WGPURenderPassMaxDrawCount WGPURenderPassDescriptorMaxDrawCount;\n\n// WGPUShaderModuleSPIRVDescriptor is deprecated.\n// Use WGPUShaderSourceSPIRV instead.\ntypedef WGPUShaderSourceSPIRV WGPUShaderModuleSPIRVDescriptor;\n\n// WGPUShaderModuleWGSLDescriptor is deprecated.\n// Use WGPUShaderSourceWGSL instead.\ntypedef WGPUShaderSourceWGSL WGPUShaderModuleWGSLDescriptor;\n\n// WGPUSurfaceDescriptorFromAndroidNativeWindow is deprecated.\n// Use WGPUSurfaceSourceAndroidNativeWindow instead.\ntypedef WGPUSurfaceSourceAndroidNativeWindow WGPUSurfaceDescriptorFromAndroidNativeWindow;\n\n// WGPUSurfaceDescriptorFromCanvasHTMLSelector is deprecated.\n// Use WGPUSurfaceSourceCanvasHTMLSelector_Emscripten instead.\ntypedef WGPUSurfaceSourceCanvasHTMLSelector_Emscripten WGPUSurfaceDescriptorFromCanvasHTMLSelector;\n\n// WGPUSurfaceDescriptorFromMetalLayer is deprecated.\n// Use WGPUSurfaceSourceMetalLayer instead.\ntypedef WGPUSurfaceSourceMetalLayer WGPUSurfaceDescriptorFromMetalLayer;\n\n// WGPUSurfaceDescriptorFromWaylandSurface is deprecated.\n// Use WGPUSurfaceSourceWaylandSurface instead.\ntypedef WGPUSurfaceSourceWaylandSurface WGPUSurfaceDescriptorFromWaylandSurface;\n\n// WGPUSurfaceDescriptorFromWindowsHWND is deprecated.\n// Use WGPUSurfaceSourceWindowsHWND instead.\ntypedef WGPUSurfaceSourceWindowsHWND WGPUSurfaceDescriptorFromWindowsHWND;\n\n// WGPUSurfaceDescriptorFromXcbWindow is deprecated.\n// Use WGPUSurfaceSourceXCBWindow instead.\ntypedef WGPUSurfaceSourceXCBWindow WGPUSurfaceDescriptorFromXcbWindow;\n\n// WGPUSurfaceDescriptorFromXlibWindow is deprecated.\n// Use WGPUSurfaceSourceXlibWindow instead.\ntypedef WGPUSurfaceSourceXlibWindow WGPUSurfaceDescriptorFromXlibWindow;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if !defined(WGPU_SKIP_PROCS)\n\n// TODO(374150686): Remove these Emscripten specific declarations from the\n// header once they are fully deprecated.\n#ifdef __EMSCRIPTEN__\nWGPU_EXPORT WGPUDevice emscripten_webgpu_get_device(void);\n#endif\n\ntypedef void (*WGPUProcAdapterInfoFreeMembers)(        WGPUAdapterInfo value) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcAdapterPropertiesMemoryHeapsFreeMembers)(        WGPUAdapterPropertiesMemoryHeaps value) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUInstance (*WGPUProcCreateInstance)(        WGPU_NULLABLE WGPUInstanceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDrmFormatCapabilitiesFreeMembers)(        WGPUDrmFormatCapabilities value) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcGetInstanceFeatures)(        WGPUInstanceFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUProc (*WGPUProcGetProcAddress)(        WGPUStringView procName) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedBufferMemoryEndAccessStateFreeMembers)(        WGPUSharedBufferMemoryEndAccessState value) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedTextureMemoryEndAccessStateFreeMembers)(        WGPUSharedTextureMemoryEndAccessState value) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSupportedFeaturesFreeMembers)(        WGPUSupportedFeatures value) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSurfaceCapabilitiesFreeMembers)(        WGPUSurfaceCapabilities value) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of Adapter\ntypedef WGPUDevice (*WGPUProcAdapterCreateDevice)(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcAdapterGetFeatures)(WGPUAdapter adapter, WGPUSupportedFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcAdapterGetFormatCapabilities)(WGPUAdapter adapter, WGPUTextureFormat format, WGPUFormatCapabilities * capabilities) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcAdapterGetInfo)(WGPUAdapter adapter, WGPUAdapterInfo * info) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUInstance (*WGPUProcAdapterGetInstance)(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcAdapterGetLimits)(WGPUAdapter adapter, WGPUSupportedLimits * limits) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBool (*WGPUProcAdapterHasFeature)(WGPUAdapter adapter, WGPUFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcAdapterRequestDevice)(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcAdapterRequestDevice2)(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcAdapterRequestDeviceF)(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcAdapterAddRef)(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcAdapterRelease)(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of BindGroup\ntypedef void (*WGPUProcBindGroupSetLabel)(WGPUBindGroup bindGroup, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBindGroupAddRef)(WGPUBindGroup bindGroup) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBindGroupRelease)(WGPUBindGroup bindGroup) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of BindGroupLayout\ntypedef void (*WGPUProcBindGroupLayoutSetLabel)(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBindGroupLayoutAddRef)(WGPUBindGroupLayout bindGroupLayout) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBindGroupLayoutRelease)(WGPUBindGroupLayout bindGroupLayout) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of Buffer\ntypedef void (*WGPUProcBufferDestroy)(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void const * (*WGPUProcBufferGetConstMappedRange)(WGPUBuffer buffer, size_t offset, size_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBufferMapState (*WGPUProcBufferGetMapState)(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void * (*WGPUProcBufferGetMappedRange)(WGPUBuffer buffer, size_t offset, size_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef uint64_t (*WGPUProcBufferGetSize)(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBufferUsage (*WGPUProcBufferGetUsage)(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBufferMapAsync)(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcBufferMapAsync2)(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcBufferMapAsyncF)(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBufferSetLabel)(WGPUBuffer buffer, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBufferUnmap)(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBufferAddRef)(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcBufferRelease)(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of CommandBuffer\ntypedef void (*WGPUProcCommandBufferSetLabel)(WGPUCommandBuffer commandBuffer, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandBufferAddRef)(WGPUCommandBuffer commandBuffer) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandBufferRelease)(WGPUCommandBuffer commandBuffer) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of CommandEncoder\ntypedef WGPUComputePassEncoder (*WGPUProcCommandEncoderBeginComputePass)(WGPUCommandEncoder commandEncoder, WGPU_NULLABLE WGPUComputePassDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPURenderPassEncoder (*WGPUProcCommandEncoderBeginRenderPass)(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderClearBuffer)(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderCopyBufferToBuffer)(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderCopyBufferToTexture)(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderCopyTextureToBuffer)(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderCopyTextureToTexture)(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUCommandBuffer (*WGPUProcCommandEncoderFinish)(WGPUCommandEncoder commandEncoder, WGPU_NULLABLE WGPUCommandBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderInjectValidationError)(WGPUCommandEncoder commandEncoder, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderInsertDebugMarker)(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderPopDebugGroup)(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderPushDebugGroup)(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderResolveQuerySet)(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderSetLabel)(WGPUCommandEncoder commandEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderWriteBuffer)(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderWriteTimestamp)(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderAddRef)(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcCommandEncoderRelease)(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of ComputePassEncoder\ntypedef void (*WGPUProcComputePassEncoderDispatchWorkgroups)(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderDispatchWorkgroupsIndirect)(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderEnd)(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderInsertDebugMarker)(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderPopDebugGroup)(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderPushDebugGroup)(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderSetBindGroup)(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderSetLabel)(WGPUComputePassEncoder computePassEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderSetPipeline)(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderWriteTimestamp)(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderAddRef)(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePassEncoderRelease)(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of ComputePipeline\ntypedef WGPUBindGroupLayout (*WGPUProcComputePipelineGetBindGroupLayout)(WGPUComputePipeline computePipeline, uint32_t groupIndex) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePipelineSetLabel)(WGPUComputePipeline computePipeline, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePipelineAddRef)(WGPUComputePipeline computePipeline) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcComputePipelineRelease)(WGPUComputePipeline computePipeline) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of Device\ntypedef WGPUBindGroup (*WGPUProcDeviceCreateBindGroup)(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBindGroupLayout (*WGPUProcDeviceCreateBindGroupLayout)(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBuffer (*WGPUProcDeviceCreateBuffer)(WGPUDevice device, WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUCommandEncoder (*WGPUProcDeviceCreateCommandEncoder)(WGPUDevice device, WGPU_NULLABLE WGPUCommandEncoderDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUComputePipeline (*WGPUProcDeviceCreateComputePipeline)(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceCreateComputePipelineAsync)(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcDeviceCreateComputePipelineAsync2)(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcDeviceCreateComputePipelineAsyncF)(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBuffer (*WGPUProcDeviceCreateErrorBuffer)(WGPUDevice device, WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUExternalTexture (*WGPUProcDeviceCreateErrorExternalTexture)(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUShaderModule (*WGPUProcDeviceCreateErrorShaderModule)(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, WGPUStringView errorMessage) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUTexture (*WGPUProcDeviceCreateErrorTexture)(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUExternalTexture (*WGPUProcDeviceCreateExternalTexture)(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUPipelineLayout (*WGPUProcDeviceCreatePipelineLayout)(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUQuerySet (*WGPUProcDeviceCreateQuerySet)(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPURenderBundleEncoder (*WGPUProcDeviceCreateRenderBundleEncoder)(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPURenderPipeline (*WGPUProcDeviceCreateRenderPipeline)(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceCreateRenderPipelineAsync)(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcDeviceCreateRenderPipelineAsync2)(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcDeviceCreateRenderPipelineAsyncF)(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUSampler (*WGPUProcDeviceCreateSampler)(WGPUDevice device, WGPU_NULLABLE WGPUSamplerDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUShaderModule (*WGPUProcDeviceCreateShaderModule)(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUTexture (*WGPUProcDeviceCreateTexture)(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceDestroy)(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceForceLoss)(WGPUDevice device, WGPUDeviceLostReason type, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcDeviceGetAHardwareBufferProperties)(WGPUDevice device, void * handle, WGPUAHardwareBufferProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUAdapter (*WGPUProcDeviceGetAdapter)(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcDeviceGetAdapterInfo)(WGPUDevice device, WGPUAdapterInfo * adapterInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceGetFeatures)(WGPUDevice device, WGPUSupportedFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcDeviceGetLimits)(WGPUDevice device, WGPUSupportedLimits * limits) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcDeviceGetLostFuture)(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUQueue (*WGPUProcDeviceGetQueue)(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBool (*WGPUProcDeviceHasFeature)(WGPUDevice device, WGPUFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUSharedBufferMemory (*WGPUProcDeviceImportSharedBufferMemory)(WGPUDevice device, WGPUSharedBufferMemoryDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUSharedFence (*WGPUProcDeviceImportSharedFence)(WGPUDevice device, WGPUSharedFenceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUSharedTextureMemory (*WGPUProcDeviceImportSharedTextureMemory)(WGPUDevice device, WGPUSharedTextureMemoryDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceInjectError)(WGPUDevice device, WGPUErrorType type, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDevicePopErrorScope)(WGPUDevice device, WGPUErrorCallback oldCallback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcDevicePopErrorScope2)(WGPUDevice device, WGPUPopErrorScopeCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcDevicePopErrorScopeF)(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDevicePushErrorScope)(WGPUDevice device, WGPUErrorFilter filter) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceSetLabel)(WGPUDevice device, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceSetLoggingCallback)(WGPUDevice device, WGPULoggingCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceTick)(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceValidateTextureDescriptor)(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceAddRef)(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcDeviceRelease)(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of ExternalTexture\ntypedef void (*WGPUProcExternalTextureDestroy)(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcExternalTextureExpire)(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcExternalTextureRefresh)(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcExternalTextureSetLabel)(WGPUExternalTexture externalTexture, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcExternalTextureAddRef)(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcExternalTextureRelease)(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of Instance\ntypedef WGPUSurface (*WGPUProcInstanceCreateSurface)(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef size_t (*WGPUProcInstanceEnumerateWGSLLanguageFeatures)(WGPUInstance instance, WGPUWGSLFeatureName * features) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBool (*WGPUProcInstanceHasWGSLLanguageFeature)(WGPUInstance instance, WGPUWGSLFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcInstanceProcessEvents)(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcInstanceRequestAdapter)(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcInstanceRequestAdapter2)(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcInstanceRequestAdapterF)(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUWaitStatus (*WGPUProcInstanceWaitAny)(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo * futures, uint64_t timeoutNS) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcInstanceAddRef)(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcInstanceRelease)(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of PipelineLayout\ntypedef void (*WGPUProcPipelineLayoutSetLabel)(WGPUPipelineLayout pipelineLayout, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcPipelineLayoutAddRef)(WGPUPipelineLayout pipelineLayout) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcPipelineLayoutRelease)(WGPUPipelineLayout pipelineLayout) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of QuerySet\ntypedef void (*WGPUProcQuerySetDestroy)(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\ntypedef uint32_t (*WGPUProcQuerySetGetCount)(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUQueryType (*WGPUProcQuerySetGetType)(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQuerySetSetLabel)(WGPUQuerySet querySet, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQuerySetAddRef)(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQuerySetRelease)(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of Queue\ntypedef void (*WGPUProcQueueCopyExternalTextureForBrowser)(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQueueCopyTextureForBrowser)(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQueueOnSubmittedWorkDone)(WGPUQueue queue, WGPUQueueWorkDoneCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcQueueOnSubmittedWorkDone2)(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcQueueOnSubmittedWorkDoneF)(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQueueSetLabel)(WGPUQueue queue, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQueueSubmit)(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQueueWriteBuffer)(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQueueWriteTexture)(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQueueAddRef)(WGPUQueue queue) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcQueueRelease)(WGPUQueue queue) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of RenderBundle\ntypedef void (*WGPUProcRenderBundleSetLabel)(WGPURenderBundle renderBundle, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleAddRef)(WGPURenderBundle renderBundle) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleRelease)(WGPURenderBundle renderBundle) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of RenderBundleEncoder\ntypedef void (*WGPUProcRenderBundleEncoderDraw)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndexed)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndexedIndirect)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndirect)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPURenderBundle (*WGPUProcRenderBundleEncoderFinish)(WGPURenderBundleEncoder renderBundleEncoder, WGPU_NULLABLE WGPURenderBundleDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderInsertDebugMarker)(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderPopDebugGroup)(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderPushDebugGroup)(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderSetBindGroup)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderSetIndexBuffer)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderSetLabel)(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderSetPipeline)(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderSetVertexBuffer)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPU_NULLABLE WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderAddRef)(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderBundleEncoderRelease)(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of RenderPassEncoder\ntypedef void (*WGPUProcRenderPassEncoderBeginOcclusionQuery)(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderDraw)(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderDrawIndexed)(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderDrawIndexedIndirect)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderDrawIndirect)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderEnd)(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderEndOcclusionQuery)(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderExecuteBundles)(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderInsertDebugMarker)(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderMultiDrawIndexedIndirect)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPU_NULLABLE WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderMultiDrawIndirect)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPU_NULLABLE WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderPixelLocalStorageBarrier)(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderPopDebugGroup)(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderPushDebugGroup)(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetBindGroup)(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetBlendConstant)(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetIndexBuffer)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetLabel)(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetPipeline)(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetScissorRect)(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetStencilReference)(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetVertexBuffer)(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPU_NULLABLE WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderSetViewport)(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderWriteTimestamp)(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderAddRef)(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPassEncoderRelease)(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of RenderPipeline\ntypedef WGPUBindGroupLayout (*WGPUProcRenderPipelineGetBindGroupLayout)(WGPURenderPipeline renderPipeline, uint32_t groupIndex) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPipelineSetLabel)(WGPURenderPipeline renderPipeline, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPipelineAddRef)(WGPURenderPipeline renderPipeline) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcRenderPipelineRelease)(WGPURenderPipeline renderPipeline) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of Sampler\ntypedef void (*WGPUProcSamplerSetLabel)(WGPUSampler sampler, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSamplerAddRef)(WGPUSampler sampler) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSamplerRelease)(WGPUSampler sampler) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of ShaderModule\ntypedef void (*WGPUProcShaderModuleGetCompilationInfo)(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcShaderModuleGetCompilationInfo2)(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUFuture (*WGPUProcShaderModuleGetCompilationInfoF)(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcShaderModuleSetLabel)(WGPUShaderModule shaderModule, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcShaderModuleAddRef)(WGPUShaderModule shaderModule) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcShaderModuleRelease)(WGPUShaderModule shaderModule) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of SharedBufferMemory\ntypedef WGPUStatus (*WGPUProcSharedBufferMemoryBeginAccess)(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryBeginAccessDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBuffer (*WGPUProcSharedBufferMemoryCreateBuffer)(WGPUSharedBufferMemory sharedBufferMemory, WGPU_NULLABLE WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcSharedBufferMemoryEndAccess)(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryEndAccessState * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcSharedBufferMemoryGetProperties)(WGPUSharedBufferMemory sharedBufferMemory, WGPUSharedBufferMemoryProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBool (*WGPUProcSharedBufferMemoryIsDeviceLost)(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedBufferMemorySetLabel)(WGPUSharedBufferMemory sharedBufferMemory, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedBufferMemoryAddRef)(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedBufferMemoryRelease)(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of SharedFence\ntypedef void (*WGPUProcSharedFenceExportInfo)(WGPUSharedFence sharedFence, WGPUSharedFenceExportInfo * info) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedFenceAddRef)(WGPUSharedFence sharedFence) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedFenceRelease)(WGPUSharedFence sharedFence) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of SharedTextureMemory\ntypedef WGPUStatus (*WGPUProcSharedTextureMemoryBeginAccess)(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryBeginAccessDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUTexture (*WGPUProcSharedTextureMemoryCreateTexture)(WGPUSharedTextureMemory sharedTextureMemory, WGPU_NULLABLE WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcSharedTextureMemoryEndAccess)(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryEndAccessState * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcSharedTextureMemoryGetProperties)(WGPUSharedTextureMemory sharedTextureMemory, WGPUSharedTextureMemoryProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUBool (*WGPUProcSharedTextureMemoryIsDeviceLost)(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedTextureMemorySetLabel)(WGPUSharedTextureMemory sharedTextureMemory, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedTextureMemoryAddRef)(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSharedTextureMemoryRelease)(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of Surface\ntypedef void (*WGPUProcSurfaceConfigure)(WGPUSurface surface, WGPUSurfaceConfiguration const * config) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUStatus (*WGPUProcSurfaceGetCapabilities)(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities * capabilities) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSurfaceGetCurrentTexture)(WGPUSurface surface, WGPUSurfaceTexture * surfaceTexture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSurfacePresent)(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSurfaceSetLabel)(WGPUSurface surface, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSurfaceUnconfigure)(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSurfaceAddRef)(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcSurfaceRelease)(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of Texture\ntypedef WGPUTextureView (*WGPUProcTextureCreateErrorView)(WGPUTexture texture, WGPU_NULLABLE WGPUTextureViewDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUTextureView (*WGPUProcTextureCreateView)(WGPUTexture texture, WGPU_NULLABLE WGPUTextureViewDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcTextureDestroy)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef uint32_t (*WGPUProcTextureGetDepthOrArrayLayers)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUTextureDimension (*WGPUProcTextureGetDimension)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUTextureFormat (*WGPUProcTextureGetFormat)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef uint32_t (*WGPUProcTextureGetHeight)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef uint32_t (*WGPUProcTextureGetMipLevelCount)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef uint32_t (*WGPUProcTextureGetSampleCount)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef WGPUTextureUsage (*WGPUProcTextureGetUsage)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef uint32_t (*WGPUProcTextureGetWidth)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcTextureSetLabel)(WGPUTexture texture, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcTextureAddRef)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcTextureRelease)(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\n\n// Procs of TextureView\ntypedef void (*WGPUProcTextureViewSetLabel)(WGPUTextureView textureView, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcTextureViewAddRef)(WGPUTextureView textureView) WGPU_FUNCTION_ATTRIBUTE;\ntypedef void (*WGPUProcTextureViewRelease)(WGPUTextureView textureView) WGPU_FUNCTION_ATTRIBUTE;\n\n\n#endif  // !defined(WGPU_SKIP_PROCS)\n\n#if !defined(WGPU_SKIP_DECLARATIONS)\n\nWGPU_EXPORT void wgpuAdapterInfoFreeMembers(WGPUAdapterInfo value) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuAdapterPropertiesMemoryHeapsFreeMembers(WGPUAdapterPropertiesMemoryHeaps value) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUInstance wgpuCreateInstance(WGPU_NULLABLE WGPUInstanceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDrmFormatCapabilitiesFreeMembers(WGPUDrmFormatCapabilities value) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuGetInstanceFeatures(WGPUInstanceFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUProc wgpuGetProcAddress(WGPUStringView procName) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedBufferMemoryEndAccessStateFreeMembers(WGPUSharedBufferMemoryEndAccessState value) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedTextureMemoryEndAccessStateFreeMembers(WGPUSharedTextureMemoryEndAccessState value) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSupportedFeaturesFreeMembers(WGPUSupportedFeatures value) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities value) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Adapter\nWGPU_EXPORT WGPUDevice wgpuAdapterCreateDevice(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuAdapterGetFormatCapabilities(WGPUAdapter adapter, WGPUTextureFormat format, WGPUFormatCapabilities * capabilities) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo * info) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUInstance wgpuAdapterGetInstance(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuAdapterRequestDevice(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuAdapterRequestDevice2(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuAdapterRequestDeviceF(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuAdapterAddRef(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuAdapterRelease(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of BindGroup\nWGPU_EXPORT void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBindGroupAddRef(WGPUBindGroup bindGroup) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBindGroupRelease(WGPUBindGroup bindGroup) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of BindGroupLayout\nWGPU_EXPORT void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Buffer\nWGPU_EXPORT void wgpuBufferDestroy(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void const * wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void * wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT uint64_t wgpuBufferGetSize(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuBufferMapAsync2(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuBufferMapAsyncF(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBufferUnmap(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBufferAddRef(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuBufferRelease(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of CommandBuffer\nWGPU_EXPORT void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of CommandEncoder\nWGPU_EXPORT WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPU_NULLABLE WGPUComputePassDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPU_NULLABLE WGPUCommandBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderInjectValidationError(WGPUCommandEncoder commandEncoder, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderWriteBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of ComputePassEncoder\nWGPU_EXPORT void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderWriteTimestamp(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of ComputePipeline\nWGPU_EXPORT WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePipelineAddRef(WGPUComputePipeline computePipeline) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Device\nWGPU_EXPORT WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPU_NULLABLE WGPUCommandEncoderDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuDeviceCreateComputePipelineAsync2(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuDeviceCreateComputePipelineAsyncF(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBuffer wgpuDeviceCreateErrorBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUExternalTexture wgpuDeviceCreateErrorExternalTexture(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUShaderModule wgpuDeviceCreateErrorShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, WGPUStringView errorMessage) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUTexture wgpuDeviceCreateErrorTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUExternalTexture wgpuDeviceCreateExternalTexture(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuDeviceCreateRenderPipelineAsync2(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuDeviceCreateRenderPipelineAsyncF(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPU_NULLABLE WGPUSamplerDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceDestroy(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceForceLoss(WGPUDevice device, WGPUDeviceLostReason type, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuDeviceGetAHardwareBufferProperties(WGPUDevice device, void * handle, WGPUAHardwareBufferProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUAdapter wgpuDeviceGetAdapter(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuDeviceGetAdapterInfo(WGPUDevice device, WGPUAdapterInfo * adapterInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceGetFeatures(WGPUDevice device, WGPUSupportedFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuDeviceGetLostFuture(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUQueue wgpuDeviceGetQueue(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUSharedBufferMemory wgpuDeviceImportSharedBufferMemory(WGPUDevice device, WGPUSharedBufferMemoryDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUSharedFence wgpuDeviceImportSharedFence(WGPUDevice device, WGPUSharedFenceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUSharedTextureMemory wgpuDeviceImportSharedTextureMemory(WGPUDevice device, WGPUSharedTextureMemoryDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceInjectError(WGPUDevice device, WGPUErrorType type, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback oldCallback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuDevicePopErrorScope2(WGPUDevice device, WGPUPopErrorScopeCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuDevicePopErrorScopeF(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceSetLabel(WGPUDevice device, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceTick(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceValidateTextureDescriptor(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceAddRef(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuDeviceRelease(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of ExternalTexture\nWGPU_EXPORT void wgpuExternalTextureDestroy(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuExternalTextureExpire(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuExternalTextureRefresh(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuExternalTextureSetLabel(WGPUExternalTexture externalTexture, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuExternalTextureAddRef(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuExternalTextureRelease(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Instance\nWGPU_EXPORT WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT size_t wgpuInstanceEnumerateWGSLLanguageFeatures(WGPUInstance instance, WGPUWGSLFeatureName * features) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBool wgpuInstanceHasWGSLLanguageFeature(WGPUInstance instance, WGPUWGSLFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuInstanceProcessEvents(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuInstanceRequestAdapter(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuInstanceRequestAdapter2(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuInstanceRequestAdapterF(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUWaitStatus wgpuInstanceWaitAny(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo * futures, uint64_t timeoutNS) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuInstanceAddRef(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuInstanceRelease(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of PipelineLayout\nWGPU_EXPORT void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuPipelineLayoutAddRef(WGPUPipelineLayout pipelineLayout) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of QuerySet\nWGPU_EXPORT void wgpuQuerySetDestroy(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT uint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQuerySetSetLabel(WGPUQuerySet querySet, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQuerySetAddRef(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQuerySetRelease(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Queue\nWGPU_EXPORT void wgpuQueueCopyExternalTextureForBrowser(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQueueCopyTextureForBrowser(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuQueueOnSubmittedWorkDone2(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuQueueOnSubmittedWorkDoneF(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQueueSetLabel(WGPUQueue queue, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQueueSubmit(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQueueAddRef(WGPUQueue queue) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuQueueRelease(WGPUQueue queue) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of RenderBundle\nWGPU_EXPORT void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleAddRef(WGPURenderBundle renderBundle) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleRelease(WGPURenderBundle renderBundle) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of RenderBundleEncoder\nWGPU_EXPORT void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPU_NULLABLE WGPURenderBundleDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPU_NULLABLE WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderAddRef(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of RenderPassEncoder\nWGPU_EXPORT void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderMultiDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPU_NULLABLE WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderMultiDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPU_NULLABLE WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderPixelLocalStorageBarrier(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPU_NULLABLE WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderAddRef(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of RenderPipeline\nWGPU_EXPORT WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPipelineAddRef(WGPURenderPipeline renderPipeline) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Sampler\nWGPU_EXPORT void wgpuSamplerSetLabel(WGPUSampler sampler, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSamplerAddRef(WGPUSampler sampler) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSamplerRelease(WGPUSampler sampler) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of ShaderModule\nWGPU_EXPORT void wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuShaderModuleGetCompilationInfo2(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUFuture wgpuShaderModuleGetCompilationInfoF(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuShaderModuleAddRef(WGPUShaderModule shaderModule) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuShaderModuleRelease(WGPUShaderModule shaderModule) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of SharedBufferMemory\nWGPU_EXPORT WGPUStatus wgpuSharedBufferMemoryBeginAccess(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryBeginAccessDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBuffer wgpuSharedBufferMemoryCreateBuffer(WGPUSharedBufferMemory sharedBufferMemory, WGPU_NULLABLE WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuSharedBufferMemoryEndAccess(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryEndAccessState * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuSharedBufferMemoryGetProperties(WGPUSharedBufferMemory sharedBufferMemory, WGPUSharedBufferMemoryProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBool wgpuSharedBufferMemoryIsDeviceLost(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedBufferMemorySetLabel(WGPUSharedBufferMemory sharedBufferMemory, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedBufferMemoryAddRef(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedBufferMemoryRelease(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of SharedFence\nWGPU_EXPORT void wgpuSharedFenceExportInfo(WGPUSharedFence sharedFence, WGPUSharedFenceExportInfo * info) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedFenceAddRef(WGPUSharedFence sharedFence) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedFenceRelease(WGPUSharedFence sharedFence) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of SharedTextureMemory\nWGPU_EXPORT WGPUStatus wgpuSharedTextureMemoryBeginAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryBeginAccessDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUTexture wgpuSharedTextureMemoryCreateTexture(WGPUSharedTextureMemory sharedTextureMemory, WGPU_NULLABLE WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuSharedTextureMemoryEndAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryEndAccessState * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuSharedTextureMemoryGetProperties(WGPUSharedTextureMemory sharedTextureMemory, WGPUSharedTextureMemoryProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUBool wgpuSharedTextureMemoryIsDeviceLost(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedTextureMemorySetLabel(WGPUSharedTextureMemory sharedTextureMemory, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedTextureMemoryAddRef(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSharedTextureMemoryRelease(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Surface\nWGPU_EXPORT void wgpuSurfaceConfigure(WGPUSurface surface, WGPUSurfaceConfiguration const * config) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUStatus wgpuSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities * capabilities) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture * surfaceTexture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSurfacePresent(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSurfaceSetLabel(WGPUSurface surface, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSurfaceUnconfigure(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSurfaceAddRef(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuSurfaceRelease(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Texture\nWGPU_EXPORT WGPUTextureView wgpuTextureCreateErrorView(WGPUTexture texture, WGPU_NULLABLE WGPUTextureViewDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPU_NULLABLE WGPUTextureViewDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuTextureDestroy(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT uint32_t wgpuTextureGetHeight(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT uint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT uint32_t wgpuTextureGetSampleCount(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT uint32_t wgpuTextureGetWidth(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuTextureSetLabel(WGPUTexture texture, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuTextureAddRef(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuTextureRelease(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of TextureView\nWGPU_EXPORT void wgpuTextureViewSetLabel(WGPUTextureView textureView, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuTextureViewAddRef(WGPUTextureView textureView) WGPU_FUNCTION_ATTRIBUTE;\nWGPU_EXPORT void wgpuTextureViewRelease(WGPUTextureView textureView) WGPU_FUNCTION_ATTRIBUTE;\n\n\n#endif  // !defined(WGPU_SKIP_DECLARATIONS)\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#endif // WEBGPU_H_\n", "include/dawn/wire/client/webgpu.h": "#ifndef DAWN_WIRE_CLIENT_WEBGPU_H_\n#define DAWN_WIRE_CLIENT_WEBGPU_H_\n\n#include \"webgpu/webgpu.h\"\n#include \"dawn/wire/dawn_wire_export.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nDAWN_WIRE_EXPORT void wgpuDawnWireClientAdapterInfoFreeMembers(WGPUAdapterInfo value) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientAdapterPropertiesMemoryHeapsFreeMembers(WGPUAdapterPropertiesMemoryHeaps value) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUInstance wgpuDawnWireClientCreateInstance(WGPU_NULLABLE WGPUInstanceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDrmFormatCapabilitiesFreeMembers(WGPUDrmFormatCapabilities value) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientGetInstanceFeatures(WGPUInstanceFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUProc wgpuDawnWireClientGetProcAddress(WGPUStringView procName) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedBufferMemoryEndAccessStateFreeMembers(WGPUSharedBufferMemoryEndAccessState value) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedTextureMemoryEndAccessStateFreeMembers(WGPUSharedTextureMemoryEndAccessState value) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSupportedFeaturesFreeMembers(WGPUSupportedFeatures value) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities value) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Adapter\nDAWN_WIRE_EXPORT WGPUDevice wgpuDawnWireClientAdapterCreateDevice(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientAdapterGetFormatCapabilities(WGPUAdapter adapter, WGPUTextureFormat format, WGPUFormatCapabilities * capabilities) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo * info) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUInstance wgpuDawnWireClientAdapterGetInstance(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBool wgpuDawnWireClientAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientAdapterRequestDevice(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientAdapterRequestDevice2(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientAdapterRequestDeviceF(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientAdapterAddRef(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientAdapterRelease(WGPUAdapter adapter) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of BindGroup\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBindGroupAddRef(WGPUBindGroup bindGroup) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBindGroupRelease(WGPUBindGroup bindGroup) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of BindGroupLayout\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Buffer\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBufferDestroy(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void const * wgpuDawnWireClientBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBufferMapState wgpuDawnWireClientBufferGetMapState(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void * wgpuDawnWireClientBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT uint64_t wgpuDawnWireClientBufferGetSize(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBufferUsage wgpuDawnWireClientBufferGetUsage(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientBufferMapAsync2(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientBufferMapAsyncF(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBufferSetLabel(WGPUBuffer buffer, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBufferUnmap(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBufferAddRef(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientBufferRelease(WGPUBuffer buffer) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of CommandBuffer\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandBufferAddRef(WGPUCommandBuffer commandBuffer) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandBufferRelease(WGPUCommandBuffer commandBuffer) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of CommandEncoder\nDAWN_WIRE_EXPORT WGPUComputePassEncoder wgpuDawnWireClientCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPU_NULLABLE WGPUComputePassDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPURenderPassEncoder wgpuDawnWireClientCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUCommandBuffer wgpuDawnWireClientCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPU_NULLABLE WGPUCommandBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderInjectValidationError(WGPUCommandEncoder commandEncoder, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderWriteBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderAddRef(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientCommandEncoderRelease(WGPUCommandEncoder commandEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of ComputePassEncoder\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderWriteTimestamp(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of ComputePipeline\nDAWN_WIRE_EXPORT WGPUBindGroupLayout wgpuDawnWireClientComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePipelineSetLabel(WGPUComputePipeline computePipeline, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePipelineAddRef(WGPUComputePipeline computePipeline) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientComputePipelineRelease(WGPUComputePipeline computePipeline) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Device\nDAWN_WIRE_EXPORT WGPUBindGroup wgpuDawnWireClientDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBindGroupLayout wgpuDawnWireClientDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBuffer wgpuDawnWireClientDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUCommandEncoder wgpuDawnWireClientDeviceCreateCommandEncoder(WGPUDevice device, WGPU_NULLABLE WGPUCommandEncoderDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUComputePipeline wgpuDawnWireClientDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientDeviceCreateComputePipelineAsync2(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientDeviceCreateComputePipelineAsyncF(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBuffer wgpuDawnWireClientDeviceCreateErrorBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUExternalTexture wgpuDawnWireClientDeviceCreateErrorExternalTexture(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUShaderModule wgpuDawnWireClientDeviceCreateErrorShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, WGPUStringView errorMessage) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUTexture wgpuDawnWireClientDeviceCreateErrorTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUExternalTexture wgpuDawnWireClientDeviceCreateExternalTexture(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUPipelineLayout wgpuDawnWireClientDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUQuerySet wgpuDawnWireClientDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPURenderBundleEncoder wgpuDawnWireClientDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPURenderPipeline wgpuDawnWireClientDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientDeviceCreateRenderPipelineAsync2(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientDeviceCreateRenderPipelineAsyncF(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUSampler wgpuDawnWireClientDeviceCreateSampler(WGPUDevice device, WGPU_NULLABLE WGPUSamplerDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUShaderModule wgpuDawnWireClientDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUTexture wgpuDawnWireClientDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceDestroy(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceForceLoss(WGPUDevice device, WGPUDeviceLostReason type, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientDeviceGetAHardwareBufferProperties(WGPUDevice device, void * handle, WGPUAHardwareBufferProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUAdapter wgpuDawnWireClientDeviceGetAdapter(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientDeviceGetAdapterInfo(WGPUDevice device, WGPUAdapterInfo * adapterInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceGetFeatures(WGPUDevice device, WGPUSupportedFeatures * features) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientDeviceGetLostFuture(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUQueue wgpuDawnWireClientDeviceGetQueue(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBool wgpuDawnWireClientDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUSharedBufferMemory wgpuDawnWireClientDeviceImportSharedBufferMemory(WGPUDevice device, WGPUSharedBufferMemoryDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUSharedFence wgpuDawnWireClientDeviceImportSharedFence(WGPUDevice device, WGPUSharedFenceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUSharedTextureMemory wgpuDawnWireClientDeviceImportSharedTextureMemory(WGPUDevice device, WGPUSharedTextureMemoryDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceInjectError(WGPUDevice device, WGPUErrorType type, WGPUStringView message) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback oldCallback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientDevicePopErrorScope2(WGPUDevice device, WGPUPopErrorScopeCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientDevicePopErrorScopeF(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceSetLabel(WGPUDevice device, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceTick(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceValidateTextureDescriptor(WGPUDevice device, WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceAddRef(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientDeviceRelease(WGPUDevice device) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of ExternalTexture\nDAWN_WIRE_EXPORT void wgpuDawnWireClientExternalTextureDestroy(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientExternalTextureExpire(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientExternalTextureRefresh(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientExternalTextureSetLabel(WGPUExternalTexture externalTexture, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientExternalTextureAddRef(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientExternalTextureRelease(WGPUExternalTexture externalTexture) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Instance\nDAWN_WIRE_EXPORT WGPUSurface wgpuDawnWireClientInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT size_t wgpuDawnWireClientInstanceEnumerateWGSLLanguageFeatures(WGPUInstance instance, WGPUWGSLFeatureName * features) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBool wgpuDawnWireClientInstanceHasWGSLLanguageFeature(WGPUInstance instance, WGPUWGSLFeatureName feature) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientInstanceProcessEvents(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientInstanceRequestAdapter(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientInstanceRequestAdapter2(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientInstanceRequestAdapterF(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUWaitStatus wgpuDawnWireClientInstanceWaitAny(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo * futures, uint64_t timeoutNS) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientInstanceAddRef(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientInstanceRelease(WGPUInstance instance) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of PipelineLayout\nDAWN_WIRE_EXPORT void wgpuDawnWireClientPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientPipelineLayoutAddRef(WGPUPipelineLayout pipelineLayout) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of QuerySet\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQuerySetDestroy(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT uint32_t wgpuDawnWireClientQuerySetGetCount(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUQueryType wgpuDawnWireClientQuerySetGetType(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQuerySetSetLabel(WGPUQuerySet querySet, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQuerySetAddRef(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQuerySetRelease(WGPUQuerySet querySet) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Queue\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueCopyExternalTextureForBrowser(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueCopyTextureForBrowser(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientQueueOnSubmittedWorkDone2(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientQueueOnSubmittedWorkDoneF(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueSetLabel(WGPUQueue queue, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueSubmit(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueAddRef(WGPUQueue queue) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientQueueRelease(WGPUQueue queue) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of RenderBundle\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleSetLabel(WGPURenderBundle renderBundle, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleAddRef(WGPURenderBundle renderBundle) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleRelease(WGPURenderBundle renderBundle) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of RenderBundleEncoder\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPURenderBundle wgpuDawnWireClientRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPU_NULLABLE WGPURenderBundleDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPU_NULLABLE WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderAddRef(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of RenderPassEncoder\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderMultiDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPU_NULLABLE WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderMultiDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPU_NULLABLE WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderPixelLocalStorageBarrier(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPU_NULLABLE WGPUBuffer buffer, uint64_t offset, uint64_t size) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderAddRef(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of RenderPipeline\nDAWN_WIRE_EXPORT WGPUBindGroupLayout wgpuDawnWireClientRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPipelineAddRef(WGPURenderPipeline renderPipeline) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientRenderPipelineRelease(WGPURenderPipeline renderPipeline) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Sampler\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSamplerSetLabel(WGPUSampler sampler, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSamplerAddRef(WGPUSampler sampler) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSamplerRelease(WGPUSampler sampler) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of ShaderModule\nDAWN_WIRE_EXPORT void wgpuDawnWireClientShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientShaderModuleGetCompilationInfo2(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo2 callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUFuture wgpuDawnWireClientShaderModuleGetCompilationInfoF(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientShaderModuleSetLabel(WGPUShaderModule shaderModule, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientShaderModuleAddRef(WGPUShaderModule shaderModule) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientShaderModuleRelease(WGPUShaderModule shaderModule) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of SharedBufferMemory\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientSharedBufferMemoryBeginAccess(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryBeginAccessDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBuffer wgpuDawnWireClientSharedBufferMemoryCreateBuffer(WGPUSharedBufferMemory sharedBufferMemory, WGPU_NULLABLE WGPUBufferDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientSharedBufferMemoryEndAccess(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryEndAccessState * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientSharedBufferMemoryGetProperties(WGPUSharedBufferMemory sharedBufferMemory, WGPUSharedBufferMemoryProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBool wgpuDawnWireClientSharedBufferMemoryIsDeviceLost(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedBufferMemorySetLabel(WGPUSharedBufferMemory sharedBufferMemory, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedBufferMemoryAddRef(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedBufferMemoryRelease(WGPUSharedBufferMemory sharedBufferMemory) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of SharedFence\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedFenceExportInfo(WGPUSharedFence sharedFence, WGPUSharedFenceExportInfo * info) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedFenceAddRef(WGPUSharedFence sharedFence) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedFenceRelease(WGPUSharedFence sharedFence) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of SharedTextureMemory\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientSharedTextureMemoryBeginAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryBeginAccessDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUTexture wgpuDawnWireClientSharedTextureMemoryCreateTexture(WGPUSharedTextureMemory sharedTextureMemory, WGPU_NULLABLE WGPUTextureDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientSharedTextureMemoryEndAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryEndAccessState * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientSharedTextureMemoryGetProperties(WGPUSharedTextureMemory sharedTextureMemory, WGPUSharedTextureMemoryProperties * properties) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUBool wgpuDawnWireClientSharedTextureMemoryIsDeviceLost(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedTextureMemorySetLabel(WGPUSharedTextureMemory sharedTextureMemory, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedTextureMemoryAddRef(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSharedTextureMemoryRelease(WGPUSharedTextureMemory sharedTextureMemory) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Surface\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSurfaceConfigure(WGPUSurface surface, WGPUSurfaceConfiguration const * config) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUStatus wgpuDawnWireClientSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities * capabilities) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture * surfaceTexture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSurfacePresent(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSurfaceSetLabel(WGPUSurface surface, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSurfaceUnconfigure(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSurfaceAddRef(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientSurfaceRelease(WGPUSurface surface) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of Texture\nDAWN_WIRE_EXPORT WGPUTextureView wgpuDawnWireClientTextureCreateErrorView(WGPUTexture texture, WGPU_NULLABLE WGPUTextureViewDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUTextureView wgpuDawnWireClientTextureCreateView(WGPUTexture texture, WGPU_NULLABLE WGPUTextureViewDescriptor const * descriptor) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientTextureDestroy(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT uint32_t wgpuDawnWireClientTextureGetDepthOrArrayLayers(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUTextureDimension wgpuDawnWireClientTextureGetDimension(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUTextureFormat wgpuDawnWireClientTextureGetFormat(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT uint32_t wgpuDawnWireClientTextureGetHeight(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT uint32_t wgpuDawnWireClientTextureGetMipLevelCount(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT uint32_t wgpuDawnWireClientTextureGetSampleCount(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT WGPUTextureUsage wgpuDawnWireClientTextureGetUsage(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT uint32_t wgpuDawnWireClientTextureGetWidth(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientTextureSetLabel(WGPUTexture texture, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientTextureAddRef(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientTextureRelease(WGPUTexture texture) WGPU_FUNCTION_ATTRIBUTE;\n\n// Methods of TextureView\nDAWN_WIRE_EXPORT void wgpuDawnWireClientTextureViewSetLabel(WGPUTextureView textureView, WGPUStringView label) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientTextureViewAddRef(WGPUTextureView textureView) WGPU_FUNCTION_ATTRIBUTE;\nDAWN_WIRE_EXPORT void wgpuDawnWireClientTextureViewRelease(WGPUTextureView textureView) WGPU_FUNCTION_ATTRIBUTE;\n\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#endif  // DAWN_WIRE_CLIENT_WEBGPU_H_\n", "include/dawn/dawn_proc_table.h": "\n#ifndef DAWN_DAWN_PROC_TABLE_H_\n#define DAWN_DAWN_PROC_TABLE_H_\n\n#include \"dawn/webgpu.h\"\n\n// Note: Often allocated as a static global. Do not add a complex constructor.\ntypedef struct DawnProcTable {\n    WGPUProcAdapterInfoFreeMembers adapterInfoFreeMembers;\n    WGPUProcAdapterPropertiesMemoryHeapsFreeMembers adapterPropertiesMemoryHeapsFreeMembers;\n    WGPUProcCreateInstance createInstance;\n    WGPUProcDrmFormatCapabilitiesFreeMembers drmFormatCapabilitiesFreeMembers;\n    WGPUProcGetInstanceFeatures getInstanceFeatures;\n    WGPUProcGetProcAddress getProcAddress;\n    WGPUProcSharedBufferMemoryEndAccessStateFreeMembers sharedBufferMemoryEndAccessStateFreeMembers;\n    WGPUProcSharedTextureMemoryEndAccessStateFreeMembers sharedTextureMemoryEndAccessStateFreeMembers;\n    WGPUProcSupportedFeaturesFreeMembers supportedFeaturesFreeMembers;\n    WGPUProcSurfaceCapabilitiesFreeMembers surfaceCapabilitiesFreeMembers;\n\n    WGPUProcAdapterCreateDevice adapterCreateDevice;\n    WGPUProcAdapterGetFeatures adapterGetFeatures;\n    WGPUProcAdapterGetFormatCapabilities adapterGetFormatCapabilities;\n    WGPUProcAdapterGetInfo adapterGetInfo;\n    WGPUProcAdapterGetInstance adapterGetInstance;\n    WGPUProcAdapterGetLimits adapterGetLimits;\n    WGPUProcAdapterHasFeature adapterHasFeature;\n    WGPUProcAdapterRequestDevice adapterRequestDevice;\n    WGPUProcAdapterRequestDevice2 adapterRequestDevice2;\n    WGPUProcAdapterRequestDeviceF adapterRequestDeviceF;\n    WGPUProcAdapterAddRef adapterAddRef;\n    WGPUProcAdapterRelease adapterRelease;\n\n    WGPUProcBindGroupSetLabel bindGroupSetLabel;\n    WGPUProcBindGroupAddRef bindGroupAddRef;\n    WGPUProcBindGroupRelease bindGroupRelease;\n\n    WGPUProcBindGroupLayoutSetLabel bindGroupLayoutSetLabel;\n    WGPUProcBindGroupLayoutAddRef bindGroupLayoutAddRef;\n    WGPUProcBindGroupLayoutRelease bindGroupLayoutRelease;\n\n    WGPUProcBufferDestroy bufferDestroy;\n    WGPUProcBufferGetConstMappedRange bufferGetConstMappedRange;\n    WGPUProcBufferGetMapState bufferGetMapState;\n    WGPUProcBufferGetMappedRange bufferGetMappedRange;\n    WGPUProcBufferGetSize bufferGetSize;\n    WGPUProcBufferGetUsage bufferGetUsage;\n    WGPUProcBufferMapAsync bufferMapAsync;\n    WGPUProcBufferMapAsync2 bufferMapAsync2;\n    WGPUProcBufferMapAsyncF bufferMapAsyncF;\n    WGPUProcBufferSetLabel bufferSetLabel;\n    WGPUProcBufferUnmap bufferUnmap;\n    WGPUProcBufferAddRef bufferAddRef;\n    WGPUProcBufferRelease bufferRelease;\n\n    WGPUProcCommandBufferSetLabel commandBufferSetLabel;\n    WGPUProcCommandBufferAddRef commandBufferAddRef;\n    WGPUProcCommandBufferRelease commandBufferRelease;\n\n    WGPUProcCommandEncoderBeginComputePass commandEncoderBeginComputePass;\n    WGPUProcCommandEncoderBeginRenderPass commandEncoderBeginRenderPass;\n    WGPUProcCommandEncoderClearBuffer commandEncoderClearBuffer;\n    WGPUProcCommandEncoderCopyBufferToBuffer commandEncoderCopyBufferToBuffer;\n    WGPUProcCommandEncoderCopyBufferToTexture commandEncoderCopyBufferToTexture;\n    WGPUProcCommandEncoderCopyTextureToBuffer commandEncoderCopyTextureToBuffer;\n    WGPUProcCommandEncoderCopyTextureToTexture commandEncoderCopyTextureToTexture;\n    WGPUProcCommandEncoderFinish commandEncoderFinish;\n    WGPUProcCommandEncoderInjectValidationError commandEncoderInjectValidationError;\n    WGPUProcCommandEncoderInsertDebugMarker commandEncoderInsertDebugMarker;\n    WGPUProcCommandEncoderPopDebugGroup commandEncoderPopDebugGroup;\n    WGPUProcCommandEncoderPushDebugGroup commandEncoderPushDebugGroup;\n    WGPUProcCommandEncoderResolveQuerySet commandEncoderResolveQuerySet;\n    WGPUProcCommandEncoderSetLabel commandEncoderSetLabel;\n    WGPUProcCommandEncoderWriteBuffer commandEncoderWriteBuffer;\n    WGPUProcCommandEncoderWriteTimestamp commandEncoderWriteTimestamp;\n    WGPUProcCommandEncoderAddRef commandEncoderAddRef;\n    WGPUProcCommandEncoderRelease commandEncoderRelease;\n\n    WGPUProcComputePassEncoderDispatchWorkgroups computePassEncoderDispatchWorkgroups;\n    WGPUProcComputePassEncoderDispatchWorkgroupsIndirect computePassEncoderDispatchWorkgroupsIndirect;\n    WGPUProcComputePassEncoderEnd computePassEncoderEnd;\n    WGPUProcComputePassEncoderInsertDebugMarker computePassEncoderInsertDebugMarker;\n    WGPUProcComputePassEncoderPopDebugGroup computePassEncoderPopDebugGroup;\n    WGPUProcComputePassEncoderPushDebugGroup computePassEncoderPushDebugGroup;\n    WGPUProcComputePassEncoderSetBindGroup computePassEncoderSetBindGroup;\n    WGPUProcComputePassEncoderSetLabel computePassEncoderSetLabel;\n    WGPUProcComputePassEncoderSetPipeline computePassEncoderSetPipeline;\n    WGPUProcComputePassEncoderWriteTimestamp computePassEncoderWriteTimestamp;\n    WGPUProcComputePassEncoderAddRef computePassEncoderAddRef;\n    WGPUProcComputePassEncoderRelease computePassEncoderRelease;\n\n    WGPUProcComputePipelineGetBindGroupLayout computePipelineGetBindGroupLayout;\n    WGPUProcComputePipelineSetLabel computePipelineSetLabel;\n    WGPUProcComputePipelineAddRef computePipelineAddRef;\n    WGPUProcComputePipelineRelease computePipelineRelease;\n\n    WGPUProcDeviceCreateBindGroup deviceCreateBindGroup;\n    WGPUProcDeviceCreateBindGroupLayout deviceCreateBindGroupLayout;\n    WGPUProcDeviceCreateBuffer deviceCreateBuffer;\n    WGPUProcDeviceCreateCommandEncoder deviceCreateCommandEncoder;\n    WGPUProcDeviceCreateComputePipeline deviceCreateComputePipeline;\n    WGPUProcDeviceCreateComputePipelineAsync deviceCreateComputePipelineAsync;\n    WGPUProcDeviceCreateComputePipelineAsync2 deviceCreateComputePipelineAsync2;\n    WGPUProcDeviceCreateComputePipelineAsyncF deviceCreateComputePipelineAsyncF;\n    WGPUProcDeviceCreateErrorBuffer deviceCreateErrorBuffer;\n    WGPUProcDeviceCreateErrorExternalTexture deviceCreateErrorExternalTexture;\n    WGPUProcDeviceCreateErrorShaderModule deviceCreateErrorShaderModule;\n    WGPUProcDeviceCreateErrorTexture deviceCreateErrorTexture;\n    WGPUProcDeviceCreateExternalTexture deviceCreateExternalTexture;\n    WGPUProcDeviceCreatePipelineLayout deviceCreatePipelineLayout;\n    WGPUProcDeviceCreateQuerySet deviceCreateQuerySet;\n    WGPUProcDeviceCreateRenderBundleEncoder deviceCreateRenderBundleEncoder;\n    WGPUProcDeviceCreateRenderPipeline deviceCreateRenderPipeline;\n    WGPUProcDeviceCreateRenderPipelineAsync deviceCreateRenderPipelineAsync;\n    WGPUProcDeviceCreateRenderPipelineAsync2 deviceCreateRenderPipelineAsync2;\n    WGPUProcDeviceCreateRenderPipelineAsyncF deviceCreateRenderPipelineAsyncF;\n    WGPUProcDeviceCreateSampler deviceCreateSampler;\n    WGPUProcDeviceCreateShaderModule deviceCreateShaderModule;\n    WGPUProcDeviceCreateTexture deviceCreateTexture;\n    WGPUProcDeviceDestroy deviceDestroy;\n    WGPUProcDeviceForceLoss deviceForceLoss;\n    WGPUProcDeviceGetAHardwareBufferProperties deviceGetAHardwareBufferProperties;\n    WGPUProcDeviceGetAdapter deviceGetAdapter;\n    WGPUProcDeviceGetAdapterInfo deviceGetAdapterInfo;\n    WGPUProcDeviceGetFeatures deviceGetFeatures;\n    WGPUProcDeviceGetLimits deviceGetLimits;\n    WGPUProcDeviceGetLostFuture deviceGetLostFuture;\n    WGPUProcDeviceGetQueue deviceGetQueue;\n    WGPUProcDeviceHasFeature deviceHasFeature;\n    WGPUProcDeviceImportSharedBufferMemory deviceImportSharedBufferMemory;\n    WGPUProcDeviceImportSharedFence deviceImportSharedFence;\n    WGPUProcDeviceImportSharedTextureMemory deviceImportSharedTextureMemory;\n    WGPUProcDeviceInjectError deviceInjectError;\n    WGPUProcDevicePopErrorScope devicePopErrorScope;\n    WGPUProcDevicePopErrorScope2 devicePopErrorScope2;\n    WGPUProcDevicePopErrorScopeF devicePopErrorScopeF;\n    WGPUProcDevicePushErrorScope devicePushErrorScope;\n    WGPUProcDeviceSetLabel deviceSetLabel;\n    WGPUProcDeviceSetLoggingCallback deviceSetLoggingCallback;\n    WGPUProcDeviceTick deviceTick;\n    WGPUProcDeviceValidateTextureDescriptor deviceValidateTextureDescriptor;\n    WGPUProcDeviceAddRef deviceAddRef;\n    WGPUProcDeviceRelease deviceRelease;\n\n    WGPUProcExternalTextureDestroy externalTextureDestroy;\n    WGPUProcExternalTextureExpire externalTextureExpire;\n    WGPUProcExternalTextureRefresh externalTextureRefresh;\n    WGPUProcExternalTextureSetLabel externalTextureSetLabel;\n    WGPUProcExternalTextureAddRef externalTextureAddRef;\n    WGPUProcExternalTextureRelease externalTextureRelease;\n\n    WGPUProcInstanceCreateSurface instanceCreateSurface;\n    WGPUProcInstanceEnumerateWGSLLanguageFeatures instanceEnumerateWGSLLanguageFeatures;\n    WGPUProcInstanceHasWGSLLanguageFeature instanceHasWGSLLanguageFeature;\n    WGPUProcInstanceProcessEvents instanceProcessEvents;\n    WGPUProcInstanceRequestAdapter instanceRequestAdapter;\n    WGPUProcInstanceRequestAdapter2 instanceRequestAdapter2;\n    WGPUProcInstanceRequestAdapterF instanceRequestAdapterF;\n    WGPUProcInstanceWaitAny instanceWaitAny;\n    WGPUProcInstanceAddRef instanceAddRef;\n    WGPUProcInstanceRelease instanceRelease;\n\n    WGPUProcPipelineLayoutSetLabel pipelineLayoutSetLabel;\n    WGPUProcPipelineLayoutAddRef pipelineLayoutAddRef;\n    WGPUProcPipelineLayoutRelease pipelineLayoutRelease;\n\n    WGPUProcQuerySetDestroy querySetDestroy;\n    WGPUProcQuerySetGetCount querySetGetCount;\n    WGPUProcQuerySetGetType querySetGetType;\n    WGPUProcQuerySetSetLabel querySetSetLabel;\n    WGPUProcQuerySetAddRef querySetAddRef;\n    WGPUProcQuerySetRelease querySetRelease;\n\n    WGPUProcQueueCopyExternalTextureForBrowser queueCopyExternalTextureForBrowser;\n    WGPUProcQueueCopyTextureForBrowser queueCopyTextureForBrowser;\n    WGPUProcQueueOnSubmittedWorkDone queueOnSubmittedWorkDone;\n    WGPUProcQueueOnSubmittedWorkDone2 queueOnSubmittedWorkDone2;\n    WGPUProcQueueOnSubmittedWorkDoneF queueOnSubmittedWorkDoneF;\n    WGPUProcQueueSetLabel queueSetLabel;\n    WGPUProcQueueSubmit queueSubmit;\n    WGPUProcQueueWriteBuffer queueWriteBuffer;\n    WGPUProcQueueWriteTexture queueWriteTexture;\n    WGPUProcQueueAddRef queueAddRef;\n    WGPUProcQueueRelease queueRelease;\n\n    WGPUProcRenderBundleSetLabel renderBundleSetLabel;\n    WGPUProcRenderBundleAddRef renderBundleAddRef;\n    WGPUProcRenderBundleRelease renderBundleRelease;\n\n    WGPUProcRenderBundleEncoderDraw renderBundleEncoderDraw;\n    WGPUProcRenderBundleEncoderDrawIndexed renderBundleEncoderDrawIndexed;\n    WGPUProcRenderBundleEncoderDrawIndexedIndirect renderBundleEncoderDrawIndexedIndirect;\n    WGPUProcRenderBundleEncoderDrawIndirect renderBundleEncoderDrawIndirect;\n    WGPUProcRenderBundleEncoderFinish renderBundleEncoderFinish;\n    WGPUProcRenderBundleEncoderInsertDebugMarker renderBundleEncoderInsertDebugMarker;\n    WGPUProcRenderBundleEncoderPopDebugGroup renderBundleEncoderPopDebugGroup;\n    WGPUProcRenderBundleEncoderPushDebugGroup renderBundleEncoderPushDebugGroup;\n    WGPUProcRenderBundleEncoderSetBindGroup renderBundleEncoderSetBindGroup;\n    WGPUProcRenderBundleEncoderSetIndexBuffer renderBundleEncoderSetIndexBuffer;\n    WGPUProcRenderBundleEncoderSetLabel renderBundleEncoderSetLabel;\n    WGPUProcRenderBundleEncoderSetPipeline renderBundleEncoderSetPipeline;\n    WGPUProcRenderBundleEncoderSetVertexBuffer renderBundleEncoderSetVertexBuffer;\n    WGPUProcRenderBundleEncoderAddRef renderBundleEncoderAddRef;\n    WGPUProcRenderBundleEncoderRelease renderBundleEncoderRelease;\n\n    WGPUProcRenderPassEncoderBeginOcclusionQuery renderPassEncoderBeginOcclusionQuery;\n    WGPUProcRenderPassEncoderDraw renderPassEncoderDraw;\n    WGPUProcRenderPassEncoderDrawIndexed renderPassEncoderDrawIndexed;\n    WGPUProcRenderPassEncoderDrawIndexedIndirect renderPassEncoderDrawIndexedIndirect;\n    WGPUProcRenderPassEncoderDrawIndirect renderPassEncoderDrawIndirect;\n    WGPUProcRenderPassEncoderEnd renderPassEncoderEnd;\n    WGPUProcRenderPassEncoderEndOcclusionQuery renderPassEncoderEndOcclusionQuery;\n    WGPUProcRenderPassEncoderExecuteBundles renderPassEncoderExecuteBundles;\n    WGPUProcRenderPassEncoderInsertDebugMarker renderPassEncoderInsertDebugMarker;\n    WGPUProcRenderPassEncoderMultiDrawIndexedIndirect renderPassEncoderMultiDrawIndexedIndirect;\n    WGPUProcRenderPassEncoderMultiDrawIndirect renderPassEncoderMultiDrawIndirect;\n    WGPUProcRenderPassEncoderPixelLocalStorageBarrier renderPassEncoderPixelLocalStorageBarrier;\n    WGPUProcRenderPassEncoderPopDebugGroup renderPassEncoderPopDebugGroup;\n    WGPUProcRenderPassEncoderPushDebugGroup renderPassEncoderPushDebugGroup;\n    WGPUProcRenderPassEncoderSetBindGroup renderPassEncoderSetBindGroup;\n    WGPUProcRenderPassEncoderSetBlendConstant renderPassEncoderSetBlendConstant;\n    WGPUProcRenderPassEncoderSetIndexBuffer renderPassEncoderSetIndexBuffer;\n    WGPUProcRenderPassEncoderSetLabel renderPassEncoderSetLabel;\n    WGPUProcRenderPassEncoderSetPipeline renderPassEncoderSetPipeline;\n    WGPUProcRenderPassEncoderSetScissorRect renderPassEncoderSetScissorRect;\n    WGPUProcRenderPassEncoderSetStencilReference renderPassEncoderSetStencilReference;\n    WGPUProcRenderPassEncoderSetVertexBuffer renderPassEncoderSetVertexBuffer;\n    WGPUProcRenderPassEncoderSetViewport renderPassEncoderSetViewport;\n    WGPUProcRenderPassEncoderWriteTimestamp renderPassEncoderWriteTimestamp;\n    WGPUProcRenderPassEncoderAddRef renderPassEncoderAddRef;\n    WGPUProcRenderPassEncoderRelease renderPassEncoderRelease;\n\n    WGPUProcRenderPipelineGetBindGroupLayout renderPipelineGetBindGroupLayout;\n    WGPUProcRenderPipelineSetLabel renderPipelineSetLabel;\n    WGPUProcRenderPipelineAddRef renderPipelineAddRef;\n    WGPUProcRenderPipelineRelease renderPipelineRelease;\n\n    WGPUProcSamplerSetLabel samplerSetLabel;\n    WGPUProcSamplerAddRef samplerAddRef;\n    WGPUProcSamplerRelease samplerRelease;\n\n    WGPUProcShaderModuleGetCompilationInfo shaderModuleGetCompilationInfo;\n    WGPUProcShaderModuleGetCompilationInfo2 shaderModuleGetCompilationInfo2;\n    WGPUProcShaderModuleGetCompilationInfoF shaderModuleGetCompilationInfoF;\n    WGPUProcShaderModuleSetLabel shaderModuleSetLabel;\n    WGPUProcShaderModuleAddRef shaderModuleAddRef;\n    WGPUProcShaderModuleRelease shaderModuleRelease;\n\n    WGPUProcSharedBufferMemoryBeginAccess sharedBufferMemoryBeginAccess;\n    WGPUProcSharedBufferMemoryCreateBuffer sharedBufferMemoryCreateBuffer;\n    WGPUProcSharedBufferMemoryEndAccess sharedBufferMemoryEndAccess;\n    WGPUProcSharedBufferMemoryGetProperties sharedBufferMemoryGetProperties;\n    WGPUProcSharedBufferMemoryIsDeviceLost sharedBufferMemoryIsDeviceLost;\n    WGPUProcSharedBufferMemorySetLabel sharedBufferMemorySetLabel;\n    WGPUProcSharedBufferMemoryAddRef sharedBufferMemoryAddRef;\n    WGPUProcSharedBufferMemoryRelease sharedBufferMemoryRelease;\n\n    WGPUProcSharedFenceExportInfo sharedFenceExportInfo;\n    WGPUProcSharedFenceAddRef sharedFenceAddRef;\n    WGPUProcSharedFenceRelease sharedFenceRelease;\n\n    WGPUProcSharedTextureMemoryBeginAccess sharedTextureMemoryBeginAccess;\n    WGPUProcSharedTextureMemoryCreateTexture sharedTextureMemoryCreateTexture;\n    WGPUProcSharedTextureMemoryEndAccess sharedTextureMemoryEndAccess;\n    WGPUProcSharedTextureMemoryGetProperties sharedTextureMemoryGetProperties;\n    WGPUProcSharedTextureMemoryIsDeviceLost sharedTextureMemoryIsDeviceLost;\n    WGPUProcSharedTextureMemorySetLabel sharedTextureMemorySetLabel;\n    WGPUProcSharedTextureMemoryAddRef sharedTextureMemoryAddRef;\n    WGPUProcSharedTextureMemoryRelease sharedTextureMemoryRelease;\n\n    WGPUProcSurfaceConfigure surfaceConfigure;\n    WGPUProcSurfaceGetCapabilities surfaceGetCapabilities;\n    WGPUProcSurfaceGetCurrentTexture surfaceGetCurrentTexture;\n    WGPUProcSurfacePresent surfacePresent;\n    WGPUProcSurfaceSetLabel surfaceSetLabel;\n    WGPUProcSurfaceUnconfigure surfaceUnconfigure;\n    WGPUProcSurfaceAddRef surfaceAddRef;\n    WGPUProcSurfaceRelease surfaceRelease;\n\n    WGPUProcTextureCreateErrorView textureCreateErrorView;\n    WGPUProcTextureCreateView textureCreateView;\n    WGPUProcTextureDestroy textureDestroy;\n    WGPUProcTextureGetDepthOrArrayLayers textureGetDepthOrArrayLayers;\n    WGPUProcTextureGetDimension textureGetDimension;\n    WGPUProcTextureGetFormat textureGetFormat;\n    WGPUProcTextureGetHeight textureGetHeight;\n    WGPUProcTextureGetMipLevelCount textureGetMipLevelCount;\n    WGPUProcTextureGetSampleCount textureGetSampleCount;\n    WGPUProcTextureGetUsage textureGetUsage;\n    WGPUProcTextureGetWidth textureGetWidth;\n    WGPUProcTextureSetLabel textureSetLabel;\n    WGPUProcTextureAddRef textureAddRef;\n    WGPUProcTextureRelease textureRelease;\n\n    WGPUProcTextureViewSetLabel textureViewSetLabel;\n    WGPUProcTextureViewAddRef textureViewAddRef;\n    WGPUProcTextureViewRelease textureViewRelease;\n\n\n} DawnProcTable;\n\n#endif  // DAWN_DAWN_PROC_TABLE_H_\n"}