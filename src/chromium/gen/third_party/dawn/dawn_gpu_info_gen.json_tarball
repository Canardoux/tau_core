{"src/dawn/common/GPUInfo_autogen.h": "// Copyright 2022 The Dawn & Tint Authors\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice, this\n//    list of conditions and the following disclaimer.\n//\n// 2. Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n// 3. Neither the name of the copyright holder nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#ifndef SRC_DAWN_COMMON_GPUINFO_AUTOGEN_H_\n#define SRC_DAWN_COMMON_GPUINFO_AUTOGEN_H_\n\n#include <cstdint>\n#include <string>\n\nusing PCIVendorID = uint32_t;\nusing PCIDeviceID = uint32_t;\n\nnamespace dawn::gpu_info {\n\n// Vendor IDs\nstatic constexpr PCIVendorID kVendorID_AMD = 0x1002;\nstatic constexpr PCIVendorID kVendorID_Apple = 0x106b;\nstatic constexpr PCIVendorID kVendorID_ARM = 0x13B5;\nstatic constexpr PCIVendorID kVendorID_Broadcom = 0x14e4;\nstatic constexpr PCIVendorID kVendorID_Google = 0x1AE0;\nstatic constexpr PCIVendorID kVendorID_ImgTec = 0x1010;\nstatic constexpr PCIVendorID kVendorID_Intel = 0x8086;\nstatic constexpr PCIVendorID kVendorID_Mesa = 0x10005;\nstatic constexpr PCIVendorID kVendorID_Microsoft = 0x1414;\nstatic constexpr PCIVendorID kVendorID_Nvidia = 0x10DE;\nstatic constexpr PCIVendorID kVendorID_Qualcomm_PCI = 0x5143;\nstatic constexpr PCIVendorID kVendorID_Qualcomm_ACPI = 0x4D4F4351;\nstatic constexpr PCIVendorID kVendorID_Samsung = 0x144d;\n\n// Vendor checks\nbool IsAMD(PCIVendorID vendorId);\nbool IsApple(PCIVendorID vendorId);\nbool IsARM(PCIVendorID vendorId);\nbool IsBroadcom(PCIVendorID vendorId);\nbool IsGoogle(PCIVendorID vendorId);\nbool IsImgTec(PCIVendorID vendorId);\nbool IsIntel(PCIVendorID vendorId);\nbool IsMesa(PCIVendorID vendorId);\nbool IsMicrosoft(PCIVendorID vendorId);\nbool IsNvidia(PCIVendorID vendorId);\nbool IsQualcomm_PCI(PCIVendorID vendorId);\nbool IsQualcomm_ACPI(PCIVendorID vendorId);\nbool IsSamsung(PCIVendorID vendorId);\n\n// Architecture checks\n\n// AMD architectures\nbool IsAMDGCN1(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsAMDGCN2(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsAMDGCN3(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsAMDGCN4(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsAMDGCN5(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsAMDRDNA1(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsAMDRDNA2(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsAMDRDNA3(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsAMDCDNA1(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// ARM architectures\nbool IsARMMidgard(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsARMBifrost(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsARMValhall(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsARMGen5(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Broadcom architectures\nbool IsBroadcomVideoCore(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Google architectures\nbool IsGoogleSwiftshader(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Img Tec architectures\nbool IsImgTecRogue(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsImgTecFurian(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsImgTecAlbiorix(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Intel architectures\nbool IsIntelGen7(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsIntelGen8(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsIntelGen9(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsIntelGen11(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsIntelGen12LP(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsIntelGen12HP(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsIntelGen13LP(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsIntelGen13HP(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Mesa architectures\nbool IsMesaSoftware(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Microsoft architectures\nbool IsMicrosoftWARP(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Nvidia architectures\nbool IsNvidiaFermi(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsNvidiaKepler(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsNvidiaMaxwell(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsNvidiaPascal(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsNvidiaTuring(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsNvidiaAmpere(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsNvidiaLovelace(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsNvidiaVolta(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Qualcomm_PCI architectures\nbool IsQualcomm_PCIAdreno4xx(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsQualcomm_PCIAdreno5xx(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsQualcomm_PCIAdreno6xx(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsQualcomm_PCIAdreno7xx(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Qualcomm_ACPI architectures\nbool IsQualcomm_ACPIAdreno8xx(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// Samsung architectures\nbool IsSamsungRDNA2(PCIVendorID vendorId, PCIDeviceID deviceId);\nbool IsSamsungRDNA3(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n// GPUAdapterInfo fields\nstd::string GetVendorName(PCIVendorID vendorId);\nstd::string GetArchitectureName(PCIVendorID vendorId, PCIDeviceID deviceId);\n\n} // namespace dawn::gpu_info\n#endif  // SRC_DAWN_COMMON_GPUINFO_AUTOGEN_H_\n", "src/dawn/common/GPUInfo_autogen.cpp": "// Copyright 2022 The Dawn & Tint Authors\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice, this\n//    list of conditions and the following disclaimer.\n//\n// 2. Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n// 3. Neither the name of the copyright holder nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#include <algorithm>\n#include <array>\n#include <sstream>\n#include <iomanip>\n\n#include \"dawn/common/GPUInfo_autogen.h\"\n\n#include \"dawn/common/Assert.h\"\n\nnamespace dawn::gpu_info {\n\nnamespace {\n\nenum class Architecture {\n    Unknown,\n    AMD_GCN1,\n    AMD_GCN2,\n    AMD_GCN3,\n    AMD_GCN4,\n    AMD_GCN5,\n    AMD_RDNA1,\n    AMD_RDNA2,\n    AMD_RDNA3,\n    AMD_CDNA1,\n    ARM_Midgard,\n    ARM_Bifrost,\n    ARM_Valhall,\n    ARM_Gen5,\n    Broadcom_VideoCore,\n    Google_Swiftshader,\n    ImgTec_Rogue,\n    ImgTec_Furian,\n    ImgTec_Albiorix,\n    Intel_Gen7,\n    Intel_Gen8,\n    Intel_Gen9,\n    Intel_Gen11,\n    Intel_Gen12LP,\n    Intel_Gen12HP,\n    Intel_Gen13LP,\n    Intel_Gen13HP,\n    Mesa_Software,\n    Microsoft_WARP,\n    Nvidia_Fermi,\n    Nvidia_Kepler,\n    Nvidia_Maxwell,\n    Nvidia_Pascal,\n    Nvidia_Turing,\n    Nvidia_Ampere,\n    Nvidia_Lovelace,\n    Nvidia_Volta,\n    Qualcomm_PCI_Adreno4xx,\n    Qualcomm_PCI_Adreno5xx,\n    Qualcomm_PCI_Adreno6xx,\n    Qualcomm_PCI_Adreno7xx,\n    Qualcomm_ACPI_Adreno8xx,\n    Samsung_RDNA2,\n    Samsung_RDNA3,\n};\n\nArchitecture GetArchitecture(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    switch(vendorId) {\n        case kVendorID_AMD: {\n            switch (deviceId & 0xFFF0) {\n                case 0x1300:\n                case 0x1310:\n                case 0x6600:\n                case 0x6610:\n                case 0x6660:\n                case 0x6790:\n                case 0x6800:\n                case 0x6810:\n                case 0x6820:\n                case 0x6830:\n                    return Architecture::AMD_GCN1;\n                case 0x6640:\n                case 0x6650:\n                case 0x67A0:\n                case 0x67B0:\n                case 0x9830:\n                case 0x9850:\n                    return Architecture::AMD_GCN2;\n                case 0x6900:\n                case 0x6920:\n                case 0x6930:\n                case 0x7300:\n                case 0x9870:\n                case 0x98E0:\n                    return Architecture::AMD_GCN3;\n                case 0x67C0:\n                case 0x67D0:\n                case 0x67E0:\n                case 0x67F0:\n                case 0x6980:\n                case 0x6990:\n                case 0x6FD0:\n                case 0x9920:\n                    return Architecture::AMD_GCN4;\n                case 0x66A0:\n                case 0x6860:\n                case 0x6870:\n                case 0x6940:\n                case 0x69A0:\n                case 0x15D0:\n                case 0x1630:\n                    return Architecture::AMD_GCN5;\n                case 0x7310:\n                case 0x7340:\n                case 0x7360:\n                    return Architecture::AMD_RDNA1;\n                case 0x73A0:\n                case 0x73B0:\n                case 0x73D0:\n                case 0x73E0:\n                case 0x73F0:\n                case 0x7400:\n                case 0x7420:\n                case 0x7430:\n                case 0x1430:\n                case 0x1500:\n                case 0x15E0:\n                case 0x1640:\n                case 0x1680:\n                    return Architecture::AMD_RDNA2;\n                case 0x7440:\n                case 0x7470:\n                case 0x7480:\n                case 0x15B0:\n                    return Architecture::AMD_RDNA3;\n                case 0x7380:\n                    return Architecture::AMD_CDNA1;\n            }\n        } break;\n        case kVendorID_ARM: {\n            switch (deviceId & 0xF0000000) {\n                case 0x00000000:\n                    return Architecture::ARM_Midgard;\n                case 0x60000000:\n                case 0x70000000:\n                    return Architecture::ARM_Bifrost;\n                case 0x90000000:\n                case 0xA0000000:\n                case 0xB0000000:\n                    return Architecture::ARM_Valhall;\n                case 0xC0000000:\n                    return Architecture::ARM_Gen5;\n            }\n        } break;\n        case kVendorID_Broadcom: {\n            switch (deviceId & 0x00000000) {\n                case 0x00000000:\n                    return Architecture::Broadcom_VideoCore;\n            }\n        } break;\n        case kVendorID_Google: {\n            switch (deviceId) {\n                case 0xC0DE:\n                    return Architecture::Google_Swiftshader;\n            }\n        } break;\n        case kVendorID_ImgTec: {\n            switch (deviceId & 0xFF000000) {\n                case 0x00000000:\n                case 0x22000000:\n                case 0x24000000:\n                    return Architecture::ImgTec_Rogue;\n                case 0x1b000000:\n                    return Architecture::ImgTec_Furian;\n                case 0x35000000:\n                case 0x36000000:\n                    return Architecture::ImgTec_Albiorix;\n            }\n        } break;\n        case kVendorID_Intel: {\n            switch (deviceId & 0xFF00) {\n                case 0x0100:\n                case 0x0400:\n                case 0x0A00:\n                case 0x0D00:\n                case 0x0F00:\n                    return Architecture::Intel_Gen7;\n                case 0x1600:\n                case 0x2200:\n                    return Architecture::Intel_Gen8;\n                case 0x1900:\n                case 0x3100:\n                case 0x3E00:\n                case 0x5A00:\n                case 0x5900:\n                case 0x8700:\n                case 0x9B00:\n                    return Architecture::Intel_Gen9;\n                case 0x8A00:\n                case 0x4E00:\n                case 0x9800:\n                    return Architecture::Intel_Gen11;\n                case 0x4600:\n                case 0x4C00:\n                case 0x4900:\n                case 0x9A00:\n                case 0xA700:\n                case 0x7D00:\n                    return Architecture::Intel_Gen12LP;\n                case 0x4F00:\n                case 0x5600:\n                    return Architecture::Intel_Gen12HP;\n                case 0x6400:\n                    return Architecture::Intel_Gen13LP;\n                case 0xE200:\n                    return Architecture::Intel_Gen13HP;\n            }\n        } break;\n        case kVendorID_Mesa: {\n            switch (deviceId) {\n                case 0x0000:\n                    return Architecture::Mesa_Software;\n            }\n        } break;\n        case kVendorID_Microsoft: {\n            switch (deviceId) {\n                case 0x8c:\n                    return Architecture::Microsoft_WARP;\n            }\n        } break;\n        case kVendorID_Nvidia: {\n            switch (deviceId & 0xFFFFFF00) {\n                case 0x0D00:\n                    return Architecture::Nvidia_Fermi;\n                case 0x0F00:\n                case 0x1000:\n                case 0x1100:\n                case 0x1200:\n                    return Architecture::Nvidia_Kepler;\n                case 0x1300:\n                case 0x1400:\n                case 0x1600:\n                case 0x1700:\n                    return Architecture::Nvidia_Maxwell;\n                case 0x1500:\n                case 0x1B00:\n                case 0x1C00:\n                case 0x1D00:\n                    return Architecture::Nvidia_Pascal;\n                case 0x1E00:\n                case 0x1F00:\n                case 0x2100:\n                    return Architecture::Nvidia_Turing;\n                case 0x2200:\n                case 0x2400:\n                case 0x2500:\n                case 0x2000:\n                    return Architecture::Nvidia_Ampere;\n                case 0x2600:\n                case 0x2700:\n                case 0x2800:\n                    return Architecture::Nvidia_Lovelace;\n            }\n            switch (deviceId & 0xFF000000) {\n                case 0x1e000000:\n                    return Architecture::Nvidia_Kepler;\n                case 0x92000000:\n                    return Architecture::Nvidia_Maxwell;\n                case 0x93000000:\n                    return Architecture::Nvidia_Pascal;\n                case 0x97000000:\n                    return Architecture::Nvidia_Ampere;\n                case 0xa5000000:\n                    return Architecture::Nvidia_Volta;\n            }\n        } break;\n        case kVendorID_Qualcomm_PCI: {\n            switch (deviceId & 0xFF000000) {\n                case 0x04000000:\n                    return Architecture::Qualcomm_PCI_Adreno4xx;\n                case 0x05000000:\n                    return Architecture::Qualcomm_PCI_Adreno5xx;\n                case 0x06000000:\n                    return Architecture::Qualcomm_PCI_Adreno6xx;\n                case 0x07000000:\n                case 0x43000000:\n                    return Architecture::Qualcomm_PCI_Adreno7xx;\n            }\n        } break;\n        case kVendorID_Qualcomm_ACPI: {\n            switch (deviceId & 0xFF000000) {\n                case 0x36000000:\n                    return Architecture::Qualcomm_ACPI_Adreno8xx;\n            }\n        } break;\n        case kVendorID_Samsung: {\n            switch (deviceId & 0xFFFFFFFF) {\n                case 0x000073A0:\n                case 0x01300100:\n                    return Architecture::Samsung_RDNA2;\n                case 0x02600200:\n                    return Architecture::Samsung_RDNA3;\n            }\n        } break;\n    }\n\n    return Architecture::Unknown;\n}\n\n\n}  // namespace\n\n// Vendor checks\nbool IsAMD(PCIVendorID vendorId) {\n    return vendorId == kVendorID_AMD;\n}\nbool IsApple(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Apple;\n}\nbool IsARM(PCIVendorID vendorId) {\n    return vendorId == kVendorID_ARM;\n}\nbool IsBroadcom(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Broadcom;\n}\nbool IsGoogle(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Google;\n}\nbool IsImgTec(PCIVendorID vendorId) {\n    return vendorId == kVendorID_ImgTec;\n}\nbool IsIntel(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Intel;\n}\nbool IsMesa(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Mesa;\n}\nbool IsMicrosoft(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Microsoft;\n}\nbool IsNvidia(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Nvidia;\n}\nbool IsQualcomm_PCI(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Qualcomm_PCI;\n}\nbool IsQualcomm_ACPI(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Qualcomm_ACPI;\n}\nbool IsSamsung(PCIVendorID vendorId) {\n    return vendorId == kVendorID_Samsung;\n}\n\n// Architecture checks\n\n// AMD architectures\nbool IsAMDGCN1(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_GCN1;\n}\nbool IsAMDGCN2(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_GCN2;\n}\nbool IsAMDGCN3(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_GCN3;\n}\nbool IsAMDGCN4(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_GCN4;\n}\nbool IsAMDGCN5(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_GCN5;\n}\nbool IsAMDRDNA1(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_RDNA1;\n}\nbool IsAMDRDNA2(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_RDNA2;\n}\nbool IsAMDRDNA3(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_RDNA3;\n}\nbool IsAMDCDNA1(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::AMD_CDNA1;\n}\n// ARM architectures\nbool IsARMMidgard(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::ARM_Midgard;\n}\nbool IsARMBifrost(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::ARM_Bifrost;\n}\nbool IsARMValhall(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::ARM_Valhall;\n}\nbool IsARMGen5(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::ARM_Gen5;\n}\n// Broadcom architectures\nbool IsBroadcomVideoCore(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Broadcom_VideoCore;\n}\n// Google architectures\nbool IsGoogleSwiftshader(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Google_Swiftshader;\n}\n// Img Tec architectures\nbool IsImgTecRogue(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::ImgTec_Rogue;\n}\nbool IsImgTecFurian(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::ImgTec_Furian;\n}\nbool IsImgTecAlbiorix(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::ImgTec_Albiorix;\n}\n// Intel architectures\nbool IsIntelGen7(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Intel_Gen7;\n}\nbool IsIntelGen8(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Intel_Gen8;\n}\nbool IsIntelGen9(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Intel_Gen9;\n}\nbool IsIntelGen11(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Intel_Gen11;\n}\nbool IsIntelGen12LP(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Intel_Gen12LP;\n}\nbool IsIntelGen12HP(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Intel_Gen12HP;\n}\nbool IsIntelGen13LP(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Intel_Gen13LP;\n}\nbool IsIntelGen13HP(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Intel_Gen13HP;\n}\n// Mesa architectures\nbool IsMesaSoftware(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Mesa_Software;\n}\n// Microsoft architectures\nbool IsMicrosoftWARP(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Microsoft_WARP;\n}\n// Nvidia architectures\nbool IsNvidiaFermi(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Nvidia_Fermi;\n}\nbool IsNvidiaKepler(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Nvidia_Kepler;\n}\nbool IsNvidiaMaxwell(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Nvidia_Maxwell;\n}\nbool IsNvidiaPascal(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Nvidia_Pascal;\n}\nbool IsNvidiaTuring(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Nvidia_Turing;\n}\nbool IsNvidiaAmpere(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Nvidia_Ampere;\n}\nbool IsNvidiaLovelace(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Nvidia_Lovelace;\n}\nbool IsNvidiaVolta(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Nvidia_Volta;\n}\n// Qualcomm_PCI architectures\nbool IsQualcomm_PCIAdreno4xx(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Qualcomm_PCI_Adreno4xx;\n}\nbool IsQualcomm_PCIAdreno5xx(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Qualcomm_PCI_Adreno5xx;\n}\nbool IsQualcomm_PCIAdreno6xx(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Qualcomm_PCI_Adreno6xx;\n}\nbool IsQualcomm_PCIAdreno7xx(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Qualcomm_PCI_Adreno7xx;\n}\n// Qualcomm_ACPI architectures\nbool IsQualcomm_ACPIAdreno8xx(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Qualcomm_ACPI_Adreno8xx;\n}\n// Samsung architectures\nbool IsSamsungRDNA2(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Samsung_RDNA2;\n}\nbool IsSamsungRDNA3(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    return GetArchitecture(vendorId, deviceId) == Architecture::Samsung_RDNA3;\n}\n\n// GPUAdapterInfo fields\nstd::string GetVendorName(PCIVendorID vendorId) {\n    switch(vendorId) {\n        case kVendorID_AMD:\n            return \"amd\";\n        case kVendorID_Apple:\n            return \"apple\";\n        case kVendorID_ARM:\n            return \"arm\";\n        case kVendorID_Broadcom:\n            return \"broadcom\";\n        case kVendorID_Google:\n            return \"google\";\n        case kVendorID_ImgTec:\n            return \"img-tec\";\n        case kVendorID_Intel:\n            return \"intel\";\n        case kVendorID_Mesa:\n            return \"mesa\";\n        case kVendorID_Microsoft:\n            return \"microsoft\";\n        case kVendorID_Nvidia:\n            return \"nvidia\";\n        case kVendorID_Qualcomm_PCI:\n            return \"qualcomm\";\n        case kVendorID_Qualcomm_ACPI:\n            return \"qualcomm\";\n        case kVendorID_Samsung:\n            return \"samsung\";\n    }\n\n    return \"\";\n}\n\nstd::string GetArchitectureName(PCIVendorID vendorId, PCIDeviceID deviceId) {\n    Architecture arch = GetArchitecture(vendorId, deviceId);\n    switch(arch) {\n        case Architecture::Unknown:\n            return \"\";\n        case Architecture::AMD_GCN1:\n            return \"gcn-1\";\n        case Architecture::AMD_GCN2:\n            return \"gcn-2\";\n        case Architecture::AMD_GCN3:\n            return \"gcn-3\";\n        case Architecture::AMD_GCN4:\n            return \"gcn-4\";\n        case Architecture::AMD_GCN5:\n            return \"gcn-5\";\n        case Architecture::AMD_RDNA1:\n            return \"rdna-1\";\n        case Architecture::AMD_RDNA2:\n            return \"rdna-2\";\n        case Architecture::AMD_RDNA3:\n            return \"rdna-3\";\n        case Architecture::AMD_CDNA1:\n            return \"cdna-1\";\n        case Architecture::ARM_Midgard:\n            return \"midgard\";\n        case Architecture::ARM_Bifrost:\n            return \"bifrost\";\n        case Architecture::ARM_Valhall:\n            return \"valhall\";\n        case Architecture::ARM_Gen5:\n            return \"gen-5\";\n        case Architecture::Broadcom_VideoCore:\n            return \"videocore\";\n        case Architecture::Google_Swiftshader:\n            return \"swiftshader\";\n        case Architecture::ImgTec_Rogue:\n            return \"rogue\";\n        case Architecture::ImgTec_Furian:\n            return \"furian\";\n        case Architecture::ImgTec_Albiorix:\n            return \"albiorix\";\n        case Architecture::Intel_Gen7:\n            return \"gen-7\";\n        case Architecture::Intel_Gen8:\n            return \"gen-8\";\n        case Architecture::Intel_Gen9:\n            return \"gen-9\";\n        case Architecture::Intel_Gen11:\n            return \"gen-11\";\n        case Architecture::Intel_Gen12LP:\n            return \"gen-12lp\";\n        case Architecture::Intel_Gen12HP:\n            return \"gen-12hp\";\n        case Architecture::Intel_Gen13LP:\n            return \"gen-13lp\";\n        case Architecture::Intel_Gen13HP:\n            return \"gen-13hp\";\n        case Architecture::Mesa_Software:\n            return \"software\";\n        case Architecture::Microsoft_WARP:\n            return \"warp\";\n        case Architecture::Nvidia_Fermi:\n            return \"fermi\";\n        case Architecture::Nvidia_Kepler:\n            return \"kepler\";\n        case Architecture::Nvidia_Maxwell:\n            return \"maxwell\";\n        case Architecture::Nvidia_Pascal:\n            return \"pascal\";\n        case Architecture::Nvidia_Turing:\n            return \"turing\";\n        case Architecture::Nvidia_Ampere:\n            return \"ampere\";\n        case Architecture::Nvidia_Lovelace:\n            return \"lovelace\";\n        case Architecture::Nvidia_Volta:\n            return \"volta\";\n        case Architecture::Qualcomm_PCI_Adreno4xx:\n            return \"adreno-4xx\";\n        case Architecture::Qualcomm_PCI_Adreno5xx:\n            return \"adreno-5xx\";\n        case Architecture::Qualcomm_PCI_Adreno6xx:\n            return \"adreno-6xx\";\n        case Architecture::Qualcomm_PCI_Adreno7xx:\n            return \"adreno-7xx\";\n        case Architecture::Qualcomm_ACPI_Adreno8xx:\n            return \"adreno-8xx\";\n        case Architecture::Samsung_RDNA2:\n            return \"rdna-2\";\n        case Architecture::Samsung_RDNA3:\n            return \"rdna-3\";\n    }\n\n    return \"\";\n}\n\n}  // namespace dawn::gpu_info\n"}