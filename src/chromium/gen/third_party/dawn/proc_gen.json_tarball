{"src/dawn/dawn_proc.cpp": "\n#include \"dawn/dawn_proc.h\"\n\n// The sanitizer is disabled for calls to procs.* since those functions may be\n// dynamically loaded.\n#include \"dawn/common/Compiler.h\"\n#include \"dawn/common/Log.h\"\n\n// A fake wgpuCreateInstance that prints a warning so folks know that they are using dawn_procs and\n// should either use a different target to link against, or call dawnProcSetProcs.\nWGPUInstance CreateInstanceThatWarns(const WGPUInstanceDescriptor* desc) {\n    dawn::ErrorLog() <<\n        R\"(The \\\"null\\\" wgpuCreateInstance from dawn_proc was called which always returns nullptr. You either need to:\n  - call dawnProcSetProcs with a DawnProcTable object retrieved somewhere else, or\n  - (most likely) link against a different target that implements WebGPU directly, for example webgpu_dawn)\";\n\n    return nullptr;\n}\n\nconstexpr DawnProcTable MakeNullProcTable() {\n    DawnProcTable procs = {};\n    procs.createInstance = CreateInstanceThatWarns;\n    return procs;\n}\n\nstatic DawnProcTable kNullProcs = MakeNullProcTable();\nstatic DawnProcTable procs = MakeNullProcTable();\n\nvoid dawnProcSetProcs(const DawnProcTable* procs_) {\n    if (procs_) {\n        procs = *procs_;\n    } else {\n        procs = kNullProcs;\n    }\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuAdapterInfoFreeMembers(WGPUAdapterInfo value) {\n    procs.adapterInfoFreeMembers(value);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuAdapterPropertiesMemoryHeapsFreeMembers(WGPUAdapterPropertiesMemoryHeaps value) {\n    procs.adapterPropertiesMemoryHeapsFreeMembers(value);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUInstance wgpuCreateInstance(WGPUInstanceDescriptor const * descriptor) {\nreturn     procs.createInstance(descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDrmFormatCapabilitiesFreeMembers(WGPUDrmFormatCapabilities value) {\n    procs.drmFormatCapabilitiesFreeMembers(value);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuGetInstanceFeatures(WGPUInstanceFeatures * features) {\nreturn     procs.getInstanceFeatures(features);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUProc wgpuGetProcAddress(WGPUStringView procName) {\nreturn     procs.getProcAddress(procName);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedBufferMemoryEndAccessStateFreeMembers(WGPUSharedBufferMemoryEndAccessState value) {\n    procs.sharedBufferMemoryEndAccessStateFreeMembers(value);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedTextureMemoryEndAccessStateFreeMembers(WGPUSharedTextureMemoryEndAccessState value) {\n    procs.sharedTextureMemoryEndAccessStateFreeMembers(value);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSupportedFeaturesFreeMembers(WGPUSupportedFeatures value) {\n    procs.supportedFeaturesFreeMembers(value);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities value) {\n    procs.surfaceCapabilitiesFreeMembers(value);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUDevice wgpuAdapterCreateDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor) {\nreturn     procs.adapterCreateDevice(adapter, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures * features) {\n    procs.adapterGetFeatures(adapter, features);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuAdapterGetFormatCapabilities(WGPUAdapter adapter, WGPUTextureFormat format, WGPUFormatCapabilities * capabilities) {\nreturn     procs.adapterGetFormatCapabilities(adapter, format, capabilities);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo * info) {\nreturn     procs.adapterGetInfo(adapter, info);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUInstance wgpuAdapterGetInstance(WGPUAdapter adapter) {\nreturn     procs.adapterGetInstance(adapter);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits) {\nreturn     procs.adapterGetLimits(adapter, limits);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature) {\nreturn     procs.adapterHasFeature(adapter, feature);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuAdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) {\n    procs.adapterRequestDevice(adapter, descriptor, callback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuAdapterRequestDevice2(WGPUAdapter adapter, WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo2 callbackInfo) {\nreturn     procs.adapterRequestDevice2(adapter, options, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuAdapterRequestDeviceF(WGPUAdapter adapter, WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo callbackInfo) {\nreturn     procs.adapterRequestDeviceF(adapter, options, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuAdapterAddRef(WGPUAdapter adapter) {\n    procs.adapterAddRef(adapter);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuAdapterRelease(WGPUAdapter adapter) {\n    procs.adapterRelease(adapter);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label) {\n    procs.bindGroupSetLabel(bindGroup, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBindGroupAddRef(WGPUBindGroup bindGroup) {\n    procs.bindGroupAddRef(bindGroup);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBindGroupRelease(WGPUBindGroup bindGroup) {\n    procs.bindGroupRelease(bindGroup);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label) {\n    procs.bindGroupLayoutSetLabel(bindGroupLayout, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout) {\n    procs.bindGroupLayoutAddRef(bindGroupLayout);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout) {\n    procs.bindGroupLayoutRelease(bindGroupLayout);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBufferDestroy(WGPUBuffer buffer) {\n    procs.bufferDestroy(buffer);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid const * wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {\nreturn     procs.bufferGetConstMappedRange(buffer, offset, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer) {\nreturn     procs.bufferGetMapState(buffer);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid * wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {\nreturn     procs.bufferGetMappedRange(buffer, offset, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nuint64_t wgpuBufferGetSize(WGPUBuffer buffer) {\nreturn     procs.bufferGetSize(buffer);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer) {\nreturn     procs.bufferGetUsage(buffer);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) {\n    procs.bufferMapAsync(buffer, mode, offset, size, callback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuBufferMapAsync2(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo2 callbackInfo) {\nreturn     procs.bufferMapAsync2(buffer, mode, offset, size, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuBufferMapAsyncF(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo) {\nreturn     procs.bufferMapAsyncF(buffer, mode, offset, size, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBufferSetLabel(WGPUBuffer buffer, WGPUStringView label) {\n    procs.bufferSetLabel(buffer, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBufferUnmap(WGPUBuffer buffer) {\n    procs.bufferUnmap(buffer);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBufferAddRef(WGPUBuffer buffer) {\n    procs.bufferAddRef(buffer);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuBufferRelease(WGPUBuffer buffer) {\n    procs.bufferRelease(buffer);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label) {\n    procs.commandBufferSetLabel(commandBuffer, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandBufferAddRef(WGPUCommandBuffer commandBuffer) {\n    procs.commandBufferAddRef(commandBuffer);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer) {\n    procs.commandBufferRelease(commandBuffer);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor) {\nreturn     procs.commandEncoderBeginComputePass(commandEncoder, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) {\nreturn     procs.commandEncoderBeginRenderPass(commandEncoder, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.commandEncoderClearBuffer(commandEncoder, buffer, offset, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) {\n    procs.commandEncoderCopyBufferToBuffer(commandEncoder, source, sourceOffset, destination, destinationOffset, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyBufferToTexture(commandEncoder, source, destination, copySize);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyTextureToBuffer(commandEncoder, source, destination, copySize);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyTextureToTexture(commandEncoder, source, destination, copySize);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor) {\nreturn     procs.commandEncoderFinish(commandEncoder, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderInjectValidationError(WGPUCommandEncoder commandEncoder, WGPUStringView message) {\n    procs.commandEncoderInjectValidationError(commandEncoder, message);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel) {\n    procs.commandEncoderInsertDebugMarker(commandEncoder, markerLabel);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderPopDebugGroup(commandEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel) {\n    procs.commandEncoderPushDebugGroup(commandEncoder, groupLabel);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) {\n    procs.commandEncoderResolveQuerySet(commandEncoder, querySet, firstQuery, queryCount, destination, destinationOffset);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label) {\n    procs.commandEncoderSetLabel(commandEncoder, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderWriteBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) {\n    procs.commandEncoderWriteBuffer(commandEncoder, buffer, bufferOffset, data, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    procs.commandEncoderWriteTimestamp(commandEncoder, querySet, queryIndex);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderAddRef(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderAddRef(commandEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderRelease(commandEncoder);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) {\n    procs.computePassEncoderDispatchWorkgroups(computePassEncoder, workgroupCountX, workgroupCountY, workgroupCountZ);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.computePassEncoderDispatchWorkgroupsIndirect(computePassEncoder, indirectBuffer, indirectOffset);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderEnd(computePassEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel) {\n    procs.computePassEncoderInsertDebugMarker(computePassEncoder, markerLabel);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderPopDebugGroup(computePassEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel) {\n    procs.computePassEncoderPushDebugGroup(computePassEncoder, groupLabel);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.computePassEncoderSetBindGroup(computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label) {\n    procs.computePassEncoderSetLabel(computePassEncoder, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) {\n    procs.computePassEncoderSetPipeline(computePassEncoder, pipeline);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderWriteTimestamp(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    procs.computePassEncoderWriteTimestamp(computePassEncoder, querySet, queryIndex);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderAddRef(computePassEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderRelease(computePassEncoder);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) {\nreturn     procs.computePipelineGetBindGroupLayout(computePipeline, groupIndex);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, WGPUStringView label) {\n    procs.computePipelineSetLabel(computePipeline, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePipelineAddRef(WGPUComputePipeline computePipeline) {\n    procs.computePipelineAddRef(computePipeline);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuComputePipelineRelease(WGPUComputePipeline computePipeline) {\n    procs.computePipelineRelease(computePipeline);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) {\nreturn     procs.deviceCreateBindGroup(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) {\nreturn     procs.deviceCreateBindGroupLayout(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\nreturn     procs.deviceCreateBuffer(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor) {\nreturn     procs.deviceCreateCommandEncoder(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) {\nreturn     procs.deviceCreateComputePipeline(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) {\n    procs.deviceCreateComputePipelineAsync(device, descriptor, callback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuDeviceCreateComputePipelineAsync2(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo2 callbackInfo) {\nreturn     procs.deviceCreateComputePipelineAsync2(device, descriptor, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuDeviceCreateComputePipelineAsyncF(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo) {\nreturn     procs.deviceCreateComputePipelineAsyncF(device, descriptor, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBuffer wgpuDeviceCreateErrorBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\nreturn     procs.deviceCreateErrorBuffer(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUExternalTexture wgpuDeviceCreateErrorExternalTexture(WGPUDevice device) {\nreturn     procs.deviceCreateErrorExternalTexture(device);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUShaderModule wgpuDeviceCreateErrorShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, WGPUStringView errorMessage) {\nreturn     procs.deviceCreateErrorShaderModule(device, descriptor, errorMessage);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUTexture wgpuDeviceCreateErrorTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\nreturn     procs.deviceCreateErrorTexture(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUExternalTexture wgpuDeviceCreateExternalTexture(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor) {\nreturn     procs.deviceCreateExternalTexture(device, externalTextureDescriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) {\nreturn     procs.deviceCreatePipelineLayout(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) {\nreturn     procs.deviceCreateQuerySet(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) {\nreturn     procs.deviceCreateRenderBundleEncoder(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) {\nreturn     procs.deviceCreateRenderPipeline(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) {\n    procs.deviceCreateRenderPipelineAsync(device, descriptor, callback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuDeviceCreateRenderPipelineAsync2(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo2 callbackInfo) {\nreturn     procs.deviceCreateRenderPipelineAsync2(device, descriptor, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuDeviceCreateRenderPipelineAsyncF(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo) {\nreturn     procs.deviceCreateRenderPipelineAsyncF(device, descriptor, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor const * descriptor) {\nreturn     procs.deviceCreateSampler(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) {\nreturn     procs.deviceCreateShaderModule(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\nreturn     procs.deviceCreateTexture(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceDestroy(WGPUDevice device) {\n    procs.deviceDestroy(device);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceForceLoss(WGPUDevice device, WGPUDeviceLostReason type, WGPUStringView message) {\n    procs.deviceForceLoss(device, type, message);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuDeviceGetAHardwareBufferProperties(WGPUDevice device, void * handle, WGPUAHardwareBufferProperties * properties) {\nreturn     procs.deviceGetAHardwareBufferProperties(device, handle, properties);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUAdapter wgpuDeviceGetAdapter(WGPUDevice device) {\nreturn     procs.deviceGetAdapter(device);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuDeviceGetAdapterInfo(WGPUDevice device, WGPUAdapterInfo * adapterInfo) {\nreturn     procs.deviceGetAdapterInfo(device, adapterInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceGetFeatures(WGPUDevice device, WGPUSupportedFeatures * features) {\n    procs.deviceGetFeatures(device, features);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits) {\nreturn     procs.deviceGetLimits(device, limits);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuDeviceGetLostFuture(WGPUDevice device) {\nreturn     procs.deviceGetLostFuture(device);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUQueue wgpuDeviceGetQueue(WGPUDevice device) {\nreturn     procs.deviceGetQueue(device);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature) {\nreturn     procs.deviceHasFeature(device, feature);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUSharedBufferMemory wgpuDeviceImportSharedBufferMemory(WGPUDevice device, WGPUSharedBufferMemoryDescriptor const * descriptor) {\nreturn     procs.deviceImportSharedBufferMemory(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUSharedFence wgpuDeviceImportSharedFence(WGPUDevice device, WGPUSharedFenceDescriptor const * descriptor) {\nreturn     procs.deviceImportSharedFence(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUSharedTextureMemory wgpuDeviceImportSharedTextureMemory(WGPUDevice device, WGPUSharedTextureMemoryDescriptor const * descriptor) {\nreturn     procs.deviceImportSharedTextureMemory(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceInjectError(WGPUDevice device, WGPUErrorType type, WGPUStringView message) {\n    procs.deviceInjectError(device, type, message);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback oldCallback, void * userdata) {\n    procs.devicePopErrorScope(device, oldCallback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuDevicePopErrorScope2(WGPUDevice device, WGPUPopErrorScopeCallbackInfo2 callbackInfo) {\nreturn     procs.devicePopErrorScope2(device, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuDevicePopErrorScopeF(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo) {\nreturn     procs.devicePopErrorScopeF(device, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) {\n    procs.devicePushErrorScope(device, filter);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceSetLabel(WGPUDevice device, WGPUStringView label) {\n    procs.deviceSetLabel(device, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata) {\n    procs.deviceSetLoggingCallback(device, callback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceTick(WGPUDevice device) {\n    procs.deviceTick(device);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceValidateTextureDescriptor(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\n    procs.deviceValidateTextureDescriptor(device, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceAddRef(WGPUDevice device) {\n    procs.deviceAddRef(device);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuDeviceRelease(WGPUDevice device) {\n    procs.deviceRelease(device);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuExternalTextureDestroy(WGPUExternalTexture externalTexture) {\n    procs.externalTextureDestroy(externalTexture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuExternalTextureExpire(WGPUExternalTexture externalTexture) {\n    procs.externalTextureExpire(externalTexture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuExternalTextureRefresh(WGPUExternalTexture externalTexture) {\n    procs.externalTextureRefresh(externalTexture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuExternalTextureSetLabel(WGPUExternalTexture externalTexture, WGPUStringView label) {\n    procs.externalTextureSetLabel(externalTexture, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuExternalTextureAddRef(WGPUExternalTexture externalTexture) {\n    procs.externalTextureAddRef(externalTexture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuExternalTextureRelease(WGPUExternalTexture externalTexture) {\n    procs.externalTextureRelease(externalTexture);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) {\nreturn     procs.instanceCreateSurface(instance, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nsize_t wgpuInstanceEnumerateWGSLLanguageFeatures(WGPUInstance instance, WGPUWGSLFeatureName * features) {\nreturn     procs.instanceEnumerateWGSLLanguageFeatures(instance, features);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBool wgpuInstanceHasWGSLLanguageFeature(WGPUInstance instance, WGPUWGSLFeatureName feature) {\nreturn     procs.instanceHasWGSLLanguageFeature(instance, feature);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuInstanceProcessEvents(WGPUInstance instance) {\n    procs.instanceProcessEvents(instance);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuInstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) {\n    procs.instanceRequestAdapter(instance, options, callback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuInstanceRequestAdapter2(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo2 callbackInfo) {\nreturn     procs.instanceRequestAdapter2(instance, options, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuInstanceRequestAdapterF(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo callbackInfo) {\nreturn     procs.instanceRequestAdapterF(instance, options, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUWaitStatus wgpuInstanceWaitAny(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo * futures, uint64_t timeoutNS) {\nreturn     procs.instanceWaitAny(instance, futureCount, futures, timeoutNS);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuInstanceAddRef(WGPUInstance instance) {\n    procs.instanceAddRef(instance);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuInstanceRelease(WGPUInstance instance) {\n    procs.instanceRelease(instance);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, WGPUStringView label) {\n    procs.pipelineLayoutSetLabel(pipelineLayout, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuPipelineLayoutAddRef(WGPUPipelineLayout pipelineLayout) {\n    procs.pipelineLayoutAddRef(pipelineLayout);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout) {\n    procs.pipelineLayoutRelease(pipelineLayout);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQuerySetDestroy(WGPUQuerySet querySet) {\n    procs.querySetDestroy(querySet);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nuint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet) {\nreturn     procs.querySetGetCount(querySet);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet) {\nreturn     procs.querySetGetType(querySet);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQuerySetSetLabel(WGPUQuerySet querySet, WGPUStringView label) {\n    procs.querySetSetLabel(querySet, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQuerySetAddRef(WGPUQuerySet querySet) {\n    procs.querySetAddRef(querySet);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQuerySetRelease(WGPUQuerySet querySet) {\n    procs.querySetRelease(querySet);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueCopyExternalTextureForBrowser(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n    procs.queueCopyExternalTextureForBrowser(queue, source, destination, copySize, options);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueCopyTextureForBrowser(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n    procs.queueCopyTextureForBrowser(queue, source, destination, copySize, options);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallback callback, void * userdata) {\n    procs.queueOnSubmittedWorkDone(queue, callback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuQueueOnSubmittedWorkDone2(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo2 callbackInfo) {\nreturn     procs.queueOnSubmittedWorkDone2(queue, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuQueueOnSubmittedWorkDoneF(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo) {\nreturn     procs.queueOnSubmittedWorkDoneF(queue, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueSetLabel(WGPUQueue queue, WGPUStringView label) {\n    procs.queueSetLabel(queue, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueSubmit(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) {\n    procs.queueSubmit(queue, commandCount, commands);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) {\n    procs.queueWriteBuffer(queue, buffer, bufferOffset, data, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) {\n    procs.queueWriteTexture(queue, destination, data, dataSize, dataLayout, writeSize);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueAddRef(WGPUQueue queue) {\n    procs.queueAddRef(queue);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuQueueRelease(WGPUQueue queue) {\n    procs.queueRelease(queue);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, WGPUStringView label) {\n    procs.renderBundleSetLabel(renderBundle, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleAddRef(WGPURenderBundle renderBundle) {\n    procs.renderBundleAddRef(renderBundle);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleRelease(WGPURenderBundle renderBundle) {\n    procs.renderBundleRelease(renderBundle);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    procs.renderBundleEncoderDraw(renderBundleEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    procs.renderBundleEncoderDrawIndexed(renderBundleEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderBundleEncoderDrawIndexedIndirect(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderBundleEncoderDrawIndirect(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor) {\nreturn     procs.renderBundleEncoderFinish(renderBundleEncoder, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel) {\n    procs.renderBundleEncoderInsertDebugMarker(renderBundleEncoder, markerLabel);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderPopDebugGroup(renderBundleEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel) {\n    procs.renderBundleEncoderPushDebugGroup(renderBundleEncoder, groupLabel);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.renderBundleEncoderSetBindGroup(renderBundleEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n    procs.renderBundleEncoderSetIndexBuffer(renderBundleEncoder, buffer, format, offset, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label) {\n    procs.renderBundleEncoderSetLabel(renderBundleEncoder, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) {\n    procs.renderBundleEncoderSetPipeline(renderBundleEncoder, pipeline);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.renderBundleEncoderSetVertexBuffer(renderBundleEncoder, slot, buffer, offset, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderAddRef(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderAddRef(renderBundleEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderRelease(renderBundleEncoder);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) {\n    procs.renderPassEncoderBeginOcclusionQuery(renderPassEncoder, queryIndex);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    procs.renderPassEncoderDraw(renderPassEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    procs.renderPassEncoderDrawIndexed(renderPassEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderPassEncoderDrawIndexedIndirect(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderPassEncoderDrawIndirect(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderEnd(renderPassEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderEndOcclusionQuery(renderPassEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) {\n    procs.renderPassEncoderExecuteBundles(renderPassEncoder, bundleCount, bundles);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel) {\n    procs.renderPassEncoderInsertDebugMarker(renderPassEncoder, markerLabel);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderMultiDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) {\n    procs.renderPassEncoderMultiDrawIndexedIndirect(renderPassEncoder, indirectBuffer, indirectOffset, maxDrawCount, drawCountBuffer, drawCountBufferOffset);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderMultiDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) {\n    procs.renderPassEncoderMultiDrawIndirect(renderPassEncoder, indirectBuffer, indirectOffset, maxDrawCount, drawCountBuffer, drawCountBufferOffset);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderPixelLocalStorageBarrier(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderPixelLocalStorageBarrier(renderPassEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderPopDebugGroup(renderPassEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel) {\n    procs.renderPassEncoderPushDebugGroup(renderPassEncoder, groupLabel);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.renderPassEncoderSetBindGroup(renderPassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) {\n    procs.renderPassEncoderSetBlendConstant(renderPassEncoder, color);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n    procs.renderPassEncoderSetIndexBuffer(renderPassEncoder, buffer, format, offset, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label) {\n    procs.renderPassEncoderSetLabel(renderPassEncoder, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) {\n    procs.renderPassEncoderSetPipeline(renderPassEncoder, pipeline);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {\n    procs.renderPassEncoderSetScissorRect(renderPassEncoder, x, y, width, height);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) {\n    procs.renderPassEncoderSetStencilReference(renderPassEncoder, reference);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.renderPassEncoderSetVertexBuffer(renderPassEncoder, slot, buffer, offset, size);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) {\n    procs.renderPassEncoderSetViewport(renderPassEncoder, x, y, width, height, minDepth, maxDepth);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    procs.renderPassEncoderWriteTimestamp(renderPassEncoder, querySet, queryIndex);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderAddRef(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderAddRef(renderPassEncoder);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderRelease(renderPassEncoder);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) {\nreturn     procs.renderPipelineGetBindGroupLayout(renderPipeline, groupIndex);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, WGPUStringView label) {\n    procs.renderPipelineSetLabel(renderPipeline, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPipelineAddRef(WGPURenderPipeline renderPipeline) {\n    procs.renderPipelineAddRef(renderPipeline);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline) {\n    procs.renderPipelineRelease(renderPipeline);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSamplerSetLabel(WGPUSampler sampler, WGPUStringView label) {\n    procs.samplerSetLabel(sampler, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSamplerAddRef(WGPUSampler sampler) {\n    procs.samplerAddRef(sampler);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSamplerRelease(WGPUSampler sampler) {\n    procs.samplerRelease(sampler);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) {\n    procs.shaderModuleGetCompilationInfo(shaderModule, callback, userdata);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuShaderModuleGetCompilationInfo2(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo2 callbackInfo) {\nreturn     procs.shaderModuleGetCompilationInfo2(shaderModule, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUFuture wgpuShaderModuleGetCompilationInfoF(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo) {\nreturn     procs.shaderModuleGetCompilationInfoF(shaderModule, callbackInfo);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, WGPUStringView label) {\n    procs.shaderModuleSetLabel(shaderModule, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuShaderModuleAddRef(WGPUShaderModule shaderModule) {\n    procs.shaderModuleAddRef(shaderModule);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuShaderModuleRelease(WGPUShaderModule shaderModule) {\n    procs.shaderModuleRelease(shaderModule);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuSharedBufferMemoryBeginAccess(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryBeginAccessDescriptor const * descriptor) {\nreturn     procs.sharedBufferMemoryBeginAccess(sharedBufferMemory, buffer, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBuffer wgpuSharedBufferMemoryCreateBuffer(WGPUSharedBufferMemory sharedBufferMemory, WGPUBufferDescriptor const * descriptor) {\nreturn     procs.sharedBufferMemoryCreateBuffer(sharedBufferMemory, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuSharedBufferMemoryEndAccess(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryEndAccessState * descriptor) {\nreturn     procs.sharedBufferMemoryEndAccess(sharedBufferMemory, buffer, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuSharedBufferMemoryGetProperties(WGPUSharedBufferMemory sharedBufferMemory, WGPUSharedBufferMemoryProperties * properties) {\nreturn     procs.sharedBufferMemoryGetProperties(sharedBufferMemory, properties);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBool wgpuSharedBufferMemoryIsDeviceLost(WGPUSharedBufferMemory sharedBufferMemory) {\nreturn     procs.sharedBufferMemoryIsDeviceLost(sharedBufferMemory);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedBufferMemorySetLabel(WGPUSharedBufferMemory sharedBufferMemory, WGPUStringView label) {\n    procs.sharedBufferMemorySetLabel(sharedBufferMemory, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedBufferMemoryAddRef(WGPUSharedBufferMemory sharedBufferMemory) {\n    procs.sharedBufferMemoryAddRef(sharedBufferMemory);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedBufferMemoryRelease(WGPUSharedBufferMemory sharedBufferMemory) {\n    procs.sharedBufferMemoryRelease(sharedBufferMemory);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedFenceExportInfo(WGPUSharedFence sharedFence, WGPUSharedFenceExportInfo * info) {\n    procs.sharedFenceExportInfo(sharedFence, info);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedFenceAddRef(WGPUSharedFence sharedFence) {\n    procs.sharedFenceAddRef(sharedFence);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedFenceRelease(WGPUSharedFence sharedFence) {\n    procs.sharedFenceRelease(sharedFence);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuSharedTextureMemoryBeginAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryBeginAccessDescriptor const * descriptor) {\nreturn     procs.sharedTextureMemoryBeginAccess(sharedTextureMemory, texture, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUTexture wgpuSharedTextureMemoryCreateTexture(WGPUSharedTextureMemory sharedTextureMemory, WGPUTextureDescriptor const * descriptor) {\nreturn     procs.sharedTextureMemoryCreateTexture(sharedTextureMemory, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuSharedTextureMemoryEndAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryEndAccessState * descriptor) {\nreturn     procs.sharedTextureMemoryEndAccess(sharedTextureMemory, texture, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuSharedTextureMemoryGetProperties(WGPUSharedTextureMemory sharedTextureMemory, WGPUSharedTextureMemoryProperties * properties) {\nreturn     procs.sharedTextureMemoryGetProperties(sharedTextureMemory, properties);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUBool wgpuSharedTextureMemoryIsDeviceLost(WGPUSharedTextureMemory sharedTextureMemory) {\nreturn     procs.sharedTextureMemoryIsDeviceLost(sharedTextureMemory);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedTextureMemorySetLabel(WGPUSharedTextureMemory sharedTextureMemory, WGPUStringView label) {\n    procs.sharedTextureMemorySetLabel(sharedTextureMemory, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedTextureMemoryAddRef(WGPUSharedTextureMemory sharedTextureMemory) {\n    procs.sharedTextureMemoryAddRef(sharedTextureMemory);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSharedTextureMemoryRelease(WGPUSharedTextureMemory sharedTextureMemory) {\n    procs.sharedTextureMemoryRelease(sharedTextureMemory);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSurfaceConfigure(WGPUSurface surface, WGPUSurfaceConfiguration const * config) {\n    procs.surfaceConfigure(surface, config);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUStatus wgpuSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities * capabilities) {\nreturn     procs.surfaceGetCapabilities(surface, adapter, capabilities);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture * surfaceTexture) {\n    procs.surfaceGetCurrentTexture(surface, surfaceTexture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSurfacePresent(WGPUSurface surface) {\n    procs.surfacePresent(surface);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSurfaceSetLabel(WGPUSurface surface, WGPUStringView label) {\n    procs.surfaceSetLabel(surface, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSurfaceUnconfigure(WGPUSurface surface) {\n    procs.surfaceUnconfigure(surface);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSurfaceAddRef(WGPUSurface surface) {\n    procs.surfaceAddRef(surface);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuSurfaceRelease(WGPUSurface surface) {\n    procs.surfaceRelease(surface);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUTextureView wgpuTextureCreateErrorView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor) {\nreturn     procs.textureCreateErrorView(texture, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor) {\nreturn     procs.textureCreateView(texture, descriptor);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuTextureDestroy(WGPUTexture texture) {\n    procs.textureDestroy(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nuint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture) {\nreturn     procs.textureGetDepthOrArrayLayers(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture) {\nreturn     procs.textureGetDimension(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture) {\nreturn     procs.textureGetFormat(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nuint32_t wgpuTextureGetHeight(WGPUTexture texture) {\nreturn     procs.textureGetHeight(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nuint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture) {\nreturn     procs.textureGetMipLevelCount(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nuint32_t wgpuTextureGetSampleCount(WGPUTexture texture) {\nreturn     procs.textureGetSampleCount(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nWGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture) {\nreturn     procs.textureGetUsage(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nuint32_t wgpuTextureGetWidth(WGPUTexture texture) {\nreturn     procs.textureGetWidth(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuTextureSetLabel(WGPUTexture texture, WGPUStringView label) {\n    procs.textureSetLabel(texture, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuTextureAddRef(WGPUTexture texture) {\n    procs.textureAddRef(texture);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuTextureRelease(WGPUTexture texture) {\n    procs.textureRelease(texture);\n}\n\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuTextureViewSetLabel(WGPUTextureView textureView, WGPUStringView label) {\n    procs.textureViewSetLabel(textureView, label);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuTextureViewAddRef(WGPUTextureView textureView) {\n    procs.textureViewAddRef(textureView);\n}\nDAWN_NO_SANITIZE(\"cfi-icall\")\nvoid wgpuTextureViewRelease(WGPUTextureView textureView) {\n    procs.textureViewRelease(textureView);\n}\n\n", "src/dawn/dawn_thread_dispatch_proc.cpp": "#include \"dawn/dawn_thread_dispatch_proc.h\"\n\n#include <thread>\n\nstatic DawnProcTable nullProcs;\nstatic DawnProcTable defaultProc;\nthread_local DawnProcTable perThreadProcs;\n\nvoid dawnProcSetDefaultThreadProcs(const DawnProcTable* procs) {\n    if (procs) {\n        defaultProc = *procs;\n    } else {\n        defaultProc = nullProcs;\n    }\n}\n\nvoid dawnProcSetPerThreadProcs(const DawnProcTable* procs) {\n    if (procs) {\n        perThreadProcs = *procs;\n    } else {\n        perThreadProcs = nullProcs;\n    }\n}\n\nstatic void ThreadDispatchAdapterInfoFreeMembers(WGPUAdapterInfo value) {\n    auto* proc = perThreadProcs.adapterInfoFreeMembers;\n    if (!proc) {\n        proc = defaultProc.adapterInfoFreeMembers;\n    }\n    proc(value);\n}\nstatic void ThreadDispatchAdapterPropertiesMemoryHeapsFreeMembers(WGPUAdapterPropertiesMemoryHeaps value) {\n    auto* proc = perThreadProcs.adapterPropertiesMemoryHeapsFreeMembers;\n    if (!proc) {\n        proc = defaultProc.adapterPropertiesMemoryHeapsFreeMembers;\n    }\n    proc(value);\n}\nstatic WGPUInstance ThreadDispatchCreateInstance(WGPUInstanceDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.createInstance;\n    if (!proc) {\n        proc = defaultProc.createInstance;\n    }\nreturn     proc(descriptor);\n}\nstatic void ThreadDispatchDrmFormatCapabilitiesFreeMembers(WGPUDrmFormatCapabilities value) {\n    auto* proc = perThreadProcs.drmFormatCapabilitiesFreeMembers;\n    if (!proc) {\n        proc = defaultProc.drmFormatCapabilitiesFreeMembers;\n    }\n    proc(value);\n}\nstatic WGPUStatus ThreadDispatchGetInstanceFeatures(WGPUInstanceFeatures * features) {\n    auto* proc = perThreadProcs.getInstanceFeatures;\n    if (!proc) {\n        proc = defaultProc.getInstanceFeatures;\n    }\nreturn     proc(features);\n}\nstatic WGPUProc ThreadDispatchGetProcAddress(WGPUStringView procName) {\n    auto* proc = perThreadProcs.getProcAddress;\n    if (!proc) {\n        proc = defaultProc.getProcAddress;\n    }\nreturn     proc(procName);\n}\nstatic void ThreadDispatchSharedBufferMemoryEndAccessStateFreeMembers(WGPUSharedBufferMemoryEndAccessState value) {\n    auto* proc = perThreadProcs.sharedBufferMemoryEndAccessStateFreeMembers;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemoryEndAccessStateFreeMembers;\n    }\n    proc(value);\n}\nstatic void ThreadDispatchSharedTextureMemoryEndAccessStateFreeMembers(WGPUSharedTextureMemoryEndAccessState value) {\n    auto* proc = perThreadProcs.sharedTextureMemoryEndAccessStateFreeMembers;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemoryEndAccessStateFreeMembers;\n    }\n    proc(value);\n}\nstatic void ThreadDispatchSupportedFeaturesFreeMembers(WGPUSupportedFeatures value) {\n    auto* proc = perThreadProcs.supportedFeaturesFreeMembers;\n    if (!proc) {\n        proc = defaultProc.supportedFeaturesFreeMembers;\n    }\n    proc(value);\n}\nstatic void ThreadDispatchSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities value) {\n    auto* proc = perThreadProcs.surfaceCapabilitiesFreeMembers;\n    if (!proc) {\n        proc = defaultProc.surfaceCapabilitiesFreeMembers;\n    }\n    proc(value);\n}\n\nstatic WGPUDevice ThreadDispatchAdapterCreateDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.adapterCreateDevice;\n    if (!proc) {\n        proc = defaultProc.adapterCreateDevice;\n    }\nreturn     proc(adapter, descriptor);\n}\nstatic void ThreadDispatchAdapterGetFeatures(WGPUAdapter adapter, WGPUSupportedFeatures * features) {\n    auto* proc = perThreadProcs.adapterGetFeatures;\n    if (!proc) {\n        proc = defaultProc.adapterGetFeatures;\n    }\n    proc(adapter, features);\n}\nstatic WGPUStatus ThreadDispatchAdapterGetFormatCapabilities(WGPUAdapter adapter, WGPUTextureFormat format, WGPUFormatCapabilities * capabilities) {\n    auto* proc = perThreadProcs.adapterGetFormatCapabilities;\n    if (!proc) {\n        proc = defaultProc.adapterGetFormatCapabilities;\n    }\nreturn     proc(adapter, format, capabilities);\n}\nstatic WGPUStatus ThreadDispatchAdapterGetInfo(WGPUAdapter adapter, WGPUAdapterInfo * info) {\n    auto* proc = perThreadProcs.adapterGetInfo;\n    if (!proc) {\n        proc = defaultProc.adapterGetInfo;\n    }\nreturn     proc(adapter, info);\n}\nstatic WGPUInstance ThreadDispatchAdapterGetInstance(WGPUAdapter adapter) {\n    auto* proc = perThreadProcs.adapterGetInstance;\n    if (!proc) {\n        proc = defaultProc.adapterGetInstance;\n    }\nreturn     proc(adapter);\n}\nstatic WGPUStatus ThreadDispatchAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits) {\n    auto* proc = perThreadProcs.adapterGetLimits;\n    if (!proc) {\n        proc = defaultProc.adapterGetLimits;\n    }\nreturn     proc(adapter, limits);\n}\nstatic WGPUBool ThreadDispatchAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature) {\n    auto* proc = perThreadProcs.adapterHasFeature;\n    if (!proc) {\n        proc = defaultProc.adapterHasFeature;\n    }\nreturn     proc(adapter, feature);\n}\nstatic void ThreadDispatchAdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) {\n    auto* proc = perThreadProcs.adapterRequestDevice;\n    if (!proc) {\n        proc = defaultProc.adapterRequestDevice;\n    }\n    proc(adapter, descriptor, callback, userdata);\n}\nstatic WGPUFuture ThreadDispatchAdapterRequestDevice2(WGPUAdapter adapter, WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo2 callbackInfo) {\n    auto* proc = perThreadProcs.adapterRequestDevice2;\n    if (!proc) {\n        proc = defaultProc.adapterRequestDevice2;\n    }\nreturn     proc(adapter, options, callbackInfo);\n}\nstatic WGPUFuture ThreadDispatchAdapterRequestDeviceF(WGPUAdapter adapter, WGPUDeviceDescriptor const * options, WGPURequestDeviceCallbackInfo callbackInfo) {\n    auto* proc = perThreadProcs.adapterRequestDeviceF;\n    if (!proc) {\n        proc = defaultProc.adapterRequestDeviceF;\n    }\nreturn     proc(adapter, options, callbackInfo);\n}\nstatic void ThreadDispatchAdapterAddRef(WGPUAdapter adapter) {\n    auto* proc = perThreadProcs.adapterAddRef;\n    if (!proc) {\n        proc = defaultProc.adapterAddRef;\n    }\n    proc(adapter);\n}\nstatic void ThreadDispatchAdapterRelease(WGPUAdapter adapter) {\n    auto* proc = perThreadProcs.adapterRelease;\n    if (!proc) {\n        proc = defaultProc.adapterRelease;\n    }\n    proc(adapter);\n}\nstatic void ThreadDispatchBindGroupSetLabel(WGPUBindGroup bindGroup, WGPUStringView label) {\n    auto* proc = perThreadProcs.bindGroupSetLabel;\n    if (!proc) {\n        proc = defaultProc.bindGroupSetLabel;\n    }\n    proc(bindGroup, label);\n}\nstatic void ThreadDispatchBindGroupAddRef(WGPUBindGroup bindGroup) {\n    auto* proc = perThreadProcs.bindGroupAddRef;\n    if (!proc) {\n        proc = defaultProc.bindGroupAddRef;\n    }\n    proc(bindGroup);\n}\nstatic void ThreadDispatchBindGroupRelease(WGPUBindGroup bindGroup) {\n    auto* proc = perThreadProcs.bindGroupRelease;\n    if (!proc) {\n        proc = defaultProc.bindGroupRelease;\n    }\n    proc(bindGroup);\n}\nstatic void ThreadDispatchBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label) {\n    auto* proc = perThreadProcs.bindGroupLayoutSetLabel;\n    if (!proc) {\n        proc = defaultProc.bindGroupLayoutSetLabel;\n    }\n    proc(bindGroupLayout, label);\n}\nstatic void ThreadDispatchBindGroupLayoutAddRef(WGPUBindGroupLayout bindGroupLayout) {\n    auto* proc = perThreadProcs.bindGroupLayoutAddRef;\n    if (!proc) {\n        proc = defaultProc.bindGroupLayoutAddRef;\n    }\n    proc(bindGroupLayout);\n}\nstatic void ThreadDispatchBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout) {\n    auto* proc = perThreadProcs.bindGroupLayoutRelease;\n    if (!proc) {\n        proc = defaultProc.bindGroupLayoutRelease;\n    }\n    proc(bindGroupLayout);\n}\nstatic void ThreadDispatchBufferDestroy(WGPUBuffer buffer) {\n    auto* proc = perThreadProcs.bufferDestroy;\n    if (!proc) {\n        proc = defaultProc.bufferDestroy;\n    }\n    proc(buffer);\n}\nstatic void const * ThreadDispatchBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {\n    auto* proc = perThreadProcs.bufferGetConstMappedRange;\n    if (!proc) {\n        proc = defaultProc.bufferGetConstMappedRange;\n    }\nreturn     proc(buffer, offset, size);\n}\nstatic WGPUBufferMapState ThreadDispatchBufferGetMapState(WGPUBuffer buffer) {\n    auto* proc = perThreadProcs.bufferGetMapState;\n    if (!proc) {\n        proc = defaultProc.bufferGetMapState;\n    }\nreturn     proc(buffer);\n}\nstatic void * ThreadDispatchBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {\n    auto* proc = perThreadProcs.bufferGetMappedRange;\n    if (!proc) {\n        proc = defaultProc.bufferGetMappedRange;\n    }\nreturn     proc(buffer, offset, size);\n}\nstatic uint64_t ThreadDispatchBufferGetSize(WGPUBuffer buffer) {\n    auto* proc = perThreadProcs.bufferGetSize;\n    if (!proc) {\n        proc = defaultProc.bufferGetSize;\n    }\nreturn     proc(buffer);\n}\nstatic WGPUBufferUsage ThreadDispatchBufferGetUsage(WGPUBuffer buffer) {\n    auto* proc = perThreadProcs.bufferGetUsage;\n    if (!proc) {\n        proc = defaultProc.bufferGetUsage;\n    }\nreturn     proc(buffer);\n}\nstatic void ThreadDispatchBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) {\n    auto* proc = perThreadProcs.bufferMapAsync;\n    if (!proc) {\n        proc = defaultProc.bufferMapAsync;\n    }\n    proc(buffer, mode, offset, size, callback, userdata);\n}\nstatic WGPUFuture ThreadDispatchBufferMapAsync2(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo2 callbackInfo) {\n    auto* proc = perThreadProcs.bufferMapAsync2;\n    if (!proc) {\n        proc = defaultProc.bufferMapAsync2;\n    }\nreturn     proc(buffer, mode, offset, size, callbackInfo);\n}\nstatic WGPUFuture ThreadDispatchBufferMapAsyncF(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo) {\n    auto* proc = perThreadProcs.bufferMapAsyncF;\n    if (!proc) {\n        proc = defaultProc.bufferMapAsyncF;\n    }\nreturn     proc(buffer, mode, offset, size, callbackInfo);\n}\nstatic void ThreadDispatchBufferSetLabel(WGPUBuffer buffer, WGPUStringView label) {\n    auto* proc = perThreadProcs.bufferSetLabel;\n    if (!proc) {\n        proc = defaultProc.bufferSetLabel;\n    }\n    proc(buffer, label);\n}\nstatic void ThreadDispatchBufferUnmap(WGPUBuffer buffer) {\n    auto* proc = perThreadProcs.bufferUnmap;\n    if (!proc) {\n        proc = defaultProc.bufferUnmap;\n    }\n    proc(buffer);\n}\nstatic void ThreadDispatchBufferAddRef(WGPUBuffer buffer) {\n    auto* proc = perThreadProcs.bufferAddRef;\n    if (!proc) {\n        proc = defaultProc.bufferAddRef;\n    }\n    proc(buffer);\n}\nstatic void ThreadDispatchBufferRelease(WGPUBuffer buffer) {\n    auto* proc = perThreadProcs.bufferRelease;\n    if (!proc) {\n        proc = defaultProc.bufferRelease;\n    }\n    proc(buffer);\n}\nstatic void ThreadDispatchCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, WGPUStringView label) {\n    auto* proc = perThreadProcs.commandBufferSetLabel;\n    if (!proc) {\n        proc = defaultProc.commandBufferSetLabel;\n    }\n    proc(commandBuffer, label);\n}\nstatic void ThreadDispatchCommandBufferAddRef(WGPUCommandBuffer commandBuffer) {\n    auto* proc = perThreadProcs.commandBufferAddRef;\n    if (!proc) {\n        proc = defaultProc.commandBufferAddRef;\n    }\n    proc(commandBuffer);\n}\nstatic void ThreadDispatchCommandBufferRelease(WGPUCommandBuffer commandBuffer) {\n    auto* proc = perThreadProcs.commandBufferRelease;\n    if (!proc) {\n        proc = defaultProc.commandBufferRelease;\n    }\n    proc(commandBuffer);\n}\nstatic WGPUComputePassEncoder ThreadDispatchCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.commandEncoderBeginComputePass;\n    if (!proc) {\n        proc = defaultProc.commandEncoderBeginComputePass;\n    }\nreturn     proc(commandEncoder, descriptor);\n}\nstatic WGPURenderPassEncoder ThreadDispatchCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.commandEncoderBeginRenderPass;\n    if (!proc) {\n        proc = defaultProc.commandEncoderBeginRenderPass;\n    }\nreturn     proc(commandEncoder, descriptor);\n}\nstatic void ThreadDispatchCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    auto* proc = perThreadProcs.commandEncoderClearBuffer;\n    if (!proc) {\n        proc = defaultProc.commandEncoderClearBuffer;\n    }\n    proc(commandEncoder, buffer, offset, size);\n}\nstatic void ThreadDispatchCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) {\n    auto* proc = perThreadProcs.commandEncoderCopyBufferToBuffer;\n    if (!proc) {\n        proc = defaultProc.commandEncoderCopyBufferToBuffer;\n    }\n    proc(commandEncoder, source, sourceOffset, destination, destinationOffset, size);\n}\nstatic void ThreadDispatchCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    auto* proc = perThreadProcs.commandEncoderCopyBufferToTexture;\n    if (!proc) {\n        proc = defaultProc.commandEncoderCopyBufferToTexture;\n    }\n    proc(commandEncoder, source, destination, copySize);\n}\nstatic void ThreadDispatchCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) {\n    auto* proc = perThreadProcs.commandEncoderCopyTextureToBuffer;\n    if (!proc) {\n        proc = defaultProc.commandEncoderCopyTextureToBuffer;\n    }\n    proc(commandEncoder, source, destination, copySize);\n}\nstatic void ThreadDispatchCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    auto* proc = perThreadProcs.commandEncoderCopyTextureToTexture;\n    if (!proc) {\n        proc = defaultProc.commandEncoderCopyTextureToTexture;\n    }\n    proc(commandEncoder, source, destination, copySize);\n}\nstatic WGPUCommandBuffer ThreadDispatchCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.commandEncoderFinish;\n    if (!proc) {\n        proc = defaultProc.commandEncoderFinish;\n    }\nreturn     proc(commandEncoder, descriptor);\n}\nstatic void ThreadDispatchCommandEncoderInjectValidationError(WGPUCommandEncoder commandEncoder, WGPUStringView message) {\n    auto* proc = perThreadProcs.commandEncoderInjectValidationError;\n    if (!proc) {\n        proc = defaultProc.commandEncoderInjectValidationError;\n    }\n    proc(commandEncoder, message);\n}\nstatic void ThreadDispatchCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel) {\n    auto* proc = perThreadProcs.commandEncoderInsertDebugMarker;\n    if (!proc) {\n        proc = defaultProc.commandEncoderInsertDebugMarker;\n    }\n    proc(commandEncoder, markerLabel);\n}\nstatic void ThreadDispatchCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) {\n    auto* proc = perThreadProcs.commandEncoderPopDebugGroup;\n    if (!proc) {\n        proc = defaultProc.commandEncoderPopDebugGroup;\n    }\n    proc(commandEncoder);\n}\nstatic void ThreadDispatchCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel) {\n    auto* proc = perThreadProcs.commandEncoderPushDebugGroup;\n    if (!proc) {\n        proc = defaultProc.commandEncoderPushDebugGroup;\n    }\n    proc(commandEncoder, groupLabel);\n}\nstatic void ThreadDispatchCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) {\n    auto* proc = perThreadProcs.commandEncoderResolveQuerySet;\n    if (!proc) {\n        proc = defaultProc.commandEncoderResolveQuerySet;\n    }\n    proc(commandEncoder, querySet, firstQuery, queryCount, destination, destinationOffset);\n}\nstatic void ThreadDispatchCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, WGPUStringView label) {\n    auto* proc = perThreadProcs.commandEncoderSetLabel;\n    if (!proc) {\n        proc = defaultProc.commandEncoderSetLabel;\n    }\n    proc(commandEncoder, label);\n}\nstatic void ThreadDispatchCommandEncoderWriteBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) {\n    auto* proc = perThreadProcs.commandEncoderWriteBuffer;\n    if (!proc) {\n        proc = defaultProc.commandEncoderWriteBuffer;\n    }\n    proc(commandEncoder, buffer, bufferOffset, data, size);\n}\nstatic void ThreadDispatchCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    auto* proc = perThreadProcs.commandEncoderWriteTimestamp;\n    if (!proc) {\n        proc = defaultProc.commandEncoderWriteTimestamp;\n    }\n    proc(commandEncoder, querySet, queryIndex);\n}\nstatic void ThreadDispatchCommandEncoderAddRef(WGPUCommandEncoder commandEncoder) {\n    auto* proc = perThreadProcs.commandEncoderAddRef;\n    if (!proc) {\n        proc = defaultProc.commandEncoderAddRef;\n    }\n    proc(commandEncoder);\n}\nstatic void ThreadDispatchCommandEncoderRelease(WGPUCommandEncoder commandEncoder) {\n    auto* proc = perThreadProcs.commandEncoderRelease;\n    if (!proc) {\n        proc = defaultProc.commandEncoderRelease;\n    }\n    proc(commandEncoder);\n}\nstatic void ThreadDispatchComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) {\n    auto* proc = perThreadProcs.computePassEncoderDispatchWorkgroups;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderDispatchWorkgroups;\n    }\n    proc(computePassEncoder, workgroupCountX, workgroupCountY, workgroupCountZ);\n}\nstatic void ThreadDispatchComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    auto* proc = perThreadProcs.computePassEncoderDispatchWorkgroupsIndirect;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderDispatchWorkgroupsIndirect;\n    }\n    proc(computePassEncoder, indirectBuffer, indirectOffset);\n}\nstatic void ThreadDispatchComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder) {\n    auto* proc = perThreadProcs.computePassEncoderEnd;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderEnd;\n    }\n    proc(computePassEncoder);\n}\nstatic void ThreadDispatchComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel) {\n    auto* proc = perThreadProcs.computePassEncoderInsertDebugMarker;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderInsertDebugMarker;\n    }\n    proc(computePassEncoder, markerLabel);\n}\nstatic void ThreadDispatchComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) {\n    auto* proc = perThreadProcs.computePassEncoderPopDebugGroup;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderPopDebugGroup;\n    }\n    proc(computePassEncoder);\n}\nstatic void ThreadDispatchComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel) {\n    auto* proc = perThreadProcs.computePassEncoderPushDebugGroup;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderPushDebugGroup;\n    }\n    proc(computePassEncoder, groupLabel);\n}\nstatic void ThreadDispatchComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    auto* proc = perThreadProcs.computePassEncoderSetBindGroup;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderSetBindGroup;\n    }\n    proc(computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nstatic void ThreadDispatchComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, WGPUStringView label) {\n    auto* proc = perThreadProcs.computePassEncoderSetLabel;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderSetLabel;\n    }\n    proc(computePassEncoder, label);\n}\nstatic void ThreadDispatchComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) {\n    auto* proc = perThreadProcs.computePassEncoderSetPipeline;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderSetPipeline;\n    }\n    proc(computePassEncoder, pipeline);\n}\nstatic void ThreadDispatchComputePassEncoderWriteTimestamp(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    auto* proc = perThreadProcs.computePassEncoderWriteTimestamp;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderWriteTimestamp;\n    }\n    proc(computePassEncoder, querySet, queryIndex);\n}\nstatic void ThreadDispatchComputePassEncoderAddRef(WGPUComputePassEncoder computePassEncoder) {\n    auto* proc = perThreadProcs.computePassEncoderAddRef;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderAddRef;\n    }\n    proc(computePassEncoder);\n}\nstatic void ThreadDispatchComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder) {\n    auto* proc = perThreadProcs.computePassEncoderRelease;\n    if (!proc) {\n        proc = defaultProc.computePassEncoderRelease;\n    }\n    proc(computePassEncoder);\n}\nstatic WGPUBindGroupLayout ThreadDispatchComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) {\n    auto* proc = perThreadProcs.computePipelineGetBindGroupLayout;\n    if (!proc) {\n        proc = defaultProc.computePipelineGetBindGroupLayout;\n    }\nreturn     proc(computePipeline, groupIndex);\n}\nstatic void ThreadDispatchComputePipelineSetLabel(WGPUComputePipeline computePipeline, WGPUStringView label) {\n    auto* proc = perThreadProcs.computePipelineSetLabel;\n    if (!proc) {\n        proc = defaultProc.computePipelineSetLabel;\n    }\n    proc(computePipeline, label);\n}\nstatic void ThreadDispatchComputePipelineAddRef(WGPUComputePipeline computePipeline) {\n    auto* proc = perThreadProcs.computePipelineAddRef;\n    if (!proc) {\n        proc = defaultProc.computePipelineAddRef;\n    }\n    proc(computePipeline);\n}\nstatic void ThreadDispatchComputePipelineRelease(WGPUComputePipeline computePipeline) {\n    auto* proc = perThreadProcs.computePipelineRelease;\n    if (!proc) {\n        proc = defaultProc.computePipelineRelease;\n    }\n    proc(computePipeline);\n}\nstatic WGPUBindGroup ThreadDispatchDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateBindGroup;\n    if (!proc) {\n        proc = defaultProc.deviceCreateBindGroup;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUBindGroupLayout ThreadDispatchDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateBindGroupLayout;\n    if (!proc) {\n        proc = defaultProc.deviceCreateBindGroupLayout;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUBuffer ThreadDispatchDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateBuffer;\n    if (!proc) {\n        proc = defaultProc.deviceCreateBuffer;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUCommandEncoder ThreadDispatchDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateCommandEncoder;\n    if (!proc) {\n        proc = defaultProc.deviceCreateCommandEncoder;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUComputePipeline ThreadDispatchDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateComputePipeline;\n    if (!proc) {\n        proc = defaultProc.deviceCreateComputePipeline;\n    }\nreturn     proc(device, descriptor);\n}\nstatic void ThreadDispatchDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) {\n    auto* proc = perThreadProcs.deviceCreateComputePipelineAsync;\n    if (!proc) {\n        proc = defaultProc.deviceCreateComputePipelineAsync;\n    }\n    proc(device, descriptor, callback, userdata);\n}\nstatic WGPUFuture ThreadDispatchDeviceCreateComputePipelineAsync2(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo2 callbackInfo) {\n    auto* proc = perThreadProcs.deviceCreateComputePipelineAsync2;\n    if (!proc) {\n        proc = defaultProc.deviceCreateComputePipelineAsync2;\n    }\nreturn     proc(device, descriptor, callbackInfo);\n}\nstatic WGPUFuture ThreadDispatchDeviceCreateComputePipelineAsyncF(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo) {\n    auto* proc = perThreadProcs.deviceCreateComputePipelineAsyncF;\n    if (!proc) {\n        proc = defaultProc.deviceCreateComputePipelineAsyncF;\n    }\nreturn     proc(device, descriptor, callbackInfo);\n}\nstatic WGPUBuffer ThreadDispatchDeviceCreateErrorBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateErrorBuffer;\n    if (!proc) {\n        proc = defaultProc.deviceCreateErrorBuffer;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUExternalTexture ThreadDispatchDeviceCreateErrorExternalTexture(WGPUDevice device) {\n    auto* proc = perThreadProcs.deviceCreateErrorExternalTexture;\n    if (!proc) {\n        proc = defaultProc.deviceCreateErrorExternalTexture;\n    }\nreturn     proc(device);\n}\nstatic WGPUShaderModule ThreadDispatchDeviceCreateErrorShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, WGPUStringView errorMessage) {\n    auto* proc = perThreadProcs.deviceCreateErrorShaderModule;\n    if (!proc) {\n        proc = defaultProc.deviceCreateErrorShaderModule;\n    }\nreturn     proc(device, descriptor, errorMessage);\n}\nstatic WGPUTexture ThreadDispatchDeviceCreateErrorTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateErrorTexture;\n    if (!proc) {\n        proc = defaultProc.deviceCreateErrorTexture;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUExternalTexture ThreadDispatchDeviceCreateExternalTexture(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor) {\n    auto* proc = perThreadProcs.deviceCreateExternalTexture;\n    if (!proc) {\n        proc = defaultProc.deviceCreateExternalTexture;\n    }\nreturn     proc(device, externalTextureDescriptor);\n}\nstatic WGPUPipelineLayout ThreadDispatchDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreatePipelineLayout;\n    if (!proc) {\n        proc = defaultProc.deviceCreatePipelineLayout;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUQuerySet ThreadDispatchDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateQuerySet;\n    if (!proc) {\n        proc = defaultProc.deviceCreateQuerySet;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPURenderBundleEncoder ThreadDispatchDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateRenderBundleEncoder;\n    if (!proc) {\n        proc = defaultProc.deviceCreateRenderBundleEncoder;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPURenderPipeline ThreadDispatchDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateRenderPipeline;\n    if (!proc) {\n        proc = defaultProc.deviceCreateRenderPipeline;\n    }\nreturn     proc(device, descriptor);\n}\nstatic void ThreadDispatchDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) {\n    auto* proc = perThreadProcs.deviceCreateRenderPipelineAsync;\n    if (!proc) {\n        proc = defaultProc.deviceCreateRenderPipelineAsync;\n    }\n    proc(device, descriptor, callback, userdata);\n}\nstatic WGPUFuture ThreadDispatchDeviceCreateRenderPipelineAsync2(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo2 callbackInfo) {\n    auto* proc = perThreadProcs.deviceCreateRenderPipelineAsync2;\n    if (!proc) {\n        proc = defaultProc.deviceCreateRenderPipelineAsync2;\n    }\nreturn     proc(device, descriptor, callbackInfo);\n}\nstatic WGPUFuture ThreadDispatchDeviceCreateRenderPipelineAsyncF(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo) {\n    auto* proc = perThreadProcs.deviceCreateRenderPipelineAsyncF;\n    if (!proc) {\n        proc = defaultProc.deviceCreateRenderPipelineAsyncF;\n    }\nreturn     proc(device, descriptor, callbackInfo);\n}\nstatic WGPUSampler ThreadDispatchDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateSampler;\n    if (!proc) {\n        proc = defaultProc.deviceCreateSampler;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUShaderModule ThreadDispatchDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateShaderModule;\n    if (!proc) {\n        proc = defaultProc.deviceCreateShaderModule;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUTexture ThreadDispatchDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceCreateTexture;\n    if (!proc) {\n        proc = defaultProc.deviceCreateTexture;\n    }\nreturn     proc(device, descriptor);\n}\nstatic void ThreadDispatchDeviceDestroy(WGPUDevice device) {\n    auto* proc = perThreadProcs.deviceDestroy;\n    if (!proc) {\n        proc = defaultProc.deviceDestroy;\n    }\n    proc(device);\n}\nstatic void ThreadDispatchDeviceForceLoss(WGPUDevice device, WGPUDeviceLostReason type, WGPUStringView message) {\n    auto* proc = perThreadProcs.deviceForceLoss;\n    if (!proc) {\n        proc = defaultProc.deviceForceLoss;\n    }\n    proc(device, type, message);\n}\nstatic WGPUStatus ThreadDispatchDeviceGetAHardwareBufferProperties(WGPUDevice device, void * handle, WGPUAHardwareBufferProperties * properties) {\n    auto* proc = perThreadProcs.deviceGetAHardwareBufferProperties;\n    if (!proc) {\n        proc = defaultProc.deviceGetAHardwareBufferProperties;\n    }\nreturn     proc(device, handle, properties);\n}\nstatic WGPUAdapter ThreadDispatchDeviceGetAdapter(WGPUDevice device) {\n    auto* proc = perThreadProcs.deviceGetAdapter;\n    if (!proc) {\n        proc = defaultProc.deviceGetAdapter;\n    }\nreturn     proc(device);\n}\nstatic WGPUStatus ThreadDispatchDeviceGetAdapterInfo(WGPUDevice device, WGPUAdapterInfo * adapterInfo) {\n    auto* proc = perThreadProcs.deviceGetAdapterInfo;\n    if (!proc) {\n        proc = defaultProc.deviceGetAdapterInfo;\n    }\nreturn     proc(device, adapterInfo);\n}\nstatic void ThreadDispatchDeviceGetFeatures(WGPUDevice device, WGPUSupportedFeatures * features) {\n    auto* proc = perThreadProcs.deviceGetFeatures;\n    if (!proc) {\n        proc = defaultProc.deviceGetFeatures;\n    }\n    proc(device, features);\n}\nstatic WGPUStatus ThreadDispatchDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits) {\n    auto* proc = perThreadProcs.deviceGetLimits;\n    if (!proc) {\n        proc = defaultProc.deviceGetLimits;\n    }\nreturn     proc(device, limits);\n}\nstatic WGPUFuture ThreadDispatchDeviceGetLostFuture(WGPUDevice device) {\n    auto* proc = perThreadProcs.deviceGetLostFuture;\n    if (!proc) {\n        proc = defaultProc.deviceGetLostFuture;\n    }\nreturn     proc(device);\n}\nstatic WGPUQueue ThreadDispatchDeviceGetQueue(WGPUDevice device) {\n    auto* proc = perThreadProcs.deviceGetQueue;\n    if (!proc) {\n        proc = defaultProc.deviceGetQueue;\n    }\nreturn     proc(device);\n}\nstatic WGPUBool ThreadDispatchDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature) {\n    auto* proc = perThreadProcs.deviceHasFeature;\n    if (!proc) {\n        proc = defaultProc.deviceHasFeature;\n    }\nreturn     proc(device, feature);\n}\nstatic WGPUSharedBufferMemory ThreadDispatchDeviceImportSharedBufferMemory(WGPUDevice device, WGPUSharedBufferMemoryDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceImportSharedBufferMemory;\n    if (!proc) {\n        proc = defaultProc.deviceImportSharedBufferMemory;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUSharedFence ThreadDispatchDeviceImportSharedFence(WGPUDevice device, WGPUSharedFenceDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceImportSharedFence;\n    if (!proc) {\n        proc = defaultProc.deviceImportSharedFence;\n    }\nreturn     proc(device, descriptor);\n}\nstatic WGPUSharedTextureMemory ThreadDispatchDeviceImportSharedTextureMemory(WGPUDevice device, WGPUSharedTextureMemoryDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceImportSharedTextureMemory;\n    if (!proc) {\n        proc = defaultProc.deviceImportSharedTextureMemory;\n    }\nreturn     proc(device, descriptor);\n}\nstatic void ThreadDispatchDeviceInjectError(WGPUDevice device, WGPUErrorType type, WGPUStringView message) {\n    auto* proc = perThreadProcs.deviceInjectError;\n    if (!proc) {\n        proc = defaultProc.deviceInjectError;\n    }\n    proc(device, type, message);\n}\nstatic void ThreadDispatchDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback oldCallback, void * userdata) {\n    auto* proc = perThreadProcs.devicePopErrorScope;\n    if (!proc) {\n        proc = defaultProc.devicePopErrorScope;\n    }\n    proc(device, oldCallback, userdata);\n}\nstatic WGPUFuture ThreadDispatchDevicePopErrorScope2(WGPUDevice device, WGPUPopErrorScopeCallbackInfo2 callbackInfo) {\n    auto* proc = perThreadProcs.devicePopErrorScope2;\n    if (!proc) {\n        proc = defaultProc.devicePopErrorScope2;\n    }\nreturn     proc(device, callbackInfo);\n}\nstatic WGPUFuture ThreadDispatchDevicePopErrorScopeF(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo) {\n    auto* proc = perThreadProcs.devicePopErrorScopeF;\n    if (!proc) {\n        proc = defaultProc.devicePopErrorScopeF;\n    }\nreturn     proc(device, callbackInfo);\n}\nstatic void ThreadDispatchDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) {\n    auto* proc = perThreadProcs.devicePushErrorScope;\n    if (!proc) {\n        proc = defaultProc.devicePushErrorScope;\n    }\n    proc(device, filter);\n}\nstatic void ThreadDispatchDeviceSetLabel(WGPUDevice device, WGPUStringView label) {\n    auto* proc = perThreadProcs.deviceSetLabel;\n    if (!proc) {\n        proc = defaultProc.deviceSetLabel;\n    }\n    proc(device, label);\n}\nstatic void ThreadDispatchDeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata) {\n    auto* proc = perThreadProcs.deviceSetLoggingCallback;\n    if (!proc) {\n        proc = defaultProc.deviceSetLoggingCallback;\n    }\n    proc(device, callback, userdata);\n}\nstatic void ThreadDispatchDeviceTick(WGPUDevice device) {\n    auto* proc = perThreadProcs.deviceTick;\n    if (!proc) {\n        proc = defaultProc.deviceTick;\n    }\n    proc(device);\n}\nstatic void ThreadDispatchDeviceValidateTextureDescriptor(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.deviceValidateTextureDescriptor;\n    if (!proc) {\n        proc = defaultProc.deviceValidateTextureDescriptor;\n    }\n    proc(device, descriptor);\n}\nstatic void ThreadDispatchDeviceAddRef(WGPUDevice device) {\n    auto* proc = perThreadProcs.deviceAddRef;\n    if (!proc) {\n        proc = defaultProc.deviceAddRef;\n    }\n    proc(device);\n}\nstatic void ThreadDispatchDeviceRelease(WGPUDevice device) {\n    auto* proc = perThreadProcs.deviceRelease;\n    if (!proc) {\n        proc = defaultProc.deviceRelease;\n    }\n    proc(device);\n}\nstatic void ThreadDispatchExternalTextureDestroy(WGPUExternalTexture externalTexture) {\n    auto* proc = perThreadProcs.externalTextureDestroy;\n    if (!proc) {\n        proc = defaultProc.externalTextureDestroy;\n    }\n    proc(externalTexture);\n}\nstatic void ThreadDispatchExternalTextureExpire(WGPUExternalTexture externalTexture) {\n    auto* proc = perThreadProcs.externalTextureExpire;\n    if (!proc) {\n        proc = defaultProc.externalTextureExpire;\n    }\n    proc(externalTexture);\n}\nstatic void ThreadDispatchExternalTextureRefresh(WGPUExternalTexture externalTexture) {\n    auto* proc = perThreadProcs.externalTextureRefresh;\n    if (!proc) {\n        proc = defaultProc.externalTextureRefresh;\n    }\n    proc(externalTexture);\n}\nstatic void ThreadDispatchExternalTextureSetLabel(WGPUExternalTexture externalTexture, WGPUStringView label) {\n    auto* proc = perThreadProcs.externalTextureSetLabel;\n    if (!proc) {\n        proc = defaultProc.externalTextureSetLabel;\n    }\n    proc(externalTexture, label);\n}\nstatic void ThreadDispatchExternalTextureAddRef(WGPUExternalTexture externalTexture) {\n    auto* proc = perThreadProcs.externalTextureAddRef;\n    if (!proc) {\n        proc = defaultProc.externalTextureAddRef;\n    }\n    proc(externalTexture);\n}\nstatic void ThreadDispatchExternalTextureRelease(WGPUExternalTexture externalTexture) {\n    auto* proc = perThreadProcs.externalTextureRelease;\n    if (!proc) {\n        proc = defaultProc.externalTextureRelease;\n    }\n    proc(externalTexture);\n}\nstatic WGPUSurface ThreadDispatchInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.instanceCreateSurface;\n    if (!proc) {\n        proc = defaultProc.instanceCreateSurface;\n    }\nreturn     proc(instance, descriptor);\n}\nstatic size_t ThreadDispatchInstanceEnumerateWGSLLanguageFeatures(WGPUInstance instance, WGPUWGSLFeatureName * features) {\n    auto* proc = perThreadProcs.instanceEnumerateWGSLLanguageFeatures;\n    if (!proc) {\n        proc = defaultProc.instanceEnumerateWGSLLanguageFeatures;\n    }\nreturn     proc(instance, features);\n}\nstatic WGPUBool ThreadDispatchInstanceHasWGSLLanguageFeature(WGPUInstance instance, WGPUWGSLFeatureName feature) {\n    auto* proc = perThreadProcs.instanceHasWGSLLanguageFeature;\n    if (!proc) {\n        proc = defaultProc.instanceHasWGSLLanguageFeature;\n    }\nreturn     proc(instance, feature);\n}\nstatic void ThreadDispatchInstanceProcessEvents(WGPUInstance instance) {\n    auto* proc = perThreadProcs.instanceProcessEvents;\n    if (!proc) {\n        proc = defaultProc.instanceProcessEvents;\n    }\n    proc(instance);\n}\nstatic void ThreadDispatchInstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) {\n    auto* proc = perThreadProcs.instanceRequestAdapter;\n    if (!proc) {\n        proc = defaultProc.instanceRequestAdapter;\n    }\n    proc(instance, options, callback, userdata);\n}\nstatic WGPUFuture ThreadDispatchInstanceRequestAdapter2(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo2 callbackInfo) {\n    auto* proc = perThreadProcs.instanceRequestAdapter2;\n    if (!proc) {\n        proc = defaultProc.instanceRequestAdapter2;\n    }\nreturn     proc(instance, options, callbackInfo);\n}\nstatic WGPUFuture ThreadDispatchInstanceRequestAdapterF(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallbackInfo callbackInfo) {\n    auto* proc = perThreadProcs.instanceRequestAdapterF;\n    if (!proc) {\n        proc = defaultProc.instanceRequestAdapterF;\n    }\nreturn     proc(instance, options, callbackInfo);\n}\nstatic WGPUWaitStatus ThreadDispatchInstanceWaitAny(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo * futures, uint64_t timeoutNS) {\n    auto* proc = perThreadProcs.instanceWaitAny;\n    if (!proc) {\n        proc = defaultProc.instanceWaitAny;\n    }\nreturn     proc(instance, futureCount, futures, timeoutNS);\n}\nstatic void ThreadDispatchInstanceAddRef(WGPUInstance instance) {\n    auto* proc = perThreadProcs.instanceAddRef;\n    if (!proc) {\n        proc = defaultProc.instanceAddRef;\n    }\n    proc(instance);\n}\nstatic void ThreadDispatchInstanceRelease(WGPUInstance instance) {\n    auto* proc = perThreadProcs.instanceRelease;\n    if (!proc) {\n        proc = defaultProc.instanceRelease;\n    }\n    proc(instance);\n}\nstatic void ThreadDispatchPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, WGPUStringView label) {\n    auto* proc = perThreadProcs.pipelineLayoutSetLabel;\n    if (!proc) {\n        proc = defaultProc.pipelineLayoutSetLabel;\n    }\n    proc(pipelineLayout, label);\n}\nstatic void ThreadDispatchPipelineLayoutAddRef(WGPUPipelineLayout pipelineLayout) {\n    auto* proc = perThreadProcs.pipelineLayoutAddRef;\n    if (!proc) {\n        proc = defaultProc.pipelineLayoutAddRef;\n    }\n    proc(pipelineLayout);\n}\nstatic void ThreadDispatchPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout) {\n    auto* proc = perThreadProcs.pipelineLayoutRelease;\n    if (!proc) {\n        proc = defaultProc.pipelineLayoutRelease;\n    }\n    proc(pipelineLayout);\n}\nstatic void ThreadDispatchQuerySetDestroy(WGPUQuerySet querySet) {\n    auto* proc = perThreadProcs.querySetDestroy;\n    if (!proc) {\n        proc = defaultProc.querySetDestroy;\n    }\n    proc(querySet);\n}\nstatic uint32_t ThreadDispatchQuerySetGetCount(WGPUQuerySet querySet) {\n    auto* proc = perThreadProcs.querySetGetCount;\n    if (!proc) {\n        proc = defaultProc.querySetGetCount;\n    }\nreturn     proc(querySet);\n}\nstatic WGPUQueryType ThreadDispatchQuerySetGetType(WGPUQuerySet querySet) {\n    auto* proc = perThreadProcs.querySetGetType;\n    if (!proc) {\n        proc = defaultProc.querySetGetType;\n    }\nreturn     proc(querySet);\n}\nstatic void ThreadDispatchQuerySetSetLabel(WGPUQuerySet querySet, WGPUStringView label) {\n    auto* proc = perThreadProcs.querySetSetLabel;\n    if (!proc) {\n        proc = defaultProc.querySetSetLabel;\n    }\n    proc(querySet, label);\n}\nstatic void ThreadDispatchQuerySetAddRef(WGPUQuerySet querySet) {\n    auto* proc = perThreadProcs.querySetAddRef;\n    if (!proc) {\n        proc = defaultProc.querySetAddRef;\n    }\n    proc(querySet);\n}\nstatic void ThreadDispatchQuerySetRelease(WGPUQuerySet querySet) {\n    auto* proc = perThreadProcs.querySetRelease;\n    if (!proc) {\n        proc = defaultProc.querySetRelease;\n    }\n    proc(querySet);\n}\nstatic void ThreadDispatchQueueCopyExternalTextureForBrowser(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n    auto* proc = perThreadProcs.queueCopyExternalTextureForBrowser;\n    if (!proc) {\n        proc = defaultProc.queueCopyExternalTextureForBrowser;\n    }\n    proc(queue, source, destination, copySize, options);\n}\nstatic void ThreadDispatchQueueCopyTextureForBrowser(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n    auto* proc = perThreadProcs.queueCopyTextureForBrowser;\n    if (!proc) {\n        proc = defaultProc.queueCopyTextureForBrowser;\n    }\n    proc(queue, source, destination, copySize, options);\n}\nstatic void ThreadDispatchQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallback callback, void * userdata) {\n    auto* proc = perThreadProcs.queueOnSubmittedWorkDone;\n    if (!proc) {\n        proc = defaultProc.queueOnSubmittedWorkDone;\n    }\n    proc(queue, callback, userdata);\n}\nstatic WGPUFuture ThreadDispatchQueueOnSubmittedWorkDone2(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo2 callbackInfo) {\n    auto* proc = perThreadProcs.queueOnSubmittedWorkDone2;\n    if (!proc) {\n        proc = defaultProc.queueOnSubmittedWorkDone2;\n    }\nreturn     proc(queue, callbackInfo);\n}\nstatic WGPUFuture ThreadDispatchQueueOnSubmittedWorkDoneF(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo) {\n    auto* proc = perThreadProcs.queueOnSubmittedWorkDoneF;\n    if (!proc) {\n        proc = defaultProc.queueOnSubmittedWorkDoneF;\n    }\nreturn     proc(queue, callbackInfo);\n}\nstatic void ThreadDispatchQueueSetLabel(WGPUQueue queue, WGPUStringView label) {\n    auto* proc = perThreadProcs.queueSetLabel;\n    if (!proc) {\n        proc = defaultProc.queueSetLabel;\n    }\n    proc(queue, label);\n}\nstatic void ThreadDispatchQueueSubmit(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) {\n    auto* proc = perThreadProcs.queueSubmit;\n    if (!proc) {\n        proc = defaultProc.queueSubmit;\n    }\n    proc(queue, commandCount, commands);\n}\nstatic void ThreadDispatchQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) {\n    auto* proc = perThreadProcs.queueWriteBuffer;\n    if (!proc) {\n        proc = defaultProc.queueWriteBuffer;\n    }\n    proc(queue, buffer, bufferOffset, data, size);\n}\nstatic void ThreadDispatchQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) {\n    auto* proc = perThreadProcs.queueWriteTexture;\n    if (!proc) {\n        proc = defaultProc.queueWriteTexture;\n    }\n    proc(queue, destination, data, dataSize, dataLayout, writeSize);\n}\nstatic void ThreadDispatchQueueAddRef(WGPUQueue queue) {\n    auto* proc = perThreadProcs.queueAddRef;\n    if (!proc) {\n        proc = defaultProc.queueAddRef;\n    }\n    proc(queue);\n}\nstatic void ThreadDispatchQueueRelease(WGPUQueue queue) {\n    auto* proc = perThreadProcs.queueRelease;\n    if (!proc) {\n        proc = defaultProc.queueRelease;\n    }\n    proc(queue);\n}\nstatic void ThreadDispatchRenderBundleSetLabel(WGPURenderBundle renderBundle, WGPUStringView label) {\n    auto* proc = perThreadProcs.renderBundleSetLabel;\n    if (!proc) {\n        proc = defaultProc.renderBundleSetLabel;\n    }\n    proc(renderBundle, label);\n}\nstatic void ThreadDispatchRenderBundleAddRef(WGPURenderBundle renderBundle) {\n    auto* proc = perThreadProcs.renderBundleAddRef;\n    if (!proc) {\n        proc = defaultProc.renderBundleAddRef;\n    }\n    proc(renderBundle);\n}\nstatic void ThreadDispatchRenderBundleRelease(WGPURenderBundle renderBundle) {\n    auto* proc = perThreadProcs.renderBundleRelease;\n    if (!proc) {\n        proc = defaultProc.renderBundleRelease;\n    }\n    proc(renderBundle);\n}\nstatic void ThreadDispatchRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    auto* proc = perThreadProcs.renderBundleEncoderDraw;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderDraw;\n    }\n    proc(renderBundleEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nstatic void ThreadDispatchRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    auto* proc = perThreadProcs.renderBundleEncoderDrawIndexed;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderDrawIndexed;\n    }\n    proc(renderBundleEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nstatic void ThreadDispatchRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    auto* proc = perThreadProcs.renderBundleEncoderDrawIndexedIndirect;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderDrawIndexedIndirect;\n    }\n    proc(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nstatic void ThreadDispatchRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    auto* proc = perThreadProcs.renderBundleEncoderDrawIndirect;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderDrawIndirect;\n    }\n    proc(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nstatic WGPURenderBundle ThreadDispatchRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.renderBundleEncoderFinish;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderFinish;\n    }\nreturn     proc(renderBundleEncoder, descriptor);\n}\nstatic void ThreadDispatchRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel) {\n    auto* proc = perThreadProcs.renderBundleEncoderInsertDebugMarker;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderInsertDebugMarker;\n    }\n    proc(renderBundleEncoder, markerLabel);\n}\nstatic void ThreadDispatchRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) {\n    auto* proc = perThreadProcs.renderBundleEncoderPopDebugGroup;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderPopDebugGroup;\n    }\n    proc(renderBundleEncoder);\n}\nstatic void ThreadDispatchRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel) {\n    auto* proc = perThreadProcs.renderBundleEncoderPushDebugGroup;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderPushDebugGroup;\n    }\n    proc(renderBundleEncoder, groupLabel);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    auto* proc = perThreadProcs.renderBundleEncoderSetBindGroup;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderSetBindGroup;\n    }\n    proc(renderBundleEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n    auto* proc = perThreadProcs.renderBundleEncoderSetIndexBuffer;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderSetIndexBuffer;\n    }\n    proc(renderBundleEncoder, buffer, format, offset, size);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label) {\n    auto* proc = perThreadProcs.renderBundleEncoderSetLabel;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderSetLabel;\n    }\n    proc(renderBundleEncoder, label);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) {\n    auto* proc = perThreadProcs.renderBundleEncoderSetPipeline;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderSetPipeline;\n    }\n    proc(renderBundleEncoder, pipeline);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    auto* proc = perThreadProcs.renderBundleEncoderSetVertexBuffer;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderSetVertexBuffer;\n    }\n    proc(renderBundleEncoder, slot, buffer, offset, size);\n}\nstatic void ThreadDispatchRenderBundleEncoderAddRef(WGPURenderBundleEncoder renderBundleEncoder) {\n    auto* proc = perThreadProcs.renderBundleEncoderAddRef;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderAddRef;\n    }\n    proc(renderBundleEncoder);\n}\nstatic void ThreadDispatchRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder) {\n    auto* proc = perThreadProcs.renderBundleEncoderRelease;\n    if (!proc) {\n        proc = defaultProc.renderBundleEncoderRelease;\n    }\n    proc(renderBundleEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) {\n    auto* proc = perThreadProcs.renderPassEncoderBeginOcclusionQuery;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderBeginOcclusionQuery;\n    }\n    proc(renderPassEncoder, queryIndex);\n}\nstatic void ThreadDispatchRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    auto* proc = perThreadProcs.renderPassEncoderDraw;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderDraw;\n    }\n    proc(renderPassEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nstatic void ThreadDispatchRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    auto* proc = perThreadProcs.renderPassEncoderDrawIndexed;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderDrawIndexed;\n    }\n    proc(renderPassEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nstatic void ThreadDispatchRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    auto* proc = perThreadProcs.renderPassEncoderDrawIndexedIndirect;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderDrawIndexedIndirect;\n    }\n    proc(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nstatic void ThreadDispatchRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    auto* proc = perThreadProcs.renderPassEncoderDrawIndirect;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderDrawIndirect;\n    }\n    proc(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nstatic void ThreadDispatchRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder) {\n    auto* proc = perThreadProcs.renderPassEncoderEnd;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderEnd;\n    }\n    proc(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder) {\n    auto* proc = perThreadProcs.renderPassEncoderEndOcclusionQuery;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderEndOcclusionQuery;\n    }\n    proc(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) {\n    auto* proc = perThreadProcs.renderPassEncoderExecuteBundles;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderExecuteBundles;\n    }\n    proc(renderPassEncoder, bundleCount, bundles);\n}\nstatic void ThreadDispatchRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel) {\n    auto* proc = perThreadProcs.renderPassEncoderInsertDebugMarker;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderInsertDebugMarker;\n    }\n    proc(renderPassEncoder, markerLabel);\n}\nstatic void ThreadDispatchRenderPassEncoderMultiDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) {\n    auto* proc = perThreadProcs.renderPassEncoderMultiDrawIndexedIndirect;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderMultiDrawIndexedIndirect;\n    }\n    proc(renderPassEncoder, indirectBuffer, indirectOffset, maxDrawCount, drawCountBuffer, drawCountBufferOffset);\n}\nstatic void ThreadDispatchRenderPassEncoderMultiDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, WGPUBuffer drawCountBuffer, uint64_t drawCountBufferOffset) {\n    auto* proc = perThreadProcs.renderPassEncoderMultiDrawIndirect;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderMultiDrawIndirect;\n    }\n    proc(renderPassEncoder, indirectBuffer, indirectOffset, maxDrawCount, drawCountBuffer, drawCountBufferOffset);\n}\nstatic void ThreadDispatchRenderPassEncoderPixelLocalStorageBarrier(WGPURenderPassEncoder renderPassEncoder) {\n    auto* proc = perThreadProcs.renderPassEncoderPixelLocalStorageBarrier;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderPixelLocalStorageBarrier;\n    }\n    proc(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) {\n    auto* proc = perThreadProcs.renderPassEncoderPopDebugGroup;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderPopDebugGroup;\n    }\n    proc(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel) {\n    auto* proc = perThreadProcs.renderPassEncoderPushDebugGroup;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderPushDebugGroup;\n    }\n    proc(renderPassEncoder, groupLabel);\n}\nstatic void ThreadDispatchRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    auto* proc = perThreadProcs.renderPassEncoderSetBindGroup;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetBindGroup;\n    }\n    proc(renderPassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nstatic void ThreadDispatchRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) {\n    auto* proc = perThreadProcs.renderPassEncoderSetBlendConstant;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetBlendConstant;\n    }\n    proc(renderPassEncoder, color);\n}\nstatic void ThreadDispatchRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n    auto* proc = perThreadProcs.renderPassEncoderSetIndexBuffer;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetIndexBuffer;\n    }\n    proc(renderPassEncoder, buffer, format, offset, size);\n}\nstatic void ThreadDispatchRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label) {\n    auto* proc = perThreadProcs.renderPassEncoderSetLabel;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetLabel;\n    }\n    proc(renderPassEncoder, label);\n}\nstatic void ThreadDispatchRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) {\n    auto* proc = perThreadProcs.renderPassEncoderSetPipeline;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetPipeline;\n    }\n    proc(renderPassEncoder, pipeline);\n}\nstatic void ThreadDispatchRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {\n    auto* proc = perThreadProcs.renderPassEncoderSetScissorRect;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetScissorRect;\n    }\n    proc(renderPassEncoder, x, y, width, height);\n}\nstatic void ThreadDispatchRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) {\n    auto* proc = perThreadProcs.renderPassEncoderSetStencilReference;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetStencilReference;\n    }\n    proc(renderPassEncoder, reference);\n}\nstatic void ThreadDispatchRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    auto* proc = perThreadProcs.renderPassEncoderSetVertexBuffer;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetVertexBuffer;\n    }\n    proc(renderPassEncoder, slot, buffer, offset, size);\n}\nstatic void ThreadDispatchRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) {\n    auto* proc = perThreadProcs.renderPassEncoderSetViewport;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderSetViewport;\n    }\n    proc(renderPassEncoder, x, y, width, height, minDepth, maxDepth);\n}\nstatic void ThreadDispatchRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    auto* proc = perThreadProcs.renderPassEncoderWriteTimestamp;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderWriteTimestamp;\n    }\n    proc(renderPassEncoder, querySet, queryIndex);\n}\nstatic void ThreadDispatchRenderPassEncoderAddRef(WGPURenderPassEncoder renderPassEncoder) {\n    auto* proc = perThreadProcs.renderPassEncoderAddRef;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderAddRef;\n    }\n    proc(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder) {\n    auto* proc = perThreadProcs.renderPassEncoderRelease;\n    if (!proc) {\n        proc = defaultProc.renderPassEncoderRelease;\n    }\n    proc(renderPassEncoder);\n}\nstatic WGPUBindGroupLayout ThreadDispatchRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) {\n    auto* proc = perThreadProcs.renderPipelineGetBindGroupLayout;\n    if (!proc) {\n        proc = defaultProc.renderPipelineGetBindGroupLayout;\n    }\nreturn     proc(renderPipeline, groupIndex);\n}\nstatic void ThreadDispatchRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, WGPUStringView label) {\n    auto* proc = perThreadProcs.renderPipelineSetLabel;\n    if (!proc) {\n        proc = defaultProc.renderPipelineSetLabel;\n    }\n    proc(renderPipeline, label);\n}\nstatic void ThreadDispatchRenderPipelineAddRef(WGPURenderPipeline renderPipeline) {\n    auto* proc = perThreadProcs.renderPipelineAddRef;\n    if (!proc) {\n        proc = defaultProc.renderPipelineAddRef;\n    }\n    proc(renderPipeline);\n}\nstatic void ThreadDispatchRenderPipelineRelease(WGPURenderPipeline renderPipeline) {\n    auto* proc = perThreadProcs.renderPipelineRelease;\n    if (!proc) {\n        proc = defaultProc.renderPipelineRelease;\n    }\n    proc(renderPipeline);\n}\nstatic void ThreadDispatchSamplerSetLabel(WGPUSampler sampler, WGPUStringView label) {\n    auto* proc = perThreadProcs.samplerSetLabel;\n    if (!proc) {\n        proc = defaultProc.samplerSetLabel;\n    }\n    proc(sampler, label);\n}\nstatic void ThreadDispatchSamplerAddRef(WGPUSampler sampler) {\n    auto* proc = perThreadProcs.samplerAddRef;\n    if (!proc) {\n        proc = defaultProc.samplerAddRef;\n    }\n    proc(sampler);\n}\nstatic void ThreadDispatchSamplerRelease(WGPUSampler sampler) {\n    auto* proc = perThreadProcs.samplerRelease;\n    if (!proc) {\n        proc = defaultProc.samplerRelease;\n    }\n    proc(sampler);\n}\nstatic void ThreadDispatchShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) {\n    auto* proc = perThreadProcs.shaderModuleGetCompilationInfo;\n    if (!proc) {\n        proc = defaultProc.shaderModuleGetCompilationInfo;\n    }\n    proc(shaderModule, callback, userdata);\n}\nstatic WGPUFuture ThreadDispatchShaderModuleGetCompilationInfo2(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo2 callbackInfo) {\n    auto* proc = perThreadProcs.shaderModuleGetCompilationInfo2;\n    if (!proc) {\n        proc = defaultProc.shaderModuleGetCompilationInfo2;\n    }\nreturn     proc(shaderModule, callbackInfo);\n}\nstatic WGPUFuture ThreadDispatchShaderModuleGetCompilationInfoF(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo) {\n    auto* proc = perThreadProcs.shaderModuleGetCompilationInfoF;\n    if (!proc) {\n        proc = defaultProc.shaderModuleGetCompilationInfoF;\n    }\nreturn     proc(shaderModule, callbackInfo);\n}\nstatic void ThreadDispatchShaderModuleSetLabel(WGPUShaderModule shaderModule, WGPUStringView label) {\n    auto* proc = perThreadProcs.shaderModuleSetLabel;\n    if (!proc) {\n        proc = defaultProc.shaderModuleSetLabel;\n    }\n    proc(shaderModule, label);\n}\nstatic void ThreadDispatchShaderModuleAddRef(WGPUShaderModule shaderModule) {\n    auto* proc = perThreadProcs.shaderModuleAddRef;\n    if (!proc) {\n        proc = defaultProc.shaderModuleAddRef;\n    }\n    proc(shaderModule);\n}\nstatic void ThreadDispatchShaderModuleRelease(WGPUShaderModule shaderModule) {\n    auto* proc = perThreadProcs.shaderModuleRelease;\n    if (!proc) {\n        proc = defaultProc.shaderModuleRelease;\n    }\n    proc(shaderModule);\n}\nstatic WGPUStatus ThreadDispatchSharedBufferMemoryBeginAccess(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryBeginAccessDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.sharedBufferMemoryBeginAccess;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemoryBeginAccess;\n    }\nreturn     proc(sharedBufferMemory, buffer, descriptor);\n}\nstatic WGPUBuffer ThreadDispatchSharedBufferMemoryCreateBuffer(WGPUSharedBufferMemory sharedBufferMemory, WGPUBufferDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.sharedBufferMemoryCreateBuffer;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemoryCreateBuffer;\n    }\nreturn     proc(sharedBufferMemory, descriptor);\n}\nstatic WGPUStatus ThreadDispatchSharedBufferMemoryEndAccess(WGPUSharedBufferMemory sharedBufferMemory, WGPUBuffer buffer, WGPUSharedBufferMemoryEndAccessState * descriptor) {\n    auto* proc = perThreadProcs.sharedBufferMemoryEndAccess;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemoryEndAccess;\n    }\nreturn     proc(sharedBufferMemory, buffer, descriptor);\n}\nstatic WGPUStatus ThreadDispatchSharedBufferMemoryGetProperties(WGPUSharedBufferMemory sharedBufferMemory, WGPUSharedBufferMemoryProperties * properties) {\n    auto* proc = perThreadProcs.sharedBufferMemoryGetProperties;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemoryGetProperties;\n    }\nreturn     proc(sharedBufferMemory, properties);\n}\nstatic WGPUBool ThreadDispatchSharedBufferMemoryIsDeviceLost(WGPUSharedBufferMemory sharedBufferMemory) {\n    auto* proc = perThreadProcs.sharedBufferMemoryIsDeviceLost;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemoryIsDeviceLost;\n    }\nreturn     proc(sharedBufferMemory);\n}\nstatic void ThreadDispatchSharedBufferMemorySetLabel(WGPUSharedBufferMemory sharedBufferMemory, WGPUStringView label) {\n    auto* proc = perThreadProcs.sharedBufferMemorySetLabel;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemorySetLabel;\n    }\n    proc(sharedBufferMemory, label);\n}\nstatic void ThreadDispatchSharedBufferMemoryAddRef(WGPUSharedBufferMemory sharedBufferMemory) {\n    auto* proc = perThreadProcs.sharedBufferMemoryAddRef;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemoryAddRef;\n    }\n    proc(sharedBufferMemory);\n}\nstatic void ThreadDispatchSharedBufferMemoryRelease(WGPUSharedBufferMemory sharedBufferMemory) {\n    auto* proc = perThreadProcs.sharedBufferMemoryRelease;\n    if (!proc) {\n        proc = defaultProc.sharedBufferMemoryRelease;\n    }\n    proc(sharedBufferMemory);\n}\nstatic void ThreadDispatchSharedFenceExportInfo(WGPUSharedFence sharedFence, WGPUSharedFenceExportInfo * info) {\n    auto* proc = perThreadProcs.sharedFenceExportInfo;\n    if (!proc) {\n        proc = defaultProc.sharedFenceExportInfo;\n    }\n    proc(sharedFence, info);\n}\nstatic void ThreadDispatchSharedFenceAddRef(WGPUSharedFence sharedFence) {\n    auto* proc = perThreadProcs.sharedFenceAddRef;\n    if (!proc) {\n        proc = defaultProc.sharedFenceAddRef;\n    }\n    proc(sharedFence);\n}\nstatic void ThreadDispatchSharedFenceRelease(WGPUSharedFence sharedFence) {\n    auto* proc = perThreadProcs.sharedFenceRelease;\n    if (!proc) {\n        proc = defaultProc.sharedFenceRelease;\n    }\n    proc(sharedFence);\n}\nstatic WGPUStatus ThreadDispatchSharedTextureMemoryBeginAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryBeginAccessDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.sharedTextureMemoryBeginAccess;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemoryBeginAccess;\n    }\nreturn     proc(sharedTextureMemory, texture, descriptor);\n}\nstatic WGPUTexture ThreadDispatchSharedTextureMemoryCreateTexture(WGPUSharedTextureMemory sharedTextureMemory, WGPUTextureDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.sharedTextureMemoryCreateTexture;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemoryCreateTexture;\n    }\nreturn     proc(sharedTextureMemory, descriptor);\n}\nstatic WGPUStatus ThreadDispatchSharedTextureMemoryEndAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryEndAccessState * descriptor) {\n    auto* proc = perThreadProcs.sharedTextureMemoryEndAccess;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemoryEndAccess;\n    }\nreturn     proc(sharedTextureMemory, texture, descriptor);\n}\nstatic WGPUStatus ThreadDispatchSharedTextureMemoryGetProperties(WGPUSharedTextureMemory sharedTextureMemory, WGPUSharedTextureMemoryProperties * properties) {\n    auto* proc = perThreadProcs.sharedTextureMemoryGetProperties;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemoryGetProperties;\n    }\nreturn     proc(sharedTextureMemory, properties);\n}\nstatic WGPUBool ThreadDispatchSharedTextureMemoryIsDeviceLost(WGPUSharedTextureMemory sharedTextureMemory) {\n    auto* proc = perThreadProcs.sharedTextureMemoryIsDeviceLost;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemoryIsDeviceLost;\n    }\nreturn     proc(sharedTextureMemory);\n}\nstatic void ThreadDispatchSharedTextureMemorySetLabel(WGPUSharedTextureMemory sharedTextureMemory, WGPUStringView label) {\n    auto* proc = perThreadProcs.sharedTextureMemorySetLabel;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemorySetLabel;\n    }\n    proc(sharedTextureMemory, label);\n}\nstatic void ThreadDispatchSharedTextureMemoryAddRef(WGPUSharedTextureMemory sharedTextureMemory) {\n    auto* proc = perThreadProcs.sharedTextureMemoryAddRef;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemoryAddRef;\n    }\n    proc(sharedTextureMemory);\n}\nstatic void ThreadDispatchSharedTextureMemoryRelease(WGPUSharedTextureMemory sharedTextureMemory) {\n    auto* proc = perThreadProcs.sharedTextureMemoryRelease;\n    if (!proc) {\n        proc = defaultProc.sharedTextureMemoryRelease;\n    }\n    proc(sharedTextureMemory);\n}\nstatic void ThreadDispatchSurfaceConfigure(WGPUSurface surface, WGPUSurfaceConfiguration const * config) {\n    auto* proc = perThreadProcs.surfaceConfigure;\n    if (!proc) {\n        proc = defaultProc.surfaceConfigure;\n    }\n    proc(surface, config);\n}\nstatic WGPUStatus ThreadDispatchSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities * capabilities) {\n    auto* proc = perThreadProcs.surfaceGetCapabilities;\n    if (!proc) {\n        proc = defaultProc.surfaceGetCapabilities;\n    }\nreturn     proc(surface, adapter, capabilities);\n}\nstatic void ThreadDispatchSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture * surfaceTexture) {\n    auto* proc = perThreadProcs.surfaceGetCurrentTexture;\n    if (!proc) {\n        proc = defaultProc.surfaceGetCurrentTexture;\n    }\n    proc(surface, surfaceTexture);\n}\nstatic void ThreadDispatchSurfacePresent(WGPUSurface surface) {\n    auto* proc = perThreadProcs.surfacePresent;\n    if (!proc) {\n        proc = defaultProc.surfacePresent;\n    }\n    proc(surface);\n}\nstatic void ThreadDispatchSurfaceSetLabel(WGPUSurface surface, WGPUStringView label) {\n    auto* proc = perThreadProcs.surfaceSetLabel;\n    if (!proc) {\n        proc = defaultProc.surfaceSetLabel;\n    }\n    proc(surface, label);\n}\nstatic void ThreadDispatchSurfaceUnconfigure(WGPUSurface surface) {\n    auto* proc = perThreadProcs.surfaceUnconfigure;\n    if (!proc) {\n        proc = defaultProc.surfaceUnconfigure;\n    }\n    proc(surface);\n}\nstatic void ThreadDispatchSurfaceAddRef(WGPUSurface surface) {\n    auto* proc = perThreadProcs.surfaceAddRef;\n    if (!proc) {\n        proc = defaultProc.surfaceAddRef;\n    }\n    proc(surface);\n}\nstatic void ThreadDispatchSurfaceRelease(WGPUSurface surface) {\n    auto* proc = perThreadProcs.surfaceRelease;\n    if (!proc) {\n        proc = defaultProc.surfaceRelease;\n    }\n    proc(surface);\n}\nstatic WGPUTextureView ThreadDispatchTextureCreateErrorView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.textureCreateErrorView;\n    if (!proc) {\n        proc = defaultProc.textureCreateErrorView;\n    }\nreturn     proc(texture, descriptor);\n}\nstatic WGPUTextureView ThreadDispatchTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor) {\n    auto* proc = perThreadProcs.textureCreateView;\n    if (!proc) {\n        proc = defaultProc.textureCreateView;\n    }\nreturn     proc(texture, descriptor);\n}\nstatic void ThreadDispatchTextureDestroy(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureDestroy;\n    if (!proc) {\n        proc = defaultProc.textureDestroy;\n    }\n    proc(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetDepthOrArrayLayers(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureGetDepthOrArrayLayers;\n    if (!proc) {\n        proc = defaultProc.textureGetDepthOrArrayLayers;\n    }\nreturn     proc(texture);\n}\nstatic WGPUTextureDimension ThreadDispatchTextureGetDimension(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureGetDimension;\n    if (!proc) {\n        proc = defaultProc.textureGetDimension;\n    }\nreturn     proc(texture);\n}\nstatic WGPUTextureFormat ThreadDispatchTextureGetFormat(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureGetFormat;\n    if (!proc) {\n        proc = defaultProc.textureGetFormat;\n    }\nreturn     proc(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetHeight(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureGetHeight;\n    if (!proc) {\n        proc = defaultProc.textureGetHeight;\n    }\nreturn     proc(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetMipLevelCount(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureGetMipLevelCount;\n    if (!proc) {\n        proc = defaultProc.textureGetMipLevelCount;\n    }\nreturn     proc(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetSampleCount(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureGetSampleCount;\n    if (!proc) {\n        proc = defaultProc.textureGetSampleCount;\n    }\nreturn     proc(texture);\n}\nstatic WGPUTextureUsage ThreadDispatchTextureGetUsage(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureGetUsage;\n    if (!proc) {\n        proc = defaultProc.textureGetUsage;\n    }\nreturn     proc(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetWidth(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureGetWidth;\n    if (!proc) {\n        proc = defaultProc.textureGetWidth;\n    }\nreturn     proc(texture);\n}\nstatic void ThreadDispatchTextureSetLabel(WGPUTexture texture, WGPUStringView label) {\n    auto* proc = perThreadProcs.textureSetLabel;\n    if (!proc) {\n        proc = defaultProc.textureSetLabel;\n    }\n    proc(texture, label);\n}\nstatic void ThreadDispatchTextureAddRef(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureAddRef;\n    if (!proc) {\n        proc = defaultProc.textureAddRef;\n    }\n    proc(texture);\n}\nstatic void ThreadDispatchTextureRelease(WGPUTexture texture) {\n    auto* proc = perThreadProcs.textureRelease;\n    if (!proc) {\n        proc = defaultProc.textureRelease;\n    }\n    proc(texture);\n}\nstatic void ThreadDispatchTextureViewSetLabel(WGPUTextureView textureView, WGPUStringView label) {\n    auto* proc = perThreadProcs.textureViewSetLabel;\n    if (!proc) {\n        proc = defaultProc.textureViewSetLabel;\n    }\n    proc(textureView, label);\n}\nstatic void ThreadDispatchTextureViewAddRef(WGPUTextureView textureView) {\n    auto* proc = perThreadProcs.textureViewAddRef;\n    if (!proc) {\n        proc = defaultProc.textureViewAddRef;\n    }\n    proc(textureView);\n}\nstatic void ThreadDispatchTextureViewRelease(WGPUTextureView textureView) {\n    auto* proc = perThreadProcs.textureViewRelease;\n    if (!proc) {\n        proc = defaultProc.textureViewRelease;\n    }\n    proc(textureView);\n}\n\nextern \"C\" {\n    DawnProcTable dawnThreadDispatchProcTable = {\n        ThreadDispatchAdapterInfoFreeMembers,\n        ThreadDispatchAdapterPropertiesMemoryHeapsFreeMembers,\n        ThreadDispatchCreateInstance,\n        ThreadDispatchDrmFormatCapabilitiesFreeMembers,\n        ThreadDispatchGetInstanceFeatures,\n        ThreadDispatchGetProcAddress,\n        ThreadDispatchSharedBufferMemoryEndAccessStateFreeMembers,\n        ThreadDispatchSharedTextureMemoryEndAccessStateFreeMembers,\n        ThreadDispatchSupportedFeaturesFreeMembers,\n        ThreadDispatchSurfaceCapabilitiesFreeMembers,\n        ThreadDispatchAdapterCreateDevice,\n        ThreadDispatchAdapterGetFeatures,\n        ThreadDispatchAdapterGetFormatCapabilities,\n        ThreadDispatchAdapterGetInfo,\n        ThreadDispatchAdapterGetInstance,\n        ThreadDispatchAdapterGetLimits,\n        ThreadDispatchAdapterHasFeature,\n        ThreadDispatchAdapterRequestDevice,\n        ThreadDispatchAdapterRequestDevice2,\n        ThreadDispatchAdapterRequestDeviceF,\n        ThreadDispatchAdapterAddRef,\n        ThreadDispatchAdapterRelease,\n        ThreadDispatchBindGroupSetLabel,\n        ThreadDispatchBindGroupAddRef,\n        ThreadDispatchBindGroupRelease,\n        ThreadDispatchBindGroupLayoutSetLabel,\n        ThreadDispatchBindGroupLayoutAddRef,\n        ThreadDispatchBindGroupLayoutRelease,\n        ThreadDispatchBufferDestroy,\n        ThreadDispatchBufferGetConstMappedRange,\n        ThreadDispatchBufferGetMapState,\n        ThreadDispatchBufferGetMappedRange,\n        ThreadDispatchBufferGetSize,\n        ThreadDispatchBufferGetUsage,\n        ThreadDispatchBufferMapAsync,\n        ThreadDispatchBufferMapAsync2,\n        ThreadDispatchBufferMapAsyncF,\n        ThreadDispatchBufferSetLabel,\n        ThreadDispatchBufferUnmap,\n        ThreadDispatchBufferAddRef,\n        ThreadDispatchBufferRelease,\n        ThreadDispatchCommandBufferSetLabel,\n        ThreadDispatchCommandBufferAddRef,\n        ThreadDispatchCommandBufferRelease,\n        ThreadDispatchCommandEncoderBeginComputePass,\n        ThreadDispatchCommandEncoderBeginRenderPass,\n        ThreadDispatchCommandEncoderClearBuffer,\n        ThreadDispatchCommandEncoderCopyBufferToBuffer,\n        ThreadDispatchCommandEncoderCopyBufferToTexture,\n        ThreadDispatchCommandEncoderCopyTextureToBuffer,\n        ThreadDispatchCommandEncoderCopyTextureToTexture,\n        ThreadDispatchCommandEncoderFinish,\n        ThreadDispatchCommandEncoderInjectValidationError,\n        ThreadDispatchCommandEncoderInsertDebugMarker,\n        ThreadDispatchCommandEncoderPopDebugGroup,\n        ThreadDispatchCommandEncoderPushDebugGroup,\n        ThreadDispatchCommandEncoderResolveQuerySet,\n        ThreadDispatchCommandEncoderSetLabel,\n        ThreadDispatchCommandEncoderWriteBuffer,\n        ThreadDispatchCommandEncoderWriteTimestamp,\n        ThreadDispatchCommandEncoderAddRef,\n        ThreadDispatchCommandEncoderRelease,\n        ThreadDispatchComputePassEncoderDispatchWorkgroups,\n        ThreadDispatchComputePassEncoderDispatchWorkgroupsIndirect,\n        ThreadDispatchComputePassEncoderEnd,\n        ThreadDispatchComputePassEncoderInsertDebugMarker,\n        ThreadDispatchComputePassEncoderPopDebugGroup,\n        ThreadDispatchComputePassEncoderPushDebugGroup,\n        ThreadDispatchComputePassEncoderSetBindGroup,\n        ThreadDispatchComputePassEncoderSetLabel,\n        ThreadDispatchComputePassEncoderSetPipeline,\n        ThreadDispatchComputePassEncoderWriteTimestamp,\n        ThreadDispatchComputePassEncoderAddRef,\n        ThreadDispatchComputePassEncoderRelease,\n        ThreadDispatchComputePipelineGetBindGroupLayout,\n        ThreadDispatchComputePipelineSetLabel,\n        ThreadDispatchComputePipelineAddRef,\n        ThreadDispatchComputePipelineRelease,\n        ThreadDispatchDeviceCreateBindGroup,\n        ThreadDispatchDeviceCreateBindGroupLayout,\n        ThreadDispatchDeviceCreateBuffer,\n        ThreadDispatchDeviceCreateCommandEncoder,\n        ThreadDispatchDeviceCreateComputePipeline,\n        ThreadDispatchDeviceCreateComputePipelineAsync,\n        ThreadDispatchDeviceCreateComputePipelineAsync2,\n        ThreadDispatchDeviceCreateComputePipelineAsyncF,\n        ThreadDispatchDeviceCreateErrorBuffer,\n        ThreadDispatchDeviceCreateErrorExternalTexture,\n        ThreadDispatchDeviceCreateErrorShaderModule,\n        ThreadDispatchDeviceCreateErrorTexture,\n        ThreadDispatchDeviceCreateExternalTexture,\n        ThreadDispatchDeviceCreatePipelineLayout,\n        ThreadDispatchDeviceCreateQuerySet,\n        ThreadDispatchDeviceCreateRenderBundleEncoder,\n        ThreadDispatchDeviceCreateRenderPipeline,\n        ThreadDispatchDeviceCreateRenderPipelineAsync,\n        ThreadDispatchDeviceCreateRenderPipelineAsync2,\n        ThreadDispatchDeviceCreateRenderPipelineAsyncF,\n        ThreadDispatchDeviceCreateSampler,\n        ThreadDispatchDeviceCreateShaderModule,\n        ThreadDispatchDeviceCreateTexture,\n        ThreadDispatchDeviceDestroy,\n        ThreadDispatchDeviceForceLoss,\n        ThreadDispatchDeviceGetAHardwareBufferProperties,\n        ThreadDispatchDeviceGetAdapter,\n        ThreadDispatchDeviceGetAdapterInfo,\n        ThreadDispatchDeviceGetFeatures,\n        ThreadDispatchDeviceGetLimits,\n        ThreadDispatchDeviceGetLostFuture,\n        ThreadDispatchDeviceGetQueue,\n        ThreadDispatchDeviceHasFeature,\n        ThreadDispatchDeviceImportSharedBufferMemory,\n        ThreadDispatchDeviceImportSharedFence,\n        ThreadDispatchDeviceImportSharedTextureMemory,\n        ThreadDispatchDeviceInjectError,\n        ThreadDispatchDevicePopErrorScope,\n        ThreadDispatchDevicePopErrorScope2,\n        ThreadDispatchDevicePopErrorScopeF,\n        ThreadDispatchDevicePushErrorScope,\n        ThreadDispatchDeviceSetLabel,\n        ThreadDispatchDeviceSetLoggingCallback,\n        ThreadDispatchDeviceTick,\n        ThreadDispatchDeviceValidateTextureDescriptor,\n        ThreadDispatchDeviceAddRef,\n        ThreadDispatchDeviceRelease,\n        ThreadDispatchExternalTextureDestroy,\n        ThreadDispatchExternalTextureExpire,\n        ThreadDispatchExternalTextureRefresh,\n        ThreadDispatchExternalTextureSetLabel,\n        ThreadDispatchExternalTextureAddRef,\n        ThreadDispatchExternalTextureRelease,\n        ThreadDispatchInstanceCreateSurface,\n        ThreadDispatchInstanceEnumerateWGSLLanguageFeatures,\n        ThreadDispatchInstanceHasWGSLLanguageFeature,\n        ThreadDispatchInstanceProcessEvents,\n        ThreadDispatchInstanceRequestAdapter,\n        ThreadDispatchInstanceRequestAdapter2,\n        ThreadDispatchInstanceRequestAdapterF,\n        ThreadDispatchInstanceWaitAny,\n        ThreadDispatchInstanceAddRef,\n        ThreadDispatchInstanceRelease,\n        ThreadDispatchPipelineLayoutSetLabel,\n        ThreadDispatchPipelineLayoutAddRef,\n        ThreadDispatchPipelineLayoutRelease,\n        ThreadDispatchQuerySetDestroy,\n        ThreadDispatchQuerySetGetCount,\n        ThreadDispatchQuerySetGetType,\n        ThreadDispatchQuerySetSetLabel,\n        ThreadDispatchQuerySetAddRef,\n        ThreadDispatchQuerySetRelease,\n        ThreadDispatchQueueCopyExternalTextureForBrowser,\n        ThreadDispatchQueueCopyTextureForBrowser,\n        ThreadDispatchQueueOnSubmittedWorkDone,\n        ThreadDispatchQueueOnSubmittedWorkDone2,\n        ThreadDispatchQueueOnSubmittedWorkDoneF,\n        ThreadDispatchQueueSetLabel,\n        ThreadDispatchQueueSubmit,\n        ThreadDispatchQueueWriteBuffer,\n        ThreadDispatchQueueWriteTexture,\n        ThreadDispatchQueueAddRef,\n        ThreadDispatchQueueRelease,\n        ThreadDispatchRenderBundleSetLabel,\n        ThreadDispatchRenderBundleAddRef,\n        ThreadDispatchRenderBundleRelease,\n        ThreadDispatchRenderBundleEncoderDraw,\n        ThreadDispatchRenderBundleEncoderDrawIndexed,\n        ThreadDispatchRenderBundleEncoderDrawIndexedIndirect,\n        ThreadDispatchRenderBundleEncoderDrawIndirect,\n        ThreadDispatchRenderBundleEncoderFinish,\n        ThreadDispatchRenderBundleEncoderInsertDebugMarker,\n        ThreadDispatchRenderBundleEncoderPopDebugGroup,\n        ThreadDispatchRenderBundleEncoderPushDebugGroup,\n        ThreadDispatchRenderBundleEncoderSetBindGroup,\n        ThreadDispatchRenderBundleEncoderSetIndexBuffer,\n        ThreadDispatchRenderBundleEncoderSetLabel,\n        ThreadDispatchRenderBundleEncoderSetPipeline,\n        ThreadDispatchRenderBundleEncoderSetVertexBuffer,\n        ThreadDispatchRenderBundleEncoderAddRef,\n        ThreadDispatchRenderBundleEncoderRelease,\n        ThreadDispatchRenderPassEncoderBeginOcclusionQuery,\n        ThreadDispatchRenderPassEncoderDraw,\n        ThreadDispatchRenderPassEncoderDrawIndexed,\n        ThreadDispatchRenderPassEncoderDrawIndexedIndirect,\n        ThreadDispatchRenderPassEncoderDrawIndirect,\n        ThreadDispatchRenderPassEncoderEnd,\n        ThreadDispatchRenderPassEncoderEndOcclusionQuery,\n        ThreadDispatchRenderPassEncoderExecuteBundles,\n        ThreadDispatchRenderPassEncoderInsertDebugMarker,\n        ThreadDispatchRenderPassEncoderMultiDrawIndexedIndirect,\n        ThreadDispatchRenderPassEncoderMultiDrawIndirect,\n        ThreadDispatchRenderPassEncoderPixelLocalStorageBarrier,\n        ThreadDispatchRenderPassEncoderPopDebugGroup,\n        ThreadDispatchRenderPassEncoderPushDebugGroup,\n        ThreadDispatchRenderPassEncoderSetBindGroup,\n        ThreadDispatchRenderPassEncoderSetBlendConstant,\n        ThreadDispatchRenderPassEncoderSetIndexBuffer,\n        ThreadDispatchRenderPassEncoderSetLabel,\n        ThreadDispatchRenderPassEncoderSetPipeline,\n        ThreadDispatchRenderPassEncoderSetScissorRect,\n        ThreadDispatchRenderPassEncoderSetStencilReference,\n        ThreadDispatchRenderPassEncoderSetVertexBuffer,\n        ThreadDispatchRenderPassEncoderSetViewport,\n        ThreadDispatchRenderPassEncoderWriteTimestamp,\n        ThreadDispatchRenderPassEncoderAddRef,\n        ThreadDispatchRenderPassEncoderRelease,\n        ThreadDispatchRenderPipelineGetBindGroupLayout,\n        ThreadDispatchRenderPipelineSetLabel,\n        ThreadDispatchRenderPipelineAddRef,\n        ThreadDispatchRenderPipelineRelease,\n        ThreadDispatchSamplerSetLabel,\n        ThreadDispatchSamplerAddRef,\n        ThreadDispatchSamplerRelease,\n        ThreadDispatchShaderModuleGetCompilationInfo,\n        ThreadDispatchShaderModuleGetCompilationInfo2,\n        ThreadDispatchShaderModuleGetCompilationInfoF,\n        ThreadDispatchShaderModuleSetLabel,\n        ThreadDispatchShaderModuleAddRef,\n        ThreadDispatchShaderModuleRelease,\n        ThreadDispatchSharedBufferMemoryBeginAccess,\n        ThreadDispatchSharedBufferMemoryCreateBuffer,\n        ThreadDispatchSharedBufferMemoryEndAccess,\n        ThreadDispatchSharedBufferMemoryGetProperties,\n        ThreadDispatchSharedBufferMemoryIsDeviceLost,\n        ThreadDispatchSharedBufferMemorySetLabel,\n        ThreadDispatchSharedBufferMemoryAddRef,\n        ThreadDispatchSharedBufferMemoryRelease,\n        ThreadDispatchSharedFenceExportInfo,\n        ThreadDispatchSharedFenceAddRef,\n        ThreadDispatchSharedFenceRelease,\n        ThreadDispatchSharedTextureMemoryBeginAccess,\n        ThreadDispatchSharedTextureMemoryCreateTexture,\n        ThreadDispatchSharedTextureMemoryEndAccess,\n        ThreadDispatchSharedTextureMemoryGetProperties,\n        ThreadDispatchSharedTextureMemoryIsDeviceLost,\n        ThreadDispatchSharedTextureMemorySetLabel,\n        ThreadDispatchSharedTextureMemoryAddRef,\n        ThreadDispatchSharedTextureMemoryRelease,\n        ThreadDispatchSurfaceConfigure,\n        ThreadDispatchSurfaceGetCapabilities,\n        ThreadDispatchSurfaceGetCurrentTexture,\n        ThreadDispatchSurfacePresent,\n        ThreadDispatchSurfaceSetLabel,\n        ThreadDispatchSurfaceUnconfigure,\n        ThreadDispatchSurfaceAddRef,\n        ThreadDispatchSurfaceRelease,\n        ThreadDispatchTextureCreateErrorView,\n        ThreadDispatchTextureCreateView,\n        ThreadDispatchTextureDestroy,\n        ThreadDispatchTextureGetDepthOrArrayLayers,\n        ThreadDispatchTextureGetDimension,\n        ThreadDispatchTextureGetFormat,\n        ThreadDispatchTextureGetHeight,\n        ThreadDispatchTextureGetMipLevelCount,\n        ThreadDispatchTextureGetSampleCount,\n        ThreadDispatchTextureGetUsage,\n        ThreadDispatchTextureGetWidth,\n        ThreadDispatchTextureSetLabel,\n        ThreadDispatchTextureAddRef,\n        ThreadDispatchTextureRelease,\n        ThreadDispatchTextureViewSetLabel,\n        ThreadDispatchTextureViewAddRef,\n        ThreadDispatchTextureViewRelease,\n    };\n}\n"}