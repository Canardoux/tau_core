// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_descriptor.proto

#include "protos/perfetto/trace/track_event/track_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TrackDescriptor::TrackDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.process_)*/nullptr
  , /*decltype(_impl_.thread_)*/nullptr
  , /*decltype(_impl_.chrome_process_)*/nullptr
  , /*decltype(_impl_.chrome_thread_)*/nullptr
  , /*decltype(_impl_.counter_)*/nullptr
  , /*decltype(_impl_.uuid_)*/uint64_t{0u}
  , /*decltype(_impl_.parent_uuid_)*/uint64_t{0u}
  , /*decltype(_impl_.disallow_merging_with_system_tracks_)*/false
  , /*decltype(_impl_.child_ordering_)*/0
  , /*decltype(_impl_.sibling_order_rank_)*/0
  , /*decltype(_impl_.static_or_dynamic_name_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TrackDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackDescriptorDefaultTypeInternal() {}
  union {
    TrackDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackDescriptorDefaultTypeInternal _TrackDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool TrackDescriptor_ChildTracksOrdering_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrackDescriptor_ChildTracksOrdering_strings[4] = {};

static const char TrackDescriptor_ChildTracksOrdering_names[] =
  "CHRONOLOGICAL"
  "EXPLICIT"
  "LEXICOGRAPHIC"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TrackDescriptor_ChildTracksOrdering_entries[] = {
  { {TrackDescriptor_ChildTracksOrdering_names + 0, 13}, 2 },
  { {TrackDescriptor_ChildTracksOrdering_names + 13, 8}, 3 },
  { {TrackDescriptor_ChildTracksOrdering_names + 21, 13}, 1 },
  { {TrackDescriptor_ChildTracksOrdering_names + 34, 7}, 0 },
};

static const int TrackDescriptor_ChildTracksOrdering_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  2, // 1 -> LEXICOGRAPHIC
  0, // 2 -> CHRONOLOGICAL
  1, // 3 -> EXPLICIT
};

const std::string& TrackDescriptor_ChildTracksOrdering_Name(
    TrackDescriptor_ChildTracksOrdering value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TrackDescriptor_ChildTracksOrdering_entries,
          TrackDescriptor_ChildTracksOrdering_entries_by_number,
          4, TrackDescriptor_ChildTracksOrdering_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TrackDescriptor_ChildTracksOrdering_entries,
      TrackDescriptor_ChildTracksOrdering_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TrackDescriptor_ChildTracksOrdering_strings[idx].get();
}
bool TrackDescriptor_ChildTracksOrdering_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackDescriptor_ChildTracksOrdering* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TrackDescriptor_ChildTracksOrdering_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<TrackDescriptor_ChildTracksOrdering>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrackDescriptor_ChildTracksOrdering TrackDescriptor::UNKNOWN;
constexpr TrackDescriptor_ChildTracksOrdering TrackDescriptor::LEXICOGRAPHIC;
constexpr TrackDescriptor_ChildTracksOrdering TrackDescriptor::CHRONOLOGICAL;
constexpr TrackDescriptor_ChildTracksOrdering TrackDescriptor::EXPLICIT;
constexpr TrackDescriptor_ChildTracksOrdering TrackDescriptor::ChildTracksOrdering_MIN;
constexpr TrackDescriptor_ChildTracksOrdering TrackDescriptor::ChildTracksOrdering_MAX;
constexpr int TrackDescriptor::ChildTracksOrdering_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TrackDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackDescriptor>()._impl_._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parent_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::perfetto::protos::ProcessDescriptor& process(const TrackDescriptor* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::ChromeProcessDescriptor& chrome_process(const TrackDescriptor* msg);
  static void set_has_chrome_process(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::ThreadDescriptor& thread(const TrackDescriptor* msg);
  static void set_has_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::ChromeThreadDescriptor& chrome_thread(const TrackDescriptor* msg);
  static void set_has_chrome_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::CounterDescriptor& counter(const TrackDescriptor* msg);
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disallow_merging_with_system_tracks(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_child_ordering(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sibling_order_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::perfetto::protos::ProcessDescriptor&
TrackDescriptor::_Internal::process(const TrackDescriptor* msg) {
  return *msg->_impl_.process_;
}
const ::perfetto::protos::ChromeProcessDescriptor&
TrackDescriptor::_Internal::chrome_process(const TrackDescriptor* msg) {
  return *msg->_impl_.chrome_process_;
}
const ::perfetto::protos::ThreadDescriptor&
TrackDescriptor::_Internal::thread(const TrackDescriptor* msg) {
  return *msg->_impl_.thread_;
}
const ::perfetto::protos::ChromeThreadDescriptor&
TrackDescriptor::_Internal::chrome_thread(const TrackDescriptor* msg) {
  return *msg->_impl_.chrome_thread_;
}
const ::perfetto::protos::CounterDescriptor&
TrackDescriptor::_Internal::counter(const TrackDescriptor* msg) {
  return *msg->_impl_.counter_;
}
void TrackDescriptor::clear_process() {
  if (_impl_.process_ != nullptr) _impl_.process_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrackDescriptor::clear_chrome_process() {
  if (_impl_.chrome_process_ != nullptr) _impl_.chrome_process_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TrackDescriptor::clear_thread() {
  if (_impl_.thread_ != nullptr) _impl_.thread_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TrackDescriptor::clear_chrome_thread() {
  if (_impl_.chrome_thread_ != nullptr) _impl_.chrome_thread_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TrackDescriptor::clear_counter() {
  if (_impl_.counter_ != nullptr) _impl_.counter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
TrackDescriptor::TrackDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrackDescriptor)
}
TrackDescriptor::TrackDescriptor(const TrackDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TrackDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.process_){nullptr}
    , decltype(_impl_.thread_){nullptr}
    , decltype(_impl_.chrome_process_){nullptr}
    , decltype(_impl_.chrome_thread_){nullptr}
    , decltype(_impl_.counter_){nullptr}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.parent_uuid_){}
    , decltype(_impl_.disallow_merging_with_system_tracks_){}
    , decltype(_impl_.child_ordering_){}
    , decltype(_impl_.sibling_order_rank_){}
    , decltype(_impl_.static_or_dynamic_name_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_process()) {
    _this->_impl_.process_ = new ::perfetto::protos::ProcessDescriptor(*from._impl_.process_);
  }
  if (from._internal_has_thread()) {
    _this->_impl_.thread_ = new ::perfetto::protos::ThreadDescriptor(*from._impl_.thread_);
  }
  if (from._internal_has_chrome_process()) {
    _this->_impl_.chrome_process_ = new ::perfetto::protos::ChromeProcessDescriptor(*from._impl_.chrome_process_);
  }
  if (from._internal_has_chrome_thread()) {
    _this->_impl_.chrome_thread_ = new ::perfetto::protos::ChromeThreadDescriptor(*from._impl_.chrome_thread_);
  }
  if (from._internal_has_counter()) {
    _this->_impl_.counter_ = new ::perfetto::protos::CounterDescriptor(*from._impl_.counter_);
  }
  ::memcpy(&_impl_.uuid_, &from._impl_.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sibling_order_rank_) -
    reinterpret_cast<char*>(&_impl_.uuid_)) + sizeof(_impl_.sibling_order_rank_));
  clear_has_static_or_dynamic_name();
  switch (from.static_or_dynamic_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case kStaticName: {
      _this->_internal_set_static_name(from._internal_static_name());
      break;
    }
    case kAtraceName: {
      _this->_internal_set_atrace_name(from._internal_atrace_name());
      break;
    }
    case STATIC_OR_DYNAMIC_NAME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackDescriptor)
}

inline void TrackDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.process_){nullptr}
    , decltype(_impl_.thread_){nullptr}
    , decltype(_impl_.chrome_process_){nullptr}
    , decltype(_impl_.chrome_thread_){nullptr}
    , decltype(_impl_.counter_){nullptr}
    , decltype(_impl_.uuid_){uint64_t{0u}}
    , decltype(_impl_.parent_uuid_){uint64_t{0u}}
    , decltype(_impl_.disallow_merging_with_system_tracks_){false}
    , decltype(_impl_.child_ordering_){0}
    , decltype(_impl_.sibling_order_rank_){0}
    , decltype(_impl_.static_or_dynamic_name_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_static_or_dynamic_name();
}

TrackDescriptor::~TrackDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.process_;
  if (this != internal_default_instance()) delete _impl_.thread_;
  if (this != internal_default_instance()) delete _impl_.chrome_process_;
  if (this != internal_default_instance()) delete _impl_.chrome_thread_;
  if (this != internal_default_instance()) delete _impl_.counter_;
  if (has_static_or_dynamic_name()) {
    clear_static_or_dynamic_name();
  }
}

void TrackDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackDescriptor::clear_static_or_dynamic_name() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackDescriptor)
  switch (static_or_dynamic_name_case()) {
    case kName: {
      _impl_.static_or_dynamic_name_.name_.Destroy();
      break;
    }
    case kStaticName: {
      _impl_.static_or_dynamic_name_.static_name_.Destroy();
      break;
    }
    case kAtraceName: {
      _impl_.static_or_dynamic_name_.atrace_name_.Destroy();
      break;
    }
    case STATIC_OR_DYNAMIC_NAME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STATIC_OR_DYNAMIC_NAME_NOT_SET;
}


void TrackDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.process_ != nullptr);
      _impl_.process_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.thread_ != nullptr);
      _impl_.thread_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.chrome_process_ != nullptr);
      _impl_.chrome_process_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.chrome_thread_ != nullptr);
      _impl_.chrome_thread_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.counter_ != nullptr);
      _impl_.counter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.disallow_merging_with_system_tracks_) -
        reinterpret_cast<char*>(&_impl_.uuid_)) + sizeof(_impl_.disallow_merging_with_system_tracks_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.child_ordering_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sibling_order_rank_) -
        reinterpret_cast<char*>(&_impl_.child_ordering_)) + sizeof(_impl_.sibling_order_rank_));
  }
  clear_static_or_dynamic_name();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrackDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uuid(&has_bits);
          _impl_.uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProcessDescriptor process = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ThreadDescriptor thread = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_thread(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 parent_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_parent_uuid(&has_bits);
          _impl_.parent_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_process(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_thread(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.CounterDescriptor counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disallow_merging_with_system_tracks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_disallow_merging_with_system_tracks(&has_bits);
          _impl_.disallow_merging_with_system_tracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string static_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_static_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackDescriptor.ChildTracksOrdering child_ordering = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrackDescriptor_ChildTracksOrdering_IsValid(val))) {
            _internal_set_child_ordering(static_cast<::perfetto::protos::TrackDescriptor_ChildTracksOrdering>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 sibling_order_rank = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_sibling_order_rank(&has_bits);
          _impl_.sibling_order_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string atrace_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_atrace_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrackDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 uuid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uuid(), target);
  }

  // string name = 2;
  if (_internal_has_name()) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .perfetto.protos.ProcessDescriptor process = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::process(this),
        _Internal::process(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ThreadDescriptor thread = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::thread(this),
        _Internal::thread(this).GetCachedSize(), target, stream);
  }

  // optional uint64 parent_uuid = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_parent_uuid(), target);
  }

  // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::chrome_process(this),
        _Internal::chrome_process(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::chrome_thread(this),
        _Internal::chrome_thread(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.CounterDescriptor counter = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::counter(this),
        _Internal::counter(this).GetCachedSize(), target, stream);
  }

  // optional bool disallow_merging_with_system_tracks = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_disallow_merging_with_system_tracks(), target);
  }

  // string static_name = 10;
  if (_internal_has_static_name()) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_static_name(), target);
  }

  // optional .perfetto.protos.TrackDescriptor.ChildTracksOrdering child_ordering = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_child_ordering(), target);
  }

  // optional int32 sibling_order_rank = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sibling_order_rank(), target);
  }

  // string atrace_name = 13;
  if (_internal_has_atrace_name()) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_atrace_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrackDescriptor)
  return target;
}

size_t TrackDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.ProcessDescriptor process = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.process_);
    }

    // optional .perfetto.protos.ThreadDescriptor thread = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.thread_);
    }

    // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_process_);
    }

    // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_thread_);
    }

    // optional .perfetto.protos.CounterDescriptor counter = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.counter_);
    }

    // optional uint64 uuid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uuid());
    }

    // optional uint64 parent_uuid = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_parent_uuid());
    }

    // optional bool disallow_merging_with_system_tracks = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .perfetto.protos.TrackDescriptor.ChildTracksOrdering child_ordering = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_child_ordering());
    }

    // optional int32 sibling_order_rank = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sibling_order_rank());
    }

  }
  switch (static_or_dynamic_name_case()) {
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    // string static_name = 10;
    case kStaticName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_static_name());
      break;
    }
    // string atrace_name = 13;
    case kAtraceName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_atrace_name());
      break;
    }
    case STATIC_OR_DYNAMIC_NAME_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrackDescriptor*>(
      &from));
}

void TrackDescriptor::MergeFrom(const TrackDescriptor& from) {
  TrackDescriptor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_process()->::perfetto::protos::ProcessDescriptor::MergeFrom(
          from._internal_process());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_thread()->::perfetto::protos::ThreadDescriptor::MergeFrom(
          from._internal_thread());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_chrome_process()->::perfetto::protos::ChromeProcessDescriptor::MergeFrom(
          from._internal_chrome_process());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_chrome_thread()->::perfetto::protos::ChromeThreadDescriptor::MergeFrom(
          from._internal_chrome_thread());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_counter()->::perfetto::protos::CounterDescriptor::MergeFrom(
          from._internal_counter());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.uuid_ = from._impl_.uuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.parent_uuid_ = from._impl_.parent_uuid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.disallow_merging_with_system_tracks_ = from._impl_.disallow_merging_with_system_tracks_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.child_ordering_ = from._impl_.child_ordering_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.sibling_order_rank_ = from._impl_.sibling_order_rank_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.static_or_dynamic_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case kStaticName: {
      _this->_internal_set_static_name(from._internal_static_name());
      break;
    }
    case kAtraceName: {
      _this->_internal_set_atrace_name(from._internal_atrace_name());
      break;
    }
    case STATIC_OR_DYNAMIC_NAME_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrackDescriptor::CopyFrom(const TrackDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackDescriptor::IsInitialized() const {
  return true;
}

void TrackDescriptor::InternalSwap(TrackDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackDescriptor, _impl_.sibling_order_rank_)
      + sizeof(TrackDescriptor::_impl_.sibling_order_rank_)
      - PROTOBUF_FIELD_OFFSET(TrackDescriptor, _impl_.process_)>(
          reinterpret_cast<char*>(&_impl_.process_),
          reinterpret_cast<char*>(&other->_impl_.process_));
  swap(_impl_.static_or_dynamic_name_, other->_impl_.static_or_dynamic_name_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string TrackDescriptor::GetTypeName() const {
  return "perfetto.protos.TrackDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::TrackDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrackDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
