// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/windowmanager_config.proto

#include "protos/perfetto/config/android/windowmanager_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR WindowManagerConfig::WindowManagerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.log_frequency_)*/0
  , /*decltype(_impl_.log_level_)*/0} {}
struct WindowManagerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WindowManagerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WindowManagerConfigDefaultTypeInternal() {}
  union {
    WindowManagerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WindowManagerConfigDefaultTypeInternal _WindowManagerConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool WindowManagerConfig_LogFrequency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WindowManagerConfig_LogFrequency_strings[4] = {};

static const char WindowManagerConfig_LogFrequency_names[] =
  "LOG_FREQUENCY_FRAME"
  "LOG_FREQUENCY_SINGLE_DUMP"
  "LOG_FREQUENCY_TRANSACTION"
  "LOG_FREQUENCY_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WindowManagerConfig_LogFrequency_entries[] = {
  { {WindowManagerConfig_LogFrequency_names + 0, 19}, 1 },
  { {WindowManagerConfig_LogFrequency_names + 19, 25}, 3 },
  { {WindowManagerConfig_LogFrequency_names + 44, 25}, 2 },
  { {WindowManagerConfig_LogFrequency_names + 69, 25}, 0 },
};

static const int WindowManagerConfig_LogFrequency_entries_by_number[] = {
  3, // 0 -> LOG_FREQUENCY_UNSPECIFIED
  0, // 1 -> LOG_FREQUENCY_FRAME
  2, // 2 -> LOG_FREQUENCY_TRANSACTION
  1, // 3 -> LOG_FREQUENCY_SINGLE_DUMP
};

const std::string& WindowManagerConfig_LogFrequency_Name(
    WindowManagerConfig_LogFrequency value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WindowManagerConfig_LogFrequency_entries,
          WindowManagerConfig_LogFrequency_entries_by_number,
          4, WindowManagerConfig_LogFrequency_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WindowManagerConfig_LogFrequency_entries,
      WindowManagerConfig_LogFrequency_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WindowManagerConfig_LogFrequency_strings[idx].get();
}
bool WindowManagerConfig_LogFrequency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WindowManagerConfig_LogFrequency* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WindowManagerConfig_LogFrequency_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WindowManagerConfig_LogFrequency>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WindowManagerConfig_LogFrequency WindowManagerConfig::LOG_FREQUENCY_UNSPECIFIED;
constexpr WindowManagerConfig_LogFrequency WindowManagerConfig::LOG_FREQUENCY_FRAME;
constexpr WindowManagerConfig_LogFrequency WindowManagerConfig::LOG_FREQUENCY_TRANSACTION;
constexpr WindowManagerConfig_LogFrequency WindowManagerConfig::LOG_FREQUENCY_SINGLE_DUMP;
constexpr WindowManagerConfig_LogFrequency WindowManagerConfig::LogFrequency_MIN;
constexpr WindowManagerConfig_LogFrequency WindowManagerConfig::LogFrequency_MAX;
constexpr int WindowManagerConfig::LogFrequency_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WindowManagerConfig_LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WindowManagerConfig_LogLevel_strings[4] = {};

static const char WindowManagerConfig_LogLevel_names[] =
  "LOG_LEVEL_CRITICAL"
  "LOG_LEVEL_DEBUG"
  "LOG_LEVEL_UNSPECIFIED"
  "LOG_LEVEL_VERBOSE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WindowManagerConfig_LogLevel_entries[] = {
  { {WindowManagerConfig_LogLevel_names + 0, 18}, 3 },
  { {WindowManagerConfig_LogLevel_names + 18, 15}, 2 },
  { {WindowManagerConfig_LogLevel_names + 33, 21}, 0 },
  { {WindowManagerConfig_LogLevel_names + 54, 17}, 1 },
};

static const int WindowManagerConfig_LogLevel_entries_by_number[] = {
  2, // 0 -> LOG_LEVEL_UNSPECIFIED
  3, // 1 -> LOG_LEVEL_VERBOSE
  1, // 2 -> LOG_LEVEL_DEBUG
  0, // 3 -> LOG_LEVEL_CRITICAL
};

const std::string& WindowManagerConfig_LogLevel_Name(
    WindowManagerConfig_LogLevel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WindowManagerConfig_LogLevel_entries,
          WindowManagerConfig_LogLevel_entries_by_number,
          4, WindowManagerConfig_LogLevel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WindowManagerConfig_LogLevel_entries,
      WindowManagerConfig_LogLevel_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WindowManagerConfig_LogLevel_strings[idx].get();
}
bool WindowManagerConfig_LogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WindowManagerConfig_LogLevel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WindowManagerConfig_LogLevel_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WindowManagerConfig_LogLevel>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WindowManagerConfig_LogLevel WindowManagerConfig::LOG_LEVEL_UNSPECIFIED;
constexpr WindowManagerConfig_LogLevel WindowManagerConfig::LOG_LEVEL_VERBOSE;
constexpr WindowManagerConfig_LogLevel WindowManagerConfig::LOG_LEVEL_DEBUG;
constexpr WindowManagerConfig_LogLevel WindowManagerConfig::LOG_LEVEL_CRITICAL;
constexpr WindowManagerConfig_LogLevel WindowManagerConfig::LogLevel_MIN;
constexpr WindowManagerConfig_LogLevel WindowManagerConfig::LogLevel_MAX;
constexpr int WindowManagerConfig::LogLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WindowManagerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowManagerConfig>()._impl_._has_bits_);
  static void set_has_log_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_log_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WindowManagerConfig::WindowManagerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.WindowManagerConfig)
}
WindowManagerConfig::WindowManagerConfig(const WindowManagerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  WindowManagerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_frequency_){}
    , decltype(_impl_.log_level_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.log_frequency_, &from._impl_.log_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.log_level_) -
    reinterpret_cast<char*>(&_impl_.log_frequency_)) + sizeof(_impl_.log_level_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WindowManagerConfig)
}

inline void WindowManagerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_frequency_){0}
    , decltype(_impl_.log_level_){0}
  };
}

WindowManagerConfig::~WindowManagerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WindowManagerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WindowManagerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WindowManagerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WindowManagerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WindowManagerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.log_frequency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.log_level_) -
        reinterpret_cast<char*>(&_impl_.log_frequency_)) + sizeof(_impl_.log_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WindowManagerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.WindowManagerConfig.LogFrequency log_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::WindowManagerConfig_LogFrequency_IsValid(val))) {
            _internal_set_log_frequency(static_cast<::perfetto::protos::WindowManagerConfig_LogFrequency>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.WindowManagerConfig.LogLevel log_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::WindowManagerConfig_LogLevel_IsValid(val))) {
            _internal_set_log_level(static_cast<::perfetto::protos::WindowManagerConfig_LogLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WindowManagerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.WindowManagerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.WindowManagerConfig.LogFrequency log_frequency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_frequency(), target);
  }

  // optional .perfetto.protos.WindowManagerConfig.LogLevel log_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_log_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.WindowManagerConfig)
  return target;
}

size_t WindowManagerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WindowManagerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.WindowManagerConfig.LogFrequency log_frequency = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_log_frequency());
    }

    // optional .perfetto.protos.WindowManagerConfig.LogLevel log_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_log_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowManagerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WindowManagerConfig*>(
      &from));
}

void WindowManagerConfig::MergeFrom(const WindowManagerConfig& from) {
  WindowManagerConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WindowManagerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.log_frequency_ = from._impl_.log_frequency_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.log_level_ = from._impl_.log_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WindowManagerConfig::CopyFrom(const WindowManagerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WindowManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowManagerConfig::IsInitialized() const {
  return true;
}

void WindowManagerConfig::InternalSwap(WindowManagerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowManagerConfig, _impl_.log_level_)
      + sizeof(WindowManagerConfig::_impl_.log_level_)
      - PROTOBUF_FIELD_OFFSET(WindowManagerConfig, _impl_.log_frequency_)>(
          reinterpret_cast<char*>(&_impl_.log_frequency_),
          reinterpret_cast<char*>(&other->_impl_.log_frequency_));
}

std::string WindowManagerConfig::GetTypeName() const {
  return "perfetto.protos.WindowManagerConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::WindowManagerConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::WindowManagerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::WindowManagerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
