{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/source_frame/XMLView.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as UI from '../../legacy.js';\n\nimport xmlTreeStyles from './xmlTree.css.legacy.js';\nimport xmlViewStyles from './xmlView.css.legacy.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to find an item\n   */\n  find: 'Find',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/source_frame/XMLView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class XMLView extends UI.Widget.Widget implements UI.SearchableView.Searchable {\n  private readonly treeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  private searchableView!: UI.SearchableView.SearchableView|null;\n  private currentSearchFocusIndex: number;\n  private currentSearchTreeElements: XMLViewNode[];\n  private searchConfig!: UI.SearchableView.SearchConfig|null;\n\n  constructor(parsedXML: Document) {\n    super(true);\n    this.registerRequiredCSS(xmlViewStyles);\n    this.contentElement.classList.add('shadow-xml-view', 'source-code');\n    this.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    this.treeOutline.registerRequiredCSS(xmlTreeStyles);\n    this.contentElement.appendChild(this.treeOutline.element);\n    this.currentSearchFocusIndex = 0;\n    this.currentSearchTreeElements = [];\n\n    XMLViewNode.populate(this.treeOutline, parsedXML, this);\n    const firstChild = this.treeOutline.firstChild();\n    if (firstChild) {\n      firstChild.select(true /* omitFocus */, false /* selectedByUser */);\n    }\n  }\n\n  static createSearchableView(parsedXML: Document): UI.SearchableView.SearchableView {\n    const xmlView = new XMLView(parsedXML);\n    const searchableView = new UI.SearchableView.SearchableView(xmlView, null);\n    searchableView.setPlaceholder(i18nString(UIStrings.find));\n    xmlView.searchableView = searchableView;\n    xmlView.show(searchableView.element);\n    return searchableView;\n  }\n\n  static parseXML(text: string, mimeType: string): Document|null {\n    let parsedXML;\n    try {\n      switch (mimeType) {\n        case 'application/xhtml+xml':\n        case 'application/xml':\n        case 'image/svg+xml':\n        case 'text/html':\n        case 'text/xml':\n          parsedXML = (new DOMParser()).parseFromString(text, mimeType);\n      }\n    } catch (e) {\n      return null;\n    }\n    if (!parsedXML || parsedXML.body) {\n      return null;\n    }\n    return parsedXML;\n  }\n\n  private jumpToMatch(index: number, shouldJump: boolean): void {\n    if (!this.searchConfig) {\n      return;\n    }\n    const {regex} = this.searchConfig.toSearchRegex(true);\n    const previousFocusElement = this.currentSearchTreeElements[this.currentSearchFocusIndex];\n    if (previousFocusElement) {\n      previousFocusElement.setSearchRegex(regex);\n    }\n\n    const newFocusElement = this.currentSearchTreeElements[index];\n    if (newFocusElement) {\n      this.updateSearchIndex(index);\n      if (shouldJump) {\n        newFocusElement.reveal(true);\n      }\n      newFocusElement.setSearchRegex(regex, UI.UIUtils.highlightedCurrentSearchResultClassName);\n    } else {\n      this.updateSearchIndex(0);\n    }\n  }\n\n  private updateSearchCount(count: number): void {\n    if (!this.searchableView) {\n      return;\n    }\n    this.searchableView.updateSearchMatchesCount(count);\n  }\n\n  private updateSearchIndex(index: number): void {\n    this.currentSearchFocusIndex = index;\n    if (!this.searchableView) {\n      return;\n    }\n    this.searchableView.updateCurrentMatchIndex(index);\n  }\n\n  innerPerformSearch(shouldJump: boolean, jumpBackwards?: boolean): void {\n    if (!this.searchConfig) {\n      return;\n    }\n    let newIndex: number = this.currentSearchFocusIndex;\n    const previousSearchFocusElement = this.currentSearchTreeElements[newIndex];\n    this.innerSearchCanceled();\n    this.currentSearchTreeElements = [];\n    const {regex} = this.searchConfig.toSearchRegex(true);\n\n    for (let element: (UI.TreeOutline.TreeElement|null) =\n             (this.treeOutline.rootElement() as UI.TreeOutline.TreeElement | null);\n         element; element = element.traverseNextTreeElement(false)) {\n      if (!(element instanceof XMLViewNode)) {\n        continue;\n      }\n      const hasMatch = element.setSearchRegex(regex);\n      if (hasMatch) {\n        this.currentSearchTreeElements.push(element);\n      }\n      if (previousSearchFocusElement === element) {\n        const currentIndex = this.currentSearchTreeElements.length - 1;\n        if (hasMatch || jumpBackwards) {\n          newIndex = currentIndex;\n        } else {\n          newIndex = currentIndex + 1;\n        }\n      }\n    }\n    this.updateSearchCount(this.currentSearchTreeElements.length);\n\n    if (!this.currentSearchTreeElements.length) {\n      this.updateSearchIndex(0);\n      return;\n    }\n    newIndex = Platform.NumberUtilities.mod(newIndex, this.currentSearchTreeElements.length);\n\n    this.jumpToMatch(newIndex, shouldJump);\n  }\n\n  private innerSearchCanceled(): void {\n    for (let element: (UI.TreeOutline.TreeElement|null) =\n             (this.treeOutline.rootElement() as UI.TreeOutline.TreeElement | null);\n         element; element = element.traverseNextTreeElement(false)) {\n      if (!(element instanceof XMLViewNode)) {\n        continue;\n      }\n      element.revertHighlightChanges();\n    }\n    this.updateSearchCount(0);\n    this.updateSearchIndex(0);\n  }\n\n  onSearchCanceled(): void {\n    this.searchConfig = null;\n    this.currentSearchTreeElements = [];\n    this.innerSearchCanceled();\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    this.searchConfig = searchConfig;\n    this.innerPerformSearch(shouldJump, jumpBackwards);\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.currentSearchTreeElements.length) {\n      return;\n    }\n\n    const newIndex =\n        Platform.NumberUtilities.mod(this.currentSearchFocusIndex + 1, this.currentSearchTreeElements.length);\n    this.jumpToMatch(newIndex, true);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.currentSearchTreeElements.length) {\n      return;\n    }\n\n    const newIndex =\n        Platform.NumberUtilities.mod(this.currentSearchFocusIndex - 1, this.currentSearchTreeElements.length);\n    this.jumpToMatch(newIndex, true);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n}\n\nexport class XMLViewNode extends UI.TreeOutline.TreeElement {\n  private readonly node: Node|ParentNode;\n  private readonly closeTag: boolean;\n  private highlightChanges: UI.UIUtils.HighlightChange[];\n  private readonly xmlView: XMLView;\n\n  constructor(node: Node|ParentNode, closeTag: boolean, xmlView: XMLView) {\n    super('', !closeTag && 'childElementCount' in node && Boolean(node.childElementCount));\n    this.node = node;\n    this.closeTag = closeTag;\n    this.selectable = true;\n    this.highlightChanges = [];\n    this.xmlView = xmlView;\n    this.updateTitle();\n  }\n\n  static populate(\n      root: UI.TreeOutline.TreeOutline|UI.TreeOutline.TreeElement, xmlNode: Node|ParentNode, xmlView: XMLView): void {\n    if (!(xmlNode instanceof Node)) {\n      return;\n    }\n    let node: (ChildNode|null) = xmlNode.firstChild;\n    while (node) {\n      const currentNode = node;\n      node = node.nextSibling;\n      const nodeType = currentNode.nodeType;\n      // ignore empty TEXT\n      if (nodeType === 3 && currentNode.nodeValue && currentNode.nodeValue.match(/\\s+/)) {\n        continue;\n      }\n      // ignore ATTRIBUTE, ENTITY_REFERENCE, ENTITY, DOCUMENT, DOCUMENT_TYPE, DOCUMENT_FRAGMENT, NOTATION\n      if ((nodeType !== 1) && (nodeType !== 3) && (nodeType !== 4) && (nodeType !== 7) && (nodeType !== 8)) {\n        continue;\n      }\n      root.appendChild(new XMLViewNode(currentNode, false, xmlView));\n    }\n  }\n\n  setSearchRegex(regex: RegExp|null, additionalCssClassName?: string): boolean {\n    this.revertHighlightChanges();\n    if (!regex) {\n      return false;\n    }\n    if (this.closeTag && this.parent && !this.parent.expanded) {\n      return false;\n    }\n    regex.lastIndex = 0;\n    let cssClasses = UI.UIUtils.highlightedSearchResultClassName;\n    if (additionalCssClassName) {\n      cssClasses += ' ' + additionalCssClassName;\n    }\n    if (!this.listItemElement.textContent) {\n      return false;\n    }\n    const content = this.listItemElement.textContent.replace(/\\xA0/g, ' ');\n    let match = regex.exec(content);\n    const ranges = [];\n    while (match) {\n      ranges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n      match = regex.exec(content);\n    }\n    if (ranges.length) {\n      UI.UIUtils.highlightRangesWithStyleClass(this.listItemElement, ranges, cssClasses, this.highlightChanges);\n    }\n    return Boolean(this.highlightChanges.length);\n  }\n\n  revertHighlightChanges(): void {\n    UI.UIUtils.revertDomChanges(this.highlightChanges);\n    this.highlightChanges = [];\n  }\n\n  private updateTitle(): void {\n    const node = this.node;\n    if (!('nodeType' in node)) {\n      return;\n    }\n    switch (node.nodeType) {\n      case 1: {  // ELEMENT\n        if (node instanceof Element) {\n          const tag = node.tagName;\n          if (this.closeTag) {\n            this.setTitle(['</' + tag + '>', 'shadow-xml-view-tag']);\n            return;\n          }\n          const titleItems = ['<' + tag, 'shadow-xml-view-tag'];\n          const attributes = node.attributes;\n          for (let i = 0; i < attributes.length; ++i) {\n            const attributeNode = attributes.item(i);\n            if (!attributeNode) {\n              return;\n            }\n            titleItems.push(\n                '\\xA0', 'shadow-xml-view-tag', attributeNode.name, 'shadow-xml-view-attribute-name', '=\"',\n                'shadow-xml-view-tag', attributeNode.value, 'shadow-xml-view-attribute-value', '\"',\n                'shadow-xml-view-tag');\n          }\n          if (!this.expanded) {\n            if (node.childElementCount) {\n              titleItems.push(\n                  '>', 'shadow-xml-view-tag', '\u2026', 'shadow-xml-view-comment', '</' + tag, 'shadow-xml-view-tag');\n            } else if (node.textContent) {\n              titleItems.push(\n                  '>', 'shadow-xml-view-tag', node.textContent, 'shadow-xml-view-text', '</' + tag,\n                  'shadow-xml-view-tag');\n            } else {\n              titleItems.push(' /', 'shadow-xml-view-tag');\n            }\n          }\n          titleItems.push('>', 'shadow-xml-view-tag');\n          this.setTitle(titleItems);\n          return;\n        }\n        return;\n      }\n      case 3: {  // TEXT\n        if (node.nodeValue) {\n          this.setTitle([node.nodeValue, 'shadow-xml-view-text']);\n        }\n        return;\n      }\n      case 4: {  // CDATA\n        if (node.nodeValue) {\n          this.setTitle([\n            '<![CDATA[',\n            'shadow-xml-view-cdata',\n            node.nodeValue,\n            'shadow-xml-view-text',\n            ']]>',\n            'shadow-xml-view-cdata',\n          ]);\n        }\n        return;\n      }\n      case 7: {  // PROCESSING_INSTRUCTION\n        if (node.nodeValue) {\n          this.setTitle(['<?' + node.nodeName + ' ' + node.nodeValue + '?>', 'shadow-xml-view-processing-instruction']);\n        }\n        return;\n      }\n      case 8: {  // COMMENT\n        this.setTitle(['<!--' + node.nodeValue + '-->', 'shadow-xml-view-comment']);\n        return;\n      }\n    }\n  }\n\n  private setTitle(items: string[]): void {\n    const titleFragment = document.createDocumentFragment();\n    for (let i = 0; i < items.length; i += 2) {\n      titleFragment.createChild('span', items[i + 1]).textContent = items[i];\n    }\n    this.title = titleFragment;\n    this.xmlView.innerPerformSearch(false, false);\n  }\n\n  override onattach(): void {\n    this.listItemElement.classList.toggle('shadow-xml-view-close-tag', this.closeTag);\n  }\n\n  override onexpand(): void {\n    this.updateTitle();\n  }\n\n  override oncollapse(): void {\n    this.updateTitle();\n  }\n\n  override async onpopulate(): Promise<void> {\n    XMLViewNode.populate(this, this.node, this.xmlView);\n    this.appendChild(new XMLViewNode(this.node, true, this.xmlView));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
