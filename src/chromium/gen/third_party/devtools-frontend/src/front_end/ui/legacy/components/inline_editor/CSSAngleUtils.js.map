{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/inline_editor/CSSAngleUtils.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as UI from '../../legacy.js';\n\nexport const CSSAngleRegex = /(?<value>[+-]?\\d*\\.?\\d+)(?<unit>deg|grad|rad|turn)/;\n\nexport const enum AngleUnit {\n  DEG = 'deg',\n  GRAD = 'grad',\n  RAD = 'rad',\n  TURN = 'turn',\n}\n\nexport interface Angle {\n  value: number;\n  unit: AngleUnit;\n}\n\nexport const parseText = (text: string): Angle|null => {\n  const result = text.match(CSSAngleRegex);\n  if (!result || !result.groups) {\n    return null;\n  }\n\n  return {\n    value: Number(result.groups.value),\n    unit: result.groups.unit as AngleUnit,\n  };\n};\n\nexport const getAngleFromRadians = (rad: number, targetUnit: AngleUnit): Angle => {\n  let value = rad;\n  switch (targetUnit) {\n    case AngleUnit.GRAD:\n      value = UI.Geometry.radiansToGradians(rad);\n      break;\n    case AngleUnit.DEG:\n      value = UI.Geometry.radiansToDegrees(rad);\n      break;\n    case AngleUnit.TURN:\n      value = UI.Geometry.radiansToTurns(rad);\n      break;\n  }\n\n  return {\n    value,\n    unit: targetUnit,\n  };\n};\n\nexport const getRadiansFromAngle = (angle: Angle): number => {\n  switch (angle.unit) {\n    case AngleUnit.DEG:\n      return UI.Geometry.degreesToRadians(angle.value);\n    case AngleUnit.GRAD:\n      return UI.Geometry.gradiansToRadians(angle.value);\n    case AngleUnit.TURN:\n      return UI.Geometry.turnsToRadians(angle.value);\n  }\n\n  return angle.value;\n};\n\nexport const get2DTranslationsForAngle = (angle: Angle, radius: number): {translateX: number, translateY: number} => {\n  const radian = getRadiansFromAngle(angle);\n  return {\n    translateX: Math.sin(radian) * radius,\n    translateY: -Math.cos(radian) * radius,\n  };\n};\n\nexport const roundAngleByUnit = (angle: Angle): Angle => {\n  let roundedValue = angle.value;\n\n  switch (angle.unit) {\n    case AngleUnit.DEG:\n    case AngleUnit.GRAD:\n      // Round to nearest whole unit.\n      roundedValue = Math.round(angle.value);\n      break;\n    case AngleUnit.RAD:\n      // Allow up to 4 decimals.\n      roundedValue = Math.round(angle.value * 10000) / 10000;\n      break;\n    case AngleUnit.TURN:\n      // Allow up to 2 decimals.\n      roundedValue = Math.round(angle.value * 100) / 100;\n      break;\n    default:\n      Platform.assertNever(angle.unit, `Unknown angle unit: ${angle.unit}`);\n  }\n\n  return {\n    value: roundedValue,\n    unit: angle.unit,\n  };\n};\n\nexport const getNextUnit = (currentUnit: AngleUnit): AngleUnit => {\n  switch (currentUnit) {\n    case AngleUnit.DEG:\n      return AngleUnit.GRAD;\n    case AngleUnit.GRAD:\n      return AngleUnit.RAD;\n    case AngleUnit.RAD:\n      return AngleUnit.TURN;\n    default:\n      return AngleUnit.DEG;\n  }\n};\n\nexport const convertAngleUnit = (angle: Angle, newUnit: AngleUnit): Angle => {\n  if (angle.unit === newUnit) {\n    return angle;\n  }\n  const radian = getRadiansFromAngle(angle);\n  return getAngleFromRadians(radian, newUnit);\n};\n\nexport const getNewAngleFromEvent = (angle: Angle, event: MouseEvent|KeyboardEvent): Angle|undefined => {\n  const direction = UI.UIUtils.getValueModificationDirection(event);\n  if (direction === null) {\n    return;\n  }\n  let diff = direction === 'Up' ? Math.PI / 180 : -Math.PI / 180;\n  if (event.shiftKey) {\n    diff *= 10;\n  }\n\n  const radian = getRadiansFromAngle(angle);\n  return getAngleFromRadians(radian + diff, angle.unit);\n};\n"],
  "mappings": "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",
  "names": ["AngleUnit"]
}
