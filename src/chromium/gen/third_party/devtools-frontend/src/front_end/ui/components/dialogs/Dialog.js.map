{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/dialogs/Dialog.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as WindowBoundsService from '../../../services/window_bounds/window_bounds.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport * as Buttons from '../buttons/buttons.js';\n\nimport dialogStyles from './dialog.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n\n  /**\n   * @description Title of close button for the shortcuts dialog.\n   */\n  close: 'Close',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('ui/components/dialogs/Dialog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst IS_DIALOG_SUPPORTED = 'HTMLDialogElement' in globalThis;\n\n// Height in pixels of the dialog's connector. The connector is represented as\n// as a diamond and the height corresponds to half the height of the diamond.\n// (the visible height is only half of the diamond).\nexport const CONNECTOR_HEIGHT = 10;\nconst CONNECTOR_WIDTH = 2 * CONNECTOR_HEIGHT;\n\n// The offset used by the dialog's animation as it slides in when opened.\nconst DIALOG_ANIMATION_OFFSET = 20;\n\nexport const DIALOG_SIDE_PADDING = 5;\nexport const DIALOG_VERTICAL_PADDING = 3;\n\n// If the content of the dialog cannot be completely shown because otherwise\n// the dialog would overflow the window, the dialog's max width and height are\n// set such that the dialog remains inside the visible bounds. In this cases\n// some extra, determined by this constant, is added so that the dialog's borders\n// remain clearly visible. This constant accounts for the padding of the dialog's\n// content (20 px) and a 5px gap left on each extreme of the dialog from the viewport.\nexport const DIALOG_PADDING_FROM_WINDOW = 3 * CONNECTOR_HEIGHT;\ninterface DialogData {\n  /**\n   * Position or point the dialog is shown relative to.\n   * If the dialog instance will be shown as a modal, set\n   * this property to MODAL.\n   */\n  origin: DialogOrigin;\n  position: DialogVerticalPosition;\n  /**\n   * Horizontal alignment of the dialog with respect to its origin.\n   * Center by default.\n   */\n  horizontalAlignment: DialogHorizontalAlignment;\n  /**\n   * Whether the connector from the dialog to its origin is shown.\n   */\n  showConnector: boolean;\n\n  /**\n   * Optional function used to the determine the x coordinate of the connector's\n   * end (tip of the triangle), relative to the viewport. If not defined, the x\n   * coordinate of the origin's center is used instead.\n   */\n  getConnectorCustomXPosition: (() => number)|null;\n\n  /**\n   * Optional function called when the dialog is shown.\n   */\n  dialogShownCallback: (() => unknown)|null;\n\n  /**\n   * Optional. Service that provides the window dimensions used for positioning the Dialog.\n   */\n  windowBoundsService: WindowBoundsService.WindowBoundsService.WindowBoundsService;\n  /**\n   * Whether the dialog is closed when the 'Escape' key is pressed. When true, the event is\n   * propagation is stopped.\n   */\n  closeOnESC: boolean;\n  /**\n   * Whether the dialog is closed when a scroll event is detected outside of the dialog's\n   * content. Defaults to true.\n   */\n  closeOnScroll: boolean;\n  /**\n   * Whether render a closed button, when it is clicked, close the dialog. Defaults to false.\n   */\n  closeButton: boolean;\n  /**\n   * The string used in the header row of the dialog.\n   */\n  dialogTitle: string;\n  /**\n   * Specifies a context for the visual element.\n   */\n  jslogContext: string;\n}\n\ntype DialogAnchor = HTMLElement|DOMRect|DOMPoint;\n\nexport const MODAL = 'MODAL';\n\nexport type DialogOrigin = DialogAnchor|null|(() => DialogAnchor)|typeof MODAL;\nexport class Dialog extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #renderBound = this.#render.bind(this);\n  readonly #forceDialogCloseInDevToolsBound = this.#forceDialogCloseInDevToolsMutation.bind(this);\n  readonly #handleScrollAttemptBound = this.#handleScrollAttempt.bind(this);\n  readonly #props: DialogData = {\n    origin: MODAL,\n    position: DialogVerticalPosition.BOTTOM,\n    horizontalAlignment: DialogHorizontalAlignment.CENTER,\n    showConnector: false,\n    getConnectorCustomXPosition: null,\n    dialogShownCallback: null,\n    windowBoundsService: WindowBoundsService.WindowBoundsService.WindowBoundsServiceImpl.instance(),\n    closeOnESC: true,\n    closeOnScroll: true,\n    closeButton: false,\n    dialogTitle: '',\n    jslogContext: '',\n  };\n\n  #dialog: HTMLDialogElement|null = null;\n  #isPendingShowDialog = false;\n  #isPendingCloseDialog = false;\n  #hitArea = new DOMRect(0, 0, 0, 0);\n  #dialogClientRect = new DOMRect(0, 0, 0, 0);\n  #bestVerticalPositionInternal: DialogVerticalPosition|null = null;\n  #bestHorizontalAlignment: DialogHorizontalAlignment|null = null;\n  readonly #devtoolsMutationObserver = new MutationObserver(this.#forceDialogCloseInDevToolsBound);\n  readonly #dialogResizeObserver = new ResizeObserver(this.#updateDialogBounds.bind(this));\n  #devToolsBoundingElement = this.windowBoundsService.getDevToolsBoundingElement();\n\n  // We bind here because we have to listen to keydowns on the entire window,\n  // not on the Dialog element itself. This is because if the user has the\n  // dialog open, but their focus is elsewhere, and they hit ESC, we should\n  // still close the dialog.\n  #onKeyDownBound = this.#onKeyDown.bind(this);\n\n  get showConnector(): boolean {\n    return this.#props.showConnector;\n  }\n\n  set showConnector(showConnector: boolean) {\n    this.#props.showConnector = showConnector;\n    this.#onStateChange();\n  }\n\n  get origin(): DialogOrigin {\n    return this.#props.origin;\n  }\n\n  set origin(origin: DialogOrigin) {\n    this.#props.origin = origin;\n    this.#onStateChange();\n  }\n\n  get position(): DialogVerticalPosition {\n    return this.#props.position;\n  }\n\n  set position(position: DialogVerticalPosition) {\n    this.#props.position = position;\n    this.#onStateChange();\n  }\n\n  get horizontalAlignment(): DialogHorizontalAlignment {\n    return this.#props.horizontalAlignment;\n  }\n\n  set horizontalAlignment(alignment: DialogHorizontalAlignment) {\n    this.#props.horizontalAlignment = alignment;\n    this.#onStateChange();\n  }\n\n  get windowBoundsService(): WindowBoundsService.WindowBoundsService.WindowBoundsService {\n    return this.#props.windowBoundsService;\n  }\n\n  set windowBoundsService(windowBoundsService: WindowBoundsService.WindowBoundsService.WindowBoundsService) {\n    this.#props.windowBoundsService = windowBoundsService;\n    this.#devToolsBoundingElement = this.windowBoundsService.getDevToolsBoundingElement();\n    this.#onStateChange();\n  }\n\n  get bestVerticalPosition(): DialogVerticalPosition|null {\n    return this.#bestVerticalPositionInternal;\n  }\n\n  get bestHorizontalAlignment(): DialogHorizontalAlignment|null {\n    return this.#bestHorizontalAlignment;\n  }\n  get getConnectorCustomXPosition(): (() => number)|null {\n    return this.#props.getConnectorCustomXPosition;\n  }\n\n  set getConnectorCustomXPosition(connectorXPosition: (() => number)|null) {\n    this.#props.getConnectorCustomXPosition = connectorXPosition;\n    this.#onStateChange();\n  }\n\n  get dialogShownCallback(): (() => unknown)|null {\n    return this.#props.dialogShownCallback;\n  }\n\n  get jslogContext(): string {\n    return this.#props.jslogContext;\n  }\n\n  set dialogShownCallback(dialogShownCallback: (() => unknown)|null) {\n    this.#props.dialogShownCallback = dialogShownCallback;\n    this.#onStateChange();\n  }\n\n  set closeOnESC(closeOnESC: boolean) {\n    this.#props.closeOnESC = closeOnESC;\n    this.#onStateChange();\n  }\n\n  set closeOnScroll(closeOnScroll: boolean) {\n    this.#props.closeOnScroll = closeOnScroll;\n    this.#onStateChange();\n  }\n\n  set closeButton(closeButton: boolean) {\n    this.#props.closeButton = closeButton;\n    this.#onStateChange();\n  }\n\n  set dialogTitle(dialogTitle: string) {\n    this.#props.dialogTitle = dialogTitle;\n    this.#onStateChange();\n  }\n\n  set jslogContext(jslogContext: string) {\n    this.#props.jslogContext = jslogContext;\n    this.#onStateChange();\n  }\n\n  #updateDialogBounds(): void {\n    this.#dialogClientRect = this.#getDialog().getBoundingClientRect();\n  }\n\n  #onStateChange(): void {\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [dialogStyles];\n\n    window.addEventListener('resize', this.#forceDialogCloseInDevToolsBound);\n    this.#devtoolsMutationObserver.observe(this.#devToolsBoundingElement, {childList: true, subtree: true});\n    this.#devToolsBoundingElement.addEventListener('wheel', this.#handleScrollAttemptBound);\n    this.style.setProperty('--dialog-padding', '0');\n    this.style.setProperty('--override-content-box-shadow', 'none');\n    this.style.setProperty('--dialog-display', IS_DIALOG_SUPPORTED ? 'block' : 'none');\n    this.style.setProperty('--override-dialog-content-border', `${CONNECTOR_HEIGHT}px solid transparent`);\n    this.style.setProperty('--dialog-padding', `${DIALOG_VERTICAL_PADDING}px ${DIALOG_SIDE_PADDING}px`);\n  }\n\n  disconnectedCallback(): void {\n    window.removeEventListener('resize', this.#forceDialogCloseInDevToolsBound);\n\n    this.#devToolsBoundingElement.removeEventListener('wheel', this.#handleScrollAttemptBound);\n    this.#devtoolsMutationObserver.disconnect();\n    this.#dialogResizeObserver.disconnect();\n  }\n\n  #getDialog(): HTMLDialogElement {\n    if (!this.#dialog) {\n      this.#dialog = this.#shadow.querySelector('dialog');\n      if (!this.#dialog) {\n        throw new Error('Dialog not found');\n      }\n      this.#dialogResizeObserver.observe(this.#dialog);\n    }\n    return this.#dialog;\n  }\n\n  getHitArea(): DOMRect {\n    return this.#hitArea;\n  }\n\n  async setDialogVisible(show: boolean): Promise<void> {\n    if (show) {\n      await this.#showDialog();\n      return;\n    }\n    this.#closeDialog();\n  }\n\n  async #handlePointerEvent(evt: MouseEvent|PointerEvent): Promise<void> {\n    evt.stopPropagation();\n    // If the user uses the keyboard to interact with an element within the\n    // dialog, it will trigger a pointer event (for example, the user might use\n    // their spacebar to \"click\" on a form input element). In that case the\n    // pointerType will be an empty string, rather than `mouse`, `pen` or\n    // `touch`. In this instance, we early return, because we only need to\n    // worry about clicks outside of the dialog. Once the dialog is open, the\n    // user can only use the keyboard to navigate within the dialog; so we\n    // don't have to concern ourselves with keyboard events that occur outside\n    // the dialog's bounds.\n    if (evt instanceof PointerEvent && evt.pointerType === '') {\n      return;\n    }\n\n    const eventWasInDialogContent = this.#mouseEventWasInDialogContent(evt);\n    const eventWasInHitArea = this.#mouseEventWasInHitArea(evt);\n    if (eventWasInDialogContent) {\n      return;\n    }\n    if (evt.type === 'pointermove') {\n      if (eventWasInHitArea) {\n        return;\n      }\n      this.dispatchEvent(new PointerLeftDialogEvent());\n      return;\n    }\n    this.dispatchEvent(new ClickOutsideDialogEvent());\n  }\n\n  #mouseEventWasInDialogContent(evt: MouseEvent): boolean {\n    const dialogBounds = this.#dialogClientRect;\n\n    let animationOffSetValue = this.bestVerticalPosition === DialogVerticalPosition.BOTTOM ?\n        DIALOG_ANIMATION_OFFSET :\n        -1 * DIALOG_ANIMATION_OFFSET;\n    if (this.#props.origin === MODAL) {\n      // When shown as a modal, the dialog is not animated\n      animationOffSetValue = 0;\n    }\n    const eventWasDialogContentX =\n        evt.pageX >= dialogBounds.left && evt.pageX <= dialogBounds.left + dialogBounds.width;\n    const eventWasDialogContentY = evt.pageY >= dialogBounds.top + animationOffSetValue &&\n        evt.pageY <= dialogBounds.top + dialogBounds.height + animationOffSetValue;\n\n    return eventWasDialogContentX && eventWasDialogContentY;\n  }\n\n  #mouseEventWasInHitArea(evt: MouseEvent): boolean {\n    const hitAreaBounds = this.#hitArea;\n    const eventWasInHitAreaX = evt.pageX >= hitAreaBounds.left && evt.pageX <= hitAreaBounds.left + hitAreaBounds.width;\n    const eventWasInHitAreaY = evt.pageY >= hitAreaBounds.top && evt.pageY <= hitAreaBounds.top + hitAreaBounds.height;\n\n    return eventWasInHitAreaX && eventWasInHitAreaY;\n  }\n\n  #getCoordinatesFromDialogOrigin(origin: DialogOrigin): AnchorBounds {\n    if (!origin || origin === MODAL) {\n      throw new Error('Dialog origin is null');\n    }\n    const anchor = origin instanceof Function ? origin() : origin;\n    if (anchor instanceof DOMPoint) {\n      return {top: anchor.y, bottom: anchor.y, left: anchor.x, right: anchor.x};\n    }\n    if (anchor instanceof HTMLElement) {\n      return anchor.getBoundingClientRect();\n    }\n    return anchor;\n  }\n\n  #getBestHorizontalAlignment(anchorBounds: AnchorBounds, devtoolsBounds: DOMRect): DialogHorizontalAlignment {\n    if (devtoolsBounds.right - anchorBounds.left > anchorBounds.right - devtoolsBounds.left) {\n      return DialogHorizontalAlignment.LEFT;\n    }\n    return DialogHorizontalAlignment.RIGHT;\n  }\n\n  #getBestVerticalPosition(originBounds: AnchorBounds, dialogHeight: number, devtoolsBounds: DOMRect):\n      DialogVerticalPosition {\n    // If the dialog's full height doesn't fit at the bottom attempt to\n    // position it at the top. If it doesn't fit at the top either\n    // position it at the bottom and make the overflow scrollable.\n    if (originBounds.bottom + dialogHeight > devtoolsBounds.height &&\n        originBounds.top - dialogHeight > devtoolsBounds.top) {\n      return DialogVerticalPosition.TOP;\n    }\n    return DialogVerticalPosition.BOTTOM;\n  }\n\n  #positionDialog(): void {\n    if (!this.#props.origin) {\n      return;\n    }\n\n    this.#isPendingShowDialog = true;\n    void coordinator.read(() => {\n      // Fixed elements are positioned relative to the window, regardless if\n      // DevTools is docked. As such, if DevTools is docked we must account for\n      // its offset relative to the window when positioning fixed elements.\n      // DevTools' effective offset can be determined using\n      // this.#devToolsBoundingElement.\n      const devtoolsBounds = this.#devToolsBoundingElement.getBoundingClientRect();\n      const devToolsWidth = devtoolsBounds.width;\n      const devToolsHeight = devtoolsBounds.height;\n      const devToolsLeft = devtoolsBounds.left;\n      const devToolsTop = devtoolsBounds.top;\n      const devToolsRight = devtoolsBounds.right;\n      if (this.#props.origin === MODAL) {\n        void coordinator.write(() => {\n          this.style.setProperty('--dialog-top', `${devToolsTop}px`);\n          this.style.setProperty('--dialog-left', `${devToolsLeft}px`);\n          this.style.setProperty('--dialog-margin', 'auto');\n          this.style.setProperty('--dialog-margin-left', 'auto');\n          this.style.setProperty('--dialog-margin-bottom', 'auto');\n          this.style.setProperty('--dialog-max-height', `${devToolsHeight - DIALOG_PADDING_FROM_WINDOW}px`);\n          this.style.setProperty('--dialog-max-width', `${devToolsWidth - DIALOG_PADDING_FROM_WINDOW}px`);\n          this.style.setProperty('--dialog-right', `${document.body.clientWidth - devToolsRight}px`);\n        });\n        return;\n      }\n      const anchor = this.#props.origin;\n      const absoluteAnchorBounds = this.#getCoordinatesFromDialogOrigin(anchor);\n      const {top: anchorTop, right: anchorRight, bottom: anchorBottom, left: anchorLeft} = absoluteAnchorBounds;\n      const originCenterX = (anchorLeft + anchorRight) / 2;\n      const hitAreaWidth = anchorRight - anchorLeft + CONNECTOR_HEIGHT;\n      const windowWidth = document.body.clientWidth;\n      const connectorFixedXValue =\n          this.#props.getConnectorCustomXPosition ? this.#props.getConnectorCustomXPosition() : originCenterX;\n      void coordinator.write(() => {\n        this.style.setProperty('--dialog-top', '0');\n\n        // Start by showing the dialog hidden to allow measuring its width.\n        const dialog = this.#getDialog();\n        dialog.style.visibility = 'hidden';\n        if (this.#isPendingShowDialog && !dialog.hasAttribute('open')) {\n          dialog.showModal();\n          this.setAttribute('open', '');\n          this.#isPendingShowDialog = false;\n        }\n        const {width: dialogWidth, height: dialogHeight} = dialog.getBoundingClientRect();\n        this.#bestHorizontalAlignment = this.#props.horizontalAlignment === DialogHorizontalAlignment.AUTO ?\n            this.#getBestHorizontalAlignment(absoluteAnchorBounds, devtoolsBounds) :\n            this.#props.horizontalAlignment;\n\n        this.#bestVerticalPositionInternal = this.#props.position === DialogVerticalPosition.AUTO ?\n            this.#getBestVerticalPosition(absoluteAnchorBounds, dialogHeight, devtoolsBounds) :\n            this.#props.position;\n        if (this.#bestHorizontalAlignment === DialogHorizontalAlignment.AUTO ||\n            this.#bestVerticalPositionInternal === DialogVerticalPosition.AUTO) {\n          return;\n        }\n        this.#hitArea.height = anchorBottom - anchorTop + (CONNECTOR_HEIGHT * (this.showConnector ? 2 : 1));\n        this.#hitArea.width = hitAreaWidth;\n        let connectorRelativeXValue = 0;\n        // If the connector is to be shown, the dialog needs a minimum width such that it covers\n        // the connector's width.\n        this.style.setProperty(\n            '--content-min-width',\n            `${connectorFixedXValue - anchorLeft + CONNECTOR_WIDTH + DIALOG_SIDE_PADDING * 2}px`);\n        this.style.setProperty('--dialog-left', 'auto');\n        this.style.setProperty('--dialog-right', 'auto');\n        this.style.setProperty('--dialog-margin', '0');\n        const offsetToCoverConnector = this.showConnector ? CONNECTOR_WIDTH * 3 / 4 : 0;\n        switch (this.#bestHorizontalAlignment) {\n          case DialogHorizontalAlignment.LEFT: {\n            // Position the dialog such that its left border is in line with that of its anchor.\n            // If this means the dialog's left border is out of DevTools bounds, move it to the right.\n            // Cap its width as needed so that the right border doesn't overflow.\n            const dialogLeft = Math.max(anchorLeft - offsetToCoverConnector, devToolsLeft);\n            const devtoolsRightBorderToDialogLeft = devToolsRight - dialogLeft;\n            const dialogMaxWidth = devtoolsRightBorderToDialogLeft - DIALOG_PADDING_FROM_WINDOW;\n            connectorRelativeXValue = connectorFixedXValue - dialogLeft - DIALOG_SIDE_PADDING;\n            this.style.setProperty('--dialog-left', `${dialogLeft}px`);\n            this.#hitArea.x = anchorLeft;\n            this.style.setProperty('--dialog-max-width', `${dialogMaxWidth}px`);\n            break;\n          }\n          case DialogHorizontalAlignment.RIGHT: {\n            // Position the dialog such that its right border is in line with that of its anchor.\n            // If this means the dialog's right border is out of DevTools bounds, move it to the left.\n            // Cap its width as needed so that the left border doesn't overflow.\n            const windowRightBorderToAnchorRight = windowWidth - anchorRight;\n            const windowRightBorderToDevToolsRight = windowWidth - devToolsRight;\n            const windowRightBorderToDialogRight =\n                Math.max(windowRightBorderToAnchorRight - offsetToCoverConnector, windowRightBorderToDevToolsRight);\n\n            const dialogRight = windowWidth - windowRightBorderToDialogRight;\n            const devtoolsLeftBorderToDialogRight = dialogRight - devToolsLeft;\n            const dialogMaxWidth = devtoolsLeftBorderToDialogRight - DIALOG_PADDING_FROM_WINDOW;\n            const dialogCappedWidth = Math.min(dialogMaxWidth, dialogWidth);\n\n            const dialogLeft = dialogRight - dialogCappedWidth;\n            connectorRelativeXValue = connectorFixedXValue - dialogLeft;\n\n            this.#hitArea.x = windowWidth - windowRightBorderToDialogRight - hitAreaWidth;\n            this.style.setProperty('--dialog-right', `${windowRightBorderToDialogRight}px`);\n            this.style.setProperty('--dialog-max-width', `${dialogMaxWidth}px`);\n            break;\n          }\n          case DialogHorizontalAlignment.CENTER: {\n            // Position the dialog aligned with its anchor's center as long as its borders don't overlap\n            // with those of DevTools. In case one border overlaps, move the dialog to the opposite side.\n            // In case both borders overlap, reduce its width to that of DevTools.\n            const dialogCappedWidth = Math.min(devToolsWidth - DIALOG_PADDING_FROM_WINDOW, dialogWidth);\n\n            let dialogLeft = Math.max(originCenterX - dialogCappedWidth * 0.5, devToolsLeft);\n            dialogLeft = Math.min(dialogLeft, devToolsRight - dialogCappedWidth);\n            connectorRelativeXValue = connectorFixedXValue - dialogLeft - DIALOG_SIDE_PADDING;\n            this.style.setProperty('--dialog-left', `${dialogLeft}px`);\n            this.#hitArea.x = originCenterX - hitAreaWidth * 0.5;\n            this.style.setProperty('--dialog-max-width', `${devToolsWidth - DIALOG_PADDING_FROM_WINDOW}px`);\n            break;\n          }\n          default:\n            Platform.assertNever(\n                this.#bestHorizontalAlignment, `Unknown alignment type: ${this.#bestHorizontalAlignment}`);\n        }\n        const visibleConnectorHeight = this.showConnector ? CONNECTOR_HEIGHT : 0;\n        const clipPathConnectorStartX = connectorRelativeXValue - CONNECTOR_WIDTH / 2;\n        const clipPathConnectorEndX = connectorRelativeXValue + CONNECTOR_WIDTH / 2;\n        let [p1, p2, p3, p4, p5, p6, p7, p8, p9] = ['', '', '', '', '', '', '', '', '', ''];\n\n        const PSEUDO_BORDER_RADIUS = 2;\n        switch (this.#bestVerticalPositionInternal) {\n          case DialogVerticalPosition.TOP: {\n            //  p1                              p2\n            //   *-----------------------------*\n            //   |                             |\n            //   |                             |\n            // p9|                             |\n            //    \\__________________p7  p5____/ p3 <-- A pseudo curve is added to the clip path to\n            //  p8                     \\/      p4        imitate a curved boder.\n            //                         p6\n            //   |-connectorRelativeX--|\n            const clipPathBottom = `calc(100% - ${CONNECTOR_HEIGHT}px)`;\n            if (this.#props.showConnector) {\n              p1 = '0 0';\n              p2 = '100% 0';\n              p3 = `100% calc(${clipPathBottom} - ${PSEUDO_BORDER_RADIUS}px)`;\n              p4 = `calc(100% - ${PSEUDO_BORDER_RADIUS}px) ${clipPathBottom}`;\n              p5 = `${clipPathConnectorStartX}px ${clipPathBottom}`;\n              p6 = `${connectorRelativeXValue}px 100%`;\n              p7 = `${clipPathConnectorEndX}px ${clipPathBottom}`;\n              p8 = `${PSEUDO_BORDER_RADIUS}px ${clipPathBottom}`;\n              p9 = `0 calc(${clipPathBottom} - ${PSEUDO_BORDER_RADIUS}px)`;\n            }\n\n            this.style.setProperty(\n                '--content-padding-bottom',\n                `${CONNECTOR_HEIGHT + (this.#props.showConnector ? CONNECTOR_HEIGHT : 0)}px`);\n            this.style.setProperty('--content-padding-top', `${CONNECTOR_HEIGHT}px`);\n            this.style.setProperty('--dialog-top', '0');\n            this.style.setProperty('--dialog-margin', 'auto');\n            this.style.setProperty('--dialog-margin-bottom', `${innerHeight - anchorTop}px`);\n            this.#hitArea.y = anchorTop - 2 * CONNECTOR_HEIGHT;\n            this.style.setProperty('--dialog-offset-y', `${DIALOG_ANIMATION_OFFSET}px`);\n            this.style.setProperty(\n                '--dialog-max-height',\n                `${\n                    devToolsHeight - (innerHeight - anchorTop) - DIALOG_PADDING_FROM_WINDOW -\n                    visibleConnectorHeight}px`);\n            break;\n          }\n          case DialogVerticalPosition.BOTTOM: {\n            //                p4\n            //     p2_________/\\_________p6\n            //     /        p3  p5        \\\n            // p1 |                        | p7\n            //    |                        |\n            // p9 *________________________* p8\n\n            if (this.#props.showConnector) {\n              p1 = `0 ${CONNECTOR_HEIGHT + PSEUDO_BORDER_RADIUS}px`;\n              p2 = `${PSEUDO_BORDER_RADIUS}px ${CONNECTOR_HEIGHT}px`;\n              p3 = `${clipPathConnectorStartX}px ${CONNECTOR_HEIGHT}px`;\n              p4 = `${connectorRelativeXValue}px 0`;\n              p5 = `${clipPathConnectorEndX}px ${CONNECTOR_HEIGHT}px`;\n              p6 = `calc(100% - ${PSEUDO_BORDER_RADIUS}px) ${CONNECTOR_HEIGHT}px`;\n              p7 = `100% ${CONNECTOR_HEIGHT + PSEUDO_BORDER_RADIUS}px`;\n              p8 = '100% 100%';\n              p9 = '0 100%';\n            }\n            this.style.setProperty(\n                '--content-padding-top', `${CONNECTOR_HEIGHT + (this.#props.showConnector ? CONNECTOR_HEIGHT : 0)}px`);\n            this.style.setProperty('--content-padding-bottom', `${CONNECTOR_HEIGHT}px`);\n            this.style.setProperty('--dialog-top', `${anchorBottom}px`);\n            this.#hitArea.y = anchorTop;\n            this.style.setProperty('--dialog-offset-y', `-${DIALOG_ANIMATION_OFFSET}px`);\n            this.style.setProperty(\n                '--dialog-max-height',\n                `${\n                    devToolsHeight - (anchorBottom - devToolsTop) - DIALOG_PADDING_FROM_WINDOW -\n                    visibleConnectorHeight}px`);\n            break;\n          }\n          default:\n            Platform.assertNever(\n                this.#bestVerticalPositionInternal, `Unknown position type: ${this.#bestVerticalPositionInternal}`);\n        }\n\n        const clipPath = [p1, p2, p3, p4, p5, p6, p7, p8, p9].join();\n\n        this.style.setProperty('--content-clip-path', clipPath);\n        dialog.close();\n        dialog.style.visibility = '';\n      });\n    });\n  }\n\n  async #showDialog(): Promise<void> {\n    if (!IS_DIALOG_SUPPORTED) {\n      return;\n    }\n\n    if (this.#isPendingShowDialog || this.hasAttribute('open')) {\n      return;\n    }\n    this.#isPendingShowDialog = true;\n    this.#positionDialog();\n    // Allow the CSS variables to be set before showing.\n    await coordinator.done();\n    this.#isPendingShowDialog = false;\n    const dialog = this.#getDialog();\n    // Make the dialog visible now.\n    if (!dialog.hasAttribute('open')) {\n      dialog.showModal();\n    }\n    if (this.#props.dialogShownCallback) {\n      await this.#props.dialogShownCallback();\n    }\n    this.#updateDialogBounds();\n    document.body.addEventListener('keydown', this.#onKeyDownBound);\n  }\n\n  #handleScrollAttempt(event: WheelEvent): void {\n    if (this.#mouseEventWasInDialogContent(event) || !this.#props.closeOnScroll ||\n        !this.#getDialog().hasAttribute('open')) {\n      return;\n    }\n    this.#closeDialog();\n    this.dispatchEvent(new ForcedDialogClose());\n  }\n\n  #onKeyDown(event: KeyboardEvent): void {\n    if (!this.#getDialog().hasAttribute('open') || !this.#props.closeOnESC) {\n      return;\n    }\n\n    if (event.key !== Platform.KeyboardUtilities.ESCAPE_KEY) {\n      return;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n    this.#closeDialog();\n    this.dispatchEvent(new ForcedDialogClose());\n  }\n\n  #onCancel(event: Event): void {\n    event.stopPropagation();\n    event.preventDefault();\n    if (!this.#getDialog().hasAttribute('open') || !this.#props.closeOnESC) {\n      return;\n    }\n    this.dispatchEvent(new ForcedDialogClose());\n  }\n\n  #forceDialogCloseInDevToolsMutation(): void {\n    if (!this.#dialog?.hasAttribute('open')) {\n      return;\n    }\n    if (this.#devToolsBoundingElement === document.body) {\n      // Do not close if running in test environment.\n      return;\n    }\n    this.#closeDialog();\n    this.dispatchEvent(new ForcedDialogClose());\n  }\n\n  #closeDialog(): void {\n    if (this.#isPendingCloseDialog || !this.#getDialog().hasAttribute('open')) {\n      return;\n    }\n    this.#isPendingCloseDialog = true;\n    void coordinator.write(() => {\n      this.#hitArea.width = 0;\n      this.removeAttribute('open');\n      this.#getDialog().close();\n      this.#isPendingCloseDialog = false;\n      document.body.removeEventListener('keydown', this.#onKeyDownBound);\n    });\n  }\n\n  getDialogBounds(): DOMRect {\n    return this.#dialogClientRect;\n  }\n\n  #renderHeaderRow(): LitHtml.TemplateResult|null {\n    // If the title is empty and close button is false, let's skip the header row.\n    if (!this.#props.dialogTitle && !this.#props.closeButton) {\n      return null;\n    }\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <div class=\"dialog-header\">\n        <span class=\"dialog-header-text\">${this.#props.dialogTitle}</span>\n        ${this.#props.closeButton ? html`\n          <devtools-button\n            @click=${this.#closeDialog}\n            .data=${{\n              variant: Buttons.Button.Variant.TOOLBAR,\n              iconName: 'cross',\n              title: i18nString(UIStrings.close),\n            } as Buttons.Button.ButtonData}\n            jslog=${VisualLogging.close().track({click: true})}\n          ></devtools-button>\n        ` : LitHtml.nothing}\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('Dialog render was not scheduled');\n    }\n\n    if (!IS_DIALOG_SUPPORTED) {\n      // To make sure that light dom content passed into this component doesn't show up,\n      // we have to explicitly render a slot and hide it with CSS.\n      LitHtml.render(\n          // clang-format off\n      html`\n        <slot></slot>\n      `,  this.#shadow, {host: this});\n      // clang-format on\n      return;\n    }\n\n    // clang-format off\n    LitHtml.render(html`\n      <dialog @click=${this.#handlePointerEvent} @pointermove=${this.#handlePointerEvent} @cancel=${this.#onCancel}\n              jslog=${VisualLogging.dialog(this.#props.jslogContext).track({resize: true, keydown: 'Escape'}).parent('mapped')}>\n        <div id=\"content\">\n          ${this.#renderHeaderRow()}\n          <div class='dialog-content'>\n            <slot></slot>\n          </div>\n        </div>\n      </dialog>\n    `, this.#shadow, { host: this });\n    VisualLogging.setMappedParent(this.#getDialog(), this.parentElementOrShadowHost() as HTMLElement);\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-dialog', Dialog);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-dialog': Dialog;\n  }\n}\n\nexport class PointerLeftDialogEvent extends Event {\n  static readonly eventName = 'pointerleftdialog';\n\n  constructor() {\n    super(PointerLeftDialogEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class ClickOutsideDialogEvent extends Event {\n  static readonly eventName = 'clickoutsidedialog';\n\n  constructor() {\n    super(ClickOutsideDialogEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class ForcedDialogClose extends Event {\n  static readonly eventName = 'forceddialogclose';\n  constructor() {\n    super(ForcedDialogClose.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport const enum DialogVerticalPosition {\n  TOP = 'top',\n  BOTTOM = 'bottom',\n  AUTO = 'auto',\n}\n\nexport const enum DialogHorizontalAlignment {\n  // Dialog and anchor are aligned on their left borders.\n  LEFT = 'left',\n  // Dialog and anchor are aligned on their right borders.\n  RIGHT = 'right',\n  CENTER = 'center',\n  // This option allows to set the alignment\n  // automatically to LEFT or RIGHT depending\n  // on whether the dialog overflows the\n  // viewport if it's aligned to the left.\n  AUTO = 'auto',\n}\n\ntype AnchorBounds = {\n  top: number,\n  bottom: number,\n  left: number,\n  right: number,\n};\n"],
  "mappings": "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",
  "names": ["DialogVerticalPosition", "DialogHorizontalAlignment"]
}
