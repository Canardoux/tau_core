{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/color_picker/ContrastInfo.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\n\nexport class ContrastInfo extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly isNullInternal: boolean;\n  private contrastRatioInternal: number|null;\n  private contrastRatioAPCAInternal: number|null;\n  private contrastRatioThresholds: {\n    [x: string]: number,\n  }|null;\n  private readonly contrastRationAPCAThreshold: number|null;\n  private fgColor: Common.Color.Legacy|null;\n  private bgColorInternal: Common.Color.Legacy|null;\n  private colorFormatInternal: Common.Color.Format|undefined;\n  constructor(contrastInfo: ContrastInfoType|null) {\n    super();\n    this.isNullInternal = true;\n    this.contrastRatioInternal = null;\n    this.contrastRatioAPCAInternal = null;\n    this.contrastRatioThresholds = null;\n    this.contrastRationAPCAThreshold = 0;\n    this.fgColor = null;\n    this.bgColorInternal = null;\n\n    if (!contrastInfo) {\n      return;\n    }\n\n    if (!contrastInfo.computedFontSize || !contrastInfo.computedFontWeight || !contrastInfo.backgroundColors ||\n        contrastInfo.backgroundColors.length !== 1) {\n      return;\n    }\n\n    this.isNullInternal = false;\n    this.contrastRatioThresholds =\n        Common.ColorUtils.getContrastThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    this.contrastRationAPCAThreshold =\n        Common.ColorUtils.getAPCAThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    const bgColorText = contrastInfo.backgroundColors[0];\n    const bgColor = Common.Color.parse(bgColorText)?.asLegacyColor();\n    if (bgColor) {\n      this.setBgColorInternal(bgColor);\n    }\n  }\n\n  isNull(): boolean {\n    return this.isNullInternal;\n  }\n\n  setColor(fgColor: Common.Color.Legacy, colorFormat?: Common.Color.Format): void {\n    this.fgColor = fgColor;\n    this.colorFormatInternal = colorFormat;\n    this.updateContrastRatio();\n    this.dispatchEventToListeners(Events.CONTRAST_INFO_UPDATED);\n  }\n\n  colorFormat(): Common.Color.Format|undefined {\n    return this.colorFormatInternal;\n  }\n\n  color(): Common.Color.Legacy|null {\n    return this.fgColor;\n  }\n\n  contrastRatio(): number|null {\n    return this.contrastRatioInternal;\n  }\n\n  contrastRatioAPCA(): number|null {\n    return this.contrastRatioAPCAInternal;\n  }\n\n  contrastRatioAPCAThreshold(): number|null {\n    return this.contrastRationAPCAThreshold;\n  }\n\n  setBgColor(bgColor: Common.Color.Legacy): void {\n    this.setBgColorInternal(bgColor);\n    this.dispatchEventToListeners(Events.CONTRAST_INFO_UPDATED);\n  }\n\n  private setBgColorInternal(bgColor: Common.Color.Legacy): void {\n    this.bgColorInternal = bgColor;\n\n    if (!this.fgColor) {\n      return;\n    }\n\n    const fgRGBA = this.fgColor.rgba();\n\n    // If we have a semi-transparent background color over an unknown\n    // background, draw the line for the \"worst case\" scenario: where\n    // the unknown background is the same color as the text.\n    if (bgColor.hasAlpha()) {\n      const blendedRGBA = Common.ColorUtils.blendColors(bgColor.rgba(), fgRGBA);\n      this.bgColorInternal = new Common.Color.Legacy(blendedRGBA, Common.Color.Format.RGBA);\n    }\n\n    this.contrastRatioInternal = Common.ColorUtils.contrastRatio(fgRGBA, this.bgColorInternal.rgba());\n    this.contrastRatioAPCAInternal =\n        Common.ColorUtils.contrastRatioAPCA(this.fgColor.rgba(), this.bgColorInternal.rgba());\n  }\n\n  bgColor(): Common.Color.Legacy|null {\n    return this.bgColorInternal;\n  }\n\n  private updateContrastRatio(): void {\n    if (!this.bgColorInternal || !this.fgColor) {\n      return;\n    }\n    this.contrastRatioInternal = Common.ColorUtils.contrastRatio(this.fgColor.rgba(), this.bgColorInternal.rgba());\n    this.contrastRatioAPCAInternal =\n        Common.ColorUtils.contrastRatioAPCA(this.fgColor.rgba(), this.bgColorInternal.rgba());\n  }\n\n  contrastRatioThreshold(level: string): number|null {\n    if (!this.contrastRatioThresholds) {\n      return null;\n    }\n    return this.contrastRatioThresholds[level];\n  }\n}\n\nexport const enum Events {\n  CONTRAST_INFO_UPDATED = 'ContrastInfoUpdated',\n}\n\nexport type EventTypes = {\n  [Events.CONTRAST_INFO_UPDATED]: void,\n};\n\nexport interface ContrastInfoType {\n  backgroundColors: string[]|null;\n  computedFontSize: string;\n  computedFontWeight: string;\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
