{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/TextPrompt.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2011 Google Inc.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as VisualLogging from '../visual_logging/visual_logging.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {SuggestBox, type SuggestBoxDelegate, type Suggestion} from './SuggestBox.js';\nimport textPromptStyles from './textPrompt.css.legacy.js';\nimport * as ThemeSupport from './theme_support/theme_support.js';\nimport {Tooltip} from './Tooltip.js';\nimport {ElementFocusRestorer} from './UIUtils.js';\n\nexport class TextPrompt extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements SuggestBoxDelegate {\n  private proxyElement!: HTMLElement|undefined;\n  private proxyElementDisplay: string;\n  private autocompletionTimeout: number;\n  private titleInternal: string;\n  private queryRange: TextUtils.TextRange.TextRange|null;\n  private previousText: string;\n  private currentSuggestion: Suggestion|null;\n  private completionRequestId: number;\n  private ghostTextElement: HTMLSpanElement;\n  private leftParenthesesIndices: number[];\n  private loadCompletions!: (this: null, arg1: string, arg2: string, arg3?: boolean|undefined) => Promise<Suggestion[]>;\n  private completionStopCharacters!: string;\n  private usesSuggestionBuilder!: boolean;\n  private elementInternal?: Element;\n  private boundOnKeyDown?: ((ev: Event) => void);\n  private boundOnInput?: ((ev: Event) => void);\n  private boundOnMouseWheel?: ((event: Event) => void);\n  private boundClearAutocomplete?: (() => void);\n  private boundOnBlur?: ((ev: Event) => void);\n  private contentElement?: HTMLElement;\n  private suggestBox?: SuggestBox;\n  private isEditing?: boolean;\n  private focusRestorer?: ElementFocusRestorer;\n  private blurListener?: ((arg0: Event) => void);\n  private oldTabIndex?: number;\n  private completeTimeout?: number;\n  private disableDefaultSuggestionForEmptyInputInternal?: boolean;\n  private changed: boolean;\n  jslogContext: string|undefined = undefined;\n\n  constructor() {\n    super();\n    this.proxyElementDisplay = 'inline-block';\n    this.autocompletionTimeout = DefaultAutocompletionTimeout;\n    this.titleInternal = '';\n    this.queryRange = null;\n    this.previousText = '';\n    this.currentSuggestion = null;\n    this.completionRequestId = 0;\n    this.ghostTextElement = document.createElement('span');\n    this.ghostTextElement.classList.add('auto-complete-text');\n    this.ghostTextElement.setAttribute('contenteditable', 'false');\n    this.leftParenthesesIndices = [];\n    this.changed = false;\n    ARIAUtils.markAsHidden(this.ghostTextElement);\n  }\n\n  initialize(\n      completions: (this: null, expression: string, filter: string, force?: boolean|undefined) => Promise<Suggestion[]>,\n      stopCharacters?: string, usesSuggestionBuilder?: boolean): void {\n    this.loadCompletions = completions;\n    this.completionStopCharacters = stopCharacters || ' =:[({;,!+-*/&|^<>.';\n    this.usesSuggestionBuilder = usesSuggestionBuilder || false;\n  }\n\n  setAutocompletionTimeout(timeout: number): void {\n    this.autocompletionTimeout = timeout;\n  }\n\n  renderAsBlock(): void {\n    this.proxyElementDisplay = 'block';\n  }\n\n  /**\n   * Clients should never attach any event listeners to the |element|. Instead,\n   * they should use the result of this method to attach listeners for bubbling events.\n   */\n  attach(element: Element): Element {\n    return this.attachInternal(element);\n  }\n\n  /**\n   * Clients should never attach any event listeners to the |element|. Instead,\n   * they should use the result of this method to attach listeners for bubbling events\n   * or the |blurListener| parameter to register a \"blur\" event listener on the |element|\n   * (since the \"blur\" event does not bubble.)\n   */\n  attachAndStartEditing(element: Element, blurListener: (arg0: Event) => void): Element {\n    const proxyElement = this.attachInternal(element);\n    this.startEditing(blurListener);\n    return proxyElement;\n  }\n\n  private attachInternal(element: Element): Element {\n    if (this.proxyElement) {\n      throw 'Cannot attach an attached TextPrompt';\n    }\n    this.elementInternal = element;\n\n    this.boundOnKeyDown = this.onKeyDown.bind(this);\n    this.boundOnInput = this.onInput.bind(this);\n    this.boundOnMouseWheel = this.onMouseWheel.bind(this);\n    this.boundClearAutocomplete = this.clearAutocomplete.bind(this);\n    this.boundOnBlur = this.onBlur.bind(this);\n    this.proxyElement = element.ownerDocument.createElement('span');\n    ThemeSupport.ThemeSupport.instance().appendStyle(this.proxyElement, textPromptStyles);\n    this.contentElement = this.proxyElement.createChild('div', 'text-prompt-root');\n    this.proxyElement.style.display = this.proxyElementDisplay;\n    if (element.parentElement) {\n      element.parentElement.insertBefore(this.proxyElement, element);\n    }\n    this.contentElement.appendChild(element);\n    let jslog = VisualLogging.textField().track({\n      keydown: 'ArrowLeft|ArrowUp|PageUp|Home|PageDown|ArrowRight|ArrowDown|End|Space|Tab|Enter|Escape',\n      change: true,\n    });\n\n    if (this.jslogContext) {\n      jslog = jslog.context(this.jslogContext);\n    }\n    if (!this.elementInternal.hasAttribute('jslog')) {\n      this.elementInternal.setAttribute('jslog', `${jslog}`);\n    }\n    this.elementInternal.classList.add('text-prompt');\n    ARIAUtils.markAsTextBox(this.elementInternal);\n    ARIAUtils.setAutocomplete(this.elementInternal, ARIAUtils.AutocompleteInteractionModel.BOTH);\n    ARIAUtils.setHasPopup(this.elementInternal, ARIAUtils.PopupRole.LIST_BOX);\n    this.elementInternal.setAttribute('contenteditable', 'plaintext-only');\n    this.element().addEventListener('keydown', this.boundOnKeyDown, false);\n    this.elementInternal.addEventListener('input', this.boundOnInput, false);\n    this.elementInternal.addEventListener('wheel', this.boundOnMouseWheel, false);\n    this.elementInternal.addEventListener('selectstart', this.boundClearAutocomplete, false);\n    this.elementInternal.addEventListener('blur', this.boundOnBlur, false);\n\n    this.suggestBox = new SuggestBox(this, 20);\n\n    if (this.titleInternal) {\n      Tooltip.install(this.proxyElement, this.titleInternal);\n    }\n\n    return this.proxyElement;\n  }\n\n  element(): HTMLElement {\n    if (!this.elementInternal) {\n      throw new Error('Expected an already attached element!');\n    }\n    return this.elementInternal as HTMLElement;\n  }\n\n  detach(): void {\n    this.removeFromElement();\n    if (this.focusRestorer) {\n      this.focusRestorer.restore();\n    }\n    if (this.proxyElement && this.proxyElement.parentElement) {\n      this.proxyElement.parentElement.insertBefore(this.element(), this.proxyElement);\n      this.proxyElement.remove();\n    }\n    delete this.proxyElement;\n    this.element().classList.remove('text-prompt');\n    this.element().removeAttribute('contenteditable');\n    this.element().removeAttribute('role');\n    ARIAUtils.clearAutocomplete(this.element());\n    ARIAUtils.setHasPopup(this.element(), ARIAUtils.PopupRole.FALSE);\n  }\n\n  textWithCurrentSuggestion(): string {\n    const text = this.text();\n    if (!this.queryRange || !this.currentSuggestion) {\n      return text;\n    }\n    const suggestion = this.currentSuggestion.text;\n    return text.substring(0, this.queryRange.startColumn) + suggestion + text.substring(this.queryRange.endColumn);\n  }\n\n  text(): string {\n    let text: string = this.element().textContent || '';\n    if (this.ghostTextElement.parentNode) {\n      const addition = this.ghostTextElement.textContent || '';\n      text = text.substring(0, text.length - addition.length);\n    }\n    return text;\n  }\n\n  setText(text: string): void {\n    this.clearAutocomplete();\n    this.element().textContent = text;\n    this.previousText = this.text();\n    if (this.element().hasFocus()) {\n      this.moveCaretToEndOfPrompt();\n      this.element().scrollIntoView();\n    }\n  }\n\n  setSelectedRange(startIndex: number, endIndex: number): void {\n    if (startIndex < 0) {\n      throw new RangeError('Selected range start must be a nonnegative integer');\n    }\n    const textContent = this.element().textContent;\n    const textContentLength = textContent ? textContent.length : 0;\n    if (endIndex > textContentLength) {\n      endIndex = textContentLength;\n    }\n    if (endIndex < startIndex) {\n      endIndex = startIndex;\n    }\n\n    const textNode = (this.element().childNodes[0] as Node);\n    const range = new Range();\n    range.setStart(textNode, startIndex);\n    range.setEnd(textNode, endIndex);\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  focus(): void {\n    this.element().focus();\n  }\n\n  title(): string {\n    return this.titleInternal;\n  }\n\n  setTitle(title: string): void {\n    this.titleInternal = title;\n    if (this.proxyElement) {\n      Tooltip.install(this.proxyElement, title);\n    }\n  }\n\n  setPlaceholder(placeholder: string, ariaPlaceholder?: string): void {\n    if (placeholder) {\n      this.element().setAttribute('data-placeholder', placeholder);\n      // TODO(https://github.com/nvaccess/nvda/issues/10164): Remove ariaPlaceholder once the NVDA bug is fixed\n      // ariaPlaceholder and placeholder may differ, like in case the placeholder contains a '?'\n      ARIAUtils.setPlaceholder(this.element(), ariaPlaceholder || placeholder);\n    } else {\n      this.element().removeAttribute('data-placeholder');\n      ARIAUtils.setPlaceholder(this.element(), null);\n    }\n  }\n\n  setEnabled(enabled: boolean): void {\n    if (enabled) {\n      this.element().setAttribute('contenteditable', 'plaintext-only');\n    } else {\n      this.element().removeAttribute('contenteditable');\n    }\n    this.element().classList.toggle('disabled', !enabled);\n  }\n\n  private removeFromElement(): void {\n    this.clearAutocomplete();\n    this.element().removeEventListener(\n        'keydown', (this.boundOnKeyDown as (this: HTMLElement, arg1: Event) => void), false);\n    this.element().removeEventListener('input', (this.boundOnInput as (this: HTMLElement, arg1: Event) => void), false);\n    this.element().removeEventListener(\n        'selectstart', (this.boundClearAutocomplete as (this: HTMLElement, arg1: Event) => void), false);\n    this.element().removeEventListener('blur', (this.boundOnBlur as (this: HTMLElement, arg1: Event) => void), false);\n    if (this.isEditing) {\n      this.stopEditing();\n    }\n    if (this.suggestBox) {\n      this.suggestBox.hide();\n    }\n  }\n\n  private startEditing(blurListener?: ((arg0: Event) => void)): void {\n    this.isEditing = true;\n    if (this.contentElement) {\n      this.contentElement.classList.add('text-prompt-editing');\n    }\n    this.focusRestorer = new ElementFocusRestorer(this.element());\n    if (blurListener) {\n      this.blurListener = blurListener;\n      this.element().addEventListener('blur', this.blurListener, false);\n    }\n    this.oldTabIndex = this.element().tabIndex;\n    if (this.element().tabIndex < 0) {\n      this.element().tabIndex = 0;\n    }\n    if (!this.text()) {\n      this.autoCompleteSoon();\n    }\n  }\n\n  private stopEditing(): void {\n    this.element().tabIndex = (this.oldTabIndex as number);\n    if (this.blurListener) {\n      this.element().removeEventListener('blur', this.blurListener, false);\n    }\n    if (this.contentElement) {\n      this.contentElement.classList.remove('text-prompt-editing');\n    }\n    delete this.isEditing;\n  }\n\n  onMouseWheel(_event: Event): void {\n    // Subclasses can implement.\n  }\n\n  onKeyDown(ev: Event): void {\n    let handled = false;\n    const event = (ev as KeyboardEvent);\n    if (this.isSuggestBoxVisible() && this.suggestBox && this.suggestBox.keyPressed(event)) {\n      void VisualLogging.logKeyDown(this.suggestBox.element, event);\n      event.consume(true);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Tab':\n        handled = this.tabKeyPressed(event);\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n      case 'PageUp':\n      case 'Home':\n        this.clearAutocomplete();\n        break;\n      case 'PageDown':\n      case 'ArrowRight':\n      case 'ArrowDown':\n      case 'End':\n        if (this.isCaretAtEndOfPrompt()) {\n          handled = this.acceptAutoComplete();\n        } else {\n          this.clearAutocomplete();\n        }\n        break;\n      case 'Escape':\n        if (this.isSuggestBoxVisible()) {\n          this.clearAutocomplete();\n          handled = true;\n        }\n        break;\n      case ' ':  // Space\n        if (event.ctrlKey && !event.metaKey && !event.altKey && !event.shiftKey) {\n          this.autoCompleteSoon(true);\n          handled = true;\n        }\n        break;\n    }\n\n    if (event.key === 'Enter') {\n      event.preventDefault();\n    }\n\n    if (handled) {\n      event.consume(true);\n    }\n  }\n\n  private acceptSuggestionOnStopCharacters(key: string): boolean {\n    if (!this.currentSuggestion || !this.queryRange || key.length !== 1 || !this.completionStopCharacters ||\n        !this.completionStopCharacters.includes(key)) {\n      return false;\n    }\n\n    const query = this.text().substring(this.queryRange.startColumn, this.queryRange.endColumn);\n    if (query && this.currentSuggestion.text.startsWith(query + key)) {\n      this.queryRange.endColumn += 1;\n      return this.acceptAutoComplete();\n    }\n    return false;\n  }\n\n  onInput(ev: Event): void {\n    const event = (ev as InputEvent);\n    let text = this.text();\n    const currentEntry = event.data;\n\n    if (event.inputType === 'insertFromPaste' && text.includes('\\n')) {\n      /* Ensure that we remove any linebreaks from copied/pasted content\n       * to avoid breaking the rendering of the filter bar.\n       * See crbug.com/849563.\n       * We don't let users enter linebreaks when\n       * typing manually, so we should escape them if copying text in.\n       */\n      text = Platform.StringUtilities.stripLineBreaks(text);\n      this.setText(text);\n    }\n\n    // Skip the current ')' entry if the caret is right before a ')' and there's an unmatched '('.\n    const caretPosition = this.getCaretPosition();\n    if (currentEntry === ')' && caretPosition >= 0 && this.leftParenthesesIndices.length > 0) {\n      const nextCharAtCaret = text[caretPosition];\n      if (nextCharAtCaret === ')' && this.tryMatchingLeftParenthesis(caretPosition)) {\n        text = text.substring(0, caretPosition) + text.substring(caretPosition + 1);\n        this.setText(text);\n        return;\n      }\n    }\n\n    if (currentEntry && !this.acceptSuggestionOnStopCharacters(currentEntry)) {\n      const hasCommonPrefix = text.startsWith(this.previousText) || this.previousText.startsWith(text);\n      if (this.queryRange && hasCommonPrefix) {\n        this.queryRange.endColumn += text.length - this.previousText.length;\n      }\n    }\n    this.refreshGhostText();\n    this.previousText = text;\n    this.dispatchEventToListeners(Events.TEXT_CHANGED);\n    this.changed = true;\n\n    this.autoCompleteSoon();\n  }\n\n  acceptAutoComplete(): boolean {\n    let result = false;\n    if (this.isSuggestBoxVisible() && this.suggestBox) {\n      result = this.suggestBox.acceptSuggestion();\n    }\n    if (!result) {\n      result = this.acceptSuggestionInternal();\n    }\n    if (this.usesSuggestionBuilder && result) {\n      // Trigger autocompletions for text prompts using suggestion builders\n      this.autoCompleteSoon();\n    }\n    return result;\n  }\n\n  clearAutocomplete(): void {\n    const beforeText = this.textWithCurrentSuggestion();\n\n    if (this.isSuggestBoxVisible() && this.suggestBox) {\n      this.suggestBox.hide();\n    }\n    this.clearAutocompleteTimeout();\n    this.queryRange = null;\n    this.refreshGhostText();\n\n    if (beforeText !== this.textWithCurrentSuggestion()) {\n      this.dispatchEventToListeners(Events.TEXT_CHANGED);\n      this.changed = true;\n    }\n  }\n\n  private onBlur(): void {\n    this.clearAutocomplete();\n  }\n\n  private refreshGhostText(): void {\n    if (this.currentSuggestion && this.currentSuggestion.hideGhostText) {\n      this.ghostTextElement.remove();\n      return;\n    }\n    if (this.queryRange && this.currentSuggestion && this.isCaretAtEndOfPrompt() &&\n        this.currentSuggestion.text.startsWith(this.text().substring(this.queryRange.startColumn))) {\n      this.ghostTextElement.textContent =\n          this.currentSuggestion.text.substring(this.queryRange.endColumn - this.queryRange.startColumn);\n      this.element().appendChild(this.ghostTextElement);\n    } else {\n      this.ghostTextElement.remove();\n    }\n  }\n\n  private clearAutocompleteTimeout(): void {\n    if (this.completeTimeout) {\n      clearTimeout(this.completeTimeout);\n      delete this.completeTimeout;\n    }\n    this.completionRequestId++;\n  }\n\n  autoCompleteSoon(force?: boolean): void {\n    const immediately = this.isSuggestBoxVisible() || force;\n    if (!this.completeTimeout) {\n      this.completeTimeout =\n          window.setTimeout(this.complete.bind(this, force), immediately ? 0 : this.autocompletionTimeout);\n    }\n  }\n\n  async complete(force?: boolean): Promise<void> {\n    this.clearAutocompleteTimeout();\n    const selection = this.element().getComponentSelection();\n    if (!selection || selection.rangeCount === 0) {\n      return;\n    }\n    const selectionRange = selection.getRangeAt(0);\n\n    let shouldExit;\n\n    if (!force && !this.isCaretAtEndOfPrompt() && !this.isSuggestBoxVisible()) {\n      shouldExit = true;\n    } else if (!selection.isCollapsed) {\n      shouldExit = true;\n    }\n\n    if (shouldExit) {\n      this.clearAutocomplete();\n      return;\n    }\n\n    const wordQueryRange = Platform.DOMUtilities.rangeOfWord(\n        selectionRange.startContainer, selectionRange.startOffset, this.completionStopCharacters, this.element(),\n        'backward');\n\n    const expressionRange = wordQueryRange.cloneRange();\n    expressionRange.collapse(true);\n    expressionRange.setStartBefore(this.element());\n    const completionRequestId = ++this.completionRequestId;\n    const completions =\n        await this.loadCompletions.call(null, expressionRange.toString(), wordQueryRange.toString(), Boolean(force));\n    this.completionsReady(completionRequestId, (selection as Selection), wordQueryRange, Boolean(force), completions);\n  }\n\n  disableDefaultSuggestionForEmptyInput(): void {\n    this.disableDefaultSuggestionForEmptyInputInternal = true;\n  }\n\n  private boxForAnchorAtStart(selection: Selection, textRange: Range): AnchorBox {\n    const rangeCopy = selection.getRangeAt(0).cloneRange();\n    const anchorElement = document.createElement('span');\n    anchorElement.textContent = '\\u200B';\n    textRange.insertNode(anchorElement);\n    const box = anchorElement.boxInWindow(window);\n    anchorElement.remove();\n    selection.removeAllRanges();\n    selection.addRange(rangeCopy);\n    return box;\n  }\n\n  additionalCompletions(_query: string): Suggestion[] {\n    return [];\n  }\n\n  private completionsReady(\n      completionRequestId: number, selection: Selection, originalWordQueryRange: Range, force: boolean,\n      completions: Suggestion[]): void {\n    if (this.completionRequestId !== completionRequestId) {\n      return;\n    }\n\n    const query = originalWordQueryRange.toString();\n\n    // Filter out dupes.\n    const store = new Set<string>();\n    completions = completions.filter(item => !store.has(item.text) && Boolean(store.add(item.text)));\n\n    if (query || force) {\n      if (query) {\n        completions = completions.concat(this.additionalCompletions(query));\n      } else {\n        completions = this.additionalCompletions(query).concat(completions);\n      }\n    }\n\n    if (!completions.length) {\n      this.clearAutocomplete();\n      return;\n    }\n\n    const selectionRange = selection.getRangeAt(0);\n\n    const fullWordRange = document.createRange();\n    fullWordRange.setStart(originalWordQueryRange.startContainer, originalWordQueryRange.startOffset);\n    fullWordRange.setEnd(selectionRange.endContainer, selectionRange.endOffset);\n\n    if (query + selectionRange.toString() !== fullWordRange.toString()) {\n      return;\n    }\n\n    const beforeRange = document.createRange();\n    beforeRange.setStart(this.element(), 0);\n    beforeRange.setEnd(fullWordRange.startContainer, fullWordRange.startOffset);\n    this.queryRange = new TextUtils.TextRange.TextRange(\n        0, beforeRange.toString().length, 0, beforeRange.toString().length + fullWordRange.toString().length);\n\n    const shouldSelect = !this.disableDefaultSuggestionForEmptyInputInternal || Boolean(this.text());\n    if (this.suggestBox) {\n      this.suggestBox.updateSuggestions(\n          this.boxForAnchorAtStart(selection, fullWordRange), completions, shouldSelect, !this.isCaretAtEndOfPrompt(),\n          this.text());\n    }\n  }\n\n  applySuggestion(suggestion: Suggestion|null, isIntermediateSuggestion?: boolean): void {\n    this.currentSuggestion = suggestion;\n    this.refreshGhostText();\n    if (isIntermediateSuggestion) {\n      this.dispatchEventToListeners(Events.TEXT_CHANGED);\n      this.changed = true;\n    }\n  }\n\n  acceptSuggestion(): void {\n    this.acceptSuggestionInternal();\n  }\n\n  private acceptSuggestionInternal(): boolean {\n    if (!this.queryRange) {\n      return false;\n    }\n\n    const suggestionLength = this.currentSuggestion ? this.currentSuggestion.text.length : 0;\n    const selectionRange = this.currentSuggestion ? this.currentSuggestion.selectionRange : null;\n    const endColumn = selectionRange ? selectionRange.endColumn : suggestionLength;\n    const startColumn = selectionRange ? selectionRange.startColumn : suggestionLength;\n    this.element().textContent = this.textWithCurrentSuggestion();\n    this.setDOMSelection(this.queryRange.startColumn + startColumn, this.queryRange.startColumn + endColumn);\n    this.updateLeftParenthesesIndices();\n\n    this.clearAutocomplete();\n    this.dispatchEventToListeners(Events.TEXT_CHANGED);\n    this.changed = true;\n\n    return true;\n  }\n\n  ownerElement(): Element {\n    return this.element();\n  }\n\n  setDOMSelection(startColumn: number, endColumn: number): void {\n    this.element().normalize();\n    const node = this.element().childNodes[0];\n    if (!node || node === this.ghostTextElement) {\n      return;\n    }\n    const range = document.createRange();\n    range.setStart(node, startColumn);\n    range.setEnd(node, endColumn);\n    const selection = this.element().getComponentSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  isSuggestBoxVisible(): boolean {\n    return this.suggestBox !== undefined && this.suggestBox.visible();\n  }\n\n  isCaretInsidePrompt(): boolean {\n    const selection = this.element().getComponentSelection();\n    if (!selection || selection.rangeCount === 0 || !selection.isCollapsed) {\n      return false;\n    }\n    // @see crbug.com/602541\n    const selectionRange = selection.getRangeAt(0);\n    return selectionRange.startContainer.isSelfOrDescendant(this.element());\n  }\n\n  private isCaretAtEndOfPrompt(): boolean {\n    const selection = this.element().getComponentSelection();\n    if (!selection || selection.rangeCount === 0 || !selection.isCollapsed) {\n      return false;\n    }\n\n    const selectionRange = selection.getRangeAt(0);\n    let node: (Node|null)|Node = selectionRange.startContainer;\n    if (!node.isSelfOrDescendant(this.element())) {\n      return false;\n    }\n\n    if (this.ghostTextElement.isAncestor(node)) {\n      return true;\n    }\n\n    if (node.nodeType === Node.TEXT_NODE && selectionRange.startOffset < (node.nodeValue || '').length) {\n      return false;\n    }\n\n    let foundNextText = false;\n    while (node) {\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue && node.nodeValue.length) {\n        if (foundNextText && !this.ghostTextElement.isAncestor(node)) {\n          return false;\n        }\n        foundNextText = true;\n      }\n\n      node = node.traverseNextNode(this.elementInternal);\n    }\n\n    return true;\n  }\n\n  moveCaretToEndOfPrompt(): void {\n    const selection = this.element().getComponentSelection();\n    const selectionRange = document.createRange();\n\n    let container: Node = this.element();\n    while (container.lastChild) {\n      container = container.lastChild;\n    }\n    let offset = 0;\n    if (container.nodeType === Node.TEXT_NODE) {\n      const textNode = (container as Text);\n      offset = (textNode.textContent || '').length;\n    }\n    selectionRange.setStart(container, offset);\n    selectionRange.setEnd(container, offset);\n\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectionRange);\n    }\n  }\n\n  /** -1 if no caret can be found in text prompt\n   */\n  private getCaretPosition(): number {\n    if (!this.element().hasFocus()) {\n      return -1;\n    }\n\n    const selection = this.element().getComponentSelection();\n    if (!selection || selection.rangeCount === 0 || !selection.isCollapsed) {\n      return -1;\n    }\n    const selectionRange = selection.getRangeAt(0);\n    if (selectionRange.startOffset !== selectionRange.endOffset) {\n      return -1;\n    }\n    return selectionRange.startOffset;\n  }\n\n  tabKeyPressed(_event: Event): boolean {\n    return this.acceptAutoComplete();\n  }\n\n  proxyElementForTests(): Element|null {\n    return this.proxyElement || null;\n  }\n\n  /**\n   * Try matching the most recent open parenthesis with the given right\n   * parenthesis, and closes the matched left parenthesis if found.\n   * Return the result of the matching.\n   */\n  private tryMatchingLeftParenthesis(rightParenthesisIndex: number): boolean {\n    const leftParenthesesIndices = this.leftParenthesesIndices;\n    if (leftParenthesesIndices.length === 0 || rightParenthesisIndex < 0) {\n      return false;\n    }\n\n    for (let i = leftParenthesesIndices.length - 1; i >= 0; --i) {\n      if (leftParenthesesIndices[i] < rightParenthesisIndex) {\n        leftParenthesesIndices.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private updateLeftParenthesesIndices(): void {\n    const text = this.text();\n    const leftParenthesesIndices: number[] = this.leftParenthesesIndices = [];\n    for (let i = 0; i < text.length; ++i) {\n      if (text[i] === '(') {\n        leftParenthesesIndices.push(i);\n      }\n    }\n  }\n\n  suggestBoxForTest(): SuggestBox|undefined {\n    return this.suggestBox;\n  }\n}\n\nconst DefaultAutocompletionTimeout = 250;\n\nexport const enum Events {\n  TEXT_CHANGED = 'TextChanged',\n}\n\nexport type EventTypes = {\n  [Events.TEXT_CHANGED]: void,\n};\n"],
  "mappings": "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",
  "names": ["Events"]
}
