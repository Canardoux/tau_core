{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/markdown_view/MarkdownView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './CodeBlock.js';\nimport './MarkdownImage.js';\nimport './MarkdownLink.js';\n\nimport type * as Marked from '../../../third_party/marked/marked.js';\nimport * as UI from '../../legacy/legacy.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport markdownViewStyles from './markdownView.css.js';\n\nconst html = LitHtml.html;\nconst render = LitHtml.render;\n\nexport interface MarkdownViewData {\n  tokens: Marked.Marked.Token[];\n  renderer?: MarkdownLitRenderer;\n  animationEnabled?: boolean;\n}\n\nexport class MarkdownView extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #tokenData: readonly Marked.Marked.Token[] = [];\n  #renderer = new MarkdownLitRenderer();\n  #animationEnabled = false;\n  #isAnimating = false;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [markdownViewStyles];\n  }\n\n  set data(data: MarkdownViewData) {\n    this.#tokenData = data.tokens;\n    if (data.renderer) {\n      this.#renderer = data.renderer;\n    }\n\n    if (data.animationEnabled) {\n      this.#animationEnabled = true;\n      this.#renderer.setCustomClasses({\n        paragraph: 'pending',\n        heading: 'pending',\n        list_item: 'pending',\n      });\n    } else {\n      this.#animationEnabled = false;\n      this.#renderer.setCustomClasses({});\n    }\n\n    this.#update();\n  }\n\n  finishAnimations(): void {\n    const animatingElements = this.#shadow.querySelectorAll('.animating');\n    for (const element of animatingElements) {\n      element.classList.remove('animating');\n    }\n\n    const pendingElements = this.#shadow.querySelectorAll('.pending');\n    for (const element of pendingElements) {\n      element.classList.remove('pending');\n    }\n    this.#isAnimating = false;\n    this.#animationEnabled = false;\n    this.#renderer.setCustomClasses({});\n  }\n\n  #animate(): void {\n    if (this.#isAnimating) {\n      return;\n    }\n\n    this.#isAnimating = true;\n    const reveal = (): void => {\n      const pendingElement = this.#shadow.querySelector('.pending');\n      if (!pendingElement) {\n        this.#isAnimating = false;\n        return;\n      }\n\n      pendingElement.addEventListener('animationend', () => {\n        pendingElement.classList.remove('animating');\n        reveal();\n      }, {once: true});\n\n      pendingElement.classList.remove('pending');\n      pendingElement.classList.add('animating');\n    };\n\n    reveal();\n  }\n\n  #update(): void {\n    this.#render();\n\n    if (this.#animationEnabled) {\n      this.#animate();\n    }\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class='message'>\n        ${this.#tokenData.map(token => this.#renderer.renderToken(token))}\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-markdown-view', MarkdownView);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-markdown-view': MarkdownView;\n  }\n}\n\n/**\n * Default renderer is used for the IssuesPanel and allows only well-known images and links to be embedded.\n */\nexport class MarkdownLitRenderer {\n  #customClasses: Record<string, string> = {};\n\n  setCustomClasses(customClasses: Record<Marked.Marked.Token['type'], string>): void {\n    this.#customClasses = customClasses;\n  }\n\n  #customClassMapForToken(type: Marked.Marked.Token['type']): LitHtml.Directive.DirectiveResult {\n    return LitHtml.Directives.classMap({\n      [this.#customClasses[type]]: this.#customClasses[type],\n    });\n  }\n\n  renderChildTokens(token: Marked.Marked.Token): LitHtml.TemplateResult[] {\n    if ('tokens' in token && token.tokens) {\n      return token.tokens.map(token => this.renderToken(token));\n    }\n    throw new Error('Tokens not found');\n  }\n\n  /**\n   * Unescape will get rid of the escaping done by Marked to avoid double escaping due to escaping it also with Lit-html.\n   * Table taken from: front_end/third_party/marked/package/src/helpers.js\n   */\n  unescape(text: string): string {\n    const escapeReplacements = new Map<string, string>([\n      ['&amp;', '&'],\n      ['&lt;', '<'],\n      ['&gt;', '>'],\n      ['&quot;', '\"'],\n      ['&#39;', '\\''],\n    ]);\n    return text.replace(/&(amp|lt|gt|quot|#39);/g, (matchedString: string) => {\n      const replacement = escapeReplacements.get(matchedString);\n      return replacement ? replacement : matchedString;\n    });\n  }\n\n  renderText(token: Marked.Marked.Token): LitHtml.TemplateResult {\n    if ('tokens' in token && token.tokens) {\n      return html`${this.renderChildTokens(token)}`;\n    }\n    // Due to unescaping, unescaped html entities (see escapeReplacements' keys) will be rendered\n    // as their corresponding symbol while the rest will be rendered as verbatim.\n    // Marked's escape function can be found in front_end/third_party/marked/package/src/helpers.js\n    return html`${this.unescape('text' in token ? token.text : '')}`;\n  }\n\n  renderHeading(heading: Marked.Marked.Tokens.Heading): LitHtml.TemplateResult {\n    const customClass = this.#customClassMapForToken('heading');\n    switch (heading.depth) {\n      case 1:\n        return html`<h1 class=${customClass}>${this.renderText(heading)}</h1>`;\n      case 2:\n        return html`<h2 class=${customClass}>${this.renderText(heading)}</h2>`;\n      case 3:\n        return html`<h3 class=${customClass}>${this.renderText(heading)}</h3>`;\n      case 4:\n        return html`<h4 class=${customClass}>${this.renderText(heading)}</h4>`;\n      case 5:\n        return html`<h5 class=${customClass}>${this.renderText(heading)}</h5>`;\n      default:\n        return html`<h6 class=${customClass}>${this.renderText(heading)}</h6>`;\n    }\n  }\n\n  renderCodeBlock(token: Marked.Marked.Tokens.Code): LitHtml.TemplateResult {\n    // clang-format off\n    return html`<devtools-code-block\n      class=${this.#customClassMapForToken('code')}\n      .code=${this.unescape(token.text)}\n      .codeLang=${token.lang || ''}>\n    </devtools-code-block>`;\n    // clang-format on\n  }\n\n  templateForToken(token: Marked.Marked.MarkedToken): LitHtml.TemplateResult|null {\n    switch (token.type) {\n      case 'paragraph':\n        return html`<p class=${this.#customClassMapForToken('paragraph')}>${this.renderChildTokens(token)}</p>`;\n      case 'list':\n        return html`<ul class=${this.#customClassMapForToken('list')}>${token.items.map(token => {\n          return this.renderToken(token);\n        })}</ul>`;\n      case 'list_item':\n        return html`<li class=${this.#customClassMapForToken('list_item')}>${this.renderChildTokens(token)}</li>`;\n      case 'text':\n        return this.renderText(token);\n      case 'codespan':\n        return html`<code class=${this.#customClassMapForToken('codespan')}>${this.unescape(token.text)}</code>`;\n      case 'code':\n        return this.renderCodeBlock(token);\n      case 'space':\n        return html``;\n      case 'link':\n        return html`<devtools-markdown-link\n        class=${this.#customClassMapForToken('link')}\n        .data=${{\n        key:\n          token.href, title: token.text,\n        }\n        }></devtools-markdown-link>`;\n      case 'image':\n        return html`<devtools-markdown-image\n        class=${this.#customClassMapForToken('image')}\n        .data=${{\n        key:\n          token.href, title: token.text,\n        }\n        }></devtools-markdown-image>`;\n      case 'heading':\n        return this.renderHeading(token);\n      case 'strong':\n        return html`<strong class=${this.#customClassMapForToken('strong')}>${this.renderText(token)}</strong>`;\n      case 'em':\n        return html`<em class=${this.#customClassMapForToken('em')}>${this.renderText(token)}</em>`;\n      default:\n        return null;\n    }\n  }\n\n  renderToken(token: Marked.Marked.Token): LitHtml.TemplateResult {\n    const template = this.templateForToken(token as Marked.Marked.MarkedToken);\n    if (template === null) {\n      throw new Error(`Markdown token type '${token.type}' not supported.`);\n    }\n    return template;\n  }\n}\n\n/**\n * Renderer used in Console Insights and AI assistance for the text generated by an LLM.\n */\nexport class MarkdownInsightRenderer extends MarkdownLitRenderer {\n  override renderToken(token: Marked.Marked.Token): LitHtml.TemplateResult {\n    const template = this.templateForToken(token as Marked.Marked.MarkedToken);\n    if (template === null) {\n      return html`${token.raw}`;\n    }\n    return template;\n  }\n\n  sanitizeUrl(maybeUrl: string): string|null {\n    try {\n      const url = new URL(maybeUrl);\n      if (url.protocol === 'https:' || url.protocol === 'http:') {\n        return url.toString();\n      }\n      return null;\n    } catch {\n      return null;\n    }\n  }\n\n  detectCodeLanguage(token: Marked.Marked.Tokens.Code): string {\n    if (token.lang) {\n      return token.lang;\n    }\n\n    if (/^(\\.|#)?[\\w:\\[\\]=\"'-\\.]* ?{/m.test(token.text) || /^@import/.test(token.text)) {\n      return 'css';\n    }\n    if (/^(var|const|let|function|async|import)\\s/.test(token.text)) {\n      return 'js';\n    }\n\n    return '';\n  }\n\n  override templateForToken(token: Marked.Marked.MarkedToken): LitHtml.TemplateResult|null {\n    switch (token.type) {\n      case 'heading':\n        return html`<strong>${this.renderText(token)}</strong>`;\n      case 'link':\n      case 'image': {\n        const sanitizedUrl = this.sanitizeUrl(token.href);\n        if (!sanitizedUrl) {\n          return null;\n        }\n        return html`${UI.XLink.XLink.create(sanitizedUrl, token.text, undefined, undefined, 'link-in-explanation')}`;\n      }\n      case 'code':\n        return html`<devtools-code-block\n          .code=${this.unescape(token.text)}\n          .codeLang=${this.detectCodeLanguage(token)}\n          .displayNotice=${true}>\n        </devtools-code-block>`;\n    }\n    return super.templateForToken(token as Marked.Marked.MarkedToken);\n  }\n}\n"],
  "mappings": "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",
  "names": ["token"]
}
