{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/color_picker/ColorFormatSpec.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Platform from '../../../../core/platform/platform.js';\n\n// Represents how each of the color formats should be\n// shown in the color picker inputs and\n// how a color should be materialized from the input values.\n\n// All the color formats except HEX and ShortHEX is\n// represented with 4 input fields in the ColorPicker.\n// This utility exports `colorFormatSpec` which encodes\n// * Label to be shown for the given color space\n// * `toValues` method that converts the given color to 4 input values\n// * `fromValues` method that creates the color from the given 4 input values.\n\n// Represents each of the inputs. For example, we have\n// 4 inputs for rgba colors: r, g, b, a and each character from \"RGBA\"\n// represents one of the inputs.\ntype Label = 'RGBA'|'HSLA'|'HWBA'|'lchA'|'labA'|'xyzA';\n\ntype ColorFormatSpec = {\n  // Label to be shown under the inputs\n  label: Label,\n  // Values of the inputs\n  toValues(color: Common.Color.Color): [string, string, string, string],\n  // How to generate the number from the input values\n  fromValues(values: [string, string, string, string]): Common.Color.Color|null,\n};\n\n// p0, p1, p2, alpha\n// r, g, b, alpha\n// l, c, h, alpha\n// l, a, b, alpha\ntype CanonicalParameters = [number, number, number, number];\n\nexport type SpectrumColorFormat = Exclude<\n    Common.Color.Format,\n    Common.Color.Format.RGBA|Common.Color.Format.HSLA|Common.Color.Format.HWBA|Common.Color.Format.HEXA>;\n\nconst roundAndStringify = (arr: [number, number, number, number]): [string, string, string, string] =>\n    arr.map(el => Platform.StringUtilities.stringifyWithPrecision(el, 2)) as [string, string, string, string];\n\nconst functionParamsText = (values: [string, string, string, string]): string => {\n  return `${values[0]} ${values[1]} ${values[2]} / ${values[3]}`;\n};\n\nexport const colorFormatSpec: Record<Exclude<SpectrumColorFormat, Common.Color.Format.HEX>, ColorFormatSpec> = {\n  [Common.Color.Format.RGB]: {\n    label: 'RGBA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      return roundAndStringify(color.as(Common.Color.Format.RGBA).canonicalRGBA() as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`rgb(${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.HSL]: {\n    label: 'HSLA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const canonicalHslParams =\n          roundAndStringify(color.as(Common.Color.Format.HSLA).canonicalHSLA() as CanonicalParameters);\n      canonicalHslParams[1] = canonicalHslParams[1] + '%';\n      canonicalHslParams[2] = canonicalHslParams[2] + '%';\n      return canonicalHslParams;\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`hsl(${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.HWB]: {\n    label: 'HWBA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const canonicalHwbParams =\n          roundAndStringify(color.as(Common.Color.Format.HWBA).canonicalHWBA() as CanonicalParameters);\n      canonicalHwbParams[1] = canonicalHwbParams[1] + '%';\n      canonicalHwbParams[2] = canonicalHwbParams[2] + '%';\n      return canonicalHwbParams;\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`hwb(${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.LCH]: {\n    label: 'lchA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const lchColor = color.as(Common.Color.Format.LCH);\n      return roundAndStringify([lchColor.l, lchColor.c, lchColor.h, lchColor.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`lch(${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.OKLCH]: {\n    label: 'lchA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const lchColor = color.as(Common.Color.Format.OKLCH);\n      return roundAndStringify([lchColor.l, lchColor.c, lchColor.h, lchColor.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`oklch(${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.LAB]: {\n    label: 'labA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const labColor = color.as(Common.Color.Format.LAB);\n      return roundAndStringify([labColor.l, labColor.a, labColor.b, labColor.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`lab(${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.OKLAB]: {\n    label: 'labA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const labColor = color.as(Common.Color.Format.OKLAB);\n      return roundAndStringify([labColor.l, labColor.a, labColor.b, labColor.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`oklab(${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.SRGB]: {\n    label: 'RGBA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const srgbColor = color.as(Common.Color.Format.SRGB);\n      return roundAndStringify([srgbColor.p0, srgbColor.p1, srgbColor.p2, srgbColor.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.SRGB} ${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.SRGB_LINEAR]: {\n    label: 'RGBA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const srgbLinearColor = color.as(Common.Color.Format.SRGB_LINEAR);\n      return roundAndStringify(\n          [srgbLinearColor.p0, srgbLinearColor.p1, srgbLinearColor.p2, srgbLinearColor.alpha ?? 1] as\n          CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.SRGB_LINEAR} ${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.DISPLAY_P3]: {\n    label: 'RGBA',\n    toValues(color: Common.Color.Color): [string, string, string, string] {\n      const displayP3Color = color.as(Common.Color.Format.DISPLAY_P3);\n      return roundAndStringify([displayP3Color.p0, displayP3Color.p1, displayP3Color.p2, 1]);\n    },\n    fromValues(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.DISPLAY_P3} ${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.A98_RGB]: {\n    label: 'RGBA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const a98Color = color.as(Common.Color.Format.A98_RGB);\n      return roundAndStringify([a98Color.p0, a98Color.p1, a98Color.p2, a98Color.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.A98_RGB} ${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.PROPHOTO_RGB]: {\n    label: 'RGBA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const proPhotoRGBColor = color.as(Common.Color.Format.PROPHOTO_RGB);\n      return roundAndStringify(\n          [proPhotoRGBColor.p0, proPhotoRGBColor.p1, proPhotoRGBColor.p2, proPhotoRGBColor.alpha ?? 1] as\n          CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.PROPHOTO_RGB} ${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.REC_2020]: {\n    label: 'RGBA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const rec2020Color = color.as(Common.Color.Format.REC_2020);\n      return roundAndStringify(\n          [rec2020Color.p0, rec2020Color.p1, rec2020Color.p2, rec2020Color.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.REC_2020} ${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.XYZ]: {\n    label: 'xyzA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const xyzColor = color.as(Common.Color.Format.XYZ);\n      return roundAndStringify([xyzColor.p0, xyzColor.p1, xyzColor.p2, xyzColor.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.XYZ} ${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.XYZ_D50]: {\n    label: 'xyzA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const xyzColor = color.as(Common.Color.Format.XYZ_D50);\n      return roundAndStringify([xyzColor.p0, xyzColor.p1, xyzColor.p2, xyzColor.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.XYZ_D50} ${functionParamsText(values)})`);\n        },\n  },\n  [Common.Color.Format.XYZ_D65]: {\n    label: 'xyzA',\n    toValues: function(color: Common.Color.Color): [string, string, string, string] {\n      const xyzColor = color.as(Common.Color.Format.XYZ_D65);\n      return roundAndStringify([xyzColor.p0, xyzColor.p1, xyzColor.p2, xyzColor.alpha ?? 1] as CanonicalParameters);\n    },\n    fromValues: function(values: [string, string, string, string]): Common.Color.Color |\n        null {\n          return Common.Color.parse(`color(${Common.Color.Format.XYZ_D65} ${functionParamsText(values)})`);\n        },\n  },\n};\n"],
  "mappings": "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",
  "names": []
}
