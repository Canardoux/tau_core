{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/data_grid/SortableDataGrid.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Platform from '../../../../core/platform/platform.js';\n\nimport {type ColumnDescriptor, type DataGridData, Events, type Parameters} from './DataGrid.js';\nimport {ViewportDataGrid, ViewportDataGridNode} from './ViewportDataGrid.js';\n\nexport class SortableDataGrid<T> extends ViewportDataGrid<SortableDataGridNode<T>> {\n  sortingFunction: <T>(a: SortableDataGridNode<T>, b: SortableDataGridNode<T>) => number;\n  constructor(dataGridParameters: Parameters) {\n    super(dataGridParameters);\n    this.sortingFunction = SortableDataGrid.TrivialComparator;\n    this.setRootNode((new SortableDataGridNode() as SortableDataGridNode<T>));\n  }\n\n  static TrivialComparator<T>(_a: SortableDataGridNode<T>, _b: SortableDataGridNode<T>): number {\n    return 0;\n  }\n\n  static NumericComparator<T>(columnId: string, a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    const aValue = a.data[columnId];\n    const bValue = b.data[columnId];\n    const aNumber = Number(aValue instanceof Node ? aValue.textContent : aValue);\n    const bNumber = Number(bValue instanceof Node ? bValue.textContent : bValue);\n    return aNumber < bNumber ? -1 : (aNumber > bNumber ? 1 : 0);\n  }\n\n  static StringComparator<T>(columnId: string, a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    const aValue = a.data[columnId];\n    const bValue = b.data[columnId];\n    const aString = aValue instanceof Node ? aValue.textContent : String(aValue);\n    const bString = bValue instanceof Node ? bValue.textContent : String(bValue);\n    if (!aString || !bString) {\n      return 0;\n    }\n    return aString < bString ? -1 : (aString > bString ? 1 : 0);\n  }\n\n  static Comparator<T>(\n      comparator: (arg0: SortableDataGridNode<T>, arg1: SortableDataGridNode<T>) => number, reverseMode: boolean,\n      a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    return reverseMode ? comparator(b, a) : comparator(a, b);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static create<T>(columnNames: string[], values: any[], displayName: string):\n      SortableDataGrid<SortableDataGridNode<T>>|null {\n    const numColumns = columnNames.length;\n    if (!numColumns) {\n      return null;\n    }\n\n    const columns = ([] as ColumnDescriptor[]);\n    for (let i = 0; i < columnNames.length; ++i) {\n      const id = String(i);\n      columns.push(({id, title: columnNames[i], sortable: true} as ColumnDescriptor));\n    }\n\n    const nodes = [];\n    for (let i = 0; i < values.length / numColumns; ++i) {\n      const data: DataGridData = {};\n      for (let j = 0; j < columnNames.length; ++j) {\n        data[j] = values[numColumns * i + j];\n      }\n\n      const node = new SortableDataGridNode(data);\n      node.selectable = false;\n      nodes.push(node);\n    }\n\n    const dataGrid = new SortableDataGrid(({displayName, columns} as Parameters));\n    const length = nodes.length;\n    const rootNode = dataGrid.rootNode();\n    for (let i = 0; i < length; ++i) {\n      rootNode.appendChild(nodes[i]);\n    }\n\n    dataGrid.addEventListener(Events.SORTING_CHANGED, sortDataGrid);\n\n    function sortDataGrid(): void {\n      const nodes = dataGrid.rootNode().children;\n      const sortColumnId = dataGrid.sortColumnId();\n      if (!sortColumnId) {\n        return;\n      }\n\n      let columnIsNumeric = true;\n      for (let i = 0; i < nodes.length; i++) {\n        const value = nodes[i].data[sortColumnId];\n        if (isNaN(value instanceof Node ? value.textContent : value)) {\n          columnIsNumeric = false;\n          break;\n        }\n      }\n\n      const comparator = columnIsNumeric ? SortableDataGrid.NumericComparator : SortableDataGrid.StringComparator;\n      dataGrid.sortNodes(comparator.bind(null, sortColumnId), !dataGrid.isSortOrderAscending());\n    }\n    return dataGrid;\n  }\n\n  insertChild(node: SortableDataGridNode<T>): void {\n    const root = (this.rootNode() as SortableDataGridNode<T>);\n    root.insertChildOrdered(node);\n  }\n\n  sortNodes(comparator: (arg0: SortableDataGridNode<T>, arg1: SortableDataGridNode<T>) => number, reverseMode: boolean):\n      void {\n    this.sortingFunction = SortableDataGrid.Comparator.bind(null, comparator, reverseMode);\n    this.rootNode().recalculateSiblings(0);\n    (this.rootNode() as SortableDataGridNode<T>).sortChildren();\n    this.scheduleUpdateStructure();\n  }\n}\n\nexport class SortableDataGridNode<T> extends ViewportDataGridNode<SortableDataGridNode<T>> {\n  constructor(data?: DataGridData|null, hasChildren?: boolean) {\n    super(data, hasChildren);\n  }\n\n  insertChildOrdered(node: SortableDataGridNode<T>): void {\n    const dataGrid = (this.dataGrid as SortableDataGrid<T>| null);\n    if (dataGrid) {\n      this.insertChild(\n          node,\n          Platform.ArrayUtilities.upperBound(\n              (this.children as SortableDataGridNode<T>[]), node, dataGrid.sortingFunction));\n    }\n  }\n\n  sortChildren(): void {\n    const dataGrid = (this.dataGrid as SortableDataGrid<T>| null);\n    if (!dataGrid) {\n      return;\n    }\n    (this.children as SortableDataGridNode<T>[]).sort(dataGrid.sortingFunction);\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = (this.children[i] as SortableDataGridNode<T>);\n      child.recalculateSiblings(i);\n    }\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = (this.children[i] as SortableDataGridNode<T>);\n      child.sortChildren();\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["nodes"]
}
