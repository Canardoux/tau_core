{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/GlassPane.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport type {Size} from './Geometry.js';\nimport glassPaneStyles from './glassPane.css.legacy.js';\nimport {deepElementFromEvent, measuredScrollbarWidth} from './UIUtils.js';\nimport {Widget} from './Widget.js';\n\nexport class GlassPane {\n  private readonly widgetInternal: Widget;\n  element: typeof Widget.prototype.element;\n  contentElement: typeof Widget.prototype.contentElement;\n  private readonly arrowElement: HTMLSpanElement;\n  private readonly onMouseDownBound: (event: Event) => void;\n  private onClickOutsideCallback: ((arg0: Event) => void)|null;\n  private maxSize: Size|null;\n  private positionX: number|null;\n  private positionY: number|null;\n  private anchorBox: AnchorBox|null;\n  private anchorBehavior: AnchorBehavior;\n  private sizeBehavior: SizeBehavior;\n  private marginBehavior: MarginBehavior;\n  #ignoreLeftMargin: boolean = false;\n\n  constructor(jslog?: string) {\n    this.widgetInternal = new Widget(true);\n    this.widgetInternal.markAsRoot();\n    this.element = this.widgetInternal.element;\n    this.contentElement = this.widgetInternal.contentElement;\n    if (jslog) {\n      this.contentElement.setAttribute('jslog', jslog);\n    }\n    this.arrowElement = document.createElement('span');\n    this.arrowElement.classList.add('arrow', 'hidden');\n    if (this.element.shadowRoot) {\n      this.element.shadowRoot.appendChild(this.arrowElement);\n    }\n\n    this.registerRequiredCSS(glassPaneStyles);\n    this.setPointerEventsBehavior(PointerEventsBehavior.PIERCE_GLASS_PANE);\n\n    this.onMouseDownBound = this.onMouseDown.bind(this);\n    this.onClickOutsideCallback = null;\n    this.maxSize = null;\n    this.positionX = null;\n    this.positionY = null;\n    this.anchorBox = null;\n    this.anchorBehavior = AnchorBehavior.PREFER_TOP;\n    this.sizeBehavior = SizeBehavior.SET_EXACT_SIZE;\n    this.marginBehavior = MarginBehavior.DEFAULT_MARGIN;\n  }\n\n  setJsLog(jslog: string): void {\n    this.contentElement.setAttribute('jslog', jslog);\n  }\n\n  isShowing(): boolean {\n    return this.widgetInternal.isShowing();\n  }\n\n  registerRequiredCSS(cssFile: {cssContent: string}): void {\n    this.widgetInternal.registerRequiredCSS(cssFile);\n  }\n\n  registerCSSFiles(cssFiles: CSSStyleSheet[]): void {\n    this.widgetInternal.registerCSSFiles(cssFiles);\n  }\n\n  setDefaultFocusedElement(element: Element|null): void {\n    this.widgetInternal.setDefaultFocusedElement(element);\n  }\n\n  setDimmed(dimmed: boolean): void {\n    this.element.classList.toggle('dimmed-pane', dimmed);\n  }\n\n  setPointerEventsBehavior(pointerEventsBehavior: PointerEventsBehavior): void {\n    this.element.classList.toggle(\n        'no-pointer-events', pointerEventsBehavior !== PointerEventsBehavior.BLOCKED_BY_GLASS_PANE);\n    this.contentElement.classList.toggle(\n        'no-pointer-events', pointerEventsBehavior === PointerEventsBehavior.PIERCE_CONTENTS);\n  }\n\n  setOutsideClickCallback(callback: ((arg0: Event) => void)|null): void {\n    this.onClickOutsideCallback = callback;\n  }\n\n  setMaxContentSize(size: Size|null): void {\n    this.maxSize = size;\n    this.positionContent();\n  }\n\n  setSizeBehavior(sizeBehavior: SizeBehavior): void {\n    this.sizeBehavior = sizeBehavior;\n    this.positionContent();\n  }\n\n  setContentPosition(x: number|null, y: number|null): void {\n    this.positionX = x;\n    this.positionY = y;\n    this.positionContent();\n  }\n\n  setContentAnchorBox(anchorBox: AnchorBox|null): void {\n    this.anchorBox = anchorBox;\n    this.positionContent();\n  }\n\n  setAnchorBehavior(behavior: AnchorBehavior): void {\n    this.anchorBehavior = behavior;\n  }\n\n  setMarginBehavior(behavior: MarginBehavior): void {\n    this.marginBehavior = behavior;\n    this.arrowElement.classList.toggle('hidden', behavior !== MarginBehavior.ARROW);\n  }\n\n  setIgnoreLeftMargin(ignore: boolean): void {\n    this.#ignoreLeftMargin = ignore;\n  }\n\n  show(document: Document): void {\n    if (this.isShowing()) {\n      return;\n    }\n    // TODO(crbug.com/1006759): Extract the magic number\n    // Deliberately starts with 3000 to hide other z-indexed elements below.\n    this.element.style.zIndex = `${3000 + 1000 * panes.size}`;\n    this.element.setAttribute('data-devtools-glass-pane', '');\n    document.body.addEventListener('mousedown', this.onMouseDownBound, true);\n    document.body.addEventListener('pointerdown', this.onMouseDownBound, true);\n    this.widgetInternal.show(document.body);\n    panes.add(this);\n    this.positionContent();\n  }\n\n  hide(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n    panes.delete(this);\n    this.element.ownerDocument.body.removeEventListener('mousedown', this.onMouseDownBound, true);\n    this.element.ownerDocument.body.removeEventListener('pointerdown', this.onMouseDownBound, true);\n    this.widgetInternal.detach();\n  }\n\n  private onMouseDown(event: Event): void {\n    if (!this.onClickOutsideCallback) {\n      return;\n    }\n    const node = deepElementFromEvent(event);\n    if (!node || this.contentElement.isSelfOrAncestor(node)) {\n      return;\n    }\n    this.onClickOutsideCallback.call(null, event);\n  }\n\n  positionContent(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    const showArrow = this.marginBehavior === MarginBehavior.ARROW;\n    const gutterSize = showArrow ? 8 : (this.marginBehavior === MarginBehavior.NO_MARGIN ? 0 : 3);\n    const scrollbarSize = measuredScrollbarWidth(this.element.ownerDocument);\n    const arrowSize = 10;\n\n    const container = (containers.get((this.element.ownerDocument as Document))) as HTMLElement;\n    if (this.sizeBehavior === SizeBehavior.MEASURE_CONTENT) {\n      this.contentElement.positionAt(0, 0);\n      this.contentElement.style.width = '';\n      this.contentElement.style.maxWidth = '';\n      this.contentElement.style.height = '';\n      this.contentElement.style.maxHeight = '';\n    }\n\n    const containerWidth = container.offsetWidth;\n    const containerHeight = container.offsetHeight;\n\n    let width = containerWidth - gutterSize * 2;\n    let height = containerHeight - gutterSize * 2;\n    let positionX = gutterSize;\n    let positionY = gutterSize;\n\n    if (this.maxSize) {\n      width = Math.min(width, this.maxSize.width);\n      height = Math.min(height, this.maxSize.height);\n    }\n\n    if (this.sizeBehavior === SizeBehavior.MEASURE_CONTENT) {\n      const measuredRect = this.contentElement.getBoundingClientRect();\n      const widthOverflow = height < measuredRect.height ? scrollbarSize : 0;\n      const heightOverflow = width < measuredRect.width ? scrollbarSize : 0;\n      width = Math.min(width, measuredRect.width + widthOverflow);\n      height = Math.min(height, measuredRect.height + heightOverflow);\n    }\n\n    if (this.anchorBox) {\n      const anchorBox = this.anchorBox.relativeToElement(container);\n      let behavior: AnchorBehavior.PREFER_BOTTOM|AnchorBehavior.PREFER_TOP|AnchorBehavior.PREFER_RIGHT|\n          AnchorBehavior.PREFER_LEFT|AnchorBehavior = this.anchorBehavior;\n      this.arrowElement.classList.remove('arrow-none', 'arrow-top', 'arrow-bottom', 'arrow-left', 'arrow-right');\n\n      if (behavior === AnchorBehavior.PREFER_TOP || behavior === AnchorBehavior.PREFER_BOTTOM) {\n        const top = anchorBox.y - 2 * gutterSize;\n        const bottom = containerHeight - anchorBox.y - anchorBox.height - 2 * gutterSize;\n        if (behavior === AnchorBehavior.PREFER_TOP && top < height && bottom > top) {\n          behavior = AnchorBehavior.PREFER_BOTTOM;\n        }\n        if (behavior === AnchorBehavior.PREFER_BOTTOM && bottom < height && top > bottom) {\n          behavior = AnchorBehavior.PREFER_TOP;\n        }\n\n        let arrowY;\n        let enoughHeight = true;\n        if (behavior === AnchorBehavior.PREFER_TOP) {\n          positionY = Math.max(gutterSize, anchorBox.y - height - gutterSize);\n          const spaceTop = anchorBox.y - positionY - gutterSize;\n          if (this.sizeBehavior === SizeBehavior.MEASURE_CONTENT) {\n            if (height > spaceTop) {\n              this.arrowElement.classList.add('arrow-none');\n              enoughHeight = false;\n            }\n          } else {\n            height = Math.min(height, spaceTop);\n          }\n          this.arrowElement.classList.add('arrow-bottom');\n          arrowY = anchorBox.y - gutterSize;\n        } else {\n          positionY = anchorBox.y + anchorBox.height + gutterSize;\n          const spaceBottom = containerHeight - positionY - gutterSize;\n          if (this.sizeBehavior === SizeBehavior.MEASURE_CONTENT) {\n            if (height > spaceBottom) {\n              this.arrowElement.classList.add('arrow-none');\n              positionY = containerHeight - gutterSize - height;\n              enoughHeight = false;\n            }\n          } else {\n            height = Math.min(height, spaceBottom);\n          }\n          this.arrowElement.classList.add('arrow-top');\n          arrowY = anchorBox.y + anchorBox.height + gutterSize;\n        }\n\n        const naturalPositionX = Math.min(anchorBox.x, containerWidth - width - gutterSize);\n        positionX = Math.max(gutterSize, naturalPositionX);\n        if (this.#ignoreLeftMargin && gutterSize > naturalPositionX) {\n          positionX = 0;\n        }\n\n        if (!enoughHeight) {\n          positionX = Math.min(positionX + arrowSize, containerWidth - width - gutterSize);\n        } else if (showArrow && positionX - arrowSize >= gutterSize) {\n          positionX -= arrowSize;\n        }\n        width = Math.min(width, containerWidth - positionX - gutterSize);\n        if (2 * arrowSize >= width) {\n          this.arrowElement.classList.add('arrow-none');\n        } else {\n          let arrowX: number = anchorBox.x + Math.min(50, Math.floor(anchorBox.width / 2));\n          arrowX = Platform.NumberUtilities.clamp(arrowX, positionX + arrowSize, positionX + width - arrowSize);\n          this.arrowElement.positionAt(arrowX, arrowY, container);\n        }\n      } else {\n        const left = anchorBox.x - 2 * gutterSize;\n        const right = containerWidth - anchorBox.x - anchorBox.width - 2 * gutterSize;\n        if (behavior === AnchorBehavior.PREFER_LEFT && left < width && right > left) {\n          behavior = AnchorBehavior.PREFER_RIGHT;\n        }\n        if (behavior === AnchorBehavior.PREFER_RIGHT && right < width && left > right) {\n          behavior = AnchorBehavior.PREFER_LEFT;\n        }\n\n        let arrowX;\n        let enoughWidth = true;\n        if (behavior === AnchorBehavior.PREFER_LEFT) {\n          positionX = Math.max(gutterSize, anchorBox.x - width - gutterSize);\n          const spaceLeft = anchorBox.x - positionX - gutterSize;\n          if (this.sizeBehavior === SizeBehavior.MEASURE_CONTENT) {\n            if (width > spaceLeft) {\n              this.arrowElement.classList.add('arrow-none');\n              enoughWidth = false;\n            }\n          } else {\n            width = Math.min(width, spaceLeft);\n          }\n          this.arrowElement.classList.add('arrow-right');\n          arrowX = anchorBox.x - gutterSize;\n        } else {\n          positionX = anchorBox.x + anchorBox.width + gutterSize;\n          const spaceRight = containerWidth - positionX - gutterSize;\n          if (this.sizeBehavior === SizeBehavior.MEASURE_CONTENT) {\n            if (width > spaceRight) {\n              this.arrowElement.classList.add('arrow-none');\n              positionX = containerWidth - gutterSize - width;\n              enoughWidth = false;\n            }\n          } else {\n            width = Math.min(width, spaceRight);\n          }\n          this.arrowElement.classList.add('arrow-left');\n          arrowX = anchorBox.x + anchorBox.width + gutterSize;\n        }\n\n        positionY = Math.max(gutterSize, Math.min(anchorBox.y, containerHeight - height - gutterSize));\n        if (!enoughWidth) {\n          positionY = Math.min(positionY + arrowSize, containerHeight - height - gutterSize);\n        } else if (showArrow && positionY - arrowSize >= gutterSize) {\n          positionY -= arrowSize;\n        }\n        height = Math.min(height, containerHeight - positionY - gutterSize);\n        if (2 * arrowSize >= height) {\n          this.arrowElement.classList.add('arrow-none');\n        } else {\n          let arrowY: number = anchorBox.y + Math.min(50, Math.floor(anchorBox.height / 2));\n          arrowY = Platform.NumberUtilities.clamp(arrowY, positionY + arrowSize, positionY + height - arrowSize);\n          this.arrowElement.positionAt(arrowX, arrowY, container);\n        }\n      }\n    } else {\n      positionX = this.positionX !== null ? this.positionX : (containerWidth - width) / 2;\n      positionY = this.positionY !== null ? this.positionY : (containerHeight - height) / 2;\n      width = Math.min(width, containerWidth - positionX - gutterSize);\n      height = Math.min(height, containerHeight - positionY - gutterSize);\n      this.arrowElement.classList.add('arrow-none');\n    }\n\n    this.contentElement.style.width = width + 'px';\n    if (this.sizeBehavior === SizeBehavior.SET_EXACT_WIDTH_MAX_HEIGHT) {\n      this.contentElement.style.maxHeight = height + 'px';\n    } else {\n      this.contentElement.style.height = height + 'px';\n    }\n\n    this.contentElement.positionAt(positionX, positionY, container);\n    this.widgetInternal.doResize();\n  }\n\n  widget(): Widget {\n    return this.widgetInternal;\n  }\n\n  static setContainer(element: Element): void {\n    containers.set((element.ownerDocument as Document), element);\n    GlassPane.containerMoved(element);\n  }\n\n  static container(document: Document): Element {\n    return containers.get(document) as Element;\n  }\n\n  static containerMoved(element: Element): void {\n    for (const pane of panes) {\n      if (pane.isShowing() && pane.element.ownerDocument === element.ownerDocument) {\n        pane.positionContent();\n      }\n    }\n  }\n}\n\nexport const enum PointerEventsBehavior {\n  BLOCKED_BY_GLASS_PANE = 'BlockedByGlassPane',\n  PIERCE_GLASS_PANE = 'PierceGlassPane',\n  PIERCE_CONTENTS = 'PierceContents',\n}\n\nexport const enum AnchorBehavior {\n  PREFER_TOP = 'PreferTop',\n  PREFER_BOTTOM = 'PreferBottom',\n  PREFER_LEFT = 'PreferLeft',\n  PREFER_RIGHT = 'PreferRight',\n}\n\nexport const enum SizeBehavior {\n  SET_EXACT_SIZE = 'SetExactSize',\n  SET_EXACT_WIDTH_MAX_HEIGHT = 'SetExactWidthMaxHeight',\n  MEASURE_CONTENT = 'MeasureContent',\n}\n\nexport const enum MarginBehavior {\n  ARROW = 'Arrow',\n  DEFAULT_MARGIN = 'DefaultMargin',\n  NO_MARGIN = 'NoMargin',\n}\n\nconst containers = new Map<Document, Element>();\nconst panes = new Set<GlassPane>();\n\n// Exported for layout tests.\nexport const GlassPanePanes = panes;\n"],
  "mappings": "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",
  "names": ["document", "PointerEventsBehavior", "AnchorBehavior", "SizeBehavior", "MarginBehavior"]
}
