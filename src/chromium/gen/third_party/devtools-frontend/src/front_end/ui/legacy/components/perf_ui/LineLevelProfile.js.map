{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/perf_ui/LineLevelProfile.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../../models/bindings/bindings.js';\nimport * as Workspace from '../../../../models/workspace/workspace.js';\nimport * as SourceFrame from '../source_frame/source_frame.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport type * as CPUProfile from '../../../../models/cpu_profile/cpu_profile.js';\n\nlet performanceInstance: Performance;\n\nexport class Performance {\n  private readonly helper: Helper;\n\n  private constructor() {\n    this.helper = new Helper(SourceFrame.SourceFrame.DecoratorType.PERFORMANCE);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): Performance {\n    const {forceNew} = opts;\n    if (!performanceInstance || forceNew) {\n      performanceInstance = new Performance();\n    }\n\n    return performanceInstance;\n  }\n\n  reset(): void {\n    this.helper.reset();\n  }\n\n  private appendLegacyCPUProfile(\n      profile: CPUProfile.CPUProfileDataModel.CPUProfileDataModel, target: SDK.Target.Target|null): void {\n    const nodesToGo: CPUProfile.CPUProfileDataModel.CPUProfileNode[] = [profile.profileHead];\n    const sampleDuration = (profile.profileEndTime - profile.profileStartTime) / profile.totalHitCount;\n    while (nodesToGo.length) {\n      const nodes: CPUProfile.CPUProfileDataModel.CPUProfileNode[] =\n          // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (nodesToGo.pop() as any).children;  // Cast to any because runtime checks assert the props.\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        nodesToGo.push(node);\n        if (!node.url || !node.positionTicks) {\n          continue;\n        }\n        for (let j = 0; j < node.positionTicks.length; ++j) {\n          const lineInfo = node.positionTicks[j];\n          const line = lineInfo.line;\n          const time = lineInfo.ticks * sampleDuration;\n          this.helper.addLineData(target, node.url, line, time);\n        }\n      }\n    }\n  }\n\n  appendCPUProfile(profile: CPUProfile.CPUProfileDataModel.CPUProfileDataModel, target: SDK.Target.Target|null): void {\n    if (!profile.lines) {\n      this.appendLegacyCPUProfile(profile, target);\n      this.helper.scheduleUpdate();\n      return;\n    }\n    if (!profile.samples) {\n      return;\n    }\n\n    for (let i = 1; i < profile.samples.length; ++i) {\n      const line = profile.lines[i];\n      if (!line) {\n        continue;\n      }\n      const node = profile.nodeByIndex(i);\n      if (!node) {\n        continue;\n      }\n      const scriptIdOrUrl = Number(node.scriptId) || node.url;\n      if (!scriptIdOrUrl) {\n        continue;\n      }\n      const time = profile.timestamps[i] - profile.timestamps[i - 1];\n      this.helper.addLineData(target, scriptIdOrUrl, line, time);\n    }\n    this.helper.scheduleUpdate();\n  }\n}\n\nlet memoryInstance: Memory;\n\nexport class Memory {\n  private readonly helper: Helper;\n  private constructor() {\n    this.helper = new Helper(SourceFrame.SourceFrame.DecoratorType.MEMORY);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): Memory {\n    const {forceNew} = opts;\n    if (!memoryInstance || forceNew) {\n      memoryInstance = new Memory();\n    }\n\n    return memoryInstance;\n  }\n\n  reset(): void {\n    this.helper.reset();\n  }\n\n  appendHeapProfile(profile: Protocol.HeapProfiler.SamplingHeapProfile, target: SDK.Target.Target|null): void {\n    const helper = this.helper;\n    processNode(profile.head);\n    helper.scheduleUpdate();\n\n    function processNode(node: Protocol.HeapProfiler.SamplingHeapProfileNode): void {\n      node.children.forEach(processNode);\n      if (!node.selfSize) {\n        return;\n      }\n      const script = Number(node.callFrame.scriptId) || node.callFrame.url as Platform.DevToolsPath.UrlString;\n      if (!script) {\n        return;\n      }\n      const line = node.callFrame.lineNumber + 1;\n      helper.addLineData(target, script, line, node.selfSize);\n    }\n  }\n}\n\nexport class Helper {\n  private readonly type: string;\n  private readonly locationPool: Bindings.LiveLocation.LiveLocationPool;\n  private updateTimer: number|null;\n  private lineData!: Map<SDK.Target.Target|null, Map<Platform.DevToolsPath.UrlString|number, Map<number, number>>>;\n\n  constructor(type: string) {\n    this.type = type;\n    this.locationPool = new Bindings.LiveLocation.LiveLocationPool();\n    this.updateTimer = null;\n    this.reset();\n  }\n\n  reset(): void {\n    // The second map uses string keys for script URLs and numbers for scriptId.\n    this.lineData = new Map();\n    this.scheduleUpdate();\n  }\n\n  addLineData(\n      target: SDK.Target.Target|null, scriptIdOrUrl: Platform.DevToolsPath.UrlString|number, line: number,\n      data: number): void {\n    let targetData = this.lineData.get(target);\n    if (!targetData) {\n      targetData = new Map();\n      this.lineData.set(target, targetData);\n    }\n    let scriptData = targetData.get(scriptIdOrUrl);\n    if (!scriptData) {\n      scriptData = new Map();\n      targetData.set(scriptIdOrUrl, scriptData);\n    }\n    scriptData.set(line, (scriptData.get(line) || 0) + data);\n  }\n\n  scheduleUpdate(): void {\n    if (this.updateTimer) {\n      return;\n    }\n    this.updateTimer = window.setTimeout(() => {\n      this.updateTimer = null;\n      void this.doUpdate();\n    }, 0);\n  }\n\n  private async doUpdate(): Promise<void> {\n    this.locationPool.disposeAll();\n    // Map from sources to line->value profile maps.\n    const decorationsBySource = new Map<Workspace.UISourceCode.UISourceCode, Map<number, number>>();\n    const pending: Promise<void>[] = [];\n\n    for (const [target, scriptToLineMap] of this.lineData) {\n      const debuggerModel = target ? target.model(SDK.DebuggerModel.DebuggerModel) : null;\n      for (const [scriptIdOrUrl, lineToDataMap] of scriptToLineMap) {\n        // debuggerModel is null when the profile is loaded from file.\n        // Try to get UISourceCode by the URL in this case.\n        const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n        if (debuggerModel) {\n          const workspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n          for (const lineToData of lineToDataMap) {\n            const line = lineToData[0] - 1;\n            const data = lineToData[1];\n            const rawLocation = typeof scriptIdOrUrl === 'string' ?\n                debuggerModel.createRawLocationByURL(scriptIdOrUrl, line, 0) :\n                debuggerModel.createRawLocationByScriptId(String(scriptIdOrUrl) as Protocol.Runtime.ScriptId, line, 0);\n            if (rawLocation) {\n              pending.push(workspaceBinding.rawLocationToUILocation(rawLocation).then(uiLocation => {\n                if (uiLocation) {\n                  let lineMap = decorationsBySource.get(uiLocation.uiSourceCode);\n                  if (!lineMap) {\n                    lineMap = new Map<number, number>();\n                    decorationsBySource.set(uiLocation.uiSourceCode, lineMap);\n                  }\n                  lineMap.set(uiLocation.lineNumber + 1, data);\n                }\n              }));\n            }\n          }\n        } else if (typeof scriptIdOrUrl === 'string') {\n          const uiSourceCode = workspace.uiSourceCodeForURL(scriptIdOrUrl);\n          if (uiSourceCode) {\n            decorationsBySource.set(uiSourceCode, lineToDataMap);\n          }\n        }\n      }\n      await Promise.all(pending);\n      for (const [uiSourceCode, lineMap] of decorationsBySource) {\n        uiSourceCode.setDecorationData(this.type, lineMap);\n      }\n    }\n    for (const uiSourceCode of Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodes()) {\n      if (!decorationsBySource.has(uiSourceCode)) {\n        uiSourceCode.setDecorationData(this.type, undefined);\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
