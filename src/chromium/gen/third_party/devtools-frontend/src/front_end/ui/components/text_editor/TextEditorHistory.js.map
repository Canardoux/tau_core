{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/text_editor/TextEditorHistory.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CodeMirror from '../../../third_party/codemirror.next/codemirror.next.js';\n\nimport type {AutocompleteHistory} from './AutocompleteHistory.js';\nimport type {TextEditor} from './TextEditor.js';\n\nexport const enum Direction {\n  FORWARD = 1,\n  BACKWARD = -1,\n}\n\n/**\n * Small helper class that connects a `TextEditor` and an `AutocompleteHistory`\n * instance.\n */\nexport class TextEditorHistory {\n  #editor: TextEditor;\n  #history: AutocompleteHistory;\n\n  constructor(editor: TextEditor, history: AutocompleteHistory) {\n    this.#editor = editor;\n    this.#history = history;\n  }\n\n  /**\n   * Replaces the text editor content with entries from the history. Does nothing\n   * if the cursor is not positioned correctly (unless `force` is `true`).\n   */\n  moveHistory(dir: Direction, force = false): boolean {\n    const {editor} = this.#editor, {main} = editor.state.selection;\n    const isBackward = dir === Direction.BACKWARD;\n    if (!force) {\n      if (!main.empty) {\n        return false;\n      }\n      const cursorCoords = editor.coordsAtPos(main.head);\n      const endCoords = editor.coordsAtPos(isBackward ? 0 : editor.state.doc.length);\n      // Check if there are wrapped lines in this direction, and let\n      // the cursor move normally if there are.\n      if (cursorCoords && endCoords &&\n          (isBackward ? cursorCoords.top > endCoords.top + 5 : cursorCoords.bottom < endCoords.bottom - 5)) {\n        return false;\n      }\n    }\n\n    const text = editor.state.doc.toString();\n    const history = this.#history;\n    const newText = isBackward ? history.previous(text) : history.next();\n    if (newText === undefined) {\n      return false;\n    }\n\n    // Change the prompt input to the history content, and scroll to the end to\n    // bring the full content (potentially multiple lines) into view.\n    const cursorPos = newText.length;\n    editor.dispatch({\n      changes: {from: 0, to: editor.state.doc.length, insert: newText},\n      selection: CodeMirror.EditorSelection.cursor(cursorPos),\n      scrollIntoView: true,\n    });\n    if (isBackward) {\n      // If we are going back in history, put the cursor to the end of the first line\n      // so that the user can quickly go further back in history.\n      const firstLineBreak = newText.search(/\\n|$/);\n      editor.dispatch({\n        selection: CodeMirror.EditorSelection.cursor(firstLineBreak),\n      });\n    }\n    return true;\n  }\n\n  historyCompletions(context: CodeMirror.CompletionContext): CodeMirror.CompletionResult|null {\n    const {explicit, pos, state} = context;\n    const text = state.doc.toString();\n    const caretIsAtEndOfPrompt = pos === text.length;\n    if (!caretIsAtEndOfPrompt || (!text.length && !explicit)) {\n      return null;\n    }\n\n    const matchingEntries = this.#history.matchingEntries(text);\n    if (!matchingEntries.size) {\n      return null;\n    }\n    const options = [...matchingEntries].map(label => ({label, type: 'secondary', boost: -1e5}));\n    return {from: 0, to: text.length, options};\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,gBAAgB;AAKrB,WAAW,YAAX,kBAAWA,eAAX;AACL,EAAAA,sBAAA,aAAU,KAAV;AACA,EAAAA,sBAAA,cAAW,MAAX;AAFgB,SAAAA;AAAA,GAAA;AASX,aAAM,kBAAkB;AAAA,EAC7B;AAAA,EACA;AAAA,EAEA,YAAY,QAAoB,SAA8B;AAC5D,SAAK,UAAU;AACf,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,KAAgB,QAAQ,OAAgB;AAClD,UAAM,EAAC,OAAM,IAAI,KAAK,SAAS,EAAC,KAAI,IAAI,OAAO,MAAM;AACrD,UAAM,aAAa,QAAQ;AAC3B,QAAI,CAAC,OAAO;AACV,UAAI,CAAC,KAAK,OAAO;AACf,eAAO;AAAA,MACT;AACA,YAAM,eAAe,OAAO,YAAY,KAAK,IAAI;AACjD,YAAM,YAAY,OAAO,YAAY,aAAa,IAAI,OAAO,MAAM,IAAI,MAAM;AAG7E,UAAI,gBAAgB,cACf,aAAa,aAAa,MAAM,UAAU,MAAM,IAAI,aAAa,SAAS,UAAU,SAAS,IAAI;AACpG,eAAO;AAAA,MACT;AAAA,IACF;AAEA,UAAM,OAAO,OAAO,MAAM,IAAI,SAAS;AACvC,UAAM,UAAU,KAAK;AACrB,UAAM,UAAU,aAAa,QAAQ,SAAS,IAAI,IAAI,QAAQ,KAAK;AACnE,QAAI,YAAY,QAAW;AACzB,aAAO;AAAA,IACT;AAIA,UAAM,YAAY,QAAQ;AAC1B,WAAO,SAAS;AAAA,MACd,SAAS,EAAC,MAAM,GAAG,IAAI,OAAO,MAAM,IAAI,QAAQ,QAAQ,QAAO;AAAA,MAC/D,WAAW,WAAW,gBAAgB,OAAO,SAAS;AAAA,MACtD,gBAAgB;AAAA,IAClB,CAAC;AACD,QAAI,YAAY;AAGd,YAAM,iBAAiB,QAAQ,OAAO,MAAM;AAC5C,aAAO,SAAS;AAAA,QACd,WAAW,WAAW,gBAAgB,OAAO,cAAc;AAAA,MAC7D,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA,EAEA,mBAAmB,SAAyE;AAC1F,UAAM,EAAC,UAAU,KAAK,MAAK,IAAI;AAC/B,UAAM,OAAO,MAAM,IAAI,SAAS;AAChC,UAAM,uBAAuB,QAAQ,KAAK;AAC1C,QAAI,CAAC,wBAAyB,CAAC,KAAK,UAAU,CAAC,UAAW;AACxD,aAAO;AAAA,IACT;AAEA,UAAM,kBAAkB,KAAK,SAAS,gBAAgB,IAAI;AAC1D,QAAI,CAAC,gBAAgB,MAAM;AACzB,aAAO;AAAA,IACT;AACA,UAAM,UAAU,CAAC,GAAG,eAAe,EAAE,IAAI,YAAU,EAAC,OAAO,MAAM,aAAa,OAAO,KAAI,EAAE;AAC3F,WAAO,EAAC,MAAM,GAAG,IAAI,KAAK,QAAQ,QAAO;AAAA,EAC3C;AACF;",
  "names": ["Direction"]
}
