{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/InspectorView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as IconButton from '../components/icon_button/icon_button.js';\nimport * as VisualLogging from '../visual_logging/visual_logging.js';\n\nimport type {ActionDelegate as ActionDelegateInterface} from './ActionRegistration.js';\nimport {ActionRegistry} from './ActionRegistry.js';\nimport * as ARIAUtils from './ARIAUtils.js';\nimport type {Context} from './Context.js';\nimport type {ContextMenu} from './ContextMenu.js';\nimport {Dialog} from './Dialog.js';\nimport {DockController, DockState} from './DockController.js';\nimport {GlassPane} from './GlassPane.js';\nimport {Infobar, Type as InfobarType} from './Infobar.js';\nimport inspectorViewTabbedPaneStyles from './inspectorViewTabbedPane.css.legacy.js';\nimport {KeyboardShortcut} from './KeyboardShortcut.js';\nimport type {Panel} from './Panel.js';\nimport {ShowMode, SplitWidget} from './SplitWidget.js';\nimport {type EventData, Events as TabbedPaneEvents, type TabbedPane, type TabbedPaneTabDelegate} from './TabbedPane.js';\nimport {ToolbarButton} from './Toolbar.js';\nimport {Tooltip} from './Tooltip.js';\nimport type {TabbedViewLocation, View, ViewLocation, ViewLocationResolver} from './View.js';\nimport {ViewManager} from './ViewManager.js';\nimport {VBox, type Widget, WidgetFocusRestorer} from './Widget.js';\n\nconst UIStrings = {\n  /**\n   *@description Title of more tabs button in inspector view\n   */\n  moreTools: 'More Tools',\n  /**\n   *@description Text that appears when hovor over the close button on the drawer view\n   */\n  closeDrawer: 'Close drawer',\n  /**\n   *@description The aria label for main tabbed pane that contains Panels\n   */\n  panels: 'Panels',\n  /**\n   *@description Title of an action that reloads the tab currently being debugged by DevTools\n   */\n  reloadDebuggedTab: 'Reload',\n  /**\n   *@description Title of an action that reloads the DevTools\n   */\n  reloadDevtools: 'Reload DevTools',\n  /**\n   *@description Text for context menu action to move a tab to the main panel\n   */\n  moveToTop: 'Move to top',\n  /**\n   *@description Text for context menu action to move a tab to the drawer\n   */\n  moveToBottom: 'Move to bottom',\n  /**\n   * @description Text shown in a prompt to the user when DevTools is started and the\n   * currently selected DevTools locale does not match Chrome's locale.\n   * The placeholder is the current Chrome language.\n   * @example {German} PH1\n   */\n  devToolsLanguageMissmatch: 'DevTools is now available in {PH1}!',\n  /**\n   * @description An option the user can select when we notice that DevTools\n   * is configured with a different locale than Chrome. This option means DevTools will\n   * always try and display the DevTools UI in the same language as Chrome.\n   */\n  setToBrowserLanguage: 'Always match Chrome\\'s language',\n  /**\n   * @description An option the user can select when DevTools notices that DevTools\n   * is configured with a different locale than Chrome. This option means DevTools UI\n   * will be switched to the language specified in the placeholder.\n   * @example {German} PH1\n   */\n  setToSpecificLanguage: 'Switch DevTools to {PH1}',\n  /**\n   *@description The aria label for main toolbar\n   */\n  mainToolbar: 'Main toolbar',\n  /**\n   *@description The aria label for the drawer.\n   */\n  drawer: 'Tool drawer',\n  /**\n   *@description The aria label for the drawer shown.\n   */\n  drawerShown: 'Drawer shown',\n  /**\n   *@description The aria label for the drawer hidden.\n   */\n  drawerHidden: 'Drawer hidden',\n  /**\n   * @description Request for the user to select a local file system folder for DevTools\n   * to store local overrides in.\n   */\n  selectOverrideFolder: 'Select a folder to store override files in.',\n  /**\n   *@description Label for a button which opens a file picker.\n   */\n  selectFolder: 'Select folder',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/InspectorView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet inspectorViewInstance: InspectorView|null = null;\n\nexport class InspectorView extends VBox implements ViewLocationResolver {\n  private readonly drawerSplitWidget: SplitWidget;\n  private readonly tabDelegate: InspectorViewTabDelegate;\n  private readonly drawerTabbedLocation: TabbedViewLocation;\n  private drawerTabbedPane: TabbedPane;\n  private infoBarDiv!: HTMLDivElement|null;\n  private readonly tabbedLocation: TabbedViewLocation;\n  readonly tabbedPane: TabbedPane;\n  private readonly keyDownBound: (event: Event) => void;\n  private currentPanelLocked?: boolean;\n  private focusRestorer?: WidgetFocusRestorer|null;\n  private ownerSplitWidget?: SplitWidget;\n  private reloadRequiredInfobar?: Infobar;\n  #selectOverrideFolderInfobar?: Infobar;\n\n  constructor() {\n    super();\n    GlassPane.setContainer(this.element);\n    this.setMinimumSize(250, 72);\n\n    // DevTools sidebar is a vertical split of panels tabbed pane and a drawer.\n    this.drawerSplitWidget = new SplitWidget(false, true, 'inspector.drawer-split-view-state', 200, 200);\n    this.drawerSplitWidget.hideSidebar();\n    this.drawerSplitWidget.enableShowModeSaving();\n    this.drawerSplitWidget.show(this.element);\n\n    this.tabDelegate = new InspectorViewTabDelegate();\n\n    // Create drawer tabbed pane.\n    this.drawerTabbedLocation = ViewManager.instance().createTabbedLocation(\n        this.showDrawer.bind(this, {\n          focus: false,\n          hasTargetDrawer: true,\n        }),\n        'drawer-view', true, true);\n    const moreTabsButton = this.drawerTabbedLocation.enableMoreTabsButton();\n    moreTabsButton.setTitle(i18nString(UIStrings.moreTools));\n    this.drawerTabbedPane = this.drawerTabbedLocation.tabbedPane();\n    this.drawerTabbedPane.setMinimumSize(0, 27);\n    this.drawerTabbedPane.element.classList.add('drawer-tabbed-pane');\n    this.drawerTabbedPane.element.setAttribute('jslog', `${VisualLogging.drawer()}`);\n    const closeDrawerButton = new ToolbarButton(i18nString(UIStrings.closeDrawer), 'cross');\n    closeDrawerButton.element.setAttribute('jslog', `${VisualLogging.close().track({click: true})}`);\n    closeDrawerButton.addEventListener(ToolbarButton.Events.CLICK, this.closeDrawer, this);\n    this.drawerTabbedPane.addEventListener(\n        TabbedPaneEvents.TabSelected,\n        (event: Common.EventTarget.EventTargetEvent<EventData>) => this.tabSelected(event.data.tabId, 'drawer'), this);\n    const selectedDrawerTab = this.drawerTabbedPane.selectedTabId;\n    if (this.drawerSplitWidget.showMode() !== ShowMode.ONLY_MAIN && selectedDrawerTab) {\n      Host.userMetrics.panelShown(selectedDrawerTab, true);\n      Host.userMetrics.panelShownInLocation(selectedDrawerTab, 'drawer');\n    }\n    this.drawerTabbedPane.setTabDelegate(this.tabDelegate);\n\n    const drawerElement = this.drawerTabbedPane.element;\n    ARIAUtils.markAsComplementary(drawerElement);\n    ARIAUtils.setLabel(drawerElement, i18nString(UIStrings.drawer));\n\n    this.drawerSplitWidget.installResizer(this.drawerTabbedPane.headerElement());\n    this.drawerSplitWidget.setSidebarWidget(this.drawerTabbedPane);\n    this.drawerTabbedPane.rightToolbar().appendToolbarItem(closeDrawerButton);\n    this.drawerTabbedPane.headerElement().setAttribute('jslog', `${VisualLogging.toolbar('drawer').track({\n                                                         drag: true,\n                                                         keydown: 'ArrowUp|ArrowLeft|ArrowDown|ArrowRight|Enter|Space',\n                                                       })}`);\n\n    // Create main area tabbed pane.\n    this.tabbedLocation = ViewManager.instance().createTabbedLocation(\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront.bind(\n            Host.InspectorFrontendHost.InspectorFrontendHostInstance),\n        'panel', true, true, Root.Runtime.Runtime.queryParam('panel'));\n\n    this.tabbedPane = this.tabbedLocation.tabbedPane();\n    this.tabbedPane.element.classList.add('main-tabbed-pane');\n    // The 'Inspect element' and 'Device mode' buttons in the tabs toolbar takes longer to load than\n    // the tabs themselves, so a space equal to the buttons' total width is preemptively allocated\n    // to prevent to prevent a shift in the tab layout. Note that when DevTools cannot be docked,\n    // the Device mode button is not added and so the allocated space is smaller.\n    const allocatedSpace = Root.Runtime.conditions.canDock() ? '69px' : '41px';\n    this.tabbedPane.leftToolbar().element.style.minWidth = allocatedSpace;\n    this.tabbedPane.registerRequiredCSS(inspectorViewTabbedPaneStyles);\n    this.tabbedPane.addEventListener(\n        TabbedPaneEvents.TabSelected,\n        (event: Common.EventTarget.EventTargetEvent<EventData>) => this.tabSelected(event.data.tabId, 'main'), this);\n    const selectedTab = this.tabbedPane.selectedTabId;\n    if (selectedTab) {\n      Host.userMetrics.panelShown(selectedTab, true);\n      Host.userMetrics.panelShownInLocation(selectedTab, 'main');\n    }\n    this.tabbedPane.setAccessibleName(i18nString(UIStrings.panels));\n    this.tabbedPane.setTabDelegate(this.tabDelegate);\n\n    const mainHeaderElement = this.tabbedPane.headerElement();\n    ARIAUtils.markAsNavigation(mainHeaderElement);\n    ARIAUtils.setLabel(mainHeaderElement, i18nString(UIStrings.mainToolbar));\n    mainHeaderElement.setAttribute('jslog', `${VisualLogging.toolbar('main').track({\n                                     drag: true,\n                                     keydown: 'ArrowUp|ArrowLeft|ArrowDown|ArrowRight|Enter|Space',\n                                   })}`);\n\n    // Store the initial selected panel for use in launch histograms\n    Host.userMetrics.setLaunchPanel(this.tabbedPane.selectedTabId);\n\n    if (Host.InspectorFrontendHost.isUnderTest()) {\n      this.tabbedPane.setAutoSelectFirstItemOnShow(false);\n    }\n    this.drawerSplitWidget.setMainWidget(this.tabbedPane);\n\n    this.keyDownBound = this.keyDown.bind(this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.ShowPanel, showPanel.bind(this));\n\n    function showPanel(this: InspectorView, {data: panelName}: Common.EventTarget.EventTargetEvent<string>): void {\n      void this.showPanel(panelName);\n    }\n\n    if (shouldShowLocaleInfobar()) {\n      const infobar = createLocaleInfobar();\n      infobar.setParentView(this);\n      this.attachInfobar(infobar);\n    }\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): InspectorView {\n    const {forceNew} = opts;\n    if (!inspectorViewInstance || forceNew) {\n      inspectorViewInstance = new InspectorView();\n    }\n\n    return inspectorViewInstance;\n  }\n\n  static maybeGetInspectorViewInstance(): InspectorView|null {\n    return inspectorViewInstance;\n  }\n\n  static removeInstance(): void {\n    inspectorViewInstance = null;\n  }\n\n  override wasShown(): void {\n    this.element.ownerDocument.addEventListener('keydown', this.keyDownBound, false);\n  }\n\n  override willHide(): void {\n    this.element.ownerDocument.removeEventListener('keydown', this.keyDownBound, false);\n  }\n\n  resolveLocation(locationName: string): ViewLocation|null {\n    if (locationName === 'drawer-view') {\n      return this.drawerTabbedLocation;\n    }\n    if (locationName === 'panel') {\n      return this.tabbedLocation;\n    }\n    return null;\n  }\n\n  async createToolbars(): Promise<void> {\n    await this.tabbedPane.leftToolbar().appendItemsAtLocation('main-toolbar-left');\n    await this.tabbedPane.rightToolbar().appendItemsAtLocation('main-toolbar-right');\n  }\n\n  addPanel(view: View): void {\n    this.tabbedLocation.appendView(view);\n  }\n\n  hasPanel(panelName: string): boolean {\n    return this.tabbedPane.hasTab(panelName);\n  }\n\n  async panel(panelName: string): Promise<Panel> {\n    const view = ViewManager.instance().view(panelName);\n    if (!view) {\n      throw new Error(`Expected view for panel '${panelName}'`);\n    }\n    return view.widget() as Promise<Panel>;\n  }\n\n  onSuspendStateChanged(allTargetsSuspended: boolean): void {\n    this.currentPanelLocked = allTargetsSuspended;\n    this.tabbedPane.setCurrentTabLocked(this.currentPanelLocked);\n    this.tabbedPane.leftToolbar().setEnabled(!this.currentPanelLocked);\n    this.tabbedPane.rightToolbar().setEnabled(!this.currentPanelLocked);\n  }\n\n  canSelectPanel(panelName: string): boolean {\n    return !this.currentPanelLocked || this.tabbedPane.selectedTabId === panelName;\n  }\n\n  async showPanel(panelName: string): Promise<void> {\n    await ViewManager.instance().showView(panelName);\n  }\n\n  setPanelWarnings(tabId: string, warnings: string[]): void {\n    // Find the tabbed location where the panel lives\n    const tabbedPane = this.getTabbedPaneForTabId(tabId);\n    if (tabbedPane) {\n      let icon: IconButton.Icon.Icon|null = null;\n      if (warnings.length !== 0) {\n        const warning = warnings.length === 1 ? warnings[0] : '\u00B7 ' + warnings.join('\\n\u00B7 ');\n        icon = IconButton.Icon.create('warning-filled');\n        Tooltip.install(icon, warning);\n      }\n      tabbedPane.setTabIcon(tabId, icon);\n    }\n  }\n\n  private emitDrawerChangeEvent(isDrawerOpen: boolean): void {\n    const evt = new CustomEvent(Events.DRAWER_CHANGE, {bubbles: true, cancelable: true, detail: {isDrawerOpen}});\n    document.body.dispatchEvent(evt);\n  }\n\n  private getTabbedPaneForTabId(tabId: string): TabbedPane|null {\n    // Tab exists in the main panel\n    if (this.tabbedPane.hasTab(tabId)) {\n      return this.tabbedPane;\n    }\n\n    // Tab exists in the drawer\n    if (this.drawerTabbedPane.hasTab(tabId)) {\n      return this.drawerTabbedPane;\n    }\n\n    // Tab is not open\n    return null;\n  }\n\n  currentPanelDeprecated(): Widget|null {\n    return (ViewManager.instance().materializedWidget(this.tabbedPane.selectedTabId || '') as Widget | null);\n  }\n\n  showDrawer({focus, hasTargetDrawer}: {focus: boolean, hasTargetDrawer: boolean}): void {\n    if (this.drawerTabbedPane.isShowing()) {\n      return;\n    }\n    // Only auto-select the first drawer (console) when no drawer is chosen specifically.\n    this.drawerTabbedPane.setAutoSelectFirstItemOnShow(!hasTargetDrawer);\n    this.drawerSplitWidget.showBoth();\n    if (focus) {\n      this.focusRestorer = new WidgetFocusRestorer(this.drawerTabbedPane);\n    } else {\n      this.focusRestorer = null;\n    }\n    this.emitDrawerChangeEvent(true);\n    ARIAUtils.alert(i18nString(UIStrings.drawerShown));\n  }\n\n  drawerVisible(): boolean {\n    return this.drawerTabbedPane.isShowing();\n  }\n\n  closeDrawer(): void {\n    if (!this.drawerTabbedPane.isShowing()) {\n      return;\n    }\n    if (this.focusRestorer) {\n      this.focusRestorer.restore();\n    }\n    this.drawerSplitWidget.hideSidebar(true);\n\n    this.emitDrawerChangeEvent(false);\n    ARIAUtils.alert(i18nString(UIStrings.drawerHidden));\n  }\n\n  setDrawerMinimized(minimized: boolean): void {\n    this.drawerSplitWidget.setSidebarMinimized(minimized);\n    this.drawerSplitWidget.setResizable(!minimized);\n  }\n\n  isDrawerMinimized(): boolean {\n    return this.drawerSplitWidget.isSidebarMinimized();\n  }\n\n  closeDrawerTab(id: string, userGesture?: boolean): void {\n    this.drawerTabbedPane.closeTab(id, userGesture);\n  }\n\n  private keyDown(event: Event): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    if (!KeyboardShortcut.eventHasCtrlEquivalentKey(keyboardEvent) || keyboardEvent.altKey || keyboardEvent.shiftKey) {\n      return;\n    }\n\n    // Ctrl/Cmd + 1-9 should show corresponding panel.\n    const panelShortcutEnabled = Common.Settings.moduleSetting('shortcut-panel-switch').get();\n    if (panelShortcutEnabled) {\n      let panelIndex = -1;\n      if (keyboardEvent.keyCode > 0x30 && keyboardEvent.keyCode < 0x3A) {\n        panelIndex = keyboardEvent.keyCode - 0x31;\n      } else if (\n          keyboardEvent.keyCode > 0x60 && keyboardEvent.keyCode < 0x6A &&\n          keyboardEvent.location === KeyboardEvent.DOM_KEY_LOCATION_NUMPAD) {\n        panelIndex = keyboardEvent.keyCode - 0x61;\n      }\n      if (panelIndex !== -1) {\n        const panelName = this.tabbedPane.tabIds()[panelIndex];\n        if (panelName) {\n          if (!Dialog.hasInstance() && !this.currentPanelLocked) {\n            void this.showPanel(panelName);\n            void VisualLogging.logKeyDown(null, event, `panel-by-index-${panelName}`);\n          }\n          event.consume(true);\n        }\n      }\n    }\n  }\n\n  override onResize(): void {\n    GlassPane.containerMoved(this.element);\n  }\n\n  topResizerElement(): Element {\n    return this.tabbedPane.headerElement();\n  }\n\n  toolbarItemResized(): void {\n    this.tabbedPane.headerResized();\n  }\n\n  private tabSelected(tabId: string, location: 'main'|'drawer'): void {\n    Host.userMetrics.panelShown(tabId);\n    Host.userMetrics.panelShownInLocation(tabId, location);\n  }\n\n  setOwnerSplit(splitWidget: SplitWidget): void {\n    this.ownerSplitWidget = splitWidget;\n  }\n\n  ownerSplit(): SplitWidget|null {\n    return this.ownerSplitWidget || null;\n  }\n\n  minimize(): void {\n    if (this.ownerSplitWidget) {\n      this.ownerSplitWidget.setSidebarMinimized(true);\n    }\n  }\n\n  restore(): void {\n    if (this.ownerSplitWidget) {\n      this.ownerSplitWidget.setSidebarMinimized(false);\n    }\n  }\n\n  displayDebuggedTabReloadRequiredWarning(message: string): void {\n    if (!this.reloadRequiredInfobar) {\n      const infobar = new Infobar(\n          InfobarType.INFO, message,\n          [\n            {\n              text: i18nString(UIStrings.reloadDebuggedTab),\n              highlight: true,\n              delegate: () => {\n                reloadDebuggedTab();\n                if (this.reloadRequiredInfobar) {\n                  this.reloadRequiredInfobar.dispose();\n                }\n              },\n              dismiss: false,\n              buttonVariant: Buttons.Button.Variant.PRIMARY,\n              icon: 'refresh',\n              jslogContext: 'main.debug-reload',\n            },\n          ],\n          undefined, undefined, 'reload-required');\n      infobar.setParentView(this);\n      this.attachInfobar(infobar);\n      this.reloadRequiredInfobar = infobar;\n      infobar.setCloseCallback(() => {\n        delete this.reloadRequiredInfobar;\n      });\n    }\n  }\n\n  displayReloadRequiredWarning(message: string): void {\n    if (!this.reloadRequiredInfobar) {\n      const infobar = new Infobar(\n          InfobarType.INFO, message,\n          [\n            {\n              text: i18nString(UIStrings.reloadDevtools),\n              highlight: true,\n              delegate: () => reloadDevTools(),\n              dismiss: false,\n              jslogContext: 'main.debug-reload',\n            },\n          ],\n          undefined, undefined, 'reload-required');\n      infobar.setParentView(this);\n      this.attachInfobar(infobar);\n      this.reloadRequiredInfobar = infobar;\n      infobar.setCloseCallback(() => {\n        delete this.reloadRequiredInfobar;\n      });\n    }\n  }\n\n  displaySelectOverrideFolderInfobar(callback: () => void): void {\n    if (!this.#selectOverrideFolderInfobar) {\n      const infobar = new Infobar(\n          InfobarType.INFO, i18nString(UIStrings.selectOverrideFolder),\n          [\n            {\n              text: i18nString(UIStrings.selectFolder),\n              highlight: true,\n              delegate: () => callback(),\n              dismiss: true,\n              jslogContext: 'select-folder',\n            },\n          ],\n          undefined, undefined, 'select-override-folder');\n      infobar.setParentView(this);\n      this.attachInfobar(infobar);\n      this.#selectOverrideFolderInfobar = infobar;\n      infobar.setCloseCallback(() => {\n        this.#selectOverrideFolderInfobar = undefined;\n      });\n    }\n  }\n\n  private createInfoBarDiv(): void {\n    if (!this.infoBarDiv) {\n      this.infoBarDiv = document.createElement('div');\n      this.infoBarDiv.classList.add('flex-none');\n      this.contentElement.insertBefore(this.infoBarDiv, this.contentElement.firstChild);\n    }\n  }\n\n  private attachInfobar(infobar: Infobar): void {\n    this.createInfoBarDiv();\n    this.infoBarDiv?.appendChild(infobar.element);\n  }\n}\n\nfunction getDisableLocaleInfoBarSetting(): Common.Settings.Setting<boolean> {\n  return Common.Settings.Settings.instance().createSetting('disable-locale-info-bar', false);\n}\n\nfunction shouldShowLocaleInfobar(): boolean {\n  if (getDisableLocaleInfoBarSetting().get()) {\n    return false;\n  }\n\n  // If the language setting is different than 'en-US', the user already\n  // used the setting before, so don't show the toolbar.\n  const languageSettingValue = Common.Settings.Settings.instance().moduleSetting<string>('language').get();\n  if (languageSettingValue !== 'en-US') {\n    return false;\n  }\n\n  // When the selected DevTools locale differs from the locale of the browser UI, we want to notify\n  // users only once, that they have the opportunity to adjust DevTools locale to match Chrome's locale.\n  return !i18n.DevToolsLocale.localeLanguagesMatch(navigator.language, languageSettingValue) &&\n      i18n.DevToolsLocale.DevToolsLocale.instance().languageIsSupportedByDevTools(navigator.language);\n}\n\nfunction createLocaleInfobar(): Infobar {\n  const devtoolsLocale = i18n.DevToolsLocale.DevToolsLocale.instance();\n  const closestSupportedLocale = devtoolsLocale.lookupClosestDevToolsLocale(navigator.language);\n  const locale = new Intl.Locale(closestSupportedLocale);\n  const closestSupportedLanguageInCurrentLocale =\n      new Intl.DisplayNames([devtoolsLocale.locale], {type: 'language'}).of(locale.language || 'en') || 'English';\n\n  const languageSetting = Common.Settings.Settings.instance().moduleSetting<string>('language');\n  return new Infobar(\n      InfobarType.INFO, i18nString(UIStrings.devToolsLanguageMissmatch, {PH1: closestSupportedLanguageInCurrentLocale}),\n      [\n        {\n          text: i18nString(UIStrings.setToBrowserLanguage),\n          highlight: true,\n          delegate: () => {\n            languageSetting.set('browserLanguage');\n            getDisableLocaleInfoBarSetting().set(true);\n            reloadDevTools();\n          },\n          dismiss: true,\n          jslogContext: 'set-to-browser-language',\n        },\n        {\n          text: i18nString(UIStrings.setToSpecificLanguage, {PH1: closestSupportedLanguageInCurrentLocale}),\n          highlight: true,\n          delegate: () => {\n            languageSetting.set(closestSupportedLocale);\n            getDisableLocaleInfoBarSetting().set(true);\n            reloadDevTools();\n          },\n          dismiss: true,\n          jslogContext: 'set-to-specific-language',\n        },\n      ],\n      getDisableLocaleInfoBarSetting(), undefined, 'language-mismatch');\n}\n\nfunction reloadDevTools(): void {\n  if (DockController.instance().canDock() && DockController.instance().dockSide() === DockState.UNDOCKED) {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setIsDocked(true, function() {});\n  }\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.reattach(() => window.location.reload());\n}\n\nfunction reloadDebuggedTab(): void {\n  void ActionRegistry.instance().getAction('inspector-main.reload').execute();\n}\n\nexport class ActionDelegate implements ActionDelegateInterface {\n  handleAction(context: Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'main.toggle-drawer':\n        if (InspectorView.instance().drawerVisible()) {\n          InspectorView.instance().closeDrawer();\n        } else {\n          InspectorView.instance().showDrawer({\n            focus: true,\n            hasTargetDrawer: false,\n          });\n        }\n        return true;\n      case 'main.next-tab':\n        InspectorView.instance().tabbedPane.selectNextTab();\n        InspectorView.instance().tabbedPane.focus();\n        return true;\n      case 'main.previous-tab':\n        InspectorView.instance().tabbedPane.selectPrevTab();\n        InspectorView.instance().tabbedPane.focus();\n        return true;\n    }\n    return false;\n  }\n}\n\nexport class InspectorViewTabDelegate implements TabbedPaneTabDelegate {\n  closeTabs(tabbedPane: TabbedPane, ids: string[]): void {\n    tabbedPane.closeTabs(ids, true);\n  }\n\n  moveToDrawer(tabId: string): void {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.TabMovedToDrawer);\n    ViewManager.instance().moveView(tabId, 'drawer-view');\n  }\n\n  moveToMainPanel(tabId: string): void {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.TabMovedToMainPanel);\n    ViewManager.instance().moveView(tabId, 'panel');\n  }\n\n  onContextMenu(tabId: string, contextMenu: ContextMenu): void {\n    // Special case for console, we don't show the movable context panel for this two tabs\n    if (tabId === 'console' || tabId === 'console-view') {\n      return;\n    }\n\n    const locationName = ViewManager.instance().locationNameForViewId(tabId);\n    if (locationName === 'drawer-view') {\n      contextMenu.defaultSection().appendItem(\n          i18nString(UIStrings.moveToTop), this.moveToMainPanel.bind(this, tabId), {jslogContext: 'move-to-top'});\n    } else {\n      contextMenu.defaultSection().appendItem(\n          i18nString(UIStrings.moveToBottom), this.moveToDrawer.bind(this, tabId), {jslogContext: 'move-to-bottom'});\n    }\n  }\n}\n\nexport const enum Events {\n  DRAWER_CHANGE = 'drawerchange',\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
