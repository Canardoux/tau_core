{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/diff_view/DiffView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Diff from '../../../third_party/diff/diff.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as CodeHighlighter from '../code_highlighter/code_highlighter.js';\n\nimport diffViewStyles from './diffView.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Text prepended to a removed line in a diff in the Changes tool, viewable only by screen reader.\n   */\n  deletions: 'Deletion:',\n  /**\n   *@description Text prepended to a new line in a diff in the Changes tool, viewable only by screen reader.\n   */\n  additions: 'Addition:',\n  /**\n   *@description Screen-reader accessible name for the code editor in the Changes tool showing the user's changes.\n   */\n  changesDiffViewer: 'Changes diff viewer',\n  /**\n   *@description Text in Changes View of the Changes tab\n   *@example {2} PH1\n   */\n  SkippingDMatchingLines: '( \u2026 Skipping {PH1} matching lines \u2026 )',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/diff_view/DiffView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface Token {\n  text: string;\n  className: string;\n}\n\ninterface Row {\n  originalLineNumber: number;\n  currentLineNumber: number;\n  tokens: Token[];\n  type: RowType;\n}\n\nexport const enum RowType {\n  DELETION = 'deletion',\n  ADDITION = 'addition',\n  EQUAL = 'equal',\n  SPACER = 'spacer',\n}\n\nexport function buildDiffRows(diff: Diff.Diff.DiffArray): {\n  originalLines: readonly string[],\n  currentLines: readonly string[],\n  rows: readonly Row[],\n} {\n  let currentLineNumber = 0;\n  let originalLineNumber = 0;\n  const paddingLines = 3;\n\n  const originalLines: string[] = [];\n  const currentLines: string[] = [];\n  const rows: Row[] = [];\n\n  for (let i = 0; i < diff.length; ++i) {\n    const token = diff[i];\n    switch (token[0]) {\n      case Diff.Diff.Operation.Equal:\n        rows.push(...createEqualRows(token[1], i === 0, i === diff.length - 1));\n        originalLines.push(...token[1]);\n        currentLines.push(...token[1]);\n        break;\n      case Diff.Diff.Operation.Insert:\n        for (const line of token[1]) {\n          rows.push(createRow(line, RowType.ADDITION));\n        }\n        currentLines.push(...token[1]);\n        break;\n      case Diff.Diff.Operation.Delete:\n        originalLines.push(...token[1]);\n        if (diff[i + 1] && diff[i + 1][0] === Diff.Diff.Operation.Insert) {\n          i++;\n          rows.push(...createModifyRows(token[1].join('\\n'), diff[i][1].join('\\n')));\n          currentLines.push(...diff[i][1]);\n        } else {\n          for (const line of token[1]) {\n            rows.push(createRow(line, RowType.DELETION));\n          }\n        }\n        break;\n    }\n  }\n\n  return {originalLines, currentLines, rows};\n\n  function createEqualRows(lines: string[], atStart: boolean, atEnd: boolean): Row[] {\n    const equalRows = [];\n    if (!atStart) {\n      for (let i = 0; i < paddingLines && i < lines.length; i++) {\n        equalRows.push(createRow(lines[i], RowType.EQUAL));\n      }\n      if (lines.length > paddingLines * 2 + 1 && !atEnd) {\n        equalRows.push(createRow(\n            i18nString(UIStrings.SkippingDMatchingLines, {PH1: (lines.length - paddingLines * 2)}), RowType.SPACER));\n      }\n    }\n    if (!atEnd) {\n      const start = Math.max(lines.length - paddingLines - 1, atStart ? 0 : paddingLines);\n      let skip = lines.length - paddingLines - 1;\n      if (!atStart) {\n        skip -= paddingLines;\n      }\n      if (skip > 0) {\n        originalLineNumber += skip;\n        currentLineNumber += skip;\n      }\n\n      for (let i = start; i < lines.length; i++) {\n        equalRows.push(createRow(lines[i], RowType.EQUAL));\n      }\n    }\n    return equalRows;\n  }\n\n  function createModifyRows(before: string, after: string): Row[] {\n    const internalDiff = Diff.Diff.DiffWrapper.charDiff(before, after, true /* cleanup diff */);\n    const deletionRows = [createRow('', RowType.DELETION)];\n    const insertionRows = [createRow('', RowType.ADDITION)];\n\n    for (const token of internalDiff) {\n      const text = token[1];\n      const type = token[0];\n      const className = type === Diff.Diff.Operation.Equal ? '' : 'inner-diff';\n      const lines = text.split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (i > 0 && type !== Diff.Diff.Operation.Insert) {\n          deletionRows.push(createRow('', RowType.DELETION));\n        }\n        if (i > 0 && type !== Diff.Diff.Operation.Delete) {\n          insertionRows.push(createRow('', RowType.ADDITION));\n        }\n        if (!lines[i]) {\n          continue;\n        }\n        if (type !== Diff.Diff.Operation.Insert) {\n          deletionRows[deletionRows.length - 1].tokens.push({text: lines[i], className});\n        }\n        if (type !== Diff.Diff.Operation.Delete) {\n          insertionRows[insertionRows.length - 1].tokens.push({text: lines[i], className});\n        }\n      }\n    }\n    return deletionRows.concat(insertionRows);\n  }\n\n  function createRow(text: string, type: RowType): Row {\n    if (type === RowType.ADDITION) {\n      currentLineNumber++;\n    }\n    if (type === RowType.DELETION) {\n      originalLineNumber++;\n    }\n    if (type === RowType.EQUAL) {\n      originalLineNumber++;\n      currentLineNumber++;\n    }\n\n    return {originalLineNumber, currentLineNumber, tokens: text ? [{text, className: 'inner-diff'}] : [], type};\n  }\n}\n\nfunction documentMap(lines: readonly string[]): Map<number, number> {\n  const map = new Map<number, number>();\n  for (let pos = 0, lineNo = 0; lineNo < lines.length; lineNo++) {\n    map.set(lineNo + 1, pos);\n    pos += lines[lineNo].length + 1;\n  }\n  return map;\n}\n\nclass DiffRenderer {\n  private constructor(\n      readonly originalHighlighter: CodeHighlighter.CodeHighlighter.CodeHighlighter,\n      readonly originalMap: Map<number, number>,\n      readonly currentHighlighter: CodeHighlighter.CodeHighlighter.CodeHighlighter,\n      readonly currentMap: Map<number, number>,\n  ) {\n  }\n\n  #render(rows: readonly Row[]): LitHtml.TemplateResult {\n    return html`\n      <div class=\"diff-listing\" aria-label=${i18nString(UIStrings.changesDiffViewer)}>\n        ${rows.map(row => this.#renderRow(row))}\n      </div>`;\n  }\n\n  #renderRow(row: Row): LitHtml.TemplateResult {\n    const baseNumber =\n        row.type === RowType.EQUAL || row.type === RowType.DELETION ? String(row.originalLineNumber) : '';\n    const curNumber = row.type === RowType.EQUAL || row.type === RowType.ADDITION ? String(row.currentLineNumber) : '';\n    let marker = '', markerClass = 'diff-line-marker', screenReaderText = null;\n    if (row.type === RowType.ADDITION) {\n      marker = '+';\n      markerClass += ' diff-line-addition';\n      screenReaderText = html`<span class=\"diff-hidden-text\">${i18nString(UIStrings.additions)}</span>`;\n    } else if (row.type === RowType.DELETION) {\n      marker = '-';\n      markerClass += ' diff-line-deletion';\n      screenReaderText = html`<span class=\"diff-hidden-text\">${i18nString(UIStrings.deletions)}</span>`;\n    }\n    return html`\n      <div class=\"diff-line-number\" aria-hidden=\"true\">${baseNumber}</div>\n      <div class=\"diff-line-number\" aria-hidden=\"true\">${curNumber}</div>\n      <div class=${markerClass} aria-hidden=\"true\">${marker}</div>\n      <div class=\"diff-line-content diff-line-${row.type}\" data-line-number=${curNumber} jslog=${\n        VisualLogging.link('changes.reveal-source').track({click: true})}>${screenReaderText}${\n        this.#renderRowContent(row)}</div>`;\n  }\n\n  #renderRowContent(row: Row): LitHtml.TemplateResult[] {\n    if (row.type === RowType.SPACER) {\n      return row.tokens.map(tok => html`${tok.text}`);\n    }\n    const [doc, startPos] = row.type === RowType.DELETION ?\n        [this.originalHighlighter, this.originalMap.get(row.originalLineNumber) as number] :\n        [this.currentHighlighter, this.currentMap.get(row.currentLineNumber) as number];\n    const content: LitHtml.TemplateResult[] = [];\n    let pos = startPos;\n    for (const token of row.tokens) {\n      const tokenContent: (LitHtml.TemplateResult|string)[] = [];\n      doc.highlightRange(pos, pos + token.text.length, (text, style) => {\n        tokenContent.push(style ? html`<span class=${style}>${text}</span>` : text);\n      });\n      content.push(\n          token.className ? html`<span class=${token.className}>${tokenContent}</span>` : html`${tokenContent}`);\n      pos += token.text.length;\n    }\n    return content;\n  }\n\n  static async render(diff: Diff.Diff.DiffArray, mimeType: string, parent: HTMLElement|DocumentFragment):\n      Promise<void> {\n    const {originalLines, currentLines, rows} = buildDiffRows(diff);\n    const renderer = new DiffRenderer(\n        await CodeHighlighter.CodeHighlighter.create(originalLines.join('\\n'), mimeType),\n        documentMap(originalLines),\n        await CodeHighlighter.CodeHighlighter.create(currentLines.join('\\n'), mimeType),\n        documentMap(currentLines),\n    );\n    LitHtml.render(renderer.#render(rows), parent, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-diff-view': DiffView;\n  }\n}\n\nexport type DiffViewData = {\n  diff: Diff.Diff.DiffArray,\n  mimeType: string,\n};\n\nexport class DiffView extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  loaded: Promise<void>;\n\n  constructor(data?: DiffViewData) {\n    super();\n    this.#shadow.adoptedStyleSheets = [diffViewStyles, CodeHighlighter.Style.default];\n    if (data) {\n      this.loaded = DiffRenderer.render(data.diff, data.mimeType, this.#shadow);\n    } else {\n      this.loaded = Promise.resolve();\n    }\n  }\n\n  set data(data: DiffViewData) {\n    this.loaded = DiffRenderer.render(data.diff, data.mimeType, this.#shadow);\n  }\n}\n\ncustomElements.define('devtools-diff-view', DiffView);\n"],
  "mappings": "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",
  "names": ["RowType"]
}
