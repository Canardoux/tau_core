{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/text_editor/config.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as TextUtils from '../../../models/text_utils/text_utils.js';\nimport * as WindowBoundsService from '../../../services/window_bounds/window_bounds.js';\nimport * as CM from '../../../third_party/codemirror.next/codemirror.next.js';\nimport * as UI from '../../legacy/legacy.js';\nimport * as VisualLogging from '../../visual_logging/visual_logging.js';\nimport * as CodeHighlighter from '../code_highlighter/code_highlighter.js';\nimport * as Icon from '../icon_button/icon_button.js';\n\nimport {editorTheme} from './theme.js';\n\nconst LINES_TO_SCAN_FOR_INDENTATION_GUESSING = 1000;\nconst RECOMPUTE_INDENT_MAX_SIZE = 200;\n\nconst UIStrings = {\n  /**\n   *@description Label text for the editor\n   */\n  codeEditor: 'Code editor',\n  /**\n   *@description Aria alert to read the suggestion for the suggestion box when typing in text editor\n   *@example {name} PH1\n   *@example {2} PH2\n   *@example {5} PH3\n   */\n  sSuggestionSOfS: '{PH1}, suggestion {PH2} of {PH3}',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/text_editor/config.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst empty: CM.Extension = [];\n\nexport const dynamicSetting = CM.Facet.define<DynamicSetting<unknown>>();\n\n// The code below is used to wire up dynamic settings to editors. When\n// you include the result of calling `instance()` in an editor\n// configuration, the TextEditor class will take care of listening to\n// changes in the setting, and updating the configuration as\n// appropriate.\n\nexport class DynamicSetting<T> {\n  compartment = new CM.Compartment();\n\n  constructor(\n      readonly settingName: string,\n      private readonly getExtension: (value: T) => CM.Extension,\n  ) {\n  }\n\n  settingValue(): T {\n    return Common.Settings.Settings.instance().moduleSetting(this.settingName).get() as T;\n  }\n\n  instance(): CM.Extension {\n    return [\n      this.compartment.of(this.getExtension(this.settingValue())),\n      dynamicSetting.of(this as DynamicSetting<unknown>),\n    ];\n  }\n\n  sync(state: CM.EditorState, value: T): CM.StateEffect<unknown>|null {\n    const cur = this.compartment.get(state);\n    const needed = this.getExtension(value);\n    return cur === needed ? null : this.compartment.reconfigure(needed);\n  }\n\n  static bool(name: string, enabled: CM.Extension, disabled: CM.Extension = empty): DynamicSetting<boolean> {\n    return new DynamicSetting<boolean>(name, val => val ? enabled : disabled);\n  }\n\n  static none: readonly DynamicSetting<unknown>[] = [];\n}\n\nexport const tabMovesFocus = DynamicSetting.bool('text-editor-tab-moves-focus', [], CM.keymap.of([{\n  key: 'Tab',\n  run: (view: CM.EditorView) => view.state.doc.length ? CM.indentMore(view) : false,\n  shift: (view: CM.EditorView) => view.state.doc.length ? CM.indentLess(view) : false,\n}]));\n\nconst disableConservativeCompletion = CM.StateEffect.define();\n\n// When enabled, this suppresses the behavior of showCompletionHint\n// and accepting of completions with Enter until the user selects a\n// completion beyond the initially selected one. Used in the console.\nexport const conservativeCompletion = CM.StateField.define<boolean>({\n  create() {\n    return true;\n  },\n  update(value, tr) {\n    if (CM.completionStatus(tr.state) !== 'active') {\n      return true;\n    }\n    if ((CM.selectedCompletionIndex(tr.startState) ?? 0) !== (CM.selectedCompletionIndex(tr.state) ?? 0) ||\n        tr.effects.some(e => e.is(disableConservativeCompletion))) {\n      return false;\n    }\n    return value;\n  },\n});\n\nfunction acceptCompletionIfNotConservative(view: CM.EditorView): boolean {\n  return !view.state.field(conservativeCompletion, false) && CM.acceptCompletion(view);\n}\n\nfunction acceptCompletionIfAtEndOfLine(view: CM.EditorView): boolean {\n  const cursorPosition = view.state.selection.main.head;\n  const line = view.state.doc.lineAt(cursorPosition);\n  const column = cursorPosition - line.from;\n  const isCursorAtEndOfLine = column >= line.length;\n  if (isCursorAtEndOfLine) {\n    return CM.acceptCompletion(view);\n  }\n\n  // We didn't handle this key press\n  // so it will be handled by default behavior.\n  return false;\n}\n\n// This is a wrapper around CodeMirror's own moveCompletionSelection command, which\n// selects the first selection if the state of the selection is conservative, and\n// otherwise behaves as normal.\nfunction moveCompletionSelectionIfNotConservative(\n    forward: boolean, by: 'option'|'page' = 'option'): ((view: CM.EditorView) => boolean) {\n  return view => {\n    if (CM.completionStatus(view.state) !== 'active') {\n      return false;\n    }\n    if (view.state.field(conservativeCompletion, false)) {\n      view.dispatch({effects: disableConservativeCompletion.of(null)});\n      announceSelectedCompletionInfo(view);\n      return true;\n    }\n    const moveSelectionResult = CM.moveCompletionSelection(forward, by)(view);\n    announceSelectedCompletionInfo(view);\n    return moveSelectionResult;\n  };\n}\n\nfunction moveCompletionSelectionBackwardWrapper(): ((view: CM.EditorView) => boolean) {\n  return view => {\n    if (CM.completionStatus(view.state) !== 'active') {\n      return false;\n    }\n    CM.moveCompletionSelection(false)(view);\n    announceSelectedCompletionInfo(view);\n    return true;\n  };\n}\n\nfunction announceSelectedCompletionInfo(view: CM.EditorView): void {\n  const ariaMessage = i18nString(UIStrings.sSuggestionSOfS, {\n    PH1: CM.selectedCompletion(view.state)?.label || '',\n    PH2: (CM.selectedCompletionIndex(view.state) || 0) + 1,\n    PH3: CM.currentCompletions(view.state).length,\n  });\n\n  UI.ARIAUtils.alert(ariaMessage);\n}\n\nexport const autocompletion = new DynamicSetting<boolean>(\n    'text-editor-autocompletion',\n    (activateOnTyping: boolean) =>\n        [CM.autocompletion({\n          activateOnTyping,\n          icons: false,\n          optionClass: (option: CM.Completion) => option.type === 'secondary' ? 'cm-secondaryCompletion' : '',\n          tooltipClass: (state: CM.EditorState) => {\n            return state.field(conservativeCompletion, false) ? 'cm-conservativeCompletion' : '';\n          },\n          defaultKeymap: false,\n          updateSyncTime: 100,\n        }),\n         CM.Prec.highest(CM.keymap.of([\n           {key: 'End', run: acceptCompletionIfAtEndOfLine},\n           {key: 'ArrowRight', run: acceptCompletionIfAtEndOfLine},\n           {key: 'Ctrl-Space', run: CM.startCompletion},\n           {key: 'Escape', run: CM.closeCompletion},\n           {key: 'ArrowDown', run: moveCompletionSelectionIfNotConservative(true)},\n           {key: 'ArrowUp', run: moveCompletionSelectionBackwardWrapper()},\n           {mac: 'Ctrl-n', run: moveCompletionSelectionIfNotConservative(true)},\n           {mac: 'Ctrl-p', run: moveCompletionSelectionBackwardWrapper()},\n           {key: 'PageDown', run: CM.moveCompletionSelection(true, 'page')},\n           {key: 'PageUp', run: CM.moveCompletionSelection(false, 'page')},\n           {key: 'Enter', run: acceptCompletionIfNotConservative},\n         ]))]);\n\nexport const bracketMatching = DynamicSetting.bool('text-editor-bracket-matching', CM.bracketMatching());\n\nexport const codeFolding = DynamicSetting.bool('text-editor-code-folding', [\n  CM.foldGutter({\n    markerDOM(open: boolean): HTMLElement {\n      const iconName = open ? 'triangle-down' : 'triangle-right';\n      const icon = new Icon.Icon.Icon();\n      icon.setAttribute('class', open ? 'cm-foldGutterElement' : 'cm-foldGutterElement cm-foldGutterElement-folded');\n      icon.setAttribute('jslog', `${VisualLogging.expand().track({click: true})}`);\n      icon.data = {\n        iconName,\n        color: 'var(--icon-fold-marker)',\n        width: '14px',\n        height: '14px',\n      };\n      return icon;\n    },\n  }),\n  CM.keymap.of(CM.foldKeymap),\n]);\n\nconst AutoDetectIndent = CM.StateField.define<string>({\n  create: state => detectIndentation(state.doc),\n  update: (indent, tr) => {\n    return tr.docChanged && preservedLength(tr.changes) <= RECOMPUTE_INDENT_MAX_SIZE ? detectIndentation(tr.state.doc) :\n                                                                                       indent;\n  },\n  provide: f => CM.Prec.highest(CM.indentUnit.from(f)),\n});\n\nfunction preservedLength(ch: CM.ChangeDesc): number {\n  let len = 0;\n  ch.iterGaps((from, to, l) => {\n    len += l;\n  });\n  return len;\n}\n\nfunction detectIndentation(doc: CM.Text): string {\n  const lines = doc.iterLines(1, Math.min(doc.lines + 1, LINES_TO_SCAN_FOR_INDENTATION_GUESSING));\n  const indentUnit = TextUtils.TextUtils.detectIndentation(lines);\n  return indentUnit ?? Common.Settings.Settings.instance().moduleSetting('text-editor-indent').get();\n}\n\nexport const autoDetectIndent = DynamicSetting.bool('text-editor-auto-detect-indent', AutoDetectIndent);\n\nfunction matcher(decorator: CM.MatchDecorator): CM.Extension {\n  return CM.ViewPlugin.define(\n      view => ({\n        decorations: decorator.createDeco(view),\n        update(u): void {\n          this.decorations = decorator.updateDeco(u, this.decorations);\n        },\n      }),\n      {\n        decorations: v => v.decorations,\n      });\n}\n\nconst WhitespaceDeco = new Map<string, CM.Decoration>();\n\nfunction getWhitespaceDeco(space: string): CM.Decoration {\n  const cached = WhitespaceDeco.get(space);\n  if (cached) {\n    return cached;\n  }\n  const result = CM.Decoration.mark({\n    attributes: space === '\\t' ? {\n      class: 'cm-highlightedTab',\n    } :\n                                 {class: 'cm-highlightedSpaces', 'data-display': '\u00B7'.repeat(space.length)},\n  });\n  WhitespaceDeco.set(space, result);\n  return result;\n}\n\nconst showAllWhitespace = matcher(new CM.MatchDecorator({\n  regexp: /\\t| +/g,\n  decoration: (match: RegExpExecArray) => getWhitespaceDeco(match[0]),\n  boundary: /\\S/,\n}));\n\nconst showTrailingWhitespace = matcher(new CM.MatchDecorator({\n  regexp: /\\s+$/g,\n  decoration: CM.Decoration.mark({class: 'cm-trailingWhitespace'}),\n  boundary: /\\S/,\n}));\n\nexport const showWhitespace = new DynamicSetting<string>('show-whitespaces-in-editor', value => {\n  if (value === 'all') {\n    return showAllWhitespace;\n  }\n  if (value === 'trailing') {\n    return showTrailingWhitespace;\n  }\n  return empty;\n});\n\nexport const allowScrollPastEof = DynamicSetting.bool('allow-scroll-past-eof', CM.scrollPastEnd());\n\nconst cachedIndentUnit: {[indent: string]: CM.Extension} = Object.create(null);\n\nfunction getIndentUnit(indent: string): CM.Extension {\n  let value = cachedIndentUnit[indent];\n  if (!value) {\n    value = cachedIndentUnit[indent] = CM.indentUnit.of(indent);\n  }\n  return value;\n}\n\nexport const indentUnit = new DynamicSetting<string>('text-editor-indent', getIndentUnit);\n\nexport const domWordWrap = DynamicSetting.bool('dom-word-wrap', CM.EditorView.lineWrapping);\n\nfunction detectLineSeparator(text: string): CM.Extension {\n  if (/\\r\\n/.test(text) && !/(^|[^\\r])\\n/.test(text)) {\n    return CM.EditorState.lineSeparator.of('\\r\\n');\n  }\n  return [];\n}\n\nconst baseKeymap = CM.keymap.of([\n  {key: 'Tab', run: CM.acceptCompletion},\n  {key: 'Ctrl-m', run: CM.cursorMatchingBracket, shift: CM.selectMatchingBracket},\n  {key: 'Mod-/', run: CM.toggleComment},\n  {key: 'Mod-d', run: CM.selectNextOccurrence},\n  {key: 'Alt-ArrowLeft', mac: 'Ctrl-ArrowLeft', run: CM.cursorSyntaxLeft, shift: CM.selectSyntaxLeft},\n  {key: 'Alt-ArrowRight', mac: 'Ctrl-ArrowRight', run: CM.cursorSyntaxRight, shift: CM.selectSyntaxRight},\n  {key: 'Ctrl-ArrowLeft', mac: 'Alt-ArrowLeft', run: CM.cursorGroupLeft, shift: CM.selectGroupLeft},\n  {key: 'Ctrl-ArrowRight', mac: 'Alt-ArrowRight', run: CM.cursorGroupRight, shift: CM.selectGroupRight},\n  ...CM.standardKeymap,\n  ...CM.historyKeymap,\n]);\n\nfunction themeIsDark(): boolean {\n  const setting = Common.Settings.Settings.instance().moduleSetting('ui-theme').get();\n  return setting === 'systemPreferred' ? window.matchMedia('(prefers-color-scheme: dark)').matches : setting === 'dark';\n}\n\nexport const dummyDarkTheme = CM.EditorView.theme({}, {dark: true});\nexport const themeSelection = new CM.Compartment();\n\nexport function theme(): CM.Extension {\n  return [editorTheme, themeIsDark() ? themeSelection.of(dummyDarkTheme) : themeSelection.of([])];\n}\n\nlet sideBarElement: HTMLElement|null = null;\n\nfunction getTooltipSpace(): DOMRect {\n  if (!sideBarElement) {\n    sideBarElement =\n        WindowBoundsService.WindowBoundsService.WindowBoundsServiceImpl.instance().getDevToolsBoundingElement();\n  }\n  return sideBarElement.getBoundingClientRect();\n}\n\nexport function baseConfiguration(text: string|CM.Text): CM.Extension {\n  return [\n    theme(),\n    CM.highlightSpecialChars(),\n    CM.highlightSelectionMatches(),\n    CM.history(),\n    CM.drawSelection(),\n    CM.EditorState.allowMultipleSelections.of(true),\n    CM.indentOnInput(),\n    CM.syntaxHighlighting(CodeHighlighter.CodeHighlighter.highlightStyle),\n    baseKeymap,\n    CM.EditorView.clickAddsSelectionRange.of(mouseEvent => mouseEvent.altKey || mouseEvent.ctrlKey),\n    tabMovesFocus.instance(),\n    bracketMatching.instance(),\n    indentUnit.instance(),\n    CM.Prec.lowest(CM.EditorView.contentAttributes.of({'aria-label': i18nString(UIStrings.codeEditor)})),\n    text instanceof CM.Text ? [] : detectLineSeparator(text),\n    CM.tooltips({\n      parent: getTooltipHost() as unknown as HTMLElement,\n      tooltipSpace: getTooltipSpace,\n    }),\n    CM.bidiIsolates(),\n  ];\n}\n\nexport const closeBrackets = DynamicSetting.bool('text-editor-bracket-closing', [\n  CM.html.autoCloseTags,\n  CM.closeBrackets(),\n  CM.keymap.of(CM.closeBracketsKeymap),\n]);\n\n// Root editor tooltips at the top of the document, creating a special\n// element with the editor styles mounted in it for them. This is\n// annoying, but necessary because a scrollable parent node clips them\n// otherwise, `position: fixed` doesn't work due to `contain` styles,\n// and appending them directly to `document.body` doesn't work because\n// the necessary style sheets aren't available there.\nlet tooltipHost: ShadowRoot|null = null;\n\nfunction getTooltipHost(): ShadowRoot {\n  if (!tooltipHost) {\n    const styleModules = CM.EditorState\n                             .create({\n                               extensions: [\n                                 editorTheme,\n                                 themeIsDark() ? dummyDarkTheme : [],\n                                 CM.syntaxHighlighting(CodeHighlighter.CodeHighlighter.highlightStyle),\n                                 CM.showTooltip.of({\n                                   pos: 0,\n                                   create() {\n                                     return {dom: document.createElement('div')};\n                                   },\n                                 }),\n                               ],\n                             })\n                             .facet<readonly CM.StyleModule[]>(CM.EditorView.styleModule);\n    const host = document.body.appendChild(document.createElement('div'));\n    host.className = 'editor-tooltip-host';\n    tooltipHost = host.attachShadow({mode: 'open'});\n    CM.StyleModule.mount(tooltipHost, styleModules);\n  }\n  return tooltipHost;\n}\n\nclass CompletionHint extends CM.WidgetType {\n  constructor(readonly text: string) {\n    super();\n  }\n\n  override eq(other: CompletionHint): boolean {\n    return this.text === other.text;\n  }\n\n  toDOM(): HTMLElement {\n    const span = document.createElement('span');\n    span.className = 'cm-completionHint';\n    span.textContent = this.text;\n    return span;\n  }\n}\n\nexport const showCompletionHint = CM.ViewPlugin.fromClass(class {\ndecorations:\n  CM.DecorationSet = CM.Decoration.none;\ncurrentHint:\n  string|null = null;\n\n  update(update: CM.ViewUpdate): void {\n    const top = this.currentHint = this.topCompletion(update.state);\n    if (!top || update.state.field(conservativeCompletion, false)) {\n      this.decorations = CM.Decoration.none;\n    } else {\n      this.decorations = CM.Decoration.set(\n          [CM.Decoration.widget({widget: new CompletionHint(top), side: 1}).range(update.state.selection.main.head)]);\n    }\n  }\n\n  topCompletion(state: CM.EditorState): string|null {\n    const completion = CM.selectedCompletion(state);\n    if (!completion) {\n      return null;\n    }\n    let {label, apply} = completion;\n    if (typeof apply === 'string') {\n      label = apply;\n      apply = undefined;\n    }\n    if (apply || label.length > 100 || label.indexOf('\\n') > -1 || completion.type === 'secondary') {\n      return null;\n    }\n    const pos = state.selection.main.head;\n    const lineBefore = state.doc.lineAt(pos);\n    if (pos !== lineBefore.to) {\n      return null;\n    }\n    const partBefore = (label[0] === '\\''    ? /'(\\\\.|[^'\\\\])*$/ :\n                            label[0] === '\"' ? /\"(\\\\.|[^\"\\\\])*$/ :\n                                               /#?[\\w$]+$/)\n                           .exec(lineBefore.text);\n    if (partBefore && !label.startsWith(partBefore[0])) {\n      return null;\n    }\n    return label.slice(partBefore ? partBefore[0].length : 0);\n  }\n}, {decorations: p => p.decorations});\n\nexport function contentIncludingHint(view: CM.EditorView): string {\n  const plugin = view.plugin(showCompletionHint);\n  let content = view.state.doc.toString();\n  if (plugin && plugin.currentHint) {\n    const {head} = view.state.selection.main;\n    content = content.slice(0, head) + plugin.currentHint + content.slice(head);\n  }\n  return content;\n}\n"],
  "mappings": "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",
  "names": ["indentUnit"]
}
