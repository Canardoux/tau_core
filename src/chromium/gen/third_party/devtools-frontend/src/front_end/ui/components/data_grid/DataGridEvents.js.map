{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/data_grid/DataGridEvents.ts"],
  "sourcesContent": ["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type {Cell, Column, Row} from './DataGridUtils.js';\n\nexport class ColumnHeaderClickEvent extends Event {\n  static readonly eventName = 'columnheaderclick';\n\n  data: {\n    column: Column,\n    columnIndex: number,\n  };\n\n  constructor(column: Column, columnIndex: number) {\n    super(ColumnHeaderClickEvent.eventName);\n    this.data = {\n      column,\n      columnIndex,\n    };\n  }\n}\n\nexport class ContextMenuColumnSortClickEvent extends Event {\n  static readonly eventName = 'contextmenucolumnsortclick';\n  data: {\n    column: Column,\n  };\n\n  constructor(column: Column) {\n    super(ContextMenuColumnSortClickEvent.eventName);\n    this.data = {\n      column,\n    };\n  }\n}\n\nexport class ContextMenuHeaderResetClickEvent extends Event {\n  static readonly eventName = 'contextmenuheaderresetclick';\n  constructor() {\n    super(ContextMenuHeaderResetClickEvent.eventName);\n  }\n}\n\nexport class NewUserFilterTextEvent extends Event {\n  static readonly eventName = 'newuserfiltertext';\n  data: {filterText: string};\n\n  constructor(filterText: string) {\n    super(NewUserFilterTextEvent.eventName, {\n      composed: true,\n    });\n\n    this.data = {\n      filterText,\n    };\n  }\n}\n\nexport class BodyCellFocusedEvent extends Event {\n  static readonly eventName = 'cellfocused';\n  /**\n   * Although the DataGrid cares only about the focused cell, and has no concept\n   * of a focused row, many components that render a data grid want to know what\n   * row is active, so on the cell focused event we also send the row that the\n   * cell is part of.\n   */\n  data: {\n    cell: Cell,\n    row: Row,\n  };\n\n  constructor(cell: Cell, row: Row) {\n    super(BodyCellFocusedEvent.eventName, {\n      composed: true,\n    });\n    this.data = {\n      cell,\n      row,\n    };\n  }\n}\n\nexport class RowMouseEnterEvent extends Event {\n  static readonly eventName = 'rowmouseenter';\n  data: {row: Row};\n\n  constructor(row: Row) {\n    super(RowMouseEnterEvent.eventName, {\n      composed: true,\n    });\n    this.data = {\n      row,\n    };\n  }\n}\n\nexport class RowMouseLeaveEvent extends Event {\n  static readonly eventName = 'rowmouseleave';\n  data: {row: Row};\n\n  constructor(row: Row) {\n    super(RowMouseLeaveEvent.eventName, {\n      composed: true,\n    });\n    this.data = {\n      row,\n    };\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    [ColumnHeaderClickEvent.eventName]: ColumnHeaderClickEvent;\n    [ContextMenuColumnSortClickEvent.eventName]: ContextMenuColumnSortClickEvent;\n    [ContextMenuHeaderResetClickEvent.eventName]: ContextMenuHeaderResetClickEvent;\n    [NewUserFilterTextEvent.eventName]: NewUserFilterTextEvent;\n    [BodyCellFocusedEvent.eventName]: BodyCellFocusedEvent;\n    [RowMouseEnterEvent.eventName]: RowMouseEnterEvent;\n    [RowMouseLeaveEvent.eventName]: RowMouseLeaveEvent;\n  }\n}\n"],
  "mappings": ";AAKO,aAAM,+BAA+B,MAAM;AAAA,EAChD,OAAgB,YAAY;AAAA,EAE5B;AAAA,EAKA,YAAY,QAAgB,aAAqB;AAC/C,UAAM,uBAAuB,SAAS;AACtC,SAAK,OAAO;AAAA,MACV;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEO,aAAM,wCAAwC,MAAM;AAAA,EACzD,OAAgB,YAAY;AAAA,EAC5B;AAAA,EAIA,YAAY,QAAgB;AAC1B,UAAM,gCAAgC,SAAS;AAC/C,SAAK,OAAO;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;AAEO,aAAM,yCAAyC,MAAM;AAAA,EAC1D,OAAgB,YAAY;AAAA,EAC5B,cAAc;AACZ,UAAM,iCAAiC,SAAS;AAAA,EAClD;AACF;AAEO,aAAM,+BAA+B,MAAM;AAAA,EAChD,OAAgB,YAAY;AAAA,EAC5B;AAAA,EAEA,YAAY,YAAoB;AAC9B,UAAM,uBAAuB,WAAW;AAAA,MACtC,UAAU;AAAA,IACZ,CAAC;AAED,SAAK,OAAO;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;AAEO,aAAM,6BAA6B,MAAM;AAAA,EAC9C,OAAgB,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B;AAAA,EAKA,YAAY,MAAY,KAAU;AAChC,UAAM,qBAAqB,WAAW;AAAA,MACpC,UAAU;AAAA,IACZ,CAAC;AACD,SAAK,OAAO;AAAA,MACV;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEO,aAAM,2BAA2B,MAAM;AAAA,EAC5C,OAAgB,YAAY;AAAA,EAC5B;AAAA,EAEA,YAAY,KAAU;AACpB,UAAM,mBAAmB,WAAW;AAAA,MAClC,UAAU;AAAA,IACZ,CAAC;AACD,SAAK,OAAO;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;AAEO,aAAM,2BAA2B,MAAM;AAAA,EAC5C,OAAgB,YAAY;AAAA,EAC5B;AAAA,EAEA,YAAY,KAAU;AACpB,UAAM,mBAAmB,WAAW;AAAA,MAClC,UAAU;AAAA,IACZ,CAAC;AACD,SAAK,OAAO;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
