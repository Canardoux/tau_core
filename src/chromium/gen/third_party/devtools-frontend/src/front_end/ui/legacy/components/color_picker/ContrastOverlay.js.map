{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/color_picker/ContrastOverlay.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Root from '../../../../core/root/root.js';\nimport * as UI from '../../legacy.js';\n\nimport {type ContrastInfo, Events} from './ContrastInfo.js';\n\nexport class ContrastOverlay {\n  private contrastInfo: ContrastInfo;\n  private visible: boolean;\n  private readonly contrastRatioSVG: Element;\n  private readonly contrastRatioLines: Map<string, Element>;\n  private width: number;\n  private height: number;\n  private readonly contrastRatioLineBuilder: ContrastRatioLineBuilder;\n  private readonly contrastRatioLinesThrottler: Common.Throttler.Throttler;\n  private readonly drawContrastRatioLinesBound: () => Promise<void>;\n  constructor(contrastInfo: ContrastInfo, colorElement: Element) {\n    this.contrastInfo = contrastInfo;\n\n    this.visible = false;\n\n    this.contrastRatioSVG = UI.UIUtils.createSVGChild(colorElement, 'svg', 'spectrum-contrast-container fill');\n    this.contrastRatioLines = new Map();\n    if (Root.Runtime.experiments.isEnabled('apca')) {\n      this.contrastRatioLines.set(\n          'APCA', UI.UIUtils.createSVGChild(this.contrastRatioSVG, 'path', 'spectrum-contrast-line'));\n    } else {\n      this.contrastRatioLines.set(\n          'aa', UI.UIUtils.createSVGChild(this.contrastRatioSVG, 'path', 'spectrum-contrast-line'));\n      this.contrastRatioLines.set(\n          'aaa', UI.UIUtils.createSVGChild(this.contrastRatioSVG, 'path', 'spectrum-contrast-line'));\n    }\n\n    this.width = 0;\n    this.height = 0;\n\n    this.contrastRatioLineBuilder = new ContrastRatioLineBuilder(this.contrastInfo);\n\n    this.contrastRatioLinesThrottler = new Common.Throttler.Throttler(0);\n    this.drawContrastRatioLinesBound = this.drawContrastRatioLines.bind(this);\n\n    this.contrastInfo.addEventListener(Events.CONTRAST_INFO_UPDATED, this.update.bind(this));\n  }\n\n  private update(): void {\n    if (!this.visible || this.contrastInfo.isNull()) {\n      return;\n    }\n    if (Root.Runtime.experiments.isEnabled('apca') && this.contrastInfo.contrastRatioAPCA() === null) {\n      return;\n    }\n    if (!this.contrastInfo.contrastRatio()) {\n      return;\n    }\n    void this.contrastRatioLinesThrottler.schedule(this.drawContrastRatioLinesBound);\n  }\n\n  setDimensions(width: number, height: number): void {\n    this.width = width;\n    this.height = height;\n    this.update();\n  }\n\n  setVisible(visible: boolean): void {\n    this.visible = visible;\n    this.contrastRatioSVG.classList.toggle('hidden', !visible);\n    this.update();\n  }\n\n  private async drawContrastRatioLines(): Promise<void> {\n    for (const [level, element] of this.contrastRatioLines) {\n      const path = this.contrastRatioLineBuilder.drawContrastRatioLine(this.width, this.height, level as string);\n      if (path) {\n        element.setAttribute('d', path);\n      } else {\n        element.removeAttribute('d');\n      }\n    }\n  }\n}\n\nexport class ContrastRatioLineBuilder {\n  private readonly contrastInfo: ContrastInfo;\n  constructor(contrastInfo: ContrastInfo) {\n    this.contrastInfo = contrastInfo;\n  }\n\n  drawContrastRatioLine(width: number, height: number, level: string): string|null {\n    const isAPCA = Root.Runtime.experiments.isEnabled('apca');\n    const requiredContrast =\n        isAPCA ? this.contrastInfo.contrastRatioAPCAThreshold() : this.contrastInfo.contrastRatioThreshold(level);\n    if (!width || !height || requiredContrast === null) {\n      return null;\n    }\n\n    const dS = 0.02;\n    const H = 0;\n    const S = 1;\n    const V = 2;\n    const A = 3;\n\n    const color = this.contrastInfo.color();\n    const bgColor = this.contrastInfo.bgColor();\n    if (!color || !bgColor) {\n      return null;\n    }\n\n    const fgRGBA = color.rgba();\n    const fgHSVA = color.as(Common.Color.Format.HSL).hsva();\n    const bgRGBA = bgColor.rgba();\n    const bgLuminance = Common.ColorUtils.luminance(bgRGBA);\n    let blendedRGBA: number[] = Common.ColorUtils.blendColors(fgRGBA, bgRGBA);\n    const fgLuminance = Common.ColorUtils.luminance(blendedRGBA);\n    const fgIsLighter = fgLuminance > bgLuminance;\n    const desiredLuminance = isAPCA ?\n        Common.ColorUtils.desiredLuminanceAPCA(bgLuminance, requiredContrast, fgIsLighter) :\n        Common.Color.desiredLuminance(bgLuminance, requiredContrast, fgIsLighter);\n\n    if (isAPCA &&\n        Math.abs(Math.round(Common.ColorUtils.contrastRatioByLuminanceAPCA(desiredLuminance, bgLuminance))) <\n            requiredContrast) {\n      return null;\n    }\n\n    let lastV: number = fgHSVA[V];\n    let currentSlope = 0;\n    const candidateHSVA: Common.ColorUtils.Color4D = [fgHSVA[H], 0, 0, fgHSVA[A]];\n    let pathBuilder: string[] = [];\n    const candidateRGBA = Common.Color.hsva2rgba(candidateHSVA);\n    blendedRGBA = Common.ColorUtils.blendColors(candidateRGBA, bgRGBA);\n\n    let candidateLuminance: ((candidateHSVA: Common.ColorUtils.Color4D) => number)|\n        ((candidateHSVA: Common.ColorUtils.Color4D) => number) = (candidateHSVA: Common.ColorUtils.Color4D) => {\n          return Common.ColorUtils.luminance(\n              Common.ColorUtils.blendColors(Common.Color.Legacy.fromHSVA(candidateHSVA).rgba(), bgRGBA));\n        };\n\n    if (Root.Runtime.experiments.isEnabled('apca')) {\n      candidateLuminance = (candidateHSVA: Common.ColorUtils.Color4D) => {\n        return Common.ColorUtils.luminanceAPCA(\n            Common.ColorUtils.blendColors(Common.Color.Legacy.fromHSVA(candidateHSVA).rgba(), bgRGBA));\n      };\n    }\n\n    // Plot V for values of S such that the computed luminance approximates\n    // `desiredLuminance`, until no suitable value for V can be found, or the\n    // current value of S goes of out bounds.\n    let s;\n    for (s = 0; s < 1 + dS; s += dS) {\n      s = Math.min(1, s);\n      candidateHSVA[S] = s;\n\n      // Extrapolate the approximate next value for `v` using the approximate\n      // gradient of the curve.\n      candidateHSVA[V] = lastV + currentSlope * dS;\n\n      const v = Common.Color.approachColorValue(candidateHSVA, bgRGBA, V, desiredLuminance, candidateLuminance);\n      if (v === null) {\n        break;\n      }\n\n      // Approximate the current gradient of the curve.\n      currentSlope = s === 0 ? 0 : (v - lastV) / dS;\n      lastV = v;\n\n      pathBuilder.push(pathBuilder.length ? 'L' : 'M');\n      pathBuilder.push((s * width).toFixed(2));\n      pathBuilder.push(((1 - v) * height).toFixed(2));\n    }\n\n    // If no suitable V value for an in-bounds S value was found, find the value\n    // of S such that V === 1 and add that to the path.\n    if (s < 1 + dS) {\n      s -= dS;\n      candidateHSVA[V] = 1;\n      s = Common.Color.approachColorValue(candidateHSVA, bgRGBA, S, desiredLuminance, candidateLuminance);\n      if (s !== null) {\n        pathBuilder = pathBuilder.concat(['L', (s * width).toFixed(2), '-0.1']);\n      }\n    }\n    if (pathBuilder.length === 0) {\n      return null;\n    }\n    return pathBuilder.join(' ');\n  }\n}\n"],
  "mappings": "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",
  "names": ["candidateHSVA"]
}
