{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/ShortcutRegistry.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {type Action, getRegisteredActionExtensions, KeybindSet} from './ActionRegistration.js';\nimport type {ActionRegistry} from './ActionRegistry.js';\nimport {Context} from './Context.js';\nimport {Dialog} from './Dialog.js';\nimport {KeyboardShortcut, Modifiers, Type} from './KeyboardShortcut.js';\nimport {isEditing} from './UIUtils.js';\n\nlet shortcutRegistryInstance: ShortcutRegistry|undefined;\n\nexport class ShortcutRegistry {\n  private readonly actionRegistry: ActionRegistry;\n  private readonly actionToShortcut: Platform.MapUtilities.Multimap<string, KeyboardShortcut>;\n  private readonly keyMap: ShortcutTreeNode;\n  private activePrefixKey: ShortcutTreeNode|null;\n  private activePrefixTimeout: number|null;\n  private consumePrefix: (() => Promise<void>)|null;\n  private readonly devToolsDefaultShortcutActions: Set<string>;\n  private readonly disabledDefaultShortcutsForAction: Platform.MapUtilities.Multimap<string, KeyboardShortcut>;\n  private readonly keybindSetSetting: Common.Settings.Setting<string>;\n  private readonly userShortcutsSetting: Common.Settings.Setting<KeyboardShortcut[]>;\n\n  constructor(actionRegistry: ActionRegistry) {\n    this.actionRegistry = actionRegistry;\n    this.actionToShortcut = new Platform.MapUtilities.Multimap();\n    this.keyMap = new ShortcutTreeNode(0, 0);\n    this.activePrefixKey = null;\n    this.activePrefixTimeout = null;\n    this.consumePrefix = null;\n    this.devToolsDefaultShortcutActions = new Set();\n    this.disabledDefaultShortcutsForAction = new Platform.MapUtilities.Multimap();\n    this.keybindSetSetting = Common.Settings.Settings.instance().moduleSetting('active-keybind-set');\n    this.keybindSetSetting.addChangeListener(event => {\n      Host.userMetrics.keybindSetSettingChanged(event.data);\n      this.registerBindings();\n    });\n    this.userShortcutsSetting = Common.Settings.Settings.instance().moduleSetting('user-shortcuts');\n    this.userShortcutsSetting.addChangeListener(this.registerBindings, this);\n\n    this.registerBindings();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    actionRegistry: ActionRegistry|null,\n  } = {forceNew: null, actionRegistry: null}): ShortcutRegistry {\n    const {forceNew, actionRegistry} = opts;\n    if (!shortcutRegistryInstance || forceNew) {\n      if (!actionRegistry) {\n        throw new Error('Missing actionRegistry for shortcutRegistry');\n      }\n      shortcutRegistryInstance = new ShortcutRegistry(actionRegistry);\n    }\n\n    return shortcutRegistryInstance;\n  }\n\n  static removeInstance(): void {\n    shortcutRegistryInstance = undefined;\n  }\n  private applicableActions(key: number, handlers: {\n    [x: string]: () => Promise<boolean>,\n  }|undefined = {}): Action[] {\n    let actions: string[] = [];\n    const keyMap = this.activePrefixKey || this.keyMap;\n    const keyNode = keyMap.getNode(key);\n    if (keyNode) {\n      actions = keyNode.actions();\n    }\n    const applicableActions = this.actionRegistry.applicableActions(actions, Context.instance());\n    if (keyNode) {\n      for (const actionId of Object.keys(handlers)) {\n        if (keyNode.actions().indexOf(actionId) >= 0) {\n          if (this.actionRegistry.hasAction(actionId)) {\n            const action = this.actionRegistry.getAction(actionId);\n            applicableActions.push(action);\n          }\n        }\n      }\n    }\n    return applicableActions;\n  }\n\n  shortcutsForAction(action: string): KeyboardShortcut[] {\n    return [...this.actionToShortcut.get(action)];\n  }\n\n  actionsForDescriptors(descriptors: {\n    key: number,\n    name: string,\n  }[]): string[] {\n    let keyMapNode: (ShortcutTreeNode|null)|ShortcutTreeNode = this.keyMap;\n    for (const {key} of descriptors) {\n      if (!keyMapNode) {\n        return [];\n      }\n      keyMapNode = keyMapNode.getNode(key);\n    }\n    return keyMapNode ? keyMapNode.actions() : [];\n  }\n\n  globalShortcutKeys(): number[] {\n    const keys = [];\n    for (const node of this.keyMap.chords().values()) {\n      const actions = node.actions();\n      const applicableActions = this.actionRegistry.applicableActions(actions, Context.instance());\n      if (applicableActions.length || node.hasChords()) {\n        keys.push(node.key());\n      }\n    }\n    return keys;\n  }\n\n  keysForActions(actionIds: string[]): number[] {\n    const keys = actionIds.flatMap(\n        action => [...this.actionToShortcut.get(action)].flatMap(\n            shortcut => shortcut.descriptors.map(descriptor => descriptor.key)));\n    return [...(new Set(keys))];\n  }\n\n  shortcutTitleForAction(actionId: string): string|undefined {\n    for (const shortcut of this.actionToShortcut.get(actionId)) {\n      return shortcut.title();\n    }\n    return undefined;\n  }\n\n  handleShortcut(event: KeyboardEvent, handlers?: {\n    [x: string]: () => Promise<boolean>,\n  }): void {\n    void this.handleKey(KeyboardShortcut.makeKeyFromEvent(event), event.key, event, handlers);\n  }\n\n  actionHasDefaultShortcut(actionId: string): boolean {\n    return this.devToolsDefaultShortcutActions.has(actionId);\n  }\n\n  getShortcutListener(handlers: {[x: string]: () => Promise<boolean>}): (event: KeyboardEvent) => void {\n    const shortcuts = Object.keys(handlers).flatMap(action => [...this.actionToShortcut.get(action)]);\n    // We only want keys for these specific actions to get handled this\n    // way; all others should be allowed to bubble up.\n    const allowlistKeyMap = new ShortcutTreeNode(0, 0);\n    shortcuts.forEach(shortcut => {\n      allowlistKeyMap.addKeyMapping(shortcut.descriptors.map(descriptor => descriptor.key), shortcut.action);\n    });\n\n    return (event: KeyboardEvent) => {\n      const key = KeyboardShortcut.makeKeyFromEvent(event);\n      const keyMap = this.activePrefixKey ? allowlistKeyMap.getNode(this.activePrefixKey.key()) : allowlistKeyMap;\n      if (!keyMap) {\n        return;\n      }\n      if (keyMap.getNode(key)) {\n        this.handleShortcut(event, handlers);\n      }\n    };\n  }\n\n  addShortcutListener(element: Element, handlers: {\n    [x: string]: () => Promise<boolean>,\n  }): (arg0: Event) => void {\n    const listener = this.getShortcutListener(handlers) as (event: Event) => void;\n    element.addEventListener('keydown', listener);\n    return listener;\n  }\n\n  async handleKey(key: number, domKey: string, event?: KeyboardEvent, handlers?: {\n    [x: string]: () => Promise<boolean>,\n  }): Promise<void> {\n    const keyModifiers = key >> 8;\n    const hasHandlersOrPrefixKey = Boolean(handlers) || Boolean(this.activePrefixKey);\n    const keyMapNode = this.keyMap.getNode(key);\n    const maybeHasActions =\n        (this.applicableActions(key, handlers)).length > 0 || (keyMapNode && keyMapNode.hasChords());\n    if ((!hasHandlersOrPrefixKey && isPossiblyInputKey()) || !maybeHasActions ||\n        KeyboardShortcut.isModifier(KeyboardShortcut.keyCodeAndModifiersFromKey(key).keyCode)) {\n      return;\n    }\n    if (event) {\n      event.consume(true);\n    }\n    if (!hasHandlersOrPrefixKey && Dialog.hasInstance()) {\n      return;\n    }\n\n    if (this.activePrefixTimeout) {\n      clearTimeout(this.activePrefixTimeout);\n      const handled = await maybeExecuteActionForKey.call(this, event);\n      this.activePrefixKey = null;\n      this.activePrefixTimeout = null;\n      if (handled) {\n        return;\n      }\n      if (this.consumePrefix) {\n        await this.consumePrefix();\n      }\n    }\n    if (keyMapNode && keyMapNode.hasChords()) {\n      this.activePrefixKey = keyMapNode;\n      this.consumePrefix = async () => {\n        this.activePrefixKey = null;\n        this.activePrefixTimeout = null;\n        await maybeExecuteActionForKey.call(this, event);\n      };\n      this.activePrefixTimeout = window.setTimeout(this.consumePrefix, KeyTimeout);\n    } else {\n      await maybeExecuteActionForKey.call(this, event);\n    }\n\n    function isPossiblyInputKey(): boolean {\n      if (!event || !isEditing() || /^F\\d+|Control|Shift|Alt|Meta|Escape|Win|U\\+001B$/.test(domKey)) {\n        return false;\n      }\n\n      if (!keyModifiers) {\n        return true;\n      }\n\n      const modifiers = Modifiers;\n      // Undo/Redo will also cause input, so textual undo should take precedence over DevTools undo when editing.\n      if (Host.Platform.isMac()) {\n        if (KeyboardShortcut.makeKey('z', modifiers.Meta.value) === key) {\n          return true;\n        }\n        if (KeyboardShortcut.makeKey('z', modifiers.Meta.value | modifiers.Shift.value) === key) {\n          return true;\n        }\n      } else {\n        if (KeyboardShortcut.makeKey('z', modifiers.Ctrl.value) === key) {\n          return true;\n        }\n        if (KeyboardShortcut.makeKey('y', modifiers.Ctrl.value) === key) {\n          return true;\n        }\n        if (!Host.Platform.isWin() &&\n            KeyboardShortcut.makeKey('z', modifiers.Ctrl.value | modifiers.Shift.value) === key) {\n          return true;\n        }\n      }\n\n      if ((keyModifiers & (modifiers.Ctrl.value | modifiers.Alt.value)) ===\n          (modifiers.Ctrl.value | modifiers.Alt.value)) {\n        return Host.Platform.isWin();\n      }\n\n      return !hasModifier(modifiers.Ctrl.value) && !hasModifier(modifiers.Alt.value) &&\n          !hasModifier(modifiers.Meta.value);\n    }\n\n    function hasModifier(mod: number): boolean {\n      return Boolean(keyModifiers & mod);\n    }\n\n    /** ;\n     */\n    async function maybeExecuteActionForKey(this: ShortcutRegistry, event?: KeyboardEvent): Promise<boolean> {\n      const actions = this.applicableActions(key, handlers);\n      if (!actions.length) {\n        return false;\n      }\n      for (const action of actions) {\n        let handled;\n        if (event) {\n          void VisualLogging.logKeyDown(null, event, action.id());\n        }\n        if (handlers && handlers[action.id()]) {\n          handled = await handlers[action.id()]();\n        }\n        if (!handlers) {\n          handled = await action.execute();\n        }\n        if (handled) {\n          Host.userMetrics.keyboardShortcutFired(action.id());\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  registerUserShortcut(shortcut: KeyboardShortcut): void {\n    for (const otherShortcut of this.disabledDefaultShortcutsForAction.get(shortcut.action)) {\n      if (otherShortcut.descriptorsMatch(shortcut.descriptors) &&\n          otherShortcut.hasKeybindSet(this.keybindSetSetting.get())) {\n        // this user shortcut is the same as a disabled default shortcut,\n        // so we should just enable the default\n        this.removeShortcut(otherShortcut);\n        return;\n      }\n    }\n    for (const otherShortcut of this.actionToShortcut.get(shortcut.action)) {\n      if (otherShortcut.descriptorsMatch(shortcut.descriptors)) {\n        // don't allow duplicate shortcuts\n        return;\n      }\n    }\n    this.addShortcutToSetting(shortcut);\n  }\n\n  removeShortcut(shortcut: KeyboardShortcut): void {\n    if (shortcut.type === Type.DEFAULT_SHORTCUT || shortcut.type === Type.KEYBIND_SET_SHORTCUT) {\n      this.addShortcutToSetting(shortcut.changeType(Type.DISABLED_DEFAULT));\n    } else {\n      this.removeShortcutFromSetting(shortcut);\n    }\n  }\n\n  disabledDefaultsForAction(actionId: string): Set<KeyboardShortcut> {\n    return this.disabledDefaultShortcutsForAction.get(actionId);\n  }\n\n  private addShortcutToSetting(shortcut: KeyboardShortcut): void {\n    const userShortcuts = this.userShortcutsSetting.get();\n    userShortcuts.push(shortcut);\n    this.userShortcutsSetting.set(userShortcuts);\n  }\n\n  private removeShortcutFromSetting(shortcut: KeyboardShortcut): void {\n    const userShortcuts = this.userShortcutsSetting.get();\n    const index = userShortcuts.findIndex(shortcut.equals, shortcut);\n    if (index !== -1) {\n      userShortcuts.splice(index, 1);\n      this.userShortcutsSetting.set(userShortcuts);\n    }\n  }\n\n  private registerShortcut(shortcut: KeyboardShortcut): void {\n    this.actionToShortcut.set(shortcut.action, shortcut);\n    this.keyMap.addKeyMapping(shortcut.descriptors.map(descriptor => descriptor.key), shortcut.action);\n  }\n\n  private registerBindings(): void {\n    this.actionToShortcut.clear();\n    this.keyMap.clear();\n    const keybindSet = this.keybindSetSetting.get();\n    this.disabledDefaultShortcutsForAction.clear();\n    this.devToolsDefaultShortcutActions.clear();\n    const forwardedKeys: {\n      keyCode: number,\n      modifiers: number,\n    }[] = [];\n    const userShortcuts = this.userShortcutsSetting.get();\n    for (const userShortcut of userShortcuts) {\n      const shortcut = KeyboardShortcut.createShortcutFromSettingObject(userShortcut);\n      if (shortcut.type === Type.DISABLED_DEFAULT) {\n        this.disabledDefaultShortcutsForAction.set(shortcut.action, shortcut);\n      } else {\n        if (ForwardedActions.has(shortcut.action)) {\n          forwardedKeys.push(\n              ...shortcut.descriptors.map(descriptor => KeyboardShortcut.keyCodeAndModifiersFromKey(descriptor.key)));\n        }\n        this.registerShortcut(shortcut);\n      }\n    }\n    for (const actionExtension of getRegisteredActionExtensions()) {\n      const actionId = actionExtension.id();\n      const bindings = actionExtension.bindings();\n      for (let i = 0; bindings && i < bindings.length; ++i) {\n        const keybindSets = bindings[i].keybindSets;\n        if (!platformMatches(bindings[i].platform) || !keybindSetsMatch(keybindSets)) {\n          continue;\n        }\n        const keys = bindings[i].shortcut.split(/\\s+/);\n        const shortcutDescriptors = keys.map(KeyboardShortcut.makeDescriptorFromBindingShortcut);\n        if (shortcutDescriptors.length > 0) {\n          if (this.isDisabledDefault(shortcutDescriptors, actionId)) {\n            this.devToolsDefaultShortcutActions.add(actionId);\n            continue;\n          }\n\n          if (ForwardedActions.has(actionId)) {\n            forwardedKeys.push(\n                ...shortcutDescriptors.map(shortcut => KeyboardShortcut.keyCodeAndModifiersFromKey(shortcut.key)));\n          }\n          if (!keybindSets) {\n            this.devToolsDefaultShortcutActions.add(actionId);\n            this.registerShortcut(new KeyboardShortcut(shortcutDescriptors, actionId, Type.DEFAULT_SHORTCUT));\n          } else {\n            if (keybindSets.includes(KeybindSet.DEVTOOLS_DEFAULT)) {\n              this.devToolsDefaultShortcutActions.add(actionId);\n            }\n            this.registerShortcut(\n                new KeyboardShortcut(shortcutDescriptors, actionId, Type.KEYBIND_SET_SHORTCUT, new Set(keybindSets)));\n          }\n        }\n      }\n    }\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setWhitelistedShortcuts(JSON.stringify(forwardedKeys));\n\n    function platformMatches(platformsString?: string): boolean {\n      if (!platformsString) {\n        return true;\n      }\n      const platforms = platformsString.split(',');\n      let isMatch = false;\n      const currentPlatform = Host.Platform.platform();\n      for (let i = 0; !isMatch && i < platforms.length; ++i) {\n        isMatch = platforms[i] === currentPlatform;\n      }\n      return isMatch;\n    }\n\n    function keybindSetsMatch(keybindSets?: string[]): boolean {\n      if (!keybindSets) {\n        return true;\n      }\n      return keybindSets.includes(keybindSet);\n    }\n  }\n\n  private isDisabledDefault(\n      shortcutDescriptors: {\n        key: number,\n        name: string,\n      }[],\n      action: string): boolean {\n    const disabledDefaults = this.disabledDefaultShortcutsForAction.get(action);\n    for (const disabledDefault of disabledDefaults) {\n      if (disabledDefault.descriptorsMatch(shortcutDescriptors)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport class ShortcutTreeNode {\n  private readonly keyInternal: number;\n  private actionsInternal: string[];\n  private chordsInternal: Map<number, ShortcutTreeNode>;\n  private readonly depth: number;\n\n  constructor(key: number, depth: number = 0) {\n    this.keyInternal = key;\n    this.actionsInternal = [];\n    this.chordsInternal = new Map();\n    this.depth = depth;\n  }\n\n  addAction(action: string): void {\n    this.actionsInternal.push(action);\n  }\n\n  key(): number {\n    return this.keyInternal;\n  }\n\n  chords(): Map<number, ShortcutTreeNode> {\n    return this.chordsInternal;\n  }\n\n  hasChords(): boolean {\n    return this.chordsInternal.size > 0;\n  }\n\n  addKeyMapping(keys: number[], action: string): void {\n    if (keys.length < this.depth) {\n      return;\n    }\n\n    if (keys.length === this.depth) {\n      this.addAction(action);\n    } else {\n      const key = keys[this.depth];\n      if (!this.chordsInternal.has(key)) {\n        this.chordsInternal.set(key, new ShortcutTreeNode(key, this.depth + 1));\n      }\n      (this.chordsInternal.get(key) as ShortcutTreeNode).addKeyMapping(keys, action);\n    }\n  }\n\n  getNode(key: number): ShortcutTreeNode|null {\n    return this.chordsInternal.get(key) || null;\n  }\n\n  actions(): string[] {\n    return this.actionsInternal;\n  }\n\n  clear(): void {\n    this.actionsInternal = [];\n    this.chordsInternal = new Map();\n  }\n}\n\nexport class ForwardedShortcut {\n  static instance = new ForwardedShortcut();\n}\n\nexport const ForwardedActions = new Set<string>([\n  'main.toggle-dock',\n  'debugger.toggle-breakpoints-active',\n  'debugger.toggle-pause',\n  'quick-open.show-command-menu',\n  'console.toggle',\n]);\nexport const KeyTimeout = 1000;\nexport const DefaultShortcutSetting = 'devToolsDefault';\n"],
  "mappings": "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",
  "names": ["event"]
}
