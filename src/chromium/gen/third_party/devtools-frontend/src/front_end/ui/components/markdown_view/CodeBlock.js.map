{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/markdown_view/CodeBlock.ts"],
  "sourcesContent": ["// Copyright (c) 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/legacy/legacy.js'; // for x-link\n\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as CodeMirror from '../../../third_party/codemirror.next/codemirror.next.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as TextEditor from '../../../ui/components/text_editor/text_editor.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as VisualLogging from '../../visual_logging/visual_logging.js';\n\nimport styles from './codeBlock.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   * @description The header text if not present and language is not set.\n   */\n  code: 'Code',\n  /**\n   * @description The title of the button to copy the codeblock from a Markdown view.\n   */\n  copy: 'Copy code',\n  /**\n   * @description The title of the button after it was pressed and the text was copied to clipboard.\n   */\n  copied: 'Copied to clipboard',\n  /**\n   * @description Disclaimer shown in the code blocks.\n   */\n  disclaimer: 'Use code snippets with caution',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/markdown_view/CodeBlock.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface Heading {\n  showCopyButton: boolean;\n  text: string;\n}\n\nexport class CodeBlock extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #code = '';\n  #codeLang = '';\n  #copyTimeout = 1000;\n  #timer?: ReturnType<typeof setTimeout>;\n  #copied = false;\n  #editorState?: CodeMirror.EditorState;\n  #languageConf = new CodeMirror.Compartment();\n  /**\n   * Whether to display a notice \"\u200B\u200BUse code snippets with caution\" in code\n   * blocks.\n   */\n  #displayNotice = false;\n  #header?: string;\n  #showCopyButton = true;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n    this.#render();\n  }\n\n  set code(value: string) {\n    this.#code = value;\n    this.#editorState = CodeMirror.EditorState.create({\n      doc: this.#code,\n      extensions: [\n        TextEditor.Config.baseConfiguration(this.#code),\n        CodeMirror.EditorState.readOnly.of(true),\n        CodeMirror.EditorView.lineWrapping,\n        this.#languageConf.of(CodeMirror.javascript.javascript()),\n      ],\n    });\n    this.#render();\n  }\n\n  get code(): string {\n    return this.#code;\n  }\n\n  set codeLang(value: string) {\n    this.#codeLang = value;\n    this.#render();\n  }\n\n  set timeout(value: number) {\n    this.#copyTimeout = value;\n    this.#render();\n  }\n\n  set displayNotice(value: boolean) {\n    this.#displayNotice = value;\n    this.#render();\n  }\n\n  set header(header: string) {\n    this.#header = header;\n    this.#render();\n  }\n\n  set showCopyButton(show: boolean) {\n    this.#showCopyButton = show;\n    this.#render();\n  }\n\n  #onCopy(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(this.#code);\n    this.#copied = true;\n    this.#render();\n    clearTimeout(this.#timer);\n    this.#timer = setTimeout(() => {\n      this.#copied = false;\n      this.#render();\n    }, this.#copyTimeout);\n  }\n\n  #renderNotice(): LitHtml.TemplateResult {\n    // clang-format off\n    return html`<p class=\"notice\">\n      <x-link class=\"link\" href=\"https://support.google.com/legal/answer/13505487\" jslog=${\n        VisualLogging.link('code-disclaimer').track({\n          click: true,\n        })}>\n        ${i18nString(UIStrings.disclaimer)}\n      </x-link>\n    </p>`;\n    // clang-format on\n  }\n\n  #renderCopyButton(): LitHtml.LitTemplate {\n    // clang-format off\n    return html`\n      <div class=\"copy-button-container\">\n        <devtools-button\n          .data=${\n            {\n              variant: Buttons.Button.Variant.ICON,\n              size: Buttons.Button.Size.SMALL,\n              jslogContext: 'copy',\n              iconName: 'copy',\n              title: i18nString(UIStrings.copy),\n            } as Buttons.Button.ButtonData\n          }\n          @click=${this.#onCopy}\n        ></devtools-button>\n        ${this.#copied ? html`<span>${i18nString(UIStrings.copied)}</span>` : LitHtml.nothing}\n      </div>`;\n    // clang-format on\n  }\n\n  #renderTextEditor(): LitHtml.TemplateResult {\n    if (!this.#editorState) {\n      throw new Error('Unexpected: trying to render the text editor without editorState');\n    }\n    // clang-format off\n    return html`\n      <div class=\"code\">\n        <devtools-text-editor .state=${this.#editorState}></devtools-text-editor>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #render(): void {\n    const header = (this.#header ?? this.#codeLang) || i18nString(UIStrings.code);\n\n    // clang-format off\n    LitHtml.render(\n      html`<div class='codeblock' jslog=${VisualLogging.section('code')}>\n      <div class=\"editor-wrapper\">\n        <div class=\"heading\">\n          <h4 class=\"heading-text\">${header}</h4>\n          ${this.#showCopyButton ? this.#renderCopyButton() : LitHtml.nothing}\n        </div>\n        ${this.#renderTextEditor()}\n      </div>\n      ${this.#displayNotice ? this.#renderNotice() : LitHtml.nothing}\n    </div>`,\n      this.#shadow,\n      {\n        host: this,\n      },\n    );\n    // clang-format on\n\n    const editor = this.#shadow?.querySelector('devtools-text-editor')?.editor;\n\n    if (!editor) {\n      return;\n    }\n    let language = CodeMirror.html.html({autoCloseTags: false, selfClosingTags: true});\n    switch (this.#codeLang) {\n      case 'js':\n        language = CodeMirror.javascript.javascript();\n        break;\n      case 'ts':\n        language = CodeMirror.javascript.javascript({typescript: true});\n        break;\n      case 'jsx':\n        language = CodeMirror.javascript.javascript({jsx: true});\n        break;\n      case 'css':\n        language = CodeMirror.css.css();\n        break;\n    }\n    editor.dispatch({\n      effects: this.#languageConf.reconfigure(language),\n    });\n  }\n}\n\ncustomElements.define('devtools-code-block', CodeBlock);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-code-block': CodeBlock;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
