{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/ActionRegistry.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {type Action, getRegisteredActionExtensions, reset as resetActionRegistrations} from './ActionRegistration.js';\nimport {Context} from './Context.js';\n\nlet actionRegistryInstance: ActionRegistry|undefined;\n\nexport class ActionRegistry {\n  private readonly actionsById: Map<string, Action>;\n  private constructor() {\n    this.actionsById = new Map();\n    this.registerActions();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionRegistry {\n    const {forceNew} = opts;\n    if (!actionRegistryInstance || forceNew) {\n      actionRegistryInstance = new ActionRegistry();\n    }\n\n    return actionRegistryInstance;\n  }\n\n  static removeInstance(): void {\n    actionRegistryInstance = undefined;\n  }\n\n  static reset(): void {\n    ActionRegistry.removeInstance();\n    resetActionRegistrations();\n  }\n\n  private registerActions(): void {\n    for (const action of getRegisteredActionExtensions()) {\n      this.actionsById.set(action.id(), action);\n      if (!action.canInstantiate()) {\n        action.setEnabled(false);\n      }\n    }\n  }\n\n  availableActions(): Action[] {\n    return this.applicableActions([...this.actionsById.keys()], Context.instance());\n  }\n\n  actions(): Action[] {\n    return [...this.actionsById.values()];\n  }\n\n  applicableActions(actionIds: string[], context: Context): Action[] {\n    const applicableActions: Action[] = [];\n    for (const actionId of actionIds) {\n      const action = this.actionsById.get(actionId);\n      if (action && action.enabled()) {\n        if (isActionApplicableToContextTypes(action, context.flavors())) {\n          applicableActions.push(action);\n        }\n      }\n    }\n    return applicableActions;\n\n    function isActionApplicableToContextTypes(action: Action, currentContextTypes: Set<unknown>): boolean {\n      const contextTypes = action.contextTypes();\n      if (!contextTypes) {\n        return true;\n      }\n      for (let i = 0; i < contextTypes.length; ++i) {\n        const contextType = contextTypes[i];\n        const isMatching = Boolean(contextType) && currentContextTypes.has(contextType);\n        if (isMatching) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  hasAction(actionId: string): boolean {\n    return this.actionsById.has(actionId);\n  }\n\n  getAction(actionId: string): Action {\n    const action = this.actionsById.get(actionId);\n    if (action) {\n      return action;\n    }\n    throw new Error(`Cannot find registered action with ID '${actionId}'`);\n  }\n}\n"],
  "mappings": ";AAIA,SAAqB,+BAA+B,SAAS,gCAA+B;AAC5F,SAAQ,eAAc;AAEtB,IAAI;AAEG,aAAM,eAAe;AAAA,EACT;AAAA,EACT,cAAc;AACpB,SAAK,cAAc,oBAAI,IAAI;AAC3B,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAEA,OAAO,SAAS,OAEZ,EAAC,UAAU,KAAI,GAAmB;AACpC,UAAM,EAAC,SAAQ,IAAI;AACnB,QAAI,CAAC,0BAA0B,UAAU;AACvC,+BAAyB,IAAI,eAAe;AAAA,IAC9C;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAuB;AAC5B,6BAAyB;AAAA,EAC3B;AAAA,EAEA,OAAO,QAAc;AACnB,mBAAe,eAAe;AAC9B,6BAAyB;AAAA,EAC3B;AAAA,EAEQ,kBAAwB;AAC9B,eAAW,UAAU,8BAA8B,GAAG;AACpD,WAAK,YAAY,IAAI,OAAO,GAAG,GAAG,MAAM;AACxC,UAAI,CAAC,OAAO,eAAe,GAAG;AAC5B,eAAO,WAAW,KAAK;AAAA,MACzB;AAAA,IACF;AAAA,EACF;AAAA,EAEA,mBAA6B;AAC3B,WAAO,KAAK,kBAAkB,CAAC,GAAG,KAAK,YAAY,KAAK,CAAC,GAAG,QAAQ,SAAS,CAAC;AAAA,EAChF;AAAA,EAEA,UAAoB;AAClB,WAAO,CAAC,GAAG,KAAK,YAAY,OAAO,CAAC;AAAA,EACtC;AAAA,EAEA,kBAAkB,WAAqB,SAA4B;AACjE,UAAM,oBAA8B,CAAC;AACrC,eAAW,YAAY,WAAW;AAChC,YAAM,SAAS,KAAK,YAAY,IAAI,QAAQ;AAC5C,UAAI,UAAU,OAAO,QAAQ,GAAG;AAC9B,YAAI,iCAAiC,QAAQ,QAAQ,QAAQ,CAAC,GAAG;AAC/D,4BAAkB,KAAK,MAAM;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAEP,aAAS,iCAAiC,QAAgB,qBAA4C;AACpG,YAAM,eAAe,OAAO,aAAa;AACzC,UAAI,CAAC,cAAc;AACjB,eAAO;AAAA,MACT;AACA,eAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,EAAE,GAAG;AAC5C,cAAM,cAAc,aAAa,CAAC;AAClC,cAAM,aAAa,QAAQ,WAAW,KAAK,oBAAoB,IAAI,WAAW;AAC9E,YAAI,YAAY;AACd,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,UAAU,UAA2B;AACnC,WAAO,KAAK,YAAY,IAAI,QAAQ;AAAA,EACtC;AAAA,EAEA,UAAU,UAA0B;AAClC,UAAM,SAAS,KAAK,YAAY,IAAI,QAAQ;AAC5C,QAAI,QAAQ;AACV,aAAO;AAAA,IACT;AACA,UAAM,IAAI,MAAM,0CAA0C,QAAQ,GAAG;AAAA,EACvE;AACF;",
  "names": []
}
