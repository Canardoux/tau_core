{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/perf_ui/BrickBreaker.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as WindowBounds from '../../../../services/window_bounds/window_bounds.js';\nimport * as ThemeSupport from '../../theme_support/theme_support.js';\n\nimport type {FlameChart} from './FlameChart.js';\n\nconst UIStrings = {\n  /**\n   *@description Message congratulating the user for having won a game.\n   */\n  congrats: 'Congrats, you win!',\n  /**\n   *@description A Postscript hinting the user the possibility to open the game using a keycombo.\n   */\n  ps: 'PS: You can also open the game by typing `fixme`',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/perf_ui/BrickBreaker.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ntype Brick = {\n  x: number,\n  y: number,\n  width: number,\n};\n\nconst MAX_DELTA = 16;\nconst MIN_DELTA = 10;\nconst MAX_PADDLE_LENGTH = 150;\nconst MIN_PADDLE_LENGTH = 85;\nconst PADDLE_HEIGHT = 15;\nconst BALL_RADIUS = 10;\n\ninterface ColorPalette {\n  light: string;\n  mediumLighter: string;\n  mediumDarker: string;\n  dark: string;\n}\n\nconst colorPallettes: ColorPalette[] = [\n  // blues\n  {\n    light: 'rgb(224,240,255)',\n    mediumLighter: 'rgb(176,208,255)',\n    mediumDarker: 'rgb(112,160,221)',\n    dark: 'rgb(0,92,153)',\n  },\n  // pinks\n  {\n    light: 'rgb(253, 216, 229)',\n    mediumLighter: 'rgb(250, 157, 188)',\n    mediumDarker: 'rgb(249, 98, 154)',\n    dark: 'rgb(254, 5, 105)',\n  },\n  // pastel pinks\n  {\n    light: 'rgb(254, 234, 234)',\n    mediumLighter: 'rgb(255, 216, 216)',\n    mediumDarker: 'rgb(255, 195, 195)',\n    dark: 'rgb(235, 125, 138)',\n  },\n  // purples\n  {\n    light: 'rgb(226,183,206)',\n    mediumLighter: 'rgb(219,124,165)',\n    mediumDarker: 'rgb(146,60,129)',\n    dark: 'rgb(186, 85, 255)',\n  },\n  // greens\n  {\n    light: 'rgb(206,255,206)',\n    mediumLighter: 'rgb(128,255,128)',\n    mediumDarker: 'rgb(0,246,0)',\n    dark: 'rgb(0,187,0)',\n  },\n  // reds\n  {\n    light: 'rgb(255, 188, 181)',\n    mediumLighter: 'rgb(254, 170, 170)',\n    mediumDarker: 'rgb(215, 59, 43)',\n    dark: 'rgb(187, 37, 23)',\n  },\n  // aqua\n  {\n    light: 'rgb(236, 254, 250)',\n    mediumLighter: 'rgb(204, 255, 245)',\n    mediumDarker: 'rgb(164, 240, 233)',\n    dark: 'rgb(72,189,144)',\n  },\n  // yellow/pink\n  {\n    light: 'rgb(255, 225, 185)',\n    mediumLighter: 'rgb(255, 204, 141)',\n    mediumDarker: 'rgb(240, 140, 115)',\n    dark: 'rgb(211, 96, 117)',\n  },\n  // ocean breeze\n  {\n    light: 'rgb(218, 255, 248)',\n    mediumLighter: 'rgb(177, 235, 236)',\n    mediumDarker: 'rgb(112, 214, 214)',\n    dark: 'rgb(34, 205, 181)',\n  },\n];\n\n/* rulesdir/no_underscored_properties, rulesdir/ban_style_tags_in_lit_html, rulesdir/ban_a_tags_in_lit_html, rulesdir/lit_html_host_this */\nexport class BrickBreaker extends HTMLElement {\n  #canvas: HTMLCanvasElement;\n  #ctx: CanvasRenderingContext2D;\n\n  #helperCanvas: HTMLCanvasElement;\n  #helperCanvasCtx: CanvasRenderingContext2D;\n  #scorePanel: HTMLElement;\n  #trackTimelineOffset: number = 0;\n  #visibleEntries: Set<number> = new Set();\n  #brokenBricks: Map<number, Brick> = new Map();\n  #keyDownHandlerBound = this.#keyDownHandler.bind(this);\n  #keyUpHandlerBound = this.#keyUpHandler.bind(this);\n  #keyPressHandlerBound = this.#keyPressHandler.bind(this);\n  #closeGameBound = this.#closeGame.bind(this);\n  #mouseMoveHandlerBound = this.#mouseMoveHandler.bind(this);\n  #boundingElement = WindowBounds.WindowBoundsService.WindowBoundsServiceImpl.instance().getDevToolsBoundingElement();\n  // Value by which we moved the game up relative to the viewport\n  #gameViewportOffset: number = 0;\n  #running = false;\n  #initialDPR = devicePixelRatio;\n  #ballX = 0;\n  #ballY = 0;\n  #ballDx = 0;\n  #ballDy = 0;\n  #paddleX = 0;\n  #rightPressed = false;\n  #leftPressed = false;\n  #brickHeight = 0;\n  #lives = 0;\n  #blockCount = 0;\n  #paddleLength = MAX_PADDLE_LENGTH;\n  #minScreenHeight = 150;\n  #maxScreenHeight = 1500;\n  #screenHeightDiff = this.#maxScreenHeight - this.#minScreenHeight;\n  // Value from 0.1 to 1 that multiplies speed depending on the screen height\n  #deltaMultiplier = 0;\n  #deltaVectorLength = 0;\n  #currentPalette: ColorPalette;\n  constructor(private timelineFlameChart: FlameChart) {\n    super();\n    this.#canvas = (this.createChild('canvas', 'fill') as HTMLCanvasElement);\n    this.#ctx = this.#canvas.getContext('2d') as CanvasRenderingContext2D;\n    this.#helperCanvas = document.createElement('canvas');\n    this.#helperCanvasCtx = this.#helperCanvas.getContext('2d') as CanvasRenderingContext2D;\n    const randomPaletteIndex = Math.floor(Math.random() * colorPallettes.length);\n    this.#currentPalette = colorPallettes[randomPaletteIndex];\n    this.#scorePanel = (this.createChild('div') as HTMLElement);\n    this.#scorePanel.classList.add('scorePanel');\n    this.#scorePanel.style.borderImage =\n        'linear-gradient(' + this.#currentPalette.mediumDarker + ',' + this.#currentPalette.dark + ') 1';\n    this.initButton();\n  }\n\n  initButton(): void {\n    const button = (this.createChild('div') as HTMLElement);\n    button.classList.add('game-close-button');\n    button.innerHTML = '<b><span style=\\'font-size: 1.2em; color: white\\'>x</span></b>';\n    button.style.background = this.#currentPalette.dark;\n    button.style.boxShadow = this.#currentPalette.dark + ' 1px 1px, ' + this.#currentPalette.mediumDarker +\n        ' 3px 3px, ' + this.#currentPalette.mediumLighter + ' 5px 5px';\n    button.addEventListener('click', this.#closeGame.bind(this));\n    this.appendChild(button);\n  }\n\n  connectedCallback(): void {\n    this.#running = true;\n    this.#setUpNewGame();\n    this.#boundingElement.addEventListener('keydown', this.#keyDownHandlerBound);\n    document.addEventListener('keydown', this.#keyDownHandlerBound, false);\n    document.addEventListener('keyup', this.#keyUpHandlerBound, false);\n    document.addEventListener('keypress', this.#keyPressHandlerBound, false);\n    window.addEventListener('resize', this.#closeGameBound);\n    document.addEventListener('mousemove', this.#mouseMoveHandlerBound, false);\n    this.tabIndex = 1;\n    this.focus();\n  }\n\n  disconnectedCallback(): void {\n    this.#boundingElement.removeEventListener('keydown', this.#keyDownHandlerBound);\n    window.removeEventListener('resize', this.#closeGameBound);\n    document.removeEventListener('keydown', this.#keyDownHandlerBound, false);\n    document.removeEventListener('keyup', this.#keyUpHandlerBound, false);\n    window.removeEventListener('resize', this.#closeGameBound);\n    document.removeEventListener('keypress', this.#keyPressHandlerBound, false);\n    document.removeEventListener('mousemove', this.#mouseMoveHandlerBound, false);\n  }\n\n  #resetCanvas(): void {\n    const dPR = window.devicePixelRatio;\n    const height = Math.round(this.offsetHeight * dPR);\n    const width = Math.round(this.offsetWidth * dPR);\n    this.#canvas.height = height;\n    this.#canvas.width = width;\n    this.#canvas.style.height = (height / dPR) + 'px';\n    this.#canvas.style.width = (width / dPR) + 'px';\n  }\n\n  #closeGame(): void {\n    this.#running = false;\n    this.remove();\n  }\n\n  #setUpNewGame(): void {\n    this.#resetCanvas();\n    this.#deltaMultiplier = Math.max(0.1, (this.offsetHeight - this.#minScreenHeight) / this.#screenHeightDiff);\n    this.#deltaVectorLength = MIN_DELTA * this.#deltaMultiplier;\n    const trackData = this.timelineFlameChart.drawTrackOnCanvas('Main', this.#ctx, BALL_RADIUS);\n    if (trackData === null || trackData.visibleEntries.size === 0) {\n      console.error('Could not draw game');\n      this.#closeGame();\n      return;\n    }\n    this.#trackTimelineOffset = trackData.top;\n    this.#visibleEntries = trackData.visibleEntries;\n    this.#gameViewportOffset = this.#trackTimelineOffset +\n        this.timelineFlameChart.getCanvas().getBoundingClientRect().top - this.timelineFlameChart.getScrollOffset();\n\n    requestAnimationFrame(() => this.#animateFlameChartTopPositioning(trackData.top, trackData.height));\n  }\n\n  #animateFlameChartTopPositioning(currentOffset: number, flameChartHeight: number): void {\n    if (currentOffset === 0) {\n      this.#createGame();\n      return;\n    }\n    const dPR = window.devicePixelRatio;\n    const currentOffsetOnDPR = Math.round(currentOffset * dPR);\n    const newOffset = Math.max(currentOffset - 4, 0);\n    const newOffsetOnDPR = Math.round(newOffset * dPR);\n    const baseCanvas = this.#canvas;\n    this.#helperCanvas.height = baseCanvas.height;\n    this.#helperCanvas.width = baseCanvas.width;\n    this.#helperCanvas.style.height = baseCanvas.style.height;\n    this.#helperCanvas.style.width = baseCanvas.style.width;\n\n    this.#helperCanvasCtx.drawImage(\n        baseCanvas, 0, currentOffsetOnDPR, baseCanvas.width, flameChartHeight * dPR, 0, newOffsetOnDPR,\n        baseCanvas.width, flameChartHeight * dPR);\n    this.#resetCanvas();\n    this.#ctx.drawImage(this.#helperCanvas, 0, 0);\n    requestAnimationFrame(() => this.#animateFlameChartTopPositioning(newOffset, flameChartHeight));\n  }\n\n  #keyUpHandler(event: KeyboardEvent): void {\n    if (event.key === 'Right' || event.key === 'ArrowRight' || event.key === 'd') {\n      this.#rightPressed = false;\n      event.preventDefault();\n    } else if (event.key === 'Left' || event.key === 'ArrowLeft' || event.key === 'a') {\n      this.#leftPressed = false;\n      event.preventDefault();\n    } else {\n      event.stopImmediatePropagation();\n    }\n  }\n\n  #keyPressHandler(e: Event): void {\n    e.stopImmediatePropagation();\n    e.preventDefault();\n  }\n\n  #keyDownHandler(event: KeyboardEvent): void {\n    if (event.key === 'Escape') {\n      this.#closeGame();\n      event.stopImmediatePropagation();\n    } else if (event.key === 'Right' || event.key === 'ArrowRight' || event.key === 'd') {\n      this.#rightPressed = true;\n      event.preventDefault();\n    } else if (event.key === 'Left' || event.key === 'ArrowLeft' || event.key === 'a') {\n      this.#leftPressed = true;\n      event.preventDefault();\n    } else {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n\n  #mouseMoveHandler(e: MouseEvent): void {\n    this.#paddleX = Math.max(e.offsetX - this.#paddleLength / 2, 0);\n    this.#paddleX = Math.min(this.#paddleX, this.offsetWidth - this.#paddleLength);\n  }\n\n  #createGame(): void {\n    this.#ballX = this.offsetWidth / 2;\n    this.#ballY = this.offsetHeight - PADDLE_HEIGHT - BALL_RADIUS;\n    this.#ballDx = 0;\n    this.#ballDy = -Math.SQRT2 * this.#deltaVectorLength;\n    this.#paddleX = (this.#canvas.width - this.#paddleLength) / 2;\n    this.#rightPressed = false;\n    this.#leftPressed = false;\n    this.#brickHeight = this.timelineFlameChart.getBarHeight();\n    this.#blockCount = this.#visibleEntries.size;\n    this.#lives = Math.max(Math.round(this.#blockCount / 17), 2);\n    this.#draw();\n  }\n\n  #restartBall(): void {\n    this.#ballX = this.offsetWidth / 2;\n    this.#ballY = this.offsetHeight - PADDLE_HEIGHT - BALL_RADIUS;\n    this.#ballDx = 0;\n    this.#ballDy = -Math.SQRT2 * this.#deltaVectorLength;\n  }\n\n  #drawBall(): void {\n    if (!this.#ctx) {\n      return;\n    }\n    const gradient = this.#ctx.createRadialGradient(\n        this.#ballX + BALL_RADIUS / 4,  // Offset towards the left\n        this.#ballY - BALL_RADIUS / 4,  // Offset downwards\n        0,\n        this.#ballX + BALL_RADIUS / 4,\n        this.#ballY - BALL_RADIUS / 4,\n        BALL_RADIUS,\n    );\n\n    // stops for gradient\n    gradient.addColorStop(0.3, this.#currentPalette.mediumLighter);\n    gradient.addColorStop(0.6, this.#currentPalette.mediumDarker);\n    gradient.addColorStop(1, this.#currentPalette.dark);\n\n    this.#ctx.beginPath();\n    this.#ctx.arc(this.#ballX, this.#ballY, BALL_RADIUS, 0, Math.PI * 2);\n    this.#ctx.fillStyle = gradient;\n    this.#ctx.fill();\n    this.#ctx.closePath();\n  }\n\n  #drawPaddle(): void {\n    if (!this.#ctx) {\n      return;\n    }\n\n    const gradient = this.#ctx.createRadialGradient(\n        this.#paddleX + this.#paddleLength / 3,\n        this.offsetHeight - PADDLE_HEIGHT - PADDLE_HEIGHT / 4,\n        0,\n        this.#paddleX + this.#paddleLength / 3,\n        this.offsetHeight - PADDLE_HEIGHT - PADDLE_HEIGHT / 4,\n        this.#paddleLength / 2,\n    );\n\n    gradient.addColorStop(0.3, this.#currentPalette.dark);        // Paddle color\n    gradient.addColorStop(1, this.#currentPalette.mediumDarker);  // Lighter color\n\n    this.#ctx.beginPath();\n    this.#ctx.rect(this.#paddleX, this.offsetHeight - PADDLE_HEIGHT, this.#paddleLength, PADDLE_HEIGHT);\n    this.#ctx.fillStyle = gradient;\n    this.#ctx.fill();\n    this.#ctx.closePath();\n  }\n\n  #patchBrokenBricks(): void {\n    if (!this.#ctx) {\n      return;\n    }\n    for (const brick of this.#brokenBricks.values()) {\n      this.#ctx.beginPath();\n      // Extend the patch width an extra 0.5 px to ensure the\n      // entry is completely covered.\n      this.#ctx.rect(brick.x, brick.y, brick.width + 0.5, this.#brickHeight + 0.5);\n      this.#ctx.fillStyle =\n          ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-neutral-container', this);\n      this.#ctx.fill();\n      this.#ctx.closePath();\n    }\n  }\n\n  #draw(): void {\n    if (this.#initialDPR !== devicePixelRatio) {\n      this.#running = false;\n    }\n    if (this.#lives === 0) {\n      window.alert('GAME OVER');\n      this.#closeGame();\n      return;\n    }\n    if (this.#blockCount === 0) {\n      this.#party();\n      return;\n    }\n    this.#ctx.clearRect(0, 0, this.#canvas.width, this.#canvas.height);\n    this.#ctx.drawImage(this.#helperCanvas, 0, 0);\n    this.#ctx.save();\n    this.#ctx.scale(devicePixelRatio, devicePixelRatio);\n    this.#helperCanvasCtx.save();\n    this.#helperCanvasCtx.scale(devicePixelRatio, devicePixelRatio);\n    this.#patchBrokenBricks();\n    this.#drawBall();\n    this.#drawPaddle();\n    this.#brickCollisionDetection();\n\n    const lives = `<div><b><span style='font-size: 1.3em; color:  ${this.#currentPalette.dark}'>&#x2764;&#xfe0f; ${\n        this.#lives}</span></b></div>`;\n    const blocks = `<div><b><span style='font-size: 1.3em; color: ${this.#currentPalette.dark}'> \uD83E\uDDF1 ${\n        this.#blockCount}</span></b></div>`;\n    this.#scorePanel.innerHTML = lives + blocks;\n\n    this.#blockCount = this.#visibleEntries.size - this.#brokenBricks.size;\n    this.#deltaVectorLength =\n        (MIN_DELTA + (MAX_DELTA - MIN_DELTA) * this.#brokenBricks.size / this.#visibleEntries.size) *\n        this.#deltaMultiplier;\n\n    this.#paddleLength = MAX_PADDLE_LENGTH -\n        (MAX_PADDLE_LENGTH - MIN_PADDLE_LENGTH) * this.#brokenBricks.size / this.#visibleEntries.size;\n\n    if (this.#ballX + this.#ballDx > this.offsetWidth - BALL_RADIUS || this.#ballX + this.#ballDx < BALL_RADIUS) {\n      // Ball bounces on a side wall.\n      this.#ballDx = -this.#ballDx;\n    }\n    if (this.#ballY + this.#ballDy < BALL_RADIUS) {\n      // Ball bounces on the top.\n      this.#ballDy = -this.#ballDy;\n    } else if (this.#ballY + this.#ballDy > this.offsetHeight - BALL_RADIUS && this.#ballDy > 0) {\n      // Ball is at the bottom, either on the paddle or in the\n      // void.\n      if (this.#ballX > (this.#paddleX - BALL_RADIUS) &&\n          this.#ballX < this.#paddleX + this.#paddleLength + BALL_RADIUS) {\n        // Ball bounces on the paddle, calculate this.ballDx and this.ballDy so that\n        // the speed remains constant.\n        // speed^2 = dx^2 + dy^2 = MAX_DELTA^2 + MAX_DELTA^2\n        // -> speed = MAX_DELTA * sqrt(2)\n        // (speed is measured in pixels / frame)\n\n        // The bouncing angle is determined by the portion of the\n        // paddle's length on which it falls and by the restriction\n        // -MAX_DELTA < this.ballDx < MAX_DELTA\n\n        // Since we allow for some margin of error (BALL_RADIUS), we need to\n        // round the ball x to be within the paddle.\n        let roundedBallX = Math.min(this.#ballX, this.#paddleX + this.#paddleLength);\n        roundedBallX = Math.max(roundedBallX, this.#paddleX);\n        const paddleLenghtPortion = (roundedBallX - this.#paddleX) * this.#deltaVectorLength * 2 / this.#paddleLength;\n        this.#ballDx = -this.#deltaVectorLength + paddleLenghtPortion;\n        // Solve for this.ballDy given the above equation and bounce up.\n        this.#ballDy = -Math.sqrt(2 * Math.pow(this.#deltaVectorLength, 2) - Math.pow(this.#ballDx, 2));\n      } else {\n        // Ball fell into oblivion, restart.\n        this.#restartBall();\n        this.#paddleX = (this.offsetWidth - this.#paddleLength) / 2;\n        this.#lives--;\n      }\n    }\n    const keyDelta = Math.round(this.clientWidth / 60);\n    if (this.#rightPressed && this.#paddleX < this.offsetWidth - this.#paddleLength) {\n      this.#paddleX += keyDelta;\n    } else if (this.#leftPressed && this.#paddleX > 0) {\n      this.#paddleX -= keyDelta;\n    }\n\n    this.#ballX += Math.round(this.#ballDx);\n    this.#ballY += Math.round(this.#ballDy);\n    this.#ctx.restore();\n    this.#helperCanvasCtx.restore();\n    if (this.#running) {\n      requestAnimationFrame(this.#draw.bind(this));\n    }\n  }\n  #brickCollisionDetection(): void {\n    // coordinatesToEntryIndex expects coordinates relative to the timeline canvas.\n    const timelineCanvasOffset = this.timelineFlameChart.getCanvas().getBoundingClientRect();\n\n    // Check collision if there is an entry on the top, bottom, left and right of the ball\n    const ballYRelativeToGame = this.#ballY + this.#gameViewportOffset - timelineCanvasOffset.top;\n    const entryIndexTop =\n        this.timelineFlameChart.coordinatesToEntryIndex(this.#ballX, ballYRelativeToGame + BALL_RADIUS);\n    const entryIndexBottom =\n        this.timelineFlameChart.coordinatesToEntryIndex(this.#ballX, ballYRelativeToGame - BALL_RADIUS);\n    const entryIndexRight =\n        this.timelineFlameChart.coordinatesToEntryIndex(this.#ballX + BALL_RADIUS, ballYRelativeToGame);\n    const entryIndexLeft =\n        this.timelineFlameChart.coordinatesToEntryIndex(this.#ballX - BALL_RADIUS, ballYRelativeToGame);\n\n    // Points on the 45 degree corners\n    const diffBetweenCornerandCircle = BALL_RADIUS / Math.SQRT2;\n    const entryIndexRightTop = this.timelineFlameChart.coordinatesToEntryIndex(\n        this.#ballX + diffBetweenCornerandCircle, ballYRelativeToGame + diffBetweenCornerandCircle);\n    const entryIndexLeftTop = this.timelineFlameChart.coordinatesToEntryIndex(\n        this.#ballX - diffBetweenCornerandCircle, ballYRelativeToGame + diffBetweenCornerandCircle);\n    const entryIndexRightBottom = this.timelineFlameChart.coordinatesToEntryIndex(\n        this.#ballX + diffBetweenCornerandCircle, ballYRelativeToGame - diffBetweenCornerandCircle);\n    const entryIndexLeftBottom = this.timelineFlameChart.coordinatesToEntryIndex(\n        this.#ballX - diffBetweenCornerandCircle, ballYRelativeToGame - diffBetweenCornerandCircle);\n\n    const breakBrick = (entryIndex: number): void => {\n      const entryCoordinates = this.timelineFlameChart.entryIndexToCoordinates(entryIndex);\n      if (entryCoordinates) {\n        // Cap entries starting before the visibile window in the game.\n        const entryBegin = Math.max(entryCoordinates.x - timelineCanvasOffset.left, 0);\n        // Extend the patch width and height an extra 0.5 px to ensure the\n        // entry is completely covered.\n        this.#brokenBricks.set(entryIndex, {\n          x: entryBegin - 0.5,\n          y: entryCoordinates.y - this.#gameViewportOffset - 0.5,\n          width: this.timelineFlameChart.entryWidth(entryIndex),\n        });\n      }\n    };\n\n    if (entryIndexTop > -1 && !this.#brokenBricks.has(entryIndexTop) && this.#visibleEntries.has(entryIndexTop)) {\n      this.#ballDy = -this.#ballDy;\n      breakBrick(entryIndexTop);\n      return;\n    }\n\n    if (entryIndexBottom > -1 && !this.#brokenBricks.has(entryIndexBottom) &&\n        this.#visibleEntries.has(entryIndexBottom)) {\n      this.#ballDy = -this.#ballDy;\n      breakBrick(entryIndexBottom);\n      return;\n    }\n\n    if (entryIndexRight > -1 && !this.#brokenBricks.has(entryIndexRight) && this.#visibleEntries.has(entryIndexRight)) {\n      this.#ballDx = -this.#ballDx;\n      breakBrick(entryIndexRight);\n      return;\n    }\n\n    if (entryIndexLeft > -1 && !this.#brokenBricks.has(entryIndexLeft) && this.#visibleEntries.has(entryIndexLeft)) {\n      this.#ballDx = -this.#ballDx;\n      breakBrick(entryIndexLeft);\n      return;\n    }\n\n    // if the brick hits on 45 degrees, reverse both directions\n    const diagonalIndexes = [entryIndexRightTop, entryIndexLeftTop, entryIndexRightBottom, entryIndexLeftBottom];\n    for (const index of diagonalIndexes) {\n      if (index > -1 && !this.#brokenBricks.has(index) && this.#visibleEntries.has(index)) {\n        this.#ballDx = -this.#ballDx;\n        this.#ballDy = -this.#ballDy;\n        breakBrick(index);\n        return;\n      }\n    }\n  }\n\n  #random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n  #party(): void {\n    this.#resetCanvas();\n    let count = 0;\n    const columnCount = 15;\n    const rowCount = 5;\n    const xSpacing = this.offsetWidth / columnCount;\n    const ySpacing = this.offsetHeight * 0.7 / columnCount;\n    const timeoutIDs: number[] = [];\n    const randomOffset = (): number => -20 + Math.random() * 40;\n    const drawConfetti = (): void => {\n      for (let i = 0; i < columnCount * rowCount; i++) {\n        const confettiContainerElement = document.createElement('span');\n        confettiContainerElement.className = 'confetti-100';\n        confettiContainerElement.append(this.#createConfettiElement(\n            (i % columnCount) * xSpacing + randomOffset(), (i % rowCount) * ySpacing + randomOffset()));\n        timeoutIDs.push(window.setTimeout(() => this.append(confettiContainerElement), Math.random() * 100));\n        timeoutIDs.push(window.setTimeout(() => {\n          confettiContainerElement.remove();\n        }, 1000));\n      }\n      if (++count < 6) {\n        setTimeout(drawConfetti, Math.random() * 100 + 400);\n        return;\n      }\n      window.alert(`${i18nString(UIStrings.congrats)}\\n${i18nString(UIStrings.ps)}`);\n\n      timeoutIDs.forEach(id => clearTimeout(id));\n      this.#closeGame();\n    };\n    drawConfetti();\n  }\n\n  #createConfettiElement(x: number, y: number): HTMLElement {\n    const maxDistance = 400;\n    const maxRotation = 3;\n    const emojies = ['\uD83D\uDCAF', '\uD83C\uDF89', '\uD83C\uDF8A'];\n    const confettiElement = document.createElement('span');\n    confettiElement.textContent = emojies[this.#random(0, emojies.length)];\n    confettiElement.className = 'confetti-100-particle';\n    confettiElement.style.setProperty('--rotation', this.#random(-maxRotation * 360, maxRotation * 360) + 'deg');\n    confettiElement.style.setProperty('--to-X', this.#random(-maxDistance, maxDistance) + 'px');\n    confettiElement.style.setProperty('--to-Y', this.#random(-maxDistance, maxDistance) + 'px');\n    confettiElement.style.left = x + 'px';\n    confettiElement.style.top = y + 'px';\n\n    return confettiElement;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'brick-breaker': BrickBreaker;\n  }\n}\n\ncustomElements.define('brick-breaker', BrickBreaker);\n"],
  "mappings": "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",
  "names": []
}
