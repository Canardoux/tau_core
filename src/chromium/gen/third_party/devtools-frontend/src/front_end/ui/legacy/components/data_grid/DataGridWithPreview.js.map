{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/data_grid/DataGridWithPreview.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Nokia Inc.  All rights reserved.\n * Copyright (C) 2013 Samsung Electronics. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as VisualLogging from '../../../visual_logging/visual_logging.js';\nimport {ARIAUtils, EmptyWidget, SplitWidget, Widget} from '../../legacy.js';\n\nimport {type ColumnDescriptor, DataGridImpl, DataGridNode, Events} from './DataGrid.js';\n\nconst UIStrings = {\n  /**\n   *@description Preview text when viewing storage in Application panel\n   */\n  selectAValueToPreview: 'Select a value to preview',\n  /**\n   *@description Text for announcing number of entries after filtering\n   *@example {5} PH1\n   */\n  numberEntries: 'Number of entries shown in table: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/data_grid/DataGridWithPreview.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface Callbacks {\n  // Called to refresh items, e.g when the sorting order is changed.\n  refreshItems: () => void;\n  // Edit callbacks. If undefined, the data grid is not editable.\n  edit?: {\n    // Called when a key is deleted in the UI.\n    removeItem: (key: string) => void,\n    // Called when an item is created or updated in the UI.\n    setItem: (key: string, value: string) => void,\n  };\n  // Called when the selection state changes.\n  setCanDeleteSelected: (canSelect: boolean) => void;\n  // Called to create the preview widget when a new item is selected.\n  createPreview: (key: string, value: string) => Promise<Widget.Widget|null>;\n}\n\ninterface Messages {\n  title: string;\n  itemDeleted: string;\n  itemsCleared: string;\n}\n\n/**\n * A helper typically used in the Application panel. Renders a split view\n * between a DataGrid displaying key-value pairs and a preview Widget.\n */\nexport class DataGridWithPreview {\n  #dataGrid: DataGridImpl<unknown>;\n  readonly #splitWidget: SplitWidget.SplitWidget;\n  readonly #previewPanel: Widget.VBox;\n  #preview: Widget.Widget|null;\n  #previewValue: string|null;\n\n  #callbacks: Callbacks;\n  #messages: Messages;\n\n  constructor(id: string, parent: HTMLElement, columns: ColumnDescriptor[], callbacks: Callbacks, messages: Messages) {\n    this.#callbacks = callbacks;\n    this.#messages = messages;\n    this.#dataGrid = new DataGridImpl({\n      displayName: this.#messages.title,\n      columns,\n      refreshCallback: this.#callbacks.refreshItems,\n      ...(this.#callbacks.edit ? {\n        editCallback: this.#editingCallback.bind(this),\n        deleteCallback: this.#deleteCallback.bind(this),\n      } :\n                                 {}),\n    });\n    this.#dataGrid.addEventListener(Events.SELECTED_NODE, event => {\n      void this.#previewEntry(event.data);\n    });\n    this.#dataGrid.addEventListener(Events.DESELECTED_NODE, () => {\n      void this.#previewEntry(null);\n    });\n    this.#dataGrid.addEventListener(Events.SORTING_CHANGED, this.#callbacks.refreshItems, this);\n    this.#dataGrid.setStriped(true);\n    this.#dataGrid.setName(`${id}-datagrid-with-preview`);\n\n    this.#splitWidget = new SplitWidget.SplitWidget(\n        /* isVertical: */ false, /* secondIsSidebar: */ true, `${id}-split-view-state`);\n    this.#splitWidget.show(parent);\n\n    this.#previewPanel = new Widget.VBox();\n    this.#previewPanel.setMinimumSize(0, 50);\n    this.#previewPanel.element.setAttribute('jslog', `${VisualLogging.pane('preview').track({resize: true})}`);\n    const resizer = this.#previewPanel.element.createChild('div', 'preview-panel-resizer');\n    const dataGridWidget = this.#dataGrid.asWidget();\n    dataGridWidget.setMinimumSize(0, 50);\n    this.#splitWidget.setMainWidget(dataGridWidget);\n    this.#splitWidget.setSidebarWidget(this.#previewPanel);\n    this.#splitWidget.installResizer(resizer);\n\n    this.#preview = null;\n    this.#previewValue = null;\n\n    this.showPreview(null, null);\n  }\n\n  get dataGridForTesting(): DataGridImpl<unknown> {\n    return this.#dataGrid;\n  }\n\n  clearItems(): void {\n    this.#dataGrid.rootNode().removeChildren();\n    this.#dataGrid.addCreationNode(false);\n    ARIAUtils.alert(this.#messages.itemsCleared);\n    this.#callbacks.setCanDeleteSelected(false);\n  }\n\n  removeItem(key: string): void {\n    const rootNode = this.#dataGrid.rootNode();\n    const children = rootNode.children;\n\n    for (let i = 0; i < children.length; ++i) {\n      const childNode = children[i];\n      if (childNode.data.key === key) {\n        rootNode.removeChild(childNode);\n        this.#callbacks.setCanDeleteSelected(children.length > 1);\n        return;\n      }\n    }\n  }\n\n  addItem(item: string[]): void {\n    const rootNode = this.#dataGrid.rootNode();\n    const children = rootNode.children;\n\n    const key = item[0];\n    const value = item[1];\n\n    for (let i = 0; i < children.length; ++i) {\n      if (children[i].data.key === key) {\n        return;\n      }\n    }\n\n    const childNode = new DataGridNode({key, value}, false);\n    rootNode.insertChild(childNode, children.length - 1);\n  }\n\n  updateItem(key: string, value: string): void {\n    const childNode = this.#dataGrid.rootNode().children.find((child: DataGridNode<unknown>) => child.data.key === key);\n    if (!childNode) {\n      return;\n    }\n    if (childNode.data.value !== value) {\n      childNode.data.value = value;\n      childNode.refresh();\n    }\n    if (!childNode.selected) {\n      return;\n    }\n    if (this.#previewValue !== value) {\n      void this.#previewEntry(childNode);\n    }\n    this.#callbacks.setCanDeleteSelected(true);\n  }\n\n  showItems(items: string[][]): void {\n    const rootNode = this.#dataGrid.rootNode();\n    let selectedKey: null = null;\n    for (const node of rootNode.children) {\n      if (!node.selected) {\n        continue;\n      }\n      selectedKey = node.data.key;\n      void this.#previewEntry(node);\n      break;\n    }\n    rootNode.removeChildren();\n    let selectedNode: DataGridNode<unknown>|null = null;\n    const sortDirection = this.#dataGrid.isSortOrderAscending() ? 1 : -1;\n    const filteredList = items.sort(function(item1: string[], item2: string[]): number {\n      return sortDirection * (item1[0] > item2[0] ? 1 : -1);\n    });\n    for (const item of filteredList) {\n      const key = item[0];\n      const value = item[1];\n      const node = new DataGridNode({key, value}, false);\n      node.selectable = true;\n      rootNode.appendChild(node);\n      if (!selectedNode || key === selectedKey) {\n        selectedNode = node;\n      }\n    }\n    if (selectedNode) {\n      selectedNode.selected = true;\n    }\n    this.#dataGrid.addCreationNode(false);\n    this.#callbacks.setCanDeleteSelected(Boolean(selectedNode));\n    ARIAUtils.alert(i18nString(UIStrings.numberEntries, {PH1: filteredList.length}));\n  }\n\n  deleteSelectedItem(): void {\n    if (!this.#dataGrid.selectedNode) {\n      return;\n    }\n\n    this.#deleteCallback(this.#dataGrid.selectedNode);\n  }\n\n  #editingCallback(editingNode: DataGridNode<unknown>, columnIdentifier: string, oldText: string, newText: string):\n      void {\n    if (columnIdentifier === 'key') {\n      if (typeof oldText === 'string') {\n        this.#callbacks.edit?.removeItem(oldText);\n      }\n      this.#callbacks.edit?.setItem(newText, editingNode.data.value || '');\n      this.#removeDupes(editingNode);\n    } else {\n      this.#callbacks.edit?.setItem(editingNode.data.key || '', newText);\n    }\n  }\n\n  #removeDupes(masterNode: DataGridNode<unknown>): void {\n    const rootNode = this.#dataGrid.rootNode();\n    const children = rootNode.children;\n    for (let i = children.length - 1; i >= 0; --i) {\n      const childNode = children[i];\n      if ((childNode.data.key === masterNode.data.key) && (masterNode !== childNode)) {\n        rootNode.removeChild(childNode);\n      }\n    }\n  }\n\n  #deleteCallback(node: DataGridNode<unknown>): void {\n    if (!node || node.isCreationNode) {\n      return;\n    }\n\n    this.#callbacks.edit?.removeItem(node.data.key);\n\n    ARIAUtils.alert(this.#messages.itemDeleted);\n  }\n\n  showPreview(preview: Widget.Widget|null, value: string|null): void {\n    if (this.#preview && this.#previewValue === value) {\n      return;\n    }\n    if (this.#preview) {\n      this.#preview.detach();\n    }\n    if (!preview) {\n      preview = new EmptyWidget.EmptyWidget(i18nString(UIStrings.selectAValueToPreview));\n    }\n    this.#previewValue = value;\n    this.#preview = preview;\n    preview.show(this.#previewPanel.contentElement);\n  }\n\n  async #previewEntry(entry: DataGridNode<unknown>|null): Promise<void> {\n    const value = entry && entry.data && entry.data.value;\n    if (entry && entry.data && entry.data.value) {\n      const preview = await this.#callbacks.createPreview(entry.key, value as string);\n      // Selection could've changed while the preview was loaded\n      if (entry.selected) {\n        this.showPreview(preview, value);\n      }\n    } else {\n      this.showPreview(null, value);\n    }\n  }\n\n  detach(): void {\n    this.#splitWidget.detach();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
