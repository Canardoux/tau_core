{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/SettingsUI.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Settings from '../components/settings/settings.js';\nimport * as VisualLogging from '../visual_logging/visual_logging.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {InspectorView} from './InspectorView.js';\nimport {Tooltip} from './Tooltip.js';\nimport {CheckboxLabel, createOption} from './UIUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Note when a setting change will require the user to reload DevTools\n   */\n  srequiresReload: '*Requires reload',\n  /**\n   *@description Message to display if a setting change requires a reload of DevTools\n   */\n  oneOrMoreSettingsHaveChanged: 'One or more settings have changed which requires a reload to take effect.',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/SettingsUI.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport const createSettingCheckbox = function(\n    name: string, setting: Common.Settings.Setting<boolean>, omitParagraphElement?: boolean,\n    tooltip?: string): Element {\n  const label = CheckboxLabel.create(name, undefined, undefined, setting.name);\n  if (tooltip) {\n    Tooltip.install(label, tooltip);\n  }\n\n  const input = label.checkboxElement;\n  input.name = name;\n  bindCheckbox(input, setting);\n\n  if (omitParagraphElement) {\n    return label;\n  }\n\n  const p = document.createElement('p');\n  p.appendChild(label);\n  return p;\n};\n\nconst createSettingSelect = function(\n    name: string, options: Common.Settings.SimpleSettingOption[], requiresReload: boolean|null,\n    setting: Common.Settings.Setting<unknown>, subtitle?: string): HTMLElement {\n  const container = document.createElement('div');\n  const settingSelectElement = container.createChild('p');\n  settingSelectElement.classList.add('settings-select');\n  const label = settingSelectElement.createChild('label');\n  const select = (settingSelectElement.createChild('select', 'chrome-select') as HTMLSelectElement);\n  label.textContent = name;\n  if (subtitle) {\n    container.classList.add('chrome-select-label');\n    label.createChild('p').textContent = subtitle;\n  }\n  select.setAttribute('jslog', `${VisualLogging.dropDown().track({change: true}).context(setting.name)}`);\n  ARIAUtils.bindLabelToControl(label, select);\n\n  for (const option of options) {\n    if (option.text && typeof option.value === 'string') {\n      select.add(createOption(option.text, option.value, Platform.StringUtilities.toKebabCase(option.value)));\n    }\n  }\n\n  let reloadWarning: HTMLElement|(Element | null) = (null as Element | null);\n  if (requiresReload) {\n    reloadWarning = container.createChild('p', 'reload-warning hidden');\n    reloadWarning.textContent = i18nString(UIStrings.srequiresReload);\n    ARIAUtils.markAsAlert(reloadWarning);\n  }\n\n  const {deprecation} = setting;\n  if (deprecation) {\n    const warning = new Settings.SettingDeprecationWarning.SettingDeprecationWarning();\n    warning.data = deprecation;\n    label.appendChild(warning);\n  }\n\n  setting.addChangeListener(settingChanged);\n  settingChanged();\n  select.addEventListener('change', selectChanged, false);\n  return container;\n\n  function settingChanged(): void {\n    const newValue = setting.get();\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].value === newValue) {\n        select.selectedIndex = i;\n      }\n    }\n    select.disabled = setting.disabled();\n  }\n\n  function selectChanged(): void {\n    // Don't use event.target.value to avoid conversion of the value to string.\n    setting.set(options[select.selectedIndex].value);\n    if (reloadWarning) {\n      reloadWarning.classList.remove('hidden');\n      InspectorView.instance().displayReloadRequiredWarning(i18nString(UIStrings.oneOrMoreSettingsHaveChanged));\n    }\n  }\n};\n\nexport const bindCheckbox = function(\n    inputElement: Element, setting: Common.Settings.Setting<boolean>, metric?: UserMetricOptions): void {\n  const input = (inputElement as HTMLInputElement);\n  function settingChanged(): void {\n    if (input.checked !== setting.get()) {\n      input.checked = setting.get();\n    }\n  }\n  setting.addChangeListener(settingChanged);\n  settingChanged();\n\n  function inputChanged(): void {\n    if (setting.get() !== input.checked) {\n      setting.set(input.checked);\n    }\n\n    if (setting.get() && metric?.enable) {\n      Host.userMetrics.actionTaken(metric.enable);\n    }\n\n    if (!setting.get() && metric?.disable) {\n      Host.userMetrics.actionTaken(metric.disable);\n    }\n\n    if (metric?.toggle) {\n      Host.userMetrics.actionTaken(metric.toggle);\n    }\n  }\n\n  input.addEventListener('change', inputChanged, false);\n};\n\nexport const createCustomSetting = function(name: string, element: Element): Element {\n  const p = document.createElement('p');\n  p.classList.add('settings-select');\n  const label = p.createChild('label');\n  label.textContent = name;\n  ARIAUtils.bindLabelToControl(label, element);\n  p.appendChild(element);\n  return p;\n};\n\nexport const createControlForSetting = function(\n    setting: Common.Settings.Setting<unknown>, subtitle?: string): HTMLElement|null {\n  const uiTitle = setting.title();\n  switch (setting.type()) {\n    case Common.Settings.SettingType.BOOLEAN: {\n      const component = new Settings.SettingCheckbox.SettingCheckbox();\n      component.data = {\n        setting: setting as Common.Settings.Setting<boolean>,\n      };\n      component.onchange = () => {\n        if (setting.reloadRequired()) {\n          InspectorView.instance().displayReloadRequiredWarning(i18nString(UIStrings.oneOrMoreSettingsHaveChanged));\n        }\n      };\n      return component;\n    }\n    case Common.Settings.SettingType.ENUM:\n      if (Array.isArray(setting.options())) {\n        return createSettingSelect(uiTitle, setting.options(), setting.reloadRequired(), setting, subtitle);\n      }\n      console.error('Enum setting defined without options');\n      return null;\n    default:\n      console.error('Invalid setting type: ' + setting.type());\n      return null;\n  }\n};\n\nexport interface SettingUI {\n  settingElement(): Element|null;\n}\n\n/**\n * Track toggle action as a whole or\n * track on and off action separately.\n */\nexport interface UserMetricOptions {\n  toggle?: Host.UserMetrics.Action;\n  enable?: Host.UserMetrics.Action;\n  disable?: Host.UserMetrics.Action;\n}\n"],
  "mappings": "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",
  "names": []
}
