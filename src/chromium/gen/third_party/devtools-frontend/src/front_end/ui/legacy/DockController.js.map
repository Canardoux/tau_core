{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/DockController.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport type {ActionDelegate} from './ActionRegistration.js';\nimport {alert} from './ARIAUtils.js';\nimport type {Context} from './Context.js';\nimport {type Provider, ToolbarButton, type ToolbarItem} from './Toolbar.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to close something\n   */\n  close: 'Close',\n  /**\n   *@description Text to dock the DevTools to the right of the browser tab\n   */\n  dockToRight: 'Dock to right',\n  /**\n   *@description Text to dock the DevTools to the bottom of the browser tab\n   */\n  dockToBottom: 'Dock to bottom',\n  /**\n   *@description Text to dock the DevTools to the left of the browser tab\n   */\n  dockToLeft: 'Dock to left',\n  /**\n   *@description Text to undock the DevTools\n   */\n  undockIntoSeparateWindow: 'Undock into separate window',\n  /**\n   *@description Text announced when the DevTools are undocked\n   */\n  devtoolsUndocked: 'DevTools is undocked',\n  /**\n   *@description Text announced when the DevTools are docked to the left, right, or bottom of the browser tab\n   *@example {bottom} PH1\n   */\n  devToolsDockedTo: 'DevTools is docked to {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/DockController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet dockControllerInstance: DockController;\n\nexport class DockController extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private canDockInternal: boolean;\n  readonly closeButton: ToolbarButton;\n  private readonly currentDockStateSetting: Common.Settings.Setting<DockState>;\n  private readonly lastDockStateSetting: Common.Settings.Setting<DockState>;\n  private dockSideInternal: DockState|undefined = undefined;\n  private titles?: Common.UIString.LocalizedString[];\n  private savedFocus?: Element|null;\n\n  constructor(canDock: boolean) {\n    super();\n    this.canDockInternal = canDock;\n\n    this.closeButton = new ToolbarButton(i18nString(UIStrings.close), 'cross');\n    this.closeButton.element.setAttribute('jslog', `${VisualLogging.close().track({click: true})}`);\n    this.closeButton.element.classList.add('close-devtools');\n    this.closeButton.addEventListener(\n        ToolbarButton.Events.CLICK,\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.closeWindow.bind(\n            Host.InspectorFrontendHost.InspectorFrontendHostInstance));\n\n    this.currentDockStateSetting = Common.Settings.Settings.instance().moduleSetting('currentDockState');\n    this.lastDockStateSetting = Common.Settings.Settings.instance().createSetting('last-dock-state', DockState.BOTTOM);\n\n    if (!canDock) {\n      this.dockSideInternal = DockState.UNDOCKED;\n      this.closeButton.setVisible(false);\n      return;\n    }\n\n    this.currentDockStateSetting.addChangeListener(this.dockSideChanged, this);\n    if (states.indexOf(this.currentDockStateSetting.get()) === -1) {\n      this.currentDockStateSetting.set(DockState.RIGHT);\n    }\n    if (states.indexOf(this.lastDockStateSetting.get()) === -1) {\n      this.currentDockStateSetting.set(DockState.BOTTOM);\n    }\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    canDock: boolean,\n  } = {forceNew: null, canDock: false}): DockController {\n    const {forceNew, canDock} = opts;\n    if (!dockControllerInstance || forceNew) {\n      dockControllerInstance = new DockController(canDock);\n    }\n\n    return dockControllerInstance;\n  }\n\n  initialize(): void {\n    if (!this.canDockInternal) {\n      return;\n    }\n\n    this.titles = [\n      i18nString(UIStrings.dockToRight),\n      i18nString(UIStrings.dockToBottom),\n      i18nString(UIStrings.dockToLeft),\n      i18nString(UIStrings.undockIntoSeparateWindow),\n    ];\n    this.dockSideChanged();\n  }\n\n  private dockSideChanged(): void {\n    this.setDockSide(this.currentDockStateSetting.get());\n    setTimeout(this.announceDockLocation.bind(this), 2000);\n  }\n\n  dockSide(): DockState|undefined {\n    return this.dockSideInternal;\n  }\n\n  canDock(): boolean {\n    return this.canDockInternal;\n  }\n\n  isVertical(): boolean {\n    return this.dockSideInternal === DockState.RIGHT || this.dockSideInternal === DockState.LEFT;\n  }\n\n  setDockSide(dockSide: DockState): void {\n    if (states.indexOf(dockSide) === -1) {\n      // If the side is invalid, default to a valid one\n      dockSide = states[0];\n    }\n\n    if (this.dockSideInternal === dockSide) {\n      return;\n    }\n\n    if (this.dockSideInternal !== undefined) {\n      document.body.classList.remove(this.dockSideInternal);\n    }\n    document.body.classList.add(dockSide);\n\n    if (this.dockSideInternal) {\n      this.lastDockStateSetting.set(this.dockSideInternal);\n    }\n\n    this.savedFocus = Platform.DOMUtilities.deepActiveElement(document);\n    const eventData = {from: this.dockSideInternal, to: dockSide};\n    this.dispatchEventToListeners(Events.BEFORE_DOCK_SIDE_CHANGED, eventData);\n    console.timeStamp('DockController.setIsDocked');\n    this.dockSideInternal = dockSide;\n    this.currentDockStateSetting.set(dockSide);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setIsDocked(\n        dockSide !== DockState.UNDOCKED, this.setIsDockedResponse.bind(this, eventData));\n    this.closeButton.setVisible(this.dockSideInternal !== DockState.UNDOCKED);\n    this.dispatchEventToListeners(Events.DOCK_SIDE_CHANGED, eventData);\n  }\n\n  private setIsDockedResponse(eventData: ChangeEvent): void {\n    this.dispatchEventToListeners(Events.AFTER_DOCK_SIDE_CHANGED, eventData);\n    if (this.savedFocus) {\n      (this.savedFocus as HTMLElement).focus();\n      this.savedFocus = null;\n    }\n  }\n\n  toggleDockSide(): void {\n    if (this.lastDockStateSetting.get() === this.currentDockStateSetting.get()) {\n      const index = states.indexOf(this.currentDockStateSetting.get()) || 0;\n      this.lastDockStateSetting.set(states[(index + 1) % states.length]);\n    }\n    this.setDockSide(this.lastDockStateSetting.get());\n  }\n\n  announceDockLocation(): void {\n    if (this.dockSideInternal === DockState.UNDOCKED) {\n      alert(i18nString(UIStrings.devtoolsUndocked));\n    } else {\n      alert(i18nString(UIStrings.devToolsDockedTo, {PH1: this.dockSideInternal || ''}));\n    }\n  }\n}\n\nexport const enum DockState {\n  BOTTOM = 'bottom',\n  RIGHT = 'right',\n  LEFT = 'left',\n  UNDOCKED = 'undocked',\n}\n\nconst states = [DockState.RIGHT, DockState.BOTTOM, DockState.LEFT, DockState.UNDOCKED];\n\n// Use BeforeDockSideChanged to do something before all the UI bits are updated,\n// DockSideChanged to update UI, and AfterDockSideChanged to perform actions\n// after frontend is docked/undocked in the browser.\n\nexport const enum Events {\n  BEFORE_DOCK_SIDE_CHANGED = 'BeforeDockSideChanged',\n  DOCK_SIDE_CHANGED = 'DockSideChanged',\n  AFTER_DOCK_SIDE_CHANGED = 'AfterDockSideChanged',\n}\n\nexport interface ChangeEvent {\n  from: DockState|undefined;\n  to: DockState;\n}\n\nexport type EventTypes = {\n  [Events.BEFORE_DOCK_SIDE_CHANGED]: ChangeEvent,\n  [Events.DOCK_SIDE_CHANGED]: ChangeEvent,\n  [Events.AFTER_DOCK_SIDE_CHANGED]: ChangeEvent,\n};\n\nexport class ToggleDockActionDelegate implements ActionDelegate {\n  handleAction(_context: Context, _actionId: string): boolean {\n    DockController.instance().toggleDockSide();\n    return true;\n  }\n}\n\nlet closeButtonProviderInstance: CloseButtonProvider;\n\nexport class CloseButtonProvider implements Provider {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): CloseButtonProvider {\n    const {forceNew} = opts;\n    if (!closeButtonProviderInstance || forceNew) {\n      closeButtonProviderInstance = new CloseButtonProvider();\n    }\n\n    return closeButtonProviderInstance;\n  }\n\n  item(): ToolbarItem|null {\n    return DockController.instance().closeButton;\n  }\n}\n"],
  "mappings": "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",
  "names": ["DockState", "Events"]
}
