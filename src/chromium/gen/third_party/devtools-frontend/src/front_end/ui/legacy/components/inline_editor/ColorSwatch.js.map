{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/inline_editor/ColorSwatch.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as ColorPicker from '../../../legacy/components/color_picker/color_picker.js';\nimport * as LitHtml from '../../../lit-html/lit-html.js';\nimport * as VisualLogging from '../../../visual_logging/visual_logging.js';\n\nimport colorSwatchStyles from './colorSwatch.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Icon element title in Color Swatch of the inline editor in the Styles tab\n   */\n  shiftclickToChangeColorFormat: 'Shift-click to change color format',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/inline_editor/ColorSwatch.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ColorChangedEvent extends Event {\n  static readonly eventName = 'colorchanged';\n\n  data: {color: Common.Color.Color};\n\n  constructor(color: Common.Color.Color) {\n    super(ColorChangedEvent.eventName, {});\n    this.data = {color};\n  }\n}\n\nexport class ClickEvent extends Event {\n  static readonly eventName = 'swatchclick';\n\n  constructor() {\n    super(ClickEvent.eventName, {});\n  }\n}\n\nexport class ColorSwatch extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private tooltip: string = i18nString(UIStrings.shiftclickToChangeColorFormat);\n  private color: Common.Color.Color|null = null;\n  private readonly: boolean = false;\n\n  constructor(tooltip?: string) {\n    super();\n    this.shadow.adoptedStyleSheets = [\n      colorSwatchStyles,\n    ];\n    if (tooltip) {\n      this.tooltip = tooltip;\n    }\n  }\n\n  static isColorSwatch(element: Element): element is ColorSwatch {\n    return element.localName === 'devtools-color-swatch';\n  }\n\n  getReadonly(): boolean {\n    return this.readonly;\n  }\n\n  setReadonly(readonly: boolean): void {\n    if (this.readonly === readonly) {\n      return;\n    }\n\n    this.readonly = readonly;\n    if (this.color) {\n      this.renderColor(this.color);\n    }\n  }\n\n  getColor(): Common.Color.Color|null {\n    return this.color;\n  }\n\n  get anchorBox(): AnchorBox|null {\n    const swatch = this.shadow.querySelector('.color-swatch');\n    return swatch ? swatch.boxInWindow() : null;\n  }\n\n  getText(): string|undefined {\n    return this.color?.getAuthoredText() ?? this.color?.asString();\n  }\n\n  /**\n   * Render this swatch given a color object or text to be parsed as a color.\n   * @param color The color object or string to use for this swatch.\n   */\n  renderColor(color: Common.Color.Color): void {\n    this.color = color;\n\n    const colorSwatchClasses = LitHtml.Directives.classMap({\n      'color-swatch': true,\n      readonly: this.readonly,\n    });\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    // Note that we use a <slot> with a default value here to display the color text. Consumers of this component are\n    // free to append any content to replace what is being shown here.\n    // Note also that whitespace between nodes is removed on purpose to avoid pushing these elements apart. Do not\n    // re-format the HTML code.\n    LitHtml.render(\n      html`<span class=${colorSwatchClasses} title=${this.tooltip}><span class=\"color-swatch-inner\"\n        style=\"background-color: ${this.getText()};\"\n        jslog=${VisualLogging.showStyleEditor('color').track({click: true})}\n        @click=${this.onClick}\n        @mousedown=${this.consume}\n        @dblclick=${this.consume}></span></span><slot><span>${this.getText()}</span></slot>`,\n      this.shadow, {host: this});\n    // clang-format on\n  }\n\n  private onClick(e: KeyboardEvent): void {\n    if (this.readonly) {\n      return;\n    }\n\n    if (e.shiftKey) {\n      e.stopPropagation();\n      this.showFormatPicker(e);\n      return;\n    }\n\n    this.dispatchEvent(new ClickEvent());\n  }\n\n  private consume(e: Event): void {\n    e.stopPropagation();\n  }\n\n  setColor(color: Common.Color.Color): void {\n    this.renderColor(color);\n    this.dispatchEvent(new ColorChangedEvent(color));\n  }\n\n  setColorText(color: Common.Color.Color): void {\n    this.firstElementChild?.remove();\n    this.renderColor(color);\n    const span = this.appendChild(document.createElement('span'));\n    span.appendChild(document.createTextNode(color.getAuthoredText() ?? color.asString()));\n    this.dispatchEvent(new ColorChangedEvent(color));\n  }\n\n  private showFormatPicker(e: Event): void {\n    if (!this.color) {\n      return;\n    }\n\n    const contextMenu = new ColorPicker.FormatPickerContextMenu.FormatPickerContextMenu(this.color);\n    void contextMenu.show(e, color => {\n      this.setColorText(color);\n    });\n  }\n}\n\ncustomElements.define('devtools-color-swatch', ColorSwatch);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-color-swatch': ColorSwatch;\n  }\n\n  interface HTMLElementEventMap {\n    [ColorChangedEvent.eventName]: ColorChangedEvent;\n    [ClickEvent.eventName]: Event;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
