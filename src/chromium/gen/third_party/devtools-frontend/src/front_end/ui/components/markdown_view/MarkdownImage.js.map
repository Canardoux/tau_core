{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/markdown_view/MarkdownImage.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../components/icon_button/icon_button.js';\n\nimport type * as IconButton from '../../components/icon_button/icon_button.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport markdownImageStyles from './markdownImage.css.js';\nimport {getMarkdownImage, type ImageData} from './MarkdownImagesMap.js';\n\nconst {html, Directives: {ifDefined}} = LitHtml;\n\nexport interface MarkdownImageData {\n  key: string;\n  title: string;\n}\n\n/**\n * Component to render images from parsed markdown.\n * Parsed images from markdown are not directly rendered, instead they have to be added to the MarkdownImagesMap.ts.\n * This makes sure that all icons/images are accounted for in markdown.\n */\nexport class MarkdownImage extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #imageData?: ImageData;\n  #imageTitle?: string;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [markdownImageStyles];\n  }\n\n  set data(data: MarkdownImageData) {\n    const {key, title} = data;\n    const markdownImage = getMarkdownImage(key);\n    this.#imageData = markdownImage;\n    this.#imageTitle = title;\n    this.#render();\n  }\n\n  #getIconComponent(): LitHtml.TemplateResult {\n    if (!this.#imageData) {\n      return html``;\n    }\n    const {src, color, width = '100%', height = '100%'} = this.#imageData;\n    return html`\n      <devtools-icon .data=${{iconPath: src, color, width, height} as IconButton.Icon.IconData}></devtools-icon>\n    `;\n  }\n\n  #getImageComponent(): LitHtml.TemplateResult {\n    if (!this.#imageData) {\n      return html``;\n    }\n    const {src, width = '100%', height = '100%'} = this.#imageData;\n    return html`\n      <img class=\"markdown-image\" src=${src} alt=${ifDefined(this.#imageTitle)} width=${width} height=${height} />\n    `;\n  }\n\n  #render(): void {\n    if (!this.#imageData) {\n      return;\n    }\n    const {isIcon} = this.#imageData;\n    const imageComponent = isIcon ? this.#getIconComponent() : this.#getImageComponent();\n    LitHtml.render(imageComponent, this.#shadow, {host: this});\n  }\n}\n\ncustomElements.define('devtools-markdown-image', MarkdownImage);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-markdown-image': MarkdownImage;\n  }\n}\n"],
  "mappings": ";AAIA,OAAO;AAGP,YAAY,aAAa;AAEzB,OAAO,yBAAyB;AAChC,SAAQ,wBAAuC;AAE/C,MAAM,EAAC,MAAM,YAAY,EAAC,UAAS,EAAC,IAAI;AAYjC,aAAM,sBAAsB,YAAY;AAAA,EAEpC,UAAU,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;AAAA,EACnD;AAAA,EACA;AAAA,EAEA,oBAA0B;AACxB,SAAK,QAAQ,qBAAqB,CAAC,mBAAmB;AAAA,EACxD;AAAA,EAEA,IAAI,KAAK,MAAyB;AAChC,UAAM,EAAC,KAAK,MAAK,IAAI;AACrB,UAAM,gBAAgB,iBAAiB,GAAG;AAC1C,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,oBAA4C;AAC1C,QAAI,CAAC,KAAK,YAAY;AACpB,aAAO;AAAA,IACT;AACA,UAAM,EAAC,KAAK,OAAO,QAAQ,QAAQ,SAAS,OAAM,IAAI,KAAK;AAC3D,WAAO;AAAA,6BACkB,EAAC,UAAU,KAAK,OAAO,OAAO,OAAM,CAA6B;AAAA;AAAA,EAE5F;AAAA,EAEA,qBAA6C;AAC3C,QAAI,CAAC,KAAK,YAAY;AACpB,aAAO;AAAA,IACT;AACA,UAAM,EAAC,KAAK,QAAQ,QAAQ,SAAS,OAAM,IAAI,KAAK;AACpD,WAAO;AAAA,wCAC6B,GAAG,QAAQ,UAAU,KAAK,WAAW,CAAC,UAAU,KAAK,WAAW,MAAM;AAAA;AAAA,EAE5G;AAAA,EAEA,UAAgB;AACd,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AACA,UAAM,EAAC,OAAM,IAAI,KAAK;AACtB,UAAM,iBAAiB,SAAS,KAAK,kBAAkB,IAAI,KAAK,mBAAmB;AACnF,YAAQ,OAAO,gBAAgB,KAAK,SAAS,EAAC,MAAM,KAAI,CAAC;AAAA,EAC3D;AACF;AAEA,eAAe,OAAO,2BAA2B,aAAa;",
  "names": []
}
