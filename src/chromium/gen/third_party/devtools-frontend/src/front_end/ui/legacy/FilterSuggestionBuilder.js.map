{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/FilterSuggestionBuilder.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport type {Suggestion} from './SuggestBox.js';\n\nexport class FilterSuggestionBuilder {\n  private readonly keys: string[];\n  private readonly valueSorter: ((arg0: string, arg1: Array<string>) => void)|\n      ((key: string, result: string[]) => string[]);\n  private readonly valuesMap: Map<string, Set<string>>;\n\n  constructor(keys: string[], valueSorter?: ((arg0: string, arg1: Array<string>) => void)) {\n    this.keys = keys;\n    this.valueSorter = valueSorter || ((key: string, result: string[]) => result.sort());\n    this.valuesMap = new Map();\n  }\n\n  completions(expression: string, prefix: string, force?: boolean): Promise<Suggestion[]> {\n    if (!prefix && !force) {\n      return Promise.resolve([]);\n    }\n\n    const negative = prefix.startsWith('-');\n    if (negative) {\n      prefix = prefix.substring(1);\n    }\n    const modifier = negative ? '-' : '';\n    const valueDelimiterIndex = prefix.indexOf(':');\n\n    const suggestions: Suggestion[] = [];\n    if (valueDelimiterIndex === -1) {\n      const matcher = new RegExp('^' + Platform.StringUtilities.escapeForRegExp(prefix), 'i');\n      for (const key of this.keys) {\n        if (matcher.test(key)) {\n          suggestions.push(({text: modifier + key + ':'} as Suggestion));\n        }\n      }\n    } else {\n      const key = prefix.substring(0, valueDelimiterIndex).toLowerCase();\n      const value = prefix.substring(valueDelimiterIndex + 1);\n      const matcher = new RegExp('^' + Platform.StringUtilities.escapeForRegExp(value), 'i');\n      const values = Array.from(this.valuesMap.get(key) || new Set<string>());\n      this.valueSorter(key, values);\n      for (const item of values) {\n        if (matcher.test(item) && (item !== value)) {\n          suggestions.push(({text: modifier + key + ':' + item} as Suggestion));\n        }\n      }\n    }\n    return Promise.resolve(suggestions);\n  }\n\n  addItem(key: string, value?: string|null): void {\n    if (!value) {\n      return;\n    }\n\n    let set = this.valuesMap.get(key);\n    if (!set) {\n      set = (new Set() as Set<string>);\n      this.valuesMap.set(key, set);\n    }\n    set.add(value);\n  }\n\n  clear(): void {\n    this.valuesMap.clear();\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,cAAc;AAInB,aAAM,wBAAwB;AAAA,EAClB;AAAA,EACA;AAAA,EAEA;AAAA,EAEjB,YAAY,MAAgB,aAA6D;AACvF,SAAK,OAAO;AACZ,SAAK,cAAc,gBAAgB,CAAC,KAAa,WAAqB,OAAO,KAAK;AAClF,SAAK,YAAY,oBAAI,IAAI;AAAA,EAC3B;AAAA,EAEA,YAAY,YAAoB,QAAgB,OAAwC;AACtF,QAAI,CAAC,UAAU,CAAC,OAAO;AACrB,aAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,IAC3B;AAEA,UAAM,WAAW,OAAO,WAAW,GAAG;AACtC,QAAI,UAAU;AACZ,eAAS,OAAO,UAAU,CAAC;AAAA,IAC7B;AACA,UAAM,WAAW,WAAW,MAAM;AAClC,UAAM,sBAAsB,OAAO,QAAQ,GAAG;AAE9C,UAAM,cAA4B,CAAC;AACnC,QAAI,wBAAwB,IAAI;AAC9B,YAAM,UAAU,IAAI,OAAO,MAAM,SAAS,gBAAgB,gBAAgB,MAAM,GAAG,GAAG;AACtF,iBAAW,OAAO,KAAK,MAAM;AAC3B,YAAI,QAAQ,KAAK,GAAG,GAAG;AACrB,sBAAY,KAAM,EAAC,MAAM,WAAW,MAAM,IAAG,CAAgB;AAAA,QAC/D;AAAA,MACF;AAAA,IACF,OAAO;AACL,YAAM,MAAM,OAAO,UAAU,GAAG,mBAAmB,EAAE,YAAY;AACjE,YAAM,QAAQ,OAAO,UAAU,sBAAsB,CAAC;AACtD,YAAM,UAAU,IAAI,OAAO,MAAM,SAAS,gBAAgB,gBAAgB,KAAK,GAAG,GAAG;AACrF,YAAM,SAAS,MAAM,KAAK,KAAK,UAAU,IAAI,GAAG,KAAK,oBAAI,IAAY,CAAC;AACtE,WAAK,YAAY,KAAK,MAAM;AAC5B,iBAAW,QAAQ,QAAQ;AACzB,YAAI,QAAQ,KAAK,IAAI,KAAM,SAAS,OAAQ;AAC1C,sBAAY,KAAM,EAAC,MAAM,WAAW,MAAM,MAAM,KAAI,CAAgB;AAAA,QACtE;AAAA,MACF;AAAA,IACF;AACA,WAAO,QAAQ,QAAQ,WAAW;AAAA,EACpC;AAAA,EAEA,QAAQ,KAAa,OAA2B;AAC9C,QAAI,CAAC,OAAO;AACV;AAAA,IACF;AAEA,QAAI,MAAM,KAAK,UAAU,IAAI,GAAG;AAChC,QAAI,CAAC,KAAK;AACR,YAAO,oBAAI,IAAI;AACf,WAAK,UAAU,IAAI,KAAK,GAAG;AAAA,IAC7B;AACA,QAAI,IAAI,KAAK;AAAA,EACf;AAAA,EAEA,QAAc;AACZ,SAAK,UAAU,MAAM;AAAA,EACvB;AACF;",
  "names": []
}
