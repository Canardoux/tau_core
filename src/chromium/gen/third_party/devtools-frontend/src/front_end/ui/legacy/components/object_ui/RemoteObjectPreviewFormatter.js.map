{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/object_ui/RemoteObjectPreviewFormatter.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../../generated/protocol.js';\nimport * as UI from '../../legacy.js';\n\nconst UIStrings = {\n  /**\n   * @description Text shown in the console object preview. Shown when the user is inspecting a\n   * JavaScript object and there are multiple empty properties on the object (x =\n   * 'times'/'multiply').\n   * @example {3} PH1\n   */\n  emptyD: 'empty \u00D7 {PH1}',\n  /**\n   * @description Shown when the user is inspecting a JavaScript object in the console and there is\n   * an empty property on the object..\n   */\n  empty: 'empty',\n  /**\n   * @description Text shown when the user is inspecting a JavaScript object, but of the properties\n   * is not immediately available because it is a JavaScript 'getter' function, which means we have\n   * to run some code first in order to compute this property.\n   */\n  thePropertyIsComputedWithAGetter: 'The property is computed with a getter',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/object_ui/RemoteObjectPreviewFormatter.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class RemoteObjectPreviewFormatter {\n  private static objectPropertyComparator(a: Protocol.Runtime.PropertyPreview, b: Protocol.Runtime.PropertyPreview):\n      number {\n    return sortValue(a) - sortValue(b);\n\n    function sortValue(property: Protocol.Runtime.PropertyPreview): number {\n      // TODO(einbinder) expose whether preview properties are actually internal.\n      if (property.name === InternalName.PROMISE_STATE) {\n        return 1;\n      }\n      if (property.name === InternalName.PROMISE_RESULT) {\n        return 2;\n      }\n      if (property.name === InternalName.GENERATOR_STATE || property.name === InternalName.PRIMITIVE_VALUE ||\n          property.name === InternalName.WEAK_REF_TARGET) {\n        return 3;\n      }\n      if (property.type !== Protocol.Runtime.PropertyPreviewType.Function && !property.name.startsWith('#')) {\n        return 4;\n      }\n      return 5;\n    }\n  }\n\n  appendObjectPreview(\n      parentElement: DocumentFragment|Element, preview: Protocol.Runtime.ObjectPreview, isEntry: boolean): void {\n    const description = preview.description;\n    const subTypesWithoutValuePreview = new Set<Protocol.Runtime.ObjectPreviewSubtype|'internal#entry'|'trustedtype'>([\n      Protocol.Runtime.ObjectPreviewSubtype.Arraybuffer,\n      Protocol.Runtime.ObjectPreviewSubtype.Dataview,\n      Protocol.Runtime.ObjectPreviewSubtype.Error,\n      Protocol.Runtime.ObjectPreviewSubtype.Null,\n      Protocol.Runtime.ObjectPreviewSubtype.Regexp,\n      Protocol.Runtime.ObjectPreviewSubtype.Webassemblymemory,\n      'internal#entry',\n      'trustedtype',\n    ]);\n    if (preview.type !== Protocol.Runtime.ObjectPreviewType.Object ||\n        (preview.subtype && subTypesWithoutValuePreview.has(preview.subtype)) || isEntry) {\n      parentElement.appendChild(this.renderPropertyPreview(preview.type, preview.subtype, undefined, description));\n      return;\n    }\n    const isArrayOrTypedArray = preview.subtype === Protocol.Runtime.ObjectPreviewSubtype.Array ||\n        preview.subtype === Protocol.Runtime.ObjectPreviewSubtype.Typedarray;\n    if (description) {\n      let text;\n      if (isArrayOrTypedArray) {\n        const arrayLength = SDK.RemoteObject.RemoteObject.arrayLength(preview);\n        const arrayLengthText = arrayLength > 1 ? ('(' + arrayLength + ')') : '';\n        const arrayName = SDK.RemoteObject.RemoteObject.arrayNameFromDescription(description);\n        text = arrayName === 'Array' ? arrayLengthText : (arrayName + arrayLengthText);\n      } else {\n        const hideDescription = description === 'Object';\n        text = hideDescription ? '' : description;\n      }\n      if (text.length > 0) {\n        parentElement.createChild('span', 'object-description').textContent = text + '\\xA0';\n      }\n    }\n\n    const propertiesElement = parentElement.createChild('span', 'object-properties-preview');\n    UI.UIUtils.createTextChild(propertiesElement, isArrayOrTypedArray ? '[' : '{');\n    if (preview.entries) {\n      this.appendEntriesPreview(propertiesElement, preview);\n    } else if (isArrayOrTypedArray) {\n      this.appendArrayPropertiesPreview(propertiesElement, preview);\n    } else {\n      this.appendObjectPropertiesPreview(propertiesElement, preview);\n    }\n    if (preview.overflow) {\n      const ellipsisText = propertiesElement.textContent && propertiesElement.textContent.length > 1 ? ',\\xA0\u2026' : '\u2026';\n      propertiesElement.createChild('span').textContent = ellipsisText;\n    }\n    UI.UIUtils.createTextChild(propertiesElement, isArrayOrTypedArray ? ']' : '}');\n  }\n\n  private abbreviateFullQualifiedClassName(description: string): string {\n    const abbreviatedDescription = description.split('.');\n    for (let i = 0; i < abbreviatedDescription.length - 1; ++i) {\n      abbreviatedDescription[i] = Platform.StringUtilities.trimMiddle(abbreviatedDescription[i], 3);\n    }\n    return abbreviatedDescription.join('.');\n  }\n\n  private appendObjectPropertiesPreview(parentElement: Element, preview: Protocol.Runtime.ObjectPreview): void {\n    const properties = preview.properties.filter(p => p.type !== 'accessor')\n                           .sort(RemoteObjectPreviewFormatter.objectPropertyComparator);\n    for (let i = 0; i < properties.length; ++i) {\n      if (i > 0) {\n        UI.UIUtils.createTextChild(parentElement, ', ');\n      }\n\n      const property = properties[i];\n      const name = property.name;\n      // Internal properties are given special formatting, e.g. Promises `<rejected>: 123`.\n      if (preview.subtype === Protocol.Runtime.ObjectPreviewSubtype.Promise && name === InternalName.PROMISE_STATE) {\n        parentElement.appendChild(this.renderDisplayName('<' + property.value + '>'));\n        const nextProperty = i + 1 < properties.length ? properties[i + 1] : null;\n        if (nextProperty && nextProperty.name === InternalName.PROMISE_RESULT) {\n          if (property.value !== 'pending') {\n            UI.UIUtils.createTextChild(parentElement, ': ');\n            parentElement.appendChild(this.renderPropertyPreviewOrAccessor([nextProperty]));\n          }\n          i++;\n        }\n      } else if (preview.subtype === 'generator' && name === InternalName.GENERATOR_STATE) {\n        parentElement.appendChild(this.renderDisplayName('<' + property.value + '>'));\n      } else if (name === InternalName.PRIMITIVE_VALUE) {\n        parentElement.appendChild(this.renderPropertyPreviewOrAccessor([property]));\n      } else if (name === InternalName.WEAK_REF_TARGET) {\n        if (property.type === Protocol.Runtime.PropertyPreviewType.Undefined) {\n          parentElement.appendChild(this.renderDisplayName('<cleared>'));\n        } else {\n          parentElement.appendChild(this.renderPropertyPreviewOrAccessor([property]));\n        }\n      } else {\n        parentElement.appendChild(this.renderDisplayName(name));\n        UI.UIUtils.createTextChild(parentElement, ': ');\n        parentElement.appendChild(this.renderPropertyPreviewOrAccessor([property]));\n      }\n    }\n  }\n\n  private appendArrayPropertiesPreview(parentElement: Element, preview: Protocol.Runtime.ObjectPreview): void {\n    const arrayLength = SDK.RemoteObject.RemoteObject.arrayLength(preview);\n    const indexProperties = preview.properties.filter(p => toArrayIndex(p.name) !== -1).sort(arrayEntryComparator);\n    const otherProperties = preview.properties.filter(p => toArrayIndex(p.name) === -1)\n                                .sort(RemoteObjectPreviewFormatter.objectPropertyComparator);\n\n    function arrayEntryComparator(a: Protocol.Runtime.PropertyPreview, b: Protocol.Runtime.PropertyPreview): number {\n      return toArrayIndex(a.name) - toArrayIndex(b.name);\n    }\n\n    function toArrayIndex(name: string): number {\n      // We need to differentiate between property accesses and array index accesses\n      // Therefore, we need to make sure we are always dealing with an i32, in the event\n      // that a particular property also exists, but as the literal string. For example\n      // for {[\"1.5\"]: true}, we don't want to return `true` if we provide `1.5` as the\n      // value, but only want to do that if we provide `\"1.5\"`.\n      const index = Number(name) >>> 0;\n      if (String(index) === name && index < arrayLength) {\n        return index;\n      }\n      return -1;\n    }\n\n    // Gaps can be shown when all properties are guaranteed to be in the preview.\n    const canShowGaps = !preview.overflow;\n    let lastNonEmptyArrayIndex = -1;\n    let elementsAdded = false;\n    for (let i = 0; i < indexProperties.length; ++i) {\n      if (elementsAdded) {\n        UI.UIUtils.createTextChild(parentElement, ', ');\n      }\n\n      const property = indexProperties[i];\n      const index = toArrayIndex(property.name);\n      if (canShowGaps && index - lastNonEmptyArrayIndex > 1) {\n        appendUndefined(index);\n        UI.UIUtils.createTextChild(parentElement, ', ');\n      }\n      if (!canShowGaps && i !== index) {\n        parentElement.appendChild(this.renderDisplayName(property.name));\n        UI.UIUtils.createTextChild(parentElement, ': ');\n      }\n      parentElement.appendChild(this.renderPropertyPreviewOrAccessor([property]));\n      lastNonEmptyArrayIndex = index;\n      elementsAdded = true;\n    }\n\n    if (canShowGaps && arrayLength - lastNonEmptyArrayIndex > 1) {\n      if (elementsAdded) {\n        UI.UIUtils.createTextChild(parentElement, ', ');\n      }\n      appendUndefined(arrayLength);\n    }\n\n    for (let i = 0; i < otherProperties.length; ++i) {\n      if (elementsAdded) {\n        UI.UIUtils.createTextChild(parentElement, ', ');\n      }\n\n      const property = otherProperties[i];\n      parentElement.appendChild(this.renderDisplayName(property.name));\n      UI.UIUtils.createTextChild(parentElement, ': ');\n      parentElement.appendChild(this.renderPropertyPreviewOrAccessor([property]));\n      elementsAdded = true;\n    }\n\n    function appendUndefined(index: number): void {\n      const span = parentElement.createChild('span', 'object-value-undefined');\n      const count = index - lastNonEmptyArrayIndex - 1;\n      // TODO(l10n): Plurals. Tricky because of a bug in the presubmit check for plurals.\n      span.textContent = count !== 1 ? i18nString(UIStrings.emptyD, {PH1: count}) : i18nString(UIStrings.empty);\n      elementsAdded = true;\n    }\n  }\n\n  private appendEntriesPreview(parentElement: Element, preview: Protocol.Runtime.ObjectPreview): void {\n    if (!preview.entries) {\n      return;\n    }\n    for (let i = 0; i < preview.entries.length; ++i) {\n      if (i > 0) {\n        UI.UIUtils.createTextChild(parentElement, ', ');\n      }\n\n      const entry = preview.entries[i];\n      if (entry.key) {\n        this.appendObjectPreview(parentElement, entry.key, true /* isEntry */);\n        UI.UIUtils.createTextChild(parentElement, ' => ');\n      }\n      this.appendObjectPreview(parentElement, entry.value, true /* isEntry */);\n    }\n  }\n\n  private renderDisplayName(name: string): Element {\n    const result = document.createElement('span');\n    result.classList.add('name');\n    const needsQuotes = /^\\s|\\s$|^$|\\n/.test(name);\n    result.textContent = needsQuotes ? '\"' + name.replace(/\\n/g, '\\u21B5') + '\"' : name;\n    return result;\n  }\n\n  private renderPropertyPreviewOrAccessor(propertyPath: Protocol.Runtime.PropertyPreview[]): Element {\n    const property = propertyPath[propertyPath.length - 1];\n    if (!property) {\n      throw new Error('Could not find property');\n    }\n    return this.renderPropertyPreview(property.type, (property.subtype as string), property.name, property.value);\n  }\n\n  renderPropertyPreview(type: string, subtype?: string, className?: string|null, description?: string): HTMLElement {\n    const span = document.createElement('span');\n    span.classList.add('object-value-' + (subtype || type));\n    description = description || '';\n\n    if (type === 'accessor') {\n      span.textContent = '(...)';\n      UI.Tooltip.Tooltip.install(span, i18nString(UIStrings.thePropertyIsComputedWithAGetter));\n      return span;\n    }\n\n    if (type === 'function') {\n      span.textContent = '\\u0192';\n      return span;\n    }\n\n    if (type === 'object' && subtype === 'trustedtype' && className) {\n      createSpanForTrustedType(span, description, className);\n      return span;\n    }\n\n    if (type === 'object' && subtype === 'node' && description) {\n      createSpansForNodeTitle(span, description);\n      return span;\n    }\n\n    if (type === 'string') {\n      UI.UIUtils.createTextChildren(span, Platform.StringUtilities.formatAsJSLiteral(description));\n      return span;\n    }\n\n    if (type === 'object' && !subtype) {\n      let preview = this.abbreviateFullQualifiedClassName(description);\n      if (preview === 'Object') {\n        preview = '{\u2026}';\n      }\n      span.textContent = preview;\n      UI.Tooltip.Tooltip.install(span, description);\n      return span;\n    }\n\n    span.textContent = description;\n    return span;\n  }\n}\n\nconst enum InternalName {\n  GENERATOR_STATE = '[[GeneratorState]]',\n  PRIMITIVE_VALUE = '[[PrimitiveValue]]',\n  PROMISE_STATE = '[[PromiseState]]',\n  PROMISE_RESULT = '[[PromiseResult]]',\n  WEAK_REF_TARGET = '[[WeakRefTarget]]',\n}\n\nexport const createSpansForNodeTitle = function(container: Element, nodeTitle: string): void {\n  const match = nodeTitle.match(/([^#.]+)(#[^.]+)?(\\..*)?/);\n  if (!match) {\n    return;\n  }\n  container.createChild('span', 'webkit-html-tag-name').textContent = match[1];\n  if (match[2]) {\n    container.createChild('span', 'webkit-html-attribute-value').textContent = match[2];\n  }\n  if (match[3]) {\n    container.createChild('span', 'webkit-html-attribute-name').textContent = match[3];\n  }\n};\n\nexport const createSpanForTrustedType = function(span: Element, description: string, className: string): void {\n  UI.UIUtils.createTextChildren(span, `${className} `);\n  const trustedContentSpan = document.createElement('span');\n  trustedContentSpan.classList.add('object-value-string');\n  UI.UIUtils.createTextChildren(trustedContentSpan, '\"', description.replace(/\\n/g, '\\u21B5'), '\"');\n  span.appendChild(trustedContentSpan);\n};\n"],
  "mappings": "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",
  "names": ["InternalName"]
}
