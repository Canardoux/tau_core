{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/perf_ui/OverviewGrid.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as IconButton from '../../../components/icon_button/icon_button.js';\nimport * as VisualLogging from '../../../visual_logging/visual_logging.js';\nimport * as UI from '../../legacy.js';\nimport * as ThemeSupport from '../../theme_support/theme_support.js';\n\nimport overviewGridStyles from './overviewGrid.css.legacy.js';\nimport {type Calculator, TimelineGrid} from './TimelineGrid.js';\n\nconst UIStrings = {\n  /**\n   *@description Label for the window for Overview grids\n   */\n  overviewGridWindow: 'Overview grid window',\n  /**\n   *@description Label for left window resizer for Overview grids\n   */\n  leftResizer: 'Left Resizer',\n  /**\n   *@description Label for right window resizer for Overview grids\n   */\n  rightResizer: 'Right Resizer',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/perf_ui/OverviewGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class OverviewGrid {\n  element: HTMLDivElement;\n  private readonly grid: TimelineGrid;\n  // The |window| will manage the html element of resizers, the left/right blue-colour curtain, and handle the resizing,\n  // zooming, and breadcrumb creation.\n  private readonly window: Window;\n  constructor(prefix: string, calculator?: Calculator) {\n    this.element = document.createElement('div');\n    this.element.id = prefix + '-overview-container';\n\n    this.grid = new TimelineGrid();\n    this.grid.element.id = prefix + '-overview-grid';\n    this.grid.setScrollTop(0);\n\n    this.element.appendChild(this.grid.element);\n\n    this.window = new Window(this.element, this.grid.dividersLabelBarElement, calculator);\n  }\n\n  enableCreateBreadcrumbsButton(): HTMLElement {\n    return this.window.enableCreateBreadcrumbsButton();\n  }\n\n  set showingScreenshots(isShowing: boolean) {\n    this.window.showingScreenshots = isShowing;\n  }\n\n  clientWidth(): number {\n    return this.element.clientWidth;\n  }\n\n  updateDividers(calculator: Calculator): void {\n    this.grid.updateDividers(calculator);\n  }\n\n  addEventDividers(dividers: Element[]): void {\n    this.grid.addEventDividers(dividers);\n  }\n\n  removeEventDividers(): void {\n    this.grid.removeEventDividers();\n  }\n\n  reset(): void {\n    this.window.reset();\n  }\n\n  // The ratio of the left slider position compare to the whole overview grid.\n  // It should be a number between 0 and 1.\n  windowLeftRatio(): number {\n    return this.window.windowLeftRatio || 0;\n  }\n\n  // The ratio of the right slider position compare to the whole overview grid.\n  // It should be a number between 0 and 1.\n  windowRightRatio(): number {\n    return this.window.windowRightRatio || 0;\n  }\n\n  /**\n   * This function will return the raw value of the slider window.\n   * Since the OverviewGrid is used in Performance panel or Memory panel, the raw value can be in milliseconds or bytes.\n   *\n   * @returns the pair of start/end value of the slider window in milliseconds or bytes\n   */\n  calculateWindowValue(): {rawStartValue: number, rawEndValue: number} {\n    return this.window.calculateWindowValue();\n  }\n\n  setWindowRatio(leftRatio: number, rightRatio: number): void {\n    this.window.setWindowRatio(leftRatio, rightRatio);\n  }\n\n  addEventListener<T extends keyof EventTypes>(\n      eventType: T, listener: Common.EventTarget.EventListener<EventTypes, T>,\n      thisObject?: Object): Common.EventTarget.EventDescriptor {\n    return this.window.addEventListener(eventType, listener, thisObject);\n  }\n\n  setClickHandler(clickHandler: ((arg0: Event) => boolean)|null): void {\n    this.window.setClickHandler(clickHandler);\n  }\n\n  zoom(zoomFactor: number, referencePoint: number): void {\n    this.window.zoom(zoomFactor, referencePoint);\n  }\n\n  setResizeEnabled(enabled: boolean): void {\n    this.window.setResizeEnabled(enabled);\n  }\n}\n\nconst MinSelectableSize = 14;\nconst WindowScrollSpeedFactor = .3;\nconst ResizerOffset = 5;\nconst OffsetFromWindowEnds = 10;\n\nexport class Window extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private parentElement: Element;\n  private calculator: Calculator|undefined;\n  private leftResizeElement: HTMLElement;\n  private rightResizeElement: HTMLElement;\n  private leftCurtainElement: HTMLElement;\n  private rightCurtainElement: HTMLElement;\n  private breadcrumbButtonContainerElement: HTMLElement;\n  private createBreadcrumbButton: HTMLElement;\n  private curtainsRange?: HTMLElement;\n  private breadcrumbZoomIcon?: IconButton.Icon.Icon;\n\n  private overviewWindowSelector!: WindowSelector|undefined;\n  private offsetLeft!: number;\n  private dragStartPointPixel!: number;\n  private dragStartLeftRatio!: number;\n  private dragStartRightRatio!: number;\n\n  // The ratio of the left/right resizer position compare to the whole overview grid.\n  // They should be a number between 0 and 1.\n  windowLeftRatio = 0;\n  windowRightRatio = 1;\n\n  private resizeEnabled?: boolean;\n  private clickHandler?: ((arg0: Event) => boolean)|null;\n  private resizerParentOffsetLeft?: number;\n  #breadcrumbsEnabled: boolean = false;\n  #mouseOverGridOverview: boolean = false;\n  constructor(parentElement: HTMLElement, dividersLabelBarElement?: Element, calculator?: Calculator) {\n    super();\n    this.parentElement = parentElement;\n    this.parentElement.classList.add('parent-element');\n    UI.ARIAUtils.markAsGroup(this.parentElement);\n    this.calculator = calculator;\n\n    UI.ARIAUtils.setLabel(this.parentElement, i18nString(UIStrings.overviewGridWindow));\n\n    UI.UIUtils.installDragHandle(\n        this.parentElement, this.startWindowSelectorDragging.bind(this), this.windowSelectorDragging.bind(this),\n        this.endWindowSelectorDragging.bind(this), 'text', null);\n    if (dividersLabelBarElement) {\n      UI.UIUtils.installDragHandle(\n          dividersLabelBarElement, this.startWindowDragging.bind(this), this.windowDragging.bind(this), null,\n          '-webkit-grabbing', '-webkit-grab');\n    }\n\n    this.parentElement.addEventListener('wheel', this.onMouseWheel.bind(this), true);\n    this.parentElement.addEventListener('dblclick', this.resizeWindowMaximum.bind(this), true);\n    ThemeSupport.ThemeSupport.instance().appendStyle(this.parentElement, overviewGridStyles);\n\n    this.leftResizeElement = parentElement.createChild('div', 'overview-grid-window-resizer') as HTMLElement;\n    UI.UIUtils.installDragHandle(\n        this.leftResizeElement, this.resizerElementStartDragging.bind(this), this.leftResizeElementDragging.bind(this),\n        null, 'ew-resize');\n    this.rightResizeElement = (parentElement.createChild('div', 'overview-grid-window-resizer') as HTMLElement);\n    UI.UIUtils.installDragHandle(\n        this.rightResizeElement, this.resizerElementStartDragging.bind(this),\n        this.rightResizeElementDragging.bind(this), null, 'ew-resize');\n\n    UI.ARIAUtils.setLabel(this.leftResizeElement, i18nString(UIStrings.leftResizer));\n    UI.ARIAUtils.markAsSlider(this.leftResizeElement);\n    const leftKeyDown = (event: Event): void => this.handleKeyboardResizing(event, false);\n    this.leftResizeElement.addEventListener('keydown', leftKeyDown);\n    this.leftResizeElement.addEventListener('click', this.onResizerClicked);\n\n    UI.ARIAUtils.setLabel(this.rightResizeElement, i18nString(UIStrings.rightResizer));\n    UI.ARIAUtils.markAsSlider(this.rightResizeElement);\n\n    const rightKeyDown = (event: Event): void => this.handleKeyboardResizing(event, true);\n    this.rightResizeElement.addEventListener('keydown', rightKeyDown);\n    this.rightResizeElement.addEventListener('focus', this.onRightResizeElementFocused.bind(this));\n    this.rightResizeElement.addEventListener('click', this.onResizerClicked);\n\n    this.leftCurtainElement = parentElement.createChild('div', 'window-curtain-left');\n    this.rightCurtainElement = parentElement.createChild('div', 'window-curtain-right');\n\n    this.breadcrumbButtonContainerElement = parentElement.createChild('div', 'create-breadcrumb-button-container');\n    this.createBreadcrumbButton = this.breadcrumbButtonContainerElement.createChild('div', 'create-breadcrumb-button');\n    this.createBreadcrumbButton.setAttribute(\n        'jslog', `${VisualLogging.action('timeline.create-breadcrumb').track({click: true})}`);\n    this.reset();\n  }\n\n  enableCreateBreadcrumbsButton(): HTMLElement {\n    this.curtainsRange = (this.createBreadcrumbButton.createChild('div') as HTMLElement);\n    this.breadcrumbZoomIcon = new IconButton.Icon.Icon();\n    this.breadcrumbZoomIcon.data = {\n      iconName: 'zoom-in',\n      color: 'var(--icon-default)',\n      width: '20px',\n      height: '20px',\n    };\n    this.createBreadcrumbButton.appendChild(this.breadcrumbZoomIcon);\n    this.createBreadcrumbButton.addEventListener('click', () => {\n      this.#createBreadcrumb();\n    });\n\n    this.#breadcrumbsEnabled = true;\n\n    this.#changeBreadcrumbButtonVisibilityOnInteraction(this.parentElement);\n    this.#changeBreadcrumbButtonVisibilityOnInteraction(this.rightResizeElement);\n    this.#changeBreadcrumbButtonVisibilityOnInteraction(this.leftResizeElement);\n\n    return this.breadcrumbButtonContainerElement;\n  }\n\n  set showingScreenshots(isShowing: boolean) {\n    this.breadcrumbButtonContainerElement.classList.toggle('with-screenshots', isShowing);\n  }\n\n  #changeBreadcrumbButtonVisibilityOnInteraction(element: Element): void {\n    if (!this.#breadcrumbsEnabled) {\n      return;\n    }\n    element.addEventListener('mouseover', () => {\n      if (this.windowLeftRatio <= 0 && this.windowRightRatio >= 1) {\n        this.breadcrumbButtonContainerElement.classList.toggle('is-breadcrumb-button-visible', false);\n        this.#mouseOverGridOverview = false;\n      } else {\n        this.breadcrumbButtonContainerElement.classList.toggle('is-breadcrumb-button-visible', true);\n        this.#mouseOverGridOverview = true;\n      }\n    });\n\n    element.addEventListener('mouseout', () => {\n      this.breadcrumbButtonContainerElement.classList.toggle('is-breadcrumb-button-visible', false);\n      this.#mouseOverGridOverview = false;\n    });\n  }\n\n  private onResizerClicked(event: Event): void {\n    if (event.target) {\n      (event.target as HTMLElement).focus();\n    }\n  }\n\n  private onRightResizeElementFocused(): void {\n    // To prevent browser focus from scrolling the element into view and shifting the contents of the strip\n    this.parentElement.scrollLeft = 0;\n  }\n\n  reset(): void {\n    this.windowLeftRatio = 0;\n    this.windowRightRatio = 1;\n    this.setResizeEnabled(true);\n    this.updateCurtains();\n  }\n\n  setResizeEnabled(resizeEnabled: boolean): void {\n    this.resizeEnabled = resizeEnabled;\n    this.rightResizeElement.tabIndex = resizeEnabled ? 0 : -1;\n    this.leftResizeElement.tabIndex = resizeEnabled ? 0 : -1;\n  }\n\n  setClickHandler(clickHandler: ((arg0: Event) => boolean)|null): void {\n    this.clickHandler = clickHandler;\n  }\n\n  private resizerElementStartDragging(event: Event): boolean {\n    const mouseEvent = (event as MouseEvent);\n    const target = (event.target as HTMLElement);\n    if (!this.resizeEnabled) {\n      return false;\n    }\n    this.resizerParentOffsetLeft = mouseEvent.pageX - mouseEvent.offsetX - target.offsetLeft;\n    event.stopPropagation();\n    return true;\n  }\n\n  private leftResizeElementDragging(event: Event): void {\n    const mouseEvent = (event as MouseEvent);\n    this.resizeWindowLeft(mouseEvent.pageX - (this.resizerParentOffsetLeft || 0));\n    event.preventDefault();\n  }\n\n  private rightResizeElementDragging(event: Event): void {\n    const mouseEvent = (event as MouseEvent);\n    this.resizeWindowRight(mouseEvent.pageX - (this.resizerParentOffsetLeft || 0));\n    event.preventDefault();\n  }\n\n  private handleKeyboardResizing(event: Event, moveRightResizer?: boolean): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    const target = (event.target as HTMLElement);\n    let increment = false;\n    if (keyboardEvent.key === 'ArrowLeft' || keyboardEvent.key === 'ArrowRight') {\n      if (keyboardEvent.key === 'ArrowRight') {\n        increment = true;\n      }\n      const newPos = this.getNewResizerPosition(target.offsetLeft, increment, keyboardEvent.ctrlKey);\n      if (moveRightResizer) {\n        this.resizeWindowRight(newPos);\n      } else {\n        this.resizeWindowLeft(newPos);\n      }\n      event.consume(true);\n    }\n  }\n\n  private getNewResizerPosition(offset: number, increment?: boolean, ctrlPressed?: boolean): number {\n    let newPos;\n    // We shift by 10px if the ctrlKey is pressed and 2 otherwise.  1px shifts result in noOp due to rounding in updateCurtains\n    let pixelsToShift: number|(2 | 10) = ctrlPressed ? 10 : 2;\n    pixelsToShift = increment ? pixelsToShift : -Math.abs(pixelsToShift);\n    const offsetLeft = offset + ResizerOffset;\n    newPos = offsetLeft + pixelsToShift;\n    if (increment && newPos < OffsetFromWindowEnds) {\n      // When incrementing, snap to the window offset value (10px) if the new position is between 0px and 10px\n      newPos = OffsetFromWindowEnds;\n    } else if (!increment && newPos > this.parentElement.clientWidth - OffsetFromWindowEnds) {\n      // When decrementing, snap to the window offset value (10px) from the rightmost side if the new position is within 10px from the end.\n      newPos = this.parentElement.clientWidth - OffsetFromWindowEnds;\n    }\n\n    return newPos;\n  }\n\n  private startWindowSelectorDragging(event: Event): boolean {\n    if (!this.resizeEnabled) {\n      return false;\n    }\n    const mouseEvent = (event as MouseEvent);\n    this.offsetLeft = this.parentElement.getBoundingClientRect().left;\n    const position = mouseEvent.x - this.offsetLeft;\n    this.overviewWindowSelector = new WindowSelector(this.parentElement, position);\n    return true;\n  }\n\n  private windowSelectorDragging(event: Event): void {\n    this.#mouseOverGridOverview = true;\n    if (!this.overviewWindowSelector) {\n      return;\n    }\n    const mouseEvent = (event as MouseEvent);\n    this.overviewWindowSelector.updatePosition(mouseEvent.x - this.offsetLeft);\n    event.preventDefault();\n  }\n\n  private endWindowSelectorDragging(event: Event): void {\n    if (!this.overviewWindowSelector) {\n      return;\n    }\n    const mouseEvent = (event as MouseEvent);\n    const window = this.overviewWindowSelector.close(mouseEvent.x - this.offsetLeft);\n\n    // prevent selecting a window on clicking the minimap if breadcrumbs are enabled\n    if (this.#breadcrumbsEnabled && window.start === window.end) {\n      return;\n    }\n\n    delete this.overviewWindowSelector;\n    const clickThreshold = 3;\n    if (window.end - window.start < clickThreshold) {\n      if (this.clickHandler && this.clickHandler.call(null, event)) {\n        return;\n      }\n      const middle = window.end;\n      window.start = Math.max(0, middle - MinSelectableSize / 2);\n      window.end = Math.min(this.parentElement.clientWidth, middle + MinSelectableSize / 2);\n    } else if (window.end - window.start < MinSelectableSize) {\n      if (this.parentElement.clientWidth - window.end > MinSelectableSize) {\n        window.end = window.start + MinSelectableSize;\n      } else {\n        window.start = window.end - MinSelectableSize;\n      }\n    }\n    this.setWindowPosition(window.start, window.end);\n  }\n\n  private startWindowDragging(event: Event): boolean {\n    const mouseEvent = (event as MouseEvent);\n    this.dragStartPointPixel = mouseEvent.pageX;\n    this.dragStartLeftRatio = this.windowLeftRatio;\n    this.dragStartRightRatio = this.windowRightRatio;\n    event.stopPropagation();\n    return true;\n  }\n\n  private windowDragging(event: Event): void {\n    this.#mouseOverGridOverview = true;\n    if (this.#breadcrumbsEnabled) {\n      this.breadcrumbButtonContainerElement.classList.toggle('is-breadcrumb-button-visible', true);\n    }\n    const mouseEvent = (event as MouseEvent);\n    mouseEvent.preventDefault();\n    let delta: number = (mouseEvent.pageX - this.dragStartPointPixel) / this.parentElement.clientWidth;\n    if (this.dragStartLeftRatio + delta < 0) {\n      delta = -this.dragStartLeftRatio;\n    }\n\n    if (this.dragStartRightRatio + delta > 1) {\n      delta = 1 - this.dragStartRightRatio;\n    }\n\n    this.setWindowRatio(this.dragStartLeftRatio + delta, this.dragStartRightRatio + delta);\n  }\n\n  private resizeWindowLeft(start: number): void {\n    this.#mouseOverGridOverview = true;\n    // Glue to edge.\n    if (start < OffsetFromWindowEnds) {\n      start = 0;\n    } else if (start > this.rightResizeElement.offsetLeft - 4) {\n      start = this.rightResizeElement.offsetLeft - 4;\n    }\n    this.setWindowPosition(start, null);\n  }\n\n  private resizeWindowRight(end: number): void {\n    this.#mouseOverGridOverview = true;\n    // Glue to edge.\n    if (end > this.parentElement.clientWidth - OffsetFromWindowEnds) {\n      end = this.parentElement.clientWidth;\n    } else if (end < this.leftResizeElement.offsetLeft + MinSelectableSize) {\n      end = this.leftResizeElement.offsetLeft + MinSelectableSize;\n    }\n    this.setWindowPosition(null, end);\n  }\n\n  private resizeWindowMaximum(): void {\n    this.setWindowPosition(0, this.parentElement.clientWidth);\n  }\n\n  /**\n   * This function will return the raw value of the give slider.\n   * Since the OverviewGrid is used in Performance panel or Memory panel, the raw value can be in milliseconds or bytes.\n   * @param leftSlider if this slider is the left one\n   * @returns the value in milliseconds or bytes\n   */\n  private getRawSliderValue(leftSlider?: boolean): number {\n    if (!this.calculator) {\n      throw new Error('No calculator to calculate boundaries');\n    }\n\n    const minimumValue = this.calculator.minimumBoundary();\n    const valueSpan = this.calculator.maximumBoundary() - minimumValue;\n    if (leftSlider) {\n      return minimumValue + valueSpan * this.windowLeftRatio;\n    }\n    return minimumValue + valueSpan * this.windowRightRatio;\n  }\n\n  private updateResizeElementAriaValue(leftPercentValue: number, rightPercentValue: number): void {\n    const roundedLeftValue = leftPercentValue.toFixed(2);\n    const roundedRightValue = rightPercentValue.toFixed(2);\n    UI.ARIAUtils.setAriaValueNow(this.leftResizeElement, roundedLeftValue);\n    UI.ARIAUtils.setAriaValueNow(this.rightResizeElement, roundedRightValue);\n\n    // Left and right sliders cannot be within 0.5% of each other (Range of AriaValueMin/Max/Now is from 0-100).\n    const leftResizeCeiling = Number(roundedRightValue) - 0.5;\n    const rightResizeFloor = Number(roundedLeftValue) + 0.5;\n    UI.ARIAUtils.setAriaValueMinMax(this.leftResizeElement, '0', leftResizeCeiling.toString());\n    UI.ARIAUtils.setAriaValueMinMax(this.rightResizeElement, rightResizeFloor.toString(), '100');\n  }\n\n  private updateResizeElementPositionLabels(): void {\n    if (!this.calculator) {\n      return;\n    }\n    const startValue = this.calculator.formatValue(this.getRawSliderValue(/* leftSlider */ true));\n    const endValue = this.calculator.formatValue(this.getRawSliderValue(/* leftSlider */ false));\n    UI.ARIAUtils.setAriaValueText(this.leftResizeElement, String(startValue));\n    UI.ARIAUtils.setAriaValueText(this.rightResizeElement, String(endValue));\n  }\n\n  private updateResizeElementPercentageLabels(leftValue: string, rightValue: string): void {\n    UI.ARIAUtils.setAriaValueText(this.leftResizeElement, leftValue);\n    UI.ARIAUtils.setAriaValueText(this.rightResizeElement, rightValue);\n  }\n\n  /**\n   * This function will return the raw value of the slider window.\n   * Since the OverviewGrid is used in Performance panel or Memory panel, the raw value can be in milliseconds or bytes.\n   *\n   * @returns the pair of start/end value of the slider window in milliseconds or bytes\n   */\n  calculateWindowValue(): {\n    rawStartValue: number,\n    rawEndValue: number,\n  } {\n    return {\n      rawStartValue: this.getRawSliderValue(/* leftSlider */ true),\n      rawEndValue: this.getRawSliderValue(/* leftSlider */ false),\n    };\n  }\n\n  setWindowRatio(windowLeftRatio: number, windowRightRatio: number): void {\n    this.windowLeftRatio = windowLeftRatio;\n    this.windowRightRatio = windowRightRatio;\n    this.updateCurtains();\n    if (this.calculator) {\n      this.dispatchEventToListeners(Events.WINDOW_CHANGED_WITH_POSITION, this.calculateWindowValue());\n    }\n    this.dispatchEventToListeners(Events.WINDOW_CHANGED);\n    this.#changeBreadcrumbButtonVisibility(windowLeftRatio, windowRightRatio);\n  }\n\n  // \"Create breadcrumb\" button is only visible when the window is set to\n  // something other than the full range and mouse is hovering over the MiniMap\n  #changeBreadcrumbButtonVisibility(windowLeftRatio: number, windowRightRatio: number): void {\n    if (!this.#breadcrumbsEnabled) {\n      return;\n    }\n    if ((windowRightRatio >= 1 && windowLeftRatio <= 0) || !this.#mouseOverGridOverview) {\n      this.breadcrumbButtonContainerElement.classList.toggle('is-breadcrumb-button-visible', false);\n    } else {\n      this.breadcrumbButtonContainerElement.classList.toggle('is-breadcrumb-button-visible', true);\n    }\n  }\n\n  #createBreadcrumb(): void {\n    this.dispatchEventToListeners(Events.BREADCRUMB_ADDED, this.calculateWindowValue());\n  }\n\n  private updateCurtains(): void {\n    const windowLeftRatio = this.windowLeftRatio;\n    const windowRightRatio = this.windowRightRatio;\n    let leftRatio = windowLeftRatio;\n    let rightRatio = windowRightRatio;\n    const widthRatio = rightRatio - leftRatio;\n\n    // OverviewGrids that are instantiated before the parentElement is shown will have a parent element client width of 0 which throws off the 'factor' calculation\n    if (this.parentElement.clientWidth !== 0) {\n      // We allow actual time window to be arbitrarily small but don't want the UI window to be too small.\n      const widthInPixels = widthRatio * this.parentElement.clientWidth;\n      const minWidthInPixels = MinSelectableSize / 2;\n      if (widthInPixels < minWidthInPixels) {\n        const factor = minWidthInPixels / widthInPixels;\n        leftRatio = ((windowRightRatio + windowLeftRatio) - widthRatio * factor) / 2;\n        rightRatio = ((windowRightRatio + windowLeftRatio) + widthRatio * factor) / 2;\n      }\n    }\n    const leftResizerPercLeftOffset = (100 * leftRatio);\n    const rightResizerPercLeftOffset = (100 * rightRatio);\n    const rightResizerPercRightOffset = (100 - (100 * rightRatio));\n\n    const leftResizerPercLeftOffsetString = leftResizerPercLeftOffset + '%';\n    const rightResizerPercLeftOffsetString = rightResizerPercLeftOffset + '%';\n\n    this.leftResizeElement.style.left = leftResizerPercLeftOffsetString;\n    this.rightResizeElement.style.left = rightResizerPercLeftOffsetString;\n\n    this.leftCurtainElement.style.width = leftResizerPercLeftOffsetString;\n    this.rightCurtainElement.style.width = rightResizerPercRightOffset + '%';\n\n    this.breadcrumbButtonContainerElement.style.marginLeft =\n        (leftResizerPercLeftOffset > 0) ? leftResizerPercLeftOffset + '%' : '0%';\n    this.breadcrumbButtonContainerElement.style.marginRight =\n        (rightResizerPercRightOffset > 0) ? rightResizerPercRightOffset + '%' : '0%';\n\n    if (this.curtainsRange) {\n      this.curtainsRange.textContent = this.getWindowRange().toFixed(0) + ' ms';\n    }\n\n    this.updateResizeElementAriaValue(leftResizerPercLeftOffset, rightResizerPercLeftOffset);\n    if (this.calculator) {\n      this.updateResizeElementPositionLabels();\n    } else {\n      this.updateResizeElementPercentageLabels(leftResizerPercLeftOffsetString, rightResizerPercLeftOffsetString);\n    }\n\n    this.toggleBreadcrumbZoomButtonDisplay();\n  }\n\n  private toggleBreadcrumbZoomButtonDisplay(): void {\n    if (this.breadcrumbZoomIcon) {\n      // disable button that creates breadcrumbs and hide the zoom icon\n      // when the selected window is smaller than 4.5 ms\n      // 4.5 is rounded to 5 in the UI\n      if (this.getWindowRange() < 4.5) {\n        this.breadcrumbZoomIcon.style.display = 'none';\n        this.breadcrumbButtonContainerElement.style.pointerEvents = 'none';\n      } else {\n        this.breadcrumbZoomIcon.style.display = 'flex';\n        this.breadcrumbButtonContainerElement.style.pointerEvents = 'auto';\n      }\n    }\n  }\n\n  private getWindowRange(): number {\n    if (!this.calculator) {\n      throw new Error('No calculator to calculate window range');\n    }\n\n    const leftRatio = this.windowLeftRatio > 0 ? this.windowLeftRatio : 0;\n    const rightRatio = this.windowRightRatio < 1 ? this.windowRightRatio : 1;\n    return (this.calculator.boundarySpan() * (rightRatio - leftRatio));\n  }\n\n  private setWindowPosition(startPixel: number|null, endPixel: number|null): void {\n    const clientWidth = this.parentElement.clientWidth;\n    const windowLeft = typeof startPixel === 'number' ? startPixel / clientWidth : this.windowLeftRatio;\n    const windowRight = typeof endPixel === 'number' ? endPixel / clientWidth : this.windowRightRatio;\n    this.setWindowRatio(windowLeft || 0, windowRight || 0);\n  }\n\n  private onMouseWheel(event: Event): void {\n    const wheelEvent = (event as WheelEvent);\n    if (!this.resizeEnabled) {\n      return;\n    }\n    if (wheelEvent.deltaY) {\n      const zoomFactor = 1.1;\n      const wheelZoomSpeed = 1 / 53;\n\n      const reference = wheelEvent.offsetX / this.parentElement.clientWidth;\n      this.zoom(Math.pow(zoomFactor, wheelEvent.deltaY * wheelZoomSpeed), reference);\n    }\n    if (wheelEvent.deltaX) {\n      let offset = Math.round(wheelEvent.deltaX * WindowScrollSpeedFactor);\n      const windowLeftPixel = this.leftResizeElement.offsetLeft + ResizerOffset;\n      const windowRightPixel = this.rightResizeElement.offsetLeft + ResizerOffset;\n\n      if (windowLeftPixel - offset < 0) {\n        offset = windowLeftPixel;\n      }\n\n      if (windowRightPixel - offset > this.parentElement.clientWidth) {\n        offset = windowRightPixel - this.parentElement.clientWidth;\n      }\n\n      this.setWindowPosition(windowLeftPixel - offset, windowRightPixel - offset);\n\n      wheelEvent.preventDefault();\n    }\n  }\n\n  zoom(factor: number, reference: number): void {\n    let leftRatio: number = this.windowLeftRatio || 0;\n    let rightRatio: number = this.windowRightRatio || 0;\n    const windowSizeRatio = rightRatio - leftRatio;\n    let newWindowSizeRatio: 1|number = factor * windowSizeRatio;\n    if (newWindowSizeRatio > 1) {\n      newWindowSizeRatio = 1;\n      factor = newWindowSizeRatio / windowSizeRatio;\n    }\n    leftRatio = reference + (leftRatio - reference) * factor;\n    leftRatio = Platform.NumberUtilities.clamp(leftRatio, 0, 1 - newWindowSizeRatio);\n\n    rightRatio = reference + (rightRatio - reference) * factor;\n    rightRatio = Platform.NumberUtilities.clamp(rightRatio, newWindowSizeRatio, 1);\n    this.setWindowRatio(leftRatio, rightRatio);\n  }\n}\n\nexport const enum Events {\n  WINDOW_CHANGED = 'WindowChanged',\n  WINDOW_CHANGED_WITH_POSITION = 'WindowChangedWithPosition',\n  BREADCRUMB_ADDED = 'BreadcrumbAdded',\n}\n\nexport interface WindowChangedWithPositionEvent {\n  rawStartValue: number;\n  rawEndValue: number;\n}\n\nexport type EventTypes = {\n  [Events.WINDOW_CHANGED]: void,\n  [Events.BREADCRUMB_ADDED]: WindowChangedWithPositionEvent,\n  [Events.WINDOW_CHANGED_WITH_POSITION]: WindowChangedWithPositionEvent,\n};\n\nexport class WindowSelector {\n  private startPosition: number;\n  private width: number;\n  private windowSelector: HTMLDivElement;\n\n  constructor(parent: Element, position: number) {\n    this.startPosition = position;\n    this.width = (parent as HTMLElement).offsetWidth;\n    this.windowSelector = document.createElement('div');\n    this.windowSelector.className = 'overview-grid-window-selector';\n    this.windowSelector.style.left = this.startPosition + 'px';\n    this.windowSelector.style.right = this.width - this.startPosition + 'px';\n    parent.appendChild(this.windowSelector);\n  }\n\n  close(position: number): {\n    start: number,\n    end: number,\n  } {\n    position = Math.max(0, Math.min(position, this.width));\n    this.windowSelector.remove();\n    return this.startPosition < position ? {start: this.startPosition, end: position} :\n                                           {start: position, end: this.startPosition};\n  }\n\n  updatePosition(position: number): void {\n    position = Math.max(0, Math.min(position, this.width));\n    if (position < this.startPosition) {\n      this.windowSelector.style.left = position + 'px';\n      this.windowSelector.style.right = this.width - this.startPosition + 'px';\n    } else {\n      this.windowSelector.style.left = this.startPosition + 'px';\n      this.windowSelector.style.right = this.width - position + 'px';\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
