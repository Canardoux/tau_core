{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/perf_ui/LiveHeapProfile.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Host from '../../../../core/host/host.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\n\nimport {Memory} from './LineLevelProfile.js';\n\nlet liveHeapProfileInstance: LiveHeapProfile;\nexport class LiveHeapProfile implements Common.Runnable.Runnable,\n                                        SDK.TargetManager.SDKModelObserver<SDK.HeapProfilerModel.HeapProfilerModel> {\n  private running: boolean;\n  private sessionId: number;\n  private loadEventCallback: (arg0?: Function|null) => void;\n  private readonly setting: Common.Settings.Setting<boolean>;\n\n  private constructor() {\n    this.running = false;\n    this.sessionId = 0;\n    this.loadEventCallback = () => {};\n    this.setting = Common.Settings.Settings.instance().moduleSetting('memory-live-heap-profile');\n    this.setting.addChangeListener(event => event.data ? this.startProfiling() : this.stopProfiling());\n    if (this.setting.get()) {\n      void this.startProfiling();\n    }\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): LiveHeapProfile {\n    const {forceNew} = opts;\n    if (!liveHeapProfileInstance || forceNew) {\n      liveHeapProfileInstance = new LiveHeapProfile();\n    }\n\n    return liveHeapProfileInstance;\n  }\n\n  async run(): Promise<void> {\n    return;\n  }\n\n  modelAdded(model: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    void model.startSampling(1e4);\n  }\n\n  modelRemoved(_model: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    // Cannot do much when the model has already been removed.\n  }\n\n  private async startProfiling(): Promise<void> {\n    if (this.running) {\n      return;\n    }\n    this.running = true;\n    const sessionId = this.sessionId;\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this.loadEventFired, this);\n\n    do {\n      const models = SDK.TargetManager.TargetManager.instance().models(SDK.HeapProfilerModel.HeapProfilerModel);\n      const profiles = await Promise.all(models.map(model => model.getSamplingProfile()));\n      if (sessionId !== this.sessionId) {\n        break;\n      }\n      Memory.instance().reset();\n      for (let i = 0; i < profiles.length; ++i) {\n        const profile = profiles[i];\n        if (!profile) {\n          continue;\n        }\n\n        Memory.instance().appendHeapProfile(profile, models[i].target());\n      }\n      await Promise.race([\n        new Promise(r => window.setTimeout(r, Host.InspectorFrontendHost.isUnderTest() ? 10 : 5000)),\n        new Promise(r => {\n          this.loadEventCallback = r;\n        }),\n      ]);\n    } while (sessionId === this.sessionId);\n\n    SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n    SDK.TargetManager.TargetManager.instance().removeModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this.loadEventFired, this);\n    for (const model of SDK.TargetManager.TargetManager.instance().models(SDK.HeapProfilerModel.HeapProfilerModel)) {\n      void model.stopSampling();\n    }\n    Memory.instance().reset();\n  }\n\n  private stopProfiling(): void {\n    if (!this.running) {\n      return;\n    }\n    this.running = false;\n    this.sessionId++;\n  }\n\n  private loadEventFired(): void {\n    this.loadEventCallback();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
