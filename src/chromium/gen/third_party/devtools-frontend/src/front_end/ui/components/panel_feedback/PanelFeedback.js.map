{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/panel_feedback/PanelFeedback.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../legacy/legacy.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as VisualLogging from '../../visual_logging/visual_logging.js';\n\nimport panelFeedbackStyles from './panelFeedback.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Introduction sentence to convey the feature is being actively worked on and we are looking for feedback.\n   */\n  previewText: 'Our team is actively working on this feature and we would love to know what you think.',\n  /**\n   *@description Link text the user can click to provide feedback to the team.\n   */\n  previewTextFeedbackLink: 'Send us your feedback.',\n  /**\n   *@description Title of the UI section that shows the user that this feature is in preview. Used as the main heading. Not a verb.\n   */\n  previewFeature: 'Preview feature',\n  /**\n   *@description Title of the section to the quick start video and documentation on experimental panels.\n   */\n  videoAndDocumentation: 'Video and documentation',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('ui/components/panel_feedback/PanelFeedback.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst previewFeatureUrl = new URL('../../../Images/experiment.svg', import.meta.url).toString();\nconst videoThumbnailUrl = new URL('../../../Images/preview_feature_video_thumbnail.svg', import.meta.url).toString();\n\nexport interface PanelFeedbackData {\n  feedbackUrl: Platform.DevToolsPath.UrlString;\n  quickStartUrl: Platform.DevToolsPath.UrlString;\n  quickStartLinkText: string;\n}\nexport class PanelFeedback extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n\n  #props: PanelFeedbackData = {\n    feedbackUrl: Platform.DevToolsPath.EmptyUrlString,\n    quickStartUrl: Platform.DevToolsPath.EmptyUrlString,\n    quickStartLinkText: '',\n  };\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [panelFeedbackStyles];\n  }\n\n  set data(data: PanelFeedbackData) {\n    this.#props = data;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('PanelFeedback render was not scheduled');\n    }\n\n    // clang-format off\n    LitHtml.render(html`\n      <div class=\"preview\">\n        <h2 class=\"flex\">\n          <devtools-icon .data=${{\n            iconPath: previewFeatureUrl,\n            width: '20px',\n            height: '20px',\n            color: 'var(--icon-primary)',\n          }}></devtools-icon> ${i18nString(UIStrings.previewFeature)}\n        </h2>\n        <p>${i18nString(UIStrings.previewText)} <x-link href=${this.#props.feedbackUrl} jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.previewTextFeedbackLink)}</x-link></p>\n        <div class=\"video\">\n          <div class=\"thumbnail\">\n            <img src=${videoThumbnailUrl} role=\"presentation\" />\n          </div>\n          <div class=\"video-description\">\n            <h3>${i18nString(UIStrings.videoAndDocumentation)}</h3>\n            <x-link class=\"quick-start-link\" href=${this.#props.quickStartUrl} jslog=${VisualLogging.link('css-overview.quick-start').track({click: true})}>${this.#props.quickStartLinkText}</x-link>\n          </div>\n        </div>\n      </div>\n      `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-panel-feedback', PanelFeedback);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-panel-feedback': PanelFeedback;\n  }\n}\n"],
  "mappings": ";AAIA,OAAO;AAEP,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,YAAY,sBAAsB;AAClC,YAAY,aAAa;AACzB,YAAY,mBAAmB;AAE/B,OAAO,yBAAyB;AAEhC,MAAM,EAAC,KAAI,IAAI;AAEf,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,aAAa;AAAA;AAAA;AAAA;AAAA,EAIb,yBAAyB;AAAA;AAAA;AAAA;AAAA,EAIzB,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIhB,uBAAuB;AACzB;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,iDAAiD,SAAS;AACnG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAEpE,MAAM,oBAAoB,IAAI,IAAI,kCAAkC,YAAY,GAAG,EAAE,SAAS;AAC9F,MAAM,oBAAoB,IAAI,IAAI,uDAAuD,YAAY,GAAG,EAAE,SAAS;AAO5G,aAAM,sBAAsB,YAAY;AAAA,EACpC,UAAU,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;AAAA,EAC1C,eAAe,KAAK,QAAQ,KAAK,IAAI;AAAA,EAE9C,SAA4B;AAAA,IAC1B,aAAa,SAAS,aAAa;AAAA,IACnC,eAAe,SAAS,aAAa;AAAA,IACrC,oBAAoB;AAAA,EACtB;AAAA,EAEA,oBAA0B;AACxB,SAAK,QAAQ,qBAAqB,CAAC,mBAAmB;AAAA,EACxD;AAAA,EAEA,IAAI,KAAK,MAAyB;AAChC,SAAK,SAAS;AACd,SAAK,iBAAiB,gBAAgB,eAAe,MAAM,KAAK,YAAY;AAAA,EAC9E;AAAA,EAEA,UAAgB;AACd,QAAI,CAAC,iBAAiB,gBAAgB,kBAAkB,IAAI,GAAG;AAC7D,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AAGA,YAAQ,OAAO;AAAA;AAAA;AAAA,iCAGc;AAAA,MACrB,UAAU;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,IACT,CAAC,qBAAqB,WAAW,UAAU,cAAc,CAAC;AAAA;AAAA,aAEvD,WAAW,UAAU,WAAW,CAAC,iBAAiB,KAAK,OAAO,WAAW,UAAU,cAAc,KAAK,UAAU,EAAE,MAAM,EAAC,OAAO,KAAI,CAAC,CAAC,IAAI,WAAW,UAAU,uBAAuB,CAAC;AAAA;AAAA;AAAA,uBAG7K,iBAAiB;AAAA;AAAA;AAAA,kBAGtB,WAAW,UAAU,qBAAqB,CAAC;AAAA,oDACT,KAAK,OAAO,aAAa,UAAU,cAAc,KAAK,0BAA0B,EAAE,MAAM,EAAC,OAAO,KAAI,CAAC,CAAC,IAAI,KAAK,OAAO,kBAAkB;AAAA;AAAA;AAAA;AAAA,SAInL,KAAK,SAAS,EAAC,MAAM,KAAI,CAAC;AAAA,EAEjC;AACF;AAEA,eAAe,OAAO,2BAA2B,aAAa;",
  "names": []
}
