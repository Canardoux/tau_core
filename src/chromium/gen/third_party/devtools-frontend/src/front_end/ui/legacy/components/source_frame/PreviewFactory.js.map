{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/source_frame/PreviewFactory.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as UI from '../../legacy.js';\n\nimport {FontView} from './FontView.js';\nimport {ImageView} from './ImageView.js';\nimport {JSONView} from './JSONView.js';\nimport {ResourceSourceFrame} from './ResourceSourceFrame.js';\nimport {XMLView} from './XMLView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Preview Factory of the Sources panel\n   */\n  nothingToPreview: 'Nothing to preview',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/source_frame/PreviewFactory.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class PreviewFactory {\n  static async createPreview(provider: TextUtils.ContentProvider.ContentProvider, mimeType: string):\n      Promise<UI.Widget.Widget|null> {\n    let resourceType = Common.ResourceType.ResourceType.fromMimeType(mimeType);\n    if (resourceType === Common.ResourceType.resourceTypes.Other) {\n      resourceType = provider.contentType();\n    }\n\n    switch (resourceType) {\n      case Common.ResourceType.resourceTypes.Image:\n        return new ImageView(mimeType, provider);\n      case Common.ResourceType.resourceTypes.Font:\n        return new FontView(mimeType, provider);\n    }\n\n    const contentData = await provider.requestContentData();\n    if (TextUtils.ContentData.ContentData.isError(contentData)) {\n      return new UI.EmptyWidget.EmptyWidget(contentData.error);\n    }\n    if (!contentData.isTextContent) {\n      return null;\n    }\n\n    if (!contentData.text) {\n      return new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.nothingToPreview));\n    }\n\n    const parsedXML = XMLView.parseXML(contentData.text, contentData.mimeType);\n    if (parsedXML) {\n      return XMLView.createSearchableView(parsedXML);\n    }\n\n    const jsonView = await JSONView.createView(contentData.text);\n    if (jsonView) {\n      return jsonView;\n    }\n\n    const highlighterType =\n        mimeType.replace(/;.*/, '') /* remove charset */ || provider.contentType().canonicalMimeType();\n    return ResourceSourceFrame.createSearchableView(provider, highlighterType);\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,YAAY;AACxB,YAAY,UAAU;AACtB,YAAY,eAAe;AAC3B,YAAY,QAAQ;AAEpB,SAAQ,gBAAe;AACvB,SAAQ,iBAAgB;AACxB,SAAQ,gBAAe;AACvB,SAAQ,2BAA0B;AAClC,SAAQ,eAAc;AAEtB,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,kBAAkB;AACpB;AACA,MAAM,OAAO,KAAK,KAAK,kBAAkB,uDAAuD,SAAS;AACzG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAC7D,aAAM,eAAe;AAAA,EAC1B,aAAa,cAAc,UAAqD,UAC7C;AACjC,QAAI,eAAe,OAAO,aAAa,aAAa,aAAa,QAAQ;AACzE,QAAI,iBAAiB,OAAO,aAAa,cAAc,OAAO;AAC5D,qBAAe,SAAS,YAAY;AAAA,IACtC;AAEA,YAAQ,cAAc;AAAA,MACpB,KAAK,OAAO,aAAa,cAAc;AACrC,eAAO,IAAI,UAAU,UAAU,QAAQ;AAAA,MACzC,KAAK,OAAO,aAAa,cAAc;AACrC,eAAO,IAAI,SAAS,UAAU,QAAQ;AAAA,IAC1C;AAEA,UAAM,cAAc,MAAM,SAAS,mBAAmB;AACtD,QAAI,UAAU,YAAY,YAAY,QAAQ,WAAW,GAAG;AAC1D,aAAO,IAAI,GAAG,YAAY,YAAY,YAAY,KAAK;AAAA,IACzD;AACA,QAAI,CAAC,YAAY,eAAe;AAC9B,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,YAAY,MAAM;AACrB,aAAO,IAAI,GAAG,YAAY,YAAY,WAAW,UAAU,gBAAgB,CAAC;AAAA,IAC9E;AAEA,UAAM,YAAY,QAAQ,SAAS,YAAY,MAAM,YAAY,QAAQ;AACzE,QAAI,WAAW;AACb,aAAO,QAAQ,qBAAqB,SAAS;AAAA,IAC/C;AAEA,UAAM,WAAW,MAAM,SAAS,WAAW,YAAY,IAAI;AAC3D,QAAI,UAAU;AACZ,aAAO;AAAA,IACT;AAEA,UAAM,kBACF,SAAS,QAAQ,OAAO,EAAE,KAA0B,SAAS,YAAY,EAAE,kBAAkB;AACjG,WAAO,oBAAoB,qBAAqB,UAAU,eAAe;AAAA,EAC3E;AACF;",
  "names": []
}
