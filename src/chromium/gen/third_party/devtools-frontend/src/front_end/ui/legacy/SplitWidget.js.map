{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/SplitWidget.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as VisualLogging from '../visual_logging/visual_logging.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {Constraints} from './Geometry.js';\nimport {Events as ResizerWidgetEvents, type ResizeUpdatePositionEvent, SimpleResizerWidget} from './ResizerWidget.js';\nimport splitWidgetStyles from './splitWidget.css.legacy.js';\nimport {ToolbarButton} from './Toolbar.js';\nimport {Widget, WidgetElement} from './Widget.js';\nimport {Events as ZoomManagerEvents, ZoomManager} from './ZoomManager.js';\n\nexport class SplitWidget extends Common.ObjectWrapper.eventMixin<EventTypes, typeof Widget>(Widget) {\n  private sidebarElementInternal: HTMLElement;\n  private mainElement: HTMLElement;\n  private resizerElementInternal: HTMLElement;\n  private resizerElementSize: number|null;\n  private readonly resizerWidget: SimpleResizerWidget;\n  private defaultSidebarWidth: number;\n  private defaultSidebarHeight: number;\n  private readonly constraintsInDip: boolean;\n  private resizeStartSizeDIP: number;\n  private setting: Common.Settings.Setting<{\n    vertical?: SettingForOrientation,\n    horizontal?: SettingForOrientation,\n  }>|null;\n  private totalSizeCSS: number;\n  private totalSizeOtherDimensionCSS: number;\n  private mainWidgetInternal: Widget|null;\n  private sidebarWidgetInternal: Widget|null;\n  private animationFrameHandle: number;\n  private animationCallback: (() => void)|null;\n  private showSidebarButtonTitle: Common.UIString.LocalizedString;\n  private hideSidebarButtonTitle: Common.UIString.LocalizedString;\n  private shownSidebarString: Common.UIString.LocalizedString;\n  private hiddenSidebarString: Common.UIString.LocalizedString;\n  private showHideSidebarButton: ToolbarButton|null;\n  private isVerticalInternal: boolean;\n  private sidebarMinimized: boolean;\n  private detaching: boolean;\n  private sidebarSizeDIP: number;\n  private savedSidebarSizeDIP: number;\n  private secondIsSidebar: boolean;\n  private shouldSaveShowMode: boolean;\n  private savedVerticalMainSize: number|null;\n  private savedHorizontalMainSize: number|null;\n  private showModeInternal: string;\n  private savedShowMode: string;\n\n  constructor(\n      isVertical: boolean, secondIsSidebar: boolean, settingName?: string, defaultSidebarWidth?: number,\n      defaultSidebarHeight?: number, constraintsInDip?: boolean, element?: SplitWidgetElement) {\n    super(true, undefined, element);\n    this.element.classList.add('split-widget');\n    this.registerRequiredCSS(splitWidgetStyles);\n\n    this.contentElement.classList.add('shadow-split-widget');\n    this.sidebarElementInternal =\n        this.contentElement.createChild('div', 'shadow-split-widget-contents shadow-split-widget-sidebar vbox');\n    this.mainElement =\n        this.contentElement.createChild('div', 'shadow-split-widget-contents shadow-split-widget-main vbox');\n    const mainSlot = this.mainElement.createChild('slot') as HTMLSlotElement;\n    mainSlot.name = 'main';\n    mainSlot.addEventListener('slotchange', (_: Event) => {\n      const assignedNode = mainSlot.assignedNodes()[0];\n      const widget = assignedNode instanceof HTMLElement ? Widget.getOrCreateWidget(assignedNode) : null;\n      if (widget && widget !== this.mainWidgetInternal) {\n        this.setMainWidget(widget);\n      }\n    });\n    const sidebarSlot = this.sidebarElementInternal.createChild('slot') as HTMLSlotElement;\n    sidebarSlot.name = 'sidebar';\n    sidebarSlot.addEventListener('slotchange', (_: Event) => {\n      const assignedNode = sidebarSlot.assignedNodes()[0];\n      const widget = assignedNode instanceof HTMLElement ? Widget.getOrCreateWidget(assignedNode) : null;\n      if (widget && widget !== this.sidebarWidgetInternal) {\n        this.setSidebarWidget(widget);\n      }\n    });\n    this.resizerElementInternal = this.contentElement.createChild('div', 'shadow-split-widget-resizer');\n    this.resizerElementSize = null;\n\n    this.resizerWidget = new SimpleResizerWidget();\n    this.resizerWidget.setEnabled(true);\n    this.resizerWidget.addEventListener(ResizerWidgetEvents.RESIZE_START, this.onResizeStart, this);\n    this.resizerWidget.addEventListener(ResizerWidgetEvents.RESIZE_UPDATE_POSITION, this.onResizeUpdate, this);\n    this.resizerWidget.addEventListener(ResizerWidgetEvents.RESIZE_END, this.onResizeEnd, this);\n\n    this.defaultSidebarWidth = defaultSidebarWidth || 200;\n    this.defaultSidebarHeight = defaultSidebarHeight || this.defaultSidebarWidth;\n    this.constraintsInDip = Boolean(constraintsInDip);\n    this.resizeStartSizeDIP = 0;\n    this.setting = settingName ? Common.Settings.Settings.instance().createSetting(settingName, {}) : null;\n\n    this.totalSizeCSS = 0;\n    this.totalSizeOtherDimensionCSS = 0;\n    this.mainWidgetInternal = null;\n    this.sidebarWidgetInternal = null;\n    this.animationFrameHandle = 0;\n    this.animationCallback = null;\n    this.showSidebarButtonTitle = Common.UIString.LocalizedEmptyString;\n    this.hideSidebarButtonTitle = Common.UIString.LocalizedEmptyString;\n    this.shownSidebarString = Common.UIString.LocalizedEmptyString;\n    this.hiddenSidebarString = Common.UIString.LocalizedEmptyString;\n    this.showHideSidebarButton = null;\n    this.isVerticalInternal = false;\n    this.sidebarMinimized = false;\n    this.detaching = false;\n    this.sidebarSizeDIP = -1;\n    this.savedSidebarSizeDIP = this.sidebarSizeDIP;\n    this.secondIsSidebar = false;\n    this.shouldSaveShowMode = false;\n    this.savedVerticalMainSize = null;\n    this.savedHorizontalMainSize = null;\n\n    this.setSecondIsSidebar(secondIsSidebar);\n\n    this.innerSetVertical(isVertical);\n    this.showModeInternal = ShowMode.BOTH;\n    this.savedShowMode = this.showModeInternal;\n\n    // Should be called after isVertical has the right value.\n    this.installResizer(this.resizerElementInternal);\n  }\n\n  isVertical(): boolean {\n    return this.isVerticalInternal;\n  }\n\n  setVertical(isVertical: boolean): void {\n    if (this.isVerticalInternal === isVertical) {\n      return;\n    }\n\n    this.innerSetVertical(isVertical);\n\n    if (this.isShowing()) {\n      this.updateLayout();\n    }\n  }\n\n  private innerSetVertical(isVertical: boolean): void {\n    this.contentElement.classList.toggle('vbox', !isVertical);\n    this.contentElement.classList.toggle('hbox', isVertical);\n    this.isVerticalInternal = isVertical;\n\n    this.resizerElementSize = null;\n    this.sidebarSizeDIP = -1;\n    this.restoreSidebarSizeFromSettings();\n    if (this.shouldSaveShowMode) {\n      this.restoreAndApplyShowModeFromSettings();\n    }\n    this.updateShowHideSidebarButton();\n    // FIXME: reverse SplitWidget.isVertical meaning.\n    this.resizerWidget.setVertical(!isVertical);\n    this.invalidateConstraints();\n  }\n\n  private updateLayout(animate?: boolean): void {\n    this.totalSizeCSS = 0;  // Lazy update.\n    this.totalSizeOtherDimensionCSS = 0;\n\n    // Remove properties that might affect total size calculation.\n    this.mainElement.style.removeProperty('width');\n    this.mainElement.style.removeProperty('height');\n    this.sidebarElementInternal.style.removeProperty('width');\n    this.sidebarElementInternal.style.removeProperty('height');\n\n    this.innerSetSidebarSizeDIP(this.preferredSidebarSizeDIP(), Boolean(animate));\n  }\n\n  setMainWidget(widget: Widget): void {\n    if (this.mainWidgetInternal === widget) {\n      return;\n    }\n    this.suspendInvalidations();\n    if (this.mainWidgetInternal) {\n      this.mainWidgetInternal.detach();\n    }\n    this.mainWidgetInternal = widget;\n    if (widget) {\n      widget.element.slot = 'main';\n      if (this.showModeInternal === ShowMode.ONLY_MAIN || this.showModeInternal === ShowMode.BOTH) {\n        widget.show(this.element);\n      }\n    }\n    this.resumeInvalidations();\n  }\n\n  setSidebarWidget(widget: Widget): void {\n    if (this.sidebarWidgetInternal === widget) {\n      return;\n    }\n    this.suspendInvalidations();\n    if (this.sidebarWidgetInternal) {\n      this.sidebarWidgetInternal.detach();\n    }\n    this.sidebarWidgetInternal = widget;\n    if (widget) {\n      widget.element.slot = 'sidebar';\n      if (this.showModeInternal === ShowMode.ONLY_SIDEBAR || this.showModeInternal === ShowMode.BOTH) {\n        widget.show(this.element);\n      }\n    }\n    this.resumeInvalidations();\n  }\n\n  mainWidget(): Widget|null {\n    return this.mainWidgetInternal;\n  }\n\n  sidebarWidget(): Widget|null {\n    return this.sidebarWidgetInternal;\n  }\n\n  sidebarElement(): HTMLElement {\n    return this.sidebarElementInternal;\n  }\n\n  override childWasDetached(widget: Widget): void {\n    if (this.detaching) {\n      return;\n    }\n    if (this.mainWidgetInternal === widget) {\n      this.mainWidgetInternal = null;\n    }\n    if (this.sidebarWidgetInternal === widget) {\n      this.sidebarWidgetInternal = null;\n    }\n    this.invalidateConstraints();\n  }\n\n  isSidebarSecond(): boolean {\n    return this.secondIsSidebar;\n  }\n\n  enableShowModeSaving(): void {\n    this.shouldSaveShowMode = true;\n    this.restoreAndApplyShowModeFromSettings();\n  }\n\n  showMode(): string {\n    return this.showModeInternal;\n  }\n\n  sidebarIsShowing(): boolean {\n    return this.showModeInternal !== ShowMode.ONLY_MAIN;\n  }\n\n  setSecondIsSidebar(secondIsSidebar: boolean): void {\n    if (secondIsSidebar === this.secondIsSidebar) {\n      return;\n    }\n    this.secondIsSidebar = secondIsSidebar;\n    if (!this.mainWidgetInternal || !this.mainWidgetInternal.shouldHideOnDetach()) {\n      if (secondIsSidebar) {\n        this.contentElement.insertBefore(this.mainElement, this.sidebarElementInternal);\n      } else {\n        this.contentElement.insertBefore(this.mainElement, this.resizerElementInternal);\n      }\n    } else if (!this.sidebarWidgetInternal || !this.sidebarWidgetInternal.shouldHideOnDetach()) {\n      if (secondIsSidebar) {\n        this.contentElement.insertBefore(this.sidebarElementInternal, this.resizerElementInternal);\n      } else {\n        this.contentElement.insertBefore(this.sidebarElementInternal, this.mainElement);\n      }\n    } else {\n      console.error('Could not swap split widget side. Both children widgets contain iframes.');\n      this.secondIsSidebar = !secondIsSidebar;\n    }\n  }\n\n  sidebarSide(): string|null {\n    if (this.showModeInternal !== ShowMode.BOTH) {\n      return null;\n    }\n    return this.isVerticalInternal ? (this.secondIsSidebar ? 'right' : 'left') :\n                                     (this.secondIsSidebar ? 'bottom' : 'top');\n  }\n\n  resizerElement(): Element {\n    return this.resizerElementInternal;\n  }\n\n  hideMain(animate?: boolean): void {\n    this.showOnly(\n        this.sidebarWidgetInternal, this.mainWidgetInternal, this.sidebarElementInternal, this.mainElement, animate);\n    this.updateShowMode(ShowMode.ONLY_SIDEBAR);\n  }\n\n  hideSidebar(animate?: boolean): void {\n    this.showOnly(\n        this.mainWidgetInternal, this.sidebarWidgetInternal, this.mainElement, this.sidebarElementInternal, animate);\n    this.updateShowMode(ShowMode.ONLY_MAIN);\n  }\n\n  setSidebarMinimized(minimized: boolean): void {\n    this.sidebarMinimized = minimized;\n    this.invalidateConstraints();\n  }\n\n  isSidebarMinimized(): boolean {\n    return this.sidebarMinimized;\n  }\n\n  private showOnly(\n      sideToShow: Widget|null, sideToHide: Widget|null, shadowToShow: Element, shadowToHide: Element,\n      animate?: boolean): void {\n    this.cancelAnimation();\n\n    function callback(this: SplitWidget): void {\n      if (sideToShow) {\n        // Make sure main is first in the children list.\n        if (sideToShow === this.mainWidgetInternal) {\n          this.mainWidgetInternal.show(\n              this.element, this.sidebarWidgetInternal ? this.sidebarWidgetInternal.element : null);\n        } else if (this.sidebarWidgetInternal) {\n          this.sidebarWidgetInternal.show(this.element);\n        }\n      }\n      if (sideToHide) {\n        this.detaching = true;\n        sideToHide.detach();\n        this.detaching = false;\n      }\n\n      this.resizerElementInternal.classList.add('hidden');\n      shadowToShow.classList.remove('hidden');\n      shadowToShow.classList.add('maximized');\n      shadowToHide.classList.add('hidden');\n      shadowToHide.classList.remove('maximized');\n      this.removeAllLayoutProperties();\n      this.doResize();\n      this.showFinishedForTest();\n    }\n\n    if (animate) {\n      this.animate(true, callback.bind(this));\n    } else {\n      callback.call(this);\n    }\n\n    this.sidebarSizeDIP = -1;\n    this.setResizable(false);\n  }\n\n  private showFinishedForTest(): void {\n    // This method is sniffed in tests.\n  }\n\n  private removeAllLayoutProperties(): void {\n    this.sidebarElementInternal.style.removeProperty('flexBasis');\n\n    this.mainElement.style.removeProperty('width');\n    this.mainElement.style.removeProperty('height');\n    this.sidebarElementInternal.style.removeProperty('width');\n    this.sidebarElementInternal.style.removeProperty('height');\n\n    this.resizerElementInternal.style.removeProperty('left');\n    this.resizerElementInternal.style.removeProperty('right');\n    this.resizerElementInternal.style.removeProperty('top');\n    this.resizerElementInternal.style.removeProperty('bottom');\n\n    this.resizerElementInternal.style.removeProperty('margin-left');\n    this.resizerElementInternal.style.removeProperty('margin-right');\n    this.resizerElementInternal.style.removeProperty('margin-top');\n    this.resizerElementInternal.style.removeProperty('margin-bottom');\n  }\n\n  showBoth(animate?: boolean): void {\n    if (this.showModeInternal === ShowMode.BOTH) {\n      animate = false;\n    }\n\n    this.cancelAnimation();\n    this.mainElement.classList.remove('maximized', 'hidden');\n    this.sidebarElementInternal.classList.remove('maximized', 'hidden');\n    this.resizerElementInternal.classList.remove('hidden');\n    this.setResizable(true);\n\n    // Make sure main is the first in the children list.\n    this.suspendInvalidations();\n    if (this.sidebarWidgetInternal) {\n      this.sidebarWidgetInternal.show(this.element);\n    }\n    if (this.mainWidgetInternal) {\n      this.mainWidgetInternal.show(\n          this.element, this.sidebarWidgetInternal ? this.sidebarWidgetInternal.element : null);\n    }\n    this.resumeInvalidations();\n    // Order widgets in DOM properly.\n    this.setSecondIsSidebar(this.secondIsSidebar);\n\n    this.sidebarSizeDIP = -1;\n    this.updateShowMode(ShowMode.BOTH);\n    this.updateLayout(animate);\n  }\n\n  setResizable(resizable: boolean): void {\n    this.resizerWidget.setEnabled(resizable);\n  }\n\n  forceSetSidebarWidth(width: number): void {\n    this.defaultSidebarWidth = width;\n    this.savedSidebarSizeDIP = width;\n    this.updateLayout();\n  }\n\n  isResizable(): boolean {\n    return this.resizerWidget.isEnabled();\n  }\n\n  setSidebarSize(size: number): void {\n    const sizeDIP = ZoomManager.instance().cssToDIP(size);\n    this.savedSidebarSizeDIP = sizeDIP;\n    this.saveSetting();\n    this.innerSetSidebarSizeDIP(sizeDIP, false, true);\n  }\n\n  sidebarSize(): number {\n    const sizeDIP = Math.max(0, this.sidebarSizeDIP);\n    return ZoomManager.instance().dipToCSS(sizeDIP);\n  }\n\n  /**\n   * Returns total size in DIP.\n   */\n  private totalSizeDIP(): number {\n    if (!this.totalSizeCSS) {\n      this.totalSizeCSS = this.isVerticalInternal ? this.contentElement.offsetWidth : this.contentElement.offsetHeight;\n      this.totalSizeOtherDimensionCSS =\n          this.isVerticalInternal ? this.contentElement.offsetHeight : this.contentElement.offsetWidth;\n    }\n    return ZoomManager.instance().cssToDIP(this.totalSizeCSS);\n  }\n\n  private updateShowMode(showMode: string): void {\n    this.showModeInternal = showMode;\n    this.saveShowModeToSettings();\n    this.updateShowHideSidebarButton();\n    this.dispatchEventToListeners(Events.SHOW_MODE_CHANGED, showMode);\n    this.invalidateConstraints();\n  }\n\n  private innerSetSidebarSizeDIP(sizeDIP: number, animate: boolean, userAction?: boolean): void {\n    if (this.showModeInternal !== ShowMode.BOTH || !this.isShowing()) {\n      return;\n    }\n\n    sizeDIP = this.applyConstraints(sizeDIP, userAction);\n    if (this.sidebarSizeDIP === sizeDIP) {\n      return;\n    }\n\n    if (!this.resizerElementSize) {\n      this.resizerElementSize =\n          this.isVerticalInternal ? this.resizerElementInternal.offsetWidth : this.resizerElementInternal.offsetHeight;\n    }\n\n    // Invalidate layout below.\n\n    this.removeAllLayoutProperties();\n\n    // this.totalSizeDIP is available below since we successfully applied constraints.\n    const roundSizeCSS = Math.round(ZoomManager.instance().dipToCSS(sizeDIP));\n    const sidebarSizeValue = roundSizeCSS + 'px';\n    const mainSizeValue = (this.totalSizeCSS - roundSizeCSS) + 'px';\n    this.sidebarElementInternal.style.flexBasis = sidebarSizeValue;\n\n    // Make both sides relayout boundaries.\n    if (this.isVerticalInternal) {\n      this.sidebarElementInternal.style.width = sidebarSizeValue;\n      this.mainElement.style.width = mainSizeValue;\n      this.sidebarElementInternal.style.height = this.totalSizeOtherDimensionCSS + 'px';\n      this.mainElement.style.height = this.totalSizeOtherDimensionCSS + 'px';\n    } else {\n      this.sidebarElementInternal.style.height = sidebarSizeValue;\n      this.mainElement.style.height = mainSizeValue;\n      this.sidebarElementInternal.style.width = this.totalSizeOtherDimensionCSS + 'px';\n      this.mainElement.style.width = this.totalSizeOtherDimensionCSS + 'px';\n    }\n\n    // Position resizer.\n    if (this.isVerticalInternal) {\n      if (this.secondIsSidebar) {\n        this.resizerElementInternal.style.right = sidebarSizeValue;\n        this.resizerElementInternal.style.marginRight = -this.resizerElementSize / 2 + 'px';\n      } else {\n        this.resizerElementInternal.style.left = sidebarSizeValue;\n        this.resizerElementInternal.style.marginLeft = -this.resizerElementSize / 2 + 'px';\n      }\n    } else {\n      if (this.secondIsSidebar) {\n        this.resizerElementInternal.style.bottom = sidebarSizeValue;\n        this.resizerElementInternal.style.marginBottom = -this.resizerElementSize / 2 + 'px';\n      } else {\n        this.resizerElementInternal.style.top = sidebarSizeValue;\n        this.resizerElementInternal.style.marginTop = -this.resizerElementSize / 2 + 'px';\n      }\n    }\n\n    this.sidebarSizeDIP = sizeDIP;\n\n    // Force layout.\n\n    if (animate) {\n      this.animate(false);\n    } else {\n      // No need to recalculate this.sidebarSizeDIP and this.totalSizeDIP again.\n      this.doResize();\n      this.dispatchEventToListeners(Events.SIDEBAR_SIZE_CHANGED, this.sidebarSize());\n    }\n  }\n\n  private animate(reverse: boolean, callback?: (() => void)): void {\n    const animationTime = 50;\n    this.animationCallback = callback || null;\n\n    let animatedMarginPropertyName: string;\n    if (this.isVerticalInternal) {\n      animatedMarginPropertyName = this.secondIsSidebar ? 'margin-right' : 'margin-left';\n    } else {\n      animatedMarginPropertyName = this.secondIsSidebar ? 'margin-bottom' : 'margin-top';\n    }\n\n    const marginFrom = reverse ? '0' : '-' + ZoomManager.instance().dipToCSS(this.sidebarSizeDIP) + 'px';\n    const marginTo = reverse ? '-' + ZoomManager.instance().dipToCSS(this.sidebarSizeDIP) + 'px' : '0';\n\n    // This order of things is important.\n    // 1. Resize main element early and force layout.\n    this.contentElement.style.setProperty(animatedMarginPropertyName, marginFrom);\n    this.contentElement.style.setProperty('overflow', 'hidden');\n    if (!reverse) {\n      suppressUnused(this.mainElement.offsetWidth);\n      suppressUnused(this.sidebarElementInternal.offsetWidth);\n    }\n\n    // 2. Issue onresize to the sidebar element, its size won't change.\n    if (!reverse && this.sidebarWidgetInternal) {\n      this.sidebarWidgetInternal.doResize();\n    }\n\n    // 3. Configure and run animation\n    this.contentElement.style.setProperty('transition', animatedMarginPropertyName + ' ' + animationTime + 'ms linear');\n\n    const boundAnimationFrame = animationFrame.bind(this);\n    let startTime: number|null = null;\n    function animationFrame(this: SplitWidget): void {\n      this.animationFrameHandle = 0;\n\n      if (!startTime) {\n        // Kick animation on first frame.\n        this.contentElement.style.setProperty(animatedMarginPropertyName, marginTo);\n        startTime = window.performance.now();\n      } else if (window.performance.now() < startTime + animationTime) {\n        // Process regular animation frame.\n        if (this.mainWidgetInternal) {\n          this.mainWidgetInternal.doResize();\n        }\n      } else {\n        // Complete animation.\n        this.cancelAnimation();\n        if (this.mainWidgetInternal) {\n          this.mainWidgetInternal.doResize();\n        }\n        this.dispatchEventToListeners(Events.SIDEBAR_SIZE_CHANGED, this.sidebarSize());\n        return;\n      }\n      this.animationFrameHandle = this.contentElement.window().requestAnimationFrame(boundAnimationFrame);\n    }\n    this.animationFrameHandle = this.contentElement.window().requestAnimationFrame(boundAnimationFrame);\n  }\n\n  private cancelAnimation(): void {\n    this.contentElement.style.removeProperty('margin-top');\n    this.contentElement.style.removeProperty('margin-right');\n    this.contentElement.style.removeProperty('margin-bottom');\n    this.contentElement.style.removeProperty('margin-left');\n    this.contentElement.style.removeProperty('transition');\n    this.contentElement.style.removeProperty('overflow');\n\n    if (this.animationFrameHandle) {\n      this.contentElement.window().cancelAnimationFrame(this.animationFrameHandle);\n      this.animationFrameHandle = 0;\n    }\n    if (this.animationCallback) {\n      this.animationCallback();\n      this.animationCallback = null;\n    }\n  }\n\n  private applyConstraints(sidebarSize: number, userAction?: boolean): number {\n    const totalSize = this.totalSizeDIP();\n    const zoomFactor = this.constraintsInDip ? 1 : ZoomManager.instance().zoomFactor();\n\n    let constraints: Constraints =\n        this.sidebarWidgetInternal ? this.sidebarWidgetInternal.constraints() : new Constraints();\n    let minSidebarSize: 20|number = this.isVertical() ? constraints.minimum.width : constraints.minimum.height;\n    if (!minSidebarSize) {\n      minSidebarSize = MinPadding;\n    }\n    minSidebarSize *= zoomFactor;\n    if (this.sidebarMinimized) {\n      sidebarSize = minSidebarSize;\n    }\n\n    let preferredSidebarSize: 20|number =\n        this.isVertical() ? constraints.preferred.width : constraints.preferred.height;\n    if (!preferredSidebarSize) {\n      preferredSidebarSize = MinPadding;\n    }\n    preferredSidebarSize *= zoomFactor;\n    // Allow sidebar to be less than preferred by explicit user action.\n    if (sidebarSize < preferredSidebarSize) {\n      preferredSidebarSize = Math.max(sidebarSize, minSidebarSize);\n    }\n    preferredSidebarSize += zoomFactor;  // 1 css pixel for splitter border.\n\n    constraints = this.mainWidgetInternal ? this.mainWidgetInternal.constraints() : new Constraints();\n    let minMainSize: 20|number = this.isVertical() ? constraints.minimum.width : constraints.minimum.height;\n    if (!minMainSize) {\n      minMainSize = MinPadding;\n    }\n    minMainSize *= zoomFactor;\n\n    let preferredMainSize: 20|number = this.isVertical() ? constraints.preferred.width : constraints.preferred.height;\n    if (!preferredMainSize) {\n      preferredMainSize = MinPadding;\n    }\n    preferredMainSize *= zoomFactor;\n    const savedMainSize = this.isVertical() ? this.savedVerticalMainSize : this.savedHorizontalMainSize;\n    if (savedMainSize !== null) {\n      preferredMainSize = Math.min(preferredMainSize, savedMainSize * zoomFactor);\n    }\n    if (userAction) {\n      preferredMainSize = minMainSize;\n    }\n\n    // Enough space for preferred.\n    const totalPreferred = preferredMainSize + preferredSidebarSize;\n    if (totalPreferred <= totalSize) {\n      return Platform.NumberUtilities.clamp(sidebarSize, preferredSidebarSize, totalSize - preferredMainSize);\n    }\n\n    // Enough space for minimum.\n    if (minMainSize + minSidebarSize <= totalSize) {\n      const delta = totalPreferred - totalSize;\n      const sidebarDelta = delta * preferredSidebarSize / totalPreferred;\n      sidebarSize = preferredSidebarSize - sidebarDelta;\n      return Platform.NumberUtilities.clamp(sidebarSize, minSidebarSize, totalSize - minMainSize);\n    }\n\n    // Not enough space even for minimum sizes.\n    return Math.max(0, totalSize - minMainSize);\n  }\n\n  override wasShown(): void {\n    this.forceUpdateLayout();\n    ZoomManager.instance().addEventListener(ZoomManagerEvents.ZOOM_CHANGED, this.onZoomChanged, this);\n  }\n\n  override willHide(): void {\n    ZoomManager.instance().removeEventListener(ZoomManagerEvents.ZOOM_CHANGED, this.onZoomChanged, this);\n  }\n\n  override onResize(): void {\n    this.updateLayout();\n  }\n\n  override onLayout(): void {\n    this.updateLayout();\n  }\n\n  override calculateConstraints(): Constraints {\n    if (this.showModeInternal === ShowMode.ONLY_MAIN) {\n      return this.mainWidgetInternal ? this.mainWidgetInternal.constraints() : new Constraints();\n    }\n    if (this.showModeInternal === ShowMode.ONLY_SIDEBAR) {\n      return this.sidebarWidgetInternal ? this.sidebarWidgetInternal.constraints() : new Constraints();\n    }\n\n    let mainConstraints: Constraints =\n        this.mainWidgetInternal ? this.mainWidgetInternal.constraints() : new Constraints();\n    let sidebarConstraints: Constraints =\n        this.sidebarWidgetInternal ? this.sidebarWidgetInternal.constraints() : new Constraints();\n    const min = MinPadding;\n    if (this.isVerticalInternal) {\n      mainConstraints = mainConstraints.widthToMax(min).addWidth(1);  // 1 for splitter\n      sidebarConstraints = sidebarConstraints.widthToMax(min);\n      return mainConstraints.addWidth(sidebarConstraints).heightToMax(sidebarConstraints);\n    }\n    mainConstraints = mainConstraints.heightToMax(min).addHeight(1);  // 1 for splitter\n    sidebarConstraints = sidebarConstraints.heightToMax(min);\n    return mainConstraints.widthToMax(sidebarConstraints).addHeight(sidebarConstraints);\n  }\n\n  private onResizeStart(): void {\n    this.resizeStartSizeDIP = this.sidebarSizeDIP;\n  }\n\n  private onResizeUpdate(event: Common.EventTarget.EventTargetEvent<ResizeUpdatePositionEvent>): void {\n    const offset = event.data.currentPosition - event.data.startPosition;\n    const offsetDIP = ZoomManager.instance().cssToDIP(offset);\n    const newSizeDIP = this.secondIsSidebar ? this.resizeStartSizeDIP - offsetDIP : this.resizeStartSizeDIP + offsetDIP;\n    const constrainedSizeDIP = this.applyConstraints(newSizeDIP, true);\n    this.savedSidebarSizeDIP = constrainedSizeDIP;\n    this.saveSetting();\n    this.innerSetSidebarSizeDIP(constrainedSizeDIP, false, true);\n    if (this.isVertical()) {\n      this.savedVerticalMainSize = this.totalSizeDIP() - this.sidebarSizeDIP;\n    } else {\n      this.savedHorizontalMainSize = this.totalSizeDIP() - this.sidebarSizeDIP;\n    }\n  }\n\n  private onResizeEnd(): void {\n    this.resizeStartSizeDIP = 0;\n  }\n\n  hideDefaultResizer(noSplitter?: boolean): void {\n    this.resizerElementInternal.classList.toggle('hidden', Boolean(noSplitter));\n    this.uninstallResizer(this.resizerElementInternal);\n    this.sidebarElementInternal.classList.toggle('no-default-splitter', Boolean(noSplitter));\n  }\n\n  installResizer(resizerElement: Element): void {\n    this.resizerWidget.addElement((resizerElement as HTMLElement));\n  }\n\n  uninstallResizer(resizerElement: Element): void {\n    this.resizerWidget.removeElement((resizerElement as HTMLElement));\n  }\n\n  hasCustomResizer(): boolean {\n    const elements = this.resizerWidget.elements();\n    return elements.length > 1 || (elements.length === 1 && elements[0] !== this.resizerElementInternal);\n  }\n\n  toggleResizer(resizer: Element, on: boolean): void {\n    if (on) {\n      this.installResizer(resizer);\n    } else {\n      this.uninstallResizer(resizer);\n    }\n  }\n\n  private settingForOrientation(): SettingForOrientation|null {\n    const state = this.setting ? this.setting.get() : {};\n    const orientationState = this.isVerticalInternal ? state.vertical : state.horizontal;\n    return orientationState ?? null;\n  }\n\n  private preferredSidebarSizeDIP(): number {\n    let size: number = this.savedSidebarSizeDIP;\n    if (!size) {\n      size = this.isVerticalInternal ? this.defaultSidebarWidth : this.defaultSidebarHeight;\n      // If we have default value in percents, calculate it on first use.\n      if (0 < size && size < 1) {\n        size *= this.totalSizeDIP();\n      }\n    }\n    return size;\n  }\n\n  private restoreSidebarSizeFromSettings(): void {\n    const settingForOrientation = this.settingForOrientation();\n    this.savedSidebarSizeDIP = settingForOrientation ? settingForOrientation.size : 0;\n  }\n\n  private restoreAndApplyShowModeFromSettings(): void {\n    const orientationState = this.settingForOrientation();\n    this.savedShowMode =\n        orientationState && orientationState.showMode ? orientationState.showMode : this.showModeInternal;\n    this.showModeInternal = this.savedShowMode;\n\n    switch (this.savedShowMode) {\n      case ShowMode.BOTH:\n        this.showBoth();\n        break;\n      case ShowMode.ONLY_MAIN:\n        this.hideSidebar();\n        break;\n      case ShowMode.ONLY_SIDEBAR:\n        this.hideMain();\n        break;\n    }\n  }\n\n  private saveShowModeToSettings(): void {\n    this.savedShowMode = this.showModeInternal;\n    this.saveSetting();\n  }\n\n  private saveSetting(): void {\n    if (!this.setting) {\n      return;\n    }\n    const state = this.setting.get();\n    const orientationState =\n        (this.isVerticalInternal ? state.vertical : state.horizontal) || {} as SettingForOrientation;\n\n    orientationState.size = this.savedSidebarSizeDIP;\n    if (this.shouldSaveShowMode) {\n      orientationState.showMode = this.savedShowMode;\n    }\n\n    if (this.isVerticalInternal) {\n      state.vertical = orientationState;\n    } else {\n      state.horizontal = orientationState;\n    }\n    this.setting.set(state);\n  }\n\n  private forceUpdateLayout(): void {\n    // Force layout even if sidebar size does not change.\n    this.sidebarSizeDIP = -1;\n    this.updateLayout();\n  }\n\n  private onZoomChanged(): void {\n    this.forceUpdateLayout();\n  }\n\n  createShowHideSidebarButton(\n      showTitle: Common.UIString.LocalizedString, hideTitle: Common.UIString.LocalizedString,\n      shownString: Common.UIString.LocalizedString, hiddenString: Common.UIString.LocalizedString,\n      jslogContext?: string): ToolbarButton {\n    this.showSidebarButtonTitle = showTitle;\n    this.hideSidebarButtonTitle = hideTitle;\n    this.shownSidebarString = shownString;\n    this.hiddenSidebarString = hiddenString;\n    this.showHideSidebarButton = new ToolbarButton('', 'right-panel-open');\n    this.showHideSidebarButton.addEventListener(ToolbarButton.Events.CLICK, buttonClicked, this);\n    if (jslogContext) {\n      this.showHideSidebarButton.element.setAttribute(\n          'jslog', `${VisualLogging.toggleSubpane().track({click: true}).context(jslogContext)}`);\n    }\n    this.updateShowHideSidebarButton();\n\n    function buttonClicked(this: SplitWidget): void {\n      this.toggleSidebar();\n    }\n\n    return this.showHideSidebarButton;\n  }\n\n  /**\n   * @returns true if this call makes the sidebar visible, and false otherwise.\n   */\n  toggleSidebar(): boolean {\n    if (this.showModeInternal !== ShowMode.BOTH) {\n      this.showBoth(true);\n      ARIAUtils.alert(this.shownSidebarString);\n      return true;\n    }\n    this.hideSidebar(true);\n    ARIAUtils.alert(this.hiddenSidebarString);\n    return false;\n  }\n\n  private updateShowHideSidebarButton(): void {\n    if (!this.showHideSidebarButton) {\n      return;\n    }\n    const sidebarHidden = this.showModeInternal === ShowMode.ONLY_MAIN;\n    let glyph = '';\n    if (sidebarHidden) {\n      glyph = this.isVertical() ? (this.isSidebarSecond() ? 'right-panel-open' : 'left-panel-open') :\n                                  (this.isSidebarSecond() ? 'bottom-panel-open' : 'top-panel-open');\n    } else {\n      glyph = this.isVertical() ? (this.isSidebarSecond() ? 'right-panel-close' : 'left-panel-close') :\n                                  (this.isSidebarSecond() ? 'bottom-panel-close' : 'top-panel-close');\n    }\n    this.showHideSidebarButton.setGlyph(glyph);\n    this.showHideSidebarButton.setTitle(sidebarHidden ? this.showSidebarButtonTitle : this.hideSidebarButtonTitle);\n  }\n}\n\ninterface SplitWidgetOptions {\n  vertical?: boolean;\n  secondIsSidebar?: boolean;\n  settingName?: string;\n  defaultSidebarWidth?: number;\n  defaultSidebarHeight?: number;\n  constraintsInDip?: boolean;\n  markAsRoot?: boolean;\n}\n\nexport class SplitWidgetElement extends WidgetElement<SplitWidget> {\n  #options: SplitWidgetOptions = {};\n\n  set options(options: SplitWidgetOptions) {\n    this.#options = options;\n  }\n\n  override createWidget(): SplitWidget {\n    const {\n      vertical,\n      secondIsSidebar,\n      settingName,\n      defaultSidebarWidth,\n      defaultSidebarHeight,\n      constraintsInDip,\n      markAsRoot,\n    } = this.#options;\n    const widget = new SplitWidget(\n        Boolean(vertical), Boolean(secondIsSidebar), settingName, defaultSidebarWidth, defaultSidebarHeight,\n        constraintsInDip, this);\n    if (markAsRoot) {\n      widget.markAsRoot();\n    }\n    return widget;\n  }\n}\n\ncustomElements.define('devtools-split-widget', SplitWidgetElement);\n\nexport const enum ShowMode {\n  BOTH = 'Both',\n  ONLY_MAIN = 'OnlyMain',\n  ONLY_SIDEBAR = 'OnlySidebar',\n}\n\nexport const enum Events {\n  SIDEBAR_SIZE_CHANGED = 'SidebarSizeChanged',\n  SHOW_MODE_CHANGED = 'ShowModeChanged',\n}\n\nexport type EventTypes = {\n  [Events.SIDEBAR_SIZE_CHANGED]: number,\n  [Events.SHOW_MODE_CHANGED]: string,\n};\n\nconst MinPadding = 20;\nexport interface SettingForOrientation {\n  showMode: string;\n  size: number;\n}\n\nconst suppressUnused = function(_value: unknown): void {};\n"],
  "mappings": "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",
  "names": ["ShowMode", "Events"]
}
