{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/source_frame/BinaryResourceViewFactory.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\n\nimport {ResourceSourceFrame} from './ResourceSourceFrame.js';\nimport {StreamingContentHexView} from './StreamingContentHexView.js';\n\nexport class BinaryResourceViewFactory {\n  private streamingContent: TextUtils.StreamingContentData.StreamingContentData;\n  private readonly contentUrl: Platform.DevToolsPath.UrlString;\n  private readonly resourceType: Common.ResourceType.ResourceType;\n\n  constructor(\n      content: TextUtils.StreamingContentData.StreamingContentData, contentUrl: Platform.DevToolsPath.UrlString,\n      resourceType: Common.ResourceType.ResourceType) {\n    this.streamingContent = content;\n    this.contentUrl = contentUrl;\n    this.resourceType = resourceType;\n  }\n\n  hex(): string {\n    const binaryString = window.atob(this.base64());\n    const array = Uint8Array.from(binaryString, m => m.codePointAt(0) as number);\n    return BinaryResourceViewFactory.#uint8ArrayToHexString(array);\n  }\n\n  base64(): string {\n    return this.streamingContent.content().base64;\n  }\n\n  utf8(): string {\n    return new TextUtils.ContentData.ContentData(this.base64(), /* isBase64 */ true, 'text/plain', 'utf-8').text;\n  }\n\n  createBase64View(): ResourceSourceFrame {\n    const resourceFrame = new ResourceSourceFrame(\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            this.contentUrl, this.resourceType, this.streamingContent.content().base64),\n        this.resourceType.canonicalMimeType(), {lineNumbers: false, lineWrapping: true});\n    this.streamingContent.addEventListener(TextUtils.StreamingContentData.Events.CHUNK_ADDED, () => {\n      void resourceFrame.setContent(this.base64());\n    });\n    return resourceFrame;\n  }\n\n  createHexView(): StreamingContentHexView {\n    return new StreamingContentHexView(this.streamingContent);\n  }\n\n  createUtf8View(): ResourceSourceFrame {\n    const resourceFrame = new ResourceSourceFrame(\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            this.contentUrl, this.resourceType, this.utf8()),\n        this.resourceType.canonicalMimeType(), {lineNumbers: true, lineWrapping: true});\n    this.streamingContent.addEventListener(TextUtils.StreamingContentData.Events.CHUNK_ADDED, () => {\n      void resourceFrame.setContent(this.utf8());\n    });\n    return resourceFrame;\n  }\n\n  static #uint8ArrayToHexString(uint8Array: Uint8Array): string {\n    let output = '';\n    for (let i = 0; i < uint8Array.length; i++) {\n      output += BinaryResourceViewFactory.#numberToHex(uint8Array[i], 2);\n    }\n    return output;\n  }\n\n  static #numberToHex(number: number, padding: number): string {\n    let hex = number.toString(16);\n    while (hex.length < padding) {\n      hex = '0' + hex;\n    }\n    return hex;\n  }\n}\n"],
  "mappings": ";AAMA,YAAY,eAAe;AAE3B,SAAQ,2BAA0B;AAClC,SAAQ,+BAA8B;AAE/B,aAAM,0BAA0B;AAAA,EAC7B;AAAA,EACS;AAAA,EACA;AAAA,EAEjB,YACI,SAA8D,YAC9D,cAAgD;AAClD,SAAK,mBAAmB;AACxB,SAAK,aAAa;AAClB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,MAAc;AACZ,UAAM,eAAe,OAAO,KAAK,KAAK,OAAO,CAAC;AAC9C,UAAM,QAAQ,WAAW,KAAK,cAAc,OAAK,EAAE,YAAY,CAAC,CAAW;AAC3E,WAAO,0BAA0B,uBAAuB,KAAK;AAAA,EAC/D;AAAA,EAEA,SAAiB;AACf,WAAO,KAAK,iBAAiB,QAAQ,EAAE;AAAA,EACzC;AAAA,EAEA,OAAe;AACb,WAAO,IAAI,UAAU,YAAY;AAAA,MAAY,KAAK,OAAO;AAAA;AAAA,MAAkB;AAAA,MAAM;AAAA,MAAc;AAAA,IAAO,EAAE;AAAA,EAC1G;AAAA,EAEA,mBAAwC;AACtC,UAAM,gBAAgB,IAAI;AAAA,MACtB,UAAU,sBAAsB,sBAAsB;AAAA,QAClD,KAAK;AAAA,QAAY,KAAK;AAAA,QAAc,KAAK,iBAAiB,QAAQ,EAAE;AAAA,MAAM;AAAA,MAC9E,KAAK,aAAa,kBAAkB;AAAA,MAAG,EAAC,aAAa,OAAO,cAAc,KAAI;AAAA,IAAC;AACnF,SAAK,iBAAiB,iBAAiB,UAAU,qBAAqB,OAAO,aAAa,MAAM;AAC9F,WAAK,cAAc,WAAW,KAAK,OAAO,CAAC;AAAA,IAC7C,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EAEA,gBAAyC;AACvC,WAAO,IAAI,wBAAwB,KAAK,gBAAgB;AAAA,EAC1D;AAAA,EAEA,iBAAsC;AACpC,UAAM,gBAAgB,IAAI;AAAA,MACtB,UAAU,sBAAsB,sBAAsB;AAAA,QAClD,KAAK;AAAA,QAAY,KAAK;AAAA,QAAc,KAAK,KAAK;AAAA,MAAC;AAAA,MACnD,KAAK,aAAa,kBAAkB;AAAA,MAAG,EAAC,aAAa,MAAM,cAAc,KAAI;AAAA,IAAC;AAClF,SAAK,iBAAiB,iBAAiB,UAAU,qBAAqB,OAAO,aAAa,MAAM;AAC9F,WAAK,cAAc,WAAW,KAAK,KAAK,CAAC;AAAA,IAC3C,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,uBAAuB,YAAgC;AAC5D,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,gBAAU,0BAA0B,aAAa,WAAW,CAAC,GAAG,CAAC;AAAA,IACnE;AACA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,aAAa,QAAgB,SAAyB;AAC3D,QAAI,MAAM,OAAO,SAAS,EAAE;AAC5B,WAAO,IAAI,SAAS,SAAS;AAC3B,YAAM,MAAM;AAAA,IACd;AACA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
