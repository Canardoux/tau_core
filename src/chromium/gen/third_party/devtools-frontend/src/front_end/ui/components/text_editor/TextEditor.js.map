{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/text_editor/TextEditor.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as WindowBoundsService from '../../../services/window_bounds/window_bounds.js';\nimport * as CodeMirror from '../../../third_party/codemirror.next/codemirror.next.js';\nimport * as ThemeSupport from '../../legacy/theme_support/theme_support.js';\nimport * as CodeHighlighter from '../code_highlighter/code_highlighter.js';\n\nimport {baseConfiguration, dummyDarkTheme, dynamicSetting, DynamicSetting, themeSelection} from './config.js';\nimport {toLineColumn, toOffset} from './position.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-text-editor': TextEditor;\n  }\n}\n\nexport class TextEditor extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #activeEditor: CodeMirror.EditorView|undefined = undefined;\n  #dynamicSettings: readonly DynamicSetting<unknown>[] = DynamicSetting.none;\n  #activeSettingListeners: [Common.Settings.Setting<unknown>, (event: {data: unknown}) => void][] = [];\n  #pendingState: CodeMirror.EditorState|undefined;\n  #lastScrollSnapshot: CodeMirror.StateEffect<unknown>|undefined;\n  #resizeTimeout = -1;\n  #resizeListener = (): void => {\n    if (this.#resizeTimeout < 0) {\n      this.#resizeTimeout = window.setTimeout(() => {\n        this.#resizeTimeout = -1;\n        if (this.#activeEditor) {\n          CodeMirror.repositionTooltips(this.#activeEditor);\n        }\n      }, 50);\n    }\n  };\n  #devtoolsResizeObserver = new ResizeObserver(this.#resizeListener);\n\n  constructor(pendingState?: CodeMirror.EditorState) {\n    super();\n    this.#pendingState = pendingState;\n    this.#shadow.adoptedStyleSheets = [CodeHighlighter.Style.default];\n  }\n\n  #createEditor(): CodeMirror.EditorView {\n    this.#activeEditor = new CodeMirror.EditorView({\n      state: this.state,\n      parent: this.#shadow,\n      root: this.#shadow,\n      dispatch: (tr: CodeMirror.Transaction, view: CodeMirror.EditorView) => {\n        view.update([tr]);\n        this.#maybeDispatchInput(tr);\n        if (tr.reconfigured) {\n          this.#ensureSettingListeners();\n        }\n      },\n      scrollTo: this.#lastScrollSnapshot,\n    });\n\n    this.#activeEditor.scrollDOM.addEventListener('scroll', () => {\n      if (!this.#activeEditor) {\n        return;\n      }\n\n      this.#lastScrollSnapshot = this.#activeEditor.scrollSnapshot();\n      this.scrollEventHandledToSaveScrollPositionForTest();\n    });\n\n    this.#ensureSettingListeners();\n    this.#startObservingResize();\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      const currentTheme = ThemeSupport.ThemeSupport.instance().themeName() === 'dark' ? dummyDarkTheme : [];\n      this.editor.dispatch({\n        effects: themeSelection.reconfigure(currentTheme),\n      });\n    });\n    return this.#activeEditor;\n  }\n\n  get editor(): CodeMirror.EditorView {\n    return this.#activeEditor || this.#createEditor();\n  }\n\n  dispatch(spec: CodeMirror.TransactionSpec): void {\n    return this.editor.dispatch(spec);\n  }\n\n  get state(): CodeMirror.EditorState {\n    if (this.#activeEditor) {\n      return this.#activeEditor.state;\n    }\n    if (!this.#pendingState) {\n      this.#pendingState = CodeMirror.EditorState.create({extensions: baseConfiguration('')});\n    }\n    return this.#pendingState;\n  }\n\n  set state(state: CodeMirror.EditorState) {\n    if (this.#pendingState === state) {\n      return;\n    }\n\n    this.#pendingState = state;\n\n    if (this.#activeEditor) {\n      this.#activeEditor.setState(state);\n      this.#ensureSettingListeners();\n    }\n  }\n\n  scrollEventHandledToSaveScrollPositionForTest(): void {\n  }\n\n  connectedCallback(): void {\n    if (!this.#activeEditor) {\n      this.#createEditor();\n    } else {\n      this.#activeEditor.dispatch({effects: this.#lastScrollSnapshot});\n    }\n  }\n\n  disconnectedCallback(): void {\n    if (this.#activeEditor) {\n      this.#activeEditor.dispatch({effects: clearHighlightedLine.of(null)});\n      this.#pendingState = this.#activeEditor.state;\n      this.#devtoolsResizeObserver.disconnect();\n      window.removeEventListener('resize', this.#resizeListener);\n      this.#activeEditor.destroy();\n      this.#activeEditor = undefined;\n      this.#ensureSettingListeners();\n    }\n  }\n\n  override focus(): void {\n    if (this.#activeEditor) {\n      this.#activeEditor.focus();\n    }\n  }\n\n  #ensureSettingListeners(): void {\n    const dynamicSettings = this.#activeEditor ?\n        this.#activeEditor.state.facet<readonly DynamicSetting<unknown>[]>(dynamicSetting) :\n        DynamicSetting.none;\n    if (dynamicSettings === this.#dynamicSettings) {\n      return;\n    }\n    this.#dynamicSettings = dynamicSettings;\n\n    for (const [setting, listener] of this.#activeSettingListeners) {\n      setting.removeChangeListener(listener);\n    }\n    this.#activeSettingListeners = [];\n\n    const settings = Common.Settings.Settings.instance();\n    for (const dynamicSetting of dynamicSettings) {\n      const handler = ({data}: {data: unknown}): void => {\n        const change = dynamicSetting.sync(this.state, data);\n        if (change && this.#activeEditor) {\n          this.#activeEditor.dispatch({effects: change});\n        }\n      };\n      const setting = settings.moduleSetting(dynamicSetting.settingName);\n      setting.addChangeListener(handler);\n      this.#activeSettingListeners.push([setting, handler]);\n    }\n  }\n\n  #startObservingResize(): void {\n    const devtoolsElement =\n        WindowBoundsService.WindowBoundsService.WindowBoundsServiceImpl.instance().getDevToolsBoundingElement();\n    if (devtoolsElement) {\n      this.#devtoolsResizeObserver.observe(devtoolsElement);\n    }\n    window.addEventListener('resize', this.#resizeListener);\n  }\n\n  #maybeDispatchInput(transaction: CodeMirror.Transaction): void {\n    const userEvent = transaction.annotation(CodeMirror.Transaction.userEvent);\n    const inputType = userEvent ? CODE_MIRROR_USER_EVENT_TO_INPUT_EVENT_TYPE.get(userEvent) : null;\n    if (inputType) {\n      this.dispatchEvent(new InputEvent('input', {inputType}));\n    }\n  }\n\n  revealPosition(selection: CodeMirror.EditorSelection, highlight: boolean = true): void {\n    const view = this.#activeEditor;\n    if (!view) {\n      return;\n    }\n\n    const line = view.state.doc.lineAt(selection.main.head);\n    const effects: CodeMirror.StateEffect<unknown>[] = [];\n    if (highlight) {\n      // Lazily register the highlight line state.\n      if (!view.state.field(highlightedLineState, false)) {\n        view.dispatch({effects: CodeMirror.StateEffect.appendConfig.of(highlightedLineState)});\n      } else {\n        // Always clear the previous highlight line first. This cannot be done\n        // in combination with the other effects, as it wouldn't restart the CSS\n        // highlight line animation.\n        view.dispatch({effects: clearHighlightedLine.of(null)});\n      }\n\n      // Here we finally start the actual highlight line effects.\n      effects.push(setHighlightedLine.of(line.from));\n    }\n\n    const editorRect = view.scrollDOM.getBoundingClientRect();\n    const targetPos = view.coordsAtPos(selection.main.head);\n    if (!selection.main.empty) {\n      // If the caller provided an actual range, we use the default 'nearest' on both axis.\n      // Otherwise we 'center' on an axis to provide more context around the single point.\n      effects.push(CodeMirror.EditorView.scrollIntoView(selection.main));\n    } else if (!targetPos || targetPos.top < editorRect.top || targetPos.bottom > editorRect.bottom) {\n      effects.push(CodeMirror.EditorView.scrollIntoView(selection.main, {y: 'center'}));\n    } else if (targetPos.left < editorRect.left || targetPos.right > editorRect.right) {\n      effects.push(CodeMirror.EditorView.scrollIntoView(selection.main, {x: 'center'}));\n    }\n\n    view.dispatch({\n      selection,\n      effects,\n      userEvent: 'select.reveal',\n    });\n  }\n\n  createSelection(head: {lineNumber: number, columnNumber: number}, anchor?: {\n    lineNumber: number,\n    columnNumber: number,\n  }): CodeMirror.EditorSelection {\n    const {doc} = this.state;\n    const headPos = toOffset(doc, head);\n    return CodeMirror.EditorSelection.single(anchor ? toOffset(doc, anchor) : headPos, headPos);\n  }\n\n  toLineColumn(pos: number): {lineNumber: number, columnNumber: number} {\n    return toLineColumn(this.state.doc, pos);\n  }\n\n  toOffset(pos: {lineNumber: number, columnNumber: number}): number {\n    return toOffset(this.state.doc, pos);\n  }\n}\n\ncustomElements.define('devtools-text-editor', TextEditor);\n\n// Line highlighting\n\nconst clearHighlightedLine = CodeMirror.StateEffect.define<null>();\nconst setHighlightedLine = CodeMirror.StateEffect.define<number>();\n\nconst highlightedLineState = CodeMirror.StateField.define<CodeMirror.DecorationSet>({\n  create: () => CodeMirror.Decoration.none,\n  update(value, tr) {\n    if (!tr.changes.empty && value.size) {\n      value = value.map(tr.changes);\n    }\n    for (const effect of tr.effects) {\n      if (effect.is(clearHighlightedLine)) {\n        value = CodeMirror.Decoration.none;\n      } else if (effect.is(setHighlightedLine)) {\n        value = CodeMirror.Decoration.set([\n          CodeMirror.Decoration.line({attributes: {class: 'cm-highlightedLine'}}).range(effect.value),\n        ]);\n      }\n    }\n    return value;\n  },\n  provide: field => CodeMirror.EditorView.decorations.from(field, value => value),\n});\n\nconst CODE_MIRROR_USER_EVENT_TO_INPUT_EVENT_TYPE = new Map([\n  ['input.type', 'insertText'],\n  ['input.type.compose', 'insertCompositionText'],\n  ['input.paste', 'insertFromPaste'],\n  ['input.drop', 'insertFromDrop'],\n  ['input.complete', 'insertReplacementText'],\n  ['delete.selection', 'deleteContent'],\n  ['delete.forward', 'deleteContentForward'],\n  ['delete.backward', 'deleteContentBackward'],\n  ['delete.cut', 'deleteByCut'],\n  ['move.drop', 'deleteByDrag'],\n  ['undo', 'historyUndo'],\n  ['redo', 'historyRedo'],\n]);\n"],
  "mappings": "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",
  "names": ["dynamicSetting"]
}
