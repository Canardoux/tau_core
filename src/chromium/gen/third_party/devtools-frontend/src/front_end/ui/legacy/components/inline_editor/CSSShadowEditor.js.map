{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/inline_editor/CSSShadowEditor.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as VisualLogging from '../../../visual_logging/visual_logging.js';\nimport * as UI from '../../legacy.js';\n\nimport cssShadowEditorStyles from './cssShadowEditor.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Text that refers to some types\n   */\n  type: 'Type',\n  /**\n   *@description Text in CSSShadow Editor of the inline editor in the Styles tab\n   */\n  xOffset: 'X offset',\n  /**\n   *@description Text in CSSShadow Editor of the inline editor in the Styles tab\n   */\n  yOffset: 'Y offset',\n  /**\n   * @description Text in CSSShadow Editor of the inline editor in the Styles tab. Noun which is a\n   * label for an input that allows the user to specify how blurred the box-shadow should be.\n   */\n  blur: 'Blur',\n  /**\n   *@description Text in CSSShadow Editor of the inline editor in the Styles tab\n   */\n  spread: 'Spread',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/inline_editor/CSSShadowEditor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst maxRange: number = 20;\nconst defaultUnit: string = 'px';\nconst sliderThumbRadius: number = 6;\nconst canvasSize: number = 88;\n\nexport interface CSSShadowModel {\n  setInset(inset: boolean): void;\n  setOffsetX(offsetX: CSSLength): void;\n  setOffsetY(offsetY: CSSLength): void;\n  setBlurRadius(blurRadius: CSSLength): void;\n  setSpreadRadius(spreadRadius: CSSLength): void;\n  isBoxShadow(): boolean;\n  inset(): boolean;\n  offsetX(): CSSLength;\n  offsetY(): CSSLength;\n  blurRadius(): CSSLength;\n  spreadRadius(): CSSLength;\n}\n\nconst CSS_LENGTH_REGEX = (function(): string {\n  const number = '([+-]?(?:[0-9]*[.])?[0-9]+(?:[eE][+-]?[0-9]+)?)';\n  const unit = '(ch|cm|em|ex|in|mm|pc|pt|px|rem|vh|vmax|vmin|vw)';\n  const zero = '[+-]?(?:0*[.])?0+(?:[eE][+-]?[0-9]+)?';\n  return new RegExp(number + unit + '|' + zero, 'gi').source;\n})();\n\nexport class CSSLength {\n  amount: number;\n  unit: string;\n  constructor(amount: number, unit: string) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  static parse(text: string): CSSLength|null {\n    const lengthRegex = new RegExp('^(?:' + CSS_LENGTH_REGEX + ')$', 'i');\n    const match = text.match(lengthRegex);\n    if (!match) {\n      return null;\n    }\n    if (match.length > 2 && match[2]) {\n      return new CSSLength(parseFloat(match[1]), match[2]);\n    }\n    return CSSLength.zero();\n  }\n\n  static zero(): CSSLength {\n    return new CSSLength(0, '');\n  }\n\n  asCSSText(): string {\n    return this.amount + this.unit;\n  }\n}\n\nexport class CSSShadowEditor extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  private readonly typeField: HTMLElement;\n  private readonly outsetButton: HTMLElement;\n  private readonly insetButton: HTMLElement;\n  private xInput: HTMLInputElement;\n  private yInput: HTMLInputElement;\n  private xySlider: HTMLCanvasElement;\n  private halfCanvasSize: number;\n  private readonly innerCanvasSize: number;\n  private blurInput: HTMLInputElement;\n  private blurSlider: HTMLInputElement;\n  private readonly spreadField: HTMLElement;\n  private spreadInput: HTMLInputElement;\n  private spreadSlider: HTMLInputElement;\n  private model!: CSSShadowModel;\n  private canvasOrigin!: UI.Geometry.Point;\n  private changedElement?: HTMLInputElement|null;\n  constructor() {\n    super(true);\n    this.contentElement.tabIndex = 0;\n    this.contentElement.setAttribute(\n        'jslog', `${VisualLogging.dialog('cssShadowEditor').parent('mapped').track({keydown: 'Enter|Escape'})}`);\n    this.setDefaultFocusedElement(this.contentElement);\n\n    this.typeField = this.contentElement.createChild('div', 'shadow-editor-field shadow-editor-flex-field');\n    this.typeField.createChild('label', 'shadow-editor-label').textContent = i18nString(UIStrings.type);\n    this.outsetButton = this.typeField.createChild('button', 'shadow-editor-button-left');\n    this.outsetButton.textContent = i18n.i18n.lockedString('Outset');\n    this.outsetButton.addEventListener('click', this.onButtonClick.bind(this), false);\n    this.insetButton = this.typeField.createChild('button', 'shadow-editor-button-right');\n    this.insetButton.textContent = i18n.i18n.lockedString('Inset');\n    this.insetButton.addEventListener('click', this.onButtonClick.bind(this), false);\n\n    const xField = this.contentElement.createChild('div', 'shadow-editor-field');\n    this.xInput = this.createTextInput(xField, i18nString(UIStrings.xOffset), 'x-offset');\n    const yField = this.contentElement.createChild('div', 'shadow-editor-field');\n    this.yInput = this.createTextInput(yField, i18nString(UIStrings.yOffset), 'y-offset');\n    this.xySlider = (xField.createChild('canvas', 'shadow-editor-2D-slider') as HTMLCanvasElement);\n    this.xySlider.setAttribute('jslog', `${VisualLogging.slider('xy').track({\n                                 click: true,\n                                 drag: true,\n                                 keydown: 'ArrowUp|ArrowDown|ArrowLeft|ArrowRight',\n                               })}`);\n    this.xySlider.width = canvasSize;\n    this.xySlider.height = canvasSize;\n    this.xySlider.tabIndex = -1;\n    this.halfCanvasSize = canvasSize / 2;\n    this.innerCanvasSize = this.halfCanvasSize - sliderThumbRadius;\n    UI.UIUtils.installDragHandle(this.xySlider, this.dragStart.bind(this), this.dragMove.bind(this), null, 'default');\n    this.xySlider.addEventListener('keydown', this.onCanvasArrowKey.bind(this), false);\n    this.xySlider.addEventListener('blur', this.onCanvasBlur.bind(this), false);\n\n    const blurField =\n        this.contentElement.createChild('div', 'shadow-editor-field shadow-editor-flex-field shadow-editor-blur-field');\n    this.blurInput = this.createTextInput(blurField, i18nString(UIStrings.blur), 'blur');\n    this.blurSlider = this.createSlider(blurField, 'blur');\n\n    this.spreadField = this.contentElement.createChild('div', 'shadow-editor-field shadow-editor-flex-field');\n    this.spreadInput = this.createTextInput(this.spreadField, i18nString(UIStrings.spread), 'spread');\n    this.spreadSlider = this.createSlider(this.spreadField, 'spread');\n  }\n\n  private createTextInput(field: Element, propertyName: string, jslogContext: string): HTMLInputElement {\n    const label = field.createChild('label', 'shadow-editor-label');\n    label.textContent = propertyName;\n    label.setAttribute('for', propertyName);\n    const textInput = UI.UIUtils.createInput('shadow-editor-text-input', 'text');\n    field.appendChild(textInput);\n    textInput.id = propertyName;\n    textInput.addEventListener('keydown', this.handleValueModification.bind(this), false);\n    textInput.addEventListener('wheel', this.handleValueModification.bind(this), false);\n    textInput.addEventListener('input', this.onTextInput.bind(this), false);\n    textInput.addEventListener('blur', this.onTextBlur.bind(this), false);\n    textInput.setAttribute(\n        'jslog', `${VisualLogging.value().track({change: true, keydown: 'ArrowUp|ArrowDown'}).context(jslogContext)}`);\n    return textInput;\n  }\n\n  private createSlider(field: Element, jslogContext: string): HTMLInputElement {\n    const slider = UI.UIUtils.createSlider(0, maxRange, -1);\n    slider.addEventListener('input', this.onSliderInput.bind(this), false);\n    slider.setAttribute('jslog', `${VisualLogging.slider().track({click: true, drag: true}).context(jslogContext)}`);\n    field.appendChild(slider);\n    return slider as HTMLInputElement;\n  }\n\n  override wasShown(): void {\n    this.registerCSSFiles([cssShadowEditorStyles]);\n    this.updateUI();\n  }\n\n  setModel(model: CSSShadowModel): void {\n    this.model = model;\n    this.typeField.classList.toggle('hidden', !model.isBoxShadow());\n    this.spreadField.classList.toggle('hidden', !model.isBoxShadow());\n    this.updateUI();\n  }\n\n  private updateUI(): void {\n    this.updateButtons();\n    this.xInput.value = this.model.offsetX().asCSSText();\n    this.yInput.value = this.model.offsetY().asCSSText();\n    this.blurInput.value = this.model.blurRadius().asCSSText();\n    this.spreadInput.value = this.model.spreadRadius().asCSSText();\n    this.blurSlider.value = this.model.blurRadius().amount.toString();\n    this.spreadSlider.value = this.model.spreadRadius().amount.toString();\n    this.updateCanvas(false);\n  }\n\n  private updateButtons(): void {\n    this.insetButton.classList.toggle('enabled', this.model.inset());\n    this.outsetButton.classList.toggle('enabled', !this.model.inset());\n  }\n\n  private updateCanvas(drawFocus: boolean): void {\n    const context = this.xySlider.getContext('2d');\n    if (!context) {\n      throw new Error('Unable to obtain canvas context');\n    }\n    context.clearRect(0, 0, this.xySlider.width, this.xySlider.height);\n\n    // Draw dashed axes.\n    context.save();\n    context.setLineDash([1, 1]);\n    context.strokeStyle = 'rgba(210, 210, 210, 0.8)';\n    context.beginPath();\n    context.moveTo(this.halfCanvasSize, 0);\n    context.lineTo(this.halfCanvasSize, canvasSize);\n    context.moveTo(0, this.halfCanvasSize);\n    context.lineTo(canvasSize, this.halfCanvasSize);\n    context.stroke();\n    context.restore();\n\n    const thumbPoint = this.sliderThumbPosition();\n    // Draw 2D slider line.\n    context.save();\n    context.translate(this.halfCanvasSize, this.halfCanvasSize);\n    context.lineWidth = 2;\n    context.strokeStyle = 'rgba(130, 130, 130, 0.75)';\n    context.beginPath();\n    context.moveTo(0, 0);\n    context.lineTo(thumbPoint.x, thumbPoint.y);\n    context.stroke();\n    // Draw 2D slider thumb.\n    if (drawFocus) {\n      context.beginPath();\n      context.fillStyle = 'rgba(66, 133, 244, 0.4)';\n      context.arc(thumbPoint.x, thumbPoint.y, sliderThumbRadius + 2, 0, 2 * Math.PI);\n      context.fill();\n    }\n    context.beginPath();\n    context.fillStyle = '#4285F4';\n    context.arc(thumbPoint.x, thumbPoint.y, sliderThumbRadius, 0, 2 * Math.PI);\n    context.fill();\n    context.restore();\n  }\n\n  private onButtonClick(event: Event): void {\n    const insetClicked = (event.currentTarget === this.insetButton);\n    if (insetClicked && this.model.inset() || !insetClicked && !this.model.inset()) {\n      return;\n    }\n    this.model.setInset(insetClicked);\n    this.updateButtons();\n    this.dispatchEventToListeners(Events.SHADOW_CHANGED, this.model);\n  }\n\n  private handleValueModification(event: Event): void {\n    const target = (event.currentTarget as HTMLInputElement);\n    const modifiedValue = UI.UIUtils.createReplacementString(target.value, event, customNumberHandler);\n    if (!modifiedValue) {\n      return;\n    }\n    const length = CSSLength.parse(modifiedValue);\n    if (!length) {\n      return;\n    }\n    if (event.currentTarget === this.blurInput && length.amount < 0) {\n      length.amount = 0;\n    }\n    target.value = length.asCSSText();\n    target.selectionStart = 0;\n    target.selectionEnd = target.value.length;\n    this.onTextInput(event);\n    event.consume(true);\n\n    function customNumberHandler(prefix: string, number: number, suffix: string): string {\n      if (!suffix.length) {\n        suffix = defaultUnit;\n      }\n      return prefix + number + suffix;\n    }\n  }\n\n  private onTextInput(event: Event): void {\n    const currentTarget = (event.currentTarget as HTMLInputElement);\n    this.changedElement = currentTarget;\n    this.changedElement.classList.remove('invalid');\n    const length = CSSLength.parse(currentTarget.value);\n    if (!length || currentTarget === this.blurInput && length.amount < 0) {\n      return;\n    }\n    if (currentTarget === this.xInput) {\n      this.model.setOffsetX(length);\n      this.updateCanvas(false);\n    } else if (currentTarget === this.yInput) {\n      this.model.setOffsetY(length);\n      this.updateCanvas(false);\n    } else if (currentTarget === this.blurInput) {\n      this.model.setBlurRadius(length);\n      this.blurSlider.value = length.amount.toString();\n    } else if (currentTarget === this.spreadInput) {\n      this.model.setSpreadRadius(length);\n      this.spreadSlider.value = length.amount.toString();\n    }\n    this.dispatchEventToListeners(Events.SHADOW_CHANGED, this.model);\n  }\n\n  private onTextBlur(): void {\n    if (!this.changedElement) {\n      return;\n    }\n    let length: (CSSLength|null)|CSSLength =\n        !this.changedElement.value.trim() ? CSSLength.zero() : CSSLength.parse(this.changedElement.value);\n    if (!length) {\n      length = CSSLength.parse(this.changedElement.value + defaultUnit);\n    }\n    if (!length) {\n      this.changedElement.classList.add('invalid');\n      this.changedElement = null;\n      return;\n    }\n    if (this.changedElement === this.xInput) {\n      this.model.setOffsetX(length);\n      this.xInput.value = length.asCSSText();\n      this.updateCanvas(false);\n    } else if (this.changedElement === this.yInput) {\n      this.model.setOffsetY(length);\n      this.yInput.value = length.asCSSText();\n      this.updateCanvas(false);\n    } else if (this.changedElement === this.blurInput) {\n      if (length.amount < 0) {\n        length = CSSLength.zero();\n      }\n      this.model.setBlurRadius(length);\n      this.blurInput.value = length.asCSSText();\n      this.blurSlider.value = length.amount.toString();\n    } else if (this.changedElement === this.spreadInput) {\n      this.model.setSpreadRadius(length);\n      this.spreadInput.value = length.asCSSText();\n      this.spreadSlider.value = length.amount.toString();\n    }\n    this.changedElement = null;\n    this.dispatchEventToListeners(Events.SHADOW_CHANGED, this.model);\n  }\n\n  private onSliderInput(event: Event): void {\n    if (event.currentTarget === this.blurSlider) {\n      this.model.setBlurRadius(\n          new CSSLength(Number(this.blurSlider.value), this.model.blurRadius().unit || defaultUnit));\n      this.blurInput.value = this.model.blurRadius().asCSSText();\n      this.blurInput.classList.remove('invalid');\n    } else if (event.currentTarget === this.spreadSlider) {\n      this.model.setSpreadRadius(\n          new CSSLength(Number(this.spreadSlider.value), this.model.spreadRadius().unit || defaultUnit));\n      this.spreadInput.value = this.model.spreadRadius().asCSSText();\n      this.spreadInput.classList.remove('invalid');\n    }\n    this.dispatchEventToListeners(Events.SHADOW_CHANGED, this.model);\n  }\n\n  private dragStart(event: MouseEvent): boolean {\n    this.xySlider.focus();\n    this.updateCanvas(true);\n    this.canvasOrigin = new UI.Geometry.Point(\n        this.xySlider.getBoundingClientRect().left + this.halfCanvasSize,\n        this.xySlider.getBoundingClientRect().top + this.halfCanvasSize);\n    const clickedPoint = new UI.Geometry.Point(event.x - this.canvasOrigin.x, event.y - this.canvasOrigin.y);\n    const thumbPoint = this.sliderThumbPosition();\n    if (clickedPoint.distanceTo(thumbPoint) >= sliderThumbRadius) {\n      this.dragMove(event);\n    }\n    return true;\n  }\n\n  private dragMove(event: MouseEvent): void {\n    let point: UI.Geometry.Point = new UI.Geometry.Point(event.x - this.canvasOrigin.x, event.y - this.canvasOrigin.y);\n    if (event.shiftKey) {\n      point = this.snapToClosestDirection(point);\n    }\n    const constrainedPoint = this.constrainPoint(point, this.innerCanvasSize);\n    const newX = Math.round((constrainedPoint.x / this.innerCanvasSize) * maxRange);\n    const newY = Math.round((constrainedPoint.y / this.innerCanvasSize) * maxRange);\n\n    if (event.shiftKey) {\n      this.model.setOffsetX(new CSSLength(newX, this.model.offsetX().unit || defaultUnit));\n      this.model.setOffsetY(new CSSLength(newY, this.model.offsetY().unit || defaultUnit));\n    } else {\n      if (!event.altKey) {\n        this.model.setOffsetX(new CSSLength(newX, this.model.offsetX().unit || defaultUnit));\n      }\n      if (!UI.KeyboardShortcut.KeyboardShortcut.eventHasCtrlEquivalentKey(event)) {\n        this.model.setOffsetY(new CSSLength(newY, this.model.offsetY().unit || defaultUnit));\n      }\n    }\n    this.xInput.value = this.model.offsetX().asCSSText();\n    this.yInput.value = this.model.offsetY().asCSSText();\n    this.xInput.classList.remove('invalid');\n    this.yInput.classList.remove('invalid');\n    this.updateCanvas(true);\n    this.dispatchEventToListeners(Events.SHADOW_CHANGED, this.model);\n  }\n\n  private onCanvasBlur(): void {\n    this.updateCanvas(false);\n  }\n\n  private onCanvasArrowKey(event: Event): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    let shiftX = 0;\n    let shiftY = 0;\n    if (keyboardEvent.key === 'ArrowRight') {\n      shiftX = 1;\n    } else if (keyboardEvent.key === 'ArrowLeft') {\n      shiftX = -1;\n    } else if (keyboardEvent.key === 'ArrowUp') {\n      shiftY = -1;\n    } else if (keyboardEvent.key === 'ArrowDown') {\n      shiftY = 1;\n    }\n\n    if (!shiftX && !shiftY) {\n      return;\n    }\n    event.consume(true);\n\n    if (shiftX) {\n      const offsetX = this.model.offsetX();\n      const newAmount = Platform.NumberUtilities.clamp(offsetX.amount + shiftX, -maxRange, maxRange);\n      if (newAmount === offsetX.amount) {\n        return;\n      }\n      this.model.setOffsetX(new CSSLength(newAmount, offsetX.unit || defaultUnit));\n      this.xInput.value = this.model.offsetX().asCSSText();\n      this.xInput.classList.remove('invalid');\n    }\n    if (shiftY) {\n      const offsetY = this.model.offsetY();\n      const newAmount = Platform.NumberUtilities.clamp(offsetY.amount + shiftY, -maxRange, maxRange);\n      if (newAmount === offsetY.amount) {\n        return;\n      }\n      this.model.setOffsetY(new CSSLength(newAmount, offsetY.unit || defaultUnit));\n      this.yInput.value = this.model.offsetY().asCSSText();\n      this.yInput.classList.remove('invalid');\n    }\n    this.updateCanvas(true);\n    this.dispatchEventToListeners(Events.SHADOW_CHANGED, this.model);\n  }\n\n  private constrainPoint(point: UI.Geometry.Point, max: number): UI.Geometry.Point {\n    if (Math.abs(point.x) <= max && Math.abs(point.y) <= max) {\n      return new UI.Geometry.Point(point.x, point.y);\n    }\n    return point.scale(max / Math.max(Math.abs(point.x), Math.abs(point.y)));\n  }\n\n  private snapToClosestDirection(point: UI.Geometry.Point): UI.Geometry.Point {\n    let minDistance: number = Number.MAX_VALUE;\n    let closestPoint: UI.Geometry.Point = point;\n\n    const directions = [\n      new UI.Geometry.Point(0, -1), new UI.Geometry.Point(1, -1), new UI.Geometry.Point(1, 0),\n      new UI.Geometry.Point(1, 1),  // Southeast\n    ];\n\n    for (const direction of directions) {\n      const projection = point.projectOn(direction);\n      const distance = point.distanceTo(projection);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestPoint = projection;\n      }\n    }\n\n    return closestPoint;\n  }\n\n  private sliderThumbPosition(): UI.Geometry.Point {\n    const x = (this.model.offsetX().amount / maxRange) * this.innerCanvasSize;\n    const y = (this.model.offsetY().amount / maxRange) * this.innerCanvasSize;\n    return this.constrainPoint(new UI.Geometry.Point(x, y), this.innerCanvasSize);\n  }\n}\n\nexport const enum Events {\n  SHADOW_CHANGED = 'ShadowChanged',\n}\n\nexport type EventTypes = {\n  [Events.SHADOW_CHANGED]: CSSShadowModel,\n};\n"],
  "mappings": ";AAIA,YAAY,YAAY;AACxB,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,YAAY,mBAAmB;AAC/B,YAAY,QAAQ;AAEpB,OAAO,2BAA2B;AAElC,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,MAAM;AAAA;AAAA;AAAA;AAAA,EAIN,SAAS;AAAA;AAAA;AAAA;AAAA,EAIT,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKT,MAAM;AAAA;AAAA;AAAA;AAAA,EAIN,QAAQ;AACV;AACA,MAAM,OAAO,KAAK,KAAK,kBAAkB,yDAAyD,SAAS;AAC3G,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAEpE,MAAM,WAAmB;AACzB,MAAM,cAAsB;AAC5B,MAAM,oBAA4B;AAClC,MAAM,aAAqB;AAgB3B,MAAM,mBAAoB,WAAmB;AAC3C,QAAM,SAAS;AACf,QAAM,OAAO;AACb,QAAM,OAAO;AACb,SAAO,IAAI,OAAO,SAAS,OAAO,MAAM,MAAM,IAAI,EAAE;AACtD,EAAG;AAEI,aAAM,UAAU;AAAA,EACrB;AAAA,EACA;AAAA,EACA,YAAY,QAAgB,MAAc;AACxC,SAAK,SAAS;AACd,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,OAAO,MAAM,MAA8B;AACzC,UAAM,cAAc,IAAI,OAAO,SAAS,mBAAmB,MAAM,GAAG;AACpE,UAAM,QAAQ,KAAK,MAAM,WAAW;AACpC,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AACA,QAAI,MAAM,SAAS,KAAK,MAAM,CAAC,GAAG;AAChC,aAAO,IAAI,UAAU,WAAW,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,IACrD;AACA,WAAO,UAAU,KAAK;AAAA,EACxB;AAAA,EAEA,OAAO,OAAkB;AACvB,WAAO,IAAI,UAAU,GAAG,EAAE;AAAA,EAC5B;AAAA,EAEA,YAAoB;AAClB,WAAO,KAAK,SAAS,KAAK;AAAA,EAC5B;AACF;AAEO,aAAM,wBAAwB,OAAO,cAAc;AAAA,EACtD,GAAG,OAAO;AAAI,EAAE;AAAA,EACD;AAAA,EACA;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACS;AAAA,EACT;AAAA,EACA;AAAA,EACS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACR,cAAc;AACZ,UAAM,IAAI;AACV,SAAK,eAAe,WAAW;AAC/B,SAAK,eAAe;AAAA,MAChB;AAAA,MAAS,GAAG,cAAc,OAAO,iBAAiB,EAAE,OAAO,QAAQ,EAAE,MAAM,EAAC,SAAS,eAAc,CAAC,CAAC;AAAA,IAAE;AAC3G,SAAK,yBAAyB,KAAK,cAAc;AAEjD,SAAK,YAAY,KAAK,eAAe,YAAY,OAAO,8CAA8C;AACtG,SAAK,UAAU,YAAY,SAAS,qBAAqB,EAAE,cAAc,WAAW,UAAU,IAAI;AAClG,SAAK,eAAe,KAAK,UAAU,YAAY,UAAU,2BAA2B;AACpF,SAAK,aAAa,cAAc,KAAK,KAAK,aAAa,QAAQ;AAC/D,SAAK,aAAa,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,GAAG,KAAK;AAChF,SAAK,cAAc,KAAK,UAAU,YAAY,UAAU,4BAA4B;AACpF,SAAK,YAAY,cAAc,KAAK,KAAK,aAAa,OAAO;AAC7D,SAAK,YAAY,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,GAAG,KAAK;AAE/E,UAAM,SAAS,KAAK,eAAe,YAAY,OAAO,qBAAqB;AAC3E,SAAK,SAAS,KAAK,gBAAgB,QAAQ,WAAW,UAAU,OAAO,GAAG,UAAU;AACpF,UAAM,SAAS,KAAK,eAAe,YAAY,OAAO,qBAAqB;AAC3E,SAAK,SAAS,KAAK,gBAAgB,QAAQ,WAAW,UAAU,OAAO,GAAG,UAAU;AACpF,SAAK,WAAY,OAAO,YAAY,UAAU,yBAAyB;AACvE,SAAK,SAAS,aAAa,SAAS,GAAG,cAAc,OAAO,IAAI,EAAE,MAAM;AAAA,MAC3C,OAAO;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC,CAAC,EAAE;AAC/B,SAAK,SAAS,QAAQ;AACtB,SAAK,SAAS,SAAS;AACvB,SAAK,SAAS,WAAW;AACzB,SAAK,iBAAiB,aAAa;AACnC,SAAK,kBAAkB,KAAK,iBAAiB;AAC7C,OAAG,QAAQ,kBAAkB,KAAK,UAAU,KAAK,UAAU,KAAK,IAAI,GAAG,KAAK,SAAS,KAAK,IAAI,GAAG,MAAM,SAAS;AAChH,SAAK,SAAS,iBAAiB,WAAW,KAAK,iBAAiB,KAAK,IAAI,GAAG,KAAK;AACjF,SAAK,SAAS,iBAAiB,QAAQ,KAAK,aAAa,KAAK,IAAI,GAAG,KAAK;AAE1E,UAAM,YACF,KAAK,eAAe,YAAY,OAAO,uEAAuE;AAClH,SAAK,YAAY,KAAK,gBAAgB,WAAW,WAAW,UAAU,IAAI,GAAG,MAAM;AACnF,SAAK,aAAa,KAAK,aAAa,WAAW,MAAM;AAErD,SAAK,cAAc,KAAK,eAAe,YAAY,OAAO,8CAA8C;AACxG,SAAK,cAAc,KAAK,gBAAgB,KAAK,aAAa,WAAW,UAAU,MAAM,GAAG,QAAQ;AAChG,SAAK,eAAe,KAAK,aAAa,KAAK,aAAa,QAAQ;AAAA,EAClE;AAAA,EAEQ,gBAAgB,OAAgB,cAAsB,cAAwC;AACpG,UAAM,QAAQ,MAAM,YAAY,SAAS,qBAAqB;AAC9D,UAAM,cAAc;AACpB,UAAM,aAAa,OAAO,YAAY;AACtC,UAAM,YAAY,GAAG,QAAQ,YAAY,4BAA4B,MAAM;AAC3E,UAAM,YAAY,SAAS;AAC3B,cAAU,KAAK;AACf,cAAU,iBAAiB,WAAW,KAAK,wBAAwB,KAAK,IAAI,GAAG,KAAK;AACpF,cAAU,iBAAiB,SAAS,KAAK,wBAAwB,KAAK,IAAI,GAAG,KAAK;AAClF,cAAU,iBAAiB,SAAS,KAAK,YAAY,KAAK,IAAI,GAAG,KAAK;AACtE,cAAU,iBAAiB,QAAQ,KAAK,WAAW,KAAK,IAAI,GAAG,KAAK;AACpE,cAAU;AAAA,MACN;AAAA,MAAS,GAAG,cAAc,MAAM,EAAE,MAAM,EAAC,QAAQ,MAAM,SAAS,oBAAmB,CAAC,EAAE,QAAQ,YAAY,CAAC;AAAA,IAAE;AACjH,WAAO;AAAA,EACT;AAAA,EAEQ,aAAa,OAAgB,cAAwC;AAC3E,UAAM,SAAS,GAAG,QAAQ,aAAa,GAAG,UAAU,EAAE;AACtD,WAAO,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,GAAG,KAAK;AACrE,WAAO,aAAa,SAAS,GAAG,cAAc,OAAO,EAAE,MAAM,EAAC,OAAO,MAAM,MAAM,KAAI,CAAC,EAAE,QAAQ,YAAY,CAAC,EAAE;AAC/G,UAAM,YAAY,MAAM;AACxB,WAAO;AAAA,EACT;AAAA,EAES,WAAiB;AACxB,SAAK,iBAAiB,CAAC,qBAAqB,CAAC;AAC7C,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,SAAS,OAA6B;AACpC,SAAK,QAAQ;AACb,SAAK,UAAU,UAAU,OAAO,UAAU,CAAC,MAAM,YAAY,CAAC;AAC9D,SAAK,YAAY,UAAU,OAAO,UAAU,CAAC,MAAM,YAAY,CAAC;AAChE,SAAK,SAAS;AAAA,EAChB;AAAA,EAEQ,WAAiB;AACvB,SAAK,cAAc;AACnB,SAAK,OAAO,QAAQ,KAAK,MAAM,QAAQ,EAAE,UAAU;AACnD,SAAK,OAAO,QAAQ,KAAK,MAAM,QAAQ,EAAE,UAAU;AACnD,SAAK,UAAU,QAAQ,KAAK,MAAM,WAAW,EAAE,UAAU;AACzD,SAAK,YAAY,QAAQ,KAAK,MAAM,aAAa,EAAE,UAAU;AAC7D,SAAK,WAAW,QAAQ,KAAK,MAAM,WAAW,EAAE,OAAO,SAAS;AAChE,SAAK,aAAa,QAAQ,KAAK,MAAM,aAAa,EAAE,OAAO,SAAS;AACpE,SAAK,aAAa,KAAK;AAAA,EACzB;AAAA,EAEQ,gBAAsB;AAC5B,SAAK,YAAY,UAAU,OAAO,WAAW,KAAK,MAAM,MAAM,CAAC;AAC/D,SAAK,aAAa,UAAU,OAAO,WAAW,CAAC,KAAK,MAAM,MAAM,CAAC;AAAA,EACnE;AAAA,EAEQ,aAAa,WAA0B;AAC7C,UAAM,UAAU,KAAK,SAAS,WAAW,IAAI;AAC7C,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACnD;AACA,YAAQ,UAAU,GAAG,GAAG,KAAK,SAAS,OAAO,KAAK,SAAS,MAAM;AAGjE,YAAQ,KAAK;AACb,YAAQ,YAAY,CAAC,GAAG,CAAC,CAAC;AAC1B,YAAQ,cAAc;AACtB,YAAQ,UAAU;AAClB,YAAQ,OAAO,KAAK,gBAAgB,CAAC;AACrC,YAAQ,OAAO,KAAK,gBAAgB,UAAU;AAC9C,YAAQ,OAAO,GAAG,KAAK,cAAc;AACrC,YAAQ,OAAO,YAAY,KAAK,cAAc;AAC9C,YAAQ,OAAO;AACf,YAAQ,QAAQ;AAEhB,UAAM,aAAa,KAAK,oBAAoB;AAE5C,YAAQ,KAAK;AACb,YAAQ,UAAU,KAAK,gBAAgB,KAAK,cAAc;AAC1D,YAAQ,YAAY;AACpB,YAAQ,cAAc;AACtB,YAAQ,UAAU;AAClB,YAAQ,OAAO,GAAG,CAAC;AACnB,YAAQ,OAAO,WAAW,GAAG,WAAW,CAAC;AACzC,YAAQ,OAAO;AAEf,QAAI,WAAW;AACb,cAAQ,UAAU;AAClB,cAAQ,YAAY;AACpB,cAAQ,IAAI,WAAW,GAAG,WAAW,GAAG,oBAAoB,GAAG,GAAG,IAAI,KAAK,EAAE;AAC7E,cAAQ,KAAK;AAAA,IACf;AACA,YAAQ,UAAU;AAClB,YAAQ,YAAY;AACpB,YAAQ,IAAI,WAAW,GAAG,WAAW,GAAG,mBAAmB,GAAG,IAAI,KAAK,EAAE;AACzE,YAAQ,KAAK;AACb,YAAQ,QAAQ;AAAA,EAClB;AAAA,EAEQ,cAAc,OAAoB;AACxC,UAAM,eAAgB,MAAM,kBAAkB,KAAK;AACnD,QAAI,gBAAgB,KAAK,MAAM,MAAM,KAAK,CAAC,gBAAgB,CAAC,KAAK,MAAM,MAAM,GAAG;AAC9E;AAAA,IACF;AACA,SAAK,MAAM,SAAS,YAAY;AAChC,SAAK,cAAc;AACnB,SAAK,yBAAyB,sCAAuB,KAAK,KAAK;AAAA,EACjE;AAAA,EAEQ,wBAAwB,OAAoB;AAClD,UAAM,SAAU,MAAM;AACtB,UAAM,gBAAgB,GAAG,QAAQ,wBAAwB,OAAO,OAAO,OAAO,mBAAmB;AACjG,QAAI,CAAC,eAAe;AAClB;AAAA,IACF;AACA,UAAM,SAAS,UAAU,MAAM,aAAa;AAC5C,QAAI,CAAC,QAAQ;AACX;AAAA,IACF;AACA,QAAI,MAAM,kBAAkB,KAAK,aAAa,OAAO,SAAS,GAAG;AAC/D,aAAO,SAAS;AAAA,IAClB;AACA,WAAO,QAAQ,OAAO,UAAU;AAChC,WAAO,iBAAiB;AACxB,WAAO,eAAe,OAAO,MAAM;AACnC,SAAK,YAAY,KAAK;AACtB,UAAM,QAAQ,IAAI;AAElB,aAAS,oBAAoB,QAAgB,QAAgB,QAAwB;AACnF,UAAI,CAAC,OAAO,QAAQ;AAClB,iBAAS;AAAA,MACX;AACA,aAAO,SAAS,SAAS;AAAA,IAC3B;AAAA,EACF;AAAA,EAEQ,YAAY,OAAoB;AACtC,UAAM,gBAAiB,MAAM;AAC7B,SAAK,iBAAiB;AACtB,SAAK,eAAe,UAAU,OAAO,SAAS;AAC9C,UAAM,SAAS,UAAU,MAAM,cAAc,KAAK;AAClD,QAAI,CAAC,UAAU,kBAAkB,KAAK,aAAa,OAAO,SAAS,GAAG;AACpE;AAAA,IACF;AACA,QAAI,kBAAkB,KAAK,QAAQ;AACjC,WAAK,MAAM,WAAW,MAAM;AAC5B,WAAK,aAAa,KAAK;AAAA,IACzB,WAAW,kBAAkB,KAAK,QAAQ;AACxC,WAAK,MAAM,WAAW,MAAM;AAC5B,WAAK,aAAa,KAAK;AAAA,IACzB,WAAW,kBAAkB,KAAK,WAAW;AAC3C,WAAK,MAAM,cAAc,MAAM;AAC/B,WAAK,WAAW,QAAQ,OAAO,OAAO,SAAS;AAAA,IACjD,WAAW,kBAAkB,KAAK,aAAa;AAC7C,WAAK,MAAM,gBAAgB,MAAM;AACjC,WAAK,aAAa,QAAQ,OAAO,OAAO,SAAS;AAAA,IACnD;AACA,SAAK,yBAAyB,sCAAuB,KAAK,KAAK;AAAA,EACjE;AAAA,EAEQ,aAAmB;AACzB,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AACA,QAAI,SACA,CAAC,KAAK,eAAe,MAAM,KAAK,IAAI,UAAU,KAAK,IAAI,UAAU,MAAM,KAAK,eAAe,KAAK;AACpG,QAAI,CAAC,QAAQ;AACX,eAAS,UAAU,MAAM,KAAK,eAAe,QAAQ,WAAW;AAAA,IAClE;AACA,QAAI,CAAC,QAAQ;AACX,WAAK,eAAe,UAAU,IAAI,SAAS;AAC3C,WAAK,iBAAiB;AACtB;AAAA,IACF;AACA,QAAI,KAAK,mBAAmB,KAAK,QAAQ;AACvC,WAAK,MAAM,WAAW,MAAM;AAC5B,WAAK,OAAO,QAAQ,OAAO,UAAU;AACrC,WAAK,aAAa,KAAK;AAAA,IACzB,WAAW,KAAK,mBAAmB,KAAK,QAAQ;AAC9C,WAAK,MAAM,WAAW,MAAM;AAC5B,WAAK,OAAO,QAAQ,OAAO,UAAU;AACrC,WAAK,aAAa,KAAK;AAAA,IACzB,WAAW,KAAK,mBAAmB,KAAK,WAAW;AACjD,UAAI,OAAO,SAAS,GAAG;AACrB,iBAAS,UAAU,KAAK;AAAA,MAC1B;AACA,WAAK,MAAM,cAAc,MAAM;AAC/B,WAAK,UAAU,QAAQ,OAAO,UAAU;AACxC,WAAK,WAAW,QAAQ,OAAO,OAAO,SAAS;AAAA,IACjD,WAAW,KAAK,mBAAmB,KAAK,aAAa;AACnD,WAAK,MAAM,gBAAgB,MAAM;AACjC,WAAK,YAAY,QAAQ,OAAO,UAAU;AAC1C,WAAK,aAAa,QAAQ,OAAO,OAAO,SAAS;AAAA,IACnD;AACA,SAAK,iBAAiB;AACtB,SAAK,yBAAyB,sCAAuB,KAAK,KAAK;AAAA,EACjE;AAAA,EAEQ,cAAc,OAAoB;AACxC,QAAI,MAAM,kBAAkB,KAAK,YAAY;AAC3C,WAAK,MAAM;AAAA,QACP,IAAI,UAAU,OAAO,KAAK,WAAW,KAAK,GAAG,KAAK,MAAM,WAAW,EAAE,QAAQ,WAAW;AAAA,MAAC;AAC7F,WAAK,UAAU,QAAQ,KAAK,MAAM,WAAW,EAAE,UAAU;AACzD,WAAK,UAAU,UAAU,OAAO,SAAS;AAAA,IAC3C,WAAW,MAAM,kBAAkB,KAAK,cAAc;AACpD,WAAK,MAAM;AAAA,QACP,IAAI,UAAU,OAAO,KAAK,aAAa,KAAK,GAAG,KAAK,MAAM,aAAa,EAAE,QAAQ,WAAW;AAAA,MAAC;AACjG,WAAK,YAAY,QAAQ,KAAK,MAAM,aAAa,EAAE,UAAU;AAC7D,WAAK,YAAY,UAAU,OAAO,SAAS;AAAA,IAC7C;AACA,SAAK,yBAAyB,sCAAuB,KAAK,KAAK;AAAA,EACjE;AAAA,EAEQ,UAAU,OAA4B;AAC5C,SAAK,SAAS,MAAM;AACpB,SAAK,aAAa,IAAI;AACtB,SAAK,eAAe,IAAI,GAAG,SAAS;AAAA,MAChC,KAAK,SAAS,sBAAsB,EAAE,OAAO,KAAK;AAAA,MAClD,KAAK,SAAS,sBAAsB,EAAE,MAAM,KAAK;AAAA,IAAc;AACnE,UAAM,eAAe,IAAI,GAAG,SAAS,MAAM,MAAM,IAAI,KAAK,aAAa,GAAG,MAAM,IAAI,KAAK,aAAa,CAAC;AACvG,UAAM,aAAa,KAAK,oBAAoB;AAC5C,QAAI,aAAa,WAAW,UAAU,KAAK,mBAAmB;AAC5D,WAAK,SAAS,KAAK;AAAA,IACrB;AACA,WAAO;AAAA,EACT;AAAA,EAEQ,SAAS,OAAyB;AACxC,QAAI,QAA2B,IAAI,GAAG,SAAS,MAAM,MAAM,IAAI,KAAK,aAAa,GAAG,MAAM,IAAI,KAAK,aAAa,CAAC;AACjH,QAAI,MAAM,UAAU;AAClB,cAAQ,KAAK,uBAAuB,KAAK;AAAA,IAC3C;AACA,UAAM,mBAAmB,KAAK,eAAe,OAAO,KAAK,eAAe;AACxE,UAAM,OAAO,KAAK,MAAO,iBAAiB,IAAI,KAAK,kBAAmB,QAAQ;AAC9E,UAAM,OAAO,KAAK,MAAO,iBAAiB,IAAI,KAAK,kBAAmB,QAAQ;AAE9E,QAAI,MAAM,UAAU;AAClB,WAAK,MAAM,WAAW,IAAI,UAAU,MAAM,KAAK,MAAM,QAAQ,EAAE,QAAQ,WAAW,CAAC;AACnF,WAAK,MAAM,WAAW,IAAI,UAAU,MAAM,KAAK,MAAM,QAAQ,EAAE,QAAQ,WAAW,CAAC;AAAA,IACrF,OAAO;AACL,UAAI,CAAC,MAAM,QAAQ;AACjB,aAAK,MAAM,WAAW,IAAI,UAAU,MAAM,KAAK,MAAM,QAAQ,EAAE,QAAQ,WAAW,CAAC;AAAA,MACrF;AACA,UAAI,CAAC,GAAG,iBAAiB,iBAAiB,0BAA0B,KAAK,GAAG;AAC1E,aAAK,MAAM,WAAW,IAAI,UAAU,MAAM,KAAK,MAAM,QAAQ,EAAE,QAAQ,WAAW,CAAC;AAAA,MACrF;AAAA,IACF;AACA,SAAK,OAAO,QAAQ,KAAK,MAAM,QAAQ,EAAE,UAAU;AACnD,SAAK,OAAO,QAAQ,KAAK,MAAM,QAAQ,EAAE,UAAU;AACnD,SAAK,OAAO,UAAU,OAAO,SAAS;AACtC,SAAK,OAAO,UAAU,OAAO,SAAS;AACtC,SAAK,aAAa,IAAI;AACtB,SAAK,yBAAyB,sCAAuB,KAAK,KAAK;AAAA,EACjE;AAAA,EAEQ,eAAqB;AAC3B,SAAK,aAAa,KAAK;AAAA,EACzB;AAAA,EAEQ,iBAAiB,OAAoB;AAC3C,UAAM,gBAAiB;AACvB,QAAI,SAAS;AACb,QAAI,SAAS;AACb,QAAI,cAAc,QAAQ,cAAc;AACtC,eAAS;AAAA,IACX,WAAW,cAAc,QAAQ,aAAa;AAC5C,eAAS;AAAA,IACX,WAAW,cAAc,QAAQ,WAAW;AAC1C,eAAS;AAAA,IACX,WAAW,cAAc,QAAQ,aAAa;AAC5C,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,UAAU,CAAC,QAAQ;AACtB;AAAA,IACF;AACA,UAAM,QAAQ,IAAI;AAElB,QAAI,QAAQ;AACV,YAAM,UAAU,KAAK,MAAM,QAAQ;AACnC,YAAM,YAAY,SAAS,gBAAgB,MAAM,QAAQ,SAAS,QAAQ,CAAC,UAAU,QAAQ;AAC7F,UAAI,cAAc,QAAQ,QAAQ;AAChC;AAAA,MACF;AACA,WAAK,MAAM,WAAW,IAAI,UAAU,WAAW,QAAQ,QAAQ,WAAW,CAAC;AAC3E,WAAK,OAAO,QAAQ,KAAK,MAAM,QAAQ,EAAE,UAAU;AACnD,WAAK,OAAO,UAAU,OAAO,SAAS;AAAA,IACxC;AACA,QAAI,QAAQ;AACV,YAAM,UAAU,KAAK,MAAM,QAAQ;AACnC,YAAM,YAAY,SAAS,gBAAgB,MAAM,QAAQ,SAAS,QAAQ,CAAC,UAAU,QAAQ;AAC7F,UAAI,cAAc,QAAQ,QAAQ;AAChC;AAAA,MACF;AACA,WAAK,MAAM,WAAW,IAAI,UAAU,WAAW,QAAQ,QAAQ,WAAW,CAAC;AAC3E,WAAK,OAAO,QAAQ,KAAK,MAAM,QAAQ,EAAE,UAAU;AACnD,WAAK,OAAO,UAAU,OAAO,SAAS;AAAA,IACxC;AACA,SAAK,aAAa,IAAI;AACtB,SAAK,yBAAyB,sCAAuB,KAAK,KAAK;AAAA,EACjE;AAAA,EAEQ,eAAe,OAA0B,KAAgC;AAC/E,QAAI,KAAK,IAAI,MAAM,CAAC,KAAK,OAAO,KAAK,IAAI,MAAM,CAAC,KAAK,KAAK;AACxD,aAAO,IAAI,GAAG,SAAS,MAAM,MAAM,GAAG,MAAM,CAAC;AAAA,IAC/C;AACA,WAAO,MAAM,MAAM,MAAM,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,GAAG,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC;AAAA,EACzE;AAAA,EAEQ,uBAAuB,OAA6C;AAC1E,QAAI,cAAsB,OAAO;AACjC,QAAI,eAAkC;AAEtC,UAAM,aAAa;AAAA,MACjB,IAAI,GAAG,SAAS,MAAM,GAAG,EAAE;AAAA,MAAG,IAAI,GAAG,SAAS,MAAM,GAAG,EAAE;AAAA,MAAG,IAAI,GAAG,SAAS,MAAM,GAAG,CAAC;AAAA,MACtF,IAAI,GAAG,SAAS,MAAM,GAAG,CAAC;AAAA;AAAA,IAC5B;AAEA,eAAW,aAAa,YAAY;AAClC,YAAM,aAAa,MAAM,UAAU,SAAS;AAC5C,YAAM,WAAW,MAAM,WAAW,UAAU;AAC5C,UAAI,WAAW,aAAa;AAC1B,sBAAc;AACd,uBAAe;AAAA,MACjB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,sBAAyC;AAC/C,UAAM,IAAK,KAAK,MAAM,QAAQ,EAAE,SAAS,WAAY,KAAK;AAC1D,UAAM,IAAK,KAAK,MAAM,QAAQ,EAAE,SAAS,WAAY,KAAK;AAC1D,WAAO,KAAK,eAAe,IAAI,GAAG,SAAS,MAAM,GAAG,CAAC,GAAG,KAAK,eAAe;AAAA,EAC9E;AACF;AAEO,WAAW,SAAX,kBAAWA,YAAX;AACL,EAAAA,QAAA,oBAAiB;AADD,SAAAA;AAAA,GAAA;",
  "names": ["Events"]
}
