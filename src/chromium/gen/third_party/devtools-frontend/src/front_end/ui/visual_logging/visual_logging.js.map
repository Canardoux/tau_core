{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/visual_logging/visual_logging.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as LoggableModule from './Loggable.js';\nimport * as LoggingConfig from './LoggingConfig.js';\nimport * as LoggingDriver from './LoggingDriver.js';\nimport * as LoggingEvents from './LoggingEvents.js';\nimport * as NonDomState from './NonDomState.js';\n\nexport type Loggable = LoggableModule.Loggable;\nexport {setVeDebugLoggingEnabled, DebugLoggingFormat} from './Debugging.js';\nexport {startLogging, stopLogging, addDocument} from './LoggingDriver.js';\nexport {logImpressions} from './LoggingEvents.js';\nexport const logClick = (loggable: Loggable, event: Event, options: {doubleClick?: boolean} = {}): void =>\n    LoggingEvents.logClick(LoggingDriver.clickLogThrottler)(loggable, event, options);\n\nexport const logResize = (l: Loggable, s: DOMRect): void => LoggingEvents.logResize(l, s);\nexport const logKeyDown = async(l: Loggable|null, e: Event, context?: string): Promise<void> =>\n    LoggingEvents.logKeyDown(LoggingDriver.keyboardLogThrottler)(l, e, context);\nexport {registerParentProvider, setMappedParent} from './LoggingState.js';\n\nexport function registerLoggable(loggable: Loggable, config: string, parent: Loggable|null): void {\n  if (!LoggingDriver.isLogging()) {\n    return;\n  }\n  NonDomState.registerLoggable(loggable, LoggingConfig.parseJsLog(config), parent || undefined);\n  void LoggingDriver.scheduleProcessing();\n}\n\n/**\n * Action visual elements are either buttons or menu items that trigger a given action. Use the\n * context to differentiate between different actions, and make sure that buttons and menu items\n * that have the same effect use the same context.\n *\n * Ideally the `action`s context should match the ID of an `UI.ActionRegistration.Action`.\n */\nexport const action = LoggingConfig.makeConfigStringBuilder.bind(null, 'Action');\nexport const adorner = LoggingConfig.makeConfigStringBuilder.bind(null, 'Adorner');\nexport const animationClip = LoggingConfig.makeConfigStringBuilder.bind(null, 'AnimationClip');\nexport const bezierCurveEditor = LoggingConfig.makeConfigStringBuilder.bind(null, 'BezierCurveEditor');\nexport const bezierPresetCategory = LoggingConfig.makeConfigStringBuilder.bind(null, 'BezierPresetCategory');\nexport const breakpointMarker = LoggingConfig.makeConfigStringBuilder.bind(null, 'BreakpointMarker');\nexport const canvas = LoggingConfig.makeConfigStringBuilder.bind(null, 'Canvas');\nexport const close = LoggingConfig.makeConfigStringBuilder.bind(null, 'Close');\nexport const colorEyeDropper = LoggingConfig.makeConfigStringBuilder.bind(null, 'ColorEyeDropper');\nexport const counter = LoggingConfig.makeConfigStringBuilder.bind(null, 'Counter');\n/**\n * Visual element to denote a moveable control point such as the ones exist in BezierEditor\n * for bezier control points or keyframes in AnimationUI.\n */\nexport const controlPoint = LoggingConfig.makeConfigStringBuilder.bind(null, 'ControlPoint');\nexport const cssColorMix = LoggingConfig.makeConfigStringBuilder.bind(null, 'CssColorMix');\nexport const cssRuleHeader = LoggingConfig.makeConfigStringBuilder.bind(null, 'CSSRuleHeader');\nexport const deviceModeRuler = LoggingConfig.makeConfigStringBuilder.bind(null, 'DeviceModeRuler');\nexport const domBreakpoint = LoggingConfig.makeConfigStringBuilder.bind(null, 'DOMBreakpoint');\nexport const drawer = LoggingConfig.makeConfigStringBuilder.bind(null, 'Drawer');\nexport const dropDown = LoggingConfig.makeConfigStringBuilder.bind(null, 'DropDown');\nexport const elementsBreadcrumbs = LoggingConfig.makeConfigStringBuilder.bind(null, 'ElementsBreadcrumbs');\nexport const expand = LoggingConfig.makeConfigStringBuilder.bind(null, 'Expand');\nexport const filterDropdown = LoggingConfig.makeConfigStringBuilder.bind(null, 'FilterDropdown');\nexport const gutter = LoggingConfig.makeConfigStringBuilder.bind(null, 'Gutter');\nexport const dialog = LoggingConfig.makeConfigStringBuilder.bind(null, 'Dialog');\nexport const item = LoggingConfig.makeConfigStringBuilder.bind(null, 'Item');\nexport const key = LoggingConfig.makeConfigStringBuilder.bind(null, 'Key');\n\n/**\n * Visual element to denote a hyper link. Use the context to differentiate between various types\n * of hyperlinks.\n */\nexport const link = LoggingConfig.makeConfigStringBuilder.bind(null, 'Link');\n\nexport const mediaInspectorView = LoggingConfig.makeConfigStringBuilder.bind(null, 'MediaInspectorView');\nexport const menu = LoggingConfig.makeConfigStringBuilder.bind(null, 'Menu');\nexport const metricsBox = LoggingConfig.makeConfigStringBuilder.bind(null, 'MetricsBox');\nexport const paletteColorShades = LoggingConfig.makeConfigStringBuilder.bind(null, 'PaletteColorShades');\nexport const pane = LoggingConfig.makeConfigStringBuilder.bind(null, 'Pane');\n\n/**\n * Visual element to denote a top level panel, no matter if that panel is shown in the main\n * view or in the drawer. Use the context to differentiate between different panels, but ensure\n * that the context used here matches the context used for its corresponding {@link panelTabHeader}.\n */\nexport const panel = LoggingConfig.makeConfigStringBuilder.bind(null, 'Panel');\n\nexport const panelTabHeader = LoggingConfig.makeConfigStringBuilder.bind(null, 'PanelTabHeader');\nexport const pieChart = LoggingConfig.makeConfigStringBuilder.bind(null, 'PieChart');\nexport const pieChartSlice = LoggingConfig.makeConfigStringBuilder.bind(null, 'PieChartSlice');\nexport const pieChartTotal = LoggingConfig.makeConfigStringBuilder.bind(null, 'PieChartTotal');\nexport const popover = LoggingConfig.makeConfigStringBuilder.bind(null, 'Popover');\nexport const preview = LoggingConfig.makeConfigStringBuilder.bind(null, 'Preview');\nexport const resizer = LoggingConfig.makeConfigStringBuilder.bind(null, 'Resizer');\nexport const responsivePresets = LoggingConfig.makeConfigStringBuilder.bind(null, 'ResponsivePresets');\nexport const showStyleEditor = LoggingConfig.makeConfigStringBuilder.bind(null, 'ShowStyleEditor');\nexport const slider = LoggingConfig.makeConfigStringBuilder.bind(null, 'Slider');\nexport const section = LoggingConfig.makeConfigStringBuilder.bind(null, 'Section');\nexport const sectionHeader = LoggingConfig.makeConfigStringBuilder.bind(null, 'SectionHeader');\nexport const tableRow = LoggingConfig.makeConfigStringBuilder.bind(null, 'TableRow');\nexport const tableCell = LoggingConfig.makeConfigStringBuilder.bind(null, 'TableCell');\nexport const tableHeader = LoggingConfig.makeConfigStringBuilder.bind(null, 'TableHeader');\n\n/**\n * Visual element to denote text input fields. Use the context to differentiate between various\n * inputs fields.\n *\n * For text fields that control `Common.Settings.Setting`s, make sure to use the name of the\n * setting as the visual elements' context.\n */\nexport const textField = LoggingConfig.makeConfigStringBuilder.bind(null, 'TextField');\nexport const timeline = LoggingConfig.makeConfigStringBuilder.bind(null, 'Timeline');\n\n/**\n * Togglable visual elements are checkboxes, radio buttons, or (binary) combo boxes. Use the\n * context to differentiate between different toggles.\n *\n * For toggles that control `Common.Settings.Setting`s, make sure to use the name of the\n * setting as the toggle context.\n */\nexport const toggle = LoggingConfig.makeConfigStringBuilder.bind(null, 'Toggle');\n\nexport const toolbar = LoggingConfig.makeConfigStringBuilder.bind(null, 'Toolbar');\nexport const toggleSubpane = LoggingConfig.makeConfigStringBuilder.bind(null, 'ToggleSubpane');\nexport const tree = LoggingConfig.makeConfigStringBuilder.bind(null, 'Tree');\nexport const treeItem = LoggingConfig.makeConfigStringBuilder.bind(null, 'TreeItem');\nexport const value = LoggingConfig.makeConfigStringBuilder.bind(null, 'Value');\n"],
  "mappings": "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",
  "names": []
}
