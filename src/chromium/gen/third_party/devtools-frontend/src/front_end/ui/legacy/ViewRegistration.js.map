{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/ViewRegistration.ts"],
  "sourcesContent": ["\n// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\n\nimport type {ViewLocationResolver} from './View.js';\nimport {PreRegisteredView} from './ViewManager.js';\nimport type {Widget} from './Widget.js';\n\nconst UIStrings = {\n  /**\n   *@description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Elements' panel.\n   */\n  elements: 'Elements',\n  /**\n   *@description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Drawer' panel.\n   */\n  drawer: 'Drawer',\n  /**\n   *@description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Drawer sidebar' panel.\n   */\n  drawer_sidebar: 'Drawer sidebar',\n  /**\n   *@description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Panel'.\n   */\n  panel: 'Panel',\n  /**\n   *@description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Network' panel.\n   */\n  network: 'Network',\n  /**\n   *@description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Settings' panel.\n   */\n  settings: 'Settings',\n  /**\n   *@description Badge label for an entry in the Quick Open menu. Selecting the entry opens the 'Sources' panel.\n   */\n  sources: 'Sources',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/ViewRegistration.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst registeredViewExtensions: Array<PreRegisteredView> = [];\n\nexport const enum ViewPersistence {\n  CLOSEABLE = 'closeable',\n  PERMANENT = 'permanent',\n  TRANSIENT = 'transient',\n}\n\nexport const enum ViewLocationValues {\n  PANEL = 'panel',\n  SETTINGS_VIEW = 'settings-view',\n  ELEMENTS_SIDEBAR = 'elements-sidebar',\n  SOURCES_SIDEBAR_BOTTOM = 'sources.sidebar-bottom',\n  NAVIGATOR_VIEW = 'navigator-view',\n  DRAWER_VIEW = 'drawer-view',\n  DRAWER_SIDEBAR = 'drawer-sidebar',\n  NETWORK_SIDEBAR = 'network-sidebar',\n  SOURCES_SIDEBAR_TOP = 'sources.sidebar-top',\n  SOURCES_SIDEBAR_TABS = 'sources.sidebar-tabs',\n}\n\nexport interface ViewRegistration {\n  /**\n   * The name of the experiment a view is associated with. Enabling and disabling the declared\n   * experiment will enable and disable the view respectively.\n   */\n  experiment?: Root.Runtime.ExperimentName;\n  /**\n   * A condition is a function that will make the view available if it\n   * returns true, and not available, otherwise. Make sure that objects you\n   * access from inside the condition function are ready at the time when the\n   * setting conditions are checked.\n   */\n  condition?: Root.Runtime.Condition;\n  /**\n   * The command added to the command menu used to show the view. It usually follows the shape Show <title> as it must\n   * not be localized at declaration since it is localized internally when appending the commands to the command menu.\n   * The existing duplication of the declaration of the title is expected to be removed once the migration to the version\n   * 2 of the localization model has been completed (crbug.com/1136655).\n   */\n  commandPrompt: () => Platform.UIString.LocalizedString;\n\n  /**\n   * A UI string used as the title of the view.\n   */\n  title: () => Platform.UIString.LocalizedString;\n\n  /**\n   * Whether the view is permanently visible or can be opened temporarily.\n   */\n  persistence?: ViewPersistence;\n\n  /**\n   * Whether the view is a preview feature (a corresponding icon is shown then).\n   */\n  isPreviewFeature?: boolean;\n  /**\n   * Unique identifier of the view.\n   */\n  id: Lowercase<string>;\n  /**\n   * An identifier for the location of the view. The location is resolved by\n   * an extension of type '@UI.ViewLocationResolver'.\n   */\n  location?: ViewLocationValues;\n  /**\n   * Whether the view has a toolbar.\n   */\n  hasToolbar?: boolean;\n  /**\n   * Returns an instance of the class that wraps the view.\n   * The common pattern for implementing this function is loading the module with the wrapping 'Widget'\n   * lazily loaded. As an example:\n   *\n   * ```js\n   * let loadedElementsModule;\n   *\n   * async function loadElementsModule() {\n   *\n   *   if (!loadedElementsModule) {\n   *     loadedElementsModule = await import('./elements.js');\n   *   }\n   *   return loadedElementsModule;\n   * }\n   * UI.ViewManager.registerViewExtension({\n   *   <...>\n   *   async loadView() {\n   *      const Elements = await loadElementsModule();\n   *      return Elements.ElementsPanel.ElementsPanel.instance();\n   *   },\n   *   <...>\n   * });\n   * ```\n   */\n  loadView: () => Promise<Widget>;\n  /**\n   * Used to sort the views that appear in a shared location.\n   */\n  order?: number;\n  /**\n   * The names of the settings the registered view performs as UI for.\n   */\n  settings?: Array<string>;\n  /**\n   * Words used to find the view in the Command Menu.\n   */\n  tags?: Array<() => Platform.UIString.LocalizedString>;\n  /**\n   * Icon to be used next to view's title.\n   */\n  iconName?: string;\n}\n\nconst viewIdSet = new Set<string>();\nexport function registerViewExtension(registration: ViewRegistration): void {\n  const viewId = registration.id;\n  if (viewIdSet.has(viewId)) {\n    throw new Error(`Duplicate view id '${viewId}'`);\n  }\n  viewIdSet.add(viewId);\n  registeredViewExtensions.push(new PreRegisteredView(registration));\n}\n\nexport function getRegisteredViewExtensions(config: Root.Runtime.HostConfig): Array<PreRegisteredView> {\n  return registeredViewExtensions.filter(\n      view => Root.Runtime.Runtime.isDescriptorEnabled(\n          {experiment: view.experiment(), condition: view.condition()}, config));\n}\n\nexport function maybeRemoveViewExtension(viewId: string): boolean {\n  const viewIndex = registeredViewExtensions.findIndex(view => view.viewId() === viewId);\n  if (viewIndex < 0 || !viewIdSet.delete(viewId)) {\n    return false;\n  }\n  registeredViewExtensions.splice(viewIndex, 1);\n  return true;\n}\n\nconst registeredLocationResolvers: Array<LocationResolverRegistration> = [];\n\nconst viewLocationNameSet = new Set<ViewLocationValues>();\n\nexport function registerLocationResolver(registration: LocationResolverRegistration): void {\n  const locationName = registration.name;\n  if (viewLocationNameSet.has(locationName)) {\n    throw new Error(`Duplicate view location name registration '${locationName}'`);\n  }\n  viewLocationNameSet.add(locationName);\n  registeredLocationResolvers.push(registration);\n}\n\nexport function getRegisteredLocationResolvers(): Array<LocationResolverRegistration> {\n  return registeredLocationResolvers;\n}\n\nexport function resetViewRegistration(): void {\n  registeredViewExtensions.length = 0;\n  registeredLocationResolvers.length = 0;\n  viewLocationNameSet.clear();\n  viewIdSet.clear();\n}\n\nexport const enum ViewLocationCategory {\n  NONE = '',  // `NONE` must be a falsy value. Legacy code uses if-checks for the category.\n  ELEMENTS = 'ELEMENTS',\n  DRAWER = 'DRAWER',\n  DRAWER_SIDEBAR = 'DRAWER_SIDEBAR',\n  PANEL = 'PANEL',\n  NETWORK = 'NETWORK',\n  SETTINGS = 'SETTINGS',\n  SOURCES = 'SOURCES',\n}\n\nexport function getLocalizedViewLocationCategory(category: ViewLocationCategory): Platform.UIString.LocalizedString {\n  switch (category) {\n    case ViewLocationCategory.ELEMENTS:\n      return i18nString(UIStrings.elements);\n    case ViewLocationCategory.DRAWER:\n      return i18nString(UIStrings.drawer);\n    case ViewLocationCategory.DRAWER_SIDEBAR:\n      return i18nString(UIStrings.drawer_sidebar);\n    case ViewLocationCategory.PANEL:\n      return i18nString(UIStrings.panel);\n    case ViewLocationCategory.NETWORK:\n      return i18nString(UIStrings.network);\n    case ViewLocationCategory.SETTINGS:\n      return i18nString(UIStrings.settings);\n    case ViewLocationCategory.SOURCES:\n      return i18nString(UIStrings.sources);\n    case ViewLocationCategory.NONE:\n      return i18n.i18n.lockedString('');\n  }\n}\n\nexport interface LocationResolverRegistration {\n  name: ViewLocationValues;\n  category: ViewLocationCategory;\n  loadResolver: () => Promise<ViewLocationResolver>;\n}\n"],
  "mappings": "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",
  "names": ["ViewPersistence", "ViewLocationValues", "ViewLocationCategory"]
}
