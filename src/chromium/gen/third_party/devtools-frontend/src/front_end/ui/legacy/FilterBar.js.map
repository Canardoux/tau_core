{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/FilterBar.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport filterStyles from './filter.css.legacy.js';\nimport {KeyboardShortcut, Modifiers} from './KeyboardShortcut.js';\nimport {bindCheckbox} from './SettingsUI.js';\nimport type {Suggestions} from './SuggestBox.js';\nimport * as ThemeSupport from './theme_support/theme_support.js';\nimport {Toolbar, type ToolbarButton, ToolbarFilter, ToolbarInput, ToolbarSettingToggle} from './Toolbar.js';\nimport {Tooltip} from './Tooltip.js';\nimport {CheckboxLabel, createTextChild} from './UIUtils.js';\nimport {HBox} from './Widget.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to filter result items\n   */\n  filter: 'Filter',\n  /**\n   *@description Text that appears when hover over the filter bar in the Network tool\n   */\n  egSmalldUrlacomb: 'e.g. `/small[\\d]+/ url:a.com/b`',\n  /**\n   *@description Text that appears when hover over the All button in the Network tool\n   *@example {Ctrl + } PH1\n   */\n  sclickToSelectMultipleTypes: '{PH1}Click to select multiple types',\n  /**\n   *@description Text for everything\n   */\n  allStrings: 'All',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/FilterBar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class FilterBar extends Common.ObjectWrapper.eventMixin<FilterBarEventTypes, typeof HBox>(HBox) {\n  private enabled: boolean;\n  private readonly stateSetting: Common.Settings.Setting<boolean>;\n  private readonly filterButtonInternal: ToolbarSettingToggle;\n  private filters: FilterUI[];\n  private alwaysShowFilters?: boolean;\n  private showingWidget?: boolean;\n\n  constructor(name: string, visibleByDefault?: boolean) {\n    super();\n    this.registerRequiredCSS(filterStyles);\n    this.enabled = true;\n    this.element.classList.add('filter-bar');\n    this.element.setAttribute('jslog', `${VisualLogging.toolbar('filter-bar')}`);\n\n    this.stateSetting =\n        Common.Settings.Settings.instance().createSetting('filter-bar-' + name + '-toggled', Boolean(visibleByDefault));\n    this.filterButtonInternal =\n        new ToolbarSettingToggle(this.stateSetting, 'filter', i18nString(UIStrings.filter), 'filter-filled', 'filter');\n    this.filterButtonInternal.element.style.setProperty('--dot-toggle-top', '13px');\n    this.filterButtonInternal.element.style.setProperty('--dot-toggle-left', '14px');\n\n    this.filters = [];\n\n    this.updateFilterBar();\n    this.stateSetting.addChangeListener(this.updateFilterBar.bind(this));\n  }\n\n  filterButton(): ToolbarButton {\n    return this.filterButtonInternal;\n  }\n\n  addDivider(): void {\n    const element = document.createElement('div');\n    element.classList.add('filter-divider');\n    this.element.appendChild(element);\n  }\n\n  addFilter(filter: FilterUI): void {\n    this.filters.push(filter);\n    this.element.appendChild(filter.element());\n    filter.addEventListener(FilterUIEvents.FILTER_CHANGED, this.filterChanged, this);\n    this.updateFilterButton();\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n    this.filterButtonInternal.setEnabled(enabled);\n    this.updateFilterBar();\n  }\n\n  forceShowFilterBar(): void {\n    this.alwaysShowFilters = true;\n    this.updateFilterBar();\n  }\n\n  showOnce(): void {\n    this.stateSetting.set(true);\n  }\n\n  private filterChanged(): void {\n    this.updateFilterButton();\n    this.dispatchEventToListeners(FilterBarEvents.CHANGED);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.updateFilterBar();\n  }\n\n  private updateFilterBar(): void {\n    if (!this.parentWidget() || this.showingWidget) {\n      return;\n    }\n    if (this.visible()) {\n      this.showingWidget = true;\n      this.showWidget();\n      this.showingWidget = false;\n    } else {\n      this.hideWidget();\n    }\n  }\n\n  override focus(): void {\n    for (let i = 0; i < this.filters.length; ++i) {\n      if (this.filters[i] instanceof TextFilterUI) {\n        const textFilterUI = (this.filters[i] as TextFilterUI);\n        textFilterUI.focus();\n        break;\n      }\n    }\n  }\n\n  hasActiveFilter(): boolean {\n    for (const filter of this.filters) {\n      if (filter.isActive()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private updateFilterButton(): void {\n    const isActive = this.hasActiveFilter();\n    this.filterButtonInternal.setChecked(isActive);\n  }\n\n  clear(): void {\n    this.element.removeChildren();\n    this.filters = [];\n    this.updateFilterButton();\n  }\n\n  setting(): Common.Settings.Setting<boolean> {\n    return this.stateSetting;\n  }\n\n  visible(): boolean {\n    return this.alwaysShowFilters || (this.stateSetting.get() && this.enabled);\n  }\n}\n\nexport const enum FilterBarEvents {\n  CHANGED = 'Changed',\n}\n\nexport type FilterBarEventTypes = {\n  [FilterBarEvents.CHANGED]: void,\n};\n\nexport interface FilterUI extends Common.EventTarget.EventTarget<FilterUIEventTypes> {\n  isActive(): boolean;\n  element(): Element;\n}\n\nexport const enum FilterUIEvents {\n  FILTER_CHANGED = 'FilterChanged',\n}\n\nexport type FilterUIEventTypes = {\n  [FilterUIEvents.FILTER_CHANGED]: void,\n};\n\nexport class TextFilterUI extends Common.ObjectWrapper.ObjectWrapper<FilterUIEventTypes> implements FilterUI {\n  private readonly filterElement: HTMLDivElement;\n  #filter: ToolbarFilter;\n  private suggestionProvider: ((arg0: string, arg1: string, arg2?: boolean|undefined) => Promise<Suggestions>)|null;\n  constructor() {\n    super();\n    this.filterElement = document.createElement('div');\n    const filterToolbar = new Toolbar('text-filter', this.filterElement);\n    // Set the style directly on the element to overwrite parent css styling.\n    filterToolbar.element.style.borderBottom = 'none';\n    this.#filter = new ToolbarFilter(undefined, 1, 1, UIStrings.egSmalldUrlacomb, this.completions.bind(this));\n    filterToolbar.appendToolbarItem(this.#filter);\n    this.#filter.addEventListener(ToolbarInput.Event.TEXT_CHANGED, () => this.valueChanged());\n    this.suggestionProvider = null;\n  }\n\n  private completions(expression: string, prefix: string, force?: boolean): Promise<Suggestions> {\n    if (this.suggestionProvider) {\n      return this.suggestionProvider(expression, prefix, force);\n    }\n    return Promise.resolve([]);\n  }\n\n  isActive(): boolean {\n    return Boolean(this.#filter.valueWithoutSuggestion());\n  }\n\n  element(): Element {\n    return this.filterElement;\n  }\n\n  value(): string {\n    return this.#filter.valueWithoutSuggestion();\n  }\n\n  setValue(value: string): void {\n    this.#filter.setValue(value);\n    this.valueChanged();\n  }\n\n  focus(): void {\n    this.#filter.focus();\n  }\n\n  setSuggestionProvider(\n      suggestionProvider: (arg0: string, arg1: string, arg2?: boolean|undefined) => Promise<Suggestions>): void {\n    this.#filter.clearAutocomplete();\n    this.suggestionProvider = suggestionProvider;\n  }\n\n  private valueChanged(): void {\n    this.dispatchEventToListeners(FilterUIEvents.FILTER_CHANGED);\n  }\n\n  clear(): void {\n    this.setValue('');\n  }\n}\n\ninterface NamedBitSetFilterUIOptions {\n  items: Item[];\n  setting?: Common.Settings.Setting<{[key: string]: boolean}>;\n}\nexport class NamedBitSetFilterUIElement extends HTMLElement {\n  #options: NamedBitSetFilterUIOptions = {items: []};\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #namedBitSetFilterUI?: NamedBitSetFilterUI;\n\n  set options(options: NamedBitSetFilterUIOptions) {\n    this.#options = options;\n  }\n\n  getOrCreateNamedBitSetFilterUI(): NamedBitSetFilterUI {\n    if (this.#namedBitSetFilterUI) {\n      return this.#namedBitSetFilterUI;\n    }\n\n    const namedBitSetFilterUI = new NamedBitSetFilterUI(this.#options.items, this.#options.setting);\n    namedBitSetFilterUI.element().classList.add('named-bitset-filter');\n\n    const disclosureElement = this.#shadow.createChild('div', 'named-bit-set-filter-disclosure');\n    disclosureElement.appendChild(namedBitSetFilterUI.element());\n\n    // Translate existing filter (\"ObjectWrapper\") events to DOM CustomEvents so clients can\n    // use lit templates to bind listeners.\n    namedBitSetFilterUI.addEventListener(FilterUIEvents.FILTER_CHANGED, this.#filterChanged.bind(this));\n\n    this.#namedBitSetFilterUI = namedBitSetFilterUI;\n    return this.#namedBitSetFilterUI;\n  }\n\n  connectedCallback(): void {\n    ThemeSupport.ThemeSupport.instance().appendStyle(this.#shadow, filterStyles);\n  }\n\n  #filterChanged(): void {\n    const domEvent = new CustomEvent('filterChanged');\n    this.dispatchEvent(domEvent);\n  }\n}\n\ncustomElements.define('devtools-named-bit-set-filter', NamedBitSetFilterUIElement);\n\nexport class NamedBitSetFilterUI extends Common.ObjectWrapper.ObjectWrapper<FilterUIEventTypes> implements FilterUI {\n  private readonly filtersElement: HTMLDivElement;\n  private readonly typeFilterElementTypeNames: WeakMap<HTMLElement, string>;\n  private allowedTypes: Set<string>;\n  private readonly typeFilterElements: HTMLElement[];\n  private readonly setting: Common.Settings.Setting<{[key: string]: boolean}>|undefined;\n\n  constructor(items: Item[], setting?: Common.Settings.Setting<{[key: string]: boolean}>) {\n    super();\n    this.filtersElement = document.createElement('div');\n    this.filtersElement.classList.add('filter-bitset-filter');\n    this.filtersElement.setAttribute('jslog', `${VisualLogging.section('filter-bitset')}`);\n    ARIAUtils.markAsListBox(this.filtersElement);\n    ARIAUtils.markAsMultiSelectable(this.filtersElement);\n    Tooltip.install(this.filtersElement, i18nString(UIStrings.sclickToSelectMultipleTypes, {\n                      PH1: KeyboardShortcut.shortcutToString('', Modifiers.CtrlOrMeta.value),\n                    }));\n\n    this.typeFilterElementTypeNames = new WeakMap();\n    this.allowedTypes = new Set();\n    this.typeFilterElements = [];\n    this.addBit(NamedBitSetFilterUI.ALL_TYPES, i18nString(UIStrings.allStrings));\n    this.typeFilterElements[0].tabIndex = 0;\n    this.filtersElement.createChild('div', 'filter-bitset-filter-divider');\n\n    for (let i = 0; i < items.length; ++i) {\n      this.addBit(items[i].name, items[i].label(), items[i].title);\n    }\n\n    if (setting) {\n      this.setting = setting;\n      setting.addChangeListener(this.settingChanged.bind(this));\n      this.settingChanged();\n    } else {\n      this.toggleTypeFilter(NamedBitSetFilterUI.ALL_TYPES, false /* allowMultiSelect */);\n    }\n  }\n\n  reset(): void {\n    this.toggleTypeFilter(NamedBitSetFilterUI.ALL_TYPES, false /* allowMultiSelect */);\n  }\n\n  isActive(): boolean {\n    return !this.allowedTypes.has(NamedBitSetFilterUI.ALL_TYPES);\n  }\n\n  element(): Element {\n    return this.filtersElement;\n  }\n\n  accept(typeName: string): boolean {\n    return this.allowedTypes.has(NamedBitSetFilterUI.ALL_TYPES) || this.allowedTypes.has(typeName);\n  }\n\n  private settingChanged(): void {\n    const allowedTypesFromSetting = (this.setting as Common.Settings.Setting<{[key: string]: boolean}>).get();\n    this.allowedTypes = new Set();\n    for (const element of this.typeFilterElements) {\n      const typeName = this.typeFilterElementTypeNames.get(element);\n      if (typeName && allowedTypesFromSetting[typeName]) {\n        this.allowedTypes.add(typeName);\n      }\n    }\n    this.update();\n  }\n\n  private update(): void {\n    if (this.allowedTypes.size === 0 || this.allowedTypes.has(NamedBitSetFilterUI.ALL_TYPES)) {\n      this.allowedTypes = new Set();\n      this.allowedTypes.add(NamedBitSetFilterUI.ALL_TYPES);\n    }\n    for (const element of this.typeFilterElements) {\n      const typeName = this.typeFilterElementTypeNames.get(element);\n      const active = this.allowedTypes.has(typeName || '');\n      element.classList.toggle('selected', active);\n      ARIAUtils.setSelected(element, active);\n    }\n    this.dispatchEventToListeners(FilterUIEvents.FILTER_CHANGED);\n  }\n\n  private addBit(name: string, label: string, title?: string): void {\n    const typeFilterElement = (this.filtersElement.createChild('span', name) as HTMLElement);\n    typeFilterElement.tabIndex = -1;\n    this.typeFilterElementTypeNames.set(typeFilterElement, name);\n    createTextChild(typeFilterElement, label);\n    ARIAUtils.markAsOption(typeFilterElement);\n    if (title) {\n      typeFilterElement.title = title;\n    }\n    typeFilterElement.addEventListener('click', this.onTypeFilterClicked.bind(this), false);\n    typeFilterElement.addEventListener('keydown', this.onTypeFilterKeydown.bind(this), false);\n    typeFilterElement.setAttribute('jslog', `${VisualLogging.item(name).track({click: true})}`);\n    this.typeFilterElements.push(typeFilterElement);\n  }\n\n  private onTypeFilterClicked(event: Event): void {\n    const e = (event as KeyboardEvent);\n    let toggle;\n    if (Host.Platform.isMac()) {\n      toggle = e.metaKey && !e.ctrlKey && !e.altKey && !e.shiftKey;\n    } else {\n      toggle = e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey;\n    }\n    if (e.target) {\n      const element = (e.target as HTMLElement);\n      const typeName = (this.typeFilterElementTypeNames.get(element) as string);\n      this.toggleTypeFilter(typeName, toggle);\n    }\n  }\n\n  private onTypeFilterKeydown(ev: Event): void {\n    const event = (ev as KeyboardEvent);\n    const element = (event.target as HTMLElement | null);\n    if (!element) {\n      return;\n    }\n\n    if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {\n      if (this.keyFocusNextBit(element, true /* selectPrevious */)) {\n        event.consume(true);\n      }\n    } else if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n      if (this.keyFocusNextBit(element, false /* selectPrevious */)) {\n        event.consume(true);\n      }\n    } else if (Platform.KeyboardUtilities.isEnterOrSpaceKey(event)) {\n      this.onTypeFilterClicked(event);\n    }\n  }\n\n  private keyFocusNextBit(target: HTMLElement, selectPrevious: boolean): boolean {\n    const index = this.typeFilterElements.indexOf(target);\n    if (index === -1) {\n      return false;\n    }\n    const nextIndex = selectPrevious ? index - 1 : index + 1;\n    if (nextIndex < 0 || nextIndex >= this.typeFilterElements.length) {\n      return false;\n    }\n\n    const nextElement = this.typeFilterElements[nextIndex];\n    nextElement.tabIndex = 0;\n    target.tabIndex = -1;\n    nextElement.focus();\n    return true;\n  }\n\n  private toggleTypeFilter(typeName: string, allowMultiSelect: boolean): void {\n    if (allowMultiSelect && typeName !== NamedBitSetFilterUI.ALL_TYPES) {\n      this.allowedTypes.delete(NamedBitSetFilterUI.ALL_TYPES);\n    } else {\n      this.allowedTypes = new Set();\n    }\n\n    if (this.allowedTypes.has(typeName)) {\n      this.allowedTypes.delete(typeName);\n    } else {\n      this.allowedTypes.add(typeName);\n    }\n\n    if (this.allowedTypes.size === 0) {\n      this.allowedTypes.add(NamedBitSetFilterUI.ALL_TYPES);\n    }\n\n    if (this.setting) {\n      // Settings do not support `Sets` so convert it back to the Map-like object.\n      const updatedSetting = ({} as {[key: string]: boolean});\n      for (const type of this.allowedTypes) {\n        updatedSetting[type] = true;\n      }\n      this.setting.set(updatedSetting);\n    } else {\n      this.update();\n    }\n  }\n\n  static readonly ALL_TYPES = 'all';\n}\n\nexport class CheckboxFilterUI extends Common.ObjectWrapper.ObjectWrapper<FilterUIEventTypes> implements FilterUI {\n  private readonly filterElement: HTMLDivElement;\n  private readonly activeWhenChecked: boolean;\n  private label: CheckboxLabel;\n  private checkboxElement: HTMLInputElement;\n  constructor(\n      className: string, title: string, activeWhenChecked?: boolean, setting?: Common.Settings.Setting<boolean>,\n      jslogContext?: string) {\n    super();\n    this.filterElement = document.createElement('div');\n    this.filterElement.classList.add('filter-checkbox-filter');\n    this.activeWhenChecked = Boolean(activeWhenChecked);\n    this.label = CheckboxLabel.create(title);\n    this.filterElement.appendChild(this.label);\n    this.checkboxElement = this.label.checkboxElement;\n    if (setting) {\n      bindCheckbox(this.checkboxElement, setting);\n    } else {\n      this.checkboxElement.checked = true;\n    }\n    this.checkboxElement.addEventListener('change', this.fireUpdated.bind(this), false);\n    if (jslogContext) {\n      this.checkboxElement.setAttribute(\n          'jslog', `${VisualLogging.toggle().track({change: true}).context(jslogContext)}`);\n    }\n  }\n\n  isActive(): boolean {\n    return this.activeWhenChecked === this.checkboxElement.checked;\n  }\n\n  checked(): boolean {\n    return this.checkboxElement.checked;\n  }\n\n  setChecked(checked: boolean): void {\n    this.checkboxElement.checked = checked;\n  }\n\n  element(): HTMLDivElement {\n    return this.filterElement;\n  }\n\n  labelElement(): Element {\n    return this.label;\n  }\n\n  private fireUpdated(): void {\n    this.dispatchEventToListeners(FilterUIEvents.FILTER_CHANGED);\n  }\n}\n\nexport interface Item {\n  name: string;\n  label: () => string;\n  title?: string;\n  jslogContext: string;\n}\n"],
  "mappings": "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",
  "names": ["FilterBarEvents", "FilterUIEvents"]
}
