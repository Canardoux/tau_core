{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/Context.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';  // eslint-disable-line @typescript-eslint/no-unused-vars\n\nimport type {ContextFlavorListener} from './ContextFlavorListener.js';\n\nlet contextInstance: Context|undefined;\n\ninterface ConstructorFn<T> {\n  new(...args: any[]): T;\n}\n\nexport class Context {\n  private readonly flavorsInternal: Map<ConstructorFn<unknown>, Object>;\n  private readonly eventDispatchers: Map<ConstructorFn<unknown>, Common.ObjectWrapper.ObjectWrapper<EventTypes>>;\n\n  private constructor() {\n    this.flavorsInternal = new Map();\n    this.eventDispatchers = new Map();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): Context {\n    const {forceNew} = opts;\n    if (!contextInstance || forceNew) {\n      contextInstance = new Context();\n    }\n\n    return contextInstance;\n  }\n\n  static removeInstance(): void {\n    contextInstance = undefined;\n  }\n\n  setFlavor<T extends Object>(flavorType: ConstructorFn<T>, flavorValue: T|null): void {\n    const value = this.flavorsInternal.get(flavorType) || null;\n    if (value === flavorValue) {\n      return;\n    }\n    if (flavorValue) {\n      this.flavorsInternal.set(flavorType, flavorValue);\n    } else {\n      this.flavorsInternal.delete(flavorType);\n    }\n\n    this.dispatchFlavorChange(flavorType, flavorValue);\n  }\n\n  private dispatchFlavorChange<T extends Object>(flavorType: ConstructorFn<T>, flavorValue: T|null): void {\n    for (const extension of getRegisteredListeners()) {\n      if (extension.contextTypes().includes(flavorType)) {\n        void extension.loadListener().then(instance => instance.flavorChanged(flavorValue));\n      }\n    }\n    const dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.dispatchEventToListeners(Events.FLAVOR_CHANGED, flavorValue);\n  }\n\n  addFlavorChangeListener<T>(\n      flavorType: ConstructorFn<T>, listener: (arg0: Common.EventTarget.EventTargetEvent<T>) => void,\n      thisObject?: Object): void {\n    let dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      dispatcher = new Common.ObjectWrapper.ObjectWrapper<EventTypes>();\n      this.eventDispatchers.set(flavorType, dispatcher);\n    }\n    dispatcher.addEventListener(Events.FLAVOR_CHANGED, listener, thisObject);\n  }\n\n  removeFlavorChangeListener<T>(\n      flavorType: ConstructorFn<T>, listener: (arg0: Common.EventTarget.EventTargetEvent<T>) => void,\n      thisObject?: Object): void {\n    const dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.removeEventListener(Events.FLAVOR_CHANGED, listener, thisObject);\n    if (!dispatcher.hasEventListeners(Events.FLAVOR_CHANGED)) {\n      this.eventDispatchers.delete(flavorType);\n    }\n  }\n\n  flavor<T>(flavorType: ConstructorFn<T>): T|null {\n    return (this.flavorsInternal.get(flavorType) as T | null) || null;\n  }\n\n  flavors(): Set<ConstructorFn<unknown>> {\n    return new Set(this.flavorsInternal.keys());\n  }\n}\n\nconst enum Events {\n  FLAVOR_CHANGED = 'FlavorChanged',\n}\n\nexport type EventTypes = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [Events.FLAVOR_CHANGED]: any,\n};\n\nconst registeredListeners: ContextFlavorListenerRegistration[] = [];\n\nexport function registerListener(registration: ContextFlavorListenerRegistration): void {\n  registeredListeners.push(registration);\n}\n\nfunction getRegisteredListeners(): ContextFlavorListenerRegistration[] {\n  return registeredListeners;\n}\nexport interface ContextFlavorListenerRegistration {\n  contextTypes: () => Array<Function>;\n  loadListener: () => Promise<ContextFlavorListener>;\n}\n"],
  "mappings": ";AAIA,YAAY,YAAY;AAKxB,IAAI;AAMG,aAAM,QAAQ;AAAA,EACF;AAAA,EACA;AAAA,EAET,cAAc;AACpB,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,mBAAmB,oBAAI,IAAI;AAAA,EAClC;AAAA,EAEA,OAAO,SAAS,OAEZ,EAAC,UAAU,KAAI,GAAY;AAC7B,UAAM,EAAC,SAAQ,IAAI;AACnB,QAAI,CAAC,mBAAmB,UAAU;AAChC,wBAAkB,IAAI,QAAQ;AAAA,IAChC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAuB;AAC5B,sBAAkB;AAAA,EACpB;AAAA,EAEA,UAA4B,YAA8B,aAA2B;AACnF,UAAM,QAAQ,KAAK,gBAAgB,IAAI,UAAU,KAAK;AACtD,QAAI,UAAU,aAAa;AACzB;AAAA,IACF;AACA,QAAI,aAAa;AACf,WAAK,gBAAgB,IAAI,YAAY,WAAW;AAAA,IAClD,OAAO;AACL,WAAK,gBAAgB,OAAO,UAAU;AAAA,IACxC;AAEA,SAAK,qBAAqB,YAAY,WAAW;AAAA,EACnD;AAAA,EAEQ,qBAAuC,YAA8B,aAA2B;AACtG,eAAW,aAAa,uBAAuB,GAAG;AAChD,UAAI,UAAU,aAAa,EAAE,SAAS,UAAU,GAAG;AACjD,aAAK,UAAU,aAAa,EAAE,KAAK,cAAY,SAAS,cAAc,WAAW,CAAC;AAAA,MACpF;AAAA,IACF;AACA,UAAM,aAAa,KAAK,iBAAiB,IAAI,UAAU;AACvD,QAAI,CAAC,YAAY;AACf;AAAA,IACF;AACA,eAAW,yBAAyB,sCAAuB,WAAW;AAAA,EACxE;AAAA,EAEA,wBACI,YAA8B,UAC9B,YAA2B;AAC7B,QAAI,aAAa,KAAK,iBAAiB,IAAI,UAAU;AACrD,QAAI,CAAC,YAAY;AACf,mBAAa,IAAI,OAAO,cAAc,cAA0B;AAChE,WAAK,iBAAiB,IAAI,YAAY,UAAU;AAAA,IAClD;AACA,eAAW,iBAAiB,sCAAuB,UAAU,UAAU;AAAA,EACzE;AAAA,EAEA,2BACI,YAA8B,UAC9B,YAA2B;AAC7B,UAAM,aAAa,KAAK,iBAAiB,IAAI,UAAU;AACvD,QAAI,CAAC,YAAY;AACf;AAAA,IACF;AACA,eAAW,oBAAoB,sCAAuB,UAAU,UAAU;AAC1E,QAAI,CAAC,WAAW,kBAAkB,oCAAqB,GAAG;AACxD,WAAK,iBAAiB,OAAO,UAAU;AAAA,IACzC;AAAA,EACF;AAAA,EAEA,OAAU,YAAsC;AAC9C,WAAQ,KAAK,gBAAgB,IAAI,UAAU,KAAkB;AAAA,EAC/D;AAAA,EAEA,UAAuC;AACrC,WAAO,IAAI,IAAI,KAAK,gBAAgB,KAAK,CAAC;AAAA,EAC5C;AACF;AAEA,IAAW,SAAX,kBAAWA,YAAX;AACE,EAAAA,QAAA,oBAAiB;AADR,SAAAA;AAAA,GAAA;AASX,MAAM,sBAA2D,CAAC;AAE3D,gBAAS,iBAAiB,cAAuD;AACtF,sBAAoB,KAAK,YAAY;AACvC;AAEA,SAAS,yBAA8D;AACrE,SAAO;AACT;",
  "names": ["Events"]
}
