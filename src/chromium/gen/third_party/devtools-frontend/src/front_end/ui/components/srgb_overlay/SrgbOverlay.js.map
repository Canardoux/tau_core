{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/srgb_overlay/SrgbOverlay.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport srgbOverlayStyles from './srgbOverlay.css.js';\n\nconst {html} = LitHtml;\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\ntype SrgbOverlayProps = {\n  // [0 - 1] corresponding to HSV hue\n  hue: number,\n  width: number,\n  height: number,\n};\n\nconst SRGB_LABEL_HEIGHT = 10;\nconst SRGB_LABEL_BOTTOM = 3;\nconst SRGB_TEXT_UPPER_POINT_FROM_BOTTOM = SRGB_LABEL_HEIGHT + SRGB_LABEL_BOTTOM;\n\nconst EPSILON = 0.001;\n// TODO(crbug.com/1409892): Use `Color` class here for a better code (and not duplicate isInGamut logic here)\nfunction isColorInSrgbGamut(hsv: Common.ColorUtils.Color3D): boolean {\n  const rgba = Common.Color.hsva2rgba([...hsv, 1]);\n  const xyzd50 = Common.ColorConverter.ColorConverter.displayP3ToXyzd50(rgba[0], rgba[1], rgba[2]);\n  const srgb = Common.ColorConverter.ColorConverter.xyzd50ToSrgb(xyzd50[0], xyzd50[1], xyzd50[2]);\n  return srgb.every(val => val + EPSILON >= 0 && val - EPSILON <= 1);\n}\n\nexport class SrgbOverlay extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  constructor() {\n    super();\n    this.#shadow.adoptedStyleSheets = [\n      srgbOverlayStyles,\n    ];\n  }\n\n  #getLinePoints({hue, width, height}: SrgbOverlayProps): {x: number, y: number}[]|null {\n    if (width === 0 || height === 0) {\n      return null;\n    }\n\n    const step = 1 / window.devicePixelRatio;\n    const linePoints = [];\n    let x = 0;\n    for (let y = 0; y < height; y += step) {\n      const value = 1 - (y / height);\n\n      for (; x < width; x += step) {\n        const saturation = x / width;\n        if (!isColorInSrgbGamut([hue, saturation, value])) {\n          linePoints.push({x, y});\n          break;\n        }\n      }\n    }\n\n    if (linePoints.length === 0) {\n      return null;\n    }\n\n    const lastPoint = linePoints[linePoints.length - 1];\n    if (lastPoint.x < width) {\n      linePoints.push({\n        y: lastPoint.y,\n        x: width,\n      });\n    }\n\n    return linePoints;\n  }\n\n  #closestPointAtHeight(points: {x: number, y: number}[], atHeight: number): {x: number, y: number}|null {\n    let min = Infinity;\n    let closestPoint = null;\n    for (const point of points) {\n      if (Math.abs(atHeight - point.y) <= min) {\n        min = Math.abs(atHeight - point.y);\n        closestPoint = point;\n      }\n    }\n\n    return closestPoint;\n  }\n\n  render({hue, width, height}: SrgbOverlayProps): Promise<void> {\n    return coordinator.write('Srgb Overlay render', () => {\n      const points = this.#getLinePoints({hue, width, height});\n      if (!points || points.length === 0) {\n        return;\n      }\n\n      const closestPoint = this.#closestPointAtHeight(points, height - SRGB_TEXT_UPPER_POINT_FROM_BOTTOM);\n      if (!closestPoint) {\n        return;\n      }\n\n      LitHtml.render(\n          html`\n          <span class=\"label\" style=\"right: ${width - closestPoint.x}px\">sRGB</span>\n          <svg>\n            <polyline points=${\n              points.map(point => `${point.x.toFixed(2)},${point.y.toFixed(2)}`).join(' ')} class=\"gamut-line\" />\n          </svg>\n        `,\n          this.#shadow, {host: this});\n    });\n  }\n}\n\ncustomElements.define('devtools-spectrum-srgb-overlay', SrgbOverlay);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-spectrum-srgb-overlay': SrgbOverlay;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
