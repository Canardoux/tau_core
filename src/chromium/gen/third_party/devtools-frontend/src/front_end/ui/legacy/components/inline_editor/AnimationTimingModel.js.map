{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/inline_editor/AnimationTimingModel.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as UI from '../../legacy.js';\n\nimport {CSSLinearEasingModel} from './CSSLinearEasingModel.js';\n\n// Provides a unified interface for both linear easing and cubic bezier\n// models and handles the parsing for animation-timing texts.\nexport abstract class AnimationTimingModel {\n  abstract asCSSText(): string;\n\n  static parse(text: string): AnimationTimingModel|null {\n    // Try to parse as a CSSLinearEasingModel first.\n    // The reason is: `linear` keyword is valid in both\n    // models, however we want to treat it as a `CSSLinearEasingModel`\n    // for visualizing in animation timing tool.\n    const cssLinearEasingModel = CSSLinearEasingModel.parse(text);\n    if (cssLinearEasingModel) {\n      return cssLinearEasingModel;\n    }\n\n    return UI.Geometry.CubicBezier.parse(text) || null;\n  }\n}\n\nexport const LINEAR_BEZIER = UI.Geometry.LINEAR_BEZIER;\n"],
  "mappings": ";AAIA,YAAY,QAAQ;AAEpB,SAAQ,4BAA2B;AAI5B,aAAe,qBAAqB;AAAA,EAGzC,OAAO,MAAM,MAAyC;AAKpD,UAAM,uBAAuB,qBAAqB,MAAM,IAAI;AAC5D,QAAI,sBAAsB;AACxB,aAAO;AAAA,IACT;AAEA,WAAO,GAAG,SAAS,YAAY,MAAM,IAAI,KAAK;AAAA,EAChD;AACF;AAEO,aAAM,gBAAgB,GAAG,SAAS;",
  "names": []
}
