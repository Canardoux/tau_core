{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/visual_logging/DomState.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {needsLogging} from './LoggingConfig.js';\n\ninterface ElementWithParent {\n  element: Element;\n  parent?: Element;\n  slot?: Element;\n}\n\nexport function getDomState(documents: Document[]): {loggables: ElementWithParent[], shadowRoots: ShadowRoot[]} {\n  const loggables: ElementWithParent[] = [];\n  const shadowRoots: ShadowRoot[] = [];\n  const queue: ElementWithParent[] = [];\n  const enqueue = (children: HTMLCollection|Element[], parent?: Element, slot?: Element): void => {\n    for (const child of children) {\n      queue.push({element: child, parent, slot});\n    }\n  };\n  for (const document of documents) {\n    enqueue(document.body.children);\n  }\n\n  let head = 0;\n  const dequeue = (): ElementWithParent => queue[head++];\n  while (true) {\n    const top = dequeue();\n    if (!top) {\n      break;\n    }\n    const {element, slot} = top;\n    let {parent} = top;\n    if (element.assignedSlot && element.assignedSlot !== slot) {\n      continue;\n    }\n    if (needsLogging(element)) {\n      loggables.push({element, parent});\n      parent = element;\n    }\n    if (element.localName === 'slot' && (element as HTMLSlotElement).assignedElements().length) {\n      enqueue((element as HTMLSlotElement).assignedElements(), parent, element);\n    } else {\n      enqueue(element.children, parent);\n    }\n    if (element.shadowRoot) {\n      shadowRoots.push(element.shadowRoot);\n      enqueue(element.shadowRoot.children, parent);\n    }\n  }\n  return {loggables, shadowRoots};\n}\n\nconst MIN_ELEMENT_SIZE_FOR_IMPRESSIONS = 10;\n\nexport function visibleOverlap(element: Element, viewportRect: DOMRect): DOMRect|null {\n  const elementRect = element.getBoundingClientRect();\n  const overlap = intersection(viewportRect, elementRect);\n\n  const sizeThreshold = Math.max(Math.min(MIN_ELEMENT_SIZE_FOR_IMPRESSIONS, elementRect.width, elementRect.height), 1);\n\n  if (!overlap || overlap.width < sizeThreshold || overlap.height < sizeThreshold) {\n    return null;\n  }\n  return overlap;\n}\n\nfunction intersection(a: DOMRect, b: DOMRect): DOMRect|null {\n  const x0 = Math.max(a.left, b.left);\n  const x1 = Math.min(a.left + a.width, b.left + b.width);\n\n  if (x0 <= x1) {\n    const y0 = Math.max(a.top, b.top);\n    const y1 = Math.min(a.top + a.height, b.top + b.height);\n\n    if (y0 <= y1) {\n      return new DOMRect(x0, y0, x1 - x0, y1 - y0);\n    }\n  }\n  return null;\n}\n"],
  "mappings": ";AAIA,SAAQ,oBAAmB;AAQpB,gBAAS,YAAY,WAAoF;AAC9G,QAAM,YAAiC,CAAC;AACxC,QAAM,cAA4B,CAAC;AACnC,QAAM,QAA6B,CAAC;AACpC,QAAM,UAAU,CAAC,UAAoC,QAAkB,SAAyB;AAC9F,eAAW,SAAS,UAAU;AAC5B,YAAM,KAAK,EAAC,SAAS,OAAO,QAAQ,KAAI,CAAC;AAAA,IAC3C;AAAA,EACF;AACA,aAAW,YAAY,WAAW;AAChC,YAAQ,SAAS,KAAK,QAAQ;AAAA,EAChC;AAEA,MAAI,OAAO;AACX,QAAM,UAAU,MAAyB,MAAM,MAAM;AACrD,SAAO,MAAM;AACX,UAAM,MAAM,QAAQ;AACpB,QAAI,CAAC,KAAK;AACR;AAAA,IACF;AACA,UAAM,EAAC,SAAS,KAAI,IAAI;AACxB,QAAI,EAAC,OAAM,IAAI;AACf,QAAI,QAAQ,gBAAgB,QAAQ,iBAAiB,MAAM;AACzD;AAAA,IACF;AACA,QAAI,aAAa,OAAO,GAAG;AACzB,gBAAU,KAAK,EAAC,SAAS,OAAM,CAAC;AAChC,eAAS;AAAA,IACX;AACA,QAAI,QAAQ,cAAc,UAAW,QAA4B,iBAAiB,EAAE,QAAQ;AAC1F,cAAS,QAA4B,iBAAiB,GAAG,QAAQ,OAAO;AAAA,IAC1E,OAAO;AACL,cAAQ,QAAQ,UAAU,MAAM;AAAA,IAClC;AACA,QAAI,QAAQ,YAAY;AACtB,kBAAY,KAAK,QAAQ,UAAU;AACnC,cAAQ,QAAQ,WAAW,UAAU,MAAM;AAAA,IAC7C;AAAA,EACF;AACA,SAAO,EAAC,WAAW,YAAW;AAChC;AAEA,MAAM,mCAAmC;AAElC,gBAAS,eAAe,SAAkB,cAAqC;AACpF,QAAM,cAAc,QAAQ,sBAAsB;AAClD,QAAM,UAAU,aAAa,cAAc,WAAW;AAEtD,QAAM,gBAAgB,KAAK,IAAI,KAAK,IAAI,kCAAkC,YAAY,OAAO,YAAY,MAAM,GAAG,CAAC;AAEnH,MAAI,CAAC,WAAW,QAAQ,QAAQ,iBAAiB,QAAQ,SAAS,eAAe;AAC/E,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAEA,SAAS,aAAa,GAAY,GAA0B;AAC1D,QAAM,KAAK,KAAK,IAAI,EAAE,MAAM,EAAE,IAAI;AAClC,QAAM,KAAK,KAAK,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK;AAEtD,MAAI,MAAM,IAAI;AACZ,UAAM,KAAK,KAAK,IAAI,EAAE,KAAK,EAAE,GAAG;AAChC,UAAM,KAAK,KAAK,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM;AAEtD,QAAI,MAAM,IAAI;AACZ,aAAO,IAAI,QAAQ,IAAI,IAAI,KAAK,IAAI,KAAK,EAAE;AAAA,IAC7C;AAAA,EACF;AACA,SAAO;AACT;",
  "names": []
}
