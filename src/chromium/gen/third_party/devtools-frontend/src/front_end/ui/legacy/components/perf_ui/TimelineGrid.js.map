{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/perf_ui/TimelineGrid.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2008, 2009 Anthony Ricaud <rik@webkit.org>\n * Copyright (C) 2009 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as ThemeSupport from '../../theme_support/theme_support.js';\n\nimport {DEFAULT_FONT_SIZE, getFontFamilyForCanvas} from './Font.js';\nimport timelineGridStyles from './timelineGrid.css.legacy.js';\n\nconst labelMap = new Map<HTMLDivElement|HTMLElement, HTMLDivElement>();\n\nexport class TimelineGrid {\n  element: HTMLDivElement;\n  private readonly dividersElementInternal: HTMLElement;\n  private readonly gridHeaderElement: HTMLDivElement;\n  private eventDividersElement: HTMLElement;\n  private dividersLabelBarElementInternal: HTMLElement;\n\n  constructor() {\n    this.element = document.createElement('div');\n    ThemeSupport.ThemeSupport.instance().appendStyle(this.element, timelineGridStyles);\n\n    this.dividersElementInternal = this.element.createChild('div', 'resources-dividers');\n\n    this.gridHeaderElement = document.createElement('div');\n    this.gridHeaderElement.classList.add('timeline-grid-header');\n    this.eventDividersElement = this.gridHeaderElement.createChild('div', 'resources-event-dividers');\n    this.dividersLabelBarElementInternal = this.gridHeaderElement.createChild('div', 'resources-dividers-label-bar');\n    this.element.appendChild(this.gridHeaderElement);\n  }\n\n  static calculateGridOffsets(calculator: Calculator, freeZoneAtLeft?: number): DividersData {\n    const minGridSlicePx = 64;  // minimal distance between grid lines.\n\n    const clientWidth = calculator.computePosition(calculator.maximumBoundary());\n    let dividersCount: number|0 = clientWidth / minGridSlicePx;\n    let gridSliceTime: number = calculator.boundarySpan() / dividersCount;\n    const pixelsPerTime = clientWidth / calculator.boundarySpan();\n\n    // Align gridSliceTime to a nearest round value.\n    // We allow spans that fit into the formula: span = (1|2|5)x10^n,\n    // e.g.: ...  .1  .2  .5  1  2  5  10  20  50  ...\n    // After a span has been chosen make grid lines at multiples of the span.\n\n    const logGridSliceTime = Math.ceil(Math.log(gridSliceTime) / Math.LN10);\n    gridSliceTime = Math.pow(10, logGridSliceTime);\n    if (gridSliceTime * pixelsPerTime >= 5 * minGridSlicePx) {\n      gridSliceTime = gridSliceTime / 5;\n    }\n    if (gridSliceTime * pixelsPerTime >= 2 * minGridSlicePx) {\n      gridSliceTime = gridSliceTime / 2;\n    }\n\n    const firstDividerTime =\n        Math.ceil((calculator.minimumBoundary() - calculator.zeroTime()) / gridSliceTime) * gridSliceTime +\n        calculator.zeroTime();\n    let lastDividerTime = calculator.maximumBoundary();\n    // Add some extra space past the right boundary as the rightmost divider label text\n    // may be partially shown rather than just pop up when a new rightmost divider gets into the view.\n    lastDividerTime += minGridSlicePx / pixelsPerTime;\n    dividersCount = Math.ceil((lastDividerTime - firstDividerTime) / gridSliceTime);\n\n    if (!gridSliceTime) {\n      dividersCount = 0;\n    }\n\n    const offsets = [];\n    for (let i = 0; i < dividersCount; ++i) {\n      // The grid slice time could be small like 0.2. If we multiply this we\n      // open ourselves to floating point rounding errors. To avoid these, we\n      // multiply the number by 100, and i, and then divide it by 100 again.\n      const time = firstDividerTime + (gridSliceTime * 100 * i) / 100;\n\n      const positionFromTime = calculator.computePosition(time);\n\n      if (positionFromTime < (freeZoneAtLeft || 0)) {\n        continue;\n      }\n      offsets.push({position: Math.floor(positionFromTime), time});\n    }\n\n    return {offsets, precision: Math.max(0, -Math.floor(Math.log(gridSliceTime * 1.01) / Math.LN10))};\n  }\n\n  static drawCanvasGrid(context: CanvasRenderingContext2D, dividersData: DividersData): void {\n    context.save();\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    const height = Math.floor(context.canvas.height / window.devicePixelRatio);\n    context.strokeStyle = getComputedStyle(document.body).getPropertyValue('--app-color-strokestyle');\n    context.lineWidth = 1;\n\n    context.translate(0.5, 0.5);\n    context.beginPath();\n    for (const offsetInfo of dividersData.offsets) {\n      context.moveTo(offsetInfo.position, 0);\n      context.lineTo(offsetInfo.position, height);\n    }\n    context.stroke();\n    context.restore();\n  }\n\n  static drawCanvasHeaders(\n      context: CanvasRenderingContext2D, dividersData: DividersData, formatTimeFunction: (arg0: number) => string,\n      paddingTop: number, headerHeight: number, freeZoneAtLeft?: number): void {\n    context.save();\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    const width = Math.ceil(context.canvas.width / window.devicePixelRatio);\n\n    context.beginPath();\n    context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-opacity-50');\n    context.fillRect(0, 0, width, headerHeight);\n\n    context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface');\n    context.textBaseline = 'hanging';\n    context.font = `${DEFAULT_FONT_SIZE} ${getFontFamilyForCanvas()}`;\n\n    const paddingRight = 4;\n    for (const offsetInfo of dividersData.offsets) {\n      const text = formatTimeFunction(offsetInfo.time);\n      const textWidth = context.measureText(text).width;\n      const textPosition = offsetInfo.position - textWidth - paddingRight;\n      if (!freeZoneAtLeft || freeZoneAtLeft < textPosition) {\n        context.fillText(text, textPosition, paddingTop);\n      }\n    }\n    context.restore();\n  }\n\n  get dividersElement(): HTMLElement {\n    return this.dividersElementInternal;\n  }\n\n  get dividersLabelBarElement(): HTMLElement {\n    return this.dividersLabelBarElementInternal;\n  }\n\n  removeDividers(): void {\n    this.dividersElementInternal.removeChildren();\n    this.dividersLabelBarElementInternal.removeChildren();\n  }\n\n  updateDividers(calculator: Calculator, freeZoneAtLeft?: number): boolean {\n    const dividersData = TimelineGrid.calculateGridOffsets(calculator, freeZoneAtLeft);\n    const dividerOffsets = dividersData.offsets;\n    const precision = dividersData.precision;\n\n    const dividersElementClientWidth = this.dividersElementInternal.clientWidth;\n\n    // Reuse divider elements and labels.\n    let divider = (this.dividersElementInternal.firstChild as HTMLElement | null);\n    let dividerLabelBar = (this.dividersLabelBarElementInternal.firstChild as HTMLElement | null);\n\n    for (let i = 0; i < dividerOffsets.length; ++i) {\n      if (!divider) {\n        divider = document.createElement('div');\n        divider.className = 'resources-divider';\n        this.dividersElementInternal.appendChild(divider);\n\n        dividerLabelBar = document.createElement('div');\n        dividerLabelBar.className = 'resources-divider';\n        const label = document.createElement('div');\n        label.className = 'resources-divider-label';\n        labelMap.set(dividerLabelBar, label);\n        dividerLabelBar.appendChild(label);\n        this.dividersLabelBarElementInternal.appendChild(dividerLabelBar);\n      }\n\n      const time = dividerOffsets[i].time;\n      const position = dividerOffsets[i].position;\n      if (dividerLabelBar) {\n        const label = labelMap.get(dividerLabelBar);\n        if (label) {\n          label.textContent = calculator.formatValue(time, precision);\n        }\n      }\n\n      const percentLeft = 100 * position / dividersElementClientWidth;\n      divider.style.left = percentLeft + '%';\n      if (dividerLabelBar) {\n        dividerLabelBar.style.left = percentLeft + '%';\n      }\n      divider = (divider.nextSibling as HTMLElement | null);\n      if (dividerLabelBar) {\n        dividerLabelBar = (dividerLabelBar.nextSibling as HTMLElement | null);\n      }\n    }\n\n    // Remove extras.\n    while (divider) {\n      const nextDivider = divider.nextSibling;\n      this.dividersElementInternal.removeChild(divider);\n      if (nextDivider) {\n        divider = (nextDivider as HTMLElement);\n      } else {\n        break;\n      }\n    }\n    while (dividerLabelBar) {\n      const nextDivider = dividerLabelBar.nextSibling;\n      this.dividersLabelBarElementInternal.removeChild(dividerLabelBar);\n      if (nextDivider) {\n        dividerLabelBar = (nextDivider as HTMLElement);\n      } else {\n        break;\n      }\n    }\n    return true;\n  }\n\n  addEventDivider(divider: Element): void {\n    this.eventDividersElement.appendChild(divider);\n  }\n\n  addEventDividers(dividers: Element[]): void {\n    this.gridHeaderElement.removeChild(this.eventDividersElement);\n    for (const divider of dividers) {\n      this.eventDividersElement.appendChild(divider);\n    }\n    this.gridHeaderElement.appendChild(this.eventDividersElement);\n  }\n\n  removeEventDividers(): void {\n    this.eventDividersElement.removeChildren();\n  }\n\n  hideEventDividers(): void {\n    this.eventDividersElement.classList.add('hidden');\n  }\n\n  showEventDividers(): void {\n    this.eventDividersElement.classList.remove('hidden');\n  }\n\n  hideDividers(): void {\n    this.dividersElementInternal.classList.add('hidden');\n  }\n\n  showDividers(): void {\n    this.dividersElementInternal.classList.remove('hidden');\n  }\n\n  setScrollTop(scrollTop: number): void {\n    this.dividersLabelBarElementInternal.style.top = scrollTop + 'px';\n    this.eventDividersElement.style.top = scrollTop + 'px';\n  }\n}\n\n// The TimelineGrid is used in the Performance panel and Memory panel -> Allocating sampling, so the value can be either\n// milliseconds or bytes\nexport interface Calculator {\n  computePosition(value: number): number;\n  formatValue(value: number, precision?: number): string;\n  minimumBoundary(): number;\n  zeroTime(): number;\n  maximumBoundary(): number;\n  boundarySpan(): number;\n}\n\nexport interface DividersData {\n  offsets: {\n    position: number,\n    time: number,\n  }[];\n  precision: number;\n}\n"],
  "mappings": "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",
  "names": []
}
