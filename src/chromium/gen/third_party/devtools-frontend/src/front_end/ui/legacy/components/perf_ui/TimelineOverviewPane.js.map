{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/perf_ui/TimelineOverviewPane.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as VisualLoggging from '../../../visual_logging/visual_logging.js';\nimport * as UI from '../../legacy.js';\nimport * as ThemeSupport from '../../theme_support/theme_support.js';\n\nimport {Events as OverviewGridEvents, OverviewGrid, type WindowChangedWithPositionEvent} from './OverviewGrid.js';\nimport {TimelineOverviewCalculator} from './TimelineOverviewCalculator.js';\nimport timelineOverviewInfoStyles from './timelineOverviewInfo.css.js';\n\nexport class TimelineOverviewPane extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  readonly overviewCalculator: TimelineOverviewCalculator;\n  private readonly overviewGrid: OverviewGrid;\n  private readonly cursorArea: HTMLElement;\n  private cursorElement: HTMLElement;\n  private overviewControls: TimelineOverview[];\n  private markers: Map<number, HTMLDivElement>;\n  private readonly overviewInfo: OverviewInfo;\n  private readonly updateThrottler: Common.Throttler.Throttler;\n  private cursorEnabled: boolean;\n  private cursorPosition: number;\n  private lastWidth: number;\n  private windowStartTime: number;\n  private windowEndTime: number;\n  private muteOnWindowChanged: boolean;\n  #dimHighlightSVG: Element;\n\n  constructor(prefix: string) {\n    super();\n    this.element.id = prefix + '-overview-pane';\n\n    this.overviewCalculator = new TimelineOverviewCalculator();\n    this.overviewGrid = new OverviewGrid(prefix, this.overviewCalculator);\n    this.overviewGrid.element.setAttribute(\n        'jslog', `${VisualLoggging.timeline(`${prefix}-overview`).track({click: true, drag: true, hover: true})}`);\n    this.element.appendChild(this.overviewGrid.element);\n    this.cursorArea = this.overviewGrid.element.createChild('div', 'overview-grid-cursor-area');\n    this.cursorElement = this.overviewGrid.element.createChild('div', 'overview-grid-cursor-position');\n    this.cursorArea.addEventListener('mousemove', this.onMouseMove.bind(this), true);\n    this.cursorArea.addEventListener('mouseleave', this.hideCursor.bind(this), true);\n\n    this.overviewGrid.setResizeEnabled(false);\n    this.overviewGrid.addEventListener(OverviewGridEvents.WINDOW_CHANGED_WITH_POSITION, this.onWindowChanged, this);\n    this.overviewGrid.addEventListener(OverviewGridEvents.BREADCRUMB_ADDED, this.onBreadcrumbAdded, this);\n    this.overviewGrid.setClickHandler(this.onClick.bind(this));\n    this.overviewControls = [];\n    this.markers = new Map();\n\n    this.overviewInfo = new OverviewInfo(this.cursorElement);\n    this.updateThrottler = new Common.Throttler.Throttler(100);\n\n    this.cursorEnabled = false;\n    this.cursorPosition = 0;\n    this.lastWidth = 0;\n\n    this.windowStartTime = 0;\n    this.windowEndTime = Infinity;\n    this.muteOnWindowChanged = false;\n\n    this.#dimHighlightSVG = UI.UIUtils.createSVGChild(this.element, 'svg', 'timeline-minimap-dim-highlight-svg hidden');\n    this.#initializeDimHighlightSVG();\n  }\n\n  enableCreateBreadcrumbsButton(): void {\n    const breadcrumbsElement = this.overviewGrid.enableCreateBreadcrumbsButton();\n    breadcrumbsElement.addEventListener('mousemove', this.onMouseMove.bind(this), true);\n    breadcrumbsElement.addEventListener('mouseleave', this.hideCursor.bind(this), true);\n  }\n\n  private onMouseMove(event: Event): void {\n    if (!this.cursorEnabled) {\n      return;\n    }\n    const mouseEvent = (event as MouseEvent);\n    const target = (event.target as HTMLElement);\n    const offsetLeftRelativeToCursorArea =\n        target.getBoundingClientRect().left - this.cursorArea.getBoundingClientRect().left;\n    this.cursorPosition = mouseEvent.offsetX + offsetLeftRelativeToCursorArea;\n    this.cursorElement.style.left = this.cursorPosition + 'px';\n    this.cursorElement.style.visibility = 'visible';\n\n    // Dispatch an event to notify the flame chart to show a timestamp marker for the current timestamp if it's visible\n    // in the flame chart.\n    const timeInMilliSeconds = this.overviewCalculator.positionToTime(this.cursorPosition);\n    const timeWindow = this.overviewGrid.calculateWindowValue();\n    if (Trace.Types.Timing.MilliSeconds(timeWindow.rawStartValue) <= timeInMilliSeconds &&\n        timeInMilliSeconds <= Trace.Types.Timing.MilliSeconds(timeWindow.rawEndValue)) {\n      const timeInMicroSeconds = Trace.Helpers.Timing.millisecondsToMicroseconds(timeInMilliSeconds);\n      this.dispatchEventToListeners(Events.OVERVIEW_PANE_MOUSE_MOVE, {timeInMicroSeconds});\n    } else {\n      this.dispatchEventToListeners(Events.OVERVIEW_PANE_MOUSE_LEAVE);\n    }\n\n    void this.overviewInfo.setContent(this.buildOverviewInfo());\n  }\n\n  private async buildOverviewInfo(): Promise<DocumentFragment> {\n    const document = this.element.ownerDocument;\n    const x = this.cursorPosition;\n    const elements = await Promise.all(this.overviewControls.map(control => control.overviewInfoPromise(x)));\n    const fragment = document.createDocumentFragment();\n    const nonNullElements = (elements.filter(element => element !== null) as Element[]);\n    fragment.append(...nonNullElements);\n    return fragment;\n  }\n\n  private hideCursor(): void {\n    this.cursorElement.style.visibility = 'hidden';\n    this.dispatchEventToListeners(Events.OVERVIEW_PANE_MOUSE_LEAVE);\n    this.overviewInfo.hide();\n  }\n\n  override wasShown(): void {\n    this.update();\n  }\n\n  override willHide(): void {\n    this.overviewInfo.hide();\n  }\n\n  override onResize(): void {\n    const width = this.element.offsetWidth;\n    if (width === this.lastWidth) {\n      return;\n    }\n    this.lastWidth = width;\n    this.scheduleUpdate();\n  }\n\n  setOverviewControls(overviewControls: TimelineOverview[]): void {\n    for (let i = 0; i < this.overviewControls.length; ++i) {\n      this.overviewControls[i].dispose();\n    }\n\n    for (let i = 0; i < overviewControls.length; ++i) {\n      overviewControls[i].setCalculator(this.overviewCalculator);\n      overviewControls[i].show(this.overviewGrid.element);\n    }\n    this.overviewControls = overviewControls;\n    this.update();\n  }\n\n  set showingScreenshots(isShowing: boolean) {\n    this.overviewGrid.showingScreenshots = isShowing;\n  }\n\n  setBounds(minimumBoundary: Trace.Types.Timing.MilliSeconds, maximumBoundary: Trace.Types.Timing.MilliSeconds): void {\n    if (minimumBoundary === this.overviewCalculator.minimumBoundary() &&\n        maximumBoundary === this.overviewCalculator.maximumBoundary()) {\n      return;\n    }\n    this.overviewCalculator.setBounds(minimumBoundary, maximumBoundary);\n    this.overviewGrid.setResizeEnabled(true);\n    this.cursorEnabled = true;\n    this.scheduleUpdate(minimumBoundary, maximumBoundary);\n  }\n\n  setNavStartTimes(navStartTimes: readonly Trace.Types.Events.NavigationStart[]): void {\n    this.overviewCalculator.setNavStartTimes(navStartTimes);\n  }\n\n  scheduleUpdate(start?: Trace.Types.Timing.MilliSeconds, end?: Trace.Types.Timing.MilliSeconds): void {\n    void this.updateThrottler.schedule(async () => {\n      this.update(start, end);\n    });\n  }\n\n  override update(start?: Trace.Types.Timing.MilliSeconds, end?: Trace.Types.Timing.MilliSeconds): void {\n    if (!this.isShowing()) {\n      return;\n    }\n    this.overviewCalculator.setDisplayWidth(this.overviewGrid.clientWidth());\n    for (let i = 0; i < this.overviewControls.length; ++i) {\n      this.overviewControls[i].update(start, end);\n    }\n    this.overviewGrid.updateDividers(this.overviewCalculator);\n    this.updateMarkers();\n    this.updateWindow();\n  }\n\n  setMarkers(markers: Map<number, HTMLDivElement>): void {\n    this.markers = markers;\n  }\n\n  getMarkers(): Map<number, HTMLDivElement> {\n    return this.markers;\n  }\n\n  /**\n   * Dim the time marker outside the highlight time bounds.\n   *\n   * @param highlightBounds the time bounds to highlight, if it is empty, it means to highlight everything.\n   */\n  #dimMarkers(highlightBounds?: Trace.Types.Timing.TraceWindowMicroSeconds): void {\n    for (const time of this.markers.keys()) {\n      const marker = this.markers.get(time);\n      if (!marker) {\n        continue;\n      }\n      const timeInMicroSeconds = Trace.Helpers.Timing.millisecondsToMicroseconds(Trace.Types.Timing.MilliSeconds(time));\n      const dim = highlightBounds && !Trace.Helpers.Timing.timestampIsInBounds(highlightBounds, timeInMicroSeconds);\n\n      // `filter: grayscale(1)`  will make the element fully completely grayscale.\n      marker.style.filter = `grayscale(${dim ? 1 : 0})`;\n    }\n  }\n\n  private updateMarkers(): void {\n    const filteredMarkers = new Map<number, Element>();\n    for (const time of this.markers.keys()) {\n      const marker = this.markers.get(time) as HTMLElement;\n      const position = Math.round(this.overviewCalculator.computePosition(Trace.Types.Timing.MilliSeconds(time)));\n      // Limit the number of markers to one per pixel.\n      if (filteredMarkers.has(position)) {\n        continue;\n      }\n      filteredMarkers.set(position, marker);\n      marker.style.left = position + 'px';\n    }\n    this.overviewGrid.removeEventDividers();\n    this.overviewGrid.addEventDividers([...filteredMarkers.values()]);\n  }\n\n  reset(): void {\n    this.windowStartTime = 0;\n    this.windowEndTime = Infinity;\n    this.overviewCalculator.reset();\n    this.overviewGrid.reset();\n    this.overviewGrid.setResizeEnabled(false);\n    this.cursorEnabled = false;\n    this.hideCursor();\n    this.markers = new Map();\n    for (const control of this.overviewControls) {\n      control.reset();\n    }\n    this.overviewInfo.hide();\n    this.scheduleUpdate();\n  }\n\n  private onClick(event: Event): boolean {\n    return this.overviewControls.some(control => control.onClick(event));\n  }\n\n  private onBreadcrumbAdded(): void {\n    this.dispatchEventToListeners(Events.OVERVIEW_PANE_BREADCRUMB_ADDED, {\n      startTime: Trace.Types.Timing.MilliSeconds(this.windowStartTime),\n      endTime: Trace.Types.Timing.MilliSeconds(this.windowEndTime),\n    });\n  }\n\n  private onWindowChanged(event: Common.EventTarget.EventTargetEvent<WindowChangedWithPositionEvent>): void {\n    if (this.muteOnWindowChanged) {\n      return;\n    }\n    // Always use first control as a time converter.\n    if (!this.overviewControls.length) {\n      return;\n    }\n\n    this.windowStartTime =\n        event.data.rawStartValue === this.overviewCalculator.minimumBoundary() ? 0 : event.data.rawStartValue;\n    this.windowEndTime =\n        event.data.rawEndValue === this.overviewCalculator.maximumBoundary() ? Infinity : event.data.rawEndValue;\n\n    const windowTimes = {\n      startTime: Trace.Types.Timing.MilliSeconds(this.windowStartTime),\n      endTime: Trace.Types.Timing.MilliSeconds(this.windowEndTime),\n    };\n\n    this.dispatchEventToListeners(Events.OVERVIEW_PANE_WINDOW_CHANGED, windowTimes);\n  }\n\n  setWindowTimes(startTime: number, endTime: number): void {\n    if (startTime === this.windowStartTime && endTime === this.windowEndTime) {\n      return;\n    }\n    this.windowStartTime = startTime;\n    this.windowEndTime = endTime;\n    this.updateWindow();\n    this.dispatchEventToListeners(Events.OVERVIEW_PANE_WINDOW_CHANGED, {\n      startTime: Trace.Types.Timing.MilliSeconds(startTime),\n      endTime: Trace.Types.Timing.MilliSeconds(endTime),\n    });\n  }\n\n  private updateWindow(): void {\n    if (!this.overviewControls.length) {\n      return;\n    }\n    const absoluteMin = this.overviewCalculator.minimumBoundary();\n    const timeSpan = this.overviewCalculator.maximumBoundary() - absoluteMin;\n    const haveRecords = absoluteMin > 0;\n    const left = haveRecords && this.windowStartTime ? Math.min((this.windowStartTime - absoluteMin) / timeSpan, 1) : 0;\n    const right = haveRecords && this.windowEndTime < Infinity ? (this.windowEndTime - absoluteMin) / timeSpan : 1;\n    this.muteOnWindowChanged = true;\n    this.overviewGrid.setWindowRatio(left, right);\n    this.muteOnWindowChanged = false;\n  }\n\n  /**\n   * This function will create three rectangles and a polygon, which will be use to highlight the time range.\n   */\n  #initializeDimHighlightSVG(): void {\n    // Set up the desaturation mask\n    const defs = UI.UIUtils.createSVGChild(this.#dimHighlightSVG, 'defs');\n    const mask = UI.UIUtils.createSVGChild(defs, 'mask') as SVGMaskElement;\n    mask.id = 'dim-highlight-cutouts';\n    /* Within the mask...\n        - black fill = punch, fully transparently, through to the next thing. these are the cutouts to the color.\n        - white fill = be 100% desaturated\n        - grey fill  = show at the Lightness level of grayscale/desaturation\n    */\n\n    // This a rectangle covers the entire SVG and has a light gray fill. This sets the base desaturation level for the\n    // masked area.\n    // The colour here should be fixed because the colour's brightness changes the desaturation level.\n    const showAllRect = UI.UIUtils.createSVGChild(mask, 'rect');\n    showAllRect.setAttribute('width', '100%');\n    showAllRect.setAttribute('height', '100%');\n    showAllRect.setAttribute('fill', 'hsl(0deg 0% 95%)');\n\n    // This rectangle also covers the entire SVG and has a fill with the current background. It is linked to the\n    // `mask` element.\n    // The `mixBlendMode` is set to 'saturation', so this rectangle will completely desaturate the area it covers\n    // within the mask.\n    const desaturateRect = UI.UIUtils.createSVGChild(this.#dimHighlightSVG, 'rect', 'background') as SVGRectElement;\n    desaturateRect.setAttribute('width', '100%');\n    desaturateRect.setAttribute('height', '100%');\n    desaturateRect.setAttribute('fill', ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background'));\n    desaturateRect.setAttribute('mask', `url(#${mask.id})`);\n    desaturateRect.style.mixBlendMode = 'saturation';\n\n    // This rectangle is positioned at the top of the not-to-desaturate time range, with full height and a black fill.\n    // It will be used to \"punch\" through the desaturation, revealing the original colours beneath.\n    // The *black* fill on the \"punch-out\" rectangle is crucial because black is fully transparent in a mask.\n    const punchRect = UI.UIUtils.createSVGChild(mask, 'rect', 'punch');\n    punchRect.setAttribute('y', '0');\n    punchRect.setAttribute('height', '100%');\n    punchRect.setAttribute('fill', 'black');\n\n    // This polygon is for the bracket beyond the not desaturated area.\n    const bracketColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-state-on-header-hover');\n    const bracket = UI.UIUtils.createSVGChild(this.#dimHighlightSVG, 'polygon') as SVGRectElement;\n    bracket.setAttribute('fill', bracketColor);\n\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      const desaturateRect = this.#dimHighlightSVG.querySelector('rect.background');\n      desaturateRect?.setAttribute('fill', ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background'));\n\n      const bracket = this.#dimHighlightSVG.querySelector('polygon');\n      bracket?.setAttribute(\n          'fill', ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-state-on-header-hover'));\n    });\n  }\n\n  #addBracket(left: number, right: number): void {\n    const TRIANGLE_SIZE = 5;  // px size of triangles\n    const bracket = this.#dimHighlightSVG.querySelector('polygon');\n    bracket?.setAttribute(\n        'points',\n        `${left},0 ${left},${TRIANGLE_SIZE} ${left + TRIANGLE_SIZE - 1},1 ${right - TRIANGLE_SIZE - 1},1 ${right},${\n            TRIANGLE_SIZE} ${right},0`);\n    bracket?.classList.remove('hidden');\n  }\n\n  #hideBracket(): void {\n    const bracket = this.#dimHighlightSVG.querySelector('polygon');\n    bracket?.classList.add('hidden');\n  }\n\n  highlightBounds(bounds: Trace.Types.Timing.TraceWindowMicroSeconds, withBracket: boolean): void {\n    const left = this.overviewCalculator.computePosition(Trace.Helpers.Timing.microSecondsToMilliseconds(bounds.min));\n    const right = this.overviewCalculator.computePosition(Trace.Helpers.Timing.microSecondsToMilliseconds(bounds.max));\n    this.#dimMarkers(bounds);\n    // Update the punch out rectangle to the not-to-desaturate time range.\n    const punchRect = this.#dimHighlightSVG.querySelector('rect.punch');\n    punchRect?.setAttribute('x', left.toString());\n    punchRect?.setAttribute('width', (right - left).toString());\n\n    if (withBracket) {\n      this.#addBracket(left, right);\n    } else {\n      this.#hideBracket();\n    }\n\n    this.#dimHighlightSVG.classList.remove('hidden');\n  }\n\n  clearBoundsHighlight(): void {\n    this.#dimMarkers();\n    this.#dimHighlightSVG.classList.add('hidden');\n  }\n}\n\nexport const enum Events {\n  OVERVIEW_PANE_WINDOW_CHANGED = 'OverviewPaneWindowChanged',\n  OVERVIEW_PANE_BREADCRUMB_ADDED = 'OverviewPaneBreadcrumbAdded',\n  OVERVIEW_PANE_MOUSE_MOVE = 'OverviewPaneMouseMove',\n  OVERVIEW_PANE_MOUSE_LEAVE = 'OverviewPaneMouseLeave',\n}\n\nexport interface OverviewPaneWindowChangedEvent {\n  startTime: Trace.Types.Timing.MilliSeconds;\n  endTime: Trace.Types.Timing.MilliSeconds;\n}\n\nexport interface OverviewPaneBreadcrumbAddedEvent {\n  startTime: Trace.Types.Timing.MilliSeconds;\n  endTime: Trace.Types.Timing.MilliSeconds;\n}\n\nexport interface OverviewPaneMouseMoveEvent {\n  timeInMicroSeconds: Trace.Types.Timing.MicroSeconds;\n}\n\nexport type EventTypes = {\n  [Events.OVERVIEW_PANE_WINDOW_CHANGED]: OverviewPaneWindowChangedEvent,\n  [Events.OVERVIEW_PANE_BREADCRUMB_ADDED]: OverviewPaneBreadcrumbAddedEvent,\n  [Events.OVERVIEW_PANE_MOUSE_MOVE]: OverviewPaneMouseMoveEvent,\n  [Events.OVERVIEW_PANE_MOUSE_LEAVE]: void,\n};\n\nexport interface TimelineOverview {\n  show(parentElement: Element, insertBefore?: Element|null): void;\n  // if start and end are specified, data will be filtered and only data within those bound will be displayed\n  update(start?: Trace.Types.Timing.MilliSeconds, end?: Trace.Types.Timing.MilliSeconds): void;\n  dispose(): void;\n  reset(): void;\n  overviewInfoPromise(x: number): Promise<Element|null>;\n  onClick(event: Event): boolean;\n  setCalculator(calculator: TimelineOverviewCalculator): void;\n}\n\nexport class TimelineOverviewBase extends UI.Widget.VBox implements TimelineOverview {\n  private calculatorInternal: TimelineOverviewCalculator|null;\n  private canvas: HTMLCanvasElement;\n  private contextInternal: CanvasRenderingContext2D|null;\n\n  constructor() {\n    super();\n    this.calculatorInternal = null;\n    this.canvas = (this.element.createChild('canvas', 'fill') as HTMLCanvasElement);\n    this.contextInternal = this.canvas.getContext('2d');\n  }\n\n  width(): number {\n    return this.canvas.width;\n  }\n\n  height(): number {\n    return this.canvas.height;\n  }\n\n  context(): CanvasRenderingContext2D {\n    if (!this.contextInternal) {\n      throw new Error('Unable to retrieve canvas context');\n    }\n    return this.contextInternal as CanvasRenderingContext2D;\n  }\n\n  calculator(): TimelineOverviewCalculator|null {\n    return this.calculatorInternal;\n  }\n\n  override update(): void {\n    throw new Error('Not implemented');\n  }\n\n  dispose(): void {\n    this.detach();\n  }\n\n  reset(): void {\n  }\n\n  async overviewInfoPromise(_x: number): Promise<Element|null> {\n    return null;\n  }\n\n  setCalculator(calculator: TimelineOverviewCalculator): void {\n    this.calculatorInternal = calculator;\n  }\n\n  onClick(_event: Event): boolean {\n    return false;\n  }\n\n  resetCanvas(): void {\n    if (this.element.clientWidth) {\n      this.setCanvasSize(this.element.clientWidth, this.element.clientHeight);\n    }\n  }\n\n  setCanvasSize(width: number, height: number): void {\n    this.canvas.width = width * window.devicePixelRatio;\n    this.canvas.height = height * window.devicePixelRatio;\n  }\n}\n\nexport class OverviewInfo {\n  private readonly anchorElement: Element;\n  private glassPane: UI.GlassPane.GlassPane;\n  private visible: boolean;\n  private readonly element: Element;\n\n  constructor(anchor: Element) {\n    this.anchorElement = anchor;\n    this.glassPane = new UI.GlassPane.GlassPane();\n    this.glassPane.setPointerEventsBehavior(UI.GlassPane.PointerEventsBehavior.PIERCE_CONTENTS);\n    this.glassPane.setMarginBehavior(UI.GlassPane.MarginBehavior.ARROW);\n    this.glassPane.setSizeBehavior(UI.GlassPane.SizeBehavior.MEASURE_CONTENT);\n    this.visible = false;\n    this.element = UI.UIUtils\n                       .createShadowRootWithCoreStyles(this.glassPane.contentElement, {\n                         cssFile: [timelineOverviewInfoStyles],\n                         delegatesFocus: undefined,\n                       })\n                       .createChild('div', 'overview-info');\n  }\n\n  async setContent(contentPromise: Promise<DocumentFragment>): Promise<void> {\n    this.visible = true;\n    const content = await contentPromise;\n    if (!this.visible) {\n      return;\n    }\n    this.element.removeChildren();\n    this.element.appendChild(content);\n    this.glassPane.setContentAnchorBox(this.anchorElement.boxInWindow());\n    if (!this.glassPane.isShowing()) {\n      this.glassPane.show((this.anchorElement.ownerDocument as Document));\n    }\n  }\n\n  hide(): void {\n    this.visible = false;\n    this.glassPane.hide();\n  }\n}\n"],
  "mappings": "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",
  "names": ["desaturateRect", "bracket", "Events"]
}
