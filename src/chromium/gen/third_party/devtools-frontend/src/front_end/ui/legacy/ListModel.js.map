{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/ListModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\n\nexport class ListModel<T> extends Common.ObjectWrapper.ObjectWrapper<EventTypes<T>> implements Iterable<T> {\n  private items: T[];\n  constructor(items?: T[]) {\n    super();\n    this.items = items || [];\n  }\n\n  [Symbol.iterator](): Iterator<T> {\n    return this.items[Symbol.iterator]();\n  }\n\n  get length(): number {\n    return this.items.length;\n  }\n\n  at(index: number): T {\n    return this.items[index];\n  }\n\n  every(callback: (arg0: T) => boolean): boolean {\n    return this.items.every(callback);\n  }\n\n  filter(callback: (arg0: T) => boolean): T[] {\n    return this.items.filter(callback);\n  }\n\n  find(callback: (arg0: T) => boolean): T|undefined {\n    return this.items.find(callback);\n  }\n\n  findIndex(callback: (arg0: T) => boolean): number {\n    return this.items.findIndex(callback);\n  }\n\n  indexOf(value: T, fromIndex?: number): number {\n    return this.items.indexOf(value, fromIndex);\n  }\n\n  insert(index: number, value: T): void {\n    this.items.splice(index, 0, value);\n    this.replaced(index, [], 1);\n  }\n\n  insertWithComparator(value: T, comparator: (arg0: T, arg1: T) => number): void {\n    this.insert(Platform.ArrayUtilities.lowerBound(this.items, value, comparator), value);\n  }\n\n  join(separator?: string): string {\n    return this.items.join(separator);\n  }\n\n  remove(index: number): T {\n    const result = this.items[index];\n    this.items.splice(index, 1);\n    this.replaced(index, [result], 0);\n    return result;\n  }\n\n  replace(index: number, value: T, keepSelectedIndex?: boolean): T {\n    const oldValue = this.items[index];\n    this.items[index] = value;\n    this.replaced(index, [oldValue], 1, keepSelectedIndex);\n    return oldValue;\n  }\n\n  replaceRange(from: number, to: number, items: T[]): T[] {\n    let removed;\n    if (items.length < 10000) {\n      removed = this.items.splice(from, to - from, ...items);\n    } else {\n      removed = this.items.slice(from, to);\n      // Splice may fail with too many arguments.\n      const before = this.items.slice(0, from);\n      const after = this.items.slice(to);\n      this.items = [...before, ...items, ...after];\n    }\n    this.replaced(from, removed, items.length);\n    return removed;\n  }\n\n  replaceAll(items: T[]): T[] {\n    const oldItems = this.items.slice();\n    this.items = items;\n    this.replaced(0, oldItems, items.length);\n    return oldItems;\n  }\n\n  slice(from?: number, to?: number): T[] {\n    return this.items.slice(from, to);\n  }\n\n  some(callback: (arg0: T) => boolean): boolean {\n    return this.items.some(callback);\n  }\n\n  private replaced(index: number, removed: T[], inserted: number, keepSelectedIndex?: boolean): void {\n    this.dispatchEventToListeners(Events.ITEMS_REPLACED, {index, removed, inserted, keepSelectedIndex});\n  }\n}\n\nexport const enum Events {\n  ITEMS_REPLACED = 'ItemsReplaced',\n}\n\nexport interface ItemsReplacedEvent<T> {\n  index: number;\n  removed: T[];\n  inserted: number;\n  keepSelectedIndex?: boolean;\n}\n\nexport type EventTypes<T> = {\n  [Events.ITEMS_REPLACED]: ItemsReplacedEvent<T>,\n};\n"],
  "mappings": "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",
  "names": ["Events"]
}
