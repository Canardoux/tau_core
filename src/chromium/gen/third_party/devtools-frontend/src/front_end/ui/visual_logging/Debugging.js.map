{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/visual_logging/Debugging.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\n\nimport type {Loggable} from './Loggable.js';\nimport {type LoggingConfig, VisualElements} from './LoggingConfig.js';\nimport {getLoggingState, type LoggingState} from './LoggingState.js';\n\nlet veDebuggingEnabled = false;\nlet debugPopover: HTMLElement|null = null;\nconst nonDomDebugElements = new WeakMap<Loggable, HTMLElement>();\n\nfunction setVeDebuggingEnabled(enabled: boolean): void {\n  veDebuggingEnabled = enabled;\n  if (enabled && !debugPopover) {\n    debugPopover = document.createElement('div');\n    debugPopover.classList.add('ve-debug');\n    debugPopover.style.position = 'absolute';\n    debugPopover.style.bottom = '100px';\n    debugPopover.style.left = '100px';\n    debugPopover.style.background = 'black';\n    debugPopover.style.color = 'white';\n    debugPopover.style.zIndex = '100000';\n    document.body.appendChild(debugPopover);\n  }\n}\n\n// @ts-ignore\nglobalThis.setVeDebuggingEnabled = setVeDebuggingEnabled;\n\nexport function processForDebugging(loggable: Loggable): void {\n  const loggingState = getLoggingState(loggable);\n  if (!veDebuggingEnabled || !loggingState || loggingState.processedForDebugging) {\n    return;\n  }\n  if (loggable instanceof Element) {\n    processElementForDebugging(loggable, loggingState);\n  } else {\n    processNonDomLoggableForDebugging(loggable, loggingState);\n  }\n}\n\nfunction showDebugPopover(content: string): void {\n  if (!debugPopover) {\n    return;\n  }\n  debugPopover.style.display = 'block';\n  debugPopover.innerHTML = content;\n}\n\nfunction processElementForDebugging(element: Element, loggingState: LoggingState): void {\n  if (element.tagName === 'OPTION') {\n    if (loggingState.parent?.selectOpen && debugPopover) {\n      debugPopover.innerHTML += '<br>' + debugString(loggingState.config);\n      loggingState.processedForDebugging = true;\n    }\n  } else {\n    (element as HTMLElement).style.outline = 'solid 1px red';\n    element.addEventListener('mouseenter', () => {\n      assertNotNullOrUndefined(debugPopover);\n      const pathToRoot = [loggingState];\n      let ancestor = loggingState.parent;\n      while (ancestor) {\n        pathToRoot.push(ancestor);\n        ancestor = ancestor.parent;\n      }\n      showDebugPopover(pathToRoot.map(s => debugString(s.config)).join('<br>'));\n    }, {capture: true});\n    element.addEventListener('mouseleave', () => {\n      assertNotNullOrUndefined(debugPopover);\n      debugPopover.style.display = 'none';\n    }, {capture: true});\n    loggingState.processedForDebugging = true;\n  }\n}\n\ntype EventType = 'Click'|'Drag'|'Hover'|'Change'|'KeyDown'|'Resize';\nexport function processEventForDebugging(\n    event: EventType, state: LoggingState|null, extraInfo?: EventAttributes): void {\n  const format = localStorage.getItem('veDebugLoggingEnabled');\n  if (!format) {\n    return;\n  }\n\n  switch (format) {\n    case DebugLoggingFormat.INTUITIVE:\n      processEventForIntuitiveDebugging(event, state, extraInfo);\n      break;\n    case DebugLoggingFormat.TEST:\n      processEventForTestDebugging(event, state, extraInfo);\n      break;\n    case DebugLoggingFormat.AD_HOC_ANALYSIS:\n      processEventForAdHocAnalysisDebugging(event, state, extraInfo);\n      break;\n  }\n}\n\nexport function processEventForIntuitiveDebugging(\n    event: EventType, state: LoggingState|null, extraInfo?: EventAttributes): void {\n  const entry: IntuitiveLogEntry = {\n    event,\n    ve: state ? VisualElements[state?.config.ve] : undefined,\n    veid: state?.veid,\n    context: state?.config.context,\n    time: Date.now() - sessionStartTime,\n    ...extraInfo,\n  };\n  deleteUndefinedFields(entry);\n  maybeLogDebugEvent(entry);\n}\n\nexport function processEventForTestDebugging(\n    event: EventType, state: LoggingState|null, _extraInfo?: EventAttributes): void {\n  lastImpressionLogEntry = null;\n  maybeLogDebugEvent(\n      {interaction: `${event}: ${veTestKeys.get(state?.veid || 0) || (state?.veid ? '<UNKNOWN>' : '')}`});\n  checkPendingEventExpectation();\n}\n\nexport function processEventForAdHocAnalysisDebugging(\n    event: EventType, state: LoggingState|null, extraInfo?: EventAttributes): void {\n  const ve = state ? adHocAnalysisEntries.get(state.veid) : null;\n  if (ve) {\n    const interaction: AdHocAnalysisInteraction = {time: Date.now() - sessionStartTime, type: event, ...extraInfo};\n    deleteUndefinedFields(interaction);\n    ve.interactions.push(interaction);\n  }\n}\n\nfunction deleteUndefinedFields<T>(entry: T): void {\n  for (const stringKey in entry) {\n    const key = stringKey as keyof T;\n    if (typeof entry[key] === 'undefined') {\n      delete entry[key];\n    }\n  }\n}\n\nexport type EventAttributes = {\n  context?: string,\n  width?: number,\n  height?: number,\n  mouseButton?: number,\n  doubleClick?: boolean,\n};\n\ntype VisualElementAttributes = {\n  ve: string,\n  veid: number,\n  context?: string,\n  width?: number,\n  height?: number,\n};\n\ntype IntuitiveLogEntry = {\n  event?: EventType|'Impression'|'SessionStart',\n  children?: IntuitiveLogEntry[],\n  parent?: number,\n  time?: number,\n}&Partial<VisualElementAttributes>;\n\ntype AdHocAnalysisVisualElement = VisualElementAttributes&{\n  parent?: AdHocAnalysisVisualElement,\n};\n\ntype AdHocAnalysisInteraction = {\n  type: EventType,\n  time: number,\n}&EventAttributes;\n\ntype AdHocAnalysisLogEntry = AdHocAnalysisVisualElement&{\n  time: number,\n  interactions: AdHocAnalysisInteraction[],\n};\n\ntype TestLogEntry = {\n  impressions: string[],\n}|{\n  interaction: string,\n};\n\nexport function processImpressionsForDebugging(states: LoggingState[]): void {\n  const format = localStorage.getItem('veDebugLoggingEnabled');\n  switch (format) {\n    case DebugLoggingFormat.INTUITIVE:\n      processImpressionsForIntuitiveDebugLog(states);\n      break;\n    case DebugLoggingFormat.TEST:\n      processImpressionsForTestDebugLog(states);\n      break;\n    case DebugLoggingFormat.AD_HOC_ANALYSIS:\n      processImpressionsForAdHocAnalysisDebugLog(states);\n      break;\n    default:\n  }\n}\n\nfunction processImpressionsForIntuitiveDebugLog(states: LoggingState[]): void {\n  const impressions = new Map<number, IntuitiveLogEntry>();\n  for (const state of states) {\n    const entry: IntuitiveLogEntry = {\n      event: 'Impression',\n      ve: VisualElements[state.config.ve],\n      context: state?.config.context,\n      width: state.size.width,\n      height: state.size.height,\n      veid: state.veid,\n    };\n    deleteUndefinedFields(entry);\n\n    impressions.set(state.veid, entry);\n    if (!state.parent || !impressions.has(state.parent?.veid)) {\n      entry.parent = state.parent?.veid;\n    } else {\n      const parent = impressions.get(state.parent?.veid) as IntuitiveLogEntry;\n      parent.children = parent.children || [];\n      parent.children.push(entry);\n    }\n  }\n\n  const entries = [...impressions.values()].filter(i => 'parent' in i);\n  if (entries.length === 1) {\n    entries[0].time = Date.now() - sessionStartTime;\n    maybeLogDebugEvent(entries[0]);\n  } else {\n    maybeLogDebugEvent({event: 'Impression', children: entries, time: Date.now() - sessionStartTime});\n  }\n}\n\nconst veTestKeys = new Map<number, string>();\nlet lastImpressionLogEntry: {impressions: string[]}|null = null;\n\nfunction processImpressionsForTestDebugLog(states: LoggingState[]): void {\n  if (!lastImpressionLogEntry) {\n    lastImpressionLogEntry = {impressions: []};\n    veDebugEventsLog.push(lastImpressionLogEntry);\n  }\n  for (const state of states) {\n    let key = '';\n    if (state.parent) {\n      key = (veTestKeys.get(state.parent.veid) || '<UNKNOWN>') + ' > ';\n    }\n    key += VisualElements[state.config.ve];\n    if (state.config.context) {\n      key += ': ' + state.config.context;\n    }\n    veTestKeys.set(state.veid, key);\n    lastImpressionLogEntry.impressions.push(key);\n  }\n  checkPendingEventExpectation();\n}\n\nconst adHocAnalysisEntries = new Map<number, AdHocAnalysisLogEntry>();\n\nfunction processImpressionsForAdHocAnalysisDebugLog(states: LoggingState[]): void {\n  for (const state of states) {\n    const buildVe = (state: LoggingState): AdHocAnalysisVisualElement => {\n      const ve: AdHocAnalysisVisualElement = {\n        ve: VisualElements[state.config.ve],\n        veid: state.veid,\n        width: state.size?.width,\n        height: state.size?.height,\n        context: state.config.context,\n      };\n      deleteUndefinedFields(ve);\n      if (state.parent) {\n        ve.parent = buildVe(state.parent);\n      }\n      return ve;\n    };\n    const entry = {...buildVe(state), interactions: [], time: Date.now() - sessionStartTime};\n    adHocAnalysisEntries.set(state.veid, entry);\n    maybeLogDebugEvent(entry);\n  }\n}\n\nfunction processNonDomLoggableForDebugging(loggable: Loggable, loggingState: LoggingState): void {\n  let debugElement = nonDomDebugElements.get(loggable);\n  if (!debugElement) {\n    debugElement = document.createElement('div');\n    debugElement.classList.add('ve-debug');\n    debugElement.style.background = 'black';\n    debugElement.style.color = 'white';\n    debugElement.style.zIndex = '100000';\n    debugElement.textContent = debugString(loggingState.config);\n    nonDomDebugElements.set(loggable, debugElement);\n    setTimeout(() => {\n      if (!loggingState.size?.width || !loggingState.size?.height) {\n        debugElement?.parentElement?.removeChild(debugElement);\n        nonDomDebugElements.delete(loggable);\n      }\n    }, 10000);\n  }\n  const parentDebugElement =\n      parent instanceof HTMLElement ? parent : nonDomDebugElements.get(parent as Loggable) || debugPopover;\n  assertNotNullOrUndefined(parentDebugElement);\n  if (!parentDebugElement.classList.contains('ve-debug')) {\n    debugElement.style.position = 'absolute';\n    parentDebugElement.insertBefore(debugElement, parentDebugElement.firstChild);\n  } else {\n    debugElement.style.marginLeft = '10px';\n    parentDebugElement.appendChild(debugElement);\n  }\n}\n\nexport function debugString(config: LoggingConfig): string {\n  const components = [VisualElements[config.ve]];\n  if (config.context) {\n    components.push(`context: ${config.context}`);\n  }\n  if (config.parent) {\n    components.push(`parent: ${config.parent}`);\n  }\n  if (config.track) {\n    components.push(`track: ${\n        Object.entries(config.track)\n            .map(([key, value]) => `${key}${typeof value === 'string' ? `: ${value}` : ''}`)\n            .join(', ')}`);\n  }\n  return components.join('; ');\n}\n\nconst veDebugEventsLog: (IntuitiveLogEntry|AdHocAnalysisLogEntry|TestLogEntry)[] = [];\n\nfunction maybeLogDebugEvent(entry: IntuitiveLogEntry|AdHocAnalysisLogEntry|TestLogEntry): void {\n  const format = localStorage.getItem('veDebugLoggingEnabled');\n  if (!format) {\n    return;\n  }\n  veDebugEventsLog.push(entry);\n  if (format === DebugLoggingFormat.INTUITIVE) {\n    // eslint-disable-next-line no-console\n    console.info('VE Debug:', entry);\n  }\n}\n\nexport const enum DebugLoggingFormat {\n  INTUITIVE = 'Intuitive',\n  TEST = 'Test',\n  AD_HOC_ANALYSIS = 'AdHocAnalysis',\n}\n\nexport function setVeDebugLoggingEnabled(enabled: boolean, format = DebugLoggingFormat.INTUITIVE): void {\n  if (enabled) {\n    localStorage.setItem('veDebugLoggingEnabled', format);\n  } else {\n    localStorage.removeItem('veDebugLoggingEnabled');\n  }\n}\n\nfunction findVeDebugImpression(veid: number, includeAncestorChain?: boolean): IntuitiveLogEntry|undefined {\n  const findImpression = (entry: IntuitiveLogEntry): IntuitiveLogEntry|undefined => {\n    if (entry.event === 'Impression' && entry.veid === veid) {\n      return entry;\n    }\n    let i = 0;\n    for (const childEntry of entry.children || []) {\n      const matchingEntry = findImpression(childEntry);\n      if (matchingEntry) {\n        if (includeAncestorChain) {\n          const children = [];\n          children[i] = matchingEntry;\n          return {...entry, children};\n        }\n        return matchingEntry;\n      }\n      ++i;\n    }\n    return undefined;\n  };\n  return findImpression({children: veDebugEventsLog as IntuitiveLogEntry[]});\n}\n\nfunction fieldValuesForSql<T>(\n    obj: T,\n    fields: {strings: readonly(keyof T)[], numerics: readonly(keyof T)[], booleans: readonly(keyof T)[]}): string {\n  return [\n    ...fields.strings.map(f => obj[f] ? `\"${obj[f]}\"` : '$NullString'),\n    ...fields.numerics.map(f => obj[f] ?? 'null'),\n    ...fields.booleans.map(f => obj[f] ?? '$NullBool'),\n  ].join(', ');\n}\n\nfunction exportAdHocAnalysisLogForSql(): void {\n  const VE_FIELDS = {\n    strings: ['ve', 'context'] as const,\n    numerics: ['veid', 'width', 'height'] as const,\n    booleans: [] as const,\n  };\n  const INTERACTION_FIELDS = {\n    strings: ['type', 'context'] as const,\n    numerics: ['width', 'height', 'mouseButton', 'time'] as const,\n    booleans: ['width', 'height', 'mouseButton', 'time'] as const,\n  };\n\n  const fieldsDefsForSql = (fields: string[]): string => fields.map((f, i) => `$${i + 1} as ${f}`).join(', ');\n\n  const veForSql = (e: AdHocAnalysisVisualElement): string =>\n      `$VeFields(${fieldValuesForSql(e, VE_FIELDS)}, ${e.parent ? `STRUCT(${veForSql(e.parent)})` : null})`;\n\n  const interactionForSql = (i: AdHocAnalysisInteraction): string =>\n      `$Interaction(${fieldValuesForSql(i, INTERACTION_FIELDS)})`;\n\n  const entryForSql = (e: AdHocAnalysisLogEntry): string =>\n      `$Entry(${veForSql(e)}, ([${e.interactions.map(interactionForSql).join(', ')}]), ${e.time})`;\n\n  const entries = veDebugEventsLog as AdHocAnalysisLogEntry[];\n\n  // eslint-disable-next-line no-console\n  console.log(`\nDEFINE MACRO NullString CAST(null AS STRING);\nDEFINE MACRO NullBool CAST(null AS BOOL);\nDEFINE MACRO VeFields ${fieldsDefsForSql([\n    ...VE_FIELDS.strings,\n    ...VE_FIELDS.numerics,\n    'parent',\n  ])};\nDEFINE MACRO Interaction STRUCT(${\n      fieldsDefsForSql([\n        ...INTERACTION_FIELDS.strings,\n        ...INTERACTION_FIELDS.numerics,\n        ...INTERACTION_FIELDS.booleans,\n      ])});\nDEFINE MACRO Entry STRUCT($1, $2 AS interactions, $3 AS time);\n\n// This fake entry put first fixes nested struct fiels names being lost\nDEFINE MACRO FakeVeFields $VeFields(\"\", $NullString, 0, 0, 0, $1);\nDEFINE MACRO FakeVe STRUCT($FakeVeFields($1));\nDEFINE MACRO FakeEntry $Entry($FakeVeFields($FakeVe($FakeVe($FakeVe($FakeVe($FakeVe($FakeVe($FakeVe(null)))))))), ([]), 0);\n\nWITH\n  processed_logs AS (\n      SELECT * FROM UNNEST([\n        $FakeEntry,\n        ${entries.map(entryForSql).join(', \\n')}\n      ])\n    )\n\n\n\nSELECT * FROM processed_logs;`);\n}\n\ntype StateFlowNode = {\n  type: 'Session',\n  children: StateFlowNode[],\n}|({type: 'Impression', children: StateFlowNode[], time: number}&AdHocAnalysisVisualElement)|AdHocAnalysisInteraction;\n\ntype StateFlowMutation = (AdHocAnalysisLogEntry|(AdHocAnalysisInteraction&{veid: number}));\n\nfunction getStateFlowMutations(): StateFlowMutation[] {\n  const mutations: StateFlowMutation[] = [];\n  for (const entry of (veDebugEventsLog as AdHocAnalysisLogEntry[])) {\n    mutations.push(entry);\n    const veid = entry.veid;\n    for (const interaction of entry.interactions) {\n      mutations.push({...interaction, veid});\n    }\n  }\n  mutations.sort((e1, e2) => e1.time - e2.time);\n  return mutations;\n}\n\nclass StateFlowElementsByArea {\n  #data = new Map<number, AdHocAnalysisVisualElement>();\n\n  add(e: AdHocAnalysisVisualElement): void {\n    this.#data.set(e.veid, e);\n  }\n\n  get(veid: number): AdHocAnalysisVisualElement|undefined {\n    return this.#data.get(veid);\n  }\n\n  getArea(e: AdHocAnalysisVisualElement): number {\n    let area = (e.width || 0) * (e.height || 0);\n    const parent = e.parent ? this.#data.get(e.parent?.veid) : null;\n    if (!parent) {\n      return area;\n    }\n    const parentArea = this.getArea(parent);\n    if (area > parentArea) {\n      area = parentArea;\n    }\n    return area;\n  }\n\n  get data(): readonly AdHocAnalysisVisualElement[] {\n    return [...this.#data.values()].filter(e => this.getArea(e)).sort((e1, e2) => this.getArea(e2) - this.getArea(e1));\n  }\n}\n\nfunction updateStateFlowTree(\n    rootNode: StateFlowNode, elements: StateFlowElementsByArea, time: number,\n    interactions: AdHocAnalysisInteraction[]): void {\n  let node = rootNode;\n  for (const element of elements.data) {\n    if (!('children' in node)) {\n      return;\n    }\n    let nextNode = node.children[node.children.length - 1];\n    const nextNodeId = nextNode?.type === 'Impression' ? nextNode.veid : null;\n    if (nextNodeId !== element.veid) {\n      node.children.push(...interactions);\n      interactions.length = 0;\n      nextNode = {type: 'Impression', ve: element.ve, veid: element.veid, context: element.context, time, children: []};\n      node.children.push(nextNode);\n    }\n    node = nextNode;\n  }\n}\n\nfunction normalizeNode(node: StateFlowNode): void {\n  if (node.type !== 'Impression') {\n    return;\n  }\n  while (node.children.length === 1) {\n    if (node.children[0].type === 'Impression') {\n      node.children = node.children[0].children;\n    }\n  }\n  for (const child of node.children) {\n    normalizeNode(child);\n  }\n}\n\nfunction buildStateFlow(): StateFlowNode {\n  const mutations = getStateFlowMutations();\n  const elements = new StateFlowElementsByArea();\n  const rootNode: StateFlowNode = {type: 'Session', children: []};\n\n  let time = mutations[0].time;\n  const interactions: AdHocAnalysisInteraction[] = [];\n  for (const mutation of mutations) {\n    if (mutation.time > time + 1000) {\n      updateStateFlowTree(rootNode, elements, time, interactions);\n      interactions.length = 0;\n    }\n    if (!('type' in mutation)) {\n      elements.add(mutation);\n    } else if (mutation.type === 'Resize') {\n      const element = elements.get(mutation.veid);\n      if (!element) {\n        continue;\n      }\n      const oldArea = elements.getArea(element);\n      element.width = mutation.width;\n      element.height = mutation.height;\n      if (elements.getArea(element) !== 0 && oldArea !== 0) {\n        interactions.push(mutation);\n      }\n    } else {\n      interactions.push(mutation);\n    }\n    time = mutation.time;\n  }\n  updateStateFlowTree(rootNode, elements, time, interactions);\n\n  normalizeNode(rootNode);\n  return rootNode;\n}\n\nlet sessionStartTime: number = Date.now();\n\nexport function processStartLoggingForDebugging(): void {\n  sessionStartTime = Date.now();\n  if (localStorage.getItem('veDebugLoggingEnabled') === DebugLoggingFormat.INTUITIVE) {\n    maybeLogDebugEvent({event: 'SessionStart'});\n  }\n}\n\n// Compares the 'actual' log entry against the 'expected'.\n// For impressions events to match, all expected impressions need to be present\n// in the actual event. Unexected impressions in the actual event are ignored.\n// Interaction events need to match exactly.\nfunction compareVeEvents(actual: TestLogEntry, expected: TestLogEntry): boolean {\n  if ('interaction' in expected && 'interaction' in actual) {\n    return expected.interaction === actual.interaction;\n  }\n  if ('impressions' in expected && 'impressions' in actual) {\n    const actualSet = new Set(actual.impressions);\n    const expectedSet = new Set(expected.impressions);\n    const missing = [...expectedSet].filter(k => !actualSet.has(k));\n\n    return !Boolean(missing.length);\n  }\n  return false;\n}\n\nlet pendingEventExpectation:\n    {expectedEvents: TestLogEntry[], missingEvents?: TestLogEntry[], success: () => void, fail: (arg0: Error) => void}|\n    null = null;\n\nfunction formatImpressions(impressions: string[]): string {\n  const result: string[] = [];\n  let lastImpression = '';\n  for (const impression of impressions.sort()) {\n    if (impression === lastImpression) {\n      continue;\n    }\n    while (!impression.startsWith(lastImpression)) {\n      lastImpression = lastImpression.substr(0, lastImpression.lastIndexOf(' > '));\n    }\n    result.push(' '.repeat(lastImpression.length) + impression.substr(lastImpression.length));\n    lastImpression = impression;\n  }\n  return result.join('\\n');\n}\n\nconst EVENT_EXPECTATION_TIMEOUT = 5000;\n\n// Verifies that VE events contains all the expected events in given order.\n// Unexpected VE events are ignored.\nexport async function expectVeEvents(expectedEvents: TestLogEntry[]): Promise<void> {\n  if (pendingEventExpectation) {\n    throw new Error('VE events expectation already set. Cannot set another one until the previous is resolved');\n  }\n  const {promise, resolve: success, reject: fail} = Promise.withResolvers<void>();\n  pendingEventExpectation = {expectedEvents, success, fail};\n  checkPendingEventExpectation();\n  setTimeout(() => {\n    if (pendingEventExpectation?.missingEvents) {\n      pendingEventExpectation.fail(new Error(\n          'Missing VE Events: ' +\n          pendingEventExpectation.missingEvents\n              .map(e => 'interaction' in e ? e.interaction : formatImpressions(e.impressions))\n              .join('\\n')));\n    }\n  }, EVENT_EXPECTATION_TIMEOUT);\n  return promise;\n}\n\nlet numMatchedEvents = 0;\n\nfunction checkPendingEventExpectation(): void {\n  if (!pendingEventExpectation) {\n    return;\n  }\n  const actualEvents = [...veDebugEventsLog] as TestLogEntry[];\n  for (let i = 0; i < pendingEventExpectation.expectedEvents.length; ++i) {\n    const expectedEvent = pendingEventExpectation.expectedEvents[i];\n    while (true) {\n      if (actualEvents.length <= i) {\n        pendingEventExpectation.missingEvents = pendingEventExpectation.expectedEvents.slice(i);\n        return;\n      }\n      if (!compareVeEvents(actualEvents[i], expectedEvent)) {\n        actualEvents.splice(i, 1);\n      } else {\n        break;\n      }\n    }\n  }\n  numMatchedEvents = veDebugEventsLog.length - actualEvents.length + pendingEventExpectation.expectedEvents.length;\n  pendingEventExpectation.success();\n  pendingEventExpectation = null;\n}\n\nfunction getUnmatchedVeEvents(): string {\n  console.error(numMatchedEvents);\n  return (veDebugEventsLog.slice(numMatchedEvents) as TestLogEntry[])\n      .map(e => 'interaction' in e ? e.interaction : formatImpressions(e.impressions))\n      .join('\\n');\n}\n\n// @ts-ignore\nglobalThis.setVeDebugLoggingEnabled = setVeDebugLoggingEnabled;\n// @ts-ignore\nglobalThis.getUnmatchedVeEvents = getUnmatchedVeEvents;\n// @ts-ignore\nglobalThis.veDebugEventsLog = veDebugEventsLog;\n// @ts-ignore\nglobalThis.findVeDebugImpression = findVeDebugImpression;\n// @ts-ignore\nglobalThis.exportAdHocAnalysisLogForSql = exportAdHocAnalysisLogForSql;\n// @ts-ignore\nglobalThis.buildStateFlow = buildStateFlow;\n// @ts-ignore\nglobalThis.expectVeEvents = expectVeEvents;\n"],
  "mappings": "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",
  "names": ["parent", "state", "DebugLoggingFormat"]
}
