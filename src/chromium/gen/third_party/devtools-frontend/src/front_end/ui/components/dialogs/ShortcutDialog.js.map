{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/dialogs/ShortcutDialog.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport './ButtonDialog.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport type {ButtonDialogData} from './ButtonDialog.js';\nimport shortcutDialogStyles from './shortcutDialog.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n\n  /**\n   * @description Title of question mark button for the shortcuts dialog.\n   */\n  showShortcutTitle: 'Show shortcuts',\n  /**\n   * @description Title of the keyboard shortcuts help menu.\n   */\n  dialogTitle: 'Keyboard shortcuts',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('ui/components/dialogs/ShortcutDialog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-shortcut-dialog': ShortcutDialog;\n  }\n}\n\nexport interface Shortcut {\n  title: string|Platform.UIString.LocalizedString;\n  bindings: string[][];\n}\nexport interface ShortcutDialogData {\n  shortcuts: Shortcut[];\n  open?: boolean;\n}\n\nexport class ShortcutDialog extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #renderBound = this.#render.bind(this);\n\n  #shortcuts: Shortcut[] = [];\n  #openOnRender = false;\n  #prependedElement: HTMLElement|null = null;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [shortcutDialogStyles];\n  }\n\n  set data(data: ShortcutDialogData) {\n    this.#shortcuts = data.shortcuts;\n    if (data.open) {\n      this.#openOnRender = data.open;\n    }\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  prependElement(element: HTMLElement): void {\n    this.#prependedElement = element;\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('Shortcut dialog render was not scheduled');\n    }\n\n    // clang-format off\n    LitHtml.render(\n      html`\n      <devtools-button-dialog .data=${{\n          openOnRender: this.#openOnRender,\n          closeButton: true,\n          dialogTitle: i18nString(UIStrings.dialogTitle),\n          variant: Buttons.Button.Variant.TOOLBAR,\n          iconName: 'help',\n          iconTitle: i18nString(UIStrings.showShortcutTitle),\n        } as ButtonDialogData}>\n        <ul class=\"keybinds-list\">\n          ${(this.#prependedElement) ? html`${this.#prependedElement}` : LitHtml.nothing}\n          ${this.#shortcuts.map(shortcut =>\n            html`\n              <li class=\"keybinds-list-item\">\n                <div class=\"keybinds-list-title\">${shortcut.title}</div>\n                <div class=\"shortcuts-for-actions\">\n                  ${shortcut.bindings.map(binding => {\n                    return html`\n                    <div class=\"keys-container\">\n                      ${binding.map(key => html`\n                          <span class=\"keybinds-key\">${key}</span>\n                      `)}\n                    </div>\n                  `;\n                    })}\n                  </div>\n              </li>`,\n          )}\n        </ul>\n      </devtools-button-dialog>\n      `,\n      this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-shortcut-dialog', ShortcutDialog);\n"],
  "mappings": ";AAGA,OAAO;AAEP,YAAY,UAAU;AAEtB,YAAY,aAAa;AACzB,YAAY,sBAAsB;AAClC,YAAY,aAAa;AAGzB,OAAO,0BAA0B;AAEjC,MAAM,EAAC,KAAI,IAAI;AAEf,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAKhB,mBAAmB;AAAA;AAAA;AAAA;AAAA,EAInB,aAAa;AACf;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,2CAA2C,SAAS;AAC7F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAiB7D,aAAM,uBAAuB,YAAY;AAAA,EACrC,UAAU,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;AAAA,EAC1C,eAAe,KAAK,QAAQ,KAAK,IAAI;AAAA,EAE9C,aAAyB,CAAC;AAAA,EAC1B,gBAAgB;AAAA,EAChB,oBAAsC;AAAA,EAEtC,oBAA0B;AACxB,SAAK,QAAQ,qBAAqB,CAAC,oBAAoB;AAAA,EACzD;AAAA,EAEA,IAAI,KAAK,MAA0B;AACjC,SAAK,aAAa,KAAK;AACvB,QAAI,KAAK,MAAM;AACb,WAAK,gBAAgB,KAAK;AAAA,IAC5B;AAEA,SAAK,iBAAiB,gBAAgB,eAAe,MAAM,KAAK,YAAY;AAAA,EAC9E;AAAA,EAEA,eAAe,SAA4B;AACzC,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,UAAgB;AACd,QAAI,CAAC,iBAAiB,gBAAgB,kBAAkB,IAAI,GAAG;AAC7D,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC5D;AAGA,YAAQ;AAAA,MACN;AAAA,sCACgC;AAAA,QAC5B,cAAc,KAAK;AAAA,QACnB,aAAa;AAAA,QACb,aAAa,WAAW,UAAU,WAAW;AAAA,QAC7C,SAAS,QAAQ,OAAO,QAAQ;AAAA,QAChC,UAAU;AAAA,QACV,WAAW,WAAW,UAAU,iBAAiB;AAAA,MACnD,CAAqB;AAAA;AAAA,YAEhB,KAAK,oBAAqB,OAAO,KAAK,iBAAiB,KAAK,QAAQ,OAAO;AAAA,YAC5E,KAAK,WAAW;AAAA,QAAI,cACpB;AAAA;AAAA,mDAEuC,SAAS,KAAK;AAAA;AAAA,oBAE7C,SAAS,SAAS,IAAI,aAAW;AACjC,iBAAO;AAAA;AAAA,wBAEH,QAAQ,IAAI,SAAO;AAAA,uDACY,GAAG;AAAA,uBACnC,CAAC;AAAA;AAAA;AAAA,QAGJ,CAAC,CAAC;AAAA;AAAA;AAAA,MAGZ,CAAC;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK;AAAA,MAAS,EAAC,MAAM,KAAI;AAAA,IAAC;AAAA,EAE9B;AACF;AAEA,eAAe,OAAO,4BAA4B,cAAc;",
  "names": []
}
