{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/legacy/components/quick_open/QuickOpen.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as UI from '../../legacy.js';\n\nimport {FilteredListWidget, getRegisteredProviders, type Provider} from './FilteredListWidget.js';\n\nconst UIStrings = {\n  /**\n   * @description Text of the hint shows under Quick Open input box\n   */\n  typeToSeeAvailableCommands: 'Type ? to see available commands',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/quick_open/QuickOpen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const history: string[] = [];\n\nexport class QuickOpenImpl {\n  private prefix: string|null;\n  private readonly prefixes: string[];\n  private providers: Map<string, {\n    provider: () => Promise<Provider>,\n    titlePrefix: (() => string),\n    titleSuggestion?: (() => string),\n  }>;\n  private filteredListWidget: FilteredListWidget|null;\n\n  constructor() {\n    this.prefix = null;\n    this.prefixes = [];\n    this.providers = new Map();\n    this.filteredListWidget = null;\n\n    getRegisteredProviders().forEach(this.addProvider.bind(this));\n    this.prefixes.sort((a, b) => b.length - a.length);\n  }\n\n  static show(query: string): void {\n    const quickOpen = new this();\n    const filteredListWidget = new FilteredListWidget(null, history, quickOpen.queryChanged.bind(quickOpen));\n    quickOpen.filteredListWidget = filteredListWidget;\n    filteredListWidget.setHintElement(i18nString(UIStrings.typeToSeeAvailableCommands));\n    filteredListWidget.showAsDialog();\n    filteredListWidget.setQuery(query);\n  }\n\n  private addProvider(extension: {\n    prefix: string,\n    provider: () => Promise<Provider>,\n    titlePrefix: () => string,\n    titleSuggestion?: (() => string),\n  }): void {\n    const prefix = extension.prefix;\n    if (prefix === null) {\n      return;\n    }\n    this.prefixes.push(prefix);\n    this.providers.set(prefix, {\n      provider: extension.provider,\n      titlePrefix: extension.titlePrefix,\n      titleSuggestion: extension.titleSuggestion,\n    });\n  }\n\n  private async queryChanged(query: string): Promise<void> {\n    const prefix = this.prefixes.find(prefix => query.startsWith(prefix));\n    if (typeof prefix !== 'string') {\n      return;\n    }\n\n    if (!this.filteredListWidget) {\n      return;\n    }\n    this.filteredListWidget.setPrefix(prefix);\n    const titlePrefixFunction = this.providers.get(prefix)?.titlePrefix;\n    this.filteredListWidget.setCommandPrefix(titlePrefixFunction ? titlePrefixFunction() : '');\n    const titleSuggestionFunction = (query === prefix) && this.providers.get(prefix)?.titleSuggestion;\n    this.filteredListWidget.setCommandSuggestion(titleSuggestionFunction ? titleSuggestionFunction() : '');\n\n    if (this.prefix === prefix) {\n      return;\n    }\n    this.prefix = prefix;\n    this.filteredListWidget.setProvider(null);\n    const providerFunction = this.providers.get(prefix)?.provider;\n    if (!providerFunction) {\n      return;\n    }\n\n    const provider = await providerFunction();\n    if (this.prefix !== prefix || !this.filteredListWidget) {\n      return;\n    }\n    this.filteredListWidget.setProvider(provider);\n    this.providerLoadedForTest(provider);\n  }\n\n  private providerLoadedForTest(_provider: Provider): void {\n  }\n}\n\nexport class ShowActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'quick-open.show':\n        QuickOpenImpl.show('');\n        return true;\n    }\n    return false;\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AAGtB,SAAQ,oBAAoB,8BAA4C;AAExE,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,4BAA4B;AAC9B;AACA,MAAM,OAAO,KAAK,KAAK,kBAAkB,gDAAgD,SAAS;AAClG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAE7D,aAAM,UAAoB,CAAC;AAE3B,aAAM,cAAc;AAAA,EACjB;AAAA,EACS;AAAA,EACT;AAAA,EAKA;AAAA,EAER,cAAc;AACZ,SAAK,SAAS;AACd,SAAK,WAAW,CAAC;AACjB,SAAK,YAAY,oBAAI,IAAI;AACzB,SAAK,qBAAqB;AAE1B,2BAAuB,EAAE,QAAQ,KAAK,YAAY,KAAK,IAAI,CAAC;AAC5D,SAAK,SAAS,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM;AAAA,EAClD;AAAA,EAEA,OAAO,KAAK,OAAqB;AAC/B,UAAM,YAAY,IAAI,KAAK;AAC3B,UAAM,qBAAqB,IAAI,mBAAmB,MAAM,SAAS,UAAU,aAAa,KAAK,SAAS,CAAC;AACvG,cAAU,qBAAqB;AAC/B,uBAAmB,eAAe,WAAW,UAAU,0BAA0B,CAAC;AAClF,uBAAmB,aAAa;AAChC,uBAAmB,SAAS,KAAK;AAAA,EACnC;AAAA,EAEQ,YAAY,WAKX;AACP,UAAM,SAAS,UAAU;AACzB,QAAI,WAAW,MAAM;AACnB;AAAA,IACF;AACA,SAAK,SAAS,KAAK,MAAM;AACzB,SAAK,UAAU,IAAI,QAAQ;AAAA,MACzB,UAAU,UAAU;AAAA,MACpB,aAAa,UAAU;AAAA,MACvB,iBAAiB,UAAU;AAAA,IAC7B,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,aAAa,OAA8B;AACvD,UAAM,SAAS,KAAK,SAAS,KAAK,CAAAA,YAAU,MAAM,WAAWA,OAAM,CAAC;AACpE,QAAI,OAAO,WAAW,UAAU;AAC9B;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,oBAAoB;AAC5B;AAAA,IACF;AACA,SAAK,mBAAmB,UAAU,MAAM;AACxC,UAAM,sBAAsB,KAAK,UAAU,IAAI,MAAM,GAAG;AACxD,SAAK,mBAAmB,iBAAiB,sBAAsB,oBAAoB,IAAI,EAAE;AACzF,UAAM,0BAA2B,UAAU,UAAW,KAAK,UAAU,IAAI,MAAM,GAAG;AAClF,SAAK,mBAAmB,qBAAqB,0BAA0B,wBAAwB,IAAI,EAAE;AAErG,QAAI,KAAK,WAAW,QAAQ;AAC1B;AAAA,IACF;AACA,SAAK,SAAS;AACd,SAAK,mBAAmB,YAAY,IAAI;AACxC,UAAM,mBAAmB,KAAK,UAAU,IAAI,MAAM,GAAG;AACrD,QAAI,CAAC,kBAAkB;AACrB;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,iBAAiB;AACxC,QAAI,KAAK,WAAW,UAAU,CAAC,KAAK,oBAAoB;AACtD;AAAA,IACF;AACA,SAAK,mBAAmB,YAAY,QAAQ;AAC5C,SAAK,sBAAsB,QAAQ;AAAA,EACrC;AAAA,EAEQ,sBAAsB,WAA2B;AAAA,EACzD;AACF;AAEO,aAAM,mBAAmE;AAAA,EAC9E,aAAa,UAA8B,UAA2B;AACpE,YAAQ,UAAU;AAAA,MAChB,KAAK;AACH,sBAAc,KAAK,EAAE;AACrB,eAAO;AAAA,IACX;AACA,WAAO;AAAA,EACT;AACF;",
  "names": ["prefix"]
}
