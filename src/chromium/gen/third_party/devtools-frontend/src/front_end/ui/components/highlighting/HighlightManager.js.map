{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/highlighting/HighlightManager.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TextUtils from '../../../models/text_utils/text_utils.js';\n\nimport highlightingStyles from './highlighting.css.js';\n\nexport class RangeWalker {\n  #offset = 0;\n  readonly #treeWalker: TreeWalker;\n  #eof: boolean;\n\n  constructor(readonly root: Node) {\n    this.#treeWalker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT);\n    this.#eof = !this.#treeWalker.firstChild();\n  }\n\n  #next(): boolean {\n    this.#offset += this.#treeWalker.currentNode.textContent?.length ?? 0;\n    this.#eof = !this.#treeWalker.nextNode();\n    return !this.#eof;\n  }\n\n  #goToPosition(offset: number): Node|null {\n    if (offset < this.#offset || this.#eof) {\n      return null;\n    }\n    // `>` here implies that, except for the first range, start offsets are left-leaning, i.e., when the offset falls\n    // between two text nodes, the preceding one is returned. This doesn't matter for Range semantics, but isn't\n    // intuitive wrt. the usual understanding of intervals. Making start offsets right-leaning but end offsets\n    // left-leaning would incur an unwarranted amount of complexity.\n    while (offset > this.#offset + (this.#treeWalker.currentNode.textContent?.length ?? 0)) {\n      if (!this.#next()) {\n        return null;\n      }\n    }\n    return this.#treeWalker.currentNode;\n  }\n\n  nextRange(start: number, length: number): Range|null {\n    if (length <= 0 || this.#eof) {\n      return null;\n    }\n\n    const startNode = this.#goToPosition(start);\n    if (!startNode) {\n      return null;\n    }\n    const offsetInStartNode = start - this.#offset;\n    const endNode = this.#goToPosition(start + length);\n    if (!endNode) {\n      return null;\n    }\n    const offsetInEndNode = start + length - this.#offset;\n\n    const range = new Range();\n    range.setStart(startNode, offsetInStartNode);\n    range.setEnd(endNode, offsetInEndNode);\n    return range;\n  }\n}\n\nexport const HIGHLIGHT_REGISTRY = 'search-highlight';\n\nlet highlightManagerInstance: HighlightManager;\nexport class HighlightManager {\n  #highlights = new Highlight();\n\n  constructor() {\n    document.adoptedStyleSheets.push(highlightingStyles);\n    CSS.highlights.set(HIGHLIGHT_REGISTRY, this.#highlights);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): HighlightManager {\n    const {forceNew} = opts;\n    if (!highlightManagerInstance || forceNew) {\n      highlightManagerInstance = new HighlightManager();\n    }\n\n    return highlightManagerInstance;\n  }\n\n  addHighlights(ranges: Range[]): void {\n    ranges.forEach(this.addHighlight.bind(this));\n  }\n\n  removeHighlights(ranges: Range[]): void {\n    ranges.forEach(this.removeHighlight.bind(this));\n  }\n\n  addHighlight(range: Range): void {\n    this.#highlights.add(range);\n  }\n\n  removeHighlight(range: Range): void {\n    this.#highlights.delete(range);\n  }\n\n  highlightOrderedTextRanges(root: Node, sourceRanges: TextUtils.TextRange.SourceRange[]): Range[] {\n    const rangeWalker = new RangeWalker(root);\n    const ranges = sourceRanges.map(range => rangeWalker.nextRange(range.offset, range.length))\n                       .filter((r): r is Range => r !== null && !r.collapsed);\n    this.addHighlights(ranges);\n    return ranges;\n  }\n}\n"],
  "mappings": ";AAMA,OAAO,wBAAwB;AAExB,aAAM,YAAY;AAAA,EAKvB,YAAqB,MAAY;AAAZ;AACnB,SAAK,cAAc,SAAS,iBAAiB,MAAM,WAAW,SAAS;AACvE,SAAK,OAAO,CAAC,KAAK,YAAY,WAAW;AAAA,EAC3C;AAAA,EAPA,UAAU;AAAA,EACD;AAAA,EACT;AAAA,EAOA,QAAiB;AACf,SAAK,WAAW,KAAK,YAAY,YAAY,aAAa,UAAU;AACpE,SAAK,OAAO,CAAC,KAAK,YAAY,SAAS;AACvC,WAAO,CAAC,KAAK;AAAA,EACf;AAAA,EAEA,cAAc,QAA2B;AACvC,QAAI,SAAS,KAAK,WAAW,KAAK,MAAM;AACtC,aAAO;AAAA,IACT;AAKA,WAAO,SAAS,KAAK,WAAW,KAAK,YAAY,YAAY,aAAa,UAAU,IAAI;AACtF,UAAI,CAAC,KAAK,MAAM,GAAG;AACjB,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA,EAEA,UAAU,OAAe,QAA4B;AACnD,QAAI,UAAU,KAAK,KAAK,MAAM;AAC5B,aAAO;AAAA,IACT;AAEA,UAAM,YAAY,KAAK,cAAc,KAAK;AAC1C,QAAI,CAAC,WAAW;AACd,aAAO;AAAA,IACT;AACA,UAAM,oBAAoB,QAAQ,KAAK;AACvC,UAAM,UAAU,KAAK,cAAc,QAAQ,MAAM;AACjD,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AACA,UAAM,kBAAkB,QAAQ,SAAS,KAAK;AAE9C,UAAM,QAAQ,IAAI,MAAM;AACxB,UAAM,SAAS,WAAW,iBAAiB;AAC3C,UAAM,OAAO,SAAS,eAAe;AACrC,WAAO;AAAA,EACT;AACF;AAEO,aAAM,qBAAqB;AAElC,IAAI;AACG,aAAM,iBAAiB;AAAA,EAC5B,cAAc,IAAI,UAAU;AAAA,EAE5B,cAAc;AACZ,aAAS,mBAAmB,KAAK,kBAAkB;AACnD,QAAI,WAAW,IAAI,oBAAoB,KAAK,WAAW;AAAA,EACzD;AAAA,EAEA,OAAO,SAAS,OAEF,EAAC,UAAU,KAAI,GAAqB;AAChD,UAAM,EAAC,SAAQ,IAAI;AACnB,QAAI,CAAC,4BAA4B,UAAU;AACzC,iCAA2B,IAAI,iBAAiB;AAAA,IAClD;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,cAAc,QAAuB;AACnC,WAAO,QAAQ,KAAK,aAAa,KAAK,IAAI,CAAC;AAAA,EAC7C;AAAA,EAEA,iBAAiB,QAAuB;AACtC,WAAO,QAAQ,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAAA,EAChD;AAAA,EAEA,aAAa,OAAoB;AAC/B,SAAK,YAAY,IAAI,KAAK;AAAA,EAC5B;AAAA,EAEA,gBAAgB,OAAoB;AAClC,SAAK,YAAY,OAAO,KAAK;AAAA,EAC/B;AAAA,EAEA,2BAA2B,MAAY,cAA0D;AAC/F,UAAM,cAAc,IAAI,YAAY,IAAI;AACxC,UAAM,SAAS,aAAa,IAAI,WAAS,YAAY,UAAU,MAAM,QAAQ,MAAM,MAAM,CAAC,EACtE,OAAO,CAAC,MAAkB,MAAM,QAAQ,CAAC,EAAE,SAAS;AACxE,SAAK,cAAc,MAAM;AACzB,WAAO;AAAA,EACT;AACF;",
  "names": []
}
