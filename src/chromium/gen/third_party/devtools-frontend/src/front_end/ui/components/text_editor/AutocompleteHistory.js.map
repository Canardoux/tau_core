{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/ui/components/text_editor/AutocompleteHistory.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\n\nexport class AutocompleteHistory {\n  static #historySize = 300;\n\n  #setting: Common.Settings.Setting<string[]>;\n\n  /**\n   * The data mirrors the setting. We have the mirror for 2 reasons:\n   *   1) The setting is size limited\n   *   2) We track the user's current input, even though it's not committed yet.\n   */\n  #data: string[] = [];\n\n  /** 1-based entry in the history stack. */\n  #historyOffset: number = 1;\n  #uncommittedIsTop: boolean = false;\n\n  /**\n   * Creates a new settings-backed history. The class assumes it has sole\n   * ownership of the setting.\n   */\n  constructor(setting: Common.Settings.Setting<string[]>) {\n    this.#setting = setting;\n    this.#data = this.#setting.get();\n  }\n\n  clear(): void {\n    this.#data = [];\n    this.#setting.set([]);\n    this.#historyOffset = 1;\n  }\n\n  length(): number {\n    return this.#data.length;\n  }\n\n  /**\n   * Pushes a committed text into the history.\n   */\n  pushHistoryItem(text: string): void {\n    if (this.#uncommittedIsTop) {\n      this.#data.pop();\n      this.#uncommittedIsTop = false;\n    }\n\n    this.#historyOffset = 1;\n    if (text !== this.#currentHistoryItem()) {\n      this.#data.push(text);\n    }\n    this.#store();\n  }\n\n  /**\n   * Pushes the current (uncommitted) text into the history.\n   */\n  #pushCurrentText(currentText: string): void {\n    if (this.#uncommittedIsTop) {\n      this.#data.pop();\n    }  // Throw away obsolete uncommitted text.\n    this.#uncommittedIsTop = true;\n    this.#data.push(currentText);\n  }\n\n  previous(currentText: string): string|undefined {\n    if (this.#historyOffset > this.#data.length) {\n      return undefined;\n    }\n    if (this.#historyOffset === 1) {\n      this.#pushCurrentText(currentText);\n    }\n    ++this.#historyOffset;\n    return this.#currentHistoryItem();\n  }\n\n  next(): string|undefined {\n    if (this.#historyOffset === 1) {\n      return undefined;\n    }\n    --this.#historyOffset;\n    return this.#currentHistoryItem();\n  }\n\n  /** Returns a de-duplicated list of history entries that start with the specified prefix */\n  matchingEntries(prefix: string, limit = 50): Set<string> {\n    const result = new Set<string>();\n    for (let i = this.#data.length - 1; i >= 0 && result.size < limit; --i) {\n      const entry = this.#data[i];\n      if (entry.startsWith(prefix)) {\n        result.add(entry);\n      }\n    }\n    return result;\n  }\n\n  #currentHistoryItem(): string|undefined {\n    return this.#data[this.#data.length - this.#historyOffset];\n  }\n\n  #store(): void {\n    this.#setting.set(this.#data.slice(-AutocompleteHistory.#historySize));\n  }\n}\n"],
  "mappings": ";AAMO,aAAM,oBAAoB;AAAA,EAC/B,OAAO,eAAe;AAAA,EAEtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAkB,CAAC;AAAA;AAAA,EAGnB,iBAAyB;AAAA,EACzB,oBAA6B;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7B,YAAY,SAA4C;AACtD,SAAK,WAAW;AAChB,SAAK,QAAQ,KAAK,SAAS,IAAI;AAAA,EACjC;AAAA,EAEA,QAAc;AACZ,SAAK,QAAQ,CAAC;AACd,SAAK,SAAS,IAAI,CAAC,CAAC;AACpB,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,SAAiB;AACf,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,MAAoB;AAClC,QAAI,KAAK,mBAAmB;AAC1B,WAAK,MAAM,IAAI;AACf,WAAK,oBAAoB;AAAA,IAC3B;AAEA,SAAK,iBAAiB;AACtB,QAAI,SAAS,KAAK,oBAAoB,GAAG;AACvC,WAAK,MAAM,KAAK,IAAI;AAAA,IACtB;AACA,SAAK,OAAO;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,aAA2B;AAC1C,QAAI,KAAK,mBAAmB;AAC1B,WAAK,MAAM,IAAI;AAAA,IACjB;AACA,SAAK,oBAAoB;AACzB,SAAK,MAAM,KAAK,WAAW;AAAA,EAC7B;AAAA,EAEA,SAAS,aAAuC;AAC9C,QAAI,KAAK,iBAAiB,KAAK,MAAM,QAAQ;AAC3C,aAAO;AAAA,IACT;AACA,QAAI,KAAK,mBAAmB,GAAG;AAC7B,WAAK,iBAAiB,WAAW;AAAA,IACnC;AACA,MAAE,KAAK;AACP,WAAO,KAAK,oBAAoB;AAAA,EAClC;AAAA,EAEA,OAAyB;AACvB,QAAI,KAAK,mBAAmB,GAAG;AAC7B,aAAO;AAAA,IACT;AACA,MAAE,KAAK;AACP,WAAO,KAAK,oBAAoB;AAAA,EAClC;AAAA;AAAA,EAGA,gBAAgB,QAAgB,QAAQ,IAAiB;AACvD,UAAM,SAAS,oBAAI,IAAY;AAC/B,aAAS,IAAI,KAAK,MAAM,SAAS,GAAG,KAAK,KAAK,OAAO,OAAO,OAAO,EAAE,GAAG;AACtE,YAAM,QAAQ,KAAK,MAAM,CAAC;AAC1B,UAAI,MAAM,WAAW,MAAM,GAAG;AAC5B,eAAO,IAAI,KAAK;AAAA,MAClB;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,sBAAwC;AACtC,WAAO,KAAK,MAAM,KAAK,MAAM,SAAS,KAAK,cAAc;AAAA,EAC3D;AAAA,EAEA,SAAe;AACb,SAAK,SAAS,IAAI,KAAK,MAAM,MAAM,CAAC,oBAAoB,YAAY,CAAC;AAAA,EACvE;AACF;",
  "names": []
}
