{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/IgnoreListManager.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport type {DebuggerWorkspaceBinding} from './DebuggerWorkspaceBinding.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to stop preventing the debugger from stepping into library code\n   */\n  removeFromIgnoreList: 'Remove from ignore list',\n  /**\n   *@description Text for scripts that should not be stepped into when debugging\n   */\n  addScriptToIgnoreList: 'Add script to ignore list',\n  /**\n   *@description Text for directories whose scripts should not be stepped into when debugging\n   */\n  addDirectoryToIgnoreList: 'Add directory to ignore list',\n  /**\n   *@description A context menu item in the Call Stack Sidebar Pane of the Sources panel\n   */\n  addAllContentScriptsToIgnoreList: 'Add all extension scripts to ignore list',\n  /**\n   *@description A context menu item in the Call Stack Sidebar Pane of the Sources panel\n   */\n  addAllThirdPartyScriptsToIgnoreList: 'Add all third-party scripts to ignore list',\n  /**\n   *@description A context menu item in the Call Stack Sidebar Pane of the Sources panel\n   */\n  addAllAnonymousScriptsToIgnoreList: 'Add all anonymous scripts to ignore list',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/bindings/IgnoreListManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet ignoreListManagerInstance: IgnoreListManager|undefined;\n\nexport type IgnoreListGeneralRules = {\n  isContentScript?: boolean,\n  isKnownThirdParty?: boolean,\n  isCurrentlyIgnoreListed?: boolean,\n};\n\nexport class IgnoreListManager implements SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel> {\n  readonly #debuggerWorkspaceBinding: DebuggerWorkspaceBinding;\n  readonly #listeners: Set<() => void>;\n  readonly #isIgnoreListedURLCache: Map<string, boolean>;\n  readonly #contentScriptExecutionContexts: Set<string>;\n\n  private constructor(debuggerWorkspaceBinding: DebuggerWorkspaceBinding) {\n    this.#debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared,\n        this.clearCacheIfNeeded.bind(this), this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextCreated, this.onExecutionContextCreated,\n        this, {scoped: true});\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextDestroyed,\n        this.onExecutionContextDestroyed, this, {scoped: true});\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-stack-frames-pattern')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-content-scripts')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('automatically-ignore-list-known-third-party-scripts')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('enable-ignore-listing')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-anonymous-scripts')\n        .addChangeListener(this.patternChanged.bind(this));\n\n    this.#listeners = new Set();\n    this.#isIgnoreListedURLCache = new Map();\n    this.#contentScriptExecutionContexts = new Set();\n\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.DebuggerModel.DebuggerModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    debuggerWorkspaceBinding: DebuggerWorkspaceBinding|null,\n  } = {forceNew: null, debuggerWorkspaceBinding: null}): IgnoreListManager {\n    const {forceNew, debuggerWorkspaceBinding} = opts;\n    if (!ignoreListManagerInstance || forceNew) {\n      if (!debuggerWorkspaceBinding) {\n        throw new Error(`Unable to create settings: debuggerWorkspaceBinding must be provided: ${new Error().stack}`);\n      }\n\n      ignoreListManagerInstance = new IgnoreListManager(debuggerWorkspaceBinding);\n    }\n\n    return ignoreListManagerInstance;\n  }\n\n  static removeInstance(): void {\n    ignoreListManagerInstance = undefined;\n  }\n\n  addChangeListener(listener: () => void): void {\n    this.#listeners.add(listener);\n  }\n\n  removeChangeListener(listener: () => void): void {\n    this.#listeners.delete(listener);\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    void this.setIgnoreListPatterns(debuggerModel);\n    const sourceMapManager = debuggerModel.sourceMapManager();\n    sourceMapManager.addEventListener(SDK.SourceMapManager.Events.SourceMapAttached, this.sourceMapAttached, this);\n    sourceMapManager.addEventListener(SDK.SourceMapManager.Events.SourceMapDetached, this.sourceMapDetached, this);\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    this.clearCacheIfNeeded();\n    const sourceMapManager = debuggerModel.sourceMapManager();\n    sourceMapManager.removeEventListener(SDK.SourceMapManager.Events.SourceMapAttached, this.sourceMapAttached, this);\n    sourceMapManager.removeEventListener(SDK.SourceMapManager.Events.SourceMapDetached, this.sourceMapDetached, this);\n  }\n\n  private isContentScript(executionContext: SDK.RuntimeModel.ExecutionContext): boolean {\n    return !executionContext.isDefault;\n  }\n\n  private onExecutionContextCreated(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    if (this.isContentScript(event.data)) {\n      this.#contentScriptExecutionContexts.add(event.data.uniqueId);\n      if (this.skipContentScripts) {\n        for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(\n                 SDK.DebuggerModel.DebuggerModel)) {\n          void this.updateIgnoredExecutionContexts(debuggerModel);\n        }\n      }\n    }\n  }\n\n  private onExecutionContextDestroyed(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    if (this.isContentScript(event.data)) {\n      this.#contentScriptExecutionContexts.delete(event.data.uniqueId);\n      if (this.skipContentScripts) {\n        for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(\n                 SDK.DebuggerModel.DebuggerModel)) {\n          void this.updateIgnoredExecutionContexts(debuggerModel);\n        }\n      }\n    }\n  }\n\n  private clearCacheIfNeeded(): void {\n    if (this.#isIgnoreListedURLCache.size > 1024) {\n      this.#isIgnoreListedURLCache.clear();\n    }\n  }\n\n  private getSkipStackFramesPatternSetting(): Common.Settings.RegExpSetting {\n    return Common.Settings.Settings.instance().moduleSetting('skip-stack-frames-pattern') as\n        Common.Settings.RegExpSetting;\n  }\n\n  private setIgnoreListPatterns(debuggerModel: SDK.DebuggerModel.DebuggerModel): Promise<boolean> {\n    const regexPatterns = this.enableIgnoreListing ? this.getSkipStackFramesPatternSetting().getAsArray() : [];\n    const patterns = ([] as string[]);\n    for (const item of regexPatterns) {\n      if (!item.disabled && item.pattern) {\n        patterns.push(item.pattern);\n      }\n    }\n    return debuggerModel.setBlackboxPatterns(patterns, this.skipAnonymousScripts);\n  }\n\n  private updateIgnoredExecutionContexts(debuggerModel: SDK.DebuggerModel.DebuggerModel): Promise<boolean> {\n    return debuggerModel.setBlackboxExecutionContexts(\n        this.skipContentScripts ? Array.from(this.#contentScriptExecutionContexts) : []);\n  }\n\n  private getGeneralRulesForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): IgnoreListGeneralRules {\n    const projectType = uiSourceCode.project().type();\n    const isContentScript = projectType === Workspace.Workspace.projectTypes.ContentScripts;\n    const isKnownThirdParty = uiSourceCode.isKnownThirdParty();\n    return {isContentScript, isKnownThirdParty};\n  }\n\n  isUserOrSourceMapIgnoreListedUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    if (uiSourceCode.isUnconditionallyIgnoreListed()) {\n      return true;\n    }\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    return this.isUserIgnoreListedURL(url, this.getGeneralRulesForUISourceCode(uiSourceCode));\n  }\n\n  isUserIgnoreListedURL(url: Platform.DevToolsPath.UrlString|null, options?: IgnoreListGeneralRules): boolean {\n    if (!this.enableIgnoreListing) {\n      return false;\n    }\n    if (options?.isContentScript && this.skipContentScripts) {\n      return true;\n    }\n    if (options?.isKnownThirdParty && this.automaticallyIgnoreListKnownThirdPartyScripts) {\n      return true;\n    }\n    if (!url) {\n      return this.skipAnonymousScripts;\n    }\n    if (this.#isIgnoreListedURLCache.has(url)) {\n      return Boolean(this.#isIgnoreListedURLCache.get(url));\n    }\n\n    const isIgnoreListed = this.getFirstMatchedRegex(url) !== null;\n    this.#isIgnoreListedURLCache.set(url, isIgnoreListed);\n    return isIgnoreListed;\n  }\n\n  getFirstMatchedRegex(url: Platform.DevToolsPath.UrlString): RegExp|null {\n    if (!url) {\n      return null;\n    }\n    const regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    const regexValue = this.urlToRegExpString(url);\n    if (!regexValue) {\n      return null;\n    }\n\n    for (let i = 0; i < regexPatterns.length; ++i) {\n      const item = regexPatterns[i];\n      if (item.disabled || item.disabledForUrl === url) {\n        continue;\n      }\n      const regex = new RegExp(item.pattern);\n      if (regex.test(url)) {\n        return regex;\n      }\n    }\n    return null;\n  }\n\n  private sourceMapAttached(\n      event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>):\n      void {\n    const script = event.data.client;\n    const sourceMap = event.data.sourceMap;\n    void this.updateScriptRanges(script, sourceMap);\n  }\n\n  private sourceMapDetached(\n      event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>):\n      void {\n    const script = event.data.client;\n    void this.updateScriptRanges(script, undefined);\n  }\n\n  private async updateScriptRanges(script: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap|undefined):\n      Promise<void> {\n    let hasIgnoreListedMappings = false;\n    if (!IgnoreListManager.instance().isUserIgnoreListedURL(\n            script.sourceURL, {isContentScript: script.isContentScript()})) {\n      hasIgnoreListedMappings =\n          sourceMap?.sourceURLs().some(\n              url => this.isUserIgnoreListedURL(url, {isKnownThirdParty: sourceMap.hasIgnoreListHint(url)})) ??\n          false;\n    }\n    if (!hasIgnoreListedMappings) {\n      if (scriptToRange.get(script) && await script.setBlackboxedRanges([])) {\n        scriptToRange.delete(script);\n      }\n      await this.#debuggerWorkspaceBinding.updateLocations(script);\n      return;\n    }\n\n    if (!sourceMap) {\n      return;\n    }\n\n    const newRanges =\n        sourceMap\n            .findRanges(\n                srcURL => this.isUserIgnoreListedURL(srcURL, {isKnownThirdParty: sourceMap.hasIgnoreListHint(srcURL)}),\n                {isStartMatching: true})\n            .flatMap(range => [range.start, range.end]);\n\n    const oldRanges = scriptToRange.get(script) || [];\n    if (!isEqual(oldRanges, newRanges) && await script.setBlackboxedRanges(newRanges)) {\n      scriptToRange.set(script, newRanges);\n    }\n    void this.#debuggerWorkspaceBinding.updateLocations(script);\n\n    function isEqual(rangesA: SourceRange[], rangesB: SourceRange[]): boolean {\n      if (rangesA.length !== rangesB.length) {\n        return false;\n      }\n      for (let i = 0; i < rangesA.length; ++i) {\n        if (rangesA[i].lineNumber !== rangesB[i].lineNumber || rangesA[i].columnNumber !== rangesB[i].columnNumber) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  private uiSourceCodeURL(uiSourceCode: Workspace.UISourceCode.UISourceCode): Platform.DevToolsPath.UrlString|null {\n    return uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Debugger ? null : uiSourceCode.url();\n  }\n\n  canIgnoreListUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    return url ? Boolean(this.urlToRegExpString(url)) : false;\n  }\n\n  ignoreListUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    if (url) {\n      this.ignoreListURL(url);\n    }\n  }\n\n  unIgnoreListUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.unIgnoreListURL(this.uiSourceCodeURL(uiSourceCode), this.getGeneralRulesForUISourceCode(uiSourceCode));\n  }\n\n  get enableIgnoreListing(): boolean {\n    return Common.Settings.Settings.instance().moduleSetting('enable-ignore-listing').get();\n  }\n\n  set enableIgnoreListing(value: boolean) {\n    Common.Settings.Settings.instance().moduleSetting('enable-ignore-listing').set(value);\n  }\n\n  get skipContentScripts(): boolean {\n    return this.enableIgnoreListing && Common.Settings.Settings.instance().moduleSetting('skip-content-scripts').get();\n  }\n\n  get skipAnonymousScripts(): boolean {\n    return this.enableIgnoreListing &&\n        Common.Settings.Settings.instance().moduleSetting('skip-anonymous-scripts').get();\n  }\n\n  get automaticallyIgnoreListKnownThirdPartyScripts(): boolean {\n    return this.enableIgnoreListing &&\n        Common.Settings.Settings.instance().moduleSetting('automatically-ignore-list-known-third-party-scripts').get();\n  }\n\n  ignoreListContentScripts(): void {\n    if (!this.enableIgnoreListing) {\n      this.enableIgnoreListing = true;\n    }\n    Common.Settings.Settings.instance().moduleSetting('skip-content-scripts').set(true);\n  }\n\n  unIgnoreListContentScripts(): void {\n    Common.Settings.Settings.instance().moduleSetting('skip-content-scripts').set(false);\n  }\n\n  ignoreListAnonymousScripts(): void {\n    if (!this.enableIgnoreListing) {\n      this.enableIgnoreListing = true;\n    }\n    Common.Settings.Settings.instance().moduleSetting('skip-anonymous-scripts').set(true);\n  }\n\n  unIgnoreListAnonymousScripts(): void {\n    Common.Settings.Settings.instance().moduleSetting('skip-anonymous-scripts').set(false);\n  }\n\n  ignoreListThirdParty(): void {\n    if (!this.enableIgnoreListing) {\n      this.enableIgnoreListing = true;\n    }\n    Common.Settings.Settings.instance().moduleSetting('automatically-ignore-list-known-third-party-scripts').set(true);\n  }\n\n  unIgnoreListThirdParty(): void {\n    Common.Settings.Settings.instance().moduleSetting('automatically-ignore-list-known-third-party-scripts').set(false);\n  }\n\n  ignoreListURL(url: Platform.DevToolsPath.UrlString): void {\n    const regexValue = this.urlToRegExpString(url);\n    if (!regexValue) {\n      return;\n    }\n    this.addRegexToIgnoreList(regexValue, url);\n  }\n\n  addRegexToIgnoreList(regexValue: string, disabledForUrl?: Platform.DevToolsPath.UrlString): void {\n    const regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n\n    let found = false;\n    for (let i = 0; i < regexPatterns.length; ++i) {\n      const item = regexPatterns[i];\n      if (item.pattern === regexValue || (disabledForUrl && item.disabledForUrl === disabledForUrl)) {\n        item.disabled = false;\n        item.disabledForUrl = undefined;\n        found = true;\n      }\n    }\n    if (!found) {\n      regexPatterns.push({pattern: regexValue, disabled: false});\n    }\n    if (!this.enableIgnoreListing) {\n      this.enableIgnoreListing = true;\n    }\n    this.getSkipStackFramesPatternSetting().setAsArray(regexPatterns);\n  }\n\n  unIgnoreListURL(url: Platform.DevToolsPath.UrlString|null, options?: IgnoreListGeneralRules): void {\n    if (options?.isContentScript) {\n      this.unIgnoreListContentScripts();\n    }\n\n    if (options?.isKnownThirdParty) {\n      this.unIgnoreListThirdParty();\n    }\n\n    if (!url) {\n      this.unIgnoreListAnonymousScripts();\n      return;\n    }\n\n    let regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    const regexValue = IgnoreListManager.instance().urlToRegExpString(url);\n    if (!regexValue) {\n      return;\n    }\n\n    regexPatterns = regexPatterns.filter(function(item) {\n      return item.pattern !== regexValue;\n    });\n    for (let i = 0; i < regexPatterns.length; ++i) {\n      const item = regexPatterns[i];\n      if (item.disabled) {\n        continue;\n      }\n      try {\n        const regex = new RegExp(item.pattern);\n        if (regex.test(url)) {\n          item.disabled = true;\n          item.disabledForUrl = url;\n        }\n      } catch (e) {\n      }\n    }\n    this.getSkipStackFramesPatternSetting().setAsArray(regexPatterns);\n  }\n\n  private removeIgnoreListPattern(regexValue: string): void {\n    let regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    regexPatterns = regexPatterns.filter(function(item) {\n      return item.pattern !== regexValue;\n    });\n    this.getSkipStackFramesPatternSetting().setAsArray(regexPatterns);\n  }\n\n  private ignoreListHasPattern(regexValue: string, enabledOnly: boolean): boolean {\n    const regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    return regexPatterns.some(item => !(enabledOnly && item.disabled) && item.pattern === regexValue);\n  }\n\n  private async patternChanged(): Promise<void> {\n    this.#isIgnoreListedURLCache.clear();\n\n    const promises: Promise<unknown>[] = [];\n    for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(SDK.DebuggerModel.DebuggerModel)) {\n      promises.push(this.setIgnoreListPatterns(debuggerModel));\n      const sourceMapManager = debuggerModel.sourceMapManager();\n      for (const script of debuggerModel.scripts()) {\n        promises.push(this.updateScriptRanges(script, sourceMapManager.sourceMapForClient(script)));\n      }\n      promises.push(this.updateIgnoredExecutionContexts(debuggerModel));\n    }\n    await Promise.all(promises);\n    const listeners = Array.from(this.#listeners);\n    for (const listener of listeners) {\n      listener();\n    }\n    this.patternChangeFinishedForTests();\n  }\n\n  private patternChangeFinishedForTests(): void {\n    // This method is sniffed in tests.\n  }\n\n  private urlToRegExpString(url: Platform.DevToolsPath.UrlString): string {\n    const parsedURL = new Common.ParsedURL.ParsedURL(url);\n    if (parsedURL.isAboutBlank() || parsedURL.isDataURL()) {\n      return '';\n    }\n    if (!parsedURL.isValid) {\n      return '^' + Platform.StringUtilities.escapeForRegExp(url) + '$';\n    }\n    let name: string = parsedURL.lastPathComponent;\n    if (name) {\n      name = '/' + name;\n    } else if (parsedURL.folderPathComponents) {\n      name = parsedURL.folderPathComponents + '/';\n    }\n    if (!name) {\n      name = parsedURL.host;\n    }\n    if (!name) {\n      return '';\n    }\n    const scheme = parsedURL.scheme;\n    let prefix = '';\n    if (scheme && scheme !== 'http' && scheme !== 'https') {\n      prefix = '^' + scheme + '://';\n      if (scheme === 'chrome-extension') {\n        prefix += parsedURL.host + '\\\\b';\n      }\n      prefix += '.*';\n    }\n    return prefix + Platform.StringUtilities.escapeForRegExp(name) + (url.endsWith(name) ? '$' : '\\\\b');\n  }\n\n  getIgnoreListURLContextMenuItems(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Array<{text: string, callback: () => void, jslogContext: string}> {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      return [];\n    }\n\n    const menuItems: Array<{text: string, callback: () => void, jslogContext: string}> = [];\n    const canIgnoreList = this.canIgnoreListUISourceCode(uiSourceCode);\n    const isIgnoreListed = this.isUserOrSourceMapIgnoreListedUISourceCode(uiSourceCode);\n    const isAnonymous = !this.uiSourceCodeURL(uiSourceCode);\n    const {isContentScript, isKnownThirdParty} = this.getGeneralRulesForUISourceCode(uiSourceCode);\n\n    if (isIgnoreListed) {\n      if (canIgnoreList || isContentScript || isKnownThirdParty || isAnonymous) {\n        menuItems.push({\n          text: i18nString(UIStrings.removeFromIgnoreList),\n          callback: this.unIgnoreListUISourceCode.bind(this, uiSourceCode),\n          jslogContext: 'remove-script-from-ignorelist',\n        });\n      }\n    } else {\n      if (canIgnoreList) {\n        menuItems.push({\n          text: i18nString(UIStrings.addScriptToIgnoreList),\n          callback: this.ignoreListUISourceCode.bind(this, uiSourceCode),\n          jslogContext: 'add-script-to-ignorelist',\n        });\n      } else if (isAnonymous) {\n        menuItems.push({\n          text: i18nString(UIStrings.addAllAnonymousScriptsToIgnoreList),\n          callback: this.ignoreListAnonymousScripts.bind(this),\n          jslogContext: 'add-anonymous-scripts-to-ignorelist',\n        });\n      }\n      menuItems.push(...this.getIgnoreListGeneralContextMenuItems({isContentScript, isKnownThirdParty}));\n    }\n\n    return menuItems;\n  }\n\n  private getIgnoreListGeneralContextMenuItems(options?: IgnoreListGeneralRules):\n      Array<{text: string, callback: () => void, jslogContext: string}> {\n    const menuItems: Array<{text: string, callback: () => void, jslogContext: string}> = [];\n    if (options?.isContentScript) {\n      menuItems.push({\n        text: i18nString(UIStrings.addAllContentScriptsToIgnoreList),\n        callback: this.ignoreListContentScripts.bind(this),\n        jslogContext: 'add-content-scripts-to-ignorelist',\n      });\n    }\n    if (options?.isKnownThirdParty) {\n      menuItems.push({\n        text: i18nString(UIStrings.addAllThirdPartyScriptsToIgnoreList),\n        callback: this.ignoreListThirdParty.bind(this),\n        jslogContext: 'add-3p-scripts-to-ignorelist',\n      });\n    }\n    return menuItems;\n  }\n\n  getIgnoreListFolderContextMenuItems(url: Platform.DevToolsPath.UrlString, options?: IgnoreListGeneralRules):\n      Array<{text: string, callback: () => void, jslogContext: string}> {\n    const menuItems: Array<{text: string, callback: () => void, jslogContext: string}> = [];\n\n    const regexValue = '^' + Platform.StringUtilities.escapeForRegExp(url) + '/';\n    if (this.ignoreListHasPattern(regexValue, true)) {\n      menuItems.push({\n        text: i18nString(UIStrings.removeFromIgnoreList),\n        callback: this.removeIgnoreListPattern.bind(this, regexValue),\n        jslogContext: 'remove-from-ignore-list',\n      });\n    } else if (this.isUserIgnoreListedURL(url, options)) {\n      // This specific url isn't on the ignore list, but there are rules that match it.\n      menuItems.push({\n        text: i18nString(UIStrings.removeFromIgnoreList),\n        callback: this.unIgnoreListURL.bind(this, url, options),\n        jslogContext: 'remove-from-ignore-list',\n      });\n    } else if (!options?.isCurrentlyIgnoreListed) {\n      // Provide options to add to ignore list, unless folder currently displays\n      // as entirely ignored.\n      menuItems.push({\n        text: i18nString(UIStrings.addDirectoryToIgnoreList),\n        callback: this.addRegexToIgnoreList.bind(this, regexValue),\n        jslogContext: 'add-directory-to-ignore-list',\n      });\n      menuItems.push(...this.getIgnoreListGeneralContextMenuItems(options));\n    }\n\n    return menuItems;\n  }\n}\n\nexport interface SourceRange {\n  lineNumber: number;\n  columnNumber: number;\n}\n\nconst scriptToRange = new WeakMap<SDK.Script.Script, SourceRange[]>();\n"],
  "mappings": "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",
  "names": []
}
