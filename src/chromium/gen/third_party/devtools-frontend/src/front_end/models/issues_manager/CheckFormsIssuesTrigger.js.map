{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/issues_manager/CheckFormsIssuesTrigger.ts"],
  "sourcesContent": ["\n// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\n/**\n * Responsible for asking autofill for current form issues. This currently happens when devtools is first open.\n */\n// TODO(crbug.com/1399414): Trigger check form issues when an element with an associated issue is editted in the issues panel.\nlet checkFormsIssuesTriggerInstance: CheckFormsIssuesTrigger|null = null;\nexport class CheckFormsIssuesTrigger {\n  constructor() {\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this.#pageLoaded, this,\n        {scoped: true});\n\n    for (const model of SDK.TargetManager.TargetManager.instance().models(SDK.ResourceTreeModel.ResourceTreeModel)) {\n      if (model.target().outermostTarget() !== model.target()) {\n        continue;\n      }\n\n      this.#checkFormsIssues(model);\n    }\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): CheckFormsIssuesTrigger {\n    if (!checkFormsIssuesTriggerInstance || forceNew) {\n      checkFormsIssuesTriggerInstance = new CheckFormsIssuesTrigger();\n    }\n    return checkFormsIssuesTriggerInstance;\n  }\n\n  // TODO(crbug.com/1399414): Handle response by dropping current issues in favor of new ones.\n  #checkFormsIssues(resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel): void {\n    void resourceTreeModel.target().auditsAgent().invoke_checkFormsIssues();\n  }\n\n  #pageLoaded(event: Common.EventTarget\n                  .EventTargetEvent<{resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel, loadTime: number}>):\n      void {\n    const {resourceTreeModel} = event.data;\n    this.#checkFormsIssues(resourceTreeModel);\n  }\n}\n"],
  "mappings": ";AAKA,YAAY,SAAS;AAMrB,IAAI,kCAAgE;AAC7D,aAAM,wBAAwB;AAAA,EACnC,cAAc;AACZ,QAAI,cAAc,cAAc,SAAS,EAAE;AAAA,MACvC,IAAI,kBAAkB;AAAA,MAAmB,IAAI,kBAAkB,OAAO;AAAA,MAAM,KAAK;AAAA,MAAa;AAAA,MAC9F,EAAC,QAAQ,KAAI;AAAA,IAAC;AAElB,eAAW,SAAS,IAAI,cAAc,cAAc,SAAS,EAAE,OAAO,IAAI,kBAAkB,iBAAiB,GAAG;AAC9G,UAAI,MAAM,OAAO,EAAE,gBAAgB,MAAM,MAAM,OAAO,GAAG;AACvD;AAAA,MACF;AAEA,WAAK,kBAAkB,KAAK;AAAA,IAC9B;AAAA,EACF;AAAA,EAEA,OAAO,SAAS,EAAC,SAAQ,IAAyB,EAAC,UAAU,MAAK,GAA4B;AAC5F,QAAI,CAAC,mCAAmC,UAAU;AAChD,wCAAkC,IAAI,wBAAwB;AAAA,IAChE;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,kBAAkB,mBAAkE;AAClF,SAAK,kBAAkB,OAAO,EAAE,YAAY,EAAE,wBAAwB;AAAA,EACxE;AAAA,EAEA,YAAY,OAEH;AACP,UAAM,EAAC,kBAAiB,IAAI,MAAM;AAClC,SAAK,kBAAkB,iBAAiB;AAAA,EAC1C;AACF;",
  "names": []
}
