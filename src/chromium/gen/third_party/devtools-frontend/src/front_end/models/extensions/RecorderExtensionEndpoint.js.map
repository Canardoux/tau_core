{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/extensions/RecorderExtensionEndpoint.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {PrivateAPI} from './ExtensionAPI.js';\nimport {ExtensionEndpoint} from './ExtensionEndpoint.js';\nimport {RecorderPluginManager} from './RecorderPluginManager.js';\n\nexport class RecorderExtensionEndpoint extends ExtensionEndpoint {\n  private readonly name: string;\n  private readonly mediaType?: string;\n  private readonly capabilities: PrivateAPI.RecordingExtensionPluginCapability[];\n\n  constructor(\n      name: string, port: MessagePort, capabilities: PrivateAPI.RecordingExtensionPluginCapability[],\n      mediaType?: string) {\n    super(port);\n    this.name = name;\n    this.mediaType = mediaType;\n    this.capabilities = capabilities;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getCapabilities(): PrivateAPI.RecordingExtensionPluginCapability[] {\n    return this.capabilities;\n  }\n\n  getMediaType(): string|undefined {\n    return this.mediaType;\n  }\n\n  protected override handleEvent({event}: {event: string}): void {\n    switch (event) {\n      case PrivateAPI.RecorderExtensionPluginEvents.UnregisteredRecorderExtensionPlugin: {\n        this.disconnect();\n        RecorderPluginManager.instance().removePlugin(this);\n        break;\n      }\n      default:\n        throw new Error(`Unrecognized Recorder extension endpoint event: ${event}`);\n    }\n  }\n\n  /**\n   * In practice, `recording` is a UserFlow[1], but we avoid defining this type on the\n   * API in order to prevent dependencies between Chrome and puppeteer. Extensions\n   * are responsible for working out potential compatibility issues.\n   *\n   * [1]: https://github.com/puppeteer/replay/blob/main/src/Schema.ts#L245\n   */\n  stringify(recording: Object): Promise<string> {\n    return this.sendRequest(PrivateAPI.RecorderExtensionPluginCommands.Stringify, {recording});\n  }\n\n  /**\n   * In practice, `step` is a Step[1], but we avoid defining this type on the\n   * API in order to prevent dependencies between Chrome and puppeteer. Extensions\n   * are responsible for working out compatibility issues.\n   *\n   * [1]: https://github.com/puppeteer/replay/blob/main/src/Schema.ts#L243\n   */\n  stringifyStep(step: Object): Promise<string> {\n    return this.sendRequest(PrivateAPI.RecorderExtensionPluginCommands.StringifyStep, {step});\n  }\n\n  /**\n   * In practice, `recording` is a UserFlow[1], but we avoid defining this type on the\n   * API in order to prevent dependencies between Chrome and puppeteer. Extensions\n   * are responsible for working out potential compatibility issues.\n   *\n   * [1]: https://github.com/puppeteer/replay/blob/main/src/Schema.ts#L245\n   */\n  replay(recording: Object): Promise<void> {\n    return this.sendRequest(PrivateAPI.RecorderExtensionPluginCommands.Replay, {recording});\n  }\n}\n"],
  "mappings": ";AAIA,SAAQ,kBAAiB;AACzB,SAAQ,yBAAwB;AAChC,SAAQ,6BAA4B;AAE7B,aAAM,kCAAkC,kBAAkB;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACI,MAAc,MAAmB,cACjC,WAAoB;AACtB,UAAM,IAAI;AACV,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,UAAkB;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,kBAAmE;AACjE,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,eAAiC;AAC/B,WAAO,KAAK;AAAA,EACd;AAAA,EAEmB,YAAY,EAAC,MAAK,GAA0B;AAC7D,YAAQ,OAAO;AAAA,MACb,KAAK,WAAW,8BAA8B,qCAAqC;AACjF,aAAK,WAAW;AAChB,8BAAsB,SAAS,EAAE,aAAa,IAAI;AAClD;AAAA,MACF;AAAA,MACA;AACE,cAAM,IAAI,MAAM,mDAAmD,KAAK,EAAE;AAAA,IAC9E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,UAAU,WAAoC;AAC5C,WAAO,KAAK,YAAY,WAAW,gCAAgC,WAAW,EAAC,UAAS,CAAC;AAAA,EAC3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,MAA+B;AAC3C,WAAO,KAAK,YAAY,WAAW,gCAAgC,eAAe,EAAC,KAAI,CAAC;AAAA,EAC1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAkC;AACvC,WAAO,KAAK,YAAY,WAAW,gCAAgC,QAAQ,EAAC,UAAS,CAAC;AAAA,EACxF;AACF;",
  "names": []
}
