{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/TempFile.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\n\nimport {ChunkedFileReader, type ChunkedReader} from './FileUtils.js';\n\nexport class TempFile {\n  #lastBlob: Blob|null;\n  constructor() {\n    this.#lastBlob = null;\n  }\n\n  write(pieces: (string|Blob)[]): void {\n    if (this.#lastBlob) {\n      pieces.unshift(this.#lastBlob);\n    }\n    this.#lastBlob = new Blob(pieces, {type: 'text/plain'});\n  }\n\n  read(): Promise<string|null> {\n    return this.readRange();\n  }\n\n  size(): number {\n    return this.#lastBlob ? this.#lastBlob.size : 0;\n  }\n\n  async readRange(startOffset?: number, endOffset?: number): Promise<string|null> {\n    if (!this.#lastBlob) {\n      Common.Console.Console.instance().error('Attempt to read a temp file that was never written');\n      return '';\n    }\n    const blob = typeof startOffset === 'number' || typeof endOffset === 'number' ?\n        this.#lastBlob.slice((startOffset as number), (endOffset as number)) :\n        this.#lastBlob;\n\n    const reader = new FileReader();\n    try {\n      await new Promise((resolve, reject) => {\n        reader.onloadend = resolve;\n        reader.onerror = reject;\n        reader.readAsText(blob);\n      });\n    } catch (error) {\n      Common.Console.Console.instance().error('Failed to read from temp file: ' + error.message);\n    }\n\n    return reader.result as string | null;\n  }\n\n  async copyToOutputStream(\n      outputStream: Common.StringOutputStream.OutputStream,\n      progress?: ((arg0: ChunkedReader) => void)): Promise<DOMError|null> {\n    if (!this.#lastBlob) {\n      void outputStream.close();\n      return null;\n    }\n    const reader = new ChunkedFileReader((this.#lastBlob as File), 10 * 1000 * 1000, progress);\n    return reader.read(outputStream).then(success => success ? null : reader.error());\n  }\n\n  remove(): void {\n    this.#lastBlob = null;\n  }\n}\n"],
  "mappings": ";AA8BA,YAAY,YAAY;AAExB,SAAQ,yBAA4C;AAE7C,aAAM,SAAS;AAAA,EACpB;AAAA,EACA,cAAc;AACZ,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,MAAM,QAA+B;AACnC,QAAI,KAAK,WAAW;AAClB,aAAO,QAAQ,KAAK,SAAS;AAAA,IAC/B;AACA,SAAK,YAAY,IAAI,KAAK,QAAQ,EAAC,MAAM,aAAY,CAAC;AAAA,EACxD;AAAA,EAEA,OAA6B;AAC3B,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,OAAe;AACb,WAAO,KAAK,YAAY,KAAK,UAAU,OAAO;AAAA,EAChD;AAAA,EAEA,MAAM,UAAU,aAAsB,WAA0C;AAC9E,QAAI,CAAC,KAAK,WAAW;AACnB,aAAO,QAAQ,QAAQ,SAAS,EAAE,MAAM,oDAAoD;AAC5F,aAAO;AAAA,IACT;AACA,UAAM,OAAO,OAAO,gBAAgB,YAAY,OAAO,cAAc,WACjE,KAAK,UAAU,MAAO,aAAyB,SAAoB,IACnE,KAAK;AAET,UAAM,SAAS,IAAI,WAAW;AAC9B,QAAI;AACF,YAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,eAAO,YAAY;AACnB,eAAO,UAAU;AACjB,eAAO,WAAW,IAAI;AAAA,MACxB,CAAC;AAAA,IACH,SAAS,OAAO;AACd,aAAO,QAAQ,QAAQ,SAAS,EAAE,MAAM,oCAAoC,MAAM,OAAO;AAAA,IAC3F;AAEA,WAAO,OAAO;AAAA,EAChB;AAAA,EAEA,MAAM,mBACF,cACA,UAAoE;AACtE,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,aAAa,MAAM;AACxB,aAAO;AAAA,IACT;AACA,UAAM,SAAS,IAAI,kBAAmB,KAAK,WAAoB,KAAK,MAAO,KAAM,QAAQ;AACzF,WAAO,OAAO,KAAK,YAAY,EAAE,KAAK,aAAW,UAAU,OAAO,OAAO,MAAM,CAAC;AAAA,EAClF;AAAA,EAEA,SAAe;AACb,SAAK,YAAY;AAAA,EACnB;AACF;",
  "names": []
}
