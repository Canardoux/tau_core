{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/insights/ThirdParties.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as ThirdPartyWeb from '../../../third_party/third-party-web/third-party-web.js';\nimport * as Extras from '../extras/extras.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Types from '../types/types.js';\n\nimport {InsightCategory, type InsightModel, type InsightSetContext, type RequiredData} from './types.js';\n\nconst UIStrings = {\n  /** Title of an insight that provides details about the code on a web page that the user doesn't control (referred to as \"third-party code\"). */\n  title: 'Third parties',\n  /**\n   * @description Description of a DevTools insight that identifies the code on the page that the user doesn't control.\n   * This is displayed after a user expands the section to see more. No character length limits.\n   */\n  description: 'Third party code can significantly impact load performance. ' +\n      '[Reduce and defer loading of third party code](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript/) to prioritize your page\\'s content.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/ThirdParties.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function deps(): ['Meta', 'NetworkRequests', 'Renderer', 'ImagePainting'] {\n  return ['Meta', 'NetworkRequests', 'Renderer', 'ImagePainting'];\n}\n\nexport type ThirdPartiesInsightModel = InsightModel<{\n  entityByRequest: Map<Types.Events.SyntheticNetworkRequest, Extras.ThirdParties.Entity>,\n  requestsByEntity: Map<Extras.ThirdParties.Entity, Types.Events.SyntheticNetworkRequest[]>,\n  summaryByRequest: Map<Types.Events.SyntheticNetworkRequest, Extras.ThirdParties.Summary>,\n  summaryByEntity: Map<Extras.ThirdParties.Entity, Extras.ThirdParties.Summary>,\n  /** The entity for this navigation's URL. Any other entity is from a third party. */\n  firstPartyEntity?: Extras.ThirdParties.Entity,\n}>;\n\nfunction getRelatedEvents(\n    summaries: Extras.ThirdParties.SummaryMaps,\n    firstPartyEntity: Extras.ThirdParties.Entity|undefined): Types.Events.Event[] {\n  const events = [];\n\n  for (const [entity, requests] of summaries.requestsByEntity.entries()) {\n    if (entity !== firstPartyEntity) {\n      events.push(...requests);\n    }\n  }\n\n  return events;\n}\n\nfunction finalize(partialModel: Omit<ThirdPartiesInsightModel, 'title'|'description'|'category'|'shouldShow'>):\n    ThirdPartiesInsightModel {\n  return {\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    shouldShow:\n        Boolean([...partialModel.summaryByEntity.entries()].find(kv => kv[0] !== partialModel.firstPartyEntity)),\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: RequiredData<typeof deps>, context: InsightSetContext): ThirdPartiesInsightModel {\n  const networkRequests = parsedTrace.NetworkRequests.byTime.filter(event => {\n    if (!context.navigation) {\n      return false;\n    }\n\n    if (event.args.data.frame !== context.frameId) {\n      return false;\n    }\n\n    return Helpers.Timing.eventIsInBounds(event, context.bounds);\n  });\n\n  const {entityByRequest, madeUpEntityCache, summaries} = Extras.ThirdParties.getSummariesAndEntitiesForTraceBounds(\n      parsedTrace as Handlers.Types.ParsedTrace, context.bounds, networkRequests);\n\n  const firstPartyUrl = context.navigation?.args.data?.documentLoaderURL ?? parsedTrace.Meta.mainFrameURL;\n  const firstPartyEntity = ThirdPartyWeb.ThirdPartyWeb.getEntity(firstPartyUrl) ||\n      Extras.ThirdParties.makeUpEntity(madeUpEntityCache, firstPartyUrl);\n\n  return finalize({\n    relatedEvents: getRelatedEvents(summaries, firstPartyEntity),\n    entityByRequest,\n    requestsByEntity: summaries.requestsByEntity,\n    summaryByRequest: summaries.byRequest,\n    summaryByEntity: summaries.byEntity,\n    firstPartyEntity,\n  });\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,mBAAmB;AAC/B,YAAY,YAAY;AAExB,YAAY,aAAa;AAGzB,SAAQ,uBAAoF;AAE5F,MAAM,YAAY;AAAA;AAAA,EAEhB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKP,aAAa;AAEf;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,yCAAyC,SAAS;AAC3F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAE7D,gBAAS,OAAiE;AAC/E,SAAO,CAAC,QAAQ,mBAAmB,YAAY,eAAe;AAChE;AAWA,SAAS,iBACL,WACA,kBAA8E;AAChF,QAAM,SAAS,CAAC;AAEhB,aAAW,CAAC,QAAQ,QAAQ,KAAK,UAAU,iBAAiB,QAAQ,GAAG;AACrE,QAAI,WAAW,kBAAkB;AAC/B,aAAO,KAAK,GAAG,QAAQ;AAAA,IACzB;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAAS,SAAS,cACW;AAC3B,SAAO;AAAA,IACL,OAAO,WAAW,UAAU,KAAK;AAAA,IACjC,aAAa,WAAW,UAAU,WAAW;AAAA,IAC7C,UAAU,gBAAgB;AAAA,IAC1B,YACI,QAAQ,CAAC,GAAG,aAAa,gBAAgB,QAAQ,CAAC,EAAE,KAAK,QAAM,GAAG,CAAC,MAAM,aAAa,gBAAgB,CAAC;AAAA,IAC3G,GAAG;AAAA,EACL;AACF;AAEO,gBAAS,gBACZ,aAAwC,SAAsD;AAChG,QAAM,kBAAkB,YAAY,gBAAgB,OAAO,OAAO,WAAS;AACzE,QAAI,CAAC,QAAQ,YAAY;AACvB,aAAO;AAAA,IACT;AAEA,QAAI,MAAM,KAAK,KAAK,UAAU,QAAQ,SAAS;AAC7C,aAAO;AAAA,IACT;AAEA,WAAO,QAAQ,OAAO,gBAAgB,OAAO,QAAQ,MAAM;AAAA,EAC7D,CAAC;AAED,QAAM,EAAC,iBAAiB,mBAAmB,UAAS,IAAI,OAAO,aAAa;AAAA,IACxE;AAAA,IAA2C,QAAQ;AAAA,IAAQ;AAAA,EAAe;AAE9E,QAAM,gBAAgB,QAAQ,YAAY,KAAK,MAAM,qBAAqB,YAAY,KAAK;AAC3F,QAAM,mBAAmB,cAAc,cAAc,UAAU,aAAa,KACxE,OAAO,aAAa,aAAa,mBAAmB,aAAa;AAErE,SAAO,SAAS;AAAA,IACd,eAAe,iBAAiB,WAAW,gBAAgB;AAAA,IAC3D;AAAA,IACA,kBAAkB,UAAU;AAAA,IAC5B,kBAAkB,UAAU;AAAA,IAC5B,iBAAiB,UAAU;AAAA,IAC3B;AAAA,EACF,CAAC;AACH;",
  "names": []
}
