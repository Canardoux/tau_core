{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/extras/TraceFilter.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Types from '../types/types.js';\n\nexport abstract class TraceFilter {\n  abstract accept(_event: Types.Events.Event, parsedTrace?: Handlers.Types.ParsedTrace): boolean;\n}\n\nexport class VisibleEventsFilter extends TraceFilter {\n  private readonly visibleTypes: Set<string>;\n  constructor(visibleTypes: string[]) {\n    super();\n    this.visibleTypes = new Set(visibleTypes);\n  }\n\n  accept(event: Types.Events.Event): boolean {\n    if (Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return true;\n    }\n    return this.visibleTypes.has(VisibleEventsFilter.eventType(event));\n  }\n\n  static eventType(event: Types.Events.Event): Types.Events.Name {\n    // Any blink.console category events are treated as ConsoleTime events\n    if (event.cat.includes('blink.console')) {\n      return Types.Events.Name.CONSOLE_TIME;\n    }\n    // Any blink.user_timing egory events are treated as UserTiming events\n    if (event.cat.includes('blink.user_timing')) {\n      return Types.Events.Name.USER_TIMING;\n    }\n    return event.name as Types.Events.Name;\n  }\n}\n\nexport class InvisibleEventsFilter extends TraceFilter {\n  #invisibleTypes: Set<Types.Events.Name>;\n\n  constructor(invisibleTypes: Types.Events.Name[]) {\n    super();\n    this.#invisibleTypes = new Set(invisibleTypes);\n  }\n\n  accept(event: Types.Events.Event): boolean {\n    return !this.#invisibleTypes.has(VisibleEventsFilter.eventType(event));\n  }\n}\n\nexport class ExclusiveNameFilter extends TraceFilter {\n  #excludeNames: Set<Types.Events.Name>;\n  constructor(excludeNames: Types.Events.Name[]) {\n    super();\n    this.#excludeNames = new Set(excludeNames);\n  }\n\n  accept(event: Types.Events.Event): boolean {\n    return !this.#excludeNames.has(event.name as Types.Events.Name);\n  }\n}\n"],
  "mappings": ";AAKA,YAAY,WAAW;AAEhB,aAAe,YAAY;AAElC;AAEO,aAAM,4BAA4B,YAAY;AAAA,EAClC;AAAA,EACjB,YAAY,cAAwB;AAClC,UAAM;AACN,SAAK,eAAe,IAAI,IAAI,YAAY;AAAA,EAC1C;AAAA,EAEA,OAAO,OAAoC;AACzC,QAAI,MAAM,WAAW,0BAA0B,KAAK,GAAG;AACrD,aAAO;AAAA,IACT;AACA,WAAO,KAAK,aAAa,IAAI,oBAAoB,UAAU,KAAK,CAAC;AAAA,EACnE;AAAA,EAEA,OAAO,UAAU,OAA8C;AAE7D,QAAI,MAAM,IAAI,SAAS,eAAe,GAAG;AACvC,aAAO,MAAM,OAAO,KAAK;AAAA,IAC3B;AAEA,QAAI,MAAM,IAAI,SAAS,mBAAmB,GAAG;AAC3C,aAAO,MAAM,OAAO,KAAK;AAAA,IAC3B;AACA,WAAO,MAAM;AAAA,EACf;AACF;AAEO,aAAM,8BAA8B,YAAY;AAAA,EACrD;AAAA,EAEA,YAAY,gBAAqC;AAC/C,UAAM;AACN,SAAK,kBAAkB,IAAI,IAAI,cAAc;AAAA,EAC/C;AAAA,EAEA,OAAO,OAAoC;AACzC,WAAO,CAAC,KAAK,gBAAgB,IAAI,oBAAoB,UAAU,KAAK,CAAC;AAAA,EACvE;AACF;AAEO,aAAM,4BAA4B,YAAY;AAAA,EACnD;AAAA,EACA,YAAY,cAAmC;AAC7C,UAAM;AACN,SAAK,gBAAgB,IAAI,IAAI,YAAY;AAAA,EAC3C;AAAA,EAEA,OAAO,OAAoC;AACzC,WAAO,CAAC,KAAK,cAAc,IAAI,MAAM,IAAyB;AAAA,EAChE;AACF;",
  "names": []
}
