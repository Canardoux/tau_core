{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/workspace/WorkspaceImpl.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nimport type {SearchConfig} from './SearchConfig.js';\nimport {UISourceCode, type UISourceCodeMetadata} from './UISourceCode.js';\n\nexport interface Project {\n  workspace(): WorkspaceImpl;\n  id(): string;\n  type(): projectTypes;\n  isServiceProject(): boolean;\n  displayName(): string;\n  requestMetadata(uiSourceCode: UISourceCode): Promise<UISourceCodeMetadata|null>;\n  requestFileContent(uiSourceCode: UISourceCode): Promise<TextUtils.ContentData.ContentDataOrError>;\n  canSetFileContent(): boolean;\n  setFileContent(uiSourceCode: UISourceCode, newContent: string, isBase64: boolean): Promise<void>;\n  fullDisplayName(uiSourceCode: UISourceCode): string;\n  mimeType(uiSourceCode: UISourceCode): string;\n  canRename(): boolean;\n  rename(\n      uiSourceCode: UISourceCode, newName: Platform.DevToolsPath.RawPathString,\n      callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void;\n  excludeFolder(path: Platform.DevToolsPath.UrlString): void;\n  canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean;\n  createFile(path: Platform.DevToolsPath.EncodedPathString, name: string|null, content: string, isBase64?: boolean):\n      Promise<UISourceCode|null>;\n  canCreateFile(): boolean;\n  deleteFile(uiSourceCode: UISourceCode): void;\n  deleteDirectoryRecursively(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean>;\n  remove(): void;\n  removeUISourceCode(url: Platform.DevToolsPath.UrlString): void;\n  searchInFileContent(uiSourceCode: UISourceCode, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]>;\n  findFilesMatchingSearchRequest(\n      searchConfig: SearchConfig, filesMatchingFileQuery: UISourceCode[],\n      progress: Common.Progress.Progress): Promise<Map<UISourceCode, TextUtils.ContentProvider.SearchMatch[]|null>>;\n  indexContent(progress: Common.Progress.Progress): void;\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null;\n\n  /**\n   * Returns an iterator for the currently registered {@link UISourceCode}s for this project. When\n   * new {@link UISourceCode}s are added while iterating, they might show up already. When removing\n   * {@link UISourceCode}s while iterating, these will no longer show up, and will have no effect\n   * on the other entries.\n   *\n   * @return an iterator for the sources provided by this project.\n   */\n  uiSourceCodes(): Iterable<UISourceCode>;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\nexport enum projectTypes {\n  Debugger = 'debugger',\n  Formatter = 'formatter',\n  Network = 'network',\n  FileSystem = 'filesystem',\n  ContentScripts = 'contentscripts',\n  Service = 'service',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport abstract class ProjectStore implements Project {\n  private readonly workspaceInternal: WorkspaceImpl;\n  private readonly idInternal: string;\n  private readonly typeInternal: projectTypes;\n  private readonly displayNameInternal: string;\n  readonly #uiSourceCodes: Map<Platform.DevToolsPath.UrlString, UISourceCode>;\n\n  constructor(workspace: WorkspaceImpl, id: string, type: projectTypes, displayName: string) {\n    this.workspaceInternal = workspace;\n    this.idInternal = id;\n    this.typeInternal = type;\n    this.displayNameInternal = displayName;\n    this.#uiSourceCodes = new Map();\n  }\n\n  id(): string {\n    return this.idInternal;\n  }\n\n  type(): projectTypes {\n    return this.typeInternal;\n  }\n\n  displayName(): string {\n    return this.displayNameInternal;\n  }\n\n  workspace(): WorkspaceImpl {\n    return this.workspaceInternal;\n  }\n\n  createUISourceCode(url: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType):\n      UISourceCode {\n    return new UISourceCode(this, url, contentType);\n  }\n\n  addUISourceCode(uiSourceCode: UISourceCode): boolean {\n    const url = uiSourceCode.url();\n    if (this.uiSourceCodeForURL(url)) {\n      return false;\n    }\n    this.#uiSourceCodes.set(url, uiSourceCode);\n    this.workspaceInternal.dispatchEventToListeners(Events.UISourceCodeAdded, uiSourceCode);\n    return true;\n  }\n\n  removeUISourceCode(url: Platform.DevToolsPath.UrlString): void {\n    const uiSourceCode = this.#uiSourceCodes.get(url);\n    if (uiSourceCode === undefined) {\n      return;\n    }\n    this.#uiSourceCodes.delete(url);\n    this.workspaceInternal.dispatchEventToListeners(Events.UISourceCodeRemoved, uiSourceCode);\n  }\n\n  removeProject(): void {\n    this.workspaceInternal.removeProject(this);\n    this.#uiSourceCodes.clear();\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    return this.#uiSourceCodes.get(url) ?? null;\n  }\n\n  uiSourceCodes(): Iterable<UISourceCode> {\n    return this.#uiSourceCodes.values();\n  }\n\n  renameUISourceCode(uiSourceCode: UISourceCode, newName: string): void {\n    const oldPath = uiSourceCode.url();\n    const newPath = uiSourceCode.parentURL() ?\n        Common.ParsedURL.ParsedURL.urlFromParentUrlAndName(uiSourceCode.parentURL(), newName) :\n        Common.ParsedURL.ParsedURL.preEncodeSpecialCharactersInPath(newName) as Platform.DevToolsPath.UrlString;\n    this.#uiSourceCodes.set(newPath, uiSourceCode);\n    this.#uiSourceCodes.delete(oldPath);\n  }\n\n  // No-op implementation for a handfull of interface methods.\n\n  rename(\n      _uiSourceCode: UISourceCode, _newName: string,\n      _callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void {\n  }\n  excludeFolder(_path: Platform.DevToolsPath.UrlString): void {\n  }\n  deleteFile(_uiSourceCode: UISourceCode): void {\n  }\n  deleteDirectoryRecursively(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n  remove(): void {\n  }\n  indexContent(_progress: Common.Progress.Progress): void {\n  }\n\n  abstract isServiceProject(): boolean;\n  abstract requestMetadata(uiSourceCode: UISourceCode): Promise<UISourceCodeMetadata|null>;\n  abstract requestFileContent(uiSourceCode: UISourceCode): Promise<TextUtils.ContentData.ContentDataOrError>;\n  abstract canSetFileContent(): boolean;\n  abstract setFileContent(uiSourceCode: UISourceCode, newContent: string, isBase64: boolean): Promise<void>;\n  abstract fullDisplayName(uiSourceCode: UISourceCode): string;\n  abstract mimeType(uiSourceCode: UISourceCode): string;\n  abstract canRename(): boolean;\n  abstract canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean;\n  abstract createFile(\n      path: Platform.DevToolsPath.EncodedPathString, name: string|null, content: string,\n      isBase64?: boolean): Promise<UISourceCode|null>;\n  abstract canCreateFile(): boolean;\n  abstract searchInFileContent(uiSourceCode: UISourceCode, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]>;\n  abstract findFilesMatchingSearchRequest(\n      searchConfig: SearchConfig, filesMatchingFileQuery: UISourceCode[],\n      progress: Common.Progress.Progress): Promise<Map<UISourceCode, TextUtils.ContentProvider.SearchMatch[]|null>>;\n}\n\nlet workspaceInstance: WorkspaceImpl|undefined;\n\nexport class WorkspaceImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private projectsInternal: Map<string, Project>;\n  private hasResourceContentTrackingExtensionsInternal: boolean;\n\n  private constructor() {\n    super();\n    this.projectsInternal = new Map();\n    this.hasResourceContentTrackingExtensionsInternal = false;\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): WorkspaceImpl {\n    const {forceNew} = opts;\n    if (!workspaceInstance || forceNew) {\n      workspaceInstance = new WorkspaceImpl();\n    }\n\n    return workspaceInstance;\n  }\n\n  static removeInstance(): void {\n    workspaceInstance = undefined;\n  }\n\n  uiSourceCode(projectId: string, url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    const project = this.projectsInternal.get(projectId);\n    return project ? project.uiSourceCodeForURL(url) : null;\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    for (const project of this.projectsInternal.values()) {\n      const uiSourceCode = project.uiSourceCodeForURL(url);\n      if (uiSourceCode) {\n        return uiSourceCode;\n      }\n    }\n    return null;\n  }\n\n  findCompatibleUISourceCodes(uiSourceCode: UISourceCode): UISourceCode[] {\n    const url = uiSourceCode.url();\n    const contentType = uiSourceCode.contentType();\n    const result: UISourceCode[] = [];\n    for (const project of this.projectsInternal.values()) {\n      if (uiSourceCode.project().type() !== project.type()) {\n        continue;\n      }\n      const candidate = project.uiSourceCodeForURL(url);\n      if (candidate && candidate.url() === url && candidate.contentType() === contentType) {\n        result.push(candidate);\n      }\n    }\n    return result;\n  }\n\n  uiSourceCodesForProjectType(type: projectTypes): UISourceCode[] {\n    const result: UISourceCode[] = [];\n    for (const project of this.projectsInternal.values()) {\n      if (project.type() === type) {\n        for (const uiSourceCode of project.uiSourceCodes()) {\n          result.push(uiSourceCode);\n        }\n      }\n    }\n    return result;\n  }\n\n  addProject(project: Project): void {\n    console.assert(!this.projectsInternal.has(project.id()), `A project with id ${project.id()} already exists!`);\n    this.projectsInternal.set(project.id(), project);\n    this.dispatchEventToListeners(Events.ProjectAdded, project);\n  }\n\n  removeProject(project: Project): void {\n    this.projectsInternal.delete(project.id());\n    this.dispatchEventToListeners(Events.ProjectRemoved, project);\n  }\n\n  project(projectId: string): Project|null {\n    return this.projectsInternal.get(projectId) || null;\n  }\n\n  projects(): Project[] {\n    return [...this.projectsInternal.values()];\n  }\n\n  projectsForType(type: string): Project[] {\n    function filterByType(project: Project): boolean {\n      return project.type() === type;\n    }\n    return this.projects().filter(filterByType);\n  }\n\n  uiSourceCodes(): UISourceCode[] {\n    const result: UISourceCode[] = [];\n    for (const project of this.projectsInternal.values()) {\n      for (const uiSourceCode of project.uiSourceCodes()) {\n        result.push(uiSourceCode);\n      }\n    }\n    return result;\n  }\n\n  setHasResourceContentTrackingExtensions(hasExtensions: boolean): void {\n    this.hasResourceContentTrackingExtensionsInternal = hasExtensions;\n  }\n\n  hasResourceContentTrackingExtensions(): boolean {\n    return this.hasResourceContentTrackingExtensionsInternal;\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  UISourceCodeAdded = 'UISourceCodeAdded',\n  UISourceCodeRemoved = 'UISourceCodeRemoved',\n  UISourceCodeRenamed = 'UISourceCodeRenamed',\n  WorkingCopyChanged = 'WorkingCopyChanged',\n  WorkingCopyCommitted = 'WorkingCopyCommitted',\n  WorkingCopyCommittedByUser = 'WorkingCopyCommittedByUser',\n  ProjectAdded = 'ProjectAdded',\n  ProjectRemoved = 'ProjectRemoved',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface UISourceCodeRenamedEvent {\n  oldURL: Platform.DevToolsPath.UrlString;\n  uiSourceCode: UISourceCode;\n}\n\nexport interface WorkingCopyChangedEvent {\n  uiSourceCode: UISourceCode;\n}\n\nexport interface WorkingCopyCommitedEvent {\n  uiSourceCode: UISourceCode;\n  content: string;\n  encoded?: boolean;\n}\n\nexport type EventTypes = {\n  [Events.UISourceCodeAdded]: UISourceCode,\n  [Events.UISourceCodeRemoved]: UISourceCode,\n  [Events.UISourceCodeRenamed]: UISourceCodeRenamedEvent,\n  [Events.WorkingCopyChanged]: WorkingCopyChangedEvent,\n  [Events.WorkingCopyCommitted]: WorkingCopyCommitedEvent,\n  [Events.WorkingCopyCommittedByUser]: WorkingCopyCommitedEvent,\n  [Events.ProjectAdded]: Project,\n  [Events.ProjectRemoved]: Project,\n};\n"],
  "mappings": "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",
  "names": ["projectTypes", "Events"]
}
