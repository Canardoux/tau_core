{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/persistence/NetworkPersistenceManager.ts"],
  "sourcesContent": ["// Copyright (c) 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Breakpoints from '../breakpoints/breakpoints.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {type FileSystem, FileSystemWorkspaceBinding} from './FileSystemWorkspaceBinding.js';\nimport {IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\nimport {PersistenceBinding, PersistenceImpl} from './PersistenceImpl.js';\n\nlet networkPersistenceManagerInstance: NetworkPersistenceManager|null;\n\nconst forbiddenUrls = ['chromewebstore.google.com', 'chrome.google.com'];\n\nexport class NetworkPersistenceManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.Observer {\n  private bindings: WeakMap<Workspace.UISourceCode.UISourceCode, PersistenceBinding>;\n  private readonly originalResponseContentPromises: WeakMap<Workspace.UISourceCode.UISourceCode, Promise<string|null>>;\n  private savingForOverrides: WeakSet<Workspace.UISourceCode.UISourceCode>;\n  private readonly savingSymbol: symbol;\n  private enabledSetting: Common.Settings.Setting<boolean>;\n  private readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  private readonly networkUISourceCodeForEncodedPath:\n      Map<Platform.DevToolsPath.EncodedPathString, Workspace.UISourceCode.UISourceCode>;\n  private readonly interceptionHandlerBound:\n      (interceptedRequest: SDK.NetworkManager.InterceptedRequest) => Promise<void>;\n  private readonly updateInterceptionThrottler: Common.Throttler.Throttler;\n  private projectInternal: Workspace.Workspace.Project|null;\n  private readonly activeProject: Workspace.Workspace.Project|null;\n  private activeInternal: boolean;\n  private enabled: boolean;\n  private eventDescriptors: Common.EventTarget.EventDescriptor[];\n  #headerOverridesMap: Map<Platform.DevToolsPath.EncodedPathString, HeaderOverrideWithRegex[]> = new Map();\n  readonly #sourceCodeToBindProcessMutex = new WeakMap<Workspace.UISourceCode.UISourceCode, Common.Mutex.Mutex>();\n  readonly #eventDispatchThrottler: Common.Throttler.Throttler;\n  #headerOverridesForEventDispatch: Set<Workspace.UISourceCode.UISourceCode>;\n\n  private constructor(workspace: Workspace.Workspace.WorkspaceImpl) {\n    super();\n    this.bindings = new WeakMap();\n    this.originalResponseContentPromises = new WeakMap();\n    this.savingForOverrides = new WeakSet();\n    this.savingSymbol = Symbol('SavingForOverrides');\n\n    this.enabledSetting = Common.Settings.Settings.instance().moduleSetting('persistence-network-overrides-enabled');\n    this.enabledSetting.addChangeListener(this.enabledChanged, this);\n\n    this.workspace = workspace;\n\n    this.networkUISourceCodeForEncodedPath = new Map();\n    this.interceptionHandlerBound = this.interceptionHandler.bind(this);\n    this.updateInterceptionThrottler = new Common.Throttler.Throttler(50);\n    this.#eventDispatchThrottler = new Common.Throttler.Throttler(50);\n    this.#headerOverridesForEventDispatch = new Set();\n\n    this.projectInternal = null;\n    this.activeProject = null;\n\n    this.activeInternal = false;\n    this.enabled = false;\n\n    this.workspace.addEventListener(Workspace.Workspace.Events.ProjectAdded, event => {\n      void this.onProjectAdded(event.data);\n    });\n    this.workspace.addEventListener(Workspace.Workspace.Events.ProjectRemoved, event => {\n      void this.onProjectRemoved(event.data);\n    });\n\n    PersistenceImpl.instance().addNetworkInterceptor(this.canHandleNetworkUISourceCode.bind(this));\n    Breakpoints.BreakpointManager.BreakpointManager.instance().addUpdateBindingsCallback(\n        this.networkUISourceCodeAdded.bind(this));\n\n    this.eventDescriptors = [];\n    void this.enabledChanged();\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n  }\n\n  targetAdded(): void {\n    void this.updateActiveProject();\n  }\n  targetRemoved(): void {\n    void this.updateActiveProject();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n  } = {forceNew: null, workspace: null}): NetworkPersistenceManager {\n    const {forceNew, workspace} = opts;\n    if (!networkPersistenceManagerInstance || forceNew) {\n      if (!workspace) {\n        throw new Error('Missing workspace for NetworkPersistenceManager');\n      }\n      networkPersistenceManagerInstance = new NetworkPersistenceManager(workspace);\n    }\n\n    return networkPersistenceManagerInstance;\n  }\n\n  active(): boolean {\n    return this.activeInternal;\n  }\n\n  project(): Workspace.Workspace.Project|null {\n    return this.projectInternal;\n  }\n\n  originalContentForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<string|null>|null {\n    const binding = this.bindings.get(uiSourceCode);\n    if (!binding) {\n      return null;\n    }\n    const fileSystemUISourceCode = binding.fileSystem;\n    return this.originalResponseContentPromises.get(fileSystemUISourceCode) || null;\n  }\n\n  private async enabledChanged(): Promise<void> {\n    if (this.enabled === this.enabledSetting.get()) {\n      return;\n    }\n    this.enabled = this.enabledSetting.get();\n    if (this.enabled) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.PersistenceNetworkOverridesEnabled);\n      this.eventDescriptors = [\n        Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n            Workspace.Workspace.Events.UISourceCodeRenamed,\n            event => {\n              void this.uiSourceCodeRenamedListener(event);\n            }),\n        Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n            Workspace.Workspace.Events.UISourceCodeAdded,\n            event => {\n              void this.uiSourceCodeAdded(event);\n            }),\n        Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n            Workspace.Workspace.Events.UISourceCodeRemoved,\n            event => {\n              void this.uiSourceCodeRemovedListener(event);\n            }),\n        Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n            Workspace.Workspace.Events.WorkingCopyCommitted,\n            event => this.onUISourceCodeWorkingCopyCommitted(event.data.uiSourceCode)),\n      ];\n      await this.updateActiveProject();\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.PersistenceNetworkOverridesDisabled);\n      Common.EventTarget.removeEventListeners(this.eventDescriptors);\n      await this.updateActiveProject();\n    }\n    this.dispatchEventToListeners(Events.LOCAL_OVERRIDES_PROJECT_UPDATED, this.enabled);\n  }\n\n  private async uiSourceCodeRenamedListener(\n      event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.UISourceCodeRenamedEvent>): Promise<void> {\n    const uiSourceCode = event.data.uiSourceCode;\n    await this.onUISourceCodeRemoved(uiSourceCode);\n    await this.onUISourceCodeAdded(uiSourceCode);\n  }\n\n  private async uiSourceCodeRemovedListener(\n      event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): Promise<void> {\n    await this.onUISourceCodeRemoved(event.data);\n  }\n\n  private async uiSourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>):\n      Promise<void> {\n    await this.onUISourceCodeAdded(event.data);\n  }\n\n  private async updateActiveProject(): Promise<void> {\n    const wasActive = this.activeInternal;\n    this.activeInternal = Boolean(\n        this.enabledSetting.get() && SDK.TargetManager.TargetManager.instance().rootTarget() && this.projectInternal);\n    if (this.activeInternal === wasActive) {\n      return;\n    }\n\n    if (this.activeInternal && this.projectInternal) {\n      await Promise.all([...this.projectInternal.uiSourceCodes()].map(\n          uiSourceCode => this.filesystemUISourceCodeAdded(uiSourceCode)));\n\n      const networkProjects = this.workspace.projectsForType(Workspace.Workspace.projectTypes.Network);\n      for (const networkProject of networkProjects) {\n        await Promise.all(\n            [...networkProject.uiSourceCodes()].map(uiSourceCode => this.networkUISourceCodeAdded(uiSourceCode)));\n      }\n    } else if (this.projectInternal) {\n      await Promise.all([...this.projectInternal.uiSourceCodes()].map(\n          uiSourceCode => this.filesystemUISourceCodeRemoved(uiSourceCode)));\n      this.networkUISourceCodeForEncodedPath.clear();\n    }\n    PersistenceImpl.instance().refreshAutomapping();\n  }\n\n  encodedPathFromUrl(url: Platform.DevToolsPath.UrlString, ignoreInactive?: boolean):\n      Platform.DevToolsPath.EncodedPathString {\n    return Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(this.rawPathFromUrl(url, ignoreInactive));\n  }\n\n  rawPathFromUrl(url: Platform.DevToolsPath.UrlString, ignoreInactive?: boolean): Platform.DevToolsPath.RawPathString {\n    if ((!this.activeInternal && !ignoreInactive) || !this.projectInternal) {\n      return Platform.DevToolsPath.EmptyRawPathString;\n    }\n    let initialEncodedPath = Common.ParsedURL.ParsedURL.urlWithoutHash(url.replace(/^https?:\\/\\//, '')) as\n        Platform.DevToolsPath.EncodedPathString;\n    if (initialEncodedPath.endsWith('/') && initialEncodedPath.indexOf('?') === -1) {\n      initialEncodedPath = Common.ParsedURL.ParsedURL.concatenate(initialEncodedPath, 'index.html');\n    }\n    let encodedPathParts = NetworkPersistenceManager.encodeEncodedPathToLocalPathParts(initialEncodedPath);\n    const projectPath =\n        FileSystemWorkspaceBinding.fileSystemPath(this.projectInternal.id() as Platform.DevToolsPath.UrlString);\n    const encodedPath = encodedPathParts.join('/');\n    if (projectPath.length + encodedPath.length > 200) {\n      const domain = encodedPathParts[0];\n      const encodedFileName = encodedPathParts[encodedPathParts.length - 1];\n      const shortFileName = encodedFileName ? encodedFileName.substr(0, 10) + '-' : '';\n      const extension = Common.ParsedURL.ParsedURL.extractExtension(initialEncodedPath);\n      const extensionPart = extension ? '.' + extension.substr(0, 10) : '';\n      encodedPathParts = [\n        domain,\n        'longurls',\n        shortFileName + Platform.StringUtilities.hashCode(encodedPath).toString(16) + extensionPart,\n      ];\n    }\n    return Common.ParsedURL.ParsedURL.join(encodedPathParts as Platform.DevToolsPath.RawPathString[], '/');\n  }\n\n  static encodeEncodedPathToLocalPathParts(encodedPath: Platform.DevToolsPath.EncodedPathString): string[] {\n    const encodedParts = [];\n    for (const pathPart of this.#fileNamePartsFromEncodedPath(encodedPath)) {\n      if (!pathPart) {\n        continue;\n      }\n      // encodeURI() escapes all the unsafe filename characters except '/' and '*'\n      let encodedName =\n          encodeURI(pathPart).replace(/[\\/\\*]/g, match => '%' + match[0].charCodeAt(0).toString(16).toUpperCase());\n      if (Host.Platform.isWin()) {\n        // Windows does not allow ':' and '?' in filenames\n        encodedName = encodedName.replace(/[:\\?]/g, match => '%' + match[0].charCodeAt(0).toString(16).toUpperCase());\n        // Windows does not allow a small set of filenames.\n        if (RESERVED_FILENAMES.has(encodedName.toLowerCase())) {\n          encodedName = encodedName.split('').map(char => '%' + char.charCodeAt(0).toString(16).toUpperCase()).join('');\n        }\n        // Windows does not allow the file to end in a space or dot (space should already be encoded).\n        const lastChar = encodedName.charAt(encodedName.length - 1);\n        if (lastChar === '.') {\n          encodedName = encodedName.substr(0, encodedName.length - 1) + '%2E';\n        }\n      }\n      encodedParts.push(encodedName);\n    }\n    return encodedParts;\n  }\n\n  static #fileNamePartsFromEncodedPath(encodedPath: Platform.DevToolsPath.EncodedPathString): string[] {\n    encodedPath = Common.ParsedURL.ParsedURL.urlWithoutHash(encodedPath) as Platform.DevToolsPath.EncodedPathString;\n    const queryIndex = encodedPath.indexOf('?');\n    if (queryIndex === -1) {\n      return encodedPath.split('/');\n    }\n    if (queryIndex === 0) {\n      return [encodedPath];\n    }\n    const endSection = encodedPath.substr(queryIndex);\n    const parts = encodedPath.substr(0, encodedPath.length - endSection.length).split('/');\n    parts[parts.length - 1] += endSection;\n    return parts;\n  }\n\n  fileUrlFromNetworkUrl(url: Platform.DevToolsPath.UrlString, ignoreInactive?: boolean):\n      Platform.DevToolsPath.UrlString {\n    if (!this.projectInternal) {\n      return Platform.DevToolsPath.EmptyUrlString;\n    }\n    return Common.ParsedURL.ParsedURL.concatenate(\n        (this.projectInternal as FileSystem).fileSystemPath(), '/', this.encodedPathFromUrl(url, ignoreInactive));\n  }\n\n  getHeadersUISourceCodeFromUrl(url: Platform.DevToolsPath.UrlString): Workspace.UISourceCode.UISourceCode|null {\n    const fileUrlFromRequest = this.fileUrlFromNetworkUrl(url, /* ignoreNoActive */ true);\n    const folderUrlFromRequest =\n        Common.ParsedURL.ParsedURL.substring(fileUrlFromRequest, 0, fileUrlFromRequest.lastIndexOf('/'));\n    const headersFileUrl = Common.ParsedURL.ParsedURL.concatenate(folderUrlFromRequest, '/', HEADERS_FILENAME);\n    return Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(headersFileUrl);\n  }\n\n  async getOrCreateHeadersUISourceCodeFromUrl(url: Platform.DevToolsPath.UrlString):\n      Promise<Workspace.UISourceCode.UISourceCode|null> {\n    let uiSourceCode = this.getHeadersUISourceCodeFromUrl(url);\n    if (!uiSourceCode && this.projectInternal) {\n      const encodedFilePath = this.encodedPathFromUrl(url, /* ignoreNoActive */ true);\n      const encodedPath = Common.ParsedURL.ParsedURL.substring(encodedFilePath, 0, encodedFilePath.lastIndexOf('/'));\n      uiSourceCode = await this.projectInternal.createFile(encodedPath, HEADERS_FILENAME, '');\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.HeaderOverrideFileCreated);\n    }\n    return uiSourceCode;\n  }\n\n  private decodeLocalPathToUrlPath(path: string): string {\n    try {\n      return unescape(path);\n    } catch (e) {\n      console.error(e);\n    }\n    return path;\n  }\n\n  async #unbind(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const binding = this.bindings.get(uiSourceCode);\n    const headerBinding = uiSourceCode.url().endsWith(HEADERS_FILENAME);\n    if (binding) {\n      const mutex = this.#getOrCreateMutex(binding.network);\n      await mutex.run(this.#innerUnbind.bind(this, binding));\n    } else if (headerBinding) {\n      this.dispatchEventToListeners(Events.REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED, uiSourceCode);\n    }\n  }\n\n  async #unbindUnguarded(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const binding = this.bindings.get(uiSourceCode);\n    if (binding) {\n      await this.#innerUnbind(binding);\n    }\n  }\n\n  #innerUnbind(binding: PersistenceBinding): Promise<void> {\n    this.bindings.delete(binding.network);\n    this.bindings.delete(binding.fileSystem);\n    return PersistenceImpl.instance().removeBinding(binding);\n  }\n\n  async #bind(\n      networkUISourceCode: Workspace.UISourceCode.UISourceCode,\n      fileSystemUISourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const mutex = this.#getOrCreateMutex(networkUISourceCode);\n    await mutex.run(async () => {\n      const existingBinding = this.bindings.get(networkUISourceCode);\n      if (existingBinding) {\n        const {network, fileSystem} = existingBinding;\n        if (networkUISourceCode === network && fileSystemUISourceCode === fileSystem) {\n          return;\n        }\n        await this.#unbindUnguarded(networkUISourceCode);\n        await this.#unbindUnguarded(fileSystemUISourceCode);\n      }\n\n      await this.#innerAddBinding(networkUISourceCode, fileSystemUISourceCode);\n    });\n  }\n\n  #getOrCreateMutex(networkUISourceCode: Workspace.UISourceCode.UISourceCode): Common.Mutex.Mutex {\n    let mutex = this.#sourceCodeToBindProcessMutex.get(networkUISourceCode);\n    if (!mutex) {\n      mutex = new Common.Mutex.Mutex();\n      this.#sourceCodeToBindProcessMutex.set(networkUISourceCode, mutex);\n    }\n    return mutex;\n  }\n\n  async #innerAddBinding(\n      networkUISourceCode: Workspace.UISourceCode.UISourceCode,\n      fileSystemUISourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const binding = new PersistenceBinding(networkUISourceCode, fileSystemUISourceCode);\n    this.bindings.set(networkUISourceCode, binding);\n    this.bindings.set(fileSystemUISourceCode, binding);\n    await PersistenceImpl.instance().addBinding(binding);\n    const uiSourceCodeOfTruth =\n        this.savingForOverrides.has(networkUISourceCode) ? networkUISourceCode : fileSystemUISourceCode;\n    const {content, isEncoded} = await uiSourceCodeOfTruth.requestContent();\n    PersistenceImpl.instance().syncContent(uiSourceCodeOfTruth, content || '', isEncoded);\n  }\n\n  private onUISourceCodeWorkingCopyCommitted(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    void this.saveUISourceCodeForOverrides(uiSourceCode);\n    this.updateInterceptionPatterns();\n  }\n\n  isActiveHeaderOverrides(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    // If this overriden file is actively in use at the moment.\n    if (!this.enabledSetting.get()) {\n      return false;\n    }\n    return uiSourceCode.url().endsWith(HEADERS_FILENAME) &&\n        this.hasMatchingNetworkUISourceCodeForHeaderOverridesFile(uiSourceCode);\n  }\n\n  isUISourceCodeOverridable(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network &&\n        !NetworkPersistenceManager.isForbiddenNetworkUrl(uiSourceCode.url());\n  }\n\n  #isUISourceCodeAlreadyOverridden(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.bindings.has(uiSourceCode) || this.savingForOverrides.has(uiSourceCode);\n  }\n\n  #shouldPromptSaveForOverridesDialog(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.isUISourceCodeOverridable(uiSourceCode) && !this.#isUISourceCodeAlreadyOverridden(uiSourceCode) &&\n        !this.activeInternal && !this.projectInternal;\n  }\n\n  #canSaveUISourceCodeForOverrides(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.activeInternal && this.isUISourceCodeOverridable(uiSourceCode) &&\n        !this.#isUISourceCodeAlreadyOverridden(uiSourceCode);\n  }\n\n  async setupAndStartLocalOverrides(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<boolean> {\n    // No overrides folder, set it up\n    if (this.#shouldPromptSaveForOverridesDialog(uiSourceCode)) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuSetup);\n      await new Promise<void>(\n          resolve => UI.InspectorView.InspectorView.instance().displaySelectOverrideFolderInfobar(resolve));\n      await IsolatedFileSystemManager.instance().addFileSystem('overrides');\n    }\n\n    if (!this.project()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuAbandonSetup);\n      return false;\n    }\n\n    // Already have an overrides folder, enable setting\n    if (!this.enabledSetting.get()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuActivateDisabled);\n      this.enabledSetting.set(true);\n      await this.once(Events.LOCAL_OVERRIDES_PROJECT_UPDATED);\n    }\n\n    // Save new file\n    if (!this.#isUISourceCodeAlreadyOverridden(uiSourceCode)) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuSaveNewFile);\n      uiSourceCode.commitWorkingCopy();\n      await this.saveUISourceCodeForOverrides(uiSourceCode as Workspace.UISourceCode.UISourceCode);\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuOpenExistingFile);\n    }\n\n    return true;\n  }\n\n  async saveUISourceCodeForOverrides(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (!this.#canSaveUISourceCodeForOverrides(uiSourceCode)) {\n      return;\n    }\n    this.savingForOverrides.add(uiSourceCode);\n    let encodedPath = this.encodedPathFromUrl(uiSourceCode.url());\n    const {content, isEncoded} = await uiSourceCode.requestContent();\n    const lastIndexOfSlash = encodedPath.lastIndexOf('/');\n    const encodedFileName = Common.ParsedURL.ParsedURL.substring(encodedPath, lastIndexOfSlash + 1);\n    const rawFileName = Common.ParsedURL.ParsedURL.encodedPathToRawPathString(encodedFileName);\n    encodedPath = Common.ParsedURL.ParsedURL.substr(encodedPath, 0, lastIndexOfSlash);\n    if (this.projectInternal) {\n      await this.projectInternal.createFile(encodedPath, rawFileName, content ?? '', isEncoded);\n    }\n    this.fileCreatedForTest(encodedPath, rawFileName);\n    this.savingForOverrides.delete(uiSourceCode);\n  }\n\n  private fileCreatedForTest(_path: Platform.DevToolsPath.EncodedPathString, _fileName: string): void {\n  }\n\n  private patternForFileSystemUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const relativePathParts = FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n    if (relativePathParts.length < 2) {\n      return '';\n    }\n    if (relativePathParts[1] === 'longurls' && relativePathParts.length !== 2) {\n      if (relativePathParts[0] === 'file:') {\n        return 'file:///*';\n      }\n      return 'http?://' + relativePathParts[0] + '/*';\n    }\n    // 'relativePath' returns an encoded string of the local file name which itself is already encoded.\n    // We therefore need to decode twice to get the raw path.\n    const path = this.decodeLocalPathToUrlPath(this.decodeLocalPathToUrlPath(relativePathParts.join('/')));\n    if (path.startsWith('file:/')) {\n      // The file path of the override file looks like '/path/to/overrides/file:/path/to/local/files/index.html'.\n      // The decoded relative path then starts with 'file:/' which we modify to start with 'file:///' instead.\n      return 'file:///' + path.substring('file:/'.length);\n    }\n    return 'http?://' + path;\n  }\n\n  // 'chrome://'-URLs and the Chrome Web Store are privileged URLs. We don't want users\n  // to be able to override those. Ideally we'd have a similar check in the backend,\n  // because the fix here has no effect on non-DevTools CDP clients.\n  private isForbiddenFileUrl(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    const relativePathParts = FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n    // Decode twice to handle paths generated on Windows OS.\n    const host = this.decodeLocalPathToUrlPath(this.decodeLocalPathToUrlPath(relativePathParts[0] || ''));\n    return host === 'chrome:' || forbiddenUrls.includes(host);\n  }\n\n  static isForbiddenNetworkUrl(urlString: Platform.DevToolsPath.UrlString): boolean {\n    const url = Common.ParsedURL.ParsedURL.fromString(urlString);\n    if (!url) {\n      return false;\n    }\n    return url.scheme === 'chrome' || forbiddenUrls.includes(url.host);\n  }\n\n  private async onUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    await this.networkUISourceCodeAdded(uiSourceCode);\n    await this.filesystemUISourceCodeAdded(uiSourceCode);\n  }\n\n  private canHandleNetworkUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.activeInternal && !Common.ParsedURL.schemeIs(uiSourceCode.url(), 'snippet:');\n  }\n\n  private async networkUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.Network ||\n        !this.canHandleNetworkUISourceCode(uiSourceCode)) {\n      return;\n    }\n    const url = Common.ParsedURL.ParsedURL.urlWithoutHash(uiSourceCode.url()) as Platform.DevToolsPath.UrlString;\n    this.networkUISourceCodeForEncodedPath.set(this.encodedPathFromUrl(url), uiSourceCode);\n\n    const project = this.projectInternal as FileSystem;\n    const fileSystemUISourceCode = project.uiSourceCodeForURL(this.fileUrlFromNetworkUrl(url));\n    if (fileSystemUISourceCode) {\n      await this.#bind(uiSourceCode, fileSystemUISourceCode);\n    }\n    this.#maybeDispatchRequestsForHeaderOverridesFileChanged(uiSourceCode);\n  }\n\n  private async filesystemUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (!this.activeInternal || uiSourceCode.project() !== this.projectInternal) {\n      return;\n    }\n    this.updateInterceptionPatterns();\n\n    const relativePath = FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n    const networkUISourceCode =\n        this.networkUISourceCodeForEncodedPath.get(Common.ParsedURL.ParsedURL.join(relativePath, '/'));\n    if (networkUISourceCode) {\n      await this.#bind(networkUISourceCode, uiSourceCode);\n    }\n  }\n\n  async #getHeaderOverridesFromUiSourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<HeaderOverride[]> {\n    const content = (await uiSourceCode.requestContent()).content || '[]';\n    let headerOverrides: HeaderOverride[] = [];\n    try {\n      headerOverrides = JSON.parse(content) as HeaderOverride[];\n      if (!headerOverrides.every(isHeaderOverride)) {\n        throw 'Type mismatch after parsing';\n      }\n    } catch (e) {\n      console.error('Failed to parse', uiSourceCode.url(), 'for locally overriding headers.');\n      return [];\n    }\n    return headerOverrides;\n  }\n\n  #doubleDecodeEncodedPathString(relativePath: Platform.DevToolsPath.EncodedPathString):\n      {singlyDecodedPath: Platform.DevToolsPath.EncodedPathString, decodedPath: Platform.DevToolsPath.RawPathString} {\n    // 'relativePath' is an encoded string of a local file path, which is itself already encoded.\n    // e.g. relativePath: 'www.example.com%253A443/path/.headers'\n    // singlyDecodedPath: 'www.example.com%3A443/path/.headers'\n    // decodedPath: 'www.example.com:443/path/.headers'\n    const singlyDecodedPath = this.decodeLocalPathToUrlPath(relativePath) as Platform.DevToolsPath.EncodedPathString;\n    const decodedPath = this.decodeLocalPathToUrlPath(singlyDecodedPath) as Platform.DevToolsPath.RawPathString;\n    return {singlyDecodedPath, decodedPath};\n  }\n\n  async generateHeaderPatterns(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<{\n    headerPatterns: Set<string>,\n    path: Platform.DevToolsPath.EncodedPathString,\n    overridesWithRegex: HeaderOverrideWithRegex[],\n  }> {\n    const headerOverrides = await this.#getHeaderOverridesFromUiSourceCode(uiSourceCode);\n    const relativePathParts = FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n    const relativePath = Common.ParsedURL.ParsedURL.slice(\n        Common.ParsedURL.ParsedURL.join(relativePathParts, '/'), 0, -HEADERS_FILENAME.length);\n    const {singlyDecodedPath, decodedPath} = this.#doubleDecodeEncodedPathString(relativePath);\n    let patterns;\n\n    // Long URLS are encoded as `[domain]/longurls/[hashed path]` by `rawPathFromUrl()`.\n    if (relativePathParts.length > 2 && relativePathParts[1] === 'longurls' && headerOverrides.length) {\n      patterns = this.#generateHeaderPatternsForLongUrl(decodedPath, headerOverrides, relativePathParts[0]);\n    } else if (decodedPath.startsWith('file:/')) {\n      patterns = this.#generateHeaderPatternsForFileUrl(\n          Common.ParsedURL.ParsedURL.substring(decodedPath, 'file:/'.length), headerOverrides);\n    } else {\n      patterns = this.#generateHeaderPatternsForHttpUrl(decodedPath, headerOverrides);\n    }\n    return {...patterns, path: singlyDecodedPath};\n  }\n\n  #generateHeaderPatternsForHttpUrl(\n      decodedPath: Platform.DevToolsPath.RawPathString, headerOverrides: HeaderOverride[]): {\n    headerPatterns: Set<string>,\n    overridesWithRegex: HeaderOverrideWithRegex[],\n  } {\n    const headerPatterns = new Set<string>();\n    const overridesWithRegex: HeaderOverrideWithRegex[] = [];\n    for (const headerOverride of headerOverrides) {\n      headerPatterns.add('http?://' + decodedPath + headerOverride.applyTo);\n\n      // Make 'global' overrides apply to file URLs as well.\n      if (decodedPath === '') {\n        headerPatterns.add('file:///' + headerOverride.applyTo);\n        overridesWithRegex.push({\n          applyToRegex: new RegExp('^file:\\/\\/\\/' + escapeRegex(decodedPath + headerOverride.applyTo) + '$'),\n          headers: headerOverride.headers,\n        });\n      }\n\n      // Most servers have the concept of a \"directory index\", which is a\n      // default resource name for a request targeting a \"directory\", e. g.\n      // requesting \"example.com/path/\" would result in the same response as\n      // requesting \"example.com/path/index.html\". To match this behavior we\n      // generate an additional pattern without \"index.html\" as the longer\n      // pattern would not match against a shorter request.\n      const {head, tail} = extractDirectoryIndex(headerOverride.applyTo);\n      if (tail) {\n        headerPatterns.add('http?://' + decodedPath + head);\n\n        overridesWithRegex.push({\n          applyToRegex: new RegExp(`^${escapeRegex(decodedPath + head)}(${escapeRegex(tail)})?$`),\n          headers: headerOverride.headers,\n        });\n      } else {\n        overridesWithRegex.push({\n          applyToRegex: new RegExp(`^${escapeRegex(decodedPath + headerOverride.applyTo)}$`),\n          headers: headerOverride.headers,\n        });\n      }\n    }\n    return {headerPatterns, overridesWithRegex};\n  }\n\n  #generateHeaderPatternsForFileUrl(\n      decodedPath: Platform.DevToolsPath.RawPathString, headerOverrides: HeaderOverride[]): {\n    headerPatterns: Set<string>,\n    overridesWithRegex: HeaderOverrideWithRegex[],\n  } {\n    const headerPatterns = new Set<string>();\n    const overridesWithRegex: HeaderOverrideWithRegex[] = [];\n    for (const headerOverride of headerOverrides) {\n      headerPatterns.add('file:///' + decodedPath + headerOverride.applyTo);\n      overridesWithRegex.push({\n        applyToRegex: new RegExp(`^file:\\/${escapeRegex(decodedPath + headerOverride.applyTo)}$`),\n        headers: headerOverride.headers,\n      });\n    }\n    return {headerPatterns, overridesWithRegex};\n  }\n\n  // For very long URLs, part of the URL is hashed for local overrides, so that\n  // the URL appears shorter. This special case is handled here.\n  #generateHeaderPatternsForLongUrl(\n      decodedPath: Platform.DevToolsPath.RawPathString, headerOverrides: HeaderOverride[],\n      relativePathPart: Platform.DevToolsPath.EncodedPathString): {\n    headerPatterns: Set<string>,\n    overridesWithRegex: HeaderOverrideWithRegex[],\n  } {\n    const headerPatterns = new Set<string>();\n\n    // Use pattern with wildcard => every request which matches will be paused\n    // and checked whether its hashed URL matches a stored local override in\n    // `maybeMergeHeadersForPathSegment()`.\n    let {decodedPath: decodedPattern} =\n        this.#doubleDecodeEncodedPathString(Common.ParsedURL.ParsedURL.concatenate(relativePathPart, '/*'));\n\n    const isFileUrl = decodedPath.startsWith('file:/');\n    if (isFileUrl) {\n      decodedPath = Common.ParsedURL.ParsedURL.substring(decodedPath, 'file:/'.length);\n      decodedPattern = Common.ParsedURL.ParsedURL.substring(decodedPattern, 'file:/'.length);\n    }\n    headerPatterns.add((isFileUrl ? 'file:///' : 'http?://') + decodedPattern);\n\n    const overridesWithRegex: HeaderOverrideWithRegex[] = [];\n    for (const headerOverride of headerOverrides) {\n      overridesWithRegex.push({\n        applyToRegex: new RegExp(`^${isFileUrl ? 'file:\\/' : ''}${escapeRegex(decodedPath + headerOverride.applyTo)}$`),\n        headers: headerOverride.headers,\n      });\n    }\n    return {headerPatterns, overridesWithRegex};\n  }\n\n  async updateInterceptionPatternsForTests(): Promise<void> {\n    await this.#innerUpdateInterceptionPatterns();\n  }\n\n  updateInterceptionPatterns(): void {\n    void this.updateInterceptionThrottler.schedule(this.#innerUpdateInterceptionPatterns.bind(this));\n  }\n\n  async #innerUpdateInterceptionPatterns(): Promise<void> {\n    this.#headerOverridesMap.clear();\n    if (!this.activeInternal || !this.projectInternal) {\n      return SDK.NetworkManager.MultitargetNetworkManager.instance().setInterceptionHandlerForPatterns(\n          [], this.interceptionHandlerBound);\n    }\n    let patterns = new Set<string>();\n    for (const uiSourceCode of this.projectInternal.uiSourceCodes()) {\n      if (this.isForbiddenFileUrl(uiSourceCode)) {\n        continue;\n      }\n      const pattern = this.patternForFileSystemUISourceCode(uiSourceCode);\n      if (uiSourceCode.name() === HEADERS_FILENAME) {\n        const {headerPatterns, path, overridesWithRegex} = await this.generateHeaderPatterns(uiSourceCode);\n        if (headerPatterns.size > 0) {\n          patterns = new Set([...patterns, ...headerPatterns]);\n          this.#headerOverridesMap.set(path, overridesWithRegex);\n        }\n      } else {\n        patterns.add(pattern);\n      }\n      // Most servers have the concept of a \"directory index\", which is a\n      // default resource name for a request targeting a \"directory\", e. g.\n      // requesting \"example.com/path/\" would result in the same response as\n      // requesting \"example.com/path/index.html\". To match this behavior we\n      // generate an additional pattern without \"index.html\" as the longer\n      // pattern would not match against a shorter request.\n      const {head, tail} = extractDirectoryIndex(pattern);\n      if (tail) {\n        patterns.add(head);\n      }\n    }\n\n    return SDK.NetworkManager.MultitargetNetworkManager.instance().setInterceptionHandlerForPatterns(\n        Array.from(patterns).map(\n            pattern => ({urlPattern: pattern, requestStage: Protocol.Fetch.RequestStage.Response})),\n        this.interceptionHandlerBound);\n  }\n\n  private async onUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    await this.networkUISourceCodeRemoved(uiSourceCode);\n    await this.filesystemUISourceCodeRemoved(uiSourceCode);\n  }\n\n  private async networkUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network) {\n      await this.#unbind(uiSourceCode);\n      this.#sourceCodeToBindProcessMutex.delete(uiSourceCode);\n      this.networkUISourceCodeForEncodedPath.delete(this.encodedPathFromUrl(uiSourceCode.url()));\n    }\n    this.#maybeDispatchRequestsForHeaderOverridesFileChanged(uiSourceCode);\n  }\n\n  // We consider a header override file as active, if it matches (= potentially contains\n  // header overrides for) some of the current page's requests.\n  // The editors (in the Sources panel) of active header override files should have an\n  // emphasized icon. For regular overrides we use bindings to determine which editors\n  // are active. For header overrides we do not have a 1:1 matching between the file\n  // defining the header overrides and the request matching the override definition,\n  // because a single '.headers' file can contain header overrides for multiple requests.\n  // For each request, we therefore look whether one or more matching header override\n  // files exist, and if they do, for each of them we emit an event, which causes\n  // potential matching editors to update their icon.\n  #maybeDispatchRequestsForHeaderOverridesFileChanged(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (!this.projectInternal) {\n      return;\n    }\n    const project = this.projectInternal as FileSystem;\n    const fileUrl = this.fileUrlFromNetworkUrl(uiSourceCode.url());\n\n    for (let i = project.fileSystemPath().length; i < fileUrl.length; i++) {\n      if (fileUrl[i] !== '/') {\n        continue;\n      }\n      const headersFilePath =\n          Common.ParsedURL.ParsedURL.concatenate(Common.ParsedURL.ParsedURL.substring(fileUrl, 0, i + 1), '.headers');\n      const headersFileUiSourceCode = project.uiSourceCodeForURL(headersFilePath);\n      if (!headersFileUiSourceCode) {\n        continue;\n      }\n      this.#headerOverridesForEventDispatch.add(headersFileUiSourceCode);\n      void this.#eventDispatchThrottler.schedule(this.#dispatchRequestsForHeaderOverridesFileChanged.bind(this));\n    }\n  }\n\n  #dispatchRequestsForHeaderOverridesFileChanged(): Promise<void> {\n    for (const headersFileUiSourceCode of this.#headerOverridesForEventDispatch) {\n      this.dispatchEventToListeners(Events.REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED, headersFileUiSourceCode);\n    }\n    this.#headerOverridesForEventDispatch.clear();\n    return Promise.resolve();\n  }\n\n  hasMatchingNetworkUISourceCodeForHeaderOverridesFile(headersFile: Workspace.UISourceCode.UISourceCode): boolean {\n    const relativePathParts = FileSystemWorkspaceBinding.relativePath(headersFile);\n    const relativePath = Common.ParsedURL.ParsedURL.slice(\n        Common.ParsedURL.ParsedURL.join(relativePathParts, '/'), 0, -HEADERS_FILENAME.length);\n\n    for (const encodedNetworkPath of this.networkUISourceCodeForEncodedPath.keys()) {\n      if (encodedNetworkPath.startsWith(relativePath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private async filesystemUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (uiSourceCode.project() !== this.projectInternal) {\n      return;\n    }\n    this.updateInterceptionPatterns();\n    this.originalResponseContentPromises.delete(uiSourceCode);\n    await this.#unbind(uiSourceCode);\n  }\n\n  async setProject(project: Workspace.Workspace.Project|null): Promise<void> {\n    if (project === this.projectInternal) {\n      return;\n    }\n\n    if (this.projectInternal) {\n      await Promise.all([...this.projectInternal.uiSourceCodes()].map(\n          uiSourceCode => this.filesystemUISourceCodeRemoved(uiSourceCode)));\n    }\n\n    this.projectInternal = project;\n\n    if (this.projectInternal) {\n      await Promise.all([...this.projectInternal.uiSourceCodes()].map(\n          uiSourceCode => this.filesystemUISourceCodeAdded(uiSourceCode)));\n    }\n\n    await this.updateActiveProject();\n    this.dispatchEventToListeners(Events.PROJECT_CHANGED, this.projectInternal);\n  }\n\n  private async onProjectAdded(project: Workspace.Workspace.Project): Promise<void> {\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem ||\n        FileSystemWorkspaceBinding.fileSystemType(project) !== 'overrides') {\n      return;\n    }\n    const fileSystemPath = FileSystemWorkspaceBinding.fileSystemPath(project.id() as Platform.DevToolsPath.UrlString);\n    if (!fileSystemPath) {\n      return;\n    }\n    if (this.projectInternal) {\n      this.projectInternal.remove();\n    }\n\n    await this.setProject(project);\n  }\n\n  private async onProjectRemoved(project: Workspace.Workspace.Project): Promise<void> {\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      await this.networkUISourceCodeRemoved(uiSourceCode);\n    }\n    if (project === this.projectInternal) {\n      await this.setProject(null);\n    }\n  }\n\n  mergeHeaders(baseHeaders: Protocol.Fetch.HeaderEntry[], overrideHeaders: Protocol.Fetch.HeaderEntry[]):\n      Protocol.Fetch.HeaderEntry[] {\n    const headerMap = new Platform.MapUtilities.Multimap<string, string>();\n    for (const {name, value} of overrideHeaders) {\n      if (name.toLowerCase() !== 'set-cookie') {\n        headerMap.set(name.toLowerCase(), value);\n      }\n    }\n\n    const overriddenHeaderNames = new Set(headerMap.keysArray());\n    for (const {name, value} of baseHeaders) {\n      const lowerCaseName = name.toLowerCase();\n      if (!overriddenHeaderNames.has(lowerCaseName) && lowerCaseName !== 'set-cookie') {\n        headerMap.set(lowerCaseName, value);\n      }\n    }\n\n    const result: Protocol.Fetch.HeaderEntry[] = [];\n    for (const headerName of headerMap.keysArray()) {\n      for (const headerValue of headerMap.get(headerName)) {\n        result.push({name: headerName, value: headerValue});\n      }\n    }\n\n    const originalSetCookieHeaders = baseHeaders.filter(header => header.name.toLowerCase() === 'set-cookie') || [];\n    const setCookieHeadersFromOverrides = overrideHeaders.filter(header => header.name.toLowerCase() === 'set-cookie');\n    const mergedHeaders = SDK.NetworkManager.InterceptedRequest.mergeSetCookieHeaders(\n        originalSetCookieHeaders, setCookieHeadersFromOverrides);\n    result.push(...mergedHeaders);\n\n    return result;\n  }\n\n  #maybeMergeHeadersForPathSegment(\n      path: Platform.DevToolsPath.EncodedPathString, requestUrl: Platform.DevToolsPath.UrlString,\n      headers: Protocol.Fetch.HeaderEntry[]): Protocol.Fetch.HeaderEntry[] {\n    const headerOverrides = this.#headerOverridesMap.get(path) || [];\n    for (const headerOverride of headerOverrides) {\n      const requestUrlWithLongUrlReplacement = this.decodeLocalPathToUrlPath(this.rawPathFromUrl(requestUrl));\n      if (headerOverride.applyToRegex.test(requestUrlWithLongUrlReplacement)) {\n        headers = this.mergeHeaders(headers, headerOverride.headers);\n      }\n    }\n    return headers;\n  }\n\n  handleHeaderInterception(interceptedRequest: SDK.NetworkManager.InterceptedRequest): Protocol.Fetch.HeaderEntry[] {\n    let result: Protocol.Fetch.HeaderEntry[] = interceptedRequest.responseHeaders || [];\n    // 'rawPathFromUrl()''s return value is already (singly-)encoded, so we can\n    // treat it as an 'EncodedPathString' here.\n    const urlSegments =\n        this.rawPathFromUrl(interceptedRequest.request.url as Platform.DevToolsPath.UrlString).split('/') as\n        Platform.DevToolsPath.EncodedPathString[];\n    // Traverse the hierarchy of overrides from the most general to the most\n    // specific. Check with empty string first to match overrides applying to\n    // all domains.\n    // e.g. '', 'www.example.com/', 'www.example.com/path/', ...\n    let path = Platform.DevToolsPath.EmptyEncodedPathString;\n    result = this.#maybeMergeHeadersForPathSegment(\n        path, interceptedRequest.request.url as Platform.DevToolsPath.UrlString, result);\n    for (const segment of urlSegments) {\n      path = Common.ParsedURL.ParsedURL.concatenate(path, segment, '/');\n      result = this.#maybeMergeHeadersForPathSegment(\n          path, interceptedRequest.request.url as Platform.DevToolsPath.UrlString, result);\n    }\n    return result;\n  }\n\n  private async interceptionHandler(interceptedRequest: SDK.NetworkManager.InterceptedRequest): Promise<void> {\n    const method = interceptedRequest.request.method;\n    if (!this.activeInternal || (method === 'OPTIONS')) {\n      return;\n    }\n    const proj = this.projectInternal as FileSystem;\n    const path = this.fileUrlFromNetworkUrl(interceptedRequest.request.url as Platform.DevToolsPath.UrlString);\n    const fileSystemUISourceCode = proj.uiSourceCodeForURL(path);\n    let responseHeaders = this.handleHeaderInterception(interceptedRequest);\n    if (!fileSystemUISourceCode && !responseHeaders.length) {\n      return;\n    }\n    if (!responseHeaders.length) {\n      responseHeaders = interceptedRequest.responseHeaders || [];\n    }\n\n    let {mimeType} = interceptedRequest.getMimeTypeAndCharset();\n    if (!mimeType) {\n      const expectedResourceType =\n          Common.ResourceType.resourceTypes[interceptedRequest.resourceType] || Common.ResourceType.resourceTypes.Other;\n      mimeType = fileSystemUISourceCode?.mimeType() || '';\n      if (Common.ResourceType.ResourceType.fromMimeType(mimeType) !== expectedResourceType) {\n        mimeType = expectedResourceType.canonicalMimeType();\n      }\n    }\n\n    if (fileSystemUISourceCode) {\n      this.originalResponseContentPromises.set(\n          fileSystemUISourceCode, interceptedRequest.responseBody().then(response => {\n            if (TextUtils.ContentData.ContentData.isError(response) || !response.isTextContent) {\n              return null;\n            }\n            return response.text;\n          }));\n\n      const project = fileSystemUISourceCode.project() as FileSystem;\n      const blob = await project.requestFileBlob(fileSystemUISourceCode);\n      if (blob) {\n        void interceptedRequest.continueRequestWithContent(\n            new Blob([blob], {type: mimeType}), /* encoded */ false, responseHeaders, /* isBodyOverridden */ true);\n      }\n    } else if (interceptedRequest.isRedirect()) {\n      void interceptedRequest.continueRequestWithContent(\n          new Blob([], {type: mimeType}), /* encoded */ true, responseHeaders, /* isBodyOverridden */ false);\n    } else {\n      const responseBody = await interceptedRequest.responseBody();\n      if (!TextUtils.ContentData.ContentData.isError(responseBody)) {\n        const content = responseBody.isTextContent ? responseBody.text : responseBody.base64;\n        void interceptedRequest.continueRequestWithContent(\n            new Blob([content], {type: mimeType}), /* encoded */ !responseBody.isTextContent, responseHeaders,\n            /* isBodyOverridden */ false);\n      }\n    }\n  }\n}\n\nconst RESERVED_FILENAMES = new Set<string>([\n  'con',  'prn',  'aux',  'nul',  'com1', 'com2', 'com3', 'com4', 'com5', 'com6', 'com7',\n  'com8', 'com9', 'lpt1', 'lpt2', 'lpt3', 'lpt4', 'lpt5', 'lpt6', 'lpt7', 'lpt8', 'lpt9',\n]);\n\nexport const HEADERS_FILENAME = '.headers';\n\nexport const enum Events {\n  PROJECT_CHANGED = 'ProjectChanged',\n  REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED = 'RequestsForHeaderOverridesFileChanged',\n  LOCAL_OVERRIDES_PROJECT_UPDATED = 'LocalOverridesProjectUpdated',\n}\n\nexport type EventTypes = {\n  [Events.PROJECT_CHANGED]: Workspace.Workspace.Project|null,\n  [Events.REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED]: Workspace.UISourceCode.UISourceCode,\n  [Events.LOCAL_OVERRIDES_PROJECT_UPDATED]: boolean,\n};\n\nexport interface HeaderOverride {\n  applyTo: string;\n  headers: Protocol.Fetch.HeaderEntry[];\n}\n\ninterface HeaderOverrideWithRegex {\n  applyToRegex: RegExp;\n  headers: Protocol.Fetch.HeaderEntry[];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isHeaderOverride(arg: any): arg is HeaderOverride {\n  if (!(arg && typeof arg.applyTo === 'string' && arg.headers && arg.headers.length && Array.isArray(arg.headers))) {\n    return false;\n  }\n  return arg.headers.every(\n      (header: Protocol.Fetch.HeaderEntry) => typeof header.name === 'string' && typeof header.value === 'string');\n}\n\nexport function escapeRegex(pattern: string): string {\n  return Platform.StringUtilities.escapeCharacters(pattern, '[]{}()\\\\.^$+|-,?').replaceAll('*', '.*');\n}\n\nexport function extractDirectoryIndex(pattern: string): {head: string, tail?: string} {\n  const lastSlash = pattern.lastIndexOf('/');\n  const tail = lastSlash >= 0 ? pattern.slice(lastSlash + 1) : pattern;\n  const head = lastSlash >= 0 ? pattern.slice(0, lastSlash + 1) : '';\n  const regex = new RegExp('^' + escapeRegex(tail) + '$');\n  if (tail !== '*' && (regex.test('index.html') || regex.test('index.htm') || regex.test('index.php'))) {\n    return {head, tail};\n  }\n  return {head: pattern};\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
