{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/extras/URLForEntry.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Types from '../types/types.js';\n\n/**\n * INSTEAD, you probably want `SourceMapsResolver.resolvedURLForEntry()`!\n * If an URL will be displayed in the UI, it's likely you should NOT use `getNonResolved`.\n *\n * Use `getNonResolved` method whenever resolving an URL's source mapping is not an\n * option. For example when processing non-ui data.\n *\n * TODO: migrate existing uses of this over to resolvedURLForEntry.\n */\n\nexport function getNonResolved(\n    parsedTrace: Handlers.Types.ParsedTrace, entry: Types.Events.Event): Platform.DevToolsPath.UrlString|null {\n  if (Types.Events.isProfileCall(entry)) {\n    return entry.callFrame.url as Platform.DevToolsPath.UrlString;\n  }\n\n  if (entry.args?.data?.stackTrace && entry.args.data.stackTrace.length > 0) {\n    return entry.args.data.stackTrace[0].url as Platform.DevToolsPath.UrlString;\n  }\n\n  if (Types.Events.isSyntheticNetworkRequest(entry)) {\n    return entry.args.data.url as Platform.DevToolsPath.UrlString;\n  }\n\n  // DecodeImage events use the URL from the relevant PaintImage event.\n  if (Types.Events.isDecodeImage(entry)) {\n    const paintEvent = parsedTrace.ImagePainting.paintImageForEvent.get(entry);\n    return paintEvent ? getNonResolved(parsedTrace, paintEvent) : null;\n  }\n\n  // DrawLazyPixelRef events use the URL from the relevant PaintImage event.\n  if (Types.Events.isDrawLazyPixelRef(entry) && entry.args?.LazyPixelRef) {\n    const paintEvent = parsedTrace.ImagePainting.paintImageByDrawLazyPixelRef.get(entry.args.LazyPixelRef);\n    return paintEvent ? getNonResolved(parsedTrace, paintEvent) : null;\n  }\n\n  // ParseHTML events store the URL under beginData, not data.\n  if (Types.Events.isParseHTML(entry)) {\n    return entry.args.beginData.url as Platform.DevToolsPath.UrlString;\n  }\n\n  // For all other events, try to see if the URL is provided, else return null.\n  if (entry.args?.data?.url) {\n    return entry.args.data.url as Platform.DevToolsPath.UrlString;\n  }\n\n  return null;\n}\n"],
  "mappings": ";AAMA,YAAY,WAAW;AAYhB,gBAAS,eACZ,aAAyC,OAAiE;AAC5G,MAAI,MAAM,OAAO,cAAc,KAAK,GAAG;AACrC,WAAO,MAAM,UAAU;AAAA,EACzB;AAEA,MAAI,MAAM,MAAM,MAAM,cAAc,MAAM,KAAK,KAAK,WAAW,SAAS,GAAG;AACzE,WAAO,MAAM,KAAK,KAAK,WAAW,CAAC,EAAE;AAAA,EACvC;AAEA,MAAI,MAAM,OAAO,0BAA0B,KAAK,GAAG;AACjD,WAAO,MAAM,KAAK,KAAK;AAAA,EACzB;AAGA,MAAI,MAAM,OAAO,cAAc,KAAK,GAAG;AACrC,UAAM,aAAa,YAAY,cAAc,mBAAmB,IAAI,KAAK;AACzE,WAAO,aAAa,eAAe,aAAa,UAAU,IAAI;AAAA,EAChE;AAGA,MAAI,MAAM,OAAO,mBAAmB,KAAK,KAAK,MAAM,MAAM,cAAc;AACtE,UAAM,aAAa,YAAY,cAAc,6BAA6B,IAAI,MAAM,KAAK,YAAY;AACrG,WAAO,aAAa,eAAe,aAAa,UAAU,IAAI;AAAA,EAChE;AAGA,MAAI,MAAM,OAAO,YAAY,KAAK,GAAG;AACnC,WAAO,MAAM,KAAK,UAAU;AAAA,EAC9B;AAGA,MAAI,MAAM,MAAM,MAAM,KAAK;AACzB,WAAO,MAAM,KAAK,KAAK;AAAA,EACzB;AAEA,SAAO;AACT;",
  "names": []
}
