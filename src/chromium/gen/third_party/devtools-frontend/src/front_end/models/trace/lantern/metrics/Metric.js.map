{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/lantern/metrics/Metric.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Core from '../core/core.js';\nimport * as Graph from '../graph/graph.js';\nimport type * as Simulation from '../simulation/simulation.js';\nimport type * as Types from '../types/types.js';\n\nexport interface MetricComputationDataInput {\n  simulator: Simulation.Simulator;\n  graph: Graph.Node<unknown>;\n  processedNavigation: Types.Simulation.ProcessedNavigation;\n}\n\nexport interface MetricCoefficients {\n  intercept: number;\n  optimistic: number;\n  pessimistic: number;\n}\n\nexport interface MetricResult<T = Types.AnyNetworkObject> {\n  timing: number;\n  timestamp?: never;\n  optimisticEstimate: Simulation.Result<T>;\n  pessimisticEstimate: Simulation.Result<T>;\n  optimisticGraph: Graph.Node<T>;\n  pessimisticGraph: Graph.Node;\n}\n\nexport interface Extras {\n  optimistic: boolean;\n  fcpResult?: MetricResult;\n  lcpResult?: MetricResult;\n  interactiveResult?: MetricResult;\n  observedSpeedIndex?: number;\n}\n\nclass Metric {\n  static getScriptUrls(dependencyGraph: Graph.Node, treatNodeAsRenderBlocking?: (node: Graph.NetworkNode) => boolean):\n      Set<string> {\n    const scriptUrls: Set<string> = new Set();\n\n    dependencyGraph.traverse(node => {\n      if (node.type !== Graph.BaseNode.types.NETWORK) {\n        return;\n      }\n      if (node.request.resourceType !== 'Script') {\n        return;\n      }\n      if (treatNodeAsRenderBlocking?.(node)) {\n        scriptUrls.add(node.request.url);\n      }\n    });\n\n    return scriptUrls;\n  }\n\n  static get coefficients(): MetricCoefficients {\n    throw new Core.LanternError('coefficients unimplemented!');\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  /**\n   * Returns the coefficients, scaled by the throttling settings if needed by the metric.\n   * Some lantern metrics (speed-index) use components in their estimate that are not\n   * from the simulator. In this case, we need to adjust the coefficients as the target throttling\n   * settings change.\n   */\n  static getScaledCoefficients(rttMs: number): MetricCoefficients {\n    return this.coefficients;\n  }\n\n  static getOptimisticGraph(dependencyGraph: Graph.Node, processedNavigation: Types.Simulation.ProcessedNavigation):\n      Graph.Node {\n    throw new Core.LanternError('Optimistic graph unimplemented!');\n  }\n\n  static getPessimisticGraph(dependencyGraph: Graph.Node, processedNavigation: Types.Simulation.ProcessedNavigation):\n      Graph.Node {\n    throw new Core.LanternError('Pessmistic graph unimplemented!');\n  }\n\n  static getEstimateFromSimulation(simulationResult: Simulation.Result, extras: Extras): Simulation.Result {\n    return simulationResult;\n  }\n\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  static compute(data: MetricComputationDataInput, extras?: Omit<Extras, 'optimistic'>): MetricResult {\n    const {simulator, graph, processedNavigation} = data;\n\n    const metricName = this.name.replace('Lantern', '');\n    const optimisticGraph = this.getOptimisticGraph(graph, processedNavigation);\n    const pessimisticGraph = this.getPessimisticGraph(graph, processedNavigation);\n\n    let simulateOptions = {label: `optimistic${metricName}`};\n    const optimisticSimulation = simulator.simulate(optimisticGraph, simulateOptions);\n\n    simulateOptions = {label: `pessimistic${metricName}`};\n    const pessimisticSimulation = simulator.simulate(pessimisticGraph, simulateOptions);\n\n    const optimisticEstimate = this.getEstimateFromSimulation(\n        optimisticSimulation,\n        {...extras, optimistic: true},\n    );\n\n    const pessimisticEstimate = this.getEstimateFromSimulation(\n        pessimisticSimulation,\n        {...extras, optimistic: false},\n    );\n\n    const coefficients = this.getScaledCoefficients(simulator.rtt);\n    // Estimates under 1s don't really follow the normal curve fit, minimize the impact of the intercept\n    const interceptMultiplier = coefficients.intercept > 0 ? Math.min(1, optimisticEstimate.timeInMs / 1000) : 1;\n    const timing = coefficients.intercept * interceptMultiplier +\n        coefficients.optimistic * optimisticEstimate.timeInMs + coefficients.pessimistic * pessimisticEstimate.timeInMs;\n\n    return {\n      timing,\n      optimisticEstimate,\n      pessimisticEstimate,\n      optimisticGraph,\n      pessimisticGraph,\n    };\n  }\n}\n\nexport {Metric};\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,WAAW;AAiCvB,MAAM,OAAO;AAAA,EACX,OAAO,cAAc,iBAA6B,2BAClC;AACd,UAAM,aAA0B,oBAAI,IAAI;AAExC,oBAAgB,SAAS,UAAQ;AAC/B,UAAI,KAAK,SAAS,MAAM,SAAS,MAAM,SAAS;AAC9C;AAAA,MACF;AACA,UAAI,KAAK,QAAQ,iBAAiB,UAAU;AAC1C;AAAA,MACF;AACA,UAAI,4BAA4B,IAAI,GAAG;AACrC,mBAAW,IAAI,KAAK,QAAQ,GAAG;AAAA,MACjC;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,eAAmC;AAC5C,UAAM,IAAI,KAAK,aAAa,6BAA6B;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,sBAAsB,OAAmC;AAC9D,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,OAAO,mBAAmB,iBAA6B,qBACxC;AACb,UAAM,IAAI,KAAK,aAAa,iCAAiC;AAAA,EAC/D;AAAA,EAEA,OAAO,oBAAoB,iBAA6B,qBACzC;AACb,UAAM,IAAI,KAAK,aAAa,iCAAiC;AAAA,EAC/D;AAAA,EAEA,OAAO,0BAA0B,kBAAqC,QAAmC;AACvG,WAAO;AAAA,EACT;AAAA;AAAA,EAIA,OAAO,QAAQ,MAAkC,QAAmD;AAClG,UAAM,EAAC,WAAW,OAAO,oBAAmB,IAAI;AAEhD,UAAM,aAAa,KAAK,KAAK,QAAQ,WAAW,EAAE;AAClD,UAAM,kBAAkB,KAAK,mBAAmB,OAAO,mBAAmB;AAC1E,UAAM,mBAAmB,KAAK,oBAAoB,OAAO,mBAAmB;AAE5E,QAAI,kBAAkB,EAAC,OAAO,aAAa,UAAU,GAAE;AACvD,UAAM,uBAAuB,UAAU,SAAS,iBAAiB,eAAe;AAEhF,sBAAkB,EAAC,OAAO,cAAc,UAAU,GAAE;AACpD,UAAM,wBAAwB,UAAU,SAAS,kBAAkB,eAAe;AAElF,UAAM,qBAAqB,KAAK;AAAA,MAC5B;AAAA,MACA,EAAC,GAAG,QAAQ,YAAY,KAAI;AAAA,IAChC;AAEA,UAAM,sBAAsB,KAAK;AAAA,MAC7B;AAAA,MACA,EAAC,GAAG,QAAQ,YAAY,MAAK;AAAA,IACjC;AAEA,UAAM,eAAe,KAAK,sBAAsB,UAAU,GAAG;AAE7D,UAAM,sBAAsB,aAAa,YAAY,IAAI,KAAK,IAAI,GAAG,mBAAmB,WAAW,GAAI,IAAI;AAC3G,UAAM,SAAS,aAAa,YAAY,sBACpC,aAAa,aAAa,mBAAmB,WAAW,aAAa,cAAc,oBAAoB;AAE3G,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,SAAQ;",
  "names": []
}
