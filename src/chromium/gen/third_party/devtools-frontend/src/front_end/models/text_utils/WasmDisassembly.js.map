{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/text_utils/WasmDisassembly.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport {ContentData} from './ContentData.js';\nimport type {DeferredContent} from './ContentProvider.js';\n\ninterface FunctionBodyOffset {\n  start: number;\n  end: number;\n}\n\n/**\n * Metadata to map between bytecode #offsets and line numbers in the\n * disassembly for WebAssembly modules.\n */\nexport class WasmDisassembly extends ContentData {\n  readonly lines: string[];\n  readonly #offsets: number[];\n  #functionBodyOffsets: FunctionBodyOffset[];\n\n  // Wasm can be potentially very large, so we calculate `text' lazily.\n  #cachedText?: string;\n\n  constructor(lines: string[], offsets: number[], functionBodyOffsets: FunctionBodyOffset[]) {\n    super('', /* isBase64 */ false, 'text/x-wast', 'utf-8');\n    if (lines.length !== offsets.length) {\n      throw new Error('Lines and offsets don\\'t match');\n    }\n    this.lines = lines;\n    this.#offsets = offsets;\n    this.#functionBodyOffsets = functionBodyOffsets;\n  }\n\n  override get text(): string {\n    if (typeof this.#cachedText === 'undefined') {\n      this.#cachedText = this.lines.join('\\n');\n    }\n    return this.#cachedText;\n  }\n\n  override get isEmpty(): boolean {\n    // Don't trigger unnecessary concatenating. Only check whether we have no lines, or a single empty line.\n    return this.lines.length === 0 || (this.lines.length === 1 && this.lines[0].length === 0);\n  }\n\n  get lineNumbers(): number {\n    return this.#offsets.length;\n  }\n\n  bytecodeOffsetToLineNumber(bytecodeOffset: number): number {\n    return Platform.ArrayUtilities.upperBound(\n               this.#offsets, bytecodeOffset, Platform.ArrayUtilities.DEFAULT_COMPARATOR) -\n        1;\n  }\n\n  lineNumberToBytecodeOffset(lineNumber: number): number {\n    return this.#offsets[lineNumber];\n  }\n\n  /**\n   * returns an iterable enumerating all the non-breakable line numbers in the disassembly\n   */\n  * nonBreakableLineNumbers(): Iterable<number> {\n    let lineNumber = 0;\n    let functionIndex = 0;\n    while (lineNumber < this.lineNumbers) {\n      if (functionIndex < this.#functionBodyOffsets.length) {\n        const offset = this.lineNumberToBytecodeOffset(lineNumber);\n        if (offset >= this.#functionBodyOffsets[functionIndex].start) {\n          lineNumber = this.bytecodeOffsetToLineNumber(this.#functionBodyOffsets[functionIndex++].end) + 1;\n          continue;\n        }\n      }\n      yield lineNumber++;\n    }\n  }\n\n  /**\n   * @deprecated Used during migration from `DeferredContent` to `ContentData`.\n   */\n  override asDeferedContent(): DeferredContent {\n    return {content: '', isEncoded: false, wasmDisassemblyInfo: this};\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,cAAc;AAE1B,SAAQ,mBAAkB;AAYnB,aAAM,wBAAwB,YAAY;AAAA,EACtC;AAAA,EACA;AAAA,EACT;AAAA;AAAA,EAGA;AAAA,EAEA,YAAY,OAAiB,SAAmB,qBAA2C;AACzF;AAAA,MAAM;AAAA;AAAA,MAAmB;AAAA,MAAO;AAAA,MAAe;AAAA,IAAO;AACtD,QAAI,MAAM,WAAW,QAAQ,QAAQ;AACnC,YAAM,IAAI,MAAM,+BAAgC;AAAA,IAClD;AACA,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,uBAAuB;AAAA,EAC9B;AAAA,EAEA,IAAa,OAAe;AAC1B,QAAI,OAAO,KAAK,gBAAgB,aAAa;AAC3C,WAAK,cAAc,KAAK,MAAM,KAAK,IAAI;AAAA,IACzC;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAa,UAAmB;AAE9B,WAAO,KAAK,MAAM,WAAW,KAAM,KAAK,MAAM,WAAW,KAAK,KAAK,MAAM,CAAC,EAAE,WAAW;AAAA,EACzF;AAAA,EAEA,IAAI,cAAsB;AACxB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,2BAA2B,gBAAgC;AACzD,WAAO,SAAS,eAAe;AAAA,MACpB,KAAK;AAAA,MAAU;AAAA,MAAgB,SAAS,eAAe;AAAA,IAAkB,IAChF;AAAA,EACN;AAAA,EAEA,2BAA2B,YAA4B;AACrD,WAAO,KAAK,SAAS,UAAU;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,CAAE,0BAA4C;AAC5C,QAAI,aAAa;AACjB,QAAI,gBAAgB;AACpB,WAAO,aAAa,KAAK,aAAa;AACpC,UAAI,gBAAgB,KAAK,qBAAqB,QAAQ;AACpD,cAAM,SAAS,KAAK,2BAA2B,UAAU;AACzD,YAAI,UAAU,KAAK,qBAAqB,aAAa,EAAE,OAAO;AAC5D,uBAAa,KAAK,2BAA2B,KAAK,qBAAqB,eAAe,EAAE,GAAG,IAAI;AAC/F;AAAA,QACF;AAAA,MACF;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKS,mBAAoC;AAC3C,WAAO,EAAC,SAAS,IAAI,WAAW,OAAO,qBAAqB,KAAI;AAAA,EAClE;AACF;",
  "names": []
}
