{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/insights/RenderBlocking.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Lantern from '../lantern/lantern.js';\nimport type * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  type InsightModel,\n  type InsightSetContext,\n  type InsightSetContextWithNavigation,\n  InsightWarning,\n  type LanternContext,\n  type RequiredData,\n} from './types.js';\n\nconst UIStrings = {\n  /**\n   * @description Title of an insight that provides the user with the list of network requests that blocked and therefore slowed down the page rendering and becoming visible to the user.\n   */\n  title: 'Render blocking requests',\n  /**\n   * @description Text to describe that there are requests blocking rendering, which may affect LCP.\n   */\n  description: 'Requests are blocking the page\\'s initial render, which may delay LCP. ' +\n      '[Deferring or inlining](https://web.dev/learn/performance/understanding-the-critical-path#render-blocking_resources/) ' +\n      'can move these network requests out of the critical path.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/RenderBlocking.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type RenderBlockingInsightModel = InsightModel<{\n  renderBlockingRequests: Types.Events.SyntheticNetworkRequest[],\n  requestIdToWastedMs?: Map<string, number>,\n}>;\n\n// Because of the way we detect blocking stylesheets, asynchronously loaded\n// CSS with link[rel=preload] and an onload handler (see https://github.com/filamentgroup/loadCSS)\n// can be falsely flagged as blocking. Therefore, ignore stylesheets that loaded fast enough\n// to possibly be non-blocking (and they have minimal impact anyway).\nconst MINIMUM_WASTED_MS = 50;\n\nexport function deps(): ['NetworkRequests', 'PageLoadMetrics', 'LargestImagePaint'] {\n  return ['NetworkRequests', 'PageLoadMetrics', 'LargestImagePaint'];\n}\n\n/**\n * Given a simulation's nodeTimings, return an object with the nodes/timing keyed by network URL\n */\nfunction getNodesAndTimingByRequestId(nodeTimings: Lantern.Simulation.Result['nodeTimings']):\n    Map<string, {node: Lantern.Graph.Node, nodeTiming: Lantern.Types.Simulation.NodeTiming}> {\n  const requestIdToNode =\n      new Map<string, {node: Lantern.Graph.Node, nodeTiming: Lantern.Types.Simulation.NodeTiming}>();\n\n  for (const [node, nodeTiming] of nodeTimings) {\n    if (node.type !== 'network') {\n      continue;\n    }\n\n    requestIdToNode.set(node.request.requestId, {node, nodeTiming});\n  }\n\n  return requestIdToNode;\n}\n\nfunction estimateSavingsWithGraphs(\n    deferredIds: Set<string>, lanternContext: LanternContext): Types.Timing.MilliSeconds {\n  const simulator = lanternContext.simulator;\n  const fcpGraph = lanternContext.metrics.firstContentfulPaint.optimisticGraph;\n  const {nodeTimings} = lanternContext.simulator.simulate(fcpGraph);\n  const adjustedNodeTimings = new Map(nodeTimings);\n\n  const totalChildNetworkBytes = 0;\n  const minimalFCPGraph = fcpGraph.cloneWithRelationships(node => {\n    // If a node can be deferred, exclude it from the new FCP graph\n    const canDeferRequest = deferredIds.has(node.id);\n    return !canDeferRequest;\n  });\n\n  if (minimalFCPGraph.type !== 'network') {\n    throw new Error('minimalFCPGraph not a NetworkNode');\n  }\n\n  // Recalculate the \"before\" time based on our adjusted node timings.\n  const estimateBeforeInline = Math.max(...Array.from(\n      Array.from(adjustedNodeTimings).map(timing => timing[1].endTime),\n      ));\n\n  // Add the inlined bytes to the HTML response\n  const originalTransferSize = minimalFCPGraph.request.transferSize;\n  const safeTransferSize = originalTransferSize || 0;\n  minimalFCPGraph.request.transferSize = safeTransferSize + totalChildNetworkBytes;\n  const estimateAfterInline = simulator.simulate(minimalFCPGraph).timeInMs;\n  minimalFCPGraph.request.transferSize = originalTransferSize;\n  return Math.round(Math.max(estimateBeforeInline - estimateAfterInline, 0)) as Types.Timing.MilliSeconds;\n}\n\nfunction hasImageLCP(parsedTrace: RequiredData<typeof deps>, context: InsightSetContextWithNavigation): boolean {\n  return parsedTrace.LargestImagePaint.lcpRequestByNavigation.get(context.navigation) !== undefined;\n}\n\nfunction computeSavings(\n    parsedTrace: RequiredData<typeof deps>, context: InsightSetContextWithNavigation,\n    renderBlockingRequests: Types.Events.SyntheticNetworkRequest[]):\n    Pick<RenderBlockingInsightModel, 'metricSavings'|'requestIdToWastedMs'>|undefined {\n  if (!context.lantern) {\n    return;\n  }\n\n  const nodesAndTimingsByRequestId =\n      getNodesAndTimingByRequestId(context.lantern.metrics.firstContentfulPaint.optimisticEstimate.nodeTimings);\n\n  const metricSavings = {FCP: 0 as Types.Timing.MilliSeconds, LCP: 0 as Types.Timing.MilliSeconds};\n  const requestIdToWastedMs = new Map<string, number>();\n  const deferredNodeIds = new Set<string>();\n  for (const request of renderBlockingRequests) {\n    const nodeAndTiming = nodesAndTimingsByRequestId.get(request.args.data.requestId);\n    if (!nodeAndTiming) {\n      continue;\n    }\n\n    const {node, nodeTiming} = nodeAndTiming;\n\n    // Mark this node and all its dependents as deferrable\n    node.traverse(node => deferredNodeIds.add(node.id));\n\n    // \"wastedMs\" is the download time of the network request, responseReceived - requestSent\n    const wastedMs = Math.round(nodeTiming.duration);\n    if (wastedMs < MINIMUM_WASTED_MS) {\n      continue;\n    }\n\n    requestIdToWastedMs.set(node.id, wastedMs);\n  }\n\n  if (requestIdToWastedMs.size) {\n    metricSavings.FCP = estimateSavingsWithGraphs(deferredNodeIds, context.lantern);\n\n    // In most cases, render blocking resources only affect LCP if LCP isn't an image.\n    if (!hasImageLCP(parsedTrace, context)) {\n      metricSavings.LCP = metricSavings.FCP;\n    }\n  }\n\n  return {metricSavings, requestIdToWastedMs};\n}\n\nfunction finalize(partialModel: Omit<RenderBlockingInsightModel, 'title'|'description'|'category'|'shouldShow'>):\n    RenderBlockingInsightModel {\n  return {\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    shouldShow: partialModel.renderBlockingRequests.length > 0,\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: RequiredData<typeof deps>, context: InsightSetContext): RenderBlockingInsightModel {\n  if (!context.navigation) {\n    return finalize({\n      renderBlockingRequests: [],\n    });\n  }\n\n  const firstPaintTs = parsedTrace.PageLoadMetrics.metricScoresByFrameId.get(context.frameId)\n                           ?.get(context.navigationId)\n                           ?.get(Handlers.ModelHandlers.PageLoadMetrics.MetricName.FP)\n                           ?.event?.ts;\n  if (!firstPaintTs) {\n    return finalize({\n      renderBlockingRequests: [],\n      warnings: [InsightWarning.NO_FP],\n    });\n  }\n\n  let renderBlockingRequests: Types.Events.SyntheticNetworkRequest[] = [];\n  for (const req of parsedTrace.NetworkRequests.byTime) {\n    if (req.args.data.frame !== context.frameId) {\n      continue;\n    }\n\n    if (!Helpers.Network.isSyntheticNetworkRequestEventRenderBlocking(req)) {\n      continue;\n    }\n\n    if (req.args.data.syntheticData.finishTime > firstPaintTs) {\n      continue;\n    }\n\n    // If a request is marked `in_body_parser_blocking` it should only be considered render blocking if it is a\n    // high enough priority. Some requests (e.g. scripts) are not marked as high priority if they are fetched\n    // after a non-preloaded image. (See \"early\" definition in https://web.dev/articles/fetch-priority)\n    //\n    // There are edge cases and exceptions (e.g. priority hints) but this gives us the best approximation\n    // of render blocking resources in the document body.\n    if (req.args.data.renderBlocking === 'in_body_parser_blocking') {\n      const priority = req.args.data.priority;\n      const isScript = req.args.data.resourceType === Protocol.Network.ResourceType.Script;\n      const isBlockingScript = isScript && priority === Protocol.Network.ResourcePriority.High;\n      if (priority !== Protocol.Network.ResourcePriority.VeryHigh && !isBlockingScript) {\n        continue;\n      }\n    }\n\n    const navigation =\n        Helpers.Trace.getNavigationForTraceEvent(req, context.frameId, parsedTrace.Meta.navigationsByFrameId);\n    if (navigation === context.navigation) {\n      renderBlockingRequests.push(req);\n    }\n  }\n\n  const savings = computeSavings(parsedTrace, context, renderBlockingRequests);\n\n  // Sort by request duration for insights.\n  renderBlockingRequests = renderBlockingRequests.sort((a, b) => {\n    return b.dur - a.dur;\n  });\n\n  return finalize({\n    relatedEvents: renderBlockingRequests,\n    renderBlockingRequests,\n    ...savings,\n  });\n}\n"],
  "mappings": "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",
  "names": ["node"]
}
