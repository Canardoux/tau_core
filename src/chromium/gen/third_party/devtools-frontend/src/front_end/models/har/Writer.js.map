{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/har/Writer.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2008, 2009 Anthony Ricaud <rik@webkit.org>\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\nimport {type BuildOptions, type EntryDTO, Log} from './Log.js';\n\nconst UIStrings = {\n  /**\n   *@description Title of progress in harwriter of the network panel\n   */\n  collectingContent: 'Collecting content\u2026',\n  /**\n   *@description Text to indicate DevTools is writing to a file\n   */\n  writingFile: 'Writing file\u2026',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/har/Writer.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class Writer {\n  static async write(\n      stream: Common.StringOutputStream.OutputStream, requests: SDK.NetworkRequest.NetworkRequest[],\n      options: BuildOptions, progress: Common.Progress.Progress): Promise<void> {\n    const compositeProgress = new Common.Progress.CompositeProgress(progress);\n\n    const content = await Writer.harStringForRequests(requests, options, compositeProgress);\n    if (progress.isCanceled()) {\n      return;\n    }\n    await Writer.writeToStream(stream, compositeProgress, content);\n  }\n\n  static async harStringForRequests(\n      requests: SDK.NetworkRequest.NetworkRequest[], options: BuildOptions,\n      compositeProgress: Common.Progress.CompositeProgress): Promise<string> {\n    const progress = compositeProgress.createSubProgress();\n    progress.setTitle(i18nString(UIStrings.collectingContent));\n    progress.setTotalWork(requests.length);\n\n    // Sort by issueTime because this is recorded as startedDateTime in HAR logs.\n    requests.sort((reqA, reqB) => reqA.issueTime() - reqB.issueTime());\n    const harLog = await Log.build(requests, options);\n    const promises = [];\n    for (let i = 0; i < requests.length; i++) {\n      const promise = requests[i].requestContentData();\n      promises.push(promise.then(contentLoaded.bind(null, harLog.entries[i])));\n    }\n\n    await Promise.all(promises);\n    progress.done();\n\n    if (progress.isCanceled()) {\n      return '';\n    }\n    return JSON.stringify({log: harLog}, null, jsonIndent);\n\n    function isValidCharacter(codePoint: number): boolean {\n      // Excludes non-characters (U+FDD0..U+FDEF, and all codepoints ending in\n      // 0xFFFE or 0xFFFF) from the set of valid code points.\n      return codePoint < 0xD800 || (codePoint >= 0xE000 && codePoint < 0xFDD0) ||\n          (codePoint > 0xFDEF && codePoint <= 0x10FFFF && (codePoint & 0xFFFE) !== 0xFFFE);\n    }\n\n    function needsEncoding(content: string): boolean {\n      for (let i = 0; i < content.length; i++) {\n        if (!isValidCharacter(content.charCodeAt(i))) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    function contentLoaded(entry: EntryDTO, contentDataOrError: TextUtils.ContentData.ContentDataOrError): void {\n      progress.incrementWorked();\n      const contentData = TextUtils.ContentData.ContentData.asDeferredContent(contentDataOrError);\n      let encoded: true|boolean = contentData.isEncoded;\n      if (contentData.content !== null) {\n        let content: string = contentData.content;\n        if (content && !encoded && needsEncoding(content)) {\n          content = Platform.StringUtilities.toBase64(content);\n          encoded = true;\n        }\n        entry.response.content.text = content;\n      }\n      if (encoded) {\n        entry.response.content.encoding = 'base64';\n      }\n    }\n  }\n\n  static async writeToStream(\n      stream: Common.StringOutputStream.OutputStream, compositeProgress: Common.Progress.CompositeProgress,\n      fileContent: string): Promise<void> {\n    const progress = compositeProgress.createSubProgress();\n    progress.setTitle(i18nString(UIStrings.writingFile));\n    progress.setTotalWork(fileContent.length);\n    for (let i = 0; i < fileContent.length && !progress.isCanceled(); i += chunkSize) {\n      const chunk = fileContent.substr(i, chunkSize);\n      await stream.write(chunk);\n      progress.incrementWorked(chunk.length);\n    }\n    progress.done();\n  }\n}\n\nexport const jsonIndent = 2;\nexport const chunkSize = 100000;\n"],
  "mappings": "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",
  "names": []
}
