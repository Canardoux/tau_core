{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/source_map_scopes/NamesResolver.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as Formatter from '../formatter/formatter.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport type * as Workspace from '../workspace/workspace.js';\n\nimport {scopeTreeForScript} from './ScopeTreeCache.js';\n\ninterface CachedScopeMap {\n  sourceMap: SDK.SourceMap.SourceMap|undefined;\n  mappingPromise: Promise<{variableMapping: Map<string, string>, thisMapping: string|null}>;\n}\n\nconst scopeToCachedIdentifiersMap = new WeakMap<Formatter.FormatterWorkerPool.ScopeTreeNode, CachedScopeMap>();\nconst cachedMapByCallFrame = new WeakMap<SDK.DebuggerModel.CallFrame, Map<string, string|null>>();\n\nexport async function getTextFor(contentProvider: TextUtils.ContentProvider.ContentProvider):\n    Promise<TextUtils.Text.Text|null> {\n  const contentData = await contentProvider.requestContentData();\n  if (TextUtils.ContentData.ContentData.isError(contentData) || !contentData.isTextContent) {\n    return null;\n  }\n  return contentData.textObj;\n}\n\nexport class IdentifierPositions {\n  name: string;\n  positions: {lineNumber: number, columnNumber: number}[];\n\n  constructor(name: string, positions: {lineNumber: number, columnNumber: number}[] = []) {\n    this.name = name;\n    this.positions = positions;\n  }\n\n  addPosition(lineNumber: number, columnNumber: number): void {\n    this.positions.push({lineNumber, columnNumber});\n  }\n}\n\nconst computeScopeTree = async function(script: SDK.Script.Script): Promise<{\nscopeTree:\n  Formatter.FormatterWorkerPool.ScopeTreeNode, text: TextUtils.Text.Text,\n}|null> {\n  if (!script.sourceMapURL) {\n    return null;\n  }\n\n  const text = await getTextFor(script);\n  if (!text) {\n    return null;\n  }\n\n  const scopeTree = await scopeTreeForScript(script);\n  if (!scopeTree) {\n    return null;\n  }\n  return {scopeTree, text};\n};\n\n/**\n * @returns the scope chain from outer-most to inner-most scope where the inner-most\n * scope either contains or matches the \"needle\".\n */\nconst findScopeChain = function(\n                           scopeTree: Formatter.FormatterWorkerPool.ScopeTreeNode,\n                           scopeNeedle: {start: number, end: number}): Formatter.FormatterWorkerPool.ScopeTreeNode[] {\n  if (!contains(scopeTree, scopeNeedle)) {\n    return [];\n  }\n\n  // Find the corresponding scope in the scope tree.\n  let containingScope = scopeTree;\n  const scopeChain = [scopeTree];\n  while (true) {\n    let childFound = false;\n    for (const child of containingScope.children) {\n      if (contains(child, scopeNeedle)) {\n        // We found a nested containing scope, continue with search there.\n        scopeChain.push(child);\n        containingScope = child;\n        childFound = true;\n        break;\n      }\n      // Sanity check: |scope| should not straddle any of the scopes in the tree. That is:\n      // Either |scope| is disjoint from |child| or |child| must be inside |scope|.\n      // (Or the |scope| is inside |child|, but that case is covered above.)\n      if (!disjoint(scopeNeedle, child) && !contains(scopeNeedle, child)) {\n        console.error('Wrong nesting of scopes');\n        return [];\n      }\n    }\n    if (!childFound) {\n      // We found the deepest scope in the tree that contains our scope chain entry.\n      break;\n    }\n  }\n\n  return scopeChain;\n\n  function contains(scope: {start: number, end: number}, candidate: {start: number, end: number}): boolean {\n    return (scope.start <= candidate.start) && (scope.end >= candidate.end);\n  }\n  function disjoint(scope: {start: number, end: number}, other: {start: number, end: number}): boolean {\n    return (scope.end <= other.start) || (other.end <= scope.start);\n  }\n};\n\nexport async function findScopeChainForDebuggerScope(scope: SDK.DebuggerModel.ScopeChainEntry):\n    Promise<Formatter.FormatterWorkerPool.ScopeTreeNode[]> {\n  const startLocation = scope.range()?.start;\n  const endLocation = scope.range()?.end;\n  if (!startLocation || !endLocation) {\n    return [];\n  }\n\n  const script = startLocation.script();\n  if (!script) {\n    return [];\n  }\n\n  const scopeTreeAndText = await computeScopeTree(script);\n  if (!scopeTreeAndText) {\n    return [];\n  }\n  const {scopeTree, text} = scopeTreeAndText;\n\n  // Compute the offset within the scope tree coordinate space.\n  const scopeOffsets = {\n    start: text.offsetFromPosition(startLocation.lineNumber, startLocation.columnNumber),\n    end: text.offsetFromPosition(endLocation.lineNumber, endLocation.columnNumber),\n  };\n\n  return findScopeChain(scopeTree, scopeOffsets);\n}\n\nexport const scopeIdentifiers = async function(\n    script: SDK.Script.Script, scope: Formatter.FormatterWorkerPool.ScopeTreeNode,\n    ancestorScopes: Formatter.FormatterWorkerPool.ScopeTreeNode[]): Promise<{\nfreeVariables:\n  IdentifierPositions[], boundVariables: IdentifierPositions[],\n}|null> {\n  const text = await getTextFor(script);\n  if (!text) {\n    return null;\n  }\n\n  // Now we have containing scope. Collect all the scope variables.\n  const boundVariables = [];\n  const cursor = new TextUtils.TextCursor.TextCursor(text.lineEndings());\n  for (const variable of scope.variables) {\n    // Skip the fixed-kind variable (i.e., 'this' or 'arguments') if we only found their \"definition\"\n    // without any uses.\n    if (variable.kind === Formatter.FormatterWorkerPool.DefinitionKind.FIXED && variable.offsets.length <= 1) {\n      continue;\n    }\n\n    const identifier = new IdentifierPositions(variable.name);\n    for (const offset of variable.offsets) {\n      cursor.resetTo(offset);\n      identifier.addPosition(cursor.lineNumber(), cursor.columnNumber());\n    }\n    boundVariables.push(identifier);\n  }\n\n  // Compute free variables by collecting all the ancestor variables that are used in |containingScope|.\n  const freeVariables = [];\n  for (const ancestor of ancestorScopes) {\n    for (const ancestorVariable of ancestor.variables) {\n      let identifier = null;\n      for (const offset of ancestorVariable.offsets) {\n        if (offset >= scope.start && offset < scope.end) {\n          if (!identifier) {\n            identifier = new IdentifierPositions(ancestorVariable.name);\n          }\n          cursor.resetTo(offset);\n          identifier.addPosition(cursor.lineNumber(), cursor.columnNumber());\n        }\n      }\n      if (identifier) {\n        freeVariables.push(identifier);\n      }\n    }\n  }\n  return {boundVariables, freeVariables};\n};\n\nconst identifierAndPunctuationRegExp = /^\\s*([A-Za-z_$][A-Za-z_$0-9]*)\\s*([.;,=]?)\\s*$/;\n\nconst enum Punctuation {\n  NONE = 'none',\n  COMMA = 'comma',\n  DOT = 'dot',\n  SEMICOLON = 'semicolon',\n  EQUALS = 'equals',\n}\n\nconst resolveDebuggerScope = async(scope: SDK.DebuggerModel.ScopeChainEntry):\n    Promise<{variableMapping: Map<string, string>, thisMapping: string | null}> => {\n      if (!Common.Settings.Settings.instance().moduleSetting('js-source-maps-enabled').get()) {\n        return {variableMapping: new Map(), thisMapping: null};\n      }\n      const script = scope.callFrame().script;\n      const scopeChain = await findScopeChainForDebuggerScope(scope);\n      return resolveScope(script, scopeChain);\n    };\n\nconst resolveScope = async(script: SDK.Script.Script, scopeChain: Formatter.FormatterWorkerPool.ScopeTreeNode[]):\n    Promise<{variableMapping: Map<string, string>, thisMapping: string | null}> => {\n      const parsedScope = scopeChain[scopeChain.length - 1];\n      if (!parsedScope) {\n        return {variableMapping: new Map<string, string>(), thisMapping: null};\n      }\n      let cachedScopeMap = scopeToCachedIdentifiersMap.get(parsedScope);\n      const sourceMap = script.sourceMap();\n\n      if (!cachedScopeMap || cachedScopeMap.sourceMap !== sourceMap) {\n        const identifiersPromise =\n            (async () => {\n              const variableMapping = new Map<string, string>();\n              let thisMapping = null;\n\n              if (!sourceMap) {\n                return {variableMapping, thisMapping};\n              }\n              // Extract as much as possible from SourceMap and resolve\n              // missing identifier names from SourceMap ranges.\n              const promises: Promise<void>[] = [];\n\n              const resolveEntry = (id: IdentifierPositions, handler: (sourceName: string) => void): void => {\n                // First see if we have a source map entry with a name for the identifier.\n                for (const position of id.positions) {\n                  const entry = sourceMap.findEntry(position.lineNumber, position.columnNumber);\n                  if (entry && entry.name) {\n                    handler(entry.name);\n                    return;\n                  }\n                }\n                // If there is no entry with the name field, try to infer the name from the source positions.\n                async function resolvePosition(): Promise<void> {\n                  if (!sourceMap) {\n                    return;\n                  }\n                  // Let us find the first non-empty mapping of |id| and return that. Ideally, we would\n                  // try to compute all the mappings and only use the mapping if all the non-empty\n                  // mappings agree. However, that can be expensive for identifiers with many uses,\n                  // so we iterate sequentially, stopping at the first non-empty mapping.\n                  for (const position of id.positions) {\n                    const sourceName = await resolveSourceName(script, sourceMap, id.name, position);\n                    if (sourceName) {\n                      handler(sourceName);\n                      return;\n                    }\n                  }\n                }\n                promises.push(resolvePosition());\n              };\n\n              const parsedVariables = await scopeIdentifiers(script, parsedScope, scopeChain.slice(0, -1));\n              if (!parsedVariables) {\n                return {variableMapping, thisMapping};\n              }\n              for (const id of parsedVariables.boundVariables) {\n                resolveEntry(id, sourceName => {\n                  // Let use ignore 'this' mappings - those are handled separately.\n                  if (sourceName !== 'this') {\n                    variableMapping.set(id.name, sourceName);\n                  }\n                });\n              }\n              for (const id of parsedVariables.freeVariables) {\n                resolveEntry(id, sourceName => {\n                  if (sourceName === 'this') {\n                    thisMapping = id.name;\n                  }\n                });\n              }\n              await Promise.all(promises).then(getScopeResolvedForTest());\n              return {variableMapping, thisMapping};\n            })();\n        cachedScopeMap = {sourceMap, mappingPromise: identifiersPromise};\n        scopeToCachedIdentifiersMap.set(parsedScope, {sourceMap, mappingPromise: identifiersPromise});\n      }\n      return await cachedScopeMap.mappingPromise;\n\n      async function resolveSourceName(\n          script: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap, name: string,\n          position: {lineNumber: number, columnNumber: number}): Promise<string|null> {\n        const ranges = sourceMap.findEntryRanges(position.lineNumber, position.columnNumber);\n        if (!ranges) {\n          return null;\n        }\n        // Extract the underlying text from the compiled code's range and make sure that\n        // it starts with the identifier |name|.\n        const uiSourceCode =\n            Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().uiSourceCodeForSourceMapSourceURL(\n                script.debuggerModel, ranges.sourceURL, script.isContentScript());\n        if (!uiSourceCode) {\n          return null;\n        }\n        const compiledText = await getTextFor(script);\n        if (!compiledText) {\n          return null;\n        }\n        const compiledToken = compiledText.extract(ranges.range);\n        const parsedCompiledToken = extractIdentifier(compiledToken);\n        if (!parsedCompiledToken) {\n          return null;\n        }\n        const {name: compiledName, punctuation: compiledPunctuation} = parsedCompiledToken;\n        if (compiledName !== name) {\n          return null;\n        }\n\n        // Extract the mapped name from the source code range and ensure that the punctuation\n        // matches the one from the compiled code.\n        const sourceText = await getTextFor(uiSourceCode);\n        if (!sourceText) {\n          return null;\n        }\n        const sourceToken = sourceText.extract(ranges.sourceRange);\n        const parsedSourceToken = extractIdentifier(sourceToken);\n        if (!parsedSourceToken) {\n          return null;\n        }\n        const {name: sourceName, punctuation: sourcePunctuation} = parsedSourceToken;\n        // Accept the source name if it is followed by the same punctuation.\n        if (compiledPunctuation === sourcePunctuation) {\n          return sourceName;\n        }\n        // Let us also allow semicolons into commas since that it is a common transformation.\n        if (compiledPunctuation === Punctuation.COMMA && sourcePunctuation === Punctuation.SEMICOLON) {\n          return sourceName;\n        }\n\n        return null;\n\n        function extractIdentifier(token: string): {name: string, punctuation: Punctuation}|null {\n          const match = token.match(identifierAndPunctuationRegExp);\n          if (!match) {\n            return null;\n          }\n\n          const name = match[1];\n          let punctuation: Punctuation|null = null;\n          switch (match[2]) {\n            case '.':\n              punctuation = Punctuation.DOT;\n              break;\n            case ',':\n              punctuation = Punctuation.COMMA;\n              break;\n            case ';':\n              punctuation = Punctuation.SEMICOLON;\n              break;\n            case '=':\n              punctuation = Punctuation.EQUALS;\n              break;\n            case '':\n              punctuation = Punctuation.NONE;\n              break;\n            default:\n              console.error(`Name token parsing error: unexpected token \"${match[2]}\"`);\n              return null;\n          }\n\n          return {name, punctuation};\n        }\n      }\n    };\n\nexport const resolveScopeChain =\n    async function(callFrame: SDK.DebuggerModel.CallFrame): Promise<SDK.DebuggerModel.ScopeChainEntry[]> {\n  const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n  let scopeChain: SDK.DebuggerModel.ScopeChainEntry[]|null|undefined = await pluginManager.resolveScopeChain(callFrame);\n  if (scopeChain) {\n    return scopeChain;\n  }\n\n  scopeChain = callFrame.script.sourceMap()?.resolveScopeChain(callFrame);\n  if (scopeChain) {\n    return scopeChain;\n  }\n\n  if (callFrame.script.isWasm()) {\n    return callFrame.scopeChain();\n  }\n  const thisObject = await resolveThisObject(callFrame);\n  return callFrame.scopeChain().map(scope => new ScopeWithSourceMappedVariables(scope, thisObject));\n};\n\n/**\n * @returns A mapping from original name -> compiled name. If the orignal name is unavailable (e.g. because the compiled name was\n * shadowed) we set it to `null`.\n */\nexport const allVariablesInCallFrame =\n    async(callFrame: SDK.DebuggerModel.CallFrame): Promise<Map<string, string|null>> => {\n  if (!Common.Settings.Settings.instance().moduleSetting('js-source-maps-enabled').get()) {\n    return new Map<string, string|null>();\n  }\n  const cachedMap = cachedMapByCallFrame.get(callFrame);\n  if (cachedMap) {\n    return cachedMap;\n  }\n\n  const scopeChain = callFrame.scopeChain();\n  const nameMappings = await Promise.all(scopeChain.map(resolveDebuggerScope));\n  const reverseMapping = new Map<string, string|null>();\n  const compiledNames = new Set<string>();\n  for (const {variableMapping} of nameMappings) {\n    for (const [compiledName, originalName] of variableMapping) {\n      if (!originalName) {\n        continue;\n      }\n      if (!reverseMapping.has(originalName)) {\n        // An inner scope might have shadowed {compiledName}. Mark it as \"unavailable\" in that case.\n        const compiledNameOrNull = compiledNames.has(compiledName) ? null : compiledName;\n        reverseMapping.set(originalName, compiledNameOrNull);\n      }\n      compiledNames.add(compiledName);\n    }\n  }\n  cachedMapByCallFrame.set(callFrame, reverseMapping);\n  return reverseMapping;\n};\n\n/**\n * @returns A mapping from original name -> compiled name. If the orignal name is unavailable (e.g. because the compiled name was\n * shadowed) we set it to `null`.\n */\nexport const allVariablesAtPosition =\n    async(location: SDK.DebuggerModel.Location): Promise<Map<string, string|null>> => {\n  const reverseMapping = new Map<string, string|null>();\n  if (!Common.Settings.Settings.instance().moduleSetting('js-source-maps-enabled').get()) {\n    return reverseMapping;\n  }\n  const script = location.script();\n  if (!script) {\n    return reverseMapping;\n  }\n\n  const scopeTreeAndText = await computeScopeTree(script);\n  if (!scopeTreeAndText) {\n    return reverseMapping;\n  }\n\n  const {scopeTree, text} = scopeTreeAndText;\n  const locationOffset = text.offsetFromPosition(location.lineNumber, location.columnNumber);\n  const scopeChain = findScopeChain(scopeTree, {start: locationOffset, end: locationOffset});\n  const compiledNames = new Set<string>();\n\n  while (scopeChain.length > 0) {\n    const {variableMapping} = await resolveScope(script, scopeChain);\n    for (const [compiledName, originalName] of variableMapping) {\n      if (!originalName) {\n        continue;\n      }\n      if (!reverseMapping.has(originalName)) {\n        // An inner scope might have shadowed {compiledName}. Mark it as \"unavailable\" in that case.\n        const compiledNameOrNull = compiledNames.has(compiledName) ? null : compiledName;\n        reverseMapping.set(originalName, compiledNameOrNull);\n      }\n      compiledNames.add(compiledName);\n    }\n    scopeChain.pop();\n  }\n  return reverseMapping;\n};\n\nexport const resolveExpression = async(\n    callFrame: SDK.DebuggerModel.CallFrame, originalText: string, uiSourceCode: Workspace.UISourceCode.UISourceCode,\n    lineNumber: number, startColumnNumber: number, endColumnNumber: number): Promise<string> => {\n  if (uiSourceCode.mimeType() === 'application/wasm') {\n    // For WebAssembly disassembly, lookup the different possiblities.\n    return `memories[\"${originalText}\"] ?? locals[\"${originalText}\"] ?? tables[\"${originalText}\"] ?? functions[\"${\n        originalText}\"] ?? globals[\"${originalText}\"]`;\n  }\n  if (!uiSourceCode.contentType().isFromSourceMap()) {\n    return '';\n  }\n  const reverseMapping = await allVariablesInCallFrame(callFrame);\n  if (reverseMapping.has(originalText)) {\n    return reverseMapping.get(originalText) as string;\n  }\n  const rawLocations =\n      await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().uiLocationToRawLocations(\n          uiSourceCode, lineNumber, startColumnNumber);\n  const rawLocation = rawLocations.find(location => location.debuggerModel === callFrame.debuggerModel);\n  if (!rawLocation) {\n    return '';\n  }\n  const script = rawLocation.script();\n  if (!script) {\n    return '';\n  }\n  const sourceMap = script.sourceMap();\n  if (!sourceMap) {\n    return '';\n  }\n  const text = await getTextFor(script);\n  if (!text) {\n    return '';\n  }\n  const textRanges = sourceMap.reverseMapTextRanges(\n      uiSourceCode.url(),\n      new TextUtils.TextRange.TextRange(lineNumber, startColumnNumber, lineNumber, endColumnNumber));\n  if (textRanges.length !== 1) {\n    return '';\n  }\n  const [compiledRange] = textRanges;\n  const subjectText = text.extract(compiledRange);\n  if (!subjectText) {\n    return '';\n  }\n  // Map `subjectText` back to the authored code and check that the source map spits out\n  // `originalText` again modulo some whitespace/punctuation.\n  const authoredText = await getTextFor(uiSourceCode);\n  if (!authoredText) {\n    return '';\n  }\n\n  // Take the \"start point\" and the \"end point - 1\" of the compiled range and map them\n  // with the source map. Note that for \"end point - 1\" we need the line endings array to potentially\n  // move to the end of the previous line.\n  const startRange = sourceMap.findEntryRanges(compiledRange.startLine, compiledRange.startColumn);\n  const endLine = compiledRange.endColumn === 0 ? compiledRange.endLine - 1 : compiledRange.endLine;\n  const endColumn = compiledRange.endColumn === 0 ? text.lineEndings()[endLine] : compiledRange.endColumn - 1;\n  const endRange = sourceMap.findEntryRanges(endLine, endColumn);\n  if (!startRange || !endRange) {\n    return '';\n  }\n\n  // Merge `startRange` with `endRange`. This might not be 100% correct if there are interleaved ranges inbetween.\n  const mappedAuthoredText = authoredText.extract(new TextUtils.TextRange.TextRange(\n      startRange.sourceRange.startLine, startRange.sourceRange.startColumn, endRange.sourceRange.endLine,\n      endRange.sourceRange.endColumn));\n\n  // Check that what we found after applying the source map roughly matches `originalText`.\n  const originalTextRegex = new RegExp(`^[\\\\s,;]*${Platform.StringUtilities.escapeForRegExp(originalText)}`, 'g');\n  if (!originalTextRegex.test(mappedAuthoredText)) {\n    return '';\n  }\n  return await Formatter.FormatterWorkerPool.formatterWorkerPool().evaluatableJavaScriptSubstring(subjectText);\n};\n\nexport const resolveThisObject =\n    async(callFrame: SDK.DebuggerModel.CallFrame): Promise<SDK.RemoteObject.RemoteObject|null> => {\n  const scopeChain = callFrame.scopeChain();\n  if (scopeChain.length === 0) {\n    return callFrame.thisObject();\n  }\n\n  const {thisMapping} = await resolveDebuggerScope(scopeChain[0]);\n  if (!thisMapping) {\n    return callFrame.thisObject();\n  }\n\n  const result = await callFrame.evaluate(({\n    expression: thisMapping,\n    objectGroup: 'backtrace',\n    includeCommandLineAPI: false,\n    silent: true,\n    returnByValue: false,\n    generatePreview: true,\n  }));\n  if ('exceptionDetails' in result) {\n    return !result.exceptionDetails && result.object ? result.object : callFrame.thisObject();\n  }\n  return null;\n};\n\nexport const resolveScopeInObject = function(scope: SDK.DebuggerModel.ScopeChainEntry): SDK.RemoteObject.RemoteObject {\n  const endLocation = scope.range()?.end;\n  const startLocationScript = scope.range()?.start.script() ?? null;\n\n  if (scope.type() === Protocol.Debugger.ScopeType.Global || !startLocationScript || !endLocation ||\n      !startLocationScript.sourceMapURL) {\n    return scope.object();\n  }\n\n  return new RemoteObject(scope);\n};\n\n/**\n * Wraps a debugger `Scope` but returns a scope object where variable names are\n * mapped to their authored name.\n *\n * This implementation does not utilize source map \"Scopes\" information but obtains\n * original variable names via parsing + mappings + names.\n */\nclass ScopeWithSourceMappedVariables implements SDK.DebuggerModel.ScopeChainEntry {\n  readonly #debuggerScope: SDK.DebuggerModel.ScopeChainEntry;\n  /** The resolved `this` of the current call frame */\n  readonly #thisObject: SDK.RemoteObject.RemoteObject|null;\n\n  constructor(scope: SDK.DebuggerModel.ScopeChainEntry, thisObject: SDK.RemoteObject.RemoteObject|null) {\n    this.#debuggerScope = scope;\n    this.#thisObject = thisObject;\n  }\n\n  callFrame(): SDK.DebuggerModel.CallFrame {\n    return this.#debuggerScope.callFrame();\n  }\n\n  type(): string {\n    return this.#debuggerScope.type();\n  }\n\n  typeName(): string {\n    return this.#debuggerScope.typeName();\n  }\n\n  name(): string|undefined {\n    return this.#debuggerScope.name();\n  }\n\n  range(): SDK.DebuggerModel.LocationRange|null {\n    return this.#debuggerScope.range();\n  }\n\n  object(): SDK.RemoteObject.RemoteObject {\n    return resolveScopeInObject(this.#debuggerScope);\n  }\n\n  description(): string {\n    return this.#debuggerScope.description();\n  }\n\n  icon(): string|undefined {\n    return this.#debuggerScope.icon();\n  }\n\n  extraProperties(): SDK.RemoteObject.RemoteObjectProperty[] {\n    const extraProperties = this.#debuggerScope.extraProperties();\n    if (this.#thisObject && this.type() === Protocol.Debugger.ScopeType.Local) {\n      extraProperties.unshift(new SDK.RemoteObject.RemoteObjectProperty(\n          'this', this.#thisObject, undefined, undefined, undefined, undefined, undefined, /* synthetic */ true));\n    }\n    return extraProperties;\n  }\n}\n\nexport class RemoteObject extends SDK.RemoteObject.RemoteObject {\n  private readonly scope: SDK.DebuggerModel.ScopeChainEntry;\n  private readonly object: SDK.RemoteObject.RemoteObject;\n  constructor(scope: SDK.DebuggerModel.ScopeChainEntry) {\n    super();\n    this.scope = scope;\n    this.object = scope.object();\n  }\n\n  override customPreview(): Protocol.Runtime.CustomPreview|null {\n    return this.object.customPreview();\n  }\n\n  override get objectId(): Protocol.Runtime.RemoteObjectId|undefined {\n    return this.object.objectId;\n  }\n\n  override get type(): string {\n    return this.object.type;\n  }\n\n  override get subtype(): string|undefined {\n    return this.object.subtype;\n  }\n\n  override get value(): typeof this.object.value {\n    return this.object.value;\n  }\n\n  override get description(): string|undefined {\n    return this.object.description;\n  }\n\n  override get hasChildren(): boolean {\n    return this.object.hasChildren;\n  }\n\n  override get preview(): Protocol.Runtime.ObjectPreview|undefined {\n    return this.object.preview;\n  }\n\n  override arrayLength(): number {\n    return this.object.arrayLength();\n  }\n\n  override getOwnProperties(generatePreview: boolean): Promise<SDK.RemoteObject.GetPropertiesResult> {\n    return this.object.getOwnProperties(generatePreview);\n  }\n\n  override async getAllProperties(accessorPropertiesOnly: boolean, generatePreview: boolean):\n      Promise<SDK.RemoteObject.GetPropertiesResult> {\n    const allProperties = await this.object.getAllProperties(accessorPropertiesOnly, generatePreview);\n    const {variableMapping} = await resolveDebuggerScope(this.scope);\n\n    const properties = allProperties.properties;\n    const internalProperties = allProperties.internalProperties;\n    const newProperties = properties?.map(property => {\n      const name = variableMapping.get(property.name);\n      return name !== undefined ? property.cloneWithNewName(name) : property;\n    });\n    return {properties: newProperties ?? [], internalProperties};\n  }\n\n  override async setPropertyValue(argumentName: string|Protocol.Runtime.CallArgument, value: string):\n      Promise<string|undefined> {\n    const {variableMapping} = await resolveDebuggerScope(this.scope);\n\n    let name;\n    if (typeof argumentName === 'string') {\n      name = argumentName;\n    } else {\n      name = (argumentName.value as string);\n    }\n\n    let actualName: string = name;\n    for (const compiledName of variableMapping.keys()) {\n      if (variableMapping.get(compiledName) === name) {\n        actualName = compiledName;\n        break;\n      }\n    }\n    return this.object.setPropertyValue(actualName, value);\n  }\n\n  override async deleteProperty(name: Protocol.Runtime.CallArgument): Promise<string|undefined> {\n    return this.object.deleteProperty(name);\n  }\n\n  override callFunction<T, U>(\n      functionDeclaration: (this: U, ...args: any[]) => T,\n      args?: Protocol.Runtime.CallArgument[]): Promise<SDK.RemoteObject.CallFunctionResult> {\n    return this.object.callFunction(functionDeclaration, args);\n  }\n\n  override callFunctionJSON<T, U>(\n      functionDeclaration: (this: U, ...args: any[]) => T, args?: Protocol.Runtime.CallArgument[]): Promise<T> {\n    return this.object.callFunctionJSON(functionDeclaration, args);\n  }\n\n  override release(): void {\n    this.object.release();\n  }\n\n  override debuggerModel(): SDK.DebuggerModel.DebuggerModel {\n    return this.object.debuggerModel();\n  }\n\n  override runtimeModel(): SDK.RuntimeModel.RuntimeModel {\n    return this.object.runtimeModel();\n  }\n\n  override isNode(): boolean {\n    return this.object.isNode();\n  }\n}\n\n// Resolve the frame's function name using the name associated with the opening\n// paren that starts the scope. If there is no name associated with the scope\n// start or if the function scope does not start with a left paren (e.g., arrow\n// function with one parameter), the resolution returns null.\nasync function getFunctionNameFromScopeStart(\n    script: SDK.Script.Script, lineNumber: number, columnNumber: number): Promise<string|null> {\n  // To reduce the overhead of resolving function names,\n  // we check for source maps first and immediately leave\n  // this function if the script doesn't have a sourcemap.\n  const sourceMap = script.sourceMap();\n  if (!sourceMap) {\n    return null;\n  }\n\n  const mappingEntry = sourceMap.findEntry(lineNumber, columnNumber);\n  if (!mappingEntry || !mappingEntry.sourceURL) {\n    return null;\n  }\n\n  const scopeName =\n      sourceMap.findScopeEntry(mappingEntry.sourceURL, mappingEntry.sourceLineNumber, mappingEntry.sourceColumnNumber)\n          ?.scopeName();\n  if (scopeName) {\n    return scopeName;\n  }\n\n  const name = mappingEntry.name;\n  if (!name) {\n    return null;\n  }\n\n  const text = await getTextFor(script);\n  if (!text) {\n    return null;\n  }\n\n  const openRange = new TextUtils.TextRange.TextRange(lineNumber, columnNumber, lineNumber, columnNumber + 1);\n\n  if (text.extract(openRange) !== '(') {\n    return null;\n  }\n\n  return name;\n}\n\nexport async function resolveDebuggerFrameFunctionName(frame: SDK.DebuggerModel.CallFrame): Promise<string|null> {\n  const startLocation = frame.localScope()?.range()?.start;\n  if (!startLocation) {\n    return null;\n  }\n  return await getFunctionNameFromScopeStart(frame.script, startLocation.lineNumber, startLocation.columnNumber);\n}\n\nexport async function resolveProfileFrameFunctionName(\n    {scriptId, lineNumber, columnNumber}: Partial<Protocol.Runtime.CallFrame>,\n    target: SDK.Target.Target|null): Promise<string|null> {\n  if (!target || lineNumber === undefined || columnNumber === undefined || scriptId === undefined) {\n    return null;\n  }\n  const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n  const script = debuggerModel?.scriptForId(String(scriptId));\n\n  if (!debuggerModel || !script) {\n    return null;\n  }\n\n  const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n  const location = new SDK.DebuggerModel.Location(debuggerModel, scriptId, lineNumber, columnNumber);\n  const functionInfoFromPlugin = await debuggerWorkspaceBinding.pluginManager.getFunctionInfo(script, location);\n  if (functionInfoFromPlugin && 'frames' in functionInfoFromPlugin) {\n    const last = functionInfoFromPlugin.frames.at(-1);\n    if (last?.name) {\n      return last.name;\n    }\n  }\n  return await getFunctionNameFromScopeStart(script, lineNumber, columnNumber);\n}\n\nlet scopeResolvedForTest: (...arg0: unknown[]) => void = function(): void {};\n\nexport const getScopeResolvedForTest = (): (...arg0: unknown[]) => void => {\n  return scopeResolvedForTest;\n};\n\nexport const setScopeResolvedForTest = (scope: (...arg0: unknown[]) => void): void => {\n  scopeResolvedForTest = scope;\n};\n"],
  "mappings": "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",
  "names": ["Punctuation", "script", "sourceMap", "name"]
}
