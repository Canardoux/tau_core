{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/helpers/Network.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {RenderBlocking, SyntheticNetworkRequest} from '../types/TraceEvents.js';\n\n// Important: we purposefully treat `potentially_blocking` as\n// non-render-blocking here because:\n// 1. An async script can run on the main thread at any point, including before\n//    the page is loaded\n// 2. An async script will never block the parsing and rendering process of the\n//    browser.\n// 3. Therefore, from a developer's point of view, there is nothing more they\n//    can do if they've put `async` on, and within the context of Insights, we\n//    shouldn't report an async script as render blocking.\n// In the future we may want to consider suggesting the use of `defer` over\n// `async`, as it doesn't have this concern, but for now we'll allow `async`\n// and not report it as an issue.\nconst NON_RENDER_BLOCKING_VALUES = new Set<RenderBlocking>([\n  'non_blocking',\n  'dynamically_injected_non_blocking',\n  'potentially_blocking',\n]);\n\nexport function isSyntheticNetworkRequestEventRenderBlocking(event: SyntheticNetworkRequest): boolean {\n  return !NON_RENDER_BLOCKING_VALUES.has(event.args.data.renderBlocking);\n}\n"],
  "mappings": ";AAkBA,MAAM,6BAA6B,oBAAI,IAAoB;AAAA,EACzD;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAEM,gBAAS,6CAA6C,OAAyC;AACpG,SAAO,CAAC,2BAA2B,IAAI,MAAM,KAAK,KAAK,cAAc;AACvE;",
  "names": []
}
