{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/timeline_model/TracingLayerTree.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as Trace from '../trace/trace.js';\n\nexport class TracingLayerTree extends SDK.LayerTreeBase.LayerTreeBase {\n  private tileById: Map<string, TracingLayerTile>;\n  private paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null;\n\n  constructor(target: SDK.Target.Target|null) {\n    super(target);\n    this.tileById = new Map();\n    this.paintProfilerModel = target && target.model(SDK.PaintProfiler.PaintProfilerModel);\n  }\n\n  async setLayers(\n      root: TracingLayerPayload|null, layers: TracingLayerPayload[]|null,\n      paints: Trace.Types.Events.LegacyLayerPaintEvent[]): Promise<void> {\n    const idsToResolve = new Set<Protocol.DOM.BackendNodeId>();\n    if (root) {\n      // This is a legacy code path for compatibility, as cc is removing\n      // layer tree hierarchy, this code will eventually be removed.\n      this.extractNodeIdsToResolve(idsToResolve, {}, root);\n    } else if (layers) {\n      for (let i = 0; i < layers.length; ++i) {\n        this.extractNodeIdsToResolve(idsToResolve, {}, layers[i]);\n      }\n    }\n\n    await this.resolveBackendNodeIds(idsToResolve);\n\n    const oldLayersById = this.layersById;\n    this.layersById = new Map();\n    this.setContentRoot(null);\n    if (root) {\n      const convertedLayers = this.innerSetLayers(oldLayersById, root);\n      this.setRoot(convertedLayers);\n    } else if (layers) {\n      const processedLayers = layers.map(this.innerSetLayers.bind(this, oldLayersById));\n      const contentRoot = this.contentRoot();\n      if (!contentRoot) {\n        throw new Error('Content root is not set.');\n      }\n      this.setRoot(contentRoot);\n      for (let i = 0; i < processedLayers.length; ++i) {\n        if (processedLayers[i].id() !== contentRoot.id()) {\n          contentRoot.addChild(processedLayers[i]);\n        }\n      }\n    }\n    this.setPaints(paints);\n  }\n\n  setTiles(tiles: TracingLayerTile[]): void {\n    this.tileById = new Map();\n    for (const tile of tiles) {\n      this.tileById.set(tile.id, tile);\n    }\n  }\n\n  pictureForRasterTile(tileId: string): Promise<SDK.PaintProfiler.SnapshotWithRect|null> {\n    const tile = this.tileById.get('cc::Tile/' + tileId);\n    if (!tile) {\n      Common.Console.Console.instance().error(`Tile ${tileId} is missing`);\n      return Promise.resolve(null) as Promise<SDK.PaintProfiler.SnapshotWithRect|null>;\n    }\n    const layer = (this.layerById(tile.layer_id) as TracingLayer | null);\n    if (!layer) {\n      Common.Console.Console.instance().error(`Layer ${tile.layer_id} for tile ${tileId} is not found`);\n      return Promise.resolve(null) as Promise<SDK.PaintProfiler.SnapshotWithRect|null>;\n    }\n    return layer.pictureForRect(tile.content_rect);\n  }\n\n  private setPaints(paints: Trace.Types.Events.LegacyLayerPaintEvent[]): void {\n    for (let i = 0; i < paints.length; ++i) {\n      const layer = (this.layersById.get(paints[i].layerId()) as TracingLayer | null);\n      if (layer) {\n        layer.addPaintEvent(paints[i]);\n      }\n    }\n  }\n\n  private innerSetLayers(oldLayersById: Map<string|number, SDK.LayerTreeBase.Layer>, payload: TracingLayerPayload):\n      TracingLayer {\n    let layer = (oldLayersById.get(payload.layer_id) as TracingLayer | null);\n    if (layer) {\n      layer.reset(payload);\n    } else {\n      layer = new TracingLayer(this.paintProfilerModel, payload);\n    }\n    this.layersById.set(payload.layer_id, layer);\n    if (payload.owner_node) {\n      layer.setNode(this.backendNodeIdToNode().get(payload.owner_node) || null);\n    }\n    if (!this.contentRoot() && layer.drawsContent()) {\n      this.setContentRoot(layer);\n    }\n    for (let i = 0; payload.children && i < payload.children.length; ++i) {\n      layer.addChild(this.innerSetLayers(oldLayersById, payload.children[i]));\n    }\n    return layer;\n  }\n\n  private extractNodeIdsToResolve(\n      nodeIdsToResolve: Set<Protocol.DOM.BackendNodeId>, seenNodeIds: Object, payload: TracingLayerPayload): void {\n    const backendNodeId = payload.owner_node;\n    if (backendNodeId && !this.backendNodeIdToNode().has(backendNodeId)) {\n      nodeIdsToResolve.add(backendNodeId);\n    }\n    for (let i = 0; payload.children && i < payload.children.length; ++i) {\n      this.extractNodeIdsToResolve(nodeIdsToResolve, seenNodeIds, payload.children[i]);\n    }\n  }\n}\nexport class TracingFrameLayerTree {\n  readonly #target: SDK.Target.Target|null;\n  readonly #snapshot: Trace.Types.Events.LayerTreeHostImplSnapshot;\n  readonly #paints: Trace.Types.Events.LegacyLayerPaintEvent[] = [];\n\n  constructor(target: SDK.Target.Target|null, data: Trace.Types.Events.LegacyFrameLayerTreeData) {\n    this.#target = target;\n    this.#snapshot = data.entry;\n    this.#paints = data.paints;\n  }\n\n  async layerTreePromise(): Promise<TracingLayerTree|null> {\n    const data = this.#snapshot.args.snapshot;\n    const viewport = data['device_viewport_size'];\n    const tiles = data['active_tiles'];\n    const rootLayer = data['active_tree']['root_layer'];\n    const layers = data['active_tree']['layers'];\n    const layerTree = new TracingLayerTree(this.#target);\n    layerTree.setViewportSize(viewport);\n    layerTree.setTiles(tiles);\n    await layerTree.setLayers(rootLayer, layers, this.#paints || []);\n    return layerTree;\n  }\n\n  paints(): Trace.Types.Events.LegacyLayerPaintEvent[] {\n    return this.#paints;\n  }\n}\n\nexport class TracingLayer implements SDK.LayerTreeBase.Layer {\n  private parentLayerId: string|null;\n  private parentInternal: SDK.LayerTreeBase.Layer|null;\n  private layerId: string;\n  private nodeInternal: SDK.DOMModel.DOMNode|null;\n  private offsetXInternal: number;\n  private offsetYInternal: number;\n  private widthInternal: number;\n  private heightInternal: number;\n  private childrenInternal: SDK.LayerTreeBase.Layer[];\n  private quadInternal: number[];\n  private scrollRectsInternal: Protocol.LayerTree.ScrollRect[];\n  private gpuMemoryUsageInternal: number;\n  private paints: Trace.Types.Events.LegacyLayerPaintEvent[];\n  private compositingReasons: string[];\n  private compositingReasonIds: string[];\n  private drawsContentInternal: boolean;\n  private paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null;\n  constructor(paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null, payload: TracingLayerPayload) {\n    this.parentLayerId = null;\n    this.parentInternal = null;\n    this.layerId = '';\n    this.nodeInternal = null;\n    this.offsetXInternal = -1;\n    this.offsetYInternal = -1;\n    this.widthInternal = -1;\n    this.heightInternal = -1;\n    this.childrenInternal = [];\n    this.quadInternal = [];\n    this.scrollRectsInternal = [];\n    this.gpuMemoryUsageInternal = -1;\n    this.paints = [];\n    this.compositingReasons = [];\n    this.compositingReasonIds = [];\n    this.drawsContentInternal = false;\n\n    this.paintProfilerModel = paintProfilerModel;\n    this.reset(payload);\n  }\n\n  reset(payload: TracingLayerPayload): void {\n    this.nodeInternal = null;\n    this.layerId = String(payload.layer_id);\n    this.offsetXInternal = payload.position[0];\n    this.offsetYInternal = payload.position[1];\n    this.widthInternal = payload.bounds.width;\n    this.heightInternal = payload.bounds.height;\n    this.childrenInternal = [];\n    this.parentLayerId = null;\n    this.parentInternal = null;\n    this.quadInternal = payload.layer_quad || [];\n    this.createScrollRects(payload);\n\n    this.compositingReasons = payload.compositing_reasons || [];\n    this.compositingReasonIds = payload.compositing_reason_ids || [];\n    this.drawsContentInternal = Boolean(payload.draws_content);\n    this.gpuMemoryUsageInternal = payload.gpu_memory_usage;\n    this.paints = [];\n  }\n\n  id(): string {\n    return this.layerId;\n  }\n\n  parentId(): string|null {\n    return this.parentLayerId;\n  }\n\n  parent(): SDK.LayerTreeBase.Layer|null {\n    return this.parentInternal;\n  }\n\n  isRoot(): boolean {\n    return !this.parentId();\n  }\n\n  children(): SDK.LayerTreeBase.Layer[] {\n    return this.childrenInternal;\n  }\n\n  addChild(childParam: SDK.LayerTreeBase.Layer): void {\n    const child = (childParam as TracingLayer);\n    if (child.parentInternal) {\n      console.assert(false, 'Child already has a parent');\n    }\n    this.childrenInternal.push(child);\n    child.parentInternal = this;\n    child.parentLayerId = this.layerId;\n  }\n\n  setNode(node: SDK.DOMModel.DOMNode|null): void {\n    this.nodeInternal = node;\n  }\n\n  node(): SDK.DOMModel.DOMNode|null {\n    return this.nodeInternal;\n  }\n\n  nodeForSelfOrAncestor(): SDK.DOMModel.DOMNode|null {\n    let layer: (SDK.LayerTreeBase.Layer|null)|this = this;\n    for (; layer; layer = layer.parent()) {\n      if (layer.node()) {\n        return layer.node();\n      }\n    }\n    return null;\n  }\n\n  offsetX(): number {\n    return this.offsetXInternal;\n  }\n\n  offsetY(): number {\n    return this.offsetYInternal;\n  }\n\n  width(): number {\n    return this.widthInternal;\n  }\n\n  height(): number {\n    return this.heightInternal;\n  }\n\n  transform(): number[]|null {\n    return null;\n  }\n\n  quad(): number[] {\n    return this.quadInternal;\n  }\n\n  anchorPoint(): number[] {\n    return [0.5, 0.5, 0];\n  }\n\n  invisible(): boolean {\n    return false;\n  }\n\n  paintCount(): number {\n    return 0;\n  }\n\n  lastPaintRect(): Protocol.DOM.Rect|null {\n    return null;\n  }\n\n  scrollRects(): Protocol.LayerTree.ScrollRect[] {\n    return this.scrollRectsInternal;\n  }\n\n  stickyPositionConstraint(): SDK.LayerTreeBase.StickyPositionConstraint|null {\n    // TODO(smcgruer): Provide sticky layer information in traces.\n    return null;\n  }\n\n  gpuMemoryUsage(): number {\n    return this.gpuMemoryUsageInternal;\n  }\n\n  snapshots(): Promise<SDK.PaintProfiler.SnapshotWithRect|null>[] {\n    return this.paints.map(async paint => {\n      if (!this.paintProfilerModel) {\n        return null;\n      }\n\n      const snapshot = await getPaintProfilerSnapshot(\n          this.paintProfilerModel,\n          paint,\n      );\n      if (!snapshot) {\n        return null;\n      }\n      const rect = {x: snapshot.rect[0], y: snapshot.rect[1], width: snapshot.rect[2], height: snapshot.rect[3]};\n      return {rect, snapshot: snapshot.snapshot};\n    });\n  }\n\n  async pictureForRect(targetRect: number[]): Promise<SDK.PaintProfiler.SnapshotWithRect|null> {\n    return Promise.all(this.paints.map(paint => paint.picture())).then(pictures => {\n      const filteredPictures = (pictures.filter(picture => picture && rectsOverlap(picture.rect, targetRect)) as {\n        rect: Array<number>,\n        serializedPicture: string,\n      }[]);\n\n      const fragments = filteredPictures.map(\n          picture => ({x: picture.rect[0], y: picture.rect[1], picture: picture.serializedPicture}));\n\n      if (!fragments.length || !this.paintProfilerModel) {\n        return null;\n      }\n      const x0 = fragments.reduce((min, item) => Math.min(min, item.x), Infinity);\n      const y0 = fragments.reduce((min, item) => Math.min(min, item.y), Infinity);\n      // Rect is in layer content coordinates, make it relative to picture by offsetting to the top left corner.\n      const rect = {x: targetRect[0] - x0, y: targetRect[1] - y0, width: targetRect[2], height: targetRect[3]};\n      return this.paintProfilerModel.loadSnapshotFromFragments(fragments).then(\n          snapshot => snapshot ? {rect, snapshot} : null);\n    });\n\n    function segmentsOverlap(a1: number, a2: number, b1: number, b2: number): boolean {\n      console.assert(a1 <= a2 && b1 <= b2, 'segments should be specified as ordered pairs');\n      return a2 > b1 && a1 < b2;\n    }\n\n    function rectsOverlap(a: number[], b: number[]): boolean {\n      return segmentsOverlap(a[0], a[0] + a[2], b[0], b[0] + b[2]) &&\n          segmentsOverlap(a[1], a[1] + a[3], b[1], b[1] + b[3]);\n    }\n  }\n\n  private scrollRectsFromParams(params: number[], type: Protocol.LayerTree.ScrollRectType):\n      Protocol.LayerTree.ScrollRect {\n    return {rect: {x: params[0], y: params[1], width: params[2], height: params[3]}, type};\n  }\n\n  private createScrollRects(payload: TracingLayerPayload): void {\n    const nonPayloadScrollRects: Protocol.LayerTree.ScrollRect[] = [];\n    if (payload.non_fast_scrollable_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.non_fast_scrollable_region, 'NonFastScrollable' as Protocol.LayerTree.ScrollRectType));\n    }\n    if (payload.touch_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.touch_event_handler_region, Protocol.LayerTree.ScrollRectType.TouchEventHandler));\n    }\n    if (payload.wheel_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.wheel_event_handler_region, Protocol.LayerTree.ScrollRectType.WheelEventHandler));\n    }\n    if (payload.scroll_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.scroll_event_handler_region, Protocol.LayerTree.ScrollRectType.RepaintsOnScroll));\n    }\n\n    // SDK.LayerBaseTree.Layer.ScrollRectType and Protocol.LayerTree.ScrollRectType are the\n    // same type, but we need to use the indirection of the nonPayloadScrollRects since\n    // the ScrollRectType is defined as a string in SDK.LayerBaseTree.Layer.ScrollRectType.\n    this.scrollRectsInternal = nonPayloadScrollRects;\n  }\n\n  addPaintEvent(paint: Trace.Types.Events.LegacyLayerPaintEvent): void {\n    this.paints.push(paint);\n  }\n\n  requestCompositingReasons(): Promise<string[]> {\n    return Promise.resolve(this.compositingReasons);\n  }\n\n  requestCompositingReasonIds(): Promise<string[]> {\n    return Promise.resolve(this.compositingReasonIds);\n  }\n\n  drawsContent(): boolean {\n    return this.drawsContentInternal;\n  }\n}\n\nexport interface TracingLayerPayload {\n  bounds: {height: number, width: number};\n  children: TracingLayerPayload[];\n  layer_id: number;\n  position: number[];\n  scroll_offset: number[];\n  layer_quad: number[];\n  draws_content: number;\n  gpu_memory_usage: number;\n  transform: number[];\n  owner_node: Protocol.DOM.BackendNodeId;\n  compositing_reasons: string[];\n  compositing_reason_ids: string[];\n  non_fast_scrollable_region: number[];\n  touch_event_handler_region: number[];\n  wheel_event_handler_region: number[];\n  scroll_event_handler_region: number[];\n}\n\nexport interface TracingLayerTile {\n  id: string;\n  layer_id: string;\n  gpu_memory_usage: number;\n  content_rect: number[];\n}\n\nasync function getPaintProfilerSnapshot(\n    paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel,\n    paint: Trace.Types.Events.LegacyLayerPaintEvent): Promise<{\n  rect: number[],\n  snapshot: SDK.PaintProfiler.PaintProfilerSnapshot,\n}|null> {\n  const picture = paint.picture();\n  if (!picture || !paintProfilerModel) {\n    return null;\n  }\n  const snapshot = await paintProfilerModel.loadSnapshot(picture.serializedPicture);\n  return snapshot ? {rect: picture.rect, snapshot} : null;\n}\n"],
  "mappings": "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",
  "names": []
}
