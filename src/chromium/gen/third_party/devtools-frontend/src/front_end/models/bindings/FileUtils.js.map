{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/FileUtils.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nexport interface ChunkedReader {\n  fileSize(): number;\n\n  loadedSize(): number;\n\n  fileName(): string;\n\n  cancel(): void;\n\n  error(): DOMError|null;\n}\ninterface DecompressionStream extends GenericTransformStream {\n  readonly format: string;\n}\ndeclare const DecompressionStream: {\n  prototype: DecompressionStream,\n  new (format: string): DecompressionStream,\n};\n\nexport class ChunkedFileReader implements ChunkedReader {\n  #file: File|null;\n  readonly #fileSizeInternal: number;\n  #loadedSizeInternal: number;\n  #streamReader: ReadableStreamDefaultReader<Uint8Array>|null;\n  readonly #chunkSize: number;\n  readonly #chunkTransferredCallback: ((arg0: ChunkedReader) => void)|undefined;\n  readonly #decoder: TextDecoder;\n  #isCanceled: boolean;\n  #errorInternal: DOMException|null;\n  #transferFinished!: (arg0: boolean) => void;\n  #output?: Common.StringOutputStream.OutputStream;\n  #reader?: FileReader|null;\n\n  constructor(file: File, chunkSize?: number, chunkTransferredCallback?: ((arg0: ChunkedReader) => void)) {\n    this.#file = file;\n    this.#fileSizeInternal = file.size;\n    this.#loadedSizeInternal = 0;\n    this.#chunkSize = (chunkSize) ? chunkSize : Number.MAX_VALUE;\n    this.#chunkTransferredCallback = chunkTransferredCallback;\n    this.#decoder = new TextDecoder();\n    this.#isCanceled = false;\n    this.#errorInternal = null;\n    this.#streamReader = null;\n  }\n\n  async read(output: Common.StringOutputStream.OutputStream): Promise<boolean> {\n    if (this.#chunkTransferredCallback) {\n      this.#chunkTransferredCallback(this);\n    }\n\n    if (this.#file?.type.endsWith('gzip')) {\n      // TypeScript can't tell if to use @types/node or lib.webworker.d.ts\n      // types, so we force it to here.\n      // crbug.com/1392092\n      const fileStream = this.#file.stream() as unknown as ReadableStream<Uint8Array>;\n      const stream = this.decompressStream(fileStream);\n      this.#streamReader = stream.getReader();\n    } else {\n      this.#reader = new FileReader();\n      this.#reader.onload = this.onChunkLoaded.bind(this);\n      this.#reader.onerror = this.onError.bind(this);\n    }\n\n    this.#output = output;\n    void this.loadChunk();\n\n    return new Promise(resolve => {\n      this.#transferFinished = resolve;\n    });\n  }\n\n  cancel(): void {\n    this.#isCanceled = true;\n  }\n\n  loadedSize(): number {\n    return this.#loadedSizeInternal;\n  }\n\n  fileSize(): number {\n    return this.#fileSizeInternal;\n  }\n\n  fileName(): string {\n    if (!this.#file) {\n      return '';\n    }\n    return this.#file.name;\n  }\n\n  error(): DOMException|null {\n    return this.#errorInternal;\n  }\n\n  // Decompress gzip natively thanks to https://wicg.github.io/compression/\n  private decompressStream(stream: ReadableStream): ReadableStream {\n    const ds = new DecompressionStream('gzip');\n    const decompressionStream = stream.pipeThrough(ds);\n    return decompressionStream;\n  }\n\n  private onChunkLoaded(event: Event): void {\n    if (this.#isCanceled) {\n      return;\n    }\n\n    const eventTarget = (event.target as FileReader);\n    if (eventTarget.readyState !== FileReader.DONE) {\n      return;\n    }\n\n    if (!this.#reader) {\n      return;\n    }\n\n    const buffer = (this.#reader.result as ArrayBuffer);\n    this.#loadedSizeInternal += buffer.byteLength;\n    const endOfFile = this.#loadedSizeInternal === this.#fileSizeInternal;\n    void this.decodeChunkBuffer(buffer, endOfFile);\n  }\n\n  private async decodeChunkBuffer(buffer: ArrayBuffer, endOfFile: boolean): Promise<void> {\n    if (!this.#output) {\n      return;\n    }\n    const decodedString = this.#decoder.decode(buffer, {stream: !endOfFile});\n    await this.#output.write(decodedString, endOfFile);\n    if (this.#isCanceled) {\n      return;\n    }\n    if (this.#chunkTransferredCallback) {\n      this.#chunkTransferredCallback(this);\n    }\n\n    if (endOfFile) {\n      void this.finishRead();\n      return;\n    }\n    void this.loadChunk();\n  }\n\n  private async finishRead(): Promise<void> {\n    if (!this.#output) {\n      return;\n    }\n    this.#file = null;\n    this.#reader = null;\n    await this.#output.close();\n    this.#transferFinished(!this.#errorInternal);\n  }\n\n  private async loadChunk(): Promise<void> {\n    if (!this.#output || !this.#file) {\n      return;\n    }\n    if (this.#streamReader) {\n      const {value, done} = await this.#streamReader.read();\n      if (done || !value) {\n        // Write empty string to inform of file end\n        await this.#output.write('', true);\n        return this.finishRead();\n      }\n      void this.decodeChunkBuffer(value.buffer, false);\n    }\n    if (this.#reader) {\n      const chunkStart = this.#loadedSizeInternal;\n      const chunkEnd = Math.min(this.#fileSizeInternal, chunkStart + this.#chunkSize);\n      const nextPart = this.#file.slice(chunkStart, chunkEnd);\n      this.#reader.readAsArrayBuffer(nextPart);\n    }\n  }\n\n  private onError(event: Event): void {\n    const eventTarget = (event.target as FileReader);\n    this.#errorInternal = eventTarget.error;\n    this.#transferFinished(false);\n  }\n}\n\nexport class FileOutputStream implements Common.StringOutputStream.OutputStream {\n  #writeCallbacks: (() => void)[];\n  #fileName!: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString;\n  #closed?: boolean;\n  constructor() {\n    this.#writeCallbacks = [];\n  }\n\n  async open(fileName: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString): Promise<boolean> {\n    this.#closed = false;\n    this.#writeCallbacks = [];\n    this.#fileName = fileName;\n    const saveResponse =\n        await Workspace.FileManager.FileManager.instance().save(this.#fileName, '', true, false /* isBase64 */);\n    if (saveResponse) {\n      Workspace.FileManager.FileManager.instance().addEventListener(\n          Workspace.FileManager.Events.APPENDED_TO_URL, this.onAppendDone, this);\n    }\n    return Boolean(saveResponse);\n  }\n\n  write(data: string): Promise<void> {\n    return new Promise(resolve => {\n      this.#writeCallbacks.push(resolve);\n      Workspace.FileManager.FileManager.instance().append(this.#fileName, data);\n    });\n  }\n\n  async close(): Promise<void> {\n    this.#closed = true;\n    if (this.#writeCallbacks.length) {\n      return;\n    }\n    Workspace.FileManager.FileManager.instance().removeEventListener(\n        Workspace.FileManager.Events.APPENDED_TO_URL, this.onAppendDone, this);\n    Workspace.FileManager.FileManager.instance().close(this.#fileName);\n  }\n\n  private onAppendDone(event: Common.EventTarget.EventTargetEvent<string>): void {\n    if (event.data !== this.#fileName) {\n      return;\n    }\n    const writeCallback = this.#writeCallbacks.shift();\n    if (writeCallback) {\n      writeCallback();\n    }\n    if (this.#writeCallbacks.length) {\n      return;\n    }\n    if (!this.#closed) {\n      return;\n    }\n    Workspace.FileManager.FileManager.instance().removeEventListener(\n        Workspace.FileManager.Events.APPENDED_TO_URL, this.onAppendDone, this);\n    Workspace.FileManager.FileManager.instance().close(this.#fileName);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
