{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/handlers/ExtensionTraceDataHandler.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport type {HandlerName} from './types.js';\nimport {data as userTimingsData} from './UserTimingsHandler.js';\n\nconst extensionFlameChartEntries: Types.Extensions.SyntheticExtensionTrackEntry[] = [];\nconst extensionTrackData: Types.Extensions.ExtensionTrackData[] = [];\nconst extensionMarkers: Types.Extensions.SyntheticExtensionMarker[] = [];\nconst entryToNode: Map<Types.Events.Event, Helpers.TreeHelpers.TraceEntryNode> = new Map();\n\nexport interface ExtensionTraceData {\n  extensionTrackData: readonly Types.Extensions.ExtensionTrackData[];\n  extensionMarkers: readonly Types.Extensions.SyntheticExtensionMarker[];\n  entryToNode: Map<Types.Events.Event, Helpers.TreeHelpers.TraceEntryNode>;\n}\n\nexport function handleEvent(_event: Types.Events.Event): void {\n  // Implementation not needed because data is sourced from UserTimingsHandler\n}\n\nexport function reset(): void {\n  extensionFlameChartEntries.length = 0;\n  extensionTrackData.length = 0;\n  extensionMarkers.length = 0;\n  entryToNode.clear();\n}\n\nexport async function finalize(): Promise<void> {\n  createExtensionFlameChartEntries();\n}\n\nfunction createExtensionFlameChartEntries(): void {\n  const pairedMeasures: readonly Types.Events.SyntheticUserTimingPair[] = userTimingsData().performanceMeasures;\n  const marks: readonly Types.Events.PerformanceMark[] = userTimingsData().performanceMarks;\n  const mergedRawExtensionEvents = Helpers.Trace.mergeEventsInOrder(pairedMeasures, marks);\n\n  extractExtensionEntries(mergedRawExtensionEvents);\n  Helpers.Extensions.buildTrackDataFromExtensionEntries(extensionFlameChartEntries, extensionTrackData, entryToNode);\n}\n\nexport function extractExtensionEntries(timings: (Types.Events.SyntheticUserTimingPair|Types.Events.PerformanceMark)[]):\n    void {\n  for (const timing of timings) {\n    const extensionPayload = extensionDataInTiming(timing);\n    if (!extensionPayload) {\n      // Not an extension user timing.\n      continue;\n    }\n\n    const extensionSyntheticEntry = {\n      name: timing.name,\n      ph: Types.Events.Phase.COMPLETE,\n      pid: Types.Events.ProcessID(0),\n      tid: Types.Events.ThreadID(0),\n      ts: timing.ts,\n      dur: timing.dur as Types.Timing.MicroSeconds,\n      cat: 'devtools.extension',\n      args: extensionPayload,\n      rawSourceEvent: Types.Events.isSyntheticUserTiming(timing) ? timing.rawSourceEvent : timing,\n    };\n\n    if (Types.Extensions.isExtensionPayloadMarker(extensionPayload)) {\n      const extensionMarker =\n          Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager()\n              .registerSyntheticEvent<Types.Extensions.SyntheticExtensionMarker>(\n                  extensionSyntheticEntry as Omit<Types.Extensions.SyntheticExtensionMarker, '_tag'>);\n      extensionMarkers.push(extensionMarker);\n      continue;\n    }\n\n    if (Types.Extensions.isExtensionPayloadTrackEntry(extensionSyntheticEntry.args)) {\n      const extensionTrackEntry =\n          Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager()\n              .registerSyntheticEvent<Types.Extensions.SyntheticExtensionTrackEntry>(\n                  extensionSyntheticEntry as Omit<Types.Extensions.SyntheticExtensionTrackEntry, '_tag'>);\n      extensionFlameChartEntries.push(extensionTrackEntry);\n      continue;\n    }\n  }\n}\n\nexport function extensionDataInTiming(timing: Types.Events.SyntheticUserTimingPair|\n                                      Types.Events.PerformanceMark): Types.Extensions.ExtensionDataPayload|null {\n  const timingDetail =\n      Types.Events.isPerformanceMark(timing) ? timing.args.data?.detail : timing.args.data.beginEvent.args.detail;\n  if (!timingDetail) {\n    return null;\n  }\n  try {\n    // Attempt to parse the detail as an object that might be coming from a\n    // DevTools Perf extension.\n    // Wrapped in a try-catch because timingDetail might either:\n    // 1. Not be `json.parse`-able (it should, but just in case...)\n    // 2.Not be an object - in which case the `in` check will error.\n    // If we hit either of these cases, we just ignore this mark and move on.\n    const detailObj = JSON.parse(timingDetail);\n    if (!('devtools' in detailObj)) {\n      return null;\n    }\n    if (!Types.Extensions.isValidExtensionPayload(detailObj.devtools)) {\n      return null;\n    }\n    return detailObj.devtools;\n  } catch (e) {\n    // No need to worry about this error, just discard this event and don't\n    // treat it as having any useful information for the purposes of extensions\n    return null;\n  }\n}\n\nexport function data(): ExtensionTraceData {\n  return {\n    entryToNode,\n    extensionTrackData: [...extensionTrackData],\n    extensionMarkers: [...extensionMarkers],\n  };\n}\n\nexport function deps(): HandlerName[] {\n  return ['UserTimings'];\n}\n"],
  "mappings": ";AAIA,YAAY,aAAa;AACzB,YAAY,WAAW;AAGvB,SAAQ,QAAQ,uBAAsB;AAEtC,MAAM,6BAA8E,CAAC;AACrF,MAAM,qBAA4D,CAAC;AACnE,MAAM,mBAAgE,CAAC;AACvE,MAAM,cAA2E,oBAAI,IAAI;AAQlF,gBAAS,YAAY,QAAkC;AAE9D;AAEO,gBAAS,QAAc;AAC5B,6BAA2B,SAAS;AACpC,qBAAmB,SAAS;AAC5B,mBAAiB,SAAS;AAC1B,cAAY,MAAM;AACpB;AAEA,sBAAsB,WAA0B;AAC9C,mCAAiC;AACnC;AAEA,SAAS,mCAAyC;AAChD,QAAM,iBAAkE,gBAAgB,EAAE;AAC1F,QAAM,QAAiD,gBAAgB,EAAE;AACzE,QAAM,2BAA2B,QAAQ,MAAM,mBAAmB,gBAAgB,KAAK;AAEvF,0BAAwB,wBAAwB;AAChD,UAAQ,WAAW,mCAAmC,4BAA4B,oBAAoB,WAAW;AACnH;AAEO,gBAAS,wBAAwB,SAC/B;AACP,aAAW,UAAU,SAAS;AAC5B,UAAM,mBAAmB,sBAAsB,MAAM;AACrD,QAAI,CAAC,kBAAkB;AAErB;AAAA,IACF;AAEA,UAAM,0BAA0B;AAAA,MAC9B,MAAM,OAAO;AAAA,MACb,IAAI,MAAM,OAAO,MAAM;AAAA,MACvB,KAAK,MAAM,OAAO,UAAU,CAAC;AAAA,MAC7B,KAAK,MAAM,OAAO,SAAS,CAAC;AAAA,MAC5B,IAAI,OAAO;AAAA,MACX,KAAK,OAAO;AAAA,MACZ,KAAK;AAAA,MACL,MAAM;AAAA,MACN,gBAAgB,MAAM,OAAO,sBAAsB,MAAM,IAAI,OAAO,iBAAiB;AAAA,IACvF;AAEA,QAAI,MAAM,WAAW,yBAAyB,gBAAgB,GAAG;AAC/D,YAAM,kBACF,QAAQ,gBAAgB,uBAAuB,iBAAiB,EAC3D;AAAA,QACG;AAAA,MAAkF;AAC9F,uBAAiB,KAAK,eAAe;AACrC;AAAA,IACF;AAEA,QAAI,MAAM,WAAW,6BAA6B,wBAAwB,IAAI,GAAG;AAC/E,YAAM,sBACF,QAAQ,gBAAgB,uBAAuB,iBAAiB,EAC3D;AAAA,QACG;AAAA,MAAsF;AAClG,iCAA2B,KAAK,mBAAmB;AACnD;AAAA,IACF;AAAA,EACF;AACF;AAEO,gBAAS,sBAAsB,QAC0E;AAC9G,QAAM,eACF,MAAM,OAAO,kBAAkB,MAAM,IAAI,OAAO,KAAK,MAAM,SAAS,OAAO,KAAK,KAAK,WAAW,KAAK;AACzG,MAAI,CAAC,cAAc;AACjB,WAAO;AAAA,EACT;AACA,MAAI;AAOF,UAAM,YAAY,KAAK,MAAM,YAAY;AACzC,QAAI,EAAE,cAAc,YAAY;AAC9B,aAAO;AAAA,IACT;AACA,QAAI,CAAC,MAAM,WAAW,wBAAwB,UAAU,QAAQ,GAAG;AACjE,aAAO;AAAA,IACT;AACA,WAAO,UAAU;AAAA,EACnB,SAAS,GAAG;AAGV,WAAO;AAAA,EACT;AACF;AAEO,gBAAS,OAA2B;AACzC,SAAO;AAAA,IACL;AAAA,IACA,oBAAoB,CAAC,GAAG,kBAAkB;AAAA,IAC1C,kBAAkB,CAAC,GAAG,gBAAgB;AAAA,EACxC;AACF;AAEO,gBAAS,OAAsB;AACpC,SAAO,CAAC,aAAa;AACvB;",
  "names": []
}
