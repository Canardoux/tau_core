{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/helpers/SyntheticEvents.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Types from '../types/types.js';\n\nlet activeManager: SyntheticEventsManager|null = null;\n\nexport class SyntheticEventsManager {\n  /**\n   * All synthetic entries created in a trace from a corresponding trace events.\n   * (ProfileCalls are excluded because they are not based on a real trace event)\n   */\n  #syntheticTraces: Types.Events.SyntheticBased[] = [];\n  /**\n   * All raw entries from a trace.\n   */\n  #rawTraceEvents: readonly Types.Events.Event[] = [];\n\n  static activate(manager: SyntheticEventsManager): void {\n    activeManager = manager;\n  }\n\n  static createAndActivate(rawEvents: readonly Types.Events.Event[]): SyntheticEventsManager {\n    const manager = new SyntheticEventsManager(rawEvents);\n    SyntheticEventsManager.activate(manager);\n    return manager;\n  }\n\n  static getActiveManager(): SyntheticEventsManager {\n    if (!activeManager) {\n      throw new Error('Attempted to get a SyntheticEventsManager without initializing');\n    }\n    return activeManager;\n  }\n\n  static reset(): void {\n    activeManager = null;\n  }\n\n  static registerSyntheticEvent<T extends Types.Events.SyntheticBased>(syntheticEvent: Omit<T, '_tag'>): T {\n    try {\n      return SyntheticEventsManager.getActiveManager().registerSyntheticEvent(syntheticEvent);\n    } catch (e) {\n      // If no active manager has been initialized, we assume the trace engine is\n      // not running as part of the Performance panel. In this case we don't\n      // register synthetic events because we don't need to support timeline\n      // modifications serialization.\n      return syntheticEvent as T;\n    }\n  }\n\n  static registerServerTiming(syntheticEvent: Omit<Types.Events.SyntheticServerTiming, '_tag'>):\n      Types.Events.SyntheticServerTiming {\n    // TODO(crbug.com/340811171): Implement\n    return syntheticEvent as Types.Events.SyntheticServerTiming;\n  }\n\n  private constructor(rawEvents: readonly Types.Events.Event[]) {\n    this.#rawTraceEvents = rawEvents;\n  }\n\n  /**\n   * Registers and returns a branded synthetic event. Synthetic events need to\n   * be created with this method to ensure they are registered and made\n   * available to load events using serialized keys.\n   */\n  registerSyntheticEvent<T extends Types.Events.SyntheticBased>(syntheticEvent: Omit<T, '_tag'>): T {\n    const rawIndex = this.#rawTraceEvents.indexOf(syntheticEvent.rawSourceEvent);\n    if (rawIndex < 0) {\n      throw new Error('Attempted to register a synthetic event paired to an unknown raw event.');\n    }\n    const eventAsSynthetic = syntheticEvent as T;\n    this.#syntheticTraces[rawIndex] = eventAsSynthetic;\n    return eventAsSynthetic;\n  }\n\n  syntheticEventForRawEventIndex(rawEventIndex: number): Types.Events.SyntheticBased {\n    const syntheticEvent = this.#syntheticTraces.at(rawEventIndex);\n    if (!syntheticEvent) {\n      throw new Error(`Attempted to get a synthetic event from an unknown raw event index: ${rawEventIndex}`);\n    }\n    return syntheticEvent;\n  }\n\n  getSyntheticTraces(): Types.Events.SyntheticBased[] {\n    return this.#syntheticTraces;\n  }\n\n  getRawTraceEvents(): readonly Types.Events.Event[] {\n    return this.#rawTraceEvents;\n  }\n}\n"],
  "mappings": ";AAMA,IAAI,gBAA6C;AAE1C,aAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlC,mBAAkD,CAAC;AAAA;AAAA;AAAA;AAAA,EAInD,kBAAiD,CAAC;AAAA,EAElD,OAAO,SAAS,SAAuC;AACrD,oBAAgB;AAAA,EAClB;AAAA,EAEA,OAAO,kBAAkB,WAAkE;AACzF,UAAM,UAAU,IAAI,uBAAuB,SAAS;AACpD,2BAAuB,SAAS,OAAO;AACvC,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,mBAA2C;AAChD,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,MAAM,gEAAgE;AAAA,IAClF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,QAAc;AACnB,oBAAgB;AAAA,EAClB;AAAA,EAEA,OAAO,uBAA8D,gBAAoC;AACvG,QAAI;AACF,aAAO,uBAAuB,iBAAiB,EAAE,uBAAuB,cAAc;AAAA,IACxF,SAAS,GAAG;AAKV,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,OAAO,qBAAqB,gBACW;AAErC,WAAO;AAAA,EACT;AAAA,EAEQ,YAAY,WAA0C;AAC5D,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAA8D,gBAAoC;AAChG,UAAM,WAAW,KAAK,gBAAgB,QAAQ,eAAe,cAAc;AAC3E,QAAI,WAAW,GAAG;AAChB,YAAM,IAAI,MAAM,yEAAyE;AAAA,IAC3F;AACA,UAAM,mBAAmB;AACzB,SAAK,iBAAiB,QAAQ,IAAI;AAClC,WAAO;AAAA,EACT;AAAA,EAEA,+BAA+B,eAAoD;AACjF,UAAM,iBAAiB,KAAK,iBAAiB,GAAG,aAAa;AAC7D,QAAI,CAAC,gBAAgB;AACnB,YAAM,IAAI,MAAM,uEAAuE,aAAa,EAAE;AAAA,IACxG;AACA,WAAO;AAAA,EACT;AAAA,EAEA,qBAAoD;AAClD,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,oBAAmD;AACjD,WAAO,KAAK;AAAA,EACd;AACF;",
  "names": []
}
