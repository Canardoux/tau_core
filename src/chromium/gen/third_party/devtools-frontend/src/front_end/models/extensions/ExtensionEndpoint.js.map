{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/extensions/ExtensionEndpoint.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\ntype Response = {\n  requestId: number,\n  result: unknown,\n  error: Error|null,\n};\n\ntype Event = {\n  event: string,\n};\n\ntype Message = MessageEvent<Response|Event>;\n\nexport class ExtensionEndpoint {\n  private readonly port: MessagePort;\n  private nextRequestId: number = 0;\n  private pendingRequests: Map<number, {\n    resolve: (arg: unknown) => void,\n    reject: (error: Error) => void,\n  }>;\n\n  constructor(port: MessagePort) {\n    this.port = port;\n    this.port.onmessage = this.onResponse.bind(this);\n    this.pendingRequests = new Map();\n  }\n\n  sendRequest<ReturnType>(method: string, parameters: unknown): Promise<ReturnType> {\n    return new Promise((resolve, reject) => {\n      const requestId = this.nextRequestId++;\n      this.pendingRequests.set(requestId, {resolve: resolve as (arg: unknown) => void, reject});\n      this.port.postMessage({requestId, method, parameters});\n    });\n  }\n\n  protected disconnect(): void {\n    for (const {reject} of this.pendingRequests.values()) {\n      reject(new Error('Extension endpoint disconnected'));\n    }\n    this.pendingRequests.clear();\n    this.port.close();\n  }\n\n  private onResponse({data}: Message): void {\n    if ('event' in data) {\n      this.handleEvent(data);\n      return;\n    }\n    const {requestId, result, error} = data;\n    const pendingRequest = this.pendingRequests.get(requestId);\n    if (!pendingRequest) {\n      console.error(`No pending request ${requestId}`);\n      return;\n    }\n    this.pendingRequests.delete(requestId);\n    if (error) {\n      pendingRequest.reject(new Error(error.message));\n    } else {\n      pendingRequest.resolve(result);\n    }\n  }\n\n  protected handleEvent(_event: Event): void {\n    throw new Error('handleEvent is not implemented');\n  }\n}\n"],
  "mappings": ";AAgBO,aAAM,kBAAkB;AAAA,EACZ;AAAA,EACT,gBAAwB;AAAA,EACxB;AAAA,EAKR,YAAY,MAAmB;AAC7B,SAAK,OAAO;AACZ,SAAK,KAAK,YAAY,KAAK,WAAW,KAAK,IAAI;AAC/C,SAAK,kBAAkB,oBAAI,IAAI;AAAA,EACjC;AAAA,EAEA,YAAwB,QAAgB,YAA0C;AAChF,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,YAAY,KAAK;AACvB,WAAK,gBAAgB,IAAI,WAAW,EAAC,SAA4C,OAAM,CAAC;AACxF,WAAK,KAAK,YAAY,EAAC,WAAW,QAAQ,WAAU,CAAC;AAAA,IACvD,CAAC;AAAA,EACH;AAAA,EAEU,aAAmB;AAC3B,eAAW,EAAC,OAAM,KAAK,KAAK,gBAAgB,OAAO,GAAG;AACpD,aAAO,IAAI,MAAM,iCAAiC,CAAC;AAAA,IACrD;AACA,SAAK,gBAAgB,MAAM;AAC3B,SAAK,KAAK,MAAM;AAAA,EAClB;AAAA,EAEQ,WAAW,EAAC,KAAI,GAAkB;AACxC,QAAI,WAAW,MAAM;AACnB,WAAK,YAAY,IAAI;AACrB;AAAA,IACF;AACA,UAAM,EAAC,WAAW,QAAQ,MAAK,IAAI;AACnC,UAAM,iBAAiB,KAAK,gBAAgB,IAAI,SAAS;AACzD,QAAI,CAAC,gBAAgB;AACnB,cAAQ,MAAM,sBAAsB,SAAS,EAAE;AAC/C;AAAA,IACF;AACA,SAAK,gBAAgB,OAAO,SAAS;AACrC,QAAI,OAAO;AACT,qBAAe,OAAO,IAAI,MAAM,MAAM,OAAO,CAAC;AAAA,IAChD,OAAO;AACL,qBAAe,QAAQ,MAAM;AAAA,IAC/B;AAAA,EACF;AAAA,EAEU,YAAY,QAAqB;AACzC,UAAM,IAAI,MAAM,gCAAgC;AAAA,EAClD;AACF;",
  "names": []
}
