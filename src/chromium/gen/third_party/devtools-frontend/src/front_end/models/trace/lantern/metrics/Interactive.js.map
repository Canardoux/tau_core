{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/lantern/metrics/Interactive.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Core from '../core/core.js';\nimport * as Graph from '../graph/graph.js';\nimport type * as Simulation from '../simulation/simulation.js';\n\nimport {\n  type Extras,\n  Metric,\n  type MetricCoefficients,\n  type MetricComputationDataInput,\n  type MetricResult,\n} from './Metric.js';\n\n// Any CPU task of 20 ms or more will end up being a critical long task on mobile\nconst CRITICAL_LONG_TASK_THRESHOLD = 20;\n\nclass Interactive extends Metric {\n  static override get coefficients(): MetricCoefficients {\n    return {\n      intercept: 0,\n      optimistic: 0.45,\n      pessimistic: 0.55,\n    };\n  }\n\n  static override getOptimisticGraph<T>(dependencyGraph: Graph.Node<T>): Graph.Node<T> {\n    // Adjust the critical long task threshold for microseconds\n    const minimumCpuTaskDuration = CRITICAL_LONG_TASK_THRESHOLD * 1000;\n\n    return dependencyGraph.cloneWithRelationships(node => {\n      // Include everything that might be a long task\n      if (node.type === Graph.BaseNode.types.CPU) {\n        return node.duration > minimumCpuTaskDuration;\n      }\n\n      // Include all scripts and high priority requests, exclude all images\n      const isImage = node.request.resourceType === 'Image';\n      const isScript = node.request.resourceType === 'Script';\n      return (!isImage && (isScript || node.request.priority === 'High' || node.request.priority === 'VeryHigh'));\n    });\n  }\n\n  static override getPessimisticGraph<T>(dependencyGraph: Graph.Node<T>): Graph.Node<T> {\n    return dependencyGraph;\n  }\n\n  static override getEstimateFromSimulation(simulationResult: Simulation.Result, extras: Extras): Simulation.Result {\n    if (!extras.lcpResult) {\n      throw new Core.LanternError('missing lcpResult');\n    }\n\n    const lastTaskAt = Interactive.getLastLongTaskEndTime(simulationResult.nodeTimings);\n    const minimumTime = extras.optimistic ? extras.lcpResult.optimisticEstimate.timeInMs :\n                                            extras.lcpResult.pessimisticEstimate.timeInMs;\n    return {\n      timeInMs: Math.max(minimumTime, lastTaskAt),\n      nodeTimings: simulationResult.nodeTimings,\n    };\n  }\n\n  static override compute(data: MetricComputationDataInput, extras?: Omit<Extras, 'optimistic'>): MetricResult {\n    const lcpResult = extras?.lcpResult;\n    if (!lcpResult) {\n      throw new Core.LanternError('LCP is required to calculate the Interactive metric');\n    }\n\n    const metricResult = super.compute(data, extras);\n    metricResult.timing = Math.max(metricResult.timing, lcpResult.timing);\n    return metricResult;\n  }\n\n  static getLastLongTaskEndTime(nodeTimings: Simulation.Result['nodeTimings'], duration = 50): number {\n    return Array.from(nodeTimings.entries())\n        .filter(([node, timing]) => {\n          if (node.type !== Graph.BaseNode.types.CPU) {\n            return false;\n          }\n          return timing.duration > duration;\n        })\n        .map(([_, timing]) => timing.endTime)\n        .reduce((max, x) => Math.max(max || 0, x || 0), 0);\n  }\n}\n\nexport {Interactive};\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,WAAW;AAGvB;AAAA,EAEE;AAAA,OAIK;AAGP,MAAM,+BAA+B;AAErC,MAAM,oBAAoB,OAAO;AAAA,EAC/B,WAAoB,eAAmC;AACrD,WAAO;AAAA,MACL,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EAEA,OAAgB,mBAAsB,iBAA+C;AAEnF,UAAM,yBAAyB,+BAA+B;AAE9D,WAAO,gBAAgB,uBAAuB,UAAQ;AAEpD,UAAI,KAAK,SAAS,MAAM,SAAS,MAAM,KAAK;AAC1C,eAAO,KAAK,WAAW;AAAA,MACzB;AAGA,YAAM,UAAU,KAAK,QAAQ,iBAAiB;AAC9C,YAAM,WAAW,KAAK,QAAQ,iBAAiB;AAC/C,aAAQ,CAAC,YAAY,YAAY,KAAK,QAAQ,aAAa,UAAU,KAAK,QAAQ,aAAa;AAAA,IACjG,CAAC;AAAA,EACH;AAAA,EAEA,OAAgB,oBAAuB,iBAA+C;AACpF,WAAO;AAAA,EACT;AAAA,EAEA,OAAgB,0BAA0B,kBAAqC,QAAmC;AAChH,QAAI,CAAC,OAAO,WAAW;AACrB,YAAM,IAAI,KAAK,aAAa,mBAAmB;AAAA,IACjD;AAEA,UAAM,aAAa,YAAY,uBAAuB,iBAAiB,WAAW;AAClF,UAAM,cAAc,OAAO,aAAa,OAAO,UAAU,mBAAmB,WACpC,OAAO,UAAU,oBAAoB;AAC7E,WAAO;AAAA,MACL,UAAU,KAAK,IAAI,aAAa,UAAU;AAAA,MAC1C,aAAa,iBAAiB;AAAA,IAChC;AAAA,EACF;AAAA,EAEA,OAAgB,QAAQ,MAAkC,QAAmD;AAC3G,UAAM,YAAY,QAAQ;AAC1B,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,KAAK,aAAa,qDAAqD;AAAA,IACnF;AAEA,UAAM,eAAe,MAAM,QAAQ,MAAM,MAAM;AAC/C,iBAAa,SAAS,KAAK,IAAI,aAAa,QAAQ,UAAU,MAAM;AACpE,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,uBAAuB,aAA+C,WAAW,IAAY;AAClG,WAAO,MAAM,KAAK,YAAY,QAAQ,CAAC,EAClC,OAAO,CAAC,CAAC,MAAM,MAAM,MAAM;AAC1B,UAAI,KAAK,SAAS,MAAM,SAAS,MAAM,KAAK;AAC1C,eAAO;AAAA,MACT;AACA,aAAO,OAAO,WAAW;AAAA,IAC3B,CAAC,EACA,IAAI,CAAC,CAAC,GAAG,MAAM,MAAM,OAAO,OAAO,EACnC,OAAO,CAAC,KAAK,MAAM,KAAK,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC;AAAA,EACvD;AACF;AAEA,SAAQ;",
  "names": []
}
