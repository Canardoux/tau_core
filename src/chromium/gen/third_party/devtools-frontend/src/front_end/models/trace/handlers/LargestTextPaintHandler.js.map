{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/handlers/LargestTextPaintHandler.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Types from '../types/types.js';\n/**\n * A trace file will contain all the text paints that were candidates for the\n * LargestTextPaint. If an LCP event is text, it will point to one of these\n * candidates, so we store them by their DOM Node ID.\n **/\nconst textPaintByDOMNodeId = new Map<Protocol.DOM.BackendNodeId, Types.Events.LargestTextPaintCandidate>();\n\nexport function reset(): void {\n  textPaintByDOMNodeId.clear();\n}\n\nexport function handleEvent(event: Types.Events.Event): void {\n  if (!Types.Events.isLargestTextPaintCandidate(event)) {\n    return;\n  }\n\n  if (!event.args.data) {\n    return;\n  }\n\n  textPaintByDOMNodeId.set(event.args.data.DOMNodeId, event);\n}\n\nexport async function finalize(): Promise<void> {\n}\n\nexport function data(): Map<Protocol.DOM.BackendNodeId, Types.Events.LargestTextPaintCandidate> {\n  return textPaintByDOMNodeId;\n}\n"],
  "mappings": ";AAKA,YAAY,WAAW;AAMvB,MAAM,uBAAuB,oBAAI,IAAwE;AAElG,gBAAS,QAAc;AAC5B,uBAAqB,MAAM;AAC7B;AAEO,gBAAS,YAAY,OAAiC;AAC3D,MAAI,CAAC,MAAM,OAAO,4BAA4B,KAAK,GAAG;AACpD;AAAA,EACF;AAEA,MAAI,CAAC,MAAM,KAAK,MAAM;AACpB;AAAA,EACF;AAEA,uBAAqB,IAAI,MAAM,KAAK,KAAK,WAAW,KAAK;AAC3D;AAEA,sBAAsB,WAA0B;AAChD;AAEO,gBAAS,OAAgF;AAC9F,SAAO;AACT;",
  "names": []
}
