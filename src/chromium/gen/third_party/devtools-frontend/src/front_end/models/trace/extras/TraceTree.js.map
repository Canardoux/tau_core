{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/extras/TraceTree.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {TimelineJSProfileProcessor} from './TimelineJSProfile.js';\nimport type {TraceFilter} from './TraceFilter.js';\n\nexport class Node {\n  totalTime: number;\n  selfTime: number;\n  id: string|symbol;\n  /** The first trace event encountered that necessitated the creation of this tree node. */\n  event: Types.Events.Event;\n  /** All of the trace events associated with this aggregate node.\n   * Minor: In the case of Event Log (EventsTimelineTreeView), the node is not aggregate and this will only hold 1 event, the same that's in this.event\n   */\n  events: Types.Events.Event[];\n  parent!: Node|null;\n  groupId: string;\n  isGroupNodeInternal: boolean;\n  depth: number;\n\n  constructor(id: string|symbol, event: Types.Events.Event) {\n    this.totalTime = 0;\n    this.selfTime = 0;\n    this.id = id;\n    this.event = event;\n    this.events = [event];\n\n    this.groupId = '';\n    this.isGroupNodeInternal = false;\n    this.depth = 0;\n  }\n\n  isGroupNode(): boolean {\n    return this.isGroupNodeInternal;\n  }\n\n  hasChildren(): boolean {\n    throw 'Not implemented';\n  }\n\n  setHasChildren(_value: boolean): void {\n    throw 'Not implemented';\n  }\n  /**\n   * Returns the direct descendants of this node.\n   * @returns a map with ordered <nodeId, Node> tuples.\n   */\n  children(): ChildrenCache {\n    throw 'Not implemented';\n  }\n\n  searchTree(matchFunction: (arg0: Types.Events.Event) => boolean, results?: Node[]): Node[] {\n    results = results || [];\n    if (this.event && matchFunction(this.event)) {\n      results.push(this);\n    }\n    for (const child of this.children().values()) {\n      child.searchTree(matchFunction, results);\n    }\n    return results;\n  }\n}\n\nexport class TopDownNode extends Node {\n  root: TopDownRootNode|null;\n  private hasChildrenInternal: boolean;\n  childrenInternal: ChildrenCache|null;\n  override parent: TopDownNode|null;\n\n  constructor(id: string|symbol, event: Types.Events.Event, parent: TopDownNode|null) {\n    super(id, event);\n    this.root = parent && parent.root;\n    this.hasChildrenInternal = false;\n    this.childrenInternal = null;\n    this.parent = parent;\n  }\n\n  override hasChildren(): boolean {\n    return this.hasChildrenInternal;\n  }\n\n  override setHasChildren(value: boolean): void {\n    this.hasChildrenInternal = value;\n  }\n\n  override children(): ChildrenCache {\n    return this.childrenInternal || this.buildChildren();\n  }\n\n  private buildChildren(): ChildrenCache {\n    // Tracks the ancestor path of this node, includes the current node.\n    const path: TopDownNode[] = [];\n    for (let node: TopDownNode = (this as TopDownNode); node.parent && !node.isGroupNode(); node = node.parent) {\n      path.push((node as TopDownNode));\n    }\n    path.reverse();\n    const children: ChildrenCache = new Map();\n    const self = this;\n    const root = this.root;\n    if (!root) {\n      this.childrenInternal = children;\n      return this.childrenInternal;\n    }\n    const startTime = root.startTime;\n    const endTime = root.endTime;\n    const instantEventCallback = (root.doNotAggregate || root.includeInstantEvents) ? onInstantEvent : undefined;\n    const eventIdCallback = root.doNotAggregate ? undefined : generateEventID;\n    const eventGroupIdCallback = root.getEventGroupIdCallback();\n    let depth = 0;\n    // The amount of ancestors found to match this node's ancestors\n    // during the event tree walk.\n    let matchedDepth = 0;\n    let currentDirectChild: Node|null = null;\n\n    // Walk on the full event tree to find this node's children.\n    Helpers.Trace.forEachEvent(\n        root.events,\n        {\n          onStartEvent,\n          onEndEvent,\n          onInstantEvent: instantEventCallback,\n          startTime: Helpers.Timing.millisecondsToMicroseconds(startTime),\n          endTime: Helpers.Timing.millisecondsToMicroseconds(endTime),\n          eventFilter: root.filter,\n          ignoreAsyncEvents: false,\n        },\n    );\n\n    function onStartEvent(e: Types.Events.Event): void {\n      const {startTime: currentStartTime, endTime: currentEndTime} = Helpers.Timing.eventTimingsMilliSeconds(e);\n\n      ++depth;\n      if (depth > path.length + 2) {\n        return;\n      }\n      if (!matchPath(e)) {\n        return;\n      }\n      const actualEndTime = currentEndTime !== undefined ? Math.min(currentEndTime, endTime) : endTime;\n      const duration = actualEndTime - Math.max(startTime, currentStartTime);\n      if (duration < 0) {\n        console.error('Negative event duration');\n      }\n      processEvent(e, duration);\n    }\n\n    function onInstantEvent(e: Types.Events.Event): void {\n      ++depth;\n      if (matchedDepth === path.length && depth <= path.length + 2) {\n        processEvent(e, 0);\n      }\n      --depth;\n    }\n\n    /**\n     * Creates a child node.\n     */\n    function processEvent(e: Types.Events.Event, duration: number): void {\n      if (depth === path.length + 2) {\n        if (!currentDirectChild) {\n          return;\n        }\n        currentDirectChild.setHasChildren(true);\n        currentDirectChild.selfTime -= duration;\n        return;\n      }\n      let id;\n      let groupId = '';\n      if (!eventIdCallback) {\n        id = Symbol('uniqueId');\n      } else {\n        id = eventIdCallback(e);\n        groupId = eventGroupIdCallback ? eventGroupIdCallback(e) : '';\n        if (groupId) {\n          id += '/' + groupId;\n        }\n      }\n      let node = children.get(id);\n      if (!node) {\n        node = new TopDownNode(id, e, self);\n        node.groupId = groupId;\n        children.set(id, node);\n      } else {\n        node.events.push(e);\n      }\n      node.selfTime += duration;\n      node.totalTime += duration;\n      currentDirectChild = node;\n    }\n\n    /**\n     * Checks if the path of ancestors of an event matches the path of\n     * ancestors of the current node. In other words, checks if an event\n     * is a child of this node. As the check is done, the partial result\n     * is cached on `matchedDepth`, for future checks.\n     */\n    function matchPath(e: Types.Events.Event): boolean {\n      const {endTime} = Helpers.Timing.eventTimingsMilliSeconds(e);\n      if (matchedDepth === path.length) {\n        return true;\n      }\n      if (matchedDepth !== depth - 1) {\n        return false;\n      }\n      if (!endTime) {\n        return false;\n      }\n      if (!eventIdCallback) {\n        if (e === path[matchedDepth].event) {\n          ++matchedDepth;\n        }\n        return false;\n      }\n      let id = eventIdCallback(e);\n      const groupId = eventGroupIdCallback ? eventGroupIdCallback(e) : '';\n      if (groupId) {\n        id += '/' + groupId;\n      }\n      if (id === path[matchedDepth].id) {\n        ++matchedDepth;\n      }\n      return false;\n    }\n\n    function onEndEvent(): void {\n      --depth;\n      if (matchedDepth > depth) {\n        matchedDepth = depth;\n      }\n    }\n\n    this.childrenInternal = children;\n    return children;\n  }\n\n  getRoot(): TopDownRootNode|null {\n    return this.root;\n  }\n}\n\nexport class TopDownRootNode extends TopDownNode {\n  readonly filter: (e: Types.Events.Event) => boolean;\n  readonly startTime: Types.Timing.MilliSeconds;\n  readonly endTime: Types.Timing.MilliSeconds;\n  eventGroupIdCallback: ((arg0: Types.Events.Event) => string)|null|undefined;\n  /** Default behavior is to aggregate similar trace events into one Node based on generateEventID(), eventGroupIdCallback(), etc. Set true to keep nodes 1:1 with events. */\n  readonly doNotAggregate: boolean|undefined;\n  readonly includeInstantEvents?: boolean;\n  override totalTime: number;\n  override selfTime: number;\n\n  constructor(\n      events: Types.Events.Event[], filters: TraceFilter[], startTime: Types.Timing.MilliSeconds,\n      endTime: Types.Timing.MilliSeconds, doNotAggregate?: boolean,\n      eventGroupIdCallback?: ((arg0: Types.Events.Event) => string)|null, includeInstantEvents?: boolean) {\n    super('', events[0], null);\n    this.event = events[0];\n    this.root = this;\n    this.events = events;\n    this.filter = (e: Types.Events.Event): boolean => filters.every(f => f.accept(e));\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.eventGroupIdCallback = eventGroupIdCallback;\n    this.doNotAggregate = doNotAggregate;\n    this.includeInstantEvents = includeInstantEvents;\n\n    this.totalTime = endTime - startTime;\n    this.selfTime = this.totalTime;\n  }\n\n  override children(): ChildrenCache {\n    return this.childrenInternal || this.grouppedTopNodes();\n  }\n\n  private grouppedTopNodes(): ChildrenCache {\n    const flatNodes = super.children();\n    for (const node of flatNodes.values()) {\n      this.selfTime -= node.totalTime;\n    }\n    if (!this.eventGroupIdCallback) {\n      return flatNodes;\n    }\n    const groupNodes = new Map<string, GroupNode>();\n    for (const node of flatNodes.values()) {\n      const groupId = this.eventGroupIdCallback(node.event);\n      let groupNode = groupNodes.get(groupId);\n      if (!groupNode) {\n        groupNode = new GroupNode(groupId, this, node.events);\n        groupNodes.set(groupId, groupNode);\n      } else {\n        groupNode.events.push(...node.events);\n      }\n      groupNode.addChild(node as BottomUpNode, node.selfTime, node.totalTime);\n    }\n    this.childrenInternal = groupNodes;\n    return groupNodes;\n  }\n\n  getEventGroupIdCallback(): ((arg0: Types.Events.Event) => string)|null|undefined {\n    return this.eventGroupIdCallback;\n  }\n}\n\nexport class BottomUpRootNode extends Node {\n  private childrenInternal: ChildrenCache|null;\n  private textFilter: TraceFilter;\n  readonly filter: (e: Types.Events.Event) => boolean;\n  readonly startTime: Types.Timing.MilliSeconds;\n  readonly endTime: Types.Timing.MilliSeconds;\n  private eventGroupIdCallback: ((arg0: Types.Events.Event) => string)|null;\n  override totalTime: number;\n\n  constructor(\n      events: Types.Events.Event[], textFilter: TraceFilter, filters: TraceFilter[],\n      startTime: Types.Timing.MilliSeconds, endTime: Types.Timing.MilliSeconds,\n      eventGroupIdCallback: ((arg0: Types.Events.Event) => string)|null) {\n    super('', events[0]);\n    this.childrenInternal = null;\n    this.events = events;\n    this.textFilter = textFilter;\n    this.filter = (e: Types.Events.Event): boolean => filters.every(f => f.accept(e));\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.eventGroupIdCallback = eventGroupIdCallback;\n    this.totalTime = endTime - startTime;\n  }\n\n  override hasChildren(): boolean {\n    return true;\n  }\n\n  filterChildren(children: ChildrenCache): ChildrenCache {\n    for (const [id, child] of children) {\n      // to provide better context to user only filter first (top) level.\n      if (child.event && child.depth <= 1 && !this.textFilter.accept(child.event)) {\n        children.delete((id as string | symbol));\n      }\n    }\n    return children;\n  }\n\n  override children(): ChildrenCache {\n    if (!this.childrenInternal) {\n      this.childrenInternal = this.filterChildren(this.grouppedTopNodes());\n    }\n    return this.childrenInternal;\n  }\n\n  private ungrouppedTopNodes(): ChildrenCache {\n    const root = this;\n    const startTime = this.startTime;\n    const endTime = this.endTime;\n    const nodeById = new Map<string, Node>();\n    const selfTimeStack: number[] = [endTime - startTime];\n    const firstNodeStack: boolean[] = [];\n    const totalTimeById = new Map<string, number>();\n    Helpers.Trace.forEachEvent(\n        this.events,\n        {\n          onStartEvent,\n          onEndEvent,\n          startTime: Helpers.Timing.millisecondsToMicroseconds(this.startTime),\n          endTime: Helpers.Timing.millisecondsToMicroseconds(this.endTime),\n          eventFilter: this.filter,\n          ignoreAsyncEvents: false,\n        },\n    );\n\n    function onStartEvent(e: Types.Events.Event): void {\n      const {startTime: currentStartTime, endTime: currentEndTime} = Helpers.Timing.eventTimingsMilliSeconds(e);\n\n      const actualEndTime = currentEndTime !== undefined ? Math.min(currentEndTime, endTime) : endTime;\n      const duration = actualEndTime - Math.max(currentStartTime, startTime);\n      selfTimeStack[selfTimeStack.length - 1] -= duration;\n      selfTimeStack.push(duration);\n      const id = generateEventID(e);\n      const noNodeOnStack = !totalTimeById.has(id);\n      if (noNodeOnStack) {\n        totalTimeById.set(id, duration);\n      }\n      firstNodeStack.push(noNodeOnStack);\n    }\n\n    function onEndEvent(event: Types.Events.Event): void {\n      const id = generateEventID(event);\n      let node = nodeById.get(id);\n      if (!node) {\n        node = new BottomUpNode(root, id, event, false, root);\n        nodeById.set(id, node);\n      } else {\n        node.events.push(event);\n      }\n      node.selfTime += selfTimeStack.pop() || 0;\n      if (firstNodeStack.pop()) {\n        node.totalTime += totalTimeById.get(id) || 0;\n        totalTimeById.delete(id);\n      }\n      if (firstNodeStack.length) {\n        node.setHasChildren(true);\n      }\n    }\n\n    this.selfTime = selfTimeStack.pop() || 0;\n    for (const pair of nodeById) {\n      if (pair[1].selfTime <= 0) {\n        nodeById.delete((pair[0] as string));\n      }\n    }\n    return nodeById;\n  }\n\n  private grouppedTopNodes(): ChildrenCache {\n    const flatNodes = this.ungrouppedTopNodes();\n    if (!this.eventGroupIdCallback) {\n      return flatNodes;\n    }\n    const groupNodes = new Map<string, GroupNode>();\n    for (const node of flatNodes.values()) {\n      const groupId = this.eventGroupIdCallback(node.event);\n      let groupNode = groupNodes.get(groupId);\n      if (!groupNode) {\n        groupNode = new GroupNode(groupId, this, node.events);\n        groupNodes.set(groupId, groupNode);\n      } else {\n        groupNode.events.push(...node.events);\n      }\n      groupNode.addChild(node as BottomUpNode, node.selfTime, node.selfTime);\n    }\n    return groupNodes;\n  }\n}\n\nexport class GroupNode extends Node {\n  private readonly childrenInternal: ChildrenCache;\n  override isGroupNodeInternal: boolean;\n  override events: Types.Events.Event[];\n\n  constructor(id: string, parent: BottomUpRootNode|TopDownRootNode, events: Types.Events.Event[]) {\n    super(id, events[0]);\n    this.events = events;\n    this.childrenInternal = new Map();\n    this.parent = parent;\n    this.isGroupNodeInternal = true;\n  }\n\n  addChild(child: BottomUpNode, selfTime: number, totalTime: number): void {\n    this.childrenInternal.set(child.id, child);\n    this.selfTime += selfTime;\n    this.totalTime += totalTime;\n    child.parent = this;\n  }\n\n  override hasChildren(): boolean {\n    return true;\n  }\n\n  override children(): ChildrenCache {\n    return this.childrenInternal;\n  }\n}\n\nexport class BottomUpNode extends Node {\n  override parent: Node;\n  private root: BottomUpRootNode;\n  override depth: number;\n  private cachedChildren: ChildrenCache|null;\n  private hasChildrenInternal: boolean;\n\n  constructor(root: BottomUpRootNode, id: string, event: Types.Events.Event, hasChildren: boolean, parent: Node) {\n    super(id, event);\n    this.parent = parent;\n    this.root = root;\n    this.depth = (parent.depth || 0) + 1;\n    this.cachedChildren = null;\n    this.hasChildrenInternal = hasChildren;\n  }\n\n  override hasChildren(): boolean {\n    return this.hasChildrenInternal;\n  }\n\n  override setHasChildren(value: boolean): void {\n    this.hasChildrenInternal = value;\n  }\n\n  override children(): ChildrenCache {\n    if (this.cachedChildren) {\n      return this.cachedChildren;\n    }\n    const selfTimeStack: number[] = [0];\n    const eventIdStack: string[] = [];\n    const eventStack: Types.Events.Event[] = [];\n    const nodeById = new Map<string, BottomUpNode>();\n    const startTime = this.root.startTime;\n    const endTime = this.root.endTime;\n    let lastTimeMarker: number = startTime;\n    const self = this;\n    Helpers.Trace.forEachEvent(\n        this.root.events,\n        {\n          onStartEvent,\n          onEndEvent,\n          startTime: Helpers.Timing.millisecondsToMicroseconds(startTime),\n          endTime: Helpers.Timing.millisecondsToMicroseconds(endTime),\n          eventFilter: this.root.filter,\n          ignoreAsyncEvents: false,\n        },\n    );\n    function onStartEvent(e: Types.Events.Event): void {\n      const {startTime: currentStartTime, endTime: currentEndTime} = Helpers.Timing.eventTimingsMilliSeconds(e);\n      const actualEndTime = currentEndTime !== undefined ? Math.min(currentEndTime, endTime) : endTime;\n      const duration = actualEndTime - Math.max(currentStartTime, startTime);\n      if (duration < 0) {\n        console.assert(false, 'Negative duration of an event');\n      }\n      selfTimeStack[selfTimeStack.length - 1] -= duration;\n      selfTimeStack.push(duration);\n      const id = generateEventID(e);\n      eventIdStack.push(id);\n      eventStack.push(e);\n    }\n\n    function onEndEvent(e: Types.Events.Event): void {\n      const {startTime: currentStartTime, endTime: currentEndTime} = Helpers.Timing.eventTimingsMilliSeconds(e);\n      const selfTime = selfTimeStack.pop();\n      const id = eventIdStack.pop();\n      eventStack.pop();\n      let node;\n      for (node = self; node.depth > 1; node = node.parent) {\n        if (node.id !== eventIdStack[eventIdStack.length + 1 - node.depth]) {\n          return;\n        }\n      }\n      if (node.id !== id || eventIdStack.length < self.depth) {\n        return;\n      }\n      const childId = eventIdStack[eventIdStack.length - self.depth];\n      node = nodeById.get(childId);\n      if (!node) {\n        const event = eventStack[eventStack.length - self.depth];\n        const hasChildren = eventStack.length > self.depth;\n        node = new BottomUpNode(self.root, childId, event, hasChildren, self);\n        nodeById.set(childId, node);\n      } else {\n        node.events.push(e);\n      }\n      const actualEndTime = currentEndTime !== undefined ? Math.min(currentEndTime, endTime) : endTime;\n      const totalTime = actualEndTime - Math.max(currentStartTime, lastTimeMarker);\n      node.selfTime += selfTime || 0;\n      node.totalTime += totalTime;\n      lastTimeMarker = actualEndTime;\n    }\n\n    this.cachedChildren = this.root.filterChildren(nodeById);\n    return this.cachedChildren;\n  }\n\n  override searchTree(matchFunction: (arg0: Types.Events.Event) => boolean, results?: Node[]): Node[] {\n    results = results || [];\n    if (this.event && matchFunction(this.event)) {\n      results.push(this);\n    }\n    return results;\n  }\n}\n\nexport function eventStackFrame(event: Types.Events.Event): Protocol.Runtime.CallFrame|null {\n  if (Types.Events.isProfileCall(event)) {\n    return event.callFrame;\n  }\n  const topFrame = event.args?.data?.stackTrace?.[0];\n  if (!topFrame) {\n    return null;\n  }\n  return {...topFrame, scriptId: String(topFrame.scriptId) as Protocol.Runtime.ScriptId};\n}\n\nexport function generateEventID(event: Types.Events.Event): string {\n  if (Types.Events.isProfileCall(event)) {\n    const name = TimelineJSProfileProcessor.isNativeRuntimeFrame(event.callFrame) ?\n        TimelineJSProfileProcessor.nativeGroup(event.callFrame.functionName) :\n        event.callFrame.functionName;\n    const location = event.callFrame.scriptId || event.callFrame.url || '';\n    return `f:${name}@${location}`;\n  }\n\n  if (Types.Events.isTimeStamp(event)) {\n    return `${event.name}:${event.args.data.message}`;\n  }\n\n  return event.name;\n}\n\nexport type ChildrenCache = Map<string|symbol, Node>;\n"],
  "mappings": "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",
  "names": ["endTime"]
}
