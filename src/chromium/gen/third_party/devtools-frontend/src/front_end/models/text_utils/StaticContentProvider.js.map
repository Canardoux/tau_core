{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/text_utils/StaticContentProvider.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport {ContentData, type ContentDataOrError} from './ContentData.js';\nimport type {ContentProvider, DeferredContent, SearchMatch} from './ContentProvider.js';\nimport {performSearchInContentData} from './TextUtils.js';\n\nexport class StaticContentProvider implements ContentProvider {\n  readonly #contentURL: Platform.DevToolsPath.UrlString;\n  readonly #contentType: Common.ResourceType.ResourceType;\n  readonly #lazyContent: () => Promise<ContentDataOrError>;\n\n  constructor(\n      contentURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      lazyContent: () => Promise<ContentDataOrError>) {\n    this.#contentURL = contentURL;\n    this.#contentType = contentType;\n    this.#lazyContent = lazyContent;\n  }\n\n  static fromString(\n      contentURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      content: string): StaticContentProvider {\n    const lazyContent = (): Promise<ContentData> =>\n        Promise.resolve(new ContentData(content, /* isBase64 */ false, contentType.canonicalMimeType()));\n    return new StaticContentProvider(contentURL, contentType, lazyContent);\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.#contentURL;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.#contentType;\n  }\n\n  requestContent(): Promise<DeferredContent> {\n    return this.#lazyContent().then(ContentData.asDeferredContent.bind(undefined));\n  }\n\n  requestContentData(): Promise<ContentDataOrError> {\n    return this.#lazyContent();\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean): Promise<SearchMatch[]> {\n    const contentData = await this.requestContentData();\n    return performSearchInContentData(contentData, query, caseSensitive, isRegex);\n  }\n}\n"],
  "mappings": ";AAOA,SAAQ,mBAA2C;AAEnD,SAAQ,kCAAiC;AAElC,aAAM,sBAAiD;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AAAA,EAET,YACI,YAA6C,aAC7C,aAAgD;AAClD,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,OAAO,WACH,YAA6C,aAC7C,SAAwC;AAC1C,UAAM,cAAc,MAChB,QAAQ,QAAQ,IAAI;AAAA,MAAY;AAAA;AAAA,MAAwB;AAAA,MAAO,YAAY,kBAAkB;AAAA,IAAC,CAAC;AACnG,WAAO,IAAI,sBAAsB,YAAY,aAAa,WAAW;AAAA,EACvE;AAAA,EAEA,aAA8C;AAC5C,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,cAAgD;AAC9C,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,iBAA2C;AACzC,WAAO,KAAK,aAAa,EAAE,KAAK,YAAY,kBAAkB,KAAK,MAAS,CAAC;AAAA,EAC/E;AAAA,EAEA,qBAAkD;AAChD,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA,EAEA,MAAM,gBAAgB,OAAe,eAAwB,SAA0C;AACrG,UAAM,cAAc,MAAM,KAAK,mBAAmB;AAClD,WAAO,2BAA2B,aAAa,OAAO,eAAe,OAAO;AAAA,EAC9E;AACF;",
  "names": []
}
