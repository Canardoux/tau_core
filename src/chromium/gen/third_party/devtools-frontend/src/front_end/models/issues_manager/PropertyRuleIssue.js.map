{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/issues_manager/PropertyRuleIssue.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport type {MarkdownIssueDescription} from './MarkdownIssueDescription.js';\n\nexport class PropertyRuleIssue extends Issue {\n  readonly #issueDetails: Protocol.Audits.PropertyRuleIssueDetails;\n  readonly #primaryKey: string;\n  constructor(issueDetails: Protocol.Audits.PropertyRuleIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    const code = JSON.stringify(issueDetails);\n    super(code, issuesModel);\n    this.#primaryKey = code;\n    this.#issueDetails = issueDetails;\n  }\n\n  override sources(): Array<Protocol.Audits.SourceCodeLocation> {\n    return [this.#issueDetails.sourceCodeLocation];\n  }\n\n  details(): Protocol.Audits.PropertyRuleIssueDetails {\n    return this.#issueDetails;\n  }\n\n  primaryKey(): string {\n    return this.#primaryKey;\n  }\n\n  getPropertyName(): string {\n    switch (this.#issueDetails.propertyRuleIssueReason) {\n      case Protocol.Audits.PropertyRuleIssueReason.InvalidInherits:\n        return 'inherits';\n      case Protocol.Audits.PropertyRuleIssueReason.InvalidInitialValue:\n        return 'initial-value';\n      case Protocol.Audits.PropertyRuleIssueReason.InvalidSyntax:\n        return 'syntax';\n    }\n    return '';\n  }\n\n  getDescription(): MarkdownIssueDescription {\n    if (this.#issueDetails.propertyRuleIssueReason === Protocol.Audits.PropertyRuleIssueReason.InvalidName) {\n      return {\n        file: 'propertyRuleInvalidNameIssue.md',\n        links: [],\n      };\n    }\n    const value = this.#issueDetails.propertyValue ? `: ${this.#issueDetails.propertyValue}` : '';\n    const property = `${this.getPropertyName()}${value}`;\n    return {\n      file: 'propertyRuleIssue.md',\n      substitutions: new Map([['PLACEHOLDER_property', property]]),\n      links: [],\n    };\n  }\n\n  getCategory(): IssueCategory {\n    return IssueCategory.OTHER;\n  }\n\n  getKind(): IssueKind {\n    return IssueKind.PAGE_ERROR;\n  }\n\n  static fromInspectorIssue(issueModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      PropertyRuleIssue[] {\n    const propertyRuleIssueDetails = inspectorIssue.details.propertyRuleIssueDetails;\n    if (!propertyRuleIssueDetails) {\n      console.warn('Property rule issue without details received');\n      return [];\n    }\n    return [new PropertyRuleIssue(propertyRuleIssueDetails, issueModel)];\n  }\n}\n"],
  "mappings": ";AAKA,YAAY,cAAc;AAE1B,SAAQ,OAAO,eAAe,iBAAgB;AAGvC,aAAM,0BAA0B,MAAM;AAAA,EAClC;AAAA,EACA;AAAA,EACT,YAAY,cAAwD,aAA0C;AAC5G,UAAM,OAAO,KAAK,UAAU,YAAY;AACxC,UAAM,MAAM,WAAW;AACvB,SAAK,cAAc;AACnB,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAES,UAAqD;AAC5D,WAAO,CAAC,KAAK,cAAc,kBAAkB;AAAA,EAC/C;AAAA,EAEA,UAAoD;AAClD,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,aAAqB;AACnB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,kBAA0B;AACxB,YAAQ,KAAK,cAAc,yBAAyB;AAAA,MAClD,KAAK,SAAS,OAAO,wBAAwB;AAC3C,eAAO;AAAA,MACT,KAAK,SAAS,OAAO,wBAAwB;AAC3C,eAAO;AAAA,MACT,KAAK,SAAS,OAAO,wBAAwB;AAC3C,eAAO;AAAA,IACX;AACA,WAAO;AAAA,EACT;AAAA,EAEA,iBAA2C;AACzC,QAAI,KAAK,cAAc,4BAA4B,SAAS,OAAO,wBAAwB,aAAa;AACtG,aAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO,CAAC;AAAA,MACV;AAAA,IACF;AACA,UAAM,QAAQ,KAAK,cAAc,gBAAgB,KAAK,KAAK,cAAc,aAAa,KAAK;AAC3F,UAAM,WAAW,GAAG,KAAK,gBAAgB,CAAC,GAAG,KAAK;AAClD,WAAO;AAAA,MACL,MAAM;AAAA,MACN,eAAe,oBAAI,IAAI,CAAC,CAAC,wBAAwB,QAAQ,CAAC,CAAC;AAAA,MAC3D,OAAO,CAAC;AAAA,IACV;AAAA,EACF;AAAA,EAEA,cAA6B;AAC3B,WAAO,cAAc;AAAA,EACvB;AAAA,EAEA,UAAqB;AACnB,WAAO,UAAU;AAAA,EACnB;AAAA,EAEA,OAAO,mBAAmB,YAAyC,gBAC3C;AACtB,UAAM,2BAA2B,eAAe,QAAQ;AACxD,QAAI,CAAC,0BAA0B;AAC7B,cAAQ,KAAK,8CAA8C;AAC3D,aAAO,CAAC;AAAA,IACV;AACA,WAAO,CAAC,IAAI,kBAAkB,0BAA0B,UAAU,CAAC;AAAA,EACrE;AACF;",
  "names": []
}
