{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/logs/NetworkLog.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n   * @description When DevTools doesn't know the URL that initiated a network request, we\n   * show this phrase instead. 'unknown' would also work in this context.\n   */\n  anonymous: '<anonymous>',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/logs/NetworkLog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet networkLogInstance: NetworkLog|undefined;\n\nexport class NetworkLog extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.NetworkManager.NetworkManager> {\n  private requestsInternal: SDK.NetworkRequest.NetworkRequest[];\n  private sentNetworkRequests: Protocol.Network.Request[];\n  private receivedNetworkResponses: Protocol.Network.Response[];\n  private requestsSet: Set<SDK.NetworkRequest.NetworkRequest>;\n  private readonly requestsMap: Map<string, SDK.NetworkRequest.NetworkRequest[]>;\n  private readonly pageLoadForManager: Map<SDK.NetworkManager.NetworkManager, SDK.PageLoad.PageLoad>;\n  private isRecording: boolean;\n  private readonly modelListeners: WeakMap<SDK.NetworkManager.NetworkManager, Common.EventTarget.EventDescriptor[]>;\n  private readonly initiatorData: WeakMap<SDK.NetworkRequest.NetworkRequest, InitiatorData>;\n  private readonly unresolvedPreflightRequests: Map<string, SDK.NetworkRequest.NetworkRequest>;\n\n  constructor() {\n    super();\n    this.requestsInternal = [];\n    this.sentNetworkRequests = [];\n    this.receivedNetworkResponses = [];\n    this.requestsSet = new Set();\n    this.requestsMap = new Map();\n    this.pageLoadForManager = new Map();\n    this.isRecording = true;\n    this.modelListeners = new WeakMap();\n    this.initiatorData = new WeakMap();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.NetworkManager.NetworkManager, this);\n    const recordLogSetting: Common.Settings.Setting<boolean> =\n        Common.Settings.Settings.instance().moduleSetting('network-log.record-log');\n    recordLogSetting.addChangeListener(() => {\n      const preserveLogSetting = Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log');\n      if (!preserveLogSetting.get() && recordLogSetting.get()) {\n        this.reset(true);\n      }\n      this.setIsRecording((recordLogSetting.get() as boolean));\n    }, this);\n    this.unresolvedPreflightRequests = new Map();\n  }\n\n  static instance(): NetworkLog {\n    if (!networkLogInstance) {\n      networkLogInstance = new NetworkLog();\n    }\n    return networkLogInstance;\n  }\n\n  static removeInstance(): void {\n    networkLogInstance = undefined;\n  }\n\n  modelAdded(networkManager: SDK.NetworkManager.NetworkManager): void {\n    const eventListeners = [];\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestStarted, this.onRequestStarted, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestUpdated, this.onRequestUpdated, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestRedirected, this.onRequestRedirect, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestFinished, this.onRequestUpdated, this));\n    eventListeners.push(networkManager.addEventListener(\n        SDK.NetworkManager.Events.MessageGenerated, this.networkMessageGenerated.bind(this, networkManager)));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.ResponseReceived, this.onResponseReceived, this));\n\n    const resourceTreeModel = networkManager.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (resourceTreeModel) {\n      eventListeners.push(\n          resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.WillReloadPage, this.willReloadPage, this));\n      eventListeners.push(resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.PrimaryPageChanged, this.onPrimaryPageChanged, this));\n      eventListeners.push(resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.Load, this.onLoad, this));\n      eventListeners.push(resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.DOMContentLoaded, this.onDOMContentLoaded.bind(this, resourceTreeModel)));\n    }\n\n    this.modelListeners.set(networkManager, eventListeners);\n  }\n\n  modelRemoved(networkManager: SDK.NetworkManager.NetworkManager): void {\n    this.removeNetworkManagerListeners(networkManager);\n  }\n\n  private removeNetworkManagerListeners(networkManager: SDK.NetworkManager.NetworkManager): void {\n    Common.EventTarget.removeEventListeners(this.modelListeners.get(networkManager) || []);\n  }\n\n  setIsRecording(enabled: boolean): void {\n    if (this.isRecording === enabled) {\n      return;\n    }\n    this.isRecording = enabled;\n    if (enabled) {\n      SDK.TargetManager.TargetManager.instance().observeModels(SDK.NetworkManager.NetworkManager, this);\n    } else {\n      SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.NetworkManager.NetworkManager, this);\n      SDK.TargetManager.TargetManager.instance()\n          .models(SDK.NetworkManager.NetworkManager)\n          .forEach(this.removeNetworkManagerListeners.bind(this));\n    }\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): SDK.NetworkRequest.NetworkRequest|null {\n    return this.requestsInternal.find(request => request.url() === url) || null;\n  }\n\n  originalRequestForURL(url: Platform.DevToolsPath.UrlString): Protocol.Network.Request|null {\n    return this.sentNetworkRequests.find(request => request.url === url) || null;\n  }\n\n  originalResponseForURL(url: Platform.DevToolsPath.UrlString): Protocol.Network.Response|null {\n    return this.receivedNetworkResponses.find(response => response.url === url) || null;\n  }\n\n  requests(): SDK.NetworkRequest.NetworkRequest[] {\n    return this.requestsInternal;\n  }\n\n  requestByManagerAndId(networkManager: SDK.NetworkManager.NetworkManager, requestId: string):\n      SDK.NetworkRequest.NetworkRequest|null {\n    // We iterate backwards because the last item will likely be the one needed for console network request lookups.\n    for (let i = this.requestsInternal.length - 1; i >= 0; i--) {\n      const request = this.requestsInternal[i];\n      if (requestId === request.requestId() &&\n          networkManager === SDK.NetworkManager.NetworkManager.forRequest(request)) {\n        return request;\n      }\n    }\n    return null;\n  }\n\n  private requestByManagerAndURL(\n      networkManager: SDK.NetworkManager.NetworkManager,\n      url: Platform.DevToolsPath.UrlString): SDK.NetworkRequest.NetworkRequest|null {\n    for (const request of this.requestsInternal) {\n      if (url === request.url() && networkManager === SDK.NetworkManager.NetworkManager.forRequest(request)) {\n        return request;\n      }\n    }\n    return null;\n  }\n\n  private initializeInitiatorSymbolIfNeeded(request: SDK.NetworkRequest.NetworkRequest): InitiatorData {\n    let initiatorInfo = this.initiatorData.get(request);\n    if (initiatorInfo) {\n      return initiatorInfo;\n    }\n    initiatorInfo = {\n      info: null,\n      chain: null,\n      request: undefined,\n    };\n    this.initiatorData.set(request, initiatorInfo);\n    return initiatorInfo;\n  }\n\n  static initiatorInfoForRequest(request: SDK.NetworkRequest.NetworkRequest, existingInitiatorData?: InitiatorData):\n      InitiatorInfo {\n    const initiatorInfo: InitiatorData = existingInitiatorData || {\n      info: null,\n      chain: null,\n      request: undefined,\n    };\n\n    let type = SDK.NetworkRequest.InitiatorType.OTHER;\n    let url = Platform.DevToolsPath.EmptyUrlString;\n    let lineNumber: number|undefined = undefined;\n    let columnNumber: number|undefined = undefined;\n    let scriptId: Protocol.Runtime.ScriptId|null = null;\n    let initiatorStack: Protocol.Runtime.StackTrace|null = null;\n    let initiatorRequest: SDK.NetworkRequest.NetworkRequest|null = null;\n    const initiator = request.initiator();\n\n    const redirectSource = request.redirectSource();\n    if (redirectSource) {\n      type = SDK.NetworkRequest.InitiatorType.REDIRECT;\n      url = redirectSource.url();\n    } else if (initiator) {\n      if (initiator.type === Protocol.Network.InitiatorType.Parser) {\n        type = SDK.NetworkRequest.InitiatorType.PARSER;\n        url = initiator.url ? initiator.url as Platform.DevToolsPath.UrlString : url;\n        lineNumber = initiator.lineNumber;\n        columnNumber = initiator.columnNumber;\n      } else if (initiator.type === Protocol.Network.InitiatorType.Script) {\n        for (let stack: (Protocol.Runtime.StackTrace|undefined) = initiator.stack; stack;) {\n          const topFrame = stack.callFrames.length ? stack.callFrames[0] : null;\n          if (!topFrame) {\n            stack = stack.parent;\n            continue;\n          }\n          type = SDK.NetworkRequest.InitiatorType.SCRIPT;\n          url = (topFrame.url || i18nString(UIStrings.anonymous) as string) as Platform.DevToolsPath.UrlString;\n          lineNumber = topFrame.lineNumber;\n          columnNumber = topFrame.columnNumber;\n          scriptId = topFrame.scriptId;\n          break;\n        }\n        if (!initiator.stack && initiator.url) {\n          type = SDK.NetworkRequest.InitiatorType.SCRIPT;\n          url = initiator.url as Platform.DevToolsPath.UrlString;\n          lineNumber = initiator.lineNumber;\n        }\n        if (initiator.stack?.callFrames?.length) {\n          initiatorStack = initiator.stack;\n        }\n      } else if (initiator.type === Protocol.Network.InitiatorType.Preload) {\n        type = SDK.NetworkRequest.InitiatorType.PRELOAD;\n      } else if (initiator.type === Protocol.Network.InitiatorType.Preflight) {\n        type = SDK.NetworkRequest.InitiatorType.PREFLIGHT;\n        initiatorRequest = request.preflightInitiatorRequest();\n      } else if (initiator.type === Protocol.Network.InitiatorType.SignedExchange) {\n        type = SDK.NetworkRequest.InitiatorType.SIGNED_EXCHANGE;\n        url = initiator.url as Platform.DevToolsPath.UrlString || Platform.DevToolsPath.EmptyUrlString;\n      }\n    }\n    initiatorInfo.info = {type, url, lineNumber, columnNumber, scriptId, stack: initiatorStack, initiatorRequest};\n    return initiatorInfo.info;\n  }\n\n  initiatorInfoForRequest(request: SDK.NetworkRequest.NetworkRequest): InitiatorInfo {\n    const initiatorInfo = this.initializeInitiatorSymbolIfNeeded(request);\n    if (initiatorInfo.info) {\n      return initiatorInfo.info;\n    }\n\n    return NetworkLog.initiatorInfoForRequest(request, initiatorInfo);\n  }\n\n  initiatorGraphForRequest(request: SDK.NetworkRequest.NetworkRequest): InitiatorGraph {\n    const initiated = new Map<SDK.NetworkRequest.NetworkRequest, SDK.NetworkRequest.NetworkRequest>();\n    const networkManager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    for (const otherRequest of this.requestsInternal) {\n      const otherRequestManager = SDK.NetworkManager.NetworkManager.forRequest(otherRequest);\n      if (networkManager === otherRequestManager && this.initiatorChain(otherRequest).has(request)) {\n        // save parent request of otherRequst in order to build the initiator chain table later\n        const initiatorRequest = this.initiatorRequest(otherRequest);\n        if (initiatorRequest) {\n          initiated.set(otherRequest, initiatorRequest);\n        }\n      }\n    }\n    return {initiators: this.initiatorChain(request), initiated};\n  }\n\n  private initiatorChain(request: SDK.NetworkRequest.NetworkRequest): Set<SDK.NetworkRequest.NetworkRequest> {\n    const initiatorDataForRequest = this.initializeInitiatorSymbolIfNeeded(request);\n    let initiatorChainCache = initiatorDataForRequest.chain;\n    if (initiatorChainCache) {\n      return initiatorChainCache;\n    }\n\n    initiatorChainCache = new Set();\n\n    let checkRequest: SDK.NetworkRequest.NetworkRequest|null = request;\n    while (checkRequest) {\n      const initiatorData = this.initializeInitiatorSymbolIfNeeded(checkRequest);\n      if (initiatorData.chain) {\n        initiatorChainCache = initiatorChainCache.union(initiatorData.chain);\n        break;\n      }\n      if (initiatorChainCache.has(checkRequest)) {\n        break;\n      }\n      initiatorChainCache.add(checkRequest);\n      checkRequest = this.initiatorRequest(checkRequest);\n    }\n    initiatorDataForRequest.chain = initiatorChainCache;\n    return initiatorChainCache;\n  }\n\n  private initiatorRequest(request: SDK.NetworkRequest.NetworkRequest): SDK.NetworkRequest.NetworkRequest|null {\n    const initiatorData = this.initializeInitiatorSymbolIfNeeded(request);\n    if (initiatorData.request !== undefined) {\n      return initiatorData.request;\n    }\n    const url = this.initiatorInfoForRequest(request).url;\n    const networkManager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    initiatorData.request = networkManager ? this.requestByManagerAndURL(networkManager, url) : null;\n    return initiatorData.request;\n  }\n\n  private willReloadPage(): void {\n    if (!Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log').get()) {\n      this.reset(true);\n    }\n  }\n\n  private onPrimaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<\n          {frame: SDK.ResourceTreeModel.ResourceTreeFrame, type: SDK.ResourceTreeModel.PrimaryPageChangeType}>): void {\n    const mainFrame = event.data.frame;\n    const manager = mainFrame.resourceTreeModel().target().model(SDK.NetworkManager.NetworkManager);\n    if (!manager || mainFrame.resourceTreeModel().target().parentTarget()?.type() === SDK.Target.Type.FRAME) {\n      return;\n    }\n\n    // If a page resulted in an error, the browser will navigate to an internal error page\n    // hosted at 'chrome-error://...'. In this case, skip the frame navigated event to preserve\n    // the network log.\n    if (mainFrame.url !== mainFrame.unreachableUrl() && Common.ParsedURL.schemeIs(mainFrame.url, 'chrome-error:')) {\n      return;\n    }\n\n    const preserveLog = Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log').get();\n\n    const oldRequests = this.requestsInternal;\n    const oldManagerRequests =\n        this.requestsInternal.filter(request => SDK.NetworkManager.NetworkManager.forRequest(request) === manager);\n    const oldRequestsSet = this.requestsSet;\n    this.requestsInternal = [];\n    this.sentNetworkRequests = [];\n    this.receivedNetworkResponses = [];\n    this.requestsSet = new Set();\n    this.requestsMap.clear();\n    this.unresolvedPreflightRequests.clear();\n    this.dispatchEventToListeners(Events.Reset, {clearIfPreserved: !preserveLog});\n\n    // Preserve requests from the new session.\n    let currentPageLoad: SDK.PageLoad.PageLoad|null = null;\n    const requestsToAdd = [];\n    for (const request of oldManagerRequests) {\n      if (event.data.type !== SDK.ResourceTreeModel.PrimaryPageChangeType.ACTIVATION &&\n          request.loaderId !== mainFrame.loaderId) {\n        continue;\n      }\n      if (!currentPageLoad) {\n        currentPageLoad = new SDK.PageLoad.PageLoad(request);\n        let redirectSource = request.redirectSource();\n        while (redirectSource) {\n          requestsToAdd.push(redirectSource);\n          redirectSource = redirectSource.redirectSource();\n        }\n      }\n      requestsToAdd.push(request);\n    }\n\n    // Preserve service worker requests from the new session.\n    const serviceWorkerRequestsToAdd = [];\n    for (const swRequest of oldRequests) {\n      if (!swRequest.initiatedByServiceWorker()) {\n        continue;\n      }\n\n      // If there is a matching request that came before this one, keep it.\n      const keepRequest = requestsToAdd.some(\n          request => request.url() === swRequest.url() && request.issueTime() <= swRequest.issueTime());\n      if (keepRequest) {\n        serviceWorkerRequestsToAdd.push(swRequest);\n      }\n    }\n    requestsToAdd.push(...serviceWorkerRequestsToAdd);\n\n    for (const request of requestsToAdd) {\n      currentPageLoad?.bindRequest(request);\n      oldRequestsSet.delete(request);\n      this.addRequest(request);\n    }\n\n    if (preserveLog) {\n      for (const request of oldRequestsSet) {\n        this.addRequest(request, true);\n        request.preserved = true;\n      }\n    }\n\n    if (currentPageLoad) {\n      this.pageLoadForManager.set(manager, currentPageLoad);\n    }\n  }\n\n  private addRequest(request: SDK.NetworkRequest.NetworkRequest, preserveLog?: boolean): void {\n    this.requestsInternal.push(request);\n    this.requestsSet.add(request);\n    const requestList = this.requestsMap.get(request.requestId());\n    if (!requestList) {\n      this.requestsMap.set(request.requestId(), [request]);\n    } else {\n      requestList.push(request);\n    }\n    this.tryResolvePreflightRequests(request);\n    this.dispatchEventToListeners(Events.RequestAdded, {request, preserveLog});\n  }\n\n  private removeRequest(request: SDK.NetworkRequest.NetworkRequest): void {\n    const index = this.requestsInternal.indexOf(request);\n    if (index > -1) {\n      this.requestsInternal.splice(index, 1);\n    }\n    this.requestsSet.delete(request);\n    this.requestsMap.delete(request.requestId());\n    this.dispatchEventToListeners(Events.RequestRemoved, {request});\n  }\n\n  private tryResolvePreflightRequests(request: SDK.NetworkRequest.NetworkRequest): void {\n    if (request.isPreflightRequest()) {\n      const initiator = request.initiator();\n      if (initiator && initiator.requestId) {\n        const [initiatorRequest] = this.requestsForId(initiator.requestId);\n        if (initiatorRequest) {\n          request.setPreflightInitiatorRequest(initiatorRequest);\n          initiatorRequest.setPreflightRequest(request);\n        } else {\n          this.unresolvedPreflightRequests.set(initiator.requestId, request);\n        }\n      }\n    } else {\n      const preflightRequest = this.unresolvedPreflightRequests.get(request.requestId());\n      if (preflightRequest) {\n        this.unresolvedPreflightRequests.delete(request.requestId());\n        request.setPreflightRequest(preflightRequest);\n        preflightRequest.setPreflightInitiatorRequest(request);\n        // Force recomputation of initiator info, if it already exists.\n        const data = this.initiatorData.get(preflightRequest);\n        if (data) {\n          data.info = null;\n        }\n        this.dispatchEventToListeners(Events.RequestUpdated, {request: preflightRequest});\n      }\n    }\n  }\n\n  importRequests(requests: SDK.NetworkRequest.NetworkRequest[]): void {\n    this.reset(true);\n    this.requestsInternal = [];\n    this.sentNetworkRequests = [];\n    this.receivedNetworkResponses = [];\n    this.requestsSet.clear();\n    this.requestsMap.clear();\n    this.unresolvedPreflightRequests.clear();\n    for (const request of requests) {\n      this.addRequest(request);\n    }\n  }\n\n  private onRequestStarted(event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.RequestStartedEvent>): void {\n    const {request, originalRequest} = event.data;\n    if (originalRequest) {\n      this.sentNetworkRequests.push(originalRequest);\n    }\n    this.requestsSet.add(request);\n    const manager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    const pageLoad = manager ? this.pageLoadForManager.get(manager) : null;\n    if (pageLoad) {\n      pageLoad.bindRequest(request);\n    }\n    this.addRequest(request);\n  }\n\n  private onResponseReceived(event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.ResponseReceivedEvent>):\n      void {\n    const response = event.data.response;\n    this.receivedNetworkResponses.push(response);\n  }\n\n  private onRequestUpdated(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    const request = event.data;\n    if (!this.requestsSet.has(request)) {\n      return;\n    }\n\n    // This is only triggered in an edge case in which Chrome reports 2 preflight requests. The\n    // first preflight gets aborted and should not be shown in DevTools.\n    // (see https://crbug.com/1290390 for details)\n    if (request.isPreflightRequest() &&\n        request.corsErrorStatus()?.corsError === Protocol.Network.CorsError.UnexpectedPrivateNetworkAccess) {\n      this.removeRequest(request);\n      return;\n    }\n\n    this.dispatchEventToListeners(Events.RequestUpdated, {request});\n  }\n\n  private onRequestRedirect(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    this.initiatorData.delete(event.data);\n  }\n\n  private onDOMContentLoaded(\n      resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel,\n      event: Common.EventTarget.EventTargetEvent<number>): void {\n    const networkManager = resourceTreeModel.target().model(SDK.NetworkManager.NetworkManager);\n    const pageLoad = networkManager ? this.pageLoadForManager.get(networkManager) : null;\n    if (pageLoad) {\n      pageLoad.contentLoadTime = event.data;\n    }\n  }\n\n  private onLoad(event: Common.EventTarget\n                     .EventTargetEvent<{resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel, loadTime: number}>):\n      void {\n    const networkManager = event.data.resourceTreeModel.target().model(SDK.NetworkManager.NetworkManager);\n    const pageLoad = networkManager ? this.pageLoadForManager.get(networkManager) : null;\n    if (pageLoad) {\n      pageLoad.loadTime = event.data.loadTime;\n    }\n  }\n\n  reset(clearIfPreserved: boolean): void {\n    this.requestsInternal = [];\n    this.sentNetworkRequests = [];\n    this.receivedNetworkResponses = [];\n    this.requestsSet.clear();\n    this.requestsMap.clear();\n    this.unresolvedPreflightRequests.clear();\n    const managers = new Set<SDK.NetworkManager.NetworkManager>(\n        SDK.TargetManager.TargetManager.instance().models(SDK.NetworkManager.NetworkManager));\n    for (const manager of this.pageLoadForManager.keys()) {\n      if (!managers.has(manager)) {\n        this.pageLoadForManager.delete(manager);\n      }\n    }\n\n    this.dispatchEventToListeners(Events.Reset, {clearIfPreserved});\n  }\n\n  private networkMessageGenerated(\n      networkManager: SDK.NetworkManager.NetworkManager,\n      event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.MessageGeneratedEvent>): void {\n    const {message, warning, requestId} = event.data;\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        networkManager.target().model(SDK.RuntimeModel.RuntimeModel), Protocol.Log.LogEntrySource.Network,\n        warning ? Protocol.Log.LogEntryLevel.Warning : Protocol.Log.LogEntryLevel.Info, message);\n    this.associateConsoleMessageWithRequest(consoleMessage, requestId);\n    networkManager.target().model(SDK.ConsoleModel.ConsoleModel)?.addMessage(consoleMessage);\n  }\n\n  associateConsoleMessageWithRequest(consoleMessage: SDK.ConsoleModel.ConsoleMessage, requestId: string): void {\n    const target = consoleMessage.target();\n    const networkManager = target ? target.model(SDK.NetworkManager.NetworkManager) : null;\n    if (!networkManager) {\n      return;\n    }\n    const request = this.requestByManagerAndId(networkManager, requestId);\n    if (!request) {\n      return;\n    }\n    consoleMessageToRequest.set(consoleMessage, request);\n    const initiator = request.initiator();\n    if (initiator) {\n      consoleMessage.stackTrace = initiator.stack || undefined;\n      if (initiator.url) {\n        consoleMessage.url = initiator.url as Platform.DevToolsPath.UrlString;\n        consoleMessage.line = initiator.lineNumber || 0;\n      }\n    }\n  }\n\n  static requestForConsoleMessage(consoleMessage: SDK.ConsoleModel.ConsoleMessage): SDK.NetworkRequest.NetworkRequest\n      |null {\n    return consoleMessageToRequest.get(consoleMessage) || null;\n  }\n\n  requestsForId(requestId: string): SDK.NetworkRequest.NetworkRequest[] {\n    return this.requestsMap.get(requestId) || [];\n  }\n}\n\nconst consoleMessageToRequest = new WeakMap<SDK.ConsoleModel.ConsoleMessage, SDK.NetworkRequest.NetworkRequest>();\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  Reset = 'Reset',\n  RequestAdded = 'RequestAdded',\n  RequestUpdated = 'RequestUpdated',\n  RequestRemoved = 'RequestRemoved',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface ResetEvent {\n  clearIfPreserved: boolean;\n}\n\nexport type EventTypes = {\n  [Events.Reset]: ResetEvent,\n  [Events.RequestAdded]: {request: SDK.NetworkRequest.NetworkRequest, preserveLog?: boolean},\n  [Events.RequestUpdated]: {request: SDK.NetworkRequest.NetworkRequest},\n  [Events.RequestRemoved]: {request: SDK.NetworkRequest.NetworkRequest},\n};\n\nexport interface InitiatorData {\n  info: InitiatorInfo|null;\n  chain: Set<SDK.NetworkRequest.NetworkRequest>|null;\n  request?: SDK.NetworkRequest.NetworkRequest|null;\n}\n\nexport interface InitiatorGraph {\n  initiators: Set<SDK.NetworkRequest.NetworkRequest>;\n  initiated: Map<SDK.NetworkRequest.NetworkRequest, SDK.NetworkRequest.NetworkRequest>;\n}\n\nexport interface InitiatorInfo {\n  type: SDK.NetworkRequest.InitiatorType;\n  // generally this is a url but can also contain \"<anonymous>\"\n  url: Platform.DevToolsPath.UrlString;\n  lineNumber: number|undefined;\n  columnNumber: number|undefined;\n  scriptId: Protocol.Runtime.ScriptId|null;\n  stack: Protocol.Runtime.StackTrace|null;\n  initiatorRequest: SDK.NetworkRequest.NetworkRequest|null;\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
