{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/har/Log.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// See http://www.softwareishard.com/blog/har-12-spec/\n// for HAR specification.\n\n// FIXME: Some fields are not yet supported due to back-end limitations.\n// See https://bugs.webkit.org/show_bug.cgi?id=58127 for details.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport type BuildOptions = {\n  sanitize: boolean,\n};\n\nexport class Log {\n  static pseudoWallTime(request: SDK.NetworkRequest.NetworkRequest, monotonicTime: number): Date {\n    return new Date(request.pseudoWallTime(monotonicTime) * 1000);\n  }\n\n  static async build(requests: SDK.NetworkRequest.NetworkRequest[], options: BuildOptions): Promise<LogDTO> {\n    const log = new Log();\n    const entryPromises = [];\n    for (const request of requests) {\n      entryPromises.push(Entry.build(request, options));\n    }\n    const entries = await Promise.all(entryPromises);\n    return {version: '1.2', creator: log.creator(), pages: log.buildPages(requests), entries};\n  }\n\n  private creator(): Creator {\n    const webKitVersion = /AppleWebKit\\/([^ ]+)/.exec(window.navigator.userAgent);\n\n    return {name: 'WebInspector', version: webKitVersion ? webKitVersion[1] : 'n/a'};\n  }\n\n  private buildPages(requests: SDK.NetworkRequest.NetworkRequest[]): Page[] {\n    const seenIdentifiers = new Set<number>();\n    const pages = [];\n    for (let i = 0; i < requests.length; ++i) {\n      const request = requests[i];\n      const page = SDK.PageLoad.PageLoad.forRequest(request);\n      if (!page || seenIdentifiers.has(page.id)) {\n        continue;\n      }\n      seenIdentifiers.add(page.id);\n      pages.push(this.convertPage(page, request));\n    }\n    return pages;\n  }\n\n  private convertPage(page: SDK.PageLoad.PageLoad, request: SDK.NetworkRequest.NetworkRequest): Page {\n    return {\n      startedDateTime: Log.pseudoWallTime(request, page.startTime).toJSON(),\n      id: 'page_' + page.id,\n      title: page.url,\n      pageTimings: {\n        onContentLoad: this.pageEventTime(page, page.contentLoadTime),\n        onLoad: this.pageEventTime(page, page.loadTime),\n      },\n    };\n  }\n\n  private pageEventTime(page: SDK.PageLoad.PageLoad, time: number): number {\n    const startTime = page.startTime;\n    if (time === -1 || startTime === -1) {\n      return -1;\n    }\n    return Entry.toMilliseconds(time - startTime);\n  }\n}\n\nexport class Entry {\n  private request: SDK.NetworkRequest.NetworkRequest;\n  constructor(request: SDK.NetworkRequest.NetworkRequest) {\n    this.request = request;\n  }\n\n  static toMilliseconds(time: number): number {\n    return time === -1 ? -1 : time * 1000;\n  }\n\n  static async build(request: SDK.NetworkRequest.NetworkRequest, options: BuildOptions): Promise<EntryDTO> {\n    const harEntry = new Entry(request);\n    let ipAddress = harEntry.request.remoteAddress();\n    const portPositionInString = ipAddress.lastIndexOf(':');\n    const connection = portPositionInString !== -1 ? ipAddress.substring(portPositionInString + 1) : undefined;\n    if (portPositionInString !== -1) {\n      ipAddress = ipAddress.substr(0, portPositionInString);\n    }\n    const timings = harEntry.buildTimings();\n    let time = 0;\n    // \"ssl\" is included in the connect field, so do not double count it.\n    for (const t of [timings.blocked, timings.dns, timings.connect, timings.send, timings.wait, timings.receive]) {\n      time += Math.max(t, 0);\n    }\n\n    const initiator = harEntry.request.initiator();\n    let exportedInitiator: Protocol.Network.Initiator|null = null;\n    if (initiator) {\n      exportedInitiator = {\n        type: initiator.type,\n      };\n      if (initiator.url !== undefined) {\n        exportedInitiator.url = initiator.url;\n      }\n      if (initiator.requestId !== undefined) {\n        exportedInitiator.requestId = initiator.requestId;\n      }\n      if (initiator.lineNumber !== undefined) {\n        exportedInitiator.lineNumber = initiator.lineNumber;\n      }\n      if (initiator.stack) {\n        exportedInitiator.stack = initiator.stack;\n      }\n    }\n\n    const entry: EntryDTO = {\n      _connectionId: undefined,\n      _fromCache: undefined,\n      _initiator: exportedInitiator,\n      _priority: harEntry.request.priority(),\n      _resourceType: harEntry.request.resourceType().name(),\n      _webSocketMessages: undefined,\n      cache: {},\n      connection,\n      pageref: undefined,\n      request: await harEntry.buildRequest(),\n      response: harEntry.buildResponse(),\n      // IPv6 address should not have square brackets per (https://tools.ietf.org/html/rfc2373#section-2.2).\n      serverIPAddress: ipAddress.replace(/\\[\\]/g, ''),\n      startedDateTime: Log.pseudoWallTime(harEntry.request, harEntry.request.issueTime()).toJSON(),\n      time,\n      timings,\n    };\n\n    // Sanitize HAR to remove sensitive data.\n\n    if (options.sanitize) {\n      entry.response.cookies = [];\n      entry.response.headers =\n          entry.response.headers.filter(({name}) => !['set-cookie'].includes(name.toLocaleLowerCase()));\n      entry.request.cookies = [];\n      entry.request.headers =\n          entry.request.headers.filter(({name}) => !['authorization', 'cookie'].includes(name.toLocaleLowerCase()));\n    }\n\n    // Chrome specific.\n\n    if (harEntry.request.cached()) {\n      entry._fromCache = harEntry.request.cachedInMemory() ? 'memory' : 'disk';\n    } else {\n      delete entry._fromCache;\n    }\n\n    if (harEntry.request.connectionId !== '0') {\n      entry._connectionId = harEntry.request.connectionId;\n    } else {\n      delete entry._connectionId;\n    }\n\n    const page = SDK.PageLoad.PageLoad.forRequest(harEntry.request);\n    if (page) {\n      entry.pageref = 'page_' + page.id;\n    } else {\n      delete entry.pageref;\n    }\n\n    if (harEntry.request.resourceType() === Common.ResourceType.resourceTypes.WebSocket) {\n      const messages = [];\n      for (const message of harEntry.request.frames()) {\n        messages.push({type: message.type, time: message.time, opcode: message.opCode, data: message.text});\n      }\n      entry._webSocketMessages = messages;\n    } else {\n      delete entry._webSocketMessages;\n    }\n\n    return entry;\n  }\n\n  private async buildRequest(): Promise<Request> {\n    const headersText = this.request.requestHeadersText();\n    const res: Request = {\n      method: this.request.requestMethod,\n      url: this.buildRequestURL(this.request.url()),\n      httpVersion: this.request.requestHttpVersion(),\n      headers: this.request.requestHeaders(),\n      queryString: this.buildParameters(this.request.queryParameters || []),\n      cookies: this.buildCookies(\n          this.request.includedRequestCookies().map(includedRequestCookie => includedRequestCookie.cookie)),\n      headersSize: headersText ? headersText.length : -1,\n      bodySize: await this.requestBodySize(),\n      postData: undefined,\n    };\n    const postData = await this.buildPostData();\n    if (postData) {\n      res.postData = postData;\n    } else {\n      delete res.postData;\n    }\n\n    return res;\n  }\n\n  private buildResponse(): Response {\n    const headersText = this.request.responseHeadersText;\n    return {\n      status: this.request.statusCode,\n      statusText: this.request.statusText,\n      httpVersion: this.request.responseHttpVersion(),\n      headers: this.request.responseHeaders,\n      cookies: this.buildCookies(this.request.responseCookies),\n      content: this.buildContent(),\n      redirectURL: this.request.responseHeaderValue('Location') || '',\n      headersSize: headersText ? headersText.length : -1,\n      bodySize: this.responseBodySize,\n      _transferSize: this.request.transferSize,\n      _error: this.request.localizedFailDescription,\n      _fetchedViaServiceWorker: this.request.fetchedViaServiceWorker,\n      _responseCacheStorageCacheName: this.request.getResponseCacheStorageCacheName(),\n      _serviceWorkerResponseSource: this.request.serviceWorkerResponseSource(),\n    };\n  }\n\n  private buildContent(): Content {\n    const content = ({\n      size: this.request.resourceSize,\n      mimeType: this.request.mimeType || 'x-unknown',\n      compression: undefined,\n    } as Content);\n    const compression = this.responseCompression;\n    if (typeof compression === 'number') {\n      content.compression = compression;\n    } else {\n      delete content.compression;\n    }\n    return content;\n  }\n\n  private buildTimings(): Timing {\n    // Order of events: request_start = 0, [proxy], [dns], [connect [ssl]], [send], duration\n    const timing = this.request.timing;\n    const issueTime = this.request.issueTime();\n    const startTime = this.request.startTime;\n\n    const result: Timing = {\n      blocked: -1,\n      dns: -1,\n      ssl: -1,\n      connect: -1,\n      send: 0,\n      wait: 0,\n      receive: 0,\n      _blocked_queueing: -1,\n      _blocked_proxy: undefined,\n    };\n\n    const queuedTime = (issueTime < startTime) ? startTime - issueTime : -1;\n    result.blocked = Entry.toMilliseconds(queuedTime);\n    result._blocked_queueing = Entry.toMilliseconds(queuedTime);\n\n    let highestTime = 0;\n    if (timing) {\n      // \"blocked\" here represents both queued + blocked/stalled + proxy (ie: anything before request was started).\n      // We pick the better of when the network request start was reported and pref timing.\n      const blockedStart = leastNonNegative([timing.dnsStart, timing.connectStart, timing.sendStart]);\n      if (blockedStart !== Infinity) {\n        result.blocked += blockedStart;\n      }\n\n      // Proxy is part of blocked but sometimes (like quic) blocked is -1 but has proxy timings.\n      if (timing.proxyEnd !== -1) {\n        result._blocked_proxy = timing.proxyEnd - timing.proxyStart;\n      }\n      if (result._blocked_proxy && result._blocked_proxy > result.blocked) {\n        result.blocked = result._blocked_proxy;\n      }\n\n      const dnsStart = timing.dnsEnd >= 0 ? blockedStart : 0;\n      const dnsEnd = timing.dnsEnd >= 0 ? timing.dnsEnd : -1;\n      result.dns = dnsEnd - dnsStart;\n\n      // SSL timing is included in connection timing.\n      const sslStart = timing.sslEnd > 0 ? timing.sslStart : 0;\n      const sslEnd = timing.sslEnd > 0 ? timing.sslEnd : -1;\n      result.ssl = sslEnd - sslStart;\n\n      const connectStart = timing.connectEnd >= 0 ? leastNonNegative([dnsEnd, blockedStart]) : 0;\n      const connectEnd = timing.connectEnd >= 0 ? timing.connectEnd : -1;\n      result.connect = connectEnd - connectStart;\n\n      // Send should not be -1 for legacy reasons even if it is served from cache.\n      const sendStart = timing.sendEnd >= 0 ? Math.max(connectEnd, dnsEnd, blockedStart) : 0;\n      const sendEnd = timing.sendEnd >= 0 ? timing.sendEnd : 0;\n      result.send = sendEnd - sendStart;\n      // Quic sometimes says that sendStart is before connectionEnd (see: crbug.com/740792)\n      if (result.send < 0) {\n        result.send = 0;\n      }\n      highestTime = Math.max(sendEnd, connectEnd, sslEnd, dnsEnd, blockedStart, 0);\n\n      // Custom fields for service worker timings.\n      result._workerStart = timing.workerStart;\n      result._workerReady = timing.workerReady;\n      result._workerFetchStart = timing.workerFetchStart;\n      result._workerRespondWithSettled = timing.workerRespondWithSettled;\n    } else if (this.request.responseReceivedTime === -1) {\n      // Means that we don't have any more details after blocked, so attribute all to blocked.\n      result.blocked = Entry.toMilliseconds(this.request.endTime - issueTime);\n      return result;\n    }\n\n    const requestTime = timing ? timing.requestTime : startTime;\n    const waitStart = highestTime;\n    const waitEnd = Entry.toMilliseconds(this.request.responseReceivedTime - requestTime);\n    result.wait = waitEnd - waitStart;\n\n    const receiveStart = waitEnd;\n    const receiveEnd = Entry.toMilliseconds(this.request.endTime - requestTime);\n    result.receive = Math.max(receiveEnd - receiveStart, 0);\n\n    return result;\n\n    function leastNonNegative(values: number[]): number {\n      return values.reduce((best, value) => (value >= 0 && value < best) ? value : best, Infinity);\n    }\n  }\n\n  private async buildPostData(): Promise<PostData|null> {\n    const postData = await this.request.requestFormData();\n    if (!postData) {\n      return null;\n    }\n    const res: PostData = {mimeType: this.request.requestContentType() || '', text: postData, params: undefined};\n    const formParameters = await this.request.formParameters();\n    if (formParameters) {\n      res.params = this.buildParameters(formParameters);\n    } else {\n      delete res.params;\n    }\n    return res;\n  }\n\n  private buildParameters(parameters: Parameter[]): Parameter[] {\n    return parameters.slice();\n  }\n\n  private buildRequestURL(url: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return Common.ParsedURL.ParsedURL.split(url, '#', 2)[0];\n  }\n\n  private buildCookies(cookies: SDK.Cookie.Cookie[]): CookieDTO[] {\n    return cookies.map(this.buildCookie.bind(this));\n  }\n\n  private buildCookie(cookie: SDK.Cookie.Cookie): CookieDTO {\n    const c: CookieDTO = {\n      name: cookie.name(),\n      value: cookie.value(),\n      path: cookie.path(),\n      domain: cookie.domain(),\n      expires: cookie.expiresDate(Log.pseudoWallTime(this.request, this.request.startTime)),\n      httpOnly: cookie.httpOnly(),\n      secure: cookie.secure(),\n      sameSite: undefined,\n      partitionKey: undefined,\n    };\n    if (cookie.sameSite()) {\n      c.sameSite = cookie.sameSite();\n    } else {\n      delete c.sameSite;\n    }\n    if (cookie.partitionKey()) {\n      c.partitionKey = cookie.partitionKey();\n    } else {\n      delete c.partitionKey;\n    }\n    return c;\n  }\n\n  private async requestBodySize(): Promise<number> {\n    const postData = await this.request.requestFormData();\n    if (!postData) {\n      return 0;\n    }\n\n    // As per the har spec, returns the length in bytes of the posted data.\n    // TODO(jarhar): This will be wrong if the underlying encoding is not UTF-8. SDK.NetworkRequest.NetworkRequest.requestFormData is\n    //   assumed to be UTF-8 because the backend decodes post data to a UTF-8 string regardless of the provided\n    //   content-type/charset in InspectorNetworkAgent::FormDataToString\n    return new TextEncoder().encode(postData).length;\n  }\n\n  get responseBodySize(): number {\n    if (this.request.cached() || this.request.statusCode === 304) {\n      return 0;\n    }\n    if (!this.request.responseHeadersText) {\n      return -1;\n    }\n    return this.request.transferSize - this.request.responseHeadersText.length;\n  }\n\n  get responseCompression(): number|undefined {\n    if (this.request.cached() || this.request.statusCode === 304 || this.request.statusCode === 206) {\n      return;\n    }\n    if (!this.request.responseHeadersText) {\n      return;\n    }\n    return this.request.resourceSize - this.responseBodySize;\n  }\n}\n\nexport interface Timing {\n  blocked: number;\n  dns: number;\n  ssl: number;\n  connect: number;\n  send: number;\n  wait: number;\n  receive: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  _blocked_queueing: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  _blocked_proxy?: number;\n\n  // Custom fields for service workers.\n  _workerStart?: number;\n  _workerReady?: number;\n  _workerFetchStart?: number;\n  _workerRespondWithSettled?: number;\n}\n\nexport interface Parameter {\n  name: string;\n  value: string;\n}\n\nexport interface Content {\n  size: number;\n  mimeType: string;\n  compression?: number;\n  text?: string;\n  encoding?: string;\n}\n\nexport interface Request {\n  method: string;\n  url: Platform.DevToolsPath.UrlString;\n  httpVersion: string;\n  headers: {name: string, value: string, comment?: string}[];\n  queryString: Parameter[];\n  cookies: CookieDTO[];\n  headersSize: number;\n  bodySize: number;\n  postData?: PostData;\n}\n\nexport interface Response {\n  status: number;\n  statusText: string;\n  httpVersion: string;\n  headers: {name: string, value: string, comment?: string}[];\n  cookies: CookieDTO[];\n  content: Content;\n  redirectURL: string;\n  headersSize: number;\n  bodySize: number;\n  _transferSize: number;\n  _error: string|null;\n  _fetchedViaServiceWorker: boolean;\n  _responseCacheStorageCacheName: string|undefined;\n  _serviceWorkerResponseSource: Protocol.Network.ServiceWorkerResponseSource|undefined;\n}\n\nexport interface EntryDTO {\n  _connectionId?: string;\n  _fromCache?: string;\n  _initiator: Protocol.Network.Initiator|null;\n  _priority: Protocol.Network.ResourcePriority|null;\n  _resourceType: string;\n  _webSocketMessages?: Object[];\n  cache: Object;\n  connection?: string;\n  pageref?: string;\n  request: Request;\n  response: Response;\n  serverIPAddress: string;\n  startedDateTime: string|Object;\n  time: number;\n  timings: Timing;\n}\n\nexport interface PostData {\n  mimeType: string;\n  params?: Parameter[];\n  text: string;\n}\n\nexport interface CookieDTO {\n  name: string;\n  value: string;\n  path: string;\n  domain: string;\n  expires: Date|null;\n  httpOnly: boolean;\n  secure: boolean;\n  sameSite?: Protocol.Network.CookieSameSite;\n  partitionKey?: Protocol.Network.CookiePartitionKey;\n}\n\nexport interface Page {\n  startedDateTime: string|Object;\n  id: string;\n  title: string;\n  pageTimings: {\n    onContentLoad: number,\n    onLoad: number,\n  };\n}\n\nexport interface Creator {\n  version: string;\n  name: string;\n}\n\nexport interface LogDTO {\n  version: string;\n  creator: Creator;\n  pages: Page[];\n  entries: EntryDTO[];\n}\n"],
  "mappings": "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",
  "names": []
}
