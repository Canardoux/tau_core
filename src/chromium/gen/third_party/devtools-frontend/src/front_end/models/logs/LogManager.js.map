{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/logs/LogManager.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {NetworkLog} from './NetworkLog.js';\n\nconst modelToEventListeners = new WeakMap<SDK.LogModel.LogModel, Common.EventTarget.EventDescriptor[]>();\n\nlet instance: LogManager|null = null;\n\nexport class LogManager implements SDK.TargetManager.SDKModelObserver<SDK.LogModel.LogModel> {\n  private constructor() {\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.LogModel.LogModel, this);\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): LogManager {\n    if (!instance || forceNew) {\n      instance = new LogManager();\n    }\n\n    return instance;\n  }\n\n  modelAdded(logModel: SDK.LogModel.LogModel): void {\n    const eventListeners = [];\n    eventListeners.push(logModel.addEventListener(SDK.LogModel.Events.ENTRY_ADDED, this.logEntryAdded, this));\n    modelToEventListeners.set(logModel, eventListeners);\n  }\n\n  modelRemoved(logModel: SDK.LogModel.LogModel): void {\n    const eventListeners = modelToEventListeners.get(logModel);\n    if (eventListeners) {\n      Common.EventTarget.removeEventListeners(eventListeners);\n    }\n  }\n\n  private logEntryAdded(event: Common.EventTarget.EventTargetEvent<SDK.LogModel.EntryAddedEvent>): void {\n    const {logModel, entry} = event.data;\n    const target = logModel.target();\n    const details = {\n      url: entry.url as Platform.DevToolsPath.UrlString,\n      line: entry.lineNumber,\n      parameters: [entry.text, ...(entry.args ?? [])],\n      stackTrace: entry.stackTrace,\n      timestamp: entry.timestamp,\n      workerId: entry.workerId,\n      category: entry.category,\n      affectedResources: entry.networkRequestId ? {requestId: entry.networkRequestId} : undefined,\n    };\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        target.model(SDK.RuntimeModel.RuntimeModel), entry.source, entry.level, entry.text, details);\n\n    if (entry.networkRequestId) {\n      NetworkLog.instance().associateConsoleMessageWithRequest(consoleMessage, entry.networkRequestId);\n    }\n\n    const consoleModel = target.model(SDK.ConsoleModel.ConsoleModel);\n    if (consoleMessage.source === Protocol.Log.LogEntrySource.Worker) {\n      const workerId = consoleMessage.workerId || '';\n      // We have a copy of worker messages reported through the page, so that\n      // user can see messages from the worker which has been already destroyed.\n      // When opening DevTools, give us some time to connect to the worker and\n      // not report the message twice if the worker is still alive.\n      if (SDK.TargetManager.TargetManager.instance().targetById(workerId)) {\n        return;\n      }\n      window.setTimeout(() => {\n        if (!SDK.TargetManager.TargetManager.instance().targetById(workerId)) {\n          consoleModel?.addMessage(consoleMessage);\n        }\n      }, 1000);\n    } else {\n      consoleModel?.addMessage(consoleMessage);\n    }\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,YAAY;AAExB,YAAY,SAAS;AACrB,YAAY,cAAc;AAE1B,SAAQ,kBAAiB;AAEzB,MAAM,wBAAwB,oBAAI,QAAqE;AAEvG,IAAI,WAA4B;AAEzB,aAAM,WAAgF;AAAA,EACnF,cAAc;AACpB,QAAI,cAAc,cAAc,SAAS,EAAE,cAAc,IAAI,SAAS,UAAU,IAAI;AAAA,EACtF;AAAA,EAEA,OAAO,SAAS,EAAC,SAAQ,IAAyB,EAAC,UAAU,MAAK,GAAe;AAC/E,QAAI,CAAC,YAAY,UAAU;AACzB,iBAAW,IAAI,WAAW;AAAA,IAC5B;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,UAAuC;AAChD,UAAM,iBAAiB,CAAC;AACxB,mBAAe,KAAK,SAAS,iBAAiB,IAAI,SAAS,OAAO,aAAa,KAAK,eAAe,IAAI,CAAC;AACxG,0BAAsB,IAAI,UAAU,cAAc;AAAA,EACpD;AAAA,EAEA,aAAa,UAAuC;AAClD,UAAM,iBAAiB,sBAAsB,IAAI,QAAQ;AACzD,QAAI,gBAAgB;AAClB,aAAO,YAAY,qBAAqB,cAAc;AAAA,IACxD;AAAA,EACF;AAAA,EAEQ,cAAc,OAAgF;AACpG,UAAM,EAAC,UAAU,MAAK,IAAI,MAAM;AAChC,UAAM,SAAS,SAAS,OAAO;AAC/B,UAAM,UAAU;AAAA,MACd,KAAK,MAAM;AAAA,MACX,MAAM,MAAM;AAAA,MACZ,YAAY,CAAC,MAAM,MAAM,GAAI,MAAM,QAAQ,CAAC,CAAE;AAAA,MAC9C,YAAY,MAAM;AAAA,MAClB,WAAW,MAAM;AAAA,MACjB,UAAU,MAAM;AAAA,MAChB,UAAU,MAAM;AAAA,MAChB,mBAAmB,MAAM,mBAAmB,EAAC,WAAW,MAAM,iBAAgB,IAAI;AAAA,IACpF;AACA,UAAM,iBAAiB,IAAI,IAAI,aAAa;AAAA,MACxC,OAAO,MAAM,IAAI,aAAa,YAAY;AAAA,MAAG,MAAM;AAAA,MAAQ,MAAM;AAAA,MAAO,MAAM;AAAA,MAAM;AAAA,IAAO;AAE/F,QAAI,MAAM,kBAAkB;AAC1B,iBAAW,SAAS,EAAE,mCAAmC,gBAAgB,MAAM,gBAAgB;AAAA,IACjG;AAEA,UAAM,eAAe,OAAO,MAAM,IAAI,aAAa,YAAY;AAC/D,QAAI,eAAe,WAAW,SAAS,IAAI,eAAe,QAAQ;AAChE,YAAM,WAAW,eAAe,YAAY;AAK5C,UAAI,IAAI,cAAc,cAAc,SAAS,EAAE,WAAW,QAAQ,GAAG;AACnE;AAAA,MACF;AACA,aAAO,WAAW,MAAM;AACtB,YAAI,CAAC,IAAI,cAAc,cAAc,SAAS,EAAE,WAAW,QAAQ,GAAG;AACpE,wBAAc,WAAW,cAAc;AAAA,QACzC;AAAA,MACF,GAAG,GAAI;AAAA,IACT,OAAO;AACL,oBAAc,WAAW,cAAc;AAAA,IACzC;AAAA,EACF;AACF;",
  "names": []
}
