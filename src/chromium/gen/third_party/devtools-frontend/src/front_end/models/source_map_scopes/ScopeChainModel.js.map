{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/source_map_scopes/ScopeChainModel.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport {resolveScopeChain} from './NamesResolver.js';\n\n/**\n * This class is responsible for resolving / updating the scope chain for a specific {@link SDK.DebuggerModel.CallFrame}\n * instance.\n *\n * There are several sources that can influence the scope view:\n *   - Debugger plugins can provide the whole scope info (e.g. from DWARF)\n *   - Source Maps can provide OR augment scope info\n *\n * Source maps can be enabled/disabled dynamically and debugger plugins can attach debug info after the fact.\n *\n * This class tracks all that and sends events with the latest scope chain for a specific call frame.\n */\nexport class ScopeChainModel extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #callFrame: SDK.DebuggerModel.CallFrame;\n\n  /** We use the `Throttler` here to make sure that `#boundUpdate` is not run multiple times simultanously */\n  readonly #throttler = new Common.Throttler.Throttler(5);\n  readonly #boundUpdate = this.#update.bind(this);\n\n  constructor(callFrame: SDK.DebuggerModel.CallFrame) {\n    super();\n    this.#callFrame = callFrame;\n    this.#callFrame.debuggerModel.addEventListener(\n        SDK.DebuggerModel.Events.DebugInfoAttached, this.#debugInfoAttached, this);\n    this.#callFrame.debuggerModel.sourceMapManager().addEventListener(\n        SDK.SourceMapManager.Events.SourceMapAttached, this.#sourceMapAttached, this);\n\n    void this.#throttler.schedule(this.#boundUpdate);\n  }\n\n  dispose(): void {\n    this.#callFrame.debuggerModel.removeEventListener(\n        SDK.DebuggerModel.Events.DebugInfoAttached, this.#debugInfoAttached, this);\n    this.#callFrame.debuggerModel.sourceMapManager().removeEventListener(\n        SDK.SourceMapManager.Events.SourceMapAttached, this.#sourceMapAttached, this);\n    this.listeners?.clear();\n  }\n\n  async #update(): Promise<void> {\n    const scopeChain = await resolveScopeChain(this.#callFrame);\n    this.dispatchEventToListeners(Events.SCOPE_CHAIN_UPDATED, new ScopeChain(scopeChain));\n  }\n\n  #debugInfoAttached(event: Common.EventTarget.EventTargetEvent<SDK.Script.Script>): void {\n    if (event.data === this.#callFrame.script) {\n      void this.#throttler.schedule(this.#boundUpdate);\n    }\n  }\n\n  #sourceMapAttached(event: Common.EventTarget\n                         .EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>): void {\n    if (event.data.client === this.#callFrame.script) {\n      void this.#throttler.schedule(this.#boundUpdate);\n    }\n  }\n}\n\nexport const enum Events {\n  SCOPE_CHAIN_UPDATED = 'ScopeChainUpdated',\n}\n\nexport type EventTypes = {\n  [Events.SCOPE_CHAIN_UPDATED]: ScopeChain,\n};\n\n/**\n * A scope chain ready to be shown in the UI with debugging info applied.\n */\nexport class ScopeChain {\n  readonly scopeChain: SDK.DebuggerModel.ScopeChainEntry[];\n\n  constructor(scopeChain: SDK.DebuggerModel.ScopeChainEntry[]) {\n    this.scopeChain = scopeChain;\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,YAAY;AACxB,YAAY,SAAS;AAErB,SAAQ,yBAAwB;AAczB,aAAM,wBAAwB,OAAO,cAAc,cAA0B;AAAA,EACzE;AAAA;AAAA,EAGA,aAAa,IAAI,OAAO,UAAU,UAAU,CAAC;AAAA,EAC7C,eAAe,KAAK,QAAQ,KAAK,IAAI;AAAA,EAE9C,YAAY,WAAwC;AAClD,UAAM;AACN,SAAK,aAAa;AAClB,SAAK,WAAW,cAAc;AAAA,MAC1B,IAAI,cAAc,OAAO;AAAA,MAAmB,KAAK;AAAA,MAAoB;AAAA,IAAI;AAC7E,SAAK,WAAW,cAAc,iBAAiB,EAAE;AAAA,MAC7C,IAAI,iBAAiB,OAAO;AAAA,MAAmB,KAAK;AAAA,MAAoB;AAAA,IAAI;AAEhF,SAAK,KAAK,WAAW,SAAS,KAAK,YAAY;AAAA,EACjD;AAAA,EAEA,UAAgB;AACd,SAAK,WAAW,cAAc;AAAA,MAC1B,IAAI,cAAc,OAAO;AAAA,MAAmB,KAAK;AAAA,MAAoB;AAAA,IAAI;AAC7E,SAAK,WAAW,cAAc,iBAAiB,EAAE;AAAA,MAC7C,IAAI,iBAAiB,OAAO;AAAA,MAAmB,KAAK;AAAA,MAAoB;AAAA,IAAI;AAChF,SAAK,WAAW,MAAM;AAAA,EACxB;AAAA,EAEA,MAAM,UAAyB;AAC7B,UAAM,aAAa,MAAM,kBAAkB,KAAK,UAAU;AAC1D,SAAK,yBAAyB,+CAA4B,IAAI,WAAW,UAAU,CAAC;AAAA,EACtF;AAAA,EAEA,mBAAmB,OAAqE;AACtF,QAAI,MAAM,SAAS,KAAK,WAAW,QAAQ;AACzC,WAAK,KAAK,WAAW,SAAS,KAAK,YAAY;AAAA,IACjD;AAAA,EACF;AAAA,EAEA,mBAAmB,OAC8F;AAC/G,QAAI,MAAM,KAAK,WAAW,KAAK,WAAW,QAAQ;AAChD,WAAK,KAAK,WAAW,SAAS,KAAK,YAAY;AAAA,IACjD;AAAA,EACF;AACF;AAEO,WAAW,SAAX,kBAAWA,YAAX;AACL,EAAAA,QAAA,yBAAsB;AADN,SAAAA;AAAA,GAAA;AAWX,aAAM,WAAW;AAAA,EACb;AAAA,EAET,YAAY,YAAiD;AAC3D,SAAK,aAAa;AAAA,EACpB;AACF;",
  "names": ["Events"]
}
