{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/persistence/Automapping.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {type FileSystem, FileSystemWorkspaceBinding} from './FileSystemWorkspaceBinding.js';\nimport {PersistenceImpl} from './PersistenceImpl.js';\n\nexport class Automapping {\n  private readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  private readonly onStatusAdded: (arg0: AutomappingStatus) => Promise<void>;\n  private readonly onStatusRemoved: (arg0: AutomappingStatus) => Promise<void>;\n  private readonly statuses: Set<AutomappingStatus>;\n  private readonly fileSystemUISourceCodes: FileSystemUISourceCodes;\n  private readonly sweepThrottler: Common.Throttler.Throttler;\n  private readonly sourceCodeToProcessingPromiseMap: WeakMap<Workspace.UISourceCode.UISourceCode, Promise<void>>;\n  private readonly sourceCodeToAutoMappingStatusMap: WeakMap<Workspace.UISourceCode.UISourceCode, AutomappingStatus>;\n  private readonly sourceCodeToMetadataMap:\n      WeakMap<Workspace.UISourceCode.UISourceCode, Workspace.UISourceCode.UISourceCodeMetadata|null>;\n  private readonly filesIndex: FilePathIndex;\n  private readonly projectFoldersIndex: FolderIndex;\n  private readonly activeFoldersIndex: FolderIndex;\n  private readonly interceptors: ((arg0: Workspace.UISourceCode.UISourceCode) => boolean)[];\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, onStatusAdded: (arg0: AutomappingStatus) => Promise<void>,\n      onStatusRemoved: (arg0: AutomappingStatus) => Promise<void>) {\n    this.workspace = workspace;\n\n    this.onStatusAdded = onStatusAdded;\n    this.onStatusRemoved = onStatusRemoved;\n    this.statuses = new Set();\n\n    this.fileSystemUISourceCodes = new FileSystemUISourceCodes();\n    this.sweepThrottler = new Common.Throttler.Throttler(100);\n\n    this.sourceCodeToProcessingPromiseMap = new WeakMap();\n    this.sourceCodeToAutoMappingStatusMap = new WeakMap();\n    this.sourceCodeToMetadataMap = new WeakMap();\n\n    this.filesIndex = new FilePathIndex();\n    this.projectFoldersIndex = new FolderIndex();\n    this.activeFoldersIndex = new FolderIndex();\n\n    this.interceptors = [];\n\n    this.workspace.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, event => this.onUISourceCodeAdded(event.data));\n    this.workspace.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeRemoved, event => this.onUISourceCodeRemoved(event.data));\n    this.workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeRenamed, this.onUISourceCodeRenamed, this);\n    this.workspace.addEventListener(\n        Workspace.Workspace.Events.ProjectAdded, event => this.onProjectAdded(event.data), this);\n    this.workspace.addEventListener(\n        Workspace.Workspace.Events.ProjectRemoved, event => this.onProjectRemoved(event.data), this);\n\n    for (const fileSystem of workspace.projects()) {\n      this.onProjectAdded(fileSystem);\n    }\n    for (const uiSourceCode of workspace.uiSourceCodes()) {\n      this.onUISourceCodeAdded(uiSourceCode);\n    }\n  }\n\n  addNetworkInterceptor(interceptor: (arg0: Workspace.UISourceCode.UISourceCode) => boolean): void {\n    this.interceptors.push(interceptor);\n    this.scheduleRemap();\n  }\n\n  scheduleRemap(): void {\n    for (const status of this.statuses.values()) {\n      this.clearNetworkStatus(status.network);\n    }\n    this.scheduleSweep();\n  }\n\n  private scheduleSweep(): void {\n    void this.sweepThrottler.schedule(sweepUnmapped.bind(this));\n\n    function sweepUnmapped(this: Automapping): Promise<void> {\n      const networkProjects = this.workspace.projectsForType(Workspace.Workspace.projectTypes.Network);\n      for (const networkProject of networkProjects) {\n        for (const uiSourceCode of networkProject.uiSourceCodes()) {\n          void this.computeNetworkStatus(uiSourceCode);\n        }\n      }\n      this.onSweepHappenedForTest();\n      return Promise.resolve();\n    }\n  }\n\n  private onSweepHappenedForTest(): void {\n  }\n\n  private onProjectRemoved(project: Workspace.Workspace.Project): void {\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.onUISourceCodeRemoved(uiSourceCode);\n    }\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystem = project as FileSystem;\n    for (const gitFolder of fileSystem.initialGitFolders()) {\n      this.projectFoldersIndex.removeFolder(gitFolder);\n    }\n    this.projectFoldersIndex.removeFolder(fileSystem.fileSystemPath());\n    this.scheduleRemap();\n  }\n\n  private onProjectAdded(project: Workspace.Workspace.Project): void {\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystem = project as FileSystem;\n    for (const gitFolder of fileSystem.initialGitFolders()) {\n      this.projectFoldersIndex.addFolder(gitFolder);\n    }\n    this.projectFoldersIndex.addFolder(fileSystem.fileSystemPath());\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.onUISourceCodeAdded(uiSourceCode);\n    }\n    this.scheduleRemap();\n  }\n\n  private onUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const project = uiSourceCode.project();\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      if (!FileSystemWorkspaceBinding.fileSystemSupportsAutomapping(project)) {\n        return;\n      }\n      this.filesIndex.addPath(uiSourceCode.url());\n      this.fileSystemUISourceCodes.add(uiSourceCode);\n      this.scheduleSweep();\n    } else if (project.type() === Workspace.Workspace.projectTypes.Network) {\n      void this.computeNetworkStatus(uiSourceCode);\n    }\n  }\n\n  private onUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      this.filesIndex.removePath(uiSourceCode.url());\n      this.fileSystemUISourceCodes.delete(uiSourceCode.url());\n      const status = this.sourceCodeToAutoMappingStatusMap.get(uiSourceCode);\n      if (status) {\n        this.clearNetworkStatus(status.network);\n      }\n    } else if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network) {\n      this.clearNetworkStatus(uiSourceCode);\n    }\n  }\n\n  private onUISourceCodeRenamed(\n      event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.UISourceCodeRenamedEvent>): void {\n    const {uiSourceCode, oldURL} = event.data;\n    if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n\n    this.filesIndex.removePath(oldURL);\n    this.fileSystemUISourceCodes.delete(oldURL);\n    const status = this.sourceCodeToAutoMappingStatusMap.get(uiSourceCode);\n    if (status) {\n      this.clearNetworkStatus(status.network);\n    }\n\n    this.filesIndex.addPath(uiSourceCode.url());\n    this.fileSystemUISourceCodes.add(uiSourceCode);\n    this.scheduleSweep();\n  }\n\n  computeNetworkStatus(networkSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const processingPromise = this.sourceCodeToProcessingPromiseMap.get(networkSourceCode);\n    if (processingPromise) {\n      return processingPromise;\n    }\n    if (this.sourceCodeToAutoMappingStatusMap.has(networkSourceCode)) {\n      return Promise.resolve();\n    }\n    if (this.interceptors.some(interceptor => interceptor(networkSourceCode))) {\n      return Promise.resolve();\n    }\n    if (Common.ParsedURL.schemeIs(networkSourceCode.url(), 'wasm:')) {\n      return Promise.resolve();\n    }\n    const createBindingPromise =\n        this.createBinding(networkSourceCode).then(validateStatus.bind(this)).then(onStatus.bind(this));\n    this.sourceCodeToProcessingPromiseMap.set(networkSourceCode, createBindingPromise);\n    return createBindingPromise;\n\n    async function validateStatus(this: Automapping, status: AutomappingStatus|null): Promise<AutomappingStatus|null> {\n      if (!status) {\n        return null;\n      }\n      if (this.sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return null;\n      }\n      if (status.network.contentType().isFromSourceMap() || !status.fileSystem.contentType().isTextType()) {\n        return status;\n      }\n\n      // At the time binding comes, there are multiple user scenarios:\n      // 1. Both network and fileSystem files are **not** dirty.\n      //    This is a typical scenario when user hasn't done any edits yet to the\n      //    files in question.\n      // 2. FileSystem file has unsaved changes, network is clear.\n      //    This typically happens with CSS files editing. Consider the following\n      //    scenario:\n      //      - user edits file that has been successfully mapped before\n      //      - user doesn't save the file\n      //      - user hits reload\n      // 3. Network file has either unsaved changes or commits, but fileSystem file is clear.\n      //    This typically happens when we've been editing file and then realized we'd like to drop\n      //    a folder and persist all the changes.\n      // 4. Network file has either unsaved changes or commits, and fileSystem file has unsaved changes.\n      //    We consider this to be un-realistic scenario and in this case just fail gracefully.\n      //\n      // To support usecase (3), we need to validate against original network content.\n      if (status.fileSystem.isDirty() && (status.network.isDirty() || status.network.hasCommits())) {\n        return null;\n      }\n\n      const [fileSystemContent, networkContent] = (await Promise.all([\n                                                    status.fileSystem.requestContentData(),\n                                                    status.network.project().requestFileContent(status.network),\n                                                  ])).map(TextUtils.ContentData.ContentData.asDeferredContent);\n      if (fileSystemContent.content === null || networkContent === null) {\n        return null;\n      }\n\n      if (this.sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return null;\n      }\n\n      const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(status.network);\n      let isValid = false;\n      const fileContent = fileSystemContent.content;\n      if (target && target.type() === SDK.Target.Type.NODE) {\n        if (networkContent.content) {\n          const rewrappedNetworkContent =\n              PersistenceImpl.rewrapNodeJSContent(status.fileSystem, fileContent, networkContent.content);\n          isValid = fileContent === rewrappedNetworkContent;\n        }\n      } else {\n        if (networkContent.content) {\n          // Trim trailing whitespaces because V8 adds trailing newline.\n          isValid = fileContent.trimEnd() === networkContent.content.trimEnd();\n        }\n      }\n      if (!isValid) {\n        this.prevalidationFailedForTest(status);\n        return null;\n      }\n      return status;\n    }\n\n    async function onStatus(this: Automapping, status: AutomappingStatus|null): Promise<void> {\n      if (this.sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return;\n      }\n      if (!status) {\n        this.onBindingFailedForTest();\n        this.sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n        return;\n      }\n      // TODO(lushnikov): remove this check once there's a single uiSourceCode per url. @see crbug.com/670180\n      if (this.sourceCodeToAutoMappingStatusMap.has(status.network) ||\n          this.sourceCodeToAutoMappingStatusMap.has(status.fileSystem)) {\n        this.sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n        return;\n      }\n\n      this.statuses.add(status);\n      this.sourceCodeToAutoMappingStatusMap.set(status.network, status);\n      this.sourceCodeToAutoMappingStatusMap.set(status.fileSystem, status);\n      if (status.exactMatch) {\n        const projectFolder = this.projectFoldersIndex.closestParentFolder(status.fileSystem.url());\n        const newFolderAdded = projectFolder ? this.activeFoldersIndex.addFolder(projectFolder) : false;\n        if (newFolderAdded) {\n          this.scheduleSweep();\n        }\n      }\n      await this.onStatusAdded.call(null, status);\n      this.sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n    }\n  }\n\n  private prevalidationFailedForTest(_binding: AutomappingStatus): void {\n  }\n\n  private onBindingFailedForTest(): void {\n  }\n\n  private clearNetworkStatus(networkSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (this.sourceCodeToProcessingPromiseMap.has(networkSourceCode)) {\n      this.sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n      return;\n    }\n    const status = this.sourceCodeToAutoMappingStatusMap.get(networkSourceCode);\n    if (!status) {\n      return;\n    }\n\n    this.statuses.delete(status);\n    this.sourceCodeToAutoMappingStatusMap.delete(status.network);\n    this.sourceCodeToAutoMappingStatusMap.delete(status.fileSystem);\n    if (status.exactMatch) {\n      const projectFolder = this.projectFoldersIndex.closestParentFolder(status.fileSystem.url());\n      if (projectFolder) {\n        this.activeFoldersIndex.removeFolder(projectFolder);\n      }\n    }\n    void this.onStatusRemoved.call(null, status);\n  }\n\n  private async createBinding(networkSourceCode: Workspace.UISourceCode.UISourceCode): Promise<AutomappingStatus|null> {\n    const url = networkSourceCode.url();\n    if (Common.ParsedURL.schemeIs(url, 'file:') || Common.ParsedURL.schemeIs(url, 'snippet:')) {\n      const fileSourceCode = this.fileSystemUISourceCodes.get(url);\n      const status = fileSourceCode ? new AutomappingStatus(networkSourceCode, fileSourceCode, false) : null;\n      return status;\n    }\n\n    let networkPath = Common.ParsedURL.ParsedURL.extractPath(url);\n    if (networkPath === null) {\n      return null;\n    }\n\n    if (networkPath.endsWith('/')) {\n      networkPath = Common.ParsedURL.ParsedURL.concatenate(networkPath, 'index.html');\n    }\n\n    const similarFiles =\n        this.filesIndex.similarFiles(networkPath).map(path => this.fileSystemUISourceCodes.get(path)) as\n        Workspace.UISourceCode.UISourceCode[];\n    if (!similarFiles.length) {\n      return null;\n    }\n\n    await Promise.all(similarFiles.concat(networkSourceCode).map(async sourceCode => {\n      this.sourceCodeToMetadataMap.set(sourceCode, await sourceCode.requestMetadata());\n    }));\n\n    const activeFiles = similarFiles.filter(file => Boolean(this.activeFoldersIndex.closestParentFolder(file.url())));\n    const networkMetadata = this.sourceCodeToMetadataMap.get(networkSourceCode);\n    if (!networkMetadata || (!networkMetadata.modificationTime && typeof networkMetadata.contentSize !== 'number')) {\n      // If networkSourceCode does not have metadata, try to match against active folders.\n      if (activeFiles.length !== 1) {\n        return null;\n      }\n      return new AutomappingStatus(networkSourceCode, activeFiles[0], false);\n    }\n\n    // Try to find exact matches, prioritizing active folders.\n    let exactMatches = this.filterWithMetadata(activeFiles, networkMetadata);\n    if (!exactMatches.length) {\n      exactMatches = this.filterWithMetadata(similarFiles, networkMetadata);\n    }\n    if (exactMatches.length !== 1) {\n      return null;\n    }\n    return new AutomappingStatus(networkSourceCode, exactMatches[0], true);\n  }\n\n  private filterWithMetadata(\n      files: Workspace.UISourceCode.UISourceCode[],\n      networkMetadata: Workspace.UISourceCode.UISourceCodeMetadata): Workspace.UISourceCode.UISourceCode[] {\n    return files.filter(file => {\n      const fileMetadata = this.sourceCodeToMetadataMap.get(file);\n      if (!fileMetadata) {\n        return false;\n      }\n      // Allow a second of difference due to network timestamps lack of precision.\n      const timeMatches = !networkMetadata.modificationTime || !fileMetadata.modificationTime ||\n          Math.abs(networkMetadata.modificationTime.getTime() - fileMetadata.modificationTime.getTime()) < 1000;\n      const contentMatches = !networkMetadata.contentSize || fileMetadata.contentSize === networkMetadata.contentSize;\n      return timeMatches && contentMatches;\n    });\n  }\n}\n\nclass FilePathIndex {\n  readonly #reversedIndex = Common.Trie.Trie.newArrayTrie<string[]>();\n\n  addPath(path: Platform.DevToolsPath.UrlString): void {\n    const reversePathParts = path.split('/').reverse();\n    this.#reversedIndex.add(reversePathParts);\n  }\n\n  removePath(path: Platform.DevToolsPath.UrlString): void {\n    const reversePathParts = path.split('/').reverse();\n    this.#reversedIndex.remove(reversePathParts);\n  }\n\n  similarFiles(networkPath: Platform.DevToolsPath.EncodedPathString): Platform.DevToolsPath.UrlString[] {\n    const reversePathParts = networkPath.split('/').reverse();\n    const longestCommonPrefix = this.#reversedIndex.longestPrefix(reversePathParts, false);\n    if (longestCommonPrefix.length === 0) {\n      return [];\n    }\n    return this.#reversedIndex.words(longestCommonPrefix)\n               .map(reversePathParts => reversePathParts.reverse().join('/')) as Platform.DevToolsPath.UrlString[];\n  }\n}\n\nclass FolderIndex {\n  readonly #index = Common.Trie.Trie.newArrayTrie<string[]>();\n  readonly #folderCount = new Map<string, number>();\n\n  addFolder(path: Platform.DevToolsPath.UrlString): boolean {\n    const pathParts = this.#removeTrailingSlash(path).split('/');\n    this.#index.add(pathParts);\n\n    const pathForCount = pathParts.join('/');\n    const count = this.#folderCount.get(pathForCount) ?? 0;\n    this.#folderCount.set(pathForCount, count + 1);\n    return count === 0;\n  }\n\n  removeFolder(path: Platform.DevToolsPath.UrlString): boolean {\n    const pathParts = this.#removeTrailingSlash(path).split('/');\n    const pathForCount = pathParts.join('/');\n    const count = this.#folderCount.get(pathForCount) ?? 0;\n    if (!count) {\n      return false;\n    }\n    if (count > 1) {\n      this.#folderCount.set(pathForCount, count - 1);\n      return false;\n    }\n    this.#index.remove(pathParts);\n    this.#folderCount.delete(pathForCount);\n    return true;\n  }\n\n  closestParentFolder(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    const pathParts = path.split('/');\n    const commonPrefix = this.#index.longestPrefix(pathParts, /* fullWordOnly */ true);\n    return commonPrefix.join('/') as Platform.DevToolsPath.UrlString;\n  }\n\n  #removeTrailingSlash(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    if (path.endsWith('/')) {\n      return Common.ParsedURL.ParsedURL.substring(path, 0, path.length - 1);\n    }\n    return path;\n  }\n}\n\nclass FileSystemUISourceCodes {\n  private readonly sourceCodes: Map<Platform.DevToolsPath.UrlString, Workspace.UISourceCode.UISourceCode>;\n\n  constructor() {\n    this.sourceCodes = new Map();\n  }\n\n  private getPlatformCanonicalFileUrl(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return Host.Platform.isWin() ? Common.ParsedURL.ParsedURL.toLowerCase(path) : path;\n  }\n\n  add(sourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const fileUrl = this.getPlatformCanonicalFileUrl(sourceCode.url());\n    this.sourceCodes.set(fileUrl, sourceCode);\n  }\n\n  get(fileUrl: Platform.DevToolsPath.UrlString): Workspace.UISourceCode.UISourceCode|undefined {\n    fileUrl = this.getPlatformCanonicalFileUrl(fileUrl);\n    return this.sourceCodes.get(fileUrl);\n  }\n\n  delete(fileUrl: Platform.DevToolsPath.UrlString): void {\n    fileUrl = this.getPlatformCanonicalFileUrl(fileUrl);\n    this.sourceCodes.delete(fileUrl);\n  }\n}\n\nexport class AutomappingStatus {\n  network: Workspace.UISourceCode.UISourceCode;\n  fileSystem: Workspace.UISourceCode.UISourceCode;\n  exactMatch: boolean;\n  constructor(\n      network: Workspace.UISourceCode.UISourceCode, fileSystem: Workspace.UISourceCode.UISourceCode,\n      exactMatch: boolean) {\n    this.network = network;\n    this.fileSystem = fileSystem;\n    this.exactMatch = exactMatch;\n  }\n}\n"],
  "mappings": "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",
  "names": ["reversePathParts"]
}
