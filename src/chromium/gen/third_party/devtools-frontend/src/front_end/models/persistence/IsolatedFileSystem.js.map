{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/persistence/IsolatedFileSystem.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\nimport {Events, type IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\nimport {PlatformFileSystem} from './PlatformFileSystem.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Isolated File System of the Workspace settings in Settings\n   *@example {folder does not exist} PH1\n   */\n  fileSystemErrorS: 'File system error: {PH1}',\n  /**\n   *@description Error message when reading a remote blob\n   */\n  blobCouldNotBeLoaded: 'Blob could not be loaded.',\n  /**\n   *@description Error message when reading a file.\n   *@example {c:\\dir\\file.js} PH1\n   *@example {Underlying error} PH2\n   */\n  cantReadFileSS: 'Can\\'t read file: {PH1}: {PH2}',\n  /**\n   *@description Text to show something is linked to another\n   *@example {example.url} PH1\n   */\n  linkedToS: 'Linked to {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/IsolatedFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class IsolatedFileSystem extends PlatformFileSystem {\n  private readonly manager: IsolatedFileSystemManager;\n  private readonly embedderPathInternal: Platform.DevToolsPath.RawPathString;\n  private readonly domFileSystem: FileSystem;\n  private readonly excludedFoldersSetting:\n      Common.Settings.Setting<{[path: Platform.DevToolsPath.UrlString]: Platform.DevToolsPath.EncodedPathString[]}>;\n  private excludedFoldersInternal: Set<Platform.DevToolsPath.EncodedPathString>;\n  private readonly excludedEmbedderFolders: Platform.DevToolsPath.RawPathString[] = [];\n  private readonly initialFilePathsInternal = new Set<Platform.DevToolsPath.EncodedPathString>();\n  private readonly initialGitFoldersInternal = new Set<Platform.DevToolsPath.EncodedPathString>();\n  private readonly fileLocks = new Map<Platform.DevToolsPath.EncodedPathString, Promise<unknown>>();\n\n  constructor(\n      manager: IsolatedFileSystemManager, path: Platform.DevToolsPath.UrlString,\n      embedderPath: Platform.DevToolsPath.RawPathString, domFileSystem: FileSystem, type: string) {\n    super(path, type);\n    this.manager = manager;\n    this.embedderPathInternal = embedderPath;\n    this.domFileSystem = domFileSystem;\n    this.excludedFoldersSetting =\n        Common.Settings.Settings.instance().createLocalSetting('workspace-excluded-folders', {});\n    this.excludedFoldersInternal = new Set(this.excludedFoldersSetting.get()[path] || []);\n  }\n\n  static async create(\n      manager: IsolatedFileSystemManager, path: Platform.DevToolsPath.UrlString,\n      embedderPath: Platform.DevToolsPath.RawPathString, type: string, name: string,\n      rootURL: string): Promise<IsolatedFileSystem|null> {\n    const domFileSystem = Host.InspectorFrontendHost.InspectorFrontendHostInstance.isolatedFileSystem(name, rootURL);\n    if (!domFileSystem) {\n      return null;\n    }\n\n    const fileSystem = new IsolatedFileSystem(manager, path, embedderPath, domFileSystem, type);\n    return fileSystem.initializeFilePaths().then(() => fileSystem).catch(error => {\n      console.error(error);\n      return null;\n    });\n  }\n\n  static errorMessage(error: DOMError): string {\n    return i18nString(UIStrings.fileSystemErrorS, {PH1: error.message});\n  }\n\n  private serializedFileOperation<T>(path: Platform.DevToolsPath.EncodedPathString, operation: () => Promise<T>):\n      Promise<T> {\n    const promise = Promise.resolve(this.fileLocks.get(path)).then(() => operation.call(null));\n    this.fileLocks.set(path, promise);\n    return promise;\n  }\n\n  override getMetadata(path: Platform.DevToolsPath.EncodedPathString): Promise<Metadata|null> {\n    const {promise, resolve} = Promise.withResolvers<Metadata|null>();\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded, errorHandler);\n    return promise;\n\n    function fileEntryLoaded(entry: FileEntry): void {\n      entry.getMetadata(resolve, errorHandler);\n    }\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when getting file metadata \\'' + path);\n      resolve(null);\n    }\n  }\n\n  override initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    return [...this.initialFilePathsInternal];\n  }\n\n  override initialGitFolders(): Platform.DevToolsPath.EncodedPathString[] {\n    return [...this.initialGitFoldersInternal];\n  }\n\n  override embedderPath(): Platform.DevToolsPath.RawPathString {\n    return this.embedderPathInternal;\n  }\n\n  private initializeFilePaths(): Promise<void> {\n    return new Promise(fulfill => {\n      let pendingRequests = 1;\n      const boundInnerCallback = innerCallback.bind(this);\n      this.requestEntries(Platform.DevToolsPath.EmptyRawPathString, boundInnerCallback);\n\n      function innerCallback(this: IsolatedFileSystem, entries: FileEntry[]): void {\n        for (let i = 0; i < entries.length; ++i) {\n          const entry = entries[i];\n          if (!entry.isDirectory) {\n            if (this.isFileExcluded(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                    entry.fullPath as Platform.DevToolsPath.RawPathString))) {\n              continue;\n            }\n            this.initialFilePathsInternal.add(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                Common.ParsedURL.ParsedURL.substr(entry.fullPath as Platform.DevToolsPath.RawPathString, 1)));\n          } else {\n            if (entry.fullPath.endsWith('/.git')) {\n              const lastSlash = entry.fullPath.lastIndexOf('/');\n              const parentFolder = Common.ParsedURL.ParsedURL.substr(\n                  entry.fullPath as Platform.DevToolsPath.RawPathString, 1, lastSlash);\n              this.initialGitFoldersInternal.add(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(parentFolder));\n            }\n            if (this.isFileExcluded(Common.ParsedURL.ParsedURL.concatenate(\n                    Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                        entry.fullPath as Platform.DevToolsPath.RawPathString),\n                    '/'))) {\n              const url = Common.ParsedURL.ParsedURL.concatenate(\n                  this.path(),\n                  Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                      entry.fullPath as Platform.DevToolsPath.RawPathString));\n              this.excludedEmbedderFolders.push(\n                  Common.ParsedURL.ParsedURL.urlToRawPathString(url, Host.Platform.isWin()));\n              continue;\n            }\n            ++pendingRequests;\n            this.requestEntries(entry.fullPath as Platform.DevToolsPath.RawPathString, boundInnerCallback);\n          }\n        }\n        if ((--pendingRequests === 0)) {\n          fulfill();\n        }\n      }\n    });\n  }\n\n  private async createFoldersIfNotExist(folderPath: Platform.DevToolsPath.RawPathString): Promise<DirectoryEntry|null> {\n    // Fast-path. If parent directory already exists we return it immidiatly.\n    let dirEntry = await new Promise<DirectoryEntry|null>(\n        resolve => this.domFileSystem.root.getDirectory(folderPath, undefined, resolve, () => resolve(null)));\n    if (dirEntry) {\n      return dirEntry;\n    }\n    const paths = folderPath.split('/');\n    let activePath = '';\n    for (const path of paths) {\n      activePath = activePath + '/' + path;\n      dirEntry = await this.innerCreateFolderIfNeeded(activePath);\n      if (!dirEntry) {\n        return null;\n      }\n    }\n    return dirEntry;\n  }\n\n  private innerCreateFolderIfNeeded(path: string): Promise<DirectoryEntry|null> {\n    return new Promise(resolve => {\n      this.domFileSystem.root.getDirectory(path, {create: true}, dirEntry => resolve(dirEntry), error => {\n        const errorMessage = IsolatedFileSystem.errorMessage(error);\n        console.error(errorMessage + ' trying to create directory \\'' + path + '\\'');\n        resolve(null);\n      });\n    });\n  }\n\n  override async createFile(\n      path: Platform.DevToolsPath.EncodedPathString,\n      name: Platform.DevToolsPath.RawPathString|null): Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    const dirEntry = await this.createFoldersIfNotExist(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path));\n    if (!dirEntry) {\n      return null;\n    }\n    const fileEntry =\n        await this.serializedFileOperation(\n            path, createFileCandidate.bind(this, name || 'NewFile' as Platform.DevToolsPath.RawPathString)) as\n            FileEntry |\n        null;\n    if (!fileEntry) {\n      return null;\n    }\n    return Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n        Common.ParsedURL.ParsedURL.substr(fileEntry.fullPath as Platform.DevToolsPath.RawPathString, 1));\n\n    function createFileCandidate(\n        this: IsolatedFileSystem, name: Platform.DevToolsPath.RawPathString,\n        newFileIndex?: number): Promise<FileEntry|null> {\n      return new Promise(resolve => {\n        const nameCandidate = Common.ParsedURL.ParsedURL.concatenate(name, (newFileIndex || '').toString());\n        (dirEntry as DirectoryEntry).getFile(nameCandidate, {create: true, exclusive: true}, resolve, error => {\n          if (error.name === 'InvalidModificationError') {\n            resolve(createFileCandidate.call(this, name, (newFileIndex ? newFileIndex + 1 : 1)));\n            return;\n          }\n          const errorMessage = IsolatedFileSystem.errorMessage(error);\n          console.error(\n              errorMessage + ' when testing if file exists \\'' + (this.path() + '/' + path + '/' + nameCandidate) +\n              '\\'');\n          resolve(null);\n        });\n      });\n    }\n  }\n\n  override deleteFile(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    const {promise, resolve} = Promise.withResolvers<boolean>();\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded.bind(this),\n        errorHandler.bind(this));\n    return promise;\n\n    function fileEntryLoaded(this: IsolatedFileSystem, fileEntry: FileEntry): void {\n      fileEntry.remove(fileEntryRemoved, errorHandler.bind(this));\n    }\n\n    function fileEntryRemoved(): void {\n      resolve(true);\n    }\n\n    /**\n     * TODO(jsbell): Update externs replacing DOMError with DOMException. https://crbug.com/496901\n     */\n    function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when deleting file \\'' + (this.path() + '/' + path) + '\\'');\n      resolve(false);\n    }\n  }\n\n  override deleteDirectoryRecursively(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    const {promise, resolve} = Promise.withResolvers<boolean>();\n    this.domFileSystem.root.getDirectory(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, dirEntryLoaded.bind(this),\n        errorHandler.bind(this));\n    return promise;\n\n    function dirEntryLoaded(this: IsolatedFileSystem, dirEntry: DirectoryEntry): void {\n      dirEntry.removeRecursively(dirEntryRemoved, errorHandler.bind(this));\n    }\n\n    function dirEntryRemoved(): void {\n      resolve(true);\n    }\n\n    /**\n     * TODO(jsbell): Update externs replacing DOMError with DOMException. https://crbug.com/496901\n     */\n    function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when deleting directory \\'' + (this.path() + '/' + path) + '\\'');\n      resolve(false);\n    }\n  }\n\n  override requestFileBlob(path: Platform.DevToolsPath.EncodedPathString): Promise<Blob|null> {\n    return new Promise(resolve => {\n      this.domFileSystem.root.getFile(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, entry => {\n        entry.file(resolve, errorHandler.bind(this));\n      }, errorHandler.bind(this));\n\n      function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n        if (error.name === 'NotFoundError') {\n          resolve(null);\n          return;\n        }\n\n        const errorMessage = IsolatedFileSystem.errorMessage(error);\n        console.error(errorMessage + ' when getting content for file \\'' + (this.path() + '/' + path) + '\\'');\n        resolve(null);\n      }\n    });\n  }\n\n  override requestFileContent(path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    return this.serializedFileOperation(path, () => this.innerRequestFileContent(path));\n  }\n\n  private async innerRequestFileContent(path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    const blob = await this.requestFileBlob(path);\n    if (!blob) {\n      return {error: i18nString(UIStrings.blobCouldNotBeLoaded)};\n    }\n\n    const mimeType = mimeTypeForBlob(path, blob);\n    try {\n      if (Platform.MimeType.isTextType(mimeType)) {\n        return new TextUtils.ContentData.ContentData(await blob.text(), /* isBase64 */ false, mimeType);\n      }\n      return new TextUtils.ContentData.ContentData(await Common.Base64.encode(blob), /* isBase64 */ true, mimeType);\n    } catch (e) {\n      return {error: i18nString(UIStrings.cantReadFileSS, {PH1: path, PH2: e.message})};\n    }\n  }\n\n  override async setFileContent(path: Platform.DevToolsPath.EncodedPathString, content: string, isBase64: boolean):\n      Promise<void> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.FileSavedInWorkspace);\n    let resolve: (result: ProgressEvent<EventTarget>|undefined) => void;\n    const innerSetFileContent = (): Promise<ProgressEvent<EventTarget>|undefined> => {\n      const promise = new Promise<ProgressEvent<EventTarget>|undefined>(x => {\n        resolve = x;\n      });\n      this.domFileSystem.root.getFile(\n          Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), {create: true}, fileEntryLoaded.bind(this),\n          errorHandler.bind(this));\n      return promise;\n    };\n\n    void this.serializedFileOperation(path, innerSetFileContent);\n\n    function fileEntryLoaded(this: IsolatedFileSystem, entry: FileEntry): void {\n      entry.createWriter(fileWriterCreated.bind(this), errorHandler.bind(this));\n    }\n\n    async function fileWriterCreated(this: IsolatedFileSystem, fileWriter: FileWriter): Promise<void> {\n      fileWriter.onerror = errorHandler.bind(this);\n      fileWriter.onwriteend = fileWritten;\n      let blob: Blob;\n      if (isBase64) {\n        blob = await (await fetch(`data:application/octet-stream;base64,${content}`)).blob();\n      } else {\n        blob = new Blob([content], {type: 'text/plain'});\n      }\n      fileWriter.write(blob);\n\n      function fileWritten(): void {\n        fileWriter.onwriteend = resolve;\n        fileWriter.truncate(blob.size);\n      }\n    }\n\n    function errorHandler(this: IsolatedFileSystem, error: DOMError|ProgressEvent<EventTarget>): void {\n      // @ts-ignore TODO(crbug.com/1172300) Properly type this after jsdoc to ts migration\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when setting content for file \\'' + (this.path() + '/' + path) + '\\'');\n      resolve(undefined);\n    }\n  }\n\n  override renameFile(\n      path: Platform.DevToolsPath.EncodedPathString, newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    newName = newName ? Common.ParsedURL.ParsedURL.trim(newName) : newName;\n    if (!newName || newName.indexOf('/') !== -1) {\n      callback(false);\n      return;\n    }\n    let fileEntry: FileEntry;\n    let dirEntry: DirectoryEntry;\n\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded.bind(this),\n        errorHandler.bind(this));\n\n    function fileEntryLoaded(this: IsolatedFileSystem, entry: FileEntry): void {\n      if (entry.name === newName) {\n        callback(false);\n        return;\n      }\n\n      fileEntry = entry;\n      fileEntry.getParent(dirEntryLoaded.bind(this), errorHandler.bind(this));\n    }\n\n    function dirEntryLoaded(this: IsolatedFileSystem, entry: DirectoryEntry): void {\n      dirEntry = entry;\n      dirEntry.getFile(newName, undefined, newFileEntryLoaded, newFileEntryLoadErrorHandler.bind(this));\n    }\n\n    function newFileEntryLoaded(_entry: FileEntry): void {\n      callback(false);\n    }\n\n    function newFileEntryLoadErrorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      if (error.name !== 'NotFoundError') {\n        callback(false);\n        return;\n      }\n      fileEntry.moveTo(dirEntry, newName, fileRenamed, errorHandler.bind(this));\n    }\n\n    function fileRenamed(entry: Entry): void {\n      callback(true, entry.name);\n    }\n\n    function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when renaming file \\'' + (this.path() + '/' + path) + '\\' to \\'' + newName + '\\'');\n      callback(false);\n    }\n  }\n\n  private readDirectory(dirEntry: DirectoryEntry, callback: (arg0: Array<FileEntry>) => void): void {\n    const dirReader = dirEntry.createReader();\n    let entries: FileEntry[] = [];\n\n    function innerCallback(results: Entry[]): void {\n      if (!results.length) {\n        callback(entries.sort());\n      } else {\n        entries = entries.concat(toArray(results));\n        dirReader.readEntries(innerCallback, errorHandler);\n      }\n    }\n\n    function toArray(list: Entry[]): FileEntry[] {\n      return Array.prototype.slice.call(list || [], 0);\n    }\n\n    dirReader.readEntries(innerCallback, errorHandler);\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when reading directory \\'' + dirEntry.fullPath + '\\'');\n      callback([]);\n    }\n  }\n\n  private requestEntries(path: Platform.DevToolsPath.RawPathString, callback: (arg0: Array<FileEntry>) => void): void {\n    this.domFileSystem.root.getDirectory(path, undefined, innerCallback.bind(this), errorHandler);\n\n    function innerCallback(this: IsolatedFileSystem, dirEntry: DirectoryEntry): void {\n      this.readDirectory(dirEntry, callback);\n    }\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when requesting entry \\'' + path + '\\'');\n      callback([]);\n    }\n  }\n\n  private saveExcludedFolders(): void {\n    const settingValue = this.excludedFoldersSetting.get();\n    settingValue[this.path()] = [...this.excludedFoldersInternal];\n    this.excludedFoldersSetting.set(settingValue);\n  }\n\n  override addExcludedFolder(path: Platform.DevToolsPath.EncodedPathString): void {\n    this.excludedFoldersInternal.add(path);\n    this.saveExcludedFolders();\n    this.manager.dispatchEventToListeners(Events.ExcludedFolderAdded, path);\n  }\n\n  override removeExcludedFolder(path: Platform.DevToolsPath.EncodedPathString): void {\n    this.excludedFoldersInternal.delete(path);\n    this.saveExcludedFolders();\n    this.manager.dispatchEventToListeners(Events.ExcludedFolderRemoved, path);\n  }\n\n  override fileSystemRemoved(): void {\n    const settingValue = this.excludedFoldersSetting.get();\n    delete settingValue[this.path()];\n    this.excludedFoldersSetting.set(settingValue);\n  }\n\n  override isFileExcluded(folderPath: Platform.DevToolsPath.EncodedPathString): boolean {\n    if (this.excludedFoldersInternal.has(folderPath)) {\n      return true;\n    }\n    const regex = (this.manager.workspaceFolderExcludePatternSetting()).asRegExp();\n    return Boolean(regex && regex.test(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(folderPath)));\n  }\n\n  override excludedFolders(): Set<Platform.DevToolsPath.EncodedPathString> {\n    return this.excludedFoldersInternal;\n  }\n\n  override searchInPath(query: string, progress: Common.Progress.Progress): Promise<string[]> {\n    return new Promise(resolve => {\n      const requestId = this.manager.registerCallback(innerCallback);\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.searchInPath(\n          requestId, this.embedderPathInternal, query);\n\n      function innerCallback(files: Platform.DevToolsPath.RawPathString[]): void {\n        resolve(files.map(path => Common.ParsedURL.ParsedURL.rawPathToUrlString(path)));\n        progress.incrementWorked(1);\n      }\n    });\n  }\n\n  override indexContent(progress: Common.Progress.Progress): void {\n    progress.setTotalWork(1);\n    const requestId = this.manager.registerProgress(progress);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.indexPath(\n        requestId, this.embedderPathInternal, JSON.stringify(this.excludedEmbedderFolders));\n  }\n\n  override mimeFromPath(path: Platform.DevToolsPath.UrlString): string {\n    return Common.ResourceType.ResourceType.mimeFromURL(path) || 'text/plain';\n  }\n\n  override canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return Boolean(path) && this.type() !== 'overrides';\n  }\n\n  // path not typed as Branded Types as here we are interested in extention only\n  override contentType(path: string): Common.ResourceType.ResourceType {\n    const extension = Common.ParsedURL.ParsedURL.extractExtension(path);\n    if (STYLE_SHEET_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Stylesheet;\n    }\n    if (DOCUMENT_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Document;\n    }\n    if (IMAGE_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Image;\n    }\n    if (SCRIPT_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Script;\n    }\n    return BinaryExtensions.has(extension) ? Common.ResourceType.resourceTypes.Other :\n                                             Common.ResourceType.resourceTypes.Document;\n  }\n\n  override tooltipForURL(url: Platform.DevToolsPath.UrlString): string {\n    const path = Platform.StringUtilities.trimMiddle(\n        Common.ParsedURL.ParsedURL.urlToRawPathString(url, Host.Platform.isWin()), 150);\n    return i18nString(UIStrings.linkedToS, {PH1: path});\n  }\n\n  override supportsAutomapping(): boolean {\n    return this.type() !== 'overrides';\n  }\n}\n\n/**\n * @returns Tries to determine the mime type for this Blob:\n *   1) If blob.type is non-empty, we return that.\n *   2) If we know it from the extension, use that.\n *   3) Check the list of known binary extensions and use application/octet-stream.\n *   4) Use text/plain\n */\nfunction mimeTypeForBlob(path: Platform.DevToolsPath.EncodedPathString, blob: Blob): string {\n  if (blob.type) {\n    return blob.type;\n  }\n\n  const extension = Common.ParsedURL.ParsedURL.extractExtension(path);\n  const maybeMime = Common.ResourceType.ResourceType.mimeFromExtension(extension);\n  if (maybeMime) {\n    return maybeMime;\n  }\n\n  return BinaryExtensions.has(extension) ? 'application/octet-stream' : 'text/plain';\n}\n\nconst STYLE_SHEET_EXTENSIONS = new Set<string>(['css', 'scss', 'sass', 'less']);\nconst DOCUMENT_EXTENSIONS = new Set<string>(['htm', 'html', 'asp', 'aspx', 'phtml', 'jsp']);\n\nconst SCRIPT_EXTENSIONS = new Set<string>([\n  'asp', 'aspx', 'c', 'cc', 'cljs', 'coffee', 'cpp', 'cs', 'dart', 'java', 'js',\n  'jsp', 'jsx',  'h', 'm',  'mjs',  'mm',     'py',  'sh', 'ts',   'tsx',  'ls',\n]);\n\nconst IMAGE_EXTENSIONS = new Set<string>(['jpeg', 'jpg', 'svg', 'gif', 'webp', 'png', 'ico', 'tiff', 'tif', 'bmp']);\n\nexport const BinaryExtensions = new Set<string>([\n  // Executable extensions, roughly taken from https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats\n  'cmd',\n  'com',\n  'exe',\n  // Archive extensions, roughly taken from https://en.wikipedia.org/wiki/List_of_archive_formats\n  'a',\n  'ar',\n  'iso',\n  'tar',\n  'bz2',\n  'gz',\n  'lz',\n  'lzma',\n  'z',\n  '7z',\n  'apk',\n  'arc',\n  'cab',\n  'dmg',\n  'jar',\n  'pak',\n  'rar',\n  'zip',\n  // Audio file extensions, roughly taken from https://en.wikipedia.org/wiki/Audio_file_format#List_of_formats\n  '3gp',\n  'aac',\n  'aiff',\n  'flac',\n  'm4a',\n  'mmf',\n  'mp3',\n  'ogg',\n  'oga',\n  'raw',\n  'sln',\n  'wav',\n  'wma',\n  'webm',\n  // Video file extensions, roughly taken from https://en.wikipedia.org/wiki/Video_file_format\n  'mkv',\n  'flv',\n  'vob',\n  'ogv',\n  'gifv',\n  'avi',\n  'mov',\n  'qt',\n  'mp4',\n  'm4p',\n  'm4v',\n  'mpg',\n  'mpeg',\n  // Image file extensions\n  'jpeg',\n  'jpg',\n  'gif',\n  'webp',\n  'png',\n  'ico',\n  'tiff',\n  'tif',\n  'bmp',\n]);\n"],
  "mappings": "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
  "names": ["name"]
}
