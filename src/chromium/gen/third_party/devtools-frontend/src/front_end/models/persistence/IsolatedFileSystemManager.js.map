{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/persistence/IsolatedFileSystemManager.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\n\nimport type {FilesChangedData} from './FileSystemWorkspaceBinding.js';\nimport {IsolatedFileSystem} from './IsolatedFileSystem.js';\nimport type {PlatformFileSystem} from './PlatformFileSystem.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Isolated File System Manager of the Workspace settings in Settings\n   *@example {folder does not exist} PH1\n   */\n  unableToAddFilesystemS: 'Unable to add filesystem: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/IsolatedFileSystemManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet isolatedFileSystemManagerInstance: IsolatedFileSystemManager|null;\n\nexport class IsolatedFileSystemManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly fileSystemsInternal: Map<Platform.DevToolsPath.UrlString, PlatformFileSystem>;\n  private readonly callbacks: Map<number, (arg0: Array<Platform.DevToolsPath.RawPathString>) => void>;\n  private readonly progresses: Map<number, Common.Progress.Progress>;\n  private readonly workspaceFolderExcludePatternSettingInternal: Common.Settings.RegExpSetting;\n  private fileSystemRequestResolve: ((arg0: IsolatedFileSystem|null) => void)|null;\n  private readonly fileSystemsLoadedPromise: Promise<IsolatedFileSystem[]>;\n  private constructor() {\n    super();\n\n    this.fileSystemsInternal = new Map();\n    this.callbacks = new Map();\n    this.progresses = new Map();\n\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemRemoved, this.onFileSystemRemoved, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemAdded, event => {\n          this.onFileSystemAdded(event);\n        }, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemFilesChangedAddedRemoved, this.onFileSystemFilesChanged, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingTotalWorkCalculated, this.onIndexingTotalWorkCalculated, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingWorked, this.onIndexingWorked, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingDone, this.onIndexingDone, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.SearchCompleted, this.onSearchCompleted, this);\n\n    // Initialize exclude pattern settings\n    const defaultCommonExcludedFolders = [\n      '/node_modules/',\n      '/bower_components/',\n      '/\\\\.devtools',\n      '/\\\\.git/',\n      '/\\\\.sass-cache/',\n      '/\\\\.hg/',\n      '/\\\\.idea/',\n      '/\\\\.svn/',\n      '/\\\\.cache/',\n      '/\\\\.project/',\n    ];\n    const defaultWinExcludedFolders = ['/Thumbs.db$', '/ehthumbs.db$', '/Desktop.ini$', '/\\\\$RECYCLE.BIN/'];\n    const defaultMacExcludedFolders = [\n      '/\\\\.DS_Store$',\n      '/\\\\.Trashes$',\n      '/\\\\.Spotlight-V100$',\n      '/\\\\.AppleDouble$',\n      '/\\\\.LSOverride$',\n      '/Icon$',\n      '/\\\\._.*$',\n    ];\n    const defaultLinuxExcludedFolders = ['/.*~$'];\n    let defaultExcludedFolders: string[] = defaultCommonExcludedFolders;\n    if (Host.Platform.isWin()) {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultWinExcludedFolders);\n    } else if (Host.Platform.isMac()) {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultMacExcludedFolders);\n    } else {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultLinuxExcludedFolders);\n    }\n    const defaultExcludedFoldersPattern = defaultExcludedFolders.join('|');\n    this.workspaceFolderExcludePatternSettingInternal = Common.Settings.Settings.instance().createRegExpSetting(\n        'workspace-folder-exclude-pattern', defaultExcludedFoldersPattern, Host.Platform.isWin() ? 'i' : '');\n\n    this.fileSystemRequestResolve = null;\n    this.fileSystemsLoadedPromise = this.requestFileSystems();\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): IsolatedFileSystemManager {\n    const {forceNew} = opts;\n    if (!isolatedFileSystemManagerInstance || forceNew) {\n      isolatedFileSystemManagerInstance = new IsolatedFileSystemManager();\n    }\n\n    return isolatedFileSystemManagerInstance;\n  }\n\n  static removeInstance(): void {\n    isolatedFileSystemManagerInstance = null;\n  }\n\n  private requestFileSystems(): Promise<IsolatedFileSystem[]> {\n    let fulfill: (arg0: IsolatedFileSystem[]) => void;\n    const promise = new Promise<IsolatedFileSystem[]>(f => {\n      fulfill = f;\n    });\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemsLoaded, onFileSystemsLoaded, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.requestFileSystems();\n    return promise;\n\n    function onFileSystemsLoaded(\n        this: IsolatedFileSystemManager,\n        event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.DevToolsFileSystem[]>): void {\n      const fileSystems = event.data;\n      const promises = [];\n      for (let i = 0; i < fileSystems.length; ++i) {\n        promises.push(this.innerAddFileSystem(fileSystems[i], false));\n      }\n      void Promise.all(promises).then(onFileSystemsAdded);\n    }\n\n    function onFileSystemsAdded(fileSystems: (IsolatedFileSystem|null)[]): void {\n      fulfill(fileSystems.filter(fs => Boolean(fs)) as IsolatedFileSystem[]);\n    }\n  }\n\n  addFileSystem(type?: string): Promise<IsolatedFileSystem|null> {\n    Host.userMetrics.actionTaken(\n        type === 'overrides' ? Host.UserMetrics.Action.OverrideTabAddFolder :\n                               Host.UserMetrics.Action.WorkspaceTabAddFolder);\n    return new Promise(resolve => {\n      this.fileSystemRequestResolve = resolve;\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.addFileSystem(type || '');\n    });\n  }\n\n  removeFileSystem(fileSystem: PlatformFileSystem): void {\n    Host.userMetrics.actionTaken(\n        fileSystem.type() === 'overrides' ? Host.UserMetrics.Action.OverrideTabRemoveFolder :\n                                            Host.UserMetrics.Action.WorkspaceTabRemoveFolder);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.removeFileSystem(fileSystem.embedderPath());\n  }\n\n  waitForFileSystems(): Promise<IsolatedFileSystem[]> {\n    return this.fileSystemsLoadedPromise;\n  }\n\n  private innerAddFileSystem(fileSystem: Host.InspectorFrontendHostAPI.DevToolsFileSystem, dispatchEvent: boolean):\n      Promise<IsolatedFileSystem|null> {\n    const embedderPath = fileSystem.fileSystemPath;\n    const fileSystemURL = Common.ParsedURL.ParsedURL.rawPathToUrlString(fileSystem.fileSystemPath);\n    const promise = IsolatedFileSystem.create(\n        this, fileSystemURL, embedderPath, fileSystem.type, fileSystem.fileSystemName, fileSystem.rootURL);\n    return promise.then(storeFileSystem.bind(this));\n\n    function storeFileSystem(this: IsolatedFileSystemManager, fileSystem: IsolatedFileSystem|null): IsolatedFileSystem|\n        null {\n      if (!fileSystem) {\n        return null;\n      }\n      this.fileSystemsInternal.set(fileSystemURL, fileSystem);\n      if (dispatchEvent) {\n        this.dispatchEventToListeners(Events.FileSystemAdded, fileSystem);\n      }\n      return fileSystem;\n    }\n  }\n\n  addPlatformFileSystem(fileSystemURL: Platform.DevToolsPath.UrlString, fileSystem: PlatformFileSystem): void {\n    this.fileSystemsInternal.set(fileSystemURL, fileSystem);\n    this.dispatchEventToListeners(Events.FileSystemAdded, fileSystem);\n  }\n\n  private onFileSystemAdded(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.FileSystemAddedEvent>): void {\n    const {errorMessage, fileSystem} = event.data;\n    if (errorMessage) {\n      if (errorMessage !== '<selection cancelled>') {\n        Common.Console.Console.instance().error(i18nString(UIStrings.unableToAddFilesystemS, {PH1: errorMessage}));\n      }\n      if (!this.fileSystemRequestResolve) {\n        return;\n      }\n      this.fileSystemRequestResolve.call(null, null);\n      this.fileSystemRequestResolve = null;\n    } else if (fileSystem) {\n      void this.innerAddFileSystem(fileSystem, true).then(fileSystem => {\n        if (this.fileSystemRequestResolve) {\n          this.fileSystemRequestResolve.call(null, fileSystem);\n          this.fileSystemRequestResolve = null;\n        }\n      });\n    }\n  }\n\n  private onFileSystemRemoved(event: Common.EventTarget.EventTargetEvent<Platform.DevToolsPath.RawPathString>): void {\n    const embedderPath = event.data;\n    const fileSystemPath = Common.ParsedURL.ParsedURL.rawPathToUrlString(embedderPath);\n    const isolatedFileSystem = this.fileSystemsInternal.get(fileSystemPath);\n    if (!isolatedFileSystem) {\n      return;\n    }\n    this.fileSystemsInternal.delete(fileSystemPath);\n    isolatedFileSystem.fileSystemRemoved();\n    this.dispatchEventToListeners(Events.FileSystemRemoved, isolatedFileSystem);\n  }\n\n  private onFileSystemFilesChanged(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.FilesChangedEvent>): void {\n    const urlPaths = {\n      changed: groupFilePathsIntoFileSystemPaths.call(this, event.data.changed),\n      added: groupFilePathsIntoFileSystemPaths.call(this, event.data.added),\n      removed: groupFilePathsIntoFileSystemPaths.call(this, event.data.removed),\n    };\n\n    this.dispatchEventToListeners(Events.FileSystemFilesChanged, urlPaths);\n\n    function groupFilePathsIntoFileSystemPaths(\n        this: IsolatedFileSystemManager, embedderPaths: Platform.DevToolsPath.RawPathString[]):\n        Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString> {\n      const paths =\n          new Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>();\n      for (const embedderPath of embedderPaths) {\n        const filePath = Common.ParsedURL.ParsedURL.rawPathToUrlString(embedderPath);\n        for (const fileSystemPath of this.fileSystemsInternal.keys()) {\n          const fileSystem = this.fileSystemsInternal.get(fileSystemPath);\n          if (fileSystem &&\n              fileSystem.isFileExcluded(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(embedderPath))) {\n            continue;\n          }\n          const pathPrefix = fileSystemPath.endsWith('/') ? fileSystemPath : fileSystemPath + '/';\n          if (!filePath.startsWith(pathPrefix)) {\n            continue;\n          }\n          paths.set(fileSystemPath, filePath);\n        }\n      }\n      return paths;\n    }\n  }\n\n  fileSystems(): PlatformFileSystem[] {\n    return [...this.fileSystemsInternal.values()];\n  }\n\n  fileSystem(fileSystemPath: Platform.DevToolsPath.UrlString): PlatformFileSystem|null {\n    return this.fileSystemsInternal.get(fileSystemPath) || null;\n  }\n\n  workspaceFolderExcludePatternSetting(): Common.Settings.RegExpSetting {\n    return this.workspaceFolderExcludePatternSettingInternal;\n  }\n\n  registerCallback(callback: (arg0: Array<Platform.DevToolsPath.RawPathString>) => void): number {\n    const requestId = ++lastRequestId;\n    this.callbacks.set(requestId, callback);\n    return requestId;\n  }\n\n  registerProgress(progress: Common.Progress.Progress): number {\n    const requestId = ++lastRequestId;\n    this.progresses.set(requestId, progress);\n    return requestId;\n  }\n\n  private onIndexingTotalWorkCalculated(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingTotalWorkCalculatedEvent>):\n      void {\n    const {requestId, totalWork} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.setTotalWork(totalWork);\n  }\n\n  private onIndexingWorked(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingWorkedEvent>): void {\n    const {requestId, worked} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.incrementWorked(worked);\n    if (progress.isCanceled()) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.stopIndexing(requestId);\n      this.onIndexingDone(event);\n    }\n  }\n\n  private onIndexingDone(event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingEvent>):\n      void {\n    const {requestId} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.done();\n    this.progresses.delete(requestId);\n  }\n\n  private onSearchCompleted(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.SearchCompletedEvent>): void {\n    const {requestId, files} = event.data;\n    const callback = this.callbacks.get(requestId);\n    if (!callback) {\n      return;\n    }\n    callback.call(null, files);\n    this.callbacks.delete(requestId);\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  FileSystemAdded = 'FileSystemAdded',\n  FileSystemRemoved = 'FileSystemRemoved',\n  FileSystemFilesChanged = 'FileSystemFilesChanged',\n  ExcludedFolderAdded = 'ExcludedFolderAdded',\n  ExcludedFolderRemoved = 'ExcludedFolderRemoved',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport type EventTypes = {\n  [Events.FileSystemAdded]: PlatformFileSystem,\n  [Events.FileSystemRemoved]: PlatformFileSystem,\n  [Events.FileSystemFilesChanged]: FilesChangedData,\n  [Events.ExcludedFolderAdded]: Platform.DevToolsPath.EncodedPathString,\n  [Events.ExcludedFolderRemoved]: Platform.DevToolsPath.EncodedPathString,\n};\n\nlet lastRequestId = 0;\n"],
  "mappings": "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",
  "names": ["fileSystem", "Events"]
}
