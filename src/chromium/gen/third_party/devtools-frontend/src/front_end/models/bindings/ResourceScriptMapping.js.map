{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/ResourceScriptMapping.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {ContentProviderBasedProject} from './ContentProviderBasedProject.js';\nimport {type DebuggerSourceMapping, DebuggerWorkspaceBinding} from './DebuggerWorkspaceBinding.js';\nimport {NetworkProject} from './NetworkProject.js';\nimport {metadataForURL} from './ResourceUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Error text displayed in the console when editing a live script fails. LiveEdit is\n   *the name of the feature for editing code that is already running.\n   *@example {warning} PH1\n   */\n  liveEditFailed: '`LiveEdit` failed: {PH1}',\n  /**\n   *@description Error text displayed in the console when compiling a live-edited script fails. LiveEdit is\n   *the name of the feature for editing code that is already running.\n   *@example {connection lost} PH1\n   */\n  liveEditCompileFailed: '`LiveEdit` compile failed: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/bindings/ResourceScriptMapping.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ResourceScriptMapping implements DebuggerSourceMapping {\n  readonly debuggerModel: SDK.DebuggerModel.DebuggerModel;\n  #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly debuggerWorkspaceBinding: DebuggerWorkspaceBinding;\n  readonly #uiSourceCodeToScriptFile: Map<Workspace.UISourceCode.UISourceCode, ResourceScriptFile>;\n  readonly #projects: Map<string, ContentProviderBasedProject>;\n  readonly #scriptToUISourceCode: Map<SDK.Script.Script, Workspace.UISourceCode.UISourceCode>;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n\n  constructor(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, workspace: Workspace.Workspace.WorkspaceImpl,\n      debuggerWorkspaceBinding: DebuggerWorkspaceBinding) {\n    this.debuggerModel = debuggerModel;\n    this.#workspace = workspace;\n    this.debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n    this.#uiSourceCodeToScriptFile = new Map();\n\n    this.#projects = new Map();\n\n    this.#scriptToUISourceCode = new Map();\n    const runtimeModel = debuggerModel.runtimeModel();\n    this.#eventListeners = [\n      this.debuggerModel.addEventListener(\n          SDK.DebuggerModel.Events.ParsedScriptSource, event => this.addScript(event.data), this),\n      this.debuggerModel.addEventListener(SDK.DebuggerModel.Events.GlobalObjectCleared, this.globalObjectCleared, this),\n      runtimeModel.addEventListener(\n          SDK.RuntimeModel.Events.ExecutionContextDestroyed, this.executionContextDestroyed, this),\n      runtimeModel.target().targetManager().addEventListener(\n          SDK.TargetManager.Events.INSPECTED_URL_CHANGED, this.inspectedURLChanged, this),\n    ];\n  }\n\n  private project(script: SDK.Script.Script): ContentProviderBasedProject {\n    const prefix = script.isContentScript() ? 'js:extensions:' : 'js::';\n    const projectId = prefix + this.debuggerModel.target().id() + ':' + script.frameId;\n    let project = this.#projects.get(projectId);\n    if (!project) {\n      const projectType = script.isContentScript() ? Workspace.Workspace.projectTypes.ContentScripts :\n                                                     Workspace.Workspace.projectTypes.Network;\n      project = new ContentProviderBasedProject(\n          this.#workspace, projectId, projectType, '' /* displayName */, false /* isServiceProject */);\n      NetworkProject.setTargetForProject(project, this.debuggerModel.target());\n      this.#projects.set(projectId, project);\n    }\n    return project;\n  }\n\n  uiSourceCodeForScript(script: SDK.Script.Script): Workspace.UISourceCode.UISourceCode|null {\n    return this.#scriptToUISourceCode.get(script) ?? null;\n  }\n\n  rawLocationToUILocation(rawLocation: SDK.DebuggerModel.Location): Workspace.UISourceCode.UILocation|null {\n    const script = rawLocation.script();\n    if (!script) {\n      return null;\n    }\n    const uiSourceCode = this.#scriptToUISourceCode.get(script);\n    if (!uiSourceCode) {\n      return null;\n    }\n    const scriptFile = this.#uiSourceCodeToScriptFile.get(uiSourceCode);\n    if (!scriptFile) {\n      return null;\n    }\n    if ((scriptFile.hasDivergedFromVM() && !scriptFile.isMergingToVM()) || scriptFile.isDivergingFromVM()) {\n      return null;\n    }\n    if (scriptFile.script !== script) {\n      return null;\n    }\n    const {lineNumber, columnNumber = 0} = rawLocation;\n    return uiSourceCode.uiLocation(lineNumber, columnNumber);\n  }\n\n  uiLocationToRawLocations(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number, columnNumber: number):\n      SDK.DebuggerModel.Location[] {\n    const scriptFile = this.#uiSourceCodeToScriptFile.get(uiSourceCode);\n    if (!scriptFile) {\n      return [];\n    }\n\n    const {script} = scriptFile;\n    if (!script) {\n      return [];\n    }\n\n    return [this.debuggerModel.createRawLocation(script, lineNumber, columnNumber)];\n  }\n\n  uiLocationRangeToRawLocationRanges(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      {startLine, startColumn, endLine, endColumn}: TextUtils.TextRange.TextRange):\n      SDK.DebuggerModel.LocationRange[]|null {\n    const scriptFile = this.#uiSourceCodeToScriptFile.get(uiSourceCode);\n    if (!scriptFile) {\n      return null;\n    }\n\n    const {script} = scriptFile;\n    if (!script) {\n      return null;\n    }\n\n    const start = this.debuggerModel.createRawLocation(script, startLine, startColumn);\n    const end = this.debuggerModel.createRawLocation(script, endLine, endColumn);\n    return [{start, end}];\n  }\n\n  private inspectedURLChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    for (let target: SDK.Target.Target|null = this.debuggerModel.target(); target !== event.data;\n         target = target.parentTarget()) {\n      if (target === null) {\n        return;\n      }\n    }\n\n    // Just remove and readd all scripts to ensure their URLs are reflected correctly.\n    for (const script of Array.from(this.#scriptToUISourceCode.keys())) {\n      this.removeScripts([script]);\n      this.addScript(script);\n    }\n  }\n\n  private addScript(script: SDK.Script.Script): void {\n    // Ignore live edit scripts here.\n    if (script.isLiveEdit() || script.isBreakpointCondition) {\n      return;\n    }\n\n    let url = script.sourceURL;\n    if (!url) {\n      return;\n    }\n\n    if (script.hasSourceURL) {\n      // Try to resolve `//# sourceURL=` annotations relative to\n      // the base URL, according to the sourcemap specification.\n      url = SDK.SourceMapManager.SourceMapManager.resolveRelativeSourceURL(script.debuggerModel.target(), url);\n    } else {\n      // Ignore inline <script>s without `//# sourceURL` annotation here.\n      if (script.isInlineScript()) {\n        return;\n      }\n\n      // Filter out embedder injected content scripts.\n      if (script.isContentScript()) {\n        const parsedURL = new Common.ParsedURL.ParsedURL(url);\n        if (!parsedURL.isValid) {\n          return;\n        }\n      }\n    }\n\n    // Remove previous UISourceCode, if any\n    const project = this.project(script);\n    const oldUISourceCode = project.uiSourceCodeForURL(url);\n    if (oldUISourceCode) {\n      const oldScriptFile = this.#uiSourceCodeToScriptFile.get(oldUISourceCode);\n      if (oldScriptFile && oldScriptFile.script) {\n        this.removeScripts([oldScriptFile.script]);\n      }\n    }\n\n    // Create UISourceCode.\n    const originalContentProvider = script.originalContentProvider();\n    const uiSourceCode = project.createUISourceCode(url, originalContentProvider.contentType());\n    NetworkProject.setInitialFrameAttribution(uiSourceCode, script.frameId);\n    const metadata = metadataForURL(this.debuggerModel.target(), script.frameId, url);\n\n    // Bind UISourceCode to scripts.\n    const scriptFile = new ResourceScriptFile(this, uiSourceCode, script);\n    this.#uiSourceCodeToScriptFile.set(uiSourceCode, scriptFile);\n    this.#scriptToUISourceCode.set(script, uiSourceCode);\n\n    const mimeType = script.isWasm() ? 'application/wasm' : 'text/javascript';\n    project.addUISourceCodeWithProvider(uiSourceCode, originalContentProvider, metadata, mimeType);\n    void this.debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  scriptFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): ResourceScriptFile|null {\n    return this.#uiSourceCodeToScriptFile.get(uiSourceCode) || null;\n  }\n\n  private removeScripts(scripts: SDK.Script.Script[]): void {\n    const uiSourceCodesByProject =\n        new Platform.MapUtilities.Multimap<ContentProviderBasedProject, Workspace.UISourceCode.UISourceCode>();\n    for (const script of scripts) {\n      const uiSourceCode = this.#scriptToUISourceCode.get(script);\n      if (!uiSourceCode) {\n        continue;\n      }\n      const scriptFile = this.#uiSourceCodeToScriptFile.get(uiSourceCode);\n      if (scriptFile) {\n        scriptFile.dispose();\n      }\n\n      this.#uiSourceCodeToScriptFile.delete(uiSourceCode);\n      this.#scriptToUISourceCode.delete(script);\n\n      uiSourceCodesByProject.set(uiSourceCode.project() as ContentProviderBasedProject, uiSourceCode);\n      void this.debuggerWorkspaceBinding.updateLocations(script);\n    }\n    for (const project of uiSourceCodesByProject.keysArray()) {\n      const uiSourceCodes = uiSourceCodesByProject.get(project);\n      // Check if all the ui source codes in the project are in |uiSourceCodes|.\n      let allInProjectRemoved = true;\n      for (const projectSourceCode of project.uiSourceCodes()) {\n        if (!uiSourceCodes.has(projectSourceCode)) {\n          allInProjectRemoved = false;\n          break;\n        }\n      }\n      // Drop the whole project if no source codes are left in it.\n      if (allInProjectRemoved) {\n        this.#projects.delete(project.id());\n        project.removeProject();\n      } else {\n        // Otherwise, announce the removal of each UI source code individually.\n        uiSourceCodes.forEach(c => project.removeUISourceCode(c.url()));\n      }\n    }\n  }\n\n  private executionContextDestroyed(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    const executionContext = event.data;\n    this.removeScripts(this.debuggerModel.scriptsForExecutionContext(executionContext));\n  }\n\n  private globalObjectCleared(): void {\n    const scripts = Array.from(this.#scriptToUISourceCode.keys());\n    this.removeScripts(scripts);\n  }\n\n  resetForTest(): void {\n    this.globalObjectCleared();\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.globalObjectCleared();\n  }\n}\n\nexport class ResourceScriptFile extends Common.ObjectWrapper.ObjectWrapper<ResourceScriptFile.EventTypes> {\n  readonly #resourceScriptMapping: ResourceScriptMapping;\n  readonly uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  readonly script: SDK.Script.Script|null;\n  #scriptSource?: string|null;\n  #isDivergingFromVMInternal?: boolean;\n  #hasDivergedFromVMInternal?: boolean;\n  #isMergingToVMInternal?: boolean;\n  #updateMutex = new Common.Mutex.Mutex();\n  constructor(\n      resourceScriptMapping: ResourceScriptMapping, uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      script: SDK.Script.Script) {\n    super();\n    this.#resourceScriptMapping = resourceScriptMapping;\n    this.uiSourceCode = uiSourceCode;\n    this.script = this.uiSourceCode.contentType().isScript() ? script : null;\n\n    this.uiSourceCode.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, this.workingCopyChanged, this);\n    this.uiSourceCode.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.workingCopyCommitted, this);\n  }\n\n  private isDiverged(): boolean {\n    if (this.uiSourceCode.isDirty()) {\n      return true;\n    }\n    if (!this.script) {\n      return false;\n    }\n    if (typeof this.#scriptSource === 'undefined' || this.#scriptSource === null) {\n      return false;\n    }\n    const workingCopy = this.uiSourceCode.workingCopy();\n    if (!workingCopy) {\n      return false;\n    }\n\n    // Match ignoring sourceURL.\n    if (!workingCopy.startsWith(this.#scriptSource.trimEnd())) {\n      return true;\n    }\n    const suffix = this.uiSourceCode.workingCopy().substr(this.#scriptSource.length);\n    return Boolean(suffix.length) && !suffix.match(SDK.Script.sourceURLRegex);\n  }\n\n  private workingCopyChanged(): void {\n    void this.update();\n  }\n\n  private workingCopyCommitted(): void {\n    if (this.uiSourceCode.project().canSetFileContent()) {\n      return;\n    }\n    if (!this.script) {\n      return;\n    }\n\n    const source = this.uiSourceCode.workingCopy();\n    void this.script.editSource(source).then(({status, exceptionDetails}) => {\n      void this.scriptSourceWasSet(source, status, exceptionDetails);\n    });\n  }\n\n  async scriptSourceWasSet(\n      source: string, status: Protocol.Debugger.SetScriptSourceResponseStatus,\n      exceptionDetails?: Protocol.Runtime.ExceptionDetails): Promise<void> {\n    if (status === Protocol.Debugger.SetScriptSourceResponseStatus.Ok) {\n      this.#scriptSource = source;\n    }\n    await this.update();\n\n    if (status === Protocol.Debugger.SetScriptSourceResponseStatus.Ok) {\n      return;\n    }\n\n    if (!exceptionDetails) {\n      // TODO(crbug.com/1334484): Instead of to the console, report these errors in an \"info bar\" at the bottom\n      //                          of the text editor, similar to e.g. source mapping errors.\n      Common.Console.Console.instance().addMessage(\n          i18nString(UIStrings.liveEditFailed, {PH1: getErrorText(status)}), Common.Console.MessageLevel.WARNING);\n      return;\n    }\n    const messageText = i18nString(UIStrings.liveEditCompileFailed, {PH1: exceptionDetails.text});\n    this.uiSourceCode.addLineMessage(\n        Workspace.UISourceCode.Message.Level.ERROR, messageText, exceptionDetails.lineNumber,\n        exceptionDetails.columnNumber);\n\n    function getErrorText(status: Protocol.Debugger.SetScriptSourceResponseStatus): string {\n      switch (status) {\n        case Protocol.Debugger.SetScriptSourceResponseStatus.BlockedByActiveFunction:\n          return 'Functions that are on the stack (currently being executed) can not be edited';\n        case Protocol.Debugger.SetScriptSourceResponseStatus.BlockedByActiveGenerator:\n          return 'Async functions/generators that are active can not be edited';\n        case Protocol.Debugger.SetScriptSourceResponseStatus.BlockedByTopLevelEsModuleChange:\n          return 'The top-level of ES modules can not be edited';\n        case Protocol.Debugger.SetScriptSourceResponseStatus.CompileError:\n        case Protocol.Debugger.SetScriptSourceResponseStatus.Ok:\n          throw new Error('Compile errors and Ok status must not be reported on the console');\n      }\n    }\n  }\n\n  private async update(): Promise<void> {\n    // Do not interleave \"divergeFromVM\" with \"mergeToVM\" calls.\n    const release = await this.#updateMutex.acquire();\n    const diverged = this.isDiverged();\n    if (diverged && !this.#hasDivergedFromVMInternal) {\n      await this.divergeFromVM();\n    } else if (!diverged && this.#hasDivergedFromVMInternal) {\n      await this.mergeToVM();\n    }\n    release();\n  }\n\n  private async divergeFromVM(): Promise<void> {\n    if (this.script) {\n      this.#isDivergingFromVMInternal = true;\n      await this.#resourceScriptMapping.debuggerWorkspaceBinding.updateLocations(this.script);\n      this.#isDivergingFromVMInternal = undefined;\n      this.#hasDivergedFromVMInternal = true;\n      this.dispatchEventToListeners(ResourceScriptFile.Events.DID_DIVERGE_FROM_VM);\n    }\n  }\n\n  private async mergeToVM(): Promise<void> {\n    if (this.script) {\n      this.#hasDivergedFromVMInternal = undefined;\n      this.#isMergingToVMInternal = true;\n      await this.#resourceScriptMapping.debuggerWorkspaceBinding.updateLocations(this.script);\n      this.#isMergingToVMInternal = undefined;\n      this.dispatchEventToListeners(ResourceScriptFile.Events.DID_MERGE_TO_VM);\n    }\n  }\n\n  hasDivergedFromVM(): boolean {\n    return Boolean(this.#hasDivergedFromVMInternal);\n  }\n\n  isDivergingFromVM(): boolean {\n    return Boolean(this.#isDivergingFromVMInternal);\n  }\n\n  isMergingToVM(): boolean {\n    return Boolean(this.#isMergingToVMInternal);\n  }\n\n  checkMapping(): void {\n    if (!this.script || typeof this.#scriptSource !== 'undefined') {\n      this.mappingCheckedForTest();\n      return;\n    }\n    void this.script.requestContentData().then(content => {\n      this.#scriptSource = TextUtils.ContentData.ContentData.textOr(content, null);\n      void this.update().then(() => this.mappingCheckedForTest());\n    });\n  }\n\n  private mappingCheckedForTest(): void {\n  }\n\n  dispose(): void {\n    this.uiSourceCode.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.workingCopyChanged, this);\n    this.uiSourceCode.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.workingCopyCommitted, this);\n  }\n\n  addSourceMapURL(sourceMapURL: Platform.DevToolsPath.UrlString): void {\n    if (!this.script) {\n      return;\n    }\n    this.script.debuggerModel.setSourceMapURL(this.script, sourceMapURL);\n  }\n\n  addDebugInfoURL(debugInfoURL: Platform.DevToolsPath.UrlString): void {\n    if (!this.script) {\n      return;\n    }\n    const {pluginManager} = DebuggerWorkspaceBinding.instance();\n    pluginManager.setDebugInfoURL(this.script, debugInfoURL);\n  }\n\n  hasSourceMapURL(): boolean {\n    return Boolean(this.script?.sourceMapURL);\n  }\n\n  async missingSymbolFiles(): Promise<SDK.DebuggerModel.MissingDebugFiles[]|null> {\n    if (!this.script) {\n      return null;\n    }\n    const {pluginManager} = this.#resourceScriptMapping.debuggerWorkspaceBinding;\n    const sources = await pluginManager.getSourcesForScript(this.script);\n    return sources && 'missingSymbolFiles' in sources ? sources.missingSymbolFiles : null;\n  }\n}\n\nexport namespace ResourceScriptFile {\n  export const enum Events {\n    DID_MERGE_TO_VM = 'DidMergeToVM',\n    DID_DIVERGE_FROM_VM = 'DidDivergeFromVM',\n  }\n\n  export type EventTypes = {\n    [Events.DID_MERGE_TO_VM]: void,\n    [Events.DID_DIVERGE_FROM_VM]: void,\n  };\n}\n"],
  "mappings": ";AA8BA,YAAY,YAAY;AACxB,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,YAAY,SAAS;AACrB,YAAY,cAAc;AAC1B,YAAY,eAAe;AAC3B,YAAY,eAAe;AAE3B,SAAQ,mCAAkC;AAC1C,SAAoC,gCAA+B;AACnE,SAAQ,sBAAqB;AAC7B,SAAQ,sBAAqB;AAE7B,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,uBAAuB;AACzB;AACA,MAAM,OAAO,KAAK,KAAK,kBAAkB,4CAA4C,SAAS;AAC9F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAE7D,aAAM,sBAAuD;AAAA,EACzD;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAET,YACI,eAAgD,WAChD,0BAAoD;AACtD,SAAK,gBAAgB;AACrB,SAAK,aAAa;AAClB,SAAK,2BAA2B;AAChC,SAAK,4BAA4B,oBAAI,IAAI;AAEzC,SAAK,YAAY,oBAAI,IAAI;AAEzB,SAAK,wBAAwB,oBAAI,IAAI;AACrC,UAAM,eAAe,cAAc,aAAa;AAChD,SAAK,kBAAkB;AAAA,MACrB,KAAK,cAAc;AAAA,QACf,IAAI,cAAc,OAAO;AAAA,QAAoB,WAAS,KAAK,UAAU,MAAM,IAAI;AAAA,QAAG;AAAA,MAAI;AAAA,MAC1F,KAAK,cAAc,iBAAiB,IAAI,cAAc,OAAO,qBAAqB,KAAK,qBAAqB,IAAI;AAAA,MAChH,aAAa;AAAA,QACT,IAAI,aAAa,OAAO;AAAA,QAA2B,KAAK;AAAA,QAA2B;AAAA,MAAI;AAAA,MAC3F,aAAa,OAAO,EAAE,cAAc,EAAE;AAAA,QAClC,IAAI,cAAc,OAAO;AAAA,QAAuB,KAAK;AAAA,QAAqB;AAAA,MAAI;AAAA,IACpF;AAAA,EACF;AAAA,EAEQ,QAAQ,QAAwD;AACtE,UAAM,SAAS,OAAO,gBAAgB,IAAI,mBAAmB;AAC7D,UAAM,YAAY,SAAS,KAAK,cAAc,OAAO,EAAE,GAAG,IAAI,MAAM,OAAO;AAC3E,QAAI,UAAU,KAAK,UAAU,IAAI,SAAS;AAC1C,QAAI,CAAC,SAAS;AACZ,YAAM,cAAc,OAAO,gBAAgB,IAAI,UAAU,UAAU,aAAa,iBACjC,UAAU,UAAU,aAAa;AAChF,gBAAU,IAAI;AAAA,QACV,KAAK;AAAA,QAAY;AAAA,QAAW;AAAA,QAAa;AAAA,QAAsB;AAAA;AAAA,MAA4B;AAC/F,qBAAe,oBAAoB,SAAS,KAAK,cAAc,OAAO,CAAC;AACvE,WAAK,UAAU,IAAI,WAAW,OAAO;AAAA,IACvC;AACA,WAAO;AAAA,EACT;AAAA,EAEA,sBAAsB,QAAqE;AACzF,WAAO,KAAK,sBAAsB,IAAI,MAAM,KAAK;AAAA,EACnD;AAAA,EAEA,wBAAwB,aAAiF;AACvG,UAAM,SAAS,YAAY,OAAO;AAClC,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,IACT;AACA,UAAM,eAAe,KAAK,sBAAsB,IAAI,MAAM;AAC1D,QAAI,CAAC,cAAc;AACjB,aAAO;AAAA,IACT;AACA,UAAM,aAAa,KAAK,0BAA0B,IAAI,YAAY;AAClE,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,IACT;AACA,QAAK,WAAW,kBAAkB,KAAK,CAAC,WAAW,cAAc,KAAM,WAAW,kBAAkB,GAAG;AACrG,aAAO;AAAA,IACT;AACA,QAAI,WAAW,WAAW,QAAQ;AAChC,aAAO;AAAA,IACT;AACA,UAAM,EAAC,YAAY,eAAe,EAAC,IAAI;AACvC,WAAO,aAAa,WAAW,YAAY,YAAY;AAAA,EACzD;AAAA,EAEA,yBAAyB,cAAmD,YAAoB,cAC/D;AAC/B,UAAM,aAAa,KAAK,0BAA0B,IAAI,YAAY;AAClE,QAAI,CAAC,YAAY;AACf,aAAO,CAAC;AAAA,IACV;AAEA,UAAM,EAAC,OAAM,IAAI;AACjB,QAAI,CAAC,QAAQ;AACX,aAAO,CAAC;AAAA,IACV;AAEA,WAAO,CAAC,KAAK,cAAc,kBAAkB,QAAQ,YAAY,YAAY,CAAC;AAAA,EAChF;AAAA,EAEA,mCACI,cACA,EAAC,WAAW,aAAa,SAAS,UAAS,GACJ;AACzC,UAAM,aAAa,KAAK,0BAA0B,IAAI,YAAY;AAClE,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,IACT;AAEA,UAAM,EAAC,OAAM,IAAI;AACjB,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,KAAK,cAAc,kBAAkB,QAAQ,WAAW,WAAW;AACjF,UAAM,MAAM,KAAK,cAAc,kBAAkB,QAAQ,SAAS,SAAS;AAC3E,WAAO,CAAC,EAAC,OAAO,IAAG,CAAC;AAAA,EACtB;AAAA,EAEQ,oBAAoB,OAAqE;AAC/F,aAAS,SAAiC,KAAK,cAAc,OAAO,GAAG,WAAW,MAAM,MACnF,SAAS,OAAO,aAAa,GAAG;AACnC,UAAI,WAAW,MAAM;AACnB;AAAA,MACF;AAAA,IACF;AAGA,eAAW,UAAU,MAAM,KAAK,KAAK,sBAAsB,KAAK,CAAC,GAAG;AAClE,WAAK,cAAc,CAAC,MAAM,CAAC;AAC3B,WAAK,UAAU,MAAM;AAAA,IACvB;AAAA,EACF;AAAA,EAEQ,UAAU,QAAiC;AAEjD,QAAI,OAAO,WAAW,KAAK,OAAO,uBAAuB;AACvD;AAAA,IACF;AAEA,QAAI,MAAM,OAAO;AACjB,QAAI,CAAC,KAAK;AACR;AAAA,IACF;AAEA,QAAI,OAAO,cAAc;AAGvB,YAAM,IAAI,iBAAiB,iBAAiB,yBAAyB,OAAO,cAAc,OAAO,GAAG,GAAG;AAAA,IACzG,OAAO;AAEL,UAAI,OAAO,eAAe,GAAG;AAC3B;AAAA,MACF;AAGA,UAAI,OAAO,gBAAgB,GAAG;AAC5B,cAAM,YAAY,IAAI,OAAO,UAAU,UAAU,GAAG;AACpD,YAAI,CAAC,UAAU,SAAS;AACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,UAAM,UAAU,KAAK,QAAQ,MAAM;AACnC,UAAM,kBAAkB,QAAQ,mBAAmB,GAAG;AACtD,QAAI,iBAAiB;AACnB,YAAM,gBAAgB,KAAK,0BAA0B,IAAI,eAAe;AACxE,UAAI,iBAAiB,cAAc,QAAQ;AACzC,aAAK,cAAc,CAAC,cAAc,MAAM,CAAC;AAAA,MAC3C;AAAA,IACF;AAGA,UAAM,0BAA0B,OAAO,wBAAwB;AAC/D,UAAM,eAAe,QAAQ,mBAAmB,KAAK,wBAAwB,YAAY,CAAC;AAC1F,mBAAe,2BAA2B,cAAc,OAAO,OAAO;AACtE,UAAM,WAAW,eAAe,KAAK,cAAc,OAAO,GAAG,OAAO,SAAS,GAAG;AAGhF,UAAM,aAAa,IAAI,mBAAmB,MAAM,cAAc,MAAM;AACpE,SAAK,0BAA0B,IAAI,cAAc,UAAU;AAC3D,SAAK,sBAAsB,IAAI,QAAQ,YAAY;AAEnD,UAAM,WAAW,OAAO,OAAO,IAAI,qBAAqB;AACxD,YAAQ,4BAA4B,cAAc,yBAAyB,UAAU,QAAQ;AAC7F,SAAK,KAAK,yBAAyB,gBAAgB,MAAM;AAAA,EAC3D;AAAA,EAEA,WAAW,cAA4E;AACrF,WAAO,KAAK,0BAA0B,IAAI,YAAY,KAAK;AAAA,EAC7D;AAAA,EAEQ,cAAc,SAAoC;AACxD,UAAM,yBACF,IAAI,SAAS,aAAa,SAA2E;AACzG,eAAW,UAAU,SAAS;AAC5B,YAAM,eAAe,KAAK,sBAAsB,IAAI,MAAM;AAC1D,UAAI,CAAC,cAAc;AACjB;AAAA,MACF;AACA,YAAM,aAAa,KAAK,0BAA0B,IAAI,YAAY;AAClE,UAAI,YAAY;AACd,mBAAW,QAAQ;AAAA,MACrB;AAEA,WAAK,0BAA0B,OAAO,YAAY;AAClD,WAAK,sBAAsB,OAAO,MAAM;AAExC,6BAAuB,IAAI,aAAa,QAAQ,GAAkC,YAAY;AAC9F,WAAK,KAAK,yBAAyB,gBAAgB,MAAM;AAAA,IAC3D;AACA,eAAW,WAAW,uBAAuB,UAAU,GAAG;AACxD,YAAM,gBAAgB,uBAAuB,IAAI,OAAO;AAExD,UAAI,sBAAsB;AAC1B,iBAAW,qBAAqB,QAAQ,cAAc,GAAG;AACvD,YAAI,CAAC,cAAc,IAAI,iBAAiB,GAAG;AACzC,gCAAsB;AACtB;AAAA,QACF;AAAA,MACF;AAEA,UAAI,qBAAqB;AACvB,aAAK,UAAU,OAAO,QAAQ,GAAG,CAAC;AAClC,gBAAQ,cAAc;AAAA,MACxB,OAAO;AAEL,sBAAc,QAAQ,OAAK,QAAQ,mBAAmB,EAAE,IAAI,CAAC,CAAC;AAAA,MAChE;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,0BAA0B,OACzB;AACP,UAAM,mBAAmB,MAAM;AAC/B,SAAK,cAAc,KAAK,cAAc,2BAA2B,gBAAgB,CAAC;AAAA,EACpF;AAAA,EAEQ,sBAA4B;AAClC,UAAM,UAAU,MAAM,KAAK,KAAK,sBAAsB,KAAK,CAAC;AAC5D,SAAK,cAAc,OAAO;AAAA,EAC5B;AAAA,EAEA,eAAqB;AACnB,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,UAAgB;AACd,WAAO,YAAY,qBAAqB,KAAK,eAAe;AAC5D,SAAK,oBAAoB;AAAA,EAC3B;AACF;AAEO,aAAM,2BAA2B,OAAO,cAAc,cAA6C;AAAA,EAC/F;AAAA,EACA;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAe,IAAI,OAAO,MAAM,MAAM;AAAA,EACtC,YACI,uBAA8C,cAC9C,QAA2B;AAC7B,UAAM;AACN,SAAK,yBAAyB;AAC9B,SAAK,eAAe;AACpB,SAAK,SAAS,KAAK,aAAa,YAAY,EAAE,SAAS,IAAI,SAAS;AAEpE,SAAK,aAAa,iBAAiB,UAAU,aAAa,OAAO,oBAAoB,KAAK,oBAAoB,IAAI;AAClH,SAAK,aAAa;AAAA,MACd,UAAU,aAAa,OAAO;AAAA,MAAsB,KAAK;AAAA,MAAsB;AAAA,IAAI;AAAA,EACzF;AAAA,EAEQ,aAAsB;AAC5B,QAAI,KAAK,aAAa,QAAQ,GAAG;AAC/B,aAAO;AAAA,IACT;AACA,QAAI,CAAC,KAAK,QAAQ;AAChB,aAAO;AAAA,IACT;AACA,QAAI,OAAO,KAAK,kBAAkB,eAAe,KAAK,kBAAkB,MAAM;AAC5E,aAAO;AAAA,IACT;AACA,UAAM,cAAc,KAAK,aAAa,YAAY;AAClD,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA,IACT;AAGA,QAAI,CAAC,YAAY,WAAW,KAAK,cAAc,QAAQ,CAAC,GAAG;AACzD,aAAO;AAAA,IACT;AACA,UAAM,SAAS,KAAK,aAAa,YAAY,EAAE,OAAO,KAAK,cAAc,MAAM;AAC/E,WAAO,QAAQ,OAAO,MAAM,KAAK,CAAC,OAAO,MAAM,IAAI,OAAO,cAAc;AAAA,EAC1E;AAAA,EAEQ,qBAA2B;AACjC,SAAK,KAAK,OAAO;AAAA,EACnB;AAAA,EAEQ,uBAA6B;AACnC,QAAI,KAAK,aAAa,QAAQ,EAAE,kBAAkB,GAAG;AACnD;AAAA,IACF;AACA,QAAI,CAAC,KAAK,QAAQ;AAChB;AAAA,IACF;AAEA,UAAM,SAAS,KAAK,aAAa,YAAY;AAC7C,SAAK,KAAK,OAAO,WAAW,MAAM,EAAE,KAAK,CAAC,EAAC,QAAQ,iBAAgB,MAAM;AACvE,WAAK,KAAK,mBAAmB,QAAQ,QAAQ,gBAAgB;AAAA,IAC/D,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,mBACF,QAAgB,QAChB,kBAAqE;AACvE,QAAI,WAAW,SAAS,SAAS,8BAA8B,IAAI;AACjE,WAAK,gBAAgB;AAAA,IACvB;AACA,UAAM,KAAK,OAAO;AAElB,QAAI,WAAW,SAAS,SAAS,8BAA8B,IAAI;AACjE;AAAA,IACF;AAEA,QAAI,CAAC,kBAAkB;AAGrB,aAAO,QAAQ,QAAQ,SAAS,EAAE;AAAA,QAC9B,WAAW,UAAU,gBAAgB,EAAC,KAAK,aAAa,MAAM,EAAC,CAAC;AAAA,QAAG,OAAO,QAAQ,aAAa;AAAA,MAAO;AAC1G;AAAA,IACF;AACA,UAAM,cAAc,WAAW,UAAU,uBAAuB,EAAC,KAAK,iBAAiB,KAAI,CAAC;AAC5F,SAAK,aAAa;AAAA,MACd,UAAU,aAAa,QAAQ,MAAM;AAAA,MAAO;AAAA,MAAa,iBAAiB;AAAA,MAC1E,iBAAiB;AAAA,IAAY;AAEjC,aAAS,aAAaA,SAAiE;AACrF,cAAQA,SAAQ;AAAA,QACd,KAAK,SAAS,SAAS,8BAA8B;AACnD,iBAAO;AAAA,QACT,KAAK,SAAS,SAAS,8BAA8B;AACnD,iBAAO;AAAA,QACT,KAAK,SAAS,SAAS,8BAA8B;AACnD,iBAAO;AAAA,QACT,KAAK,SAAS,SAAS,8BAA8B;AAAA,QACrD,KAAK,SAAS,SAAS,8BAA8B;AACnD,gBAAM,IAAI,MAAM,kEAAkE;AAAA,MACtF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,SAAwB;AAEpC,UAAM,UAAU,MAAM,KAAK,aAAa,QAAQ;AAChD,UAAM,WAAW,KAAK,WAAW;AACjC,QAAI,YAAY,CAAC,KAAK,4BAA4B;AAChD,YAAM,KAAK,cAAc;AAAA,IAC3B,WAAW,CAAC,YAAY,KAAK,4BAA4B;AACvD,YAAM,KAAK,UAAU;AAAA,IACvB;AACA,YAAQ;AAAA,EACV;AAAA,EAEA,MAAc,gBAA+B;AAC3C,QAAI,KAAK,QAAQ;AACf,WAAK,6BAA6B;AAClC,YAAM,KAAK,uBAAuB,yBAAyB,gBAAgB,KAAK,MAAM;AACtF,WAAK,6BAA6B;AAClC,WAAK,6BAA6B;AAClC,WAAK,yBAAyB,mBAAmB,OAAO,mBAAmB;AAAA,IAC7E;AAAA,EACF;AAAA,EAEA,MAAc,YAA2B;AACvC,QAAI,KAAK,QAAQ;AACf,WAAK,6BAA6B;AAClC,WAAK,yBAAyB;AAC9B,YAAM,KAAK,uBAAuB,yBAAyB,gBAAgB,KAAK,MAAM;AACtF,WAAK,yBAAyB;AAC9B,WAAK,yBAAyB,mBAAmB,OAAO,eAAe;AAAA,IACzE;AAAA,EACF;AAAA,EAEA,oBAA6B;AAC3B,WAAO,QAAQ,KAAK,0BAA0B;AAAA,EAChD;AAAA,EAEA,oBAA6B;AAC3B,WAAO,QAAQ,KAAK,0BAA0B;AAAA,EAChD;AAAA,EAEA,gBAAyB;AACvB,WAAO,QAAQ,KAAK,sBAAsB;AAAA,EAC5C;AAAA,EAEA,eAAqB;AACnB,QAAI,CAAC,KAAK,UAAU,OAAO,KAAK,kBAAkB,aAAa;AAC7D,WAAK,sBAAsB;AAC3B;AAAA,IACF;AACA,SAAK,KAAK,OAAO,mBAAmB,EAAE,KAAK,aAAW;AACpD,WAAK,gBAAgB,UAAU,YAAY,YAAY,OAAO,SAAS,IAAI;AAC3E,WAAK,KAAK,OAAO,EAAE,KAAK,MAAM,KAAK,sBAAsB,CAAC;AAAA,IAC5D,CAAC;AAAA,EACH;AAAA,EAEQ,wBAA8B;AAAA,EACtC;AAAA,EAEA,UAAgB;AACd,SAAK,aAAa;AAAA,MACd,UAAU,aAAa,OAAO;AAAA,MAAoB,KAAK;AAAA,MAAoB;AAAA,IAAI;AACnF,SAAK,aAAa;AAAA,MACd,UAAU,aAAa,OAAO;AAAA,MAAsB,KAAK;AAAA,MAAsB;AAAA,IAAI;AAAA,EACzF;AAAA,EAEA,gBAAgB,cAAqD;AACnE,QAAI,CAAC,KAAK,QAAQ;AAChB;AAAA,IACF;AACA,SAAK,OAAO,cAAc,gBAAgB,KAAK,QAAQ,YAAY;AAAA,EACrE;AAAA,EAEA,gBAAgB,cAAqD;AACnE,QAAI,CAAC,KAAK,QAAQ;AAChB;AAAA,IACF;AACA,UAAM,EAAC,cAAa,IAAI,yBAAyB,SAAS;AAC1D,kBAAc,gBAAgB,KAAK,QAAQ,YAAY;AAAA,EACzD;AAAA,EAEA,kBAA2B;AACzB,WAAO,QAAQ,KAAK,QAAQ,YAAY;AAAA,EAC1C;AAAA,EAEA,MAAM,qBAA0E;AAC9E,QAAI,CAAC,KAAK,QAAQ;AAChB,aAAO;AAAA,IACT;AACA,UAAM,EAAC,cAAa,IAAI,KAAK,uBAAuB;AACpD,UAAM,UAAU,MAAM,cAAc,oBAAoB,KAAK,MAAM;AACnE,WAAO,WAAW,wBAAwB,UAAU,QAAQ,qBAAqB;AAAA,EACnF;AACF;AAAA,CAEO,CAAUC,wBAAV;AACE,MAAW;AAAX,IAAWC,YAAX;AACL,IAAAA,QAAA,qBAAkB;AAClB,IAAAA,QAAA,yBAAsB;AAAA,KAFN,SAAAD,oBAAA,WAAAA,oBAAA;AAAA,GADH;",
  "names": ["status", "ResourceScriptFile", "Events"]
}
