{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/ResourceMapping.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {ContentProviderBasedProject} from './ContentProviderBasedProject.js';\nimport {CSSWorkspaceBinding} from './CSSWorkspaceBinding.js';\nimport {DebuggerWorkspaceBinding} from './DebuggerWorkspaceBinding.js';\nimport {NetworkProject} from './NetworkProject.js';\nimport {resourceMetadata} from './ResourceUtils.js';\n\nconst styleSheetRangeMap = new WeakMap<SDK.CSSStyleSheetHeader.CSSStyleSheetHeader, TextUtils.TextRange.TextRange>();\nconst scriptRangeMap = new WeakMap<SDK.Script.Script, TextUtils.TextRange.TextRange>();\nconst boundUISourceCodes = new WeakSet<Workspace.UISourceCode.UISourceCode>();\n\nfunction computeScriptRange(script: SDK.Script.Script): TextUtils.TextRange.TextRange {\n  return new TextUtils.TextRange.TextRange(script.lineOffset, script.columnOffset, script.endLine, script.endColumn);\n}\n\nfunction computeStyleSheetRange(header: SDK.CSSStyleSheetHeader.CSSStyleSheetHeader): TextUtils.TextRange.TextRange {\n  return new TextUtils.TextRange.TextRange(header.startLine, header.startColumn, header.endLine, header.endColumn);\n}\n\nexport class ResourceMapping implements SDK.TargetManager.SDKModelObserver<SDK.ResourceTreeModel.ResourceTreeModel> {\n  readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #modelToInfo: Map<SDK.ResourceTreeModel.ResourceTreeModel, ModelInfo>;\n\n  constructor(targetManager: SDK.TargetManager.TargetManager, workspace: Workspace.Workspace.WorkspaceImpl) {\n    this.workspace = workspace;\n    this.#modelToInfo = new Map();\n    targetManager.observeModels(SDK.ResourceTreeModel.ResourceTreeModel, this);\n  }\n\n  modelAdded(resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel): void {\n    const info = new ModelInfo(this.workspace, resourceTreeModel);\n    this.#modelToInfo.set(resourceTreeModel, info);\n  }\n\n  modelRemoved(resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel): void {\n    const info = this.#modelToInfo.get(resourceTreeModel);\n    if (info) {\n      info.dispose();\n      this.#modelToInfo.delete(resourceTreeModel);\n    }\n  }\n\n  private infoForTarget(target: SDK.Target.Target): ModelInfo|null {\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    return resourceTreeModel ? this.#modelToInfo.get(resourceTreeModel) || null : null;\n  }\n\n  uiSourceCodeForScript(script: SDK.Script.Script): Workspace.UISourceCode.UISourceCode|null {\n    const info = this.infoForTarget(script.debuggerModel.target());\n    if (!info) {\n      return null;\n    }\n\n    const project = info.getProject();\n    const uiSourceCode = project.uiSourceCodeForURL(script.sourceURL);\n    return uiSourceCode;\n  }\n\n  cssLocationToUILocation(cssLocation: SDK.CSSModel.CSSLocation): Workspace.UISourceCode.UILocation|null {\n    const header = cssLocation.header();\n    if (!header) {\n      return null;\n    }\n    const info = this.infoForTarget(cssLocation.cssModel().target());\n    if (!info) {\n      return null;\n    }\n    const uiSourceCode = info.getProject().uiSourceCodeForURL(cssLocation.url);\n    if (!uiSourceCode) {\n      return null;\n    }\n    const offset = styleSheetRangeMap.get(header) ?? computeStyleSheetRange(header);\n    const lineNumber = cssLocation.lineNumber + offset.startLine - header.startLine;\n    let columnNumber = cssLocation.columnNumber;\n    if (cssLocation.lineNumber === header.startLine) {\n      columnNumber += offset.startColumn - header.startColumn;\n    }\n    return uiSourceCode.uiLocation(lineNumber, columnNumber);\n  }\n\n  jsLocationToUILocation(jsLocation: SDK.DebuggerModel.Location): Workspace.UISourceCode.UILocation|null {\n    const script = jsLocation.script();\n    if (!script) {\n      return null;\n    }\n    const info = this.infoForTarget(jsLocation.debuggerModel.target());\n    if (!info) {\n      return null;\n    }\n    const embedderName = script.embedderName();\n    if (!embedderName) {\n      return null;\n    }\n    const uiSourceCode = info.getProject().uiSourceCodeForURL(embedderName);\n    if (!uiSourceCode) {\n      return null;\n    }\n    const {startLine, startColumn} = scriptRangeMap.get(script) ?? computeScriptRange(script);\n    let {lineNumber, columnNumber} = jsLocation;\n    if (lineNumber === script.lineOffset) {\n      columnNumber += startColumn - script.columnOffset;\n    }\n    lineNumber += startLine - script.lineOffset;\n    if (script.hasSourceURL) {\n      if (lineNumber === 0) {\n        columnNumber += script.columnOffset;\n      }\n      lineNumber += script.lineOffset;\n    }\n    return uiSourceCode.uiLocation(lineNumber, columnNumber);\n  }\n\n  uiLocationToJSLocations(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number, columnNumber: number):\n      SDK.DebuggerModel.Location[] {\n    if (!boundUISourceCodes.has(uiSourceCode)) {\n      return [];\n    }\n    const target = NetworkProject.targetForUISourceCode(uiSourceCode);\n    if (!target) {\n      return [];\n    }\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return [];\n    }\n    const locations = [];\n    for (const script of debuggerModel.scripts()) {\n      if (script.embedderName() !== uiSourceCode.url()) {\n        continue;\n      }\n      const range = scriptRangeMap.get(script) ?? computeScriptRange(script);\n      if (!range.containsLocation(lineNumber, columnNumber)) {\n        continue;\n      }\n      let scriptLineNumber = lineNumber;\n      let scriptColumnNumber = columnNumber;\n      if (script.hasSourceURL) {\n        scriptLineNumber -= range.startLine;\n        if (scriptLineNumber === 0) {\n          scriptColumnNumber -= range.startColumn;\n        }\n      }\n      locations.push(debuggerModel.createRawLocation(script, scriptLineNumber, scriptColumnNumber));\n    }\n    return locations;\n  }\n\n  uiLocationRangeToJSLocationRanges(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      textRange: TextUtils.TextRange.TextRange): SDK.DebuggerModel.LocationRange[]|null {\n    if (!boundUISourceCodes.has(uiSourceCode)) {\n      return null;\n    }\n    const target = NetworkProject.targetForUISourceCode(uiSourceCode);\n    if (!target) {\n      return null;\n    }\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return null;\n    }\n    const ranges = [];\n    for (const script of debuggerModel.scripts()) {\n      if (script.embedderName() !== uiSourceCode.url()) {\n        continue;\n      }\n      const scriptTextRange = scriptRangeMap.get(script) ?? computeScriptRange(script);\n      const range = scriptTextRange.intersection(textRange);\n      if (range.isEmpty()) {\n        continue;\n      }\n      let {startLine, startColumn, endLine, endColumn} = range;\n      if (script.hasSourceURL) {\n        startLine -= range.startLine;\n        if (startLine === 0) {\n          startColumn -= range.startColumn;\n        }\n        endLine -= range.startLine;\n        if (endLine === 0) {\n          endColumn -= range.startColumn;\n        }\n      }\n      const start = debuggerModel.createRawLocation(script, startLine, startColumn);\n      const end = debuggerModel.createRawLocation(script, endLine, endColumn);\n      ranges.push({start, end});\n    }\n    return ranges;\n  }\n\n  getMappedLines(uiSourceCode: Workspace.UISourceCode.UISourceCode): Set<number>|null {\n    if (!boundUISourceCodes.has(uiSourceCode)) {\n      return null;\n    }\n    const target = NetworkProject.targetForUISourceCode(uiSourceCode);\n    if (!target) {\n      return null;\n    }\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return null;\n    }\n    const mappedLines = new Set<number>();\n    for (const script of debuggerModel.scripts()) {\n      if (script.embedderName() !== uiSourceCode.url()) {\n        continue;\n      }\n      const {startLine, endLine} = scriptRangeMap.get(script) ?? computeScriptRange(script);\n      for (let line = startLine; line <= endLine; ++line) {\n        mappedLines.add(line);\n      }\n    }\n    return mappedLines;\n  }\n\n  uiLocationToCSSLocations(uiLocation: Workspace.UISourceCode.UILocation): SDK.CSSModel.CSSLocation[] {\n    if (!boundUISourceCodes.has(uiLocation.uiSourceCode)) {\n      return [];\n    }\n    const target = NetworkProject.targetForUISourceCode(uiLocation.uiSourceCode);\n    if (!target) {\n      return [];\n    }\n    const cssModel = target.model(SDK.CSSModel.CSSModel);\n    if (!cssModel) {\n      return [];\n    }\n    return cssModel.createRawLocationsByURL(\n        uiLocation.uiSourceCode.url(), uiLocation.lineNumber, uiLocation.columnNumber);\n  }\n\n  resetForTest(target: SDK.Target.Target): void {\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const info = resourceTreeModel ? this.#modelToInfo.get(resourceTreeModel) : null;\n    if (info) {\n      info.resetForTest();\n    }\n  }\n}\n\nclass ModelInfo {\n  project: ContentProviderBasedProject;\n  readonly #bindings: Map<string, Binding>;\n  readonly #cssModel: SDK.CSSModel.CSSModel;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel) {\n    const target = resourceTreeModel.target();\n    this.project = new ContentProviderBasedProject(\n        workspace, 'resources:' + target.id(), Workspace.Workspace.projectTypes.Network, '',\n        false /* isServiceProject */);\n    NetworkProject.setTargetForProject(this.project, target);\n\n    this.#bindings = new Map();\n\n    const cssModel = target.model(SDK.CSSModel.CSSModel);\n    console.assert(Boolean(cssModel));\n    this.#cssModel = (cssModel as SDK.CSSModel.CSSModel);\n    for (const frame of resourceTreeModel.frames()) {\n      for (const resource of frame.getResourcesMap().values()) {\n        this.addResource(resource);\n      }\n    }\n    this.#eventListeners = [\n      resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.ResourceAdded, this.resourceAdded, this),\n      resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.FrameWillNavigate, this.frameWillNavigate, this),\n      resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.FrameDetached, this.frameDetached, this),\n      this.#cssModel.addEventListener(\n          SDK.CSSModel.Events.StyleSheetChanged,\n          event => {\n            void this.styleSheetChanged(event);\n          },\n          this),\n    ];\n  }\n\n  private async styleSheetChanged(event: Common.EventTarget.EventTargetEvent<SDK.CSSModel.StyleSheetChangedEvent>):\n      Promise<void> {\n    const header = this.#cssModel.styleSheetHeaderForId(event.data.styleSheetId);\n    if (!header || !header.isInline || (header.isInline && header.isMutable)) {\n      return;\n    }\n    const binding = this.#bindings.get(header.resourceURL());\n    if (!binding) {\n      return;\n    }\n    await binding.styleSheetChanged(header, event.data.edit || null);\n  }\n\n  private acceptsResource(resource: SDK.Resource.Resource): boolean {\n    const resourceType = resource.resourceType();\n    // Only load selected resource types from resources.\n    if (resourceType !== Common.ResourceType.resourceTypes.Image &&\n        resourceType !== Common.ResourceType.resourceTypes.Font &&\n        resourceType !== Common.ResourceType.resourceTypes.Document &&\n        resourceType !== Common.ResourceType.resourceTypes.Manifest &&\n        resourceType !== Common.ResourceType.resourceTypes.Fetch &&\n        resourceType !== Common.ResourceType.resourceTypes.XHR) {\n      return false;\n    }\n\n    // Ignore non-images and non-fonts.\n    if (resourceType === Common.ResourceType.resourceTypes.Image && resource.mimeType &&\n        !resource.mimeType.startsWith('image')) {\n      return false;\n    }\n    if (resourceType === Common.ResourceType.resourceTypes.Font && resource.mimeType &&\n        !resource.mimeType.includes('font')) {\n      return false;\n    }\n    if ((resourceType === Common.ResourceType.resourceTypes.Image ||\n         resourceType === Common.ResourceType.resourceTypes.Font) &&\n        Common.ParsedURL.schemeIs(resource.contentURL(), 'data:')) {\n      return false;\n    }\n    return true;\n  }\n\n  private resourceAdded(event: Common.EventTarget.EventTargetEvent<SDK.Resource.Resource>): void {\n    this.addResource(event.data);\n  }\n\n  private addResource(resource: SDK.Resource.Resource): void {\n    if (!this.acceptsResource(resource)) {\n      return;\n    }\n\n    let binding = this.#bindings.get(resource.url);\n    if (!binding) {\n      binding = new Binding(this.project, resource);\n      this.#bindings.set(resource.url, binding);\n    } else {\n      binding.addResource(resource);\n    }\n  }\n\n  private removeFrameResources(frame: SDK.ResourceTreeModel.ResourceTreeFrame): void {\n    for (const resource of frame.resources()) {\n      if (!this.acceptsResource(resource)) {\n        continue;\n      }\n      const binding = this.#bindings.get(resource.url);\n      if (!binding) {\n        continue;\n      }\n      if (binding.resources.size === 1) {\n        binding.dispose();\n        this.#bindings.delete(resource.url);\n      } else {\n        binding.removeResource(resource);\n      }\n    }\n  }\n\n  private frameWillNavigate(event: Common.EventTarget.EventTargetEvent<SDK.ResourceTreeModel.ResourceTreeFrame>): void {\n    this.removeFrameResources(event.data);\n  }\n\n  private frameDetached(\n      event: Common.EventTarget.EventTargetEvent<{frame: SDK.ResourceTreeModel.ResourceTreeFrame, isSwap: boolean}>):\n      void {\n    this.removeFrameResources(event.data.frame);\n  }\n\n  resetForTest(): void {\n    for (const binding of this.#bindings.values()) {\n      binding.dispose();\n    }\n    this.#bindings.clear();\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    for (const binding of this.#bindings.values()) {\n      binding.dispose();\n    }\n    this.#bindings.clear();\n    this.project.removeProject();\n  }\n\n  getProject(): ContentProviderBasedProject {\n    return this.project;\n  }\n}\n\nclass Binding implements TextUtils.ContentProvider.ContentProvider {\n  readonly resources: Set<SDK.Resource.Resource>;\n  readonly #project: ContentProviderBasedProject;\n  readonly #uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  #edits: {\n    stylesheet: SDK.CSSStyleSheetHeader.CSSStyleSheetHeader,\n    edit: SDK.CSSModel.Edit|null,\n  }[];\n  constructor(project: ContentProviderBasedProject, resource: SDK.Resource.Resource) {\n    this.resources = new Set([resource]);\n    this.#project = project;\n    this.#uiSourceCode = this.#project.createUISourceCode(resource.url, resource.contentType());\n    boundUISourceCodes.add(this.#uiSourceCode);\n    if (resource.frameId) {\n      NetworkProject.setInitialFrameAttribution(this.#uiSourceCode, resource.frameId);\n    }\n    this.#project.addUISourceCodeWithProvider(this.#uiSourceCode, this, resourceMetadata(resource), resource.mimeType);\n    this.#edits = [];\n\n    void Promise.all([\n      ...this.inlineScripts().map(script => DebuggerWorkspaceBinding.instance().updateLocations(script)),\n      ...this.inlineStyles().map(style => CSSWorkspaceBinding.instance().updateLocations(style)),\n    ]);\n  }\n\n  private inlineStyles(): SDK.CSSStyleSheetHeader.CSSStyleSheetHeader[] {\n    const target = NetworkProject.targetForUISourceCode(this.#uiSourceCode);\n    const stylesheets: SDK.CSSStyleSheetHeader.CSSStyleSheetHeader[] = [];\n    if (!target) {\n      return stylesheets;\n    }\n    const cssModel = target.model(SDK.CSSModel.CSSModel);\n    if (cssModel) {\n      for (const headerId of cssModel.getStyleSheetIdsForURL(this.#uiSourceCode.url())) {\n        const header = cssModel.styleSheetHeaderForId(headerId);\n        if (header) {\n          stylesheets.push(header);\n        }\n      }\n    }\n    return stylesheets;\n  }\n\n  private inlineScripts(): SDK.Script.Script[] {\n    const target = NetworkProject.targetForUISourceCode(this.#uiSourceCode);\n    if (!target) {\n      return [];\n    }\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return [];\n    }\n    return debuggerModel.scripts().filter(script => script.embedderName() === this.#uiSourceCode.url());\n  }\n\n  async styleSheetChanged(stylesheet: SDK.CSSStyleSheetHeader.CSSStyleSheetHeader, edit: SDK.CSSModel.Edit|null):\n      Promise<void> {\n    this.#edits.push({stylesheet, edit});\n    if (this.#edits.length > 1) {\n      return;\n    }  // There is already a styleSheetChanged loop running\n\n    const content = await this.#uiSourceCode.requestContentData();\n    if (!TextUtils.ContentData.ContentData.isError(content)) {\n      await this.innerStyleSheetChanged(content.text);\n    }\n    this.#edits = [];\n  }\n\n  private async innerStyleSheetChanged(content: string): Promise<void> {\n    const scripts = this.inlineScripts();\n    const styles = this.inlineStyles();\n    let text: TextUtils.Text.Text = new TextUtils.Text.Text(content);\n    for (const data of this.#edits) {\n      const edit = data.edit;\n      if (!edit) {\n        continue;\n      }\n      const stylesheet = data.stylesheet;\n      const startLocation = styleSheetRangeMap.get(stylesheet) ?? computeStyleSheetRange(stylesheet);\n\n      const oldRange = edit.oldRange.relativeFrom(startLocation.startLine, startLocation.startColumn);\n      const newRange = edit.newRange.relativeFrom(startLocation.startLine, startLocation.startColumn);\n      text = new TextUtils.Text.Text(text.replaceRange(oldRange, edit.newText));\n      const updatePromises = [];\n      for (const script of scripts) {\n        const range = scriptRangeMap.get(script) ?? computeScriptRange(script);\n        if (!range.follows(oldRange)) {\n          continue;\n        }\n        scriptRangeMap.set(script, range.rebaseAfterTextEdit(oldRange, newRange));\n        updatePromises.push(DebuggerWorkspaceBinding.instance().updateLocations(script));\n      }\n      for (const style of styles) {\n        const range = styleSheetRangeMap.get(style) ?? computeStyleSheetRange(style);\n        if (!range.follows(oldRange)) {\n          continue;\n        }\n        styleSheetRangeMap.set(style, range.rebaseAfterTextEdit(oldRange, newRange));\n        updatePromises.push(CSSWorkspaceBinding.instance().updateLocations(style));\n      }\n      await Promise.all(updatePromises);\n    }\n    this.#uiSourceCode.addRevision(text.value());\n  }\n\n  addResource(resource: SDK.Resource.Resource): void {\n    this.resources.add(resource);\n    if (resource.frameId) {\n      NetworkProject.addFrameAttribution(this.#uiSourceCode, resource.frameId);\n    }\n  }\n\n  removeResource(resource: SDK.Resource.Resource): void {\n    this.resources.delete(resource);\n    if (resource.frameId) {\n      NetworkProject.removeFrameAttribution(this.#uiSourceCode, resource.frameId);\n    }\n  }\n\n  dispose(): void {\n    this.#project.removeUISourceCode(this.#uiSourceCode.url());\n    void Promise.all([\n      ...this.inlineScripts().map(script => DebuggerWorkspaceBinding.instance().updateLocations(script)),\n      ...this.inlineStyles().map(style => CSSWorkspaceBinding.instance().updateLocations(style)),\n    ]);\n  }\n\n  private firstResource(): SDK.Resource.Resource {\n    console.assert(this.resources.size > 0);\n    return this.resources.values().next().value as SDK.Resource.Resource;\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.firstResource().contentURL();\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.firstResource().contentType();\n  }\n\n  requestContent(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    return this.firstResource().requestContent();\n  }\n\n  requestContentData(): Promise<TextUtils.ContentData.ContentDataOrError> {\n    return this.firstResource().requestContentData();\n  }\n\n  searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    return this.firstResource().searchInContent(query, caseSensitive, isRegex);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
