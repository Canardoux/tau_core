{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/text_utils/ContentProvider.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport type {ContentDataOrError} from './ContentData.js';\nimport type {StreamingContentDataOrError} from './StreamingContentData.js';\nimport type {WasmDisassembly} from './WasmDisassembly.js';\n\nexport interface ContentProvider {\n  contentURL(): Platform.DevToolsPath.UrlString;\n  contentType(): Common.ResourceType.ResourceType;\n  /** @deprecated Prefer {@link requestContentData} instead */\n  requestContent(): Promise<DeferredContent>;\n  requestContentData(): Promise<ContentDataOrError>;\n  searchInContent(query: string, caseSensitive: boolean, isRegex: boolean): Promise<SearchMatch[]>;\n}\n\nexport class SearchMatch {\n  constructor(\n      readonly lineNumber: number, readonly lineContent: string, readonly columnNumber: number,\n      readonly matchLength: number) {\n  }\n\n  static comparator(a: SearchMatch, b: SearchMatch): number {\n    return a.lineNumber - b.lineNumber || a.columnNumber - b.columnNumber;\n  }\n}\n\nexport const contentAsDataURL = function(\n    content: string|null, mimeType: string, contentEncoded: boolean, charset?: string|null,\n    limitSize: boolean = true): string|null {\n  const maxDataUrlSize = 1024 * 1024;\n  if (content === undefined || content === null || (limitSize && content.length > maxDataUrlSize)) {\n    return null;\n  }\n\n  content = contentEncoded ? content : encodeURIComponent(content);\n  return 'data:' + mimeType + (charset ? ';charset=' + charset : '') + (contentEncoded ? ';base64' : '') + ',' +\n      content;\n};\n\nexport type DeferredContent = {\n  content: string,\n  isEncoded: boolean,\n}|{\n  content: '',\n  isEncoded: false,\n  wasmDisassemblyInfo: WasmDisassembly,\n}|{\n  content: null,\n  error: string,\n  isEncoded: boolean,\n};\n\n// Some ContentProvider like NetworkRequests might never actually be able to return\n// a fully completed \"requestContent\" as the request keeps on going indefinitely.\n// Such proivders can implement the \"StreamingContentProvider\" addition, which allows\n// for partial/streaming content.\nexport interface StreamingContentProvider extends ContentProvider {\n  requestStreamingContent(): Promise<StreamingContentDataOrError>;\n}\n\nexport const isStreamingContentProvider = function(provider: ContentProvider): provider is StreamingContentProvider {\n  return 'requestStreamingContent' in provider;\n};\n"],
  "mappings": ";AA8CO,aAAM,YAAY;AAAA,EACvB,YACa,YAA6B,aAA8B,cAC3D,aAAqB;AADrB;AAA6B;AAA8B;AAC3D;AAAA,EACb;AAAA,EAEA,OAAO,WAAW,GAAgB,GAAwB;AACxD,WAAO,EAAE,aAAa,EAAE,cAAc,EAAE,eAAe,EAAE;AAAA,EAC3D;AACF;AAEO,aAAM,mBAAmB,SAC5B,SAAsB,UAAkB,gBAAyB,SACjE,YAAqB,MAAmB;AAC1C,QAAM,iBAAiB,OAAO;AAC9B,MAAI,YAAY,UAAa,YAAY,QAAS,aAAa,QAAQ,SAAS,gBAAiB;AAC/F,WAAO;AAAA,EACT;AAEA,YAAU,iBAAiB,UAAU,mBAAmB,OAAO;AAC/D,SAAO,UAAU,YAAY,UAAU,cAAc,UAAU,OAAO,iBAAiB,YAAY,MAAM,MACrG;AACN;AAuBO,aAAM,6BAA6B,SAAS,UAAiE;AAClH,SAAO,6BAA6B;AACtC;",
  "names": []
}
