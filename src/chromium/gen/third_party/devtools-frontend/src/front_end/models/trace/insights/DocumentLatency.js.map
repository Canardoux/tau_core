{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/insights/DocumentLatency.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {InsightCategory, type InsightModel, type InsightSetContext, type RequiredData} from './types.js';\n\nconst UIStrings = {\n  /**\n   *@description Title of an insight that provides a breakdown for how long it took to download the main document.\n   */\n  title: 'Document request latency',\n  /**\n   *@description Description of an insight that provides a breakdown for how long it took to download the main document.\n   */\n  description:\n      'Your first network request is the most important.  Reduce its latency by avoiding redirects, ensuring a fast server response, and enabling text compression.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/DocumentLatency.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// Due to the way that DevTools throttling works we cannot see if server response took less than ~570ms.\n// We set our failure threshold to 600ms to avoid those false positives but we want devs to shoot for 100ms.\nconst TOO_SLOW_THRESHOLD_MS = 600;\nconst TARGET_MS = 100;\n\n// Threshold for compression savings.\nconst IGNORE_THRESHOLD_IN_BYTES = 1400;\n\nexport type DocumentLatencyInsightModel = InsightModel<{\n  data?: {\n    serverResponseTime: Types.Timing.MilliSeconds,\n    serverResponseTooSlow: boolean,\n    redirectDuration: Types.Timing.MilliSeconds,\n    uncompressedResponseBytes: number,\n    documentRequest?: Types.Events.SyntheticNetworkRequest,\n  },\n}>;\n\nexport function deps(): ['Meta', 'NetworkRequests'] {\n  return ['Meta', 'NetworkRequests'];\n}\n\nfunction getServerResponseTime(request: Types.Events.SyntheticNetworkRequest): Types.Timing.MilliSeconds|null {\n  const timing = request.args.data.timing;\n  if (!timing) {\n    return null;\n  }\n\n  const ms = Helpers.Timing.microSecondsToMilliseconds(request.args.data.syntheticData.waiting);\n  return Math.round(ms) as Types.Timing.MilliSeconds;\n}\n\nfunction getCompressionSavings(request: Types.Events.SyntheticNetworkRequest): number {\n  // Check from headers if compression was already applied.\n  // Older devtools logs are lower case, while modern logs are Cased-Like-This.\n  const patterns = [\n    /^content-encoding$/i,\n    /^x-content-encoding-over-network$/i,\n  ];\n  const compressionTypes = ['gzip', 'br', 'deflate', 'zstd'];\n  const isCompressed = request.args.data.responseHeaders.some(\n      header => patterns.some(p => header.name.match(p)) && compressionTypes.includes(header.value));\n  if (isCompressed) {\n    return 0;\n  }\n\n  // We don't know how many bytes this asset used on the network, but we can guess it was\n  // roughly the size of the content gzipped.\n  // See https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer for specific CSS/Script examples\n  // See https://discuss.httparchive.org/t/file-size-and-compression-savings/145 for fallback multipliers\n  // See https://letstalkaboutwebperf.com/en/gzip-brotli-server-config/ for MIME types to compress\n  const originalSize = request.args.data.decodedBodyLength;\n  let estimatedSavings = 0;\n  switch (request.args.data.mimeType) {\n    case 'text/css':\n      // Stylesheets tend to compress extremely well.\n      estimatedSavings = Math.round(originalSize * 0.8);\n      break;\n    case 'text/html':\n    case 'text/javascript':\n      // Scripts and HTML compress fairly well too.\n      estimatedSavings = Math.round(originalSize * 0.67);\n      break;\n    case 'text/plain':\n    case 'text/xml':\n    case 'text/x-component':\n    case 'application/javascript':\n    case 'application/json':\n    case 'application/manifest+json':\n    case 'application/vnd.api+json':\n    case 'application/xml':\n    case 'application/xhtml+xml':\n    case 'application/rss+xml':\n    case 'application/atom+xml':\n    case 'application/vnd.ms-fontobject':\n    case 'application/x-font-ttf':\n    case 'application/x-font-opentype':\n    case 'application/x-font-truetype':\n    case 'image/svg+xml':\n    case 'image/x-icon':\n    case 'image/vnd.microsoft.icon':\n    case 'font/ttf':\n    case 'font/eot':\n    case 'font/otf':\n    case 'font/opentype':\n      // Use the average savings in HTTPArchive.\n      estimatedSavings = Math.round(originalSize * 0.5);\n      break;\n    default:  // Any other MIME types are likely already compressed.\n  }\n  // Check if the estimated savings are greater than the byte ignore threshold.\n  // Note that the estimated gzip savings are always more than 10%, so there is\n  // no percent threshold.\n  return estimatedSavings < IGNORE_THRESHOLD_IN_BYTES ? 0 : estimatedSavings;\n}\n\nfunction finalize(partialModel: Omit<DocumentLatencyInsightModel, 'title'|'description'|'category'|'shouldShow'>):\n    DocumentLatencyInsightModel {\n  let hasFailure = false;\n  if (partialModel.data) {\n    hasFailure = partialModel.data.redirectDuration > 0 || partialModel.data.serverResponseTooSlow ||\n        partialModel.data.uncompressedResponseBytes > 0;\n  }\n\n  return {\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    shouldShow: hasFailure,\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: RequiredData<typeof deps>, context: InsightSetContext): DocumentLatencyInsightModel {\n  if (!context.navigation) {\n    return finalize({});\n  }\n\n  const documentRequest =\n      parsedTrace.NetworkRequests.byTime.find(req => req.args.data.requestId === context.navigationId);\n  if (!documentRequest) {\n    throw new Error('missing document request');\n  }\n\n  const serverResponseTime = getServerResponseTime(documentRequest);\n  if (serverResponseTime === null) {\n    throw new Error('missing document request timing');\n  }\n\n  const serverResponseTooSlow = serverResponseTime > TOO_SLOW_THRESHOLD_MS;\n\n  let overallSavingsMs = 0;\n  if (serverResponseTime > TOO_SLOW_THRESHOLD_MS) {\n    overallSavingsMs = Math.max(serverResponseTime - TARGET_MS, 0);\n  }\n\n  const redirectDuration = Math.round(documentRequest.args.data.syntheticData.redirectionDuration / 1000);\n  overallSavingsMs += redirectDuration;\n\n  const metricSavings = {\n    FCP: overallSavingsMs as Types.Timing.MilliSeconds,\n    LCP: overallSavingsMs as Types.Timing.MilliSeconds,\n  };\n\n  return finalize({\n    relatedEvents: [documentRequest],\n    data: {\n      serverResponseTime,\n      serverResponseTooSlow,\n      redirectDuration: Types.Timing.MilliSeconds(redirectDuration),\n      uncompressedResponseBytes: getCompressionSavings(documentRequest),\n      documentRequest,\n    },\n    metricSavings,\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
