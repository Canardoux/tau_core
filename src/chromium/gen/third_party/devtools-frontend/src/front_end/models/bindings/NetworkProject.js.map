{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/NetworkProject.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Workspace from '../workspace/workspace.js';\n\nconst uiSourceCodeToAttributionMap = new WeakMap<Workspace.UISourceCode.UISourceCode, Map<Protocol.Page.FrameId, {\n                                                   frame: SDK.ResourceTreeModel.ResourceTreeFrame,\n                                                   count: number,\n                                                 }>>();\nconst projectToTargetMap = new WeakMap<Workspace.Workspace.Project, SDK.Target.Target>();\n\nlet networkProjectManagerInstance: NetworkProjectManager;\n\nexport class NetworkProjectManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private constructor() {\n    super();\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): NetworkProjectManager {\n    if (!networkProjectManagerInstance || forceNew) {\n      networkProjectManagerInstance = new NetworkProjectManager();\n    }\n\n    return networkProjectManagerInstance;\n  }\n}\n\nexport const enum Events {\n  FRAME_ATTRIBUTION_ADDED = 'FrameAttributionAdded',\n  FRAME_ATTRIBUTION_REMOVED = 'FrameAttributionRemoved',\n}\n\nexport interface FrameAttributionEvent {\n  uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  frame: SDK.ResourceTreeModel.ResourceTreeFrame;\n}\n\nexport type EventTypes = {\n  [Events.FRAME_ATTRIBUTION_ADDED]: FrameAttributionEvent,\n  [Events.FRAME_ATTRIBUTION_REMOVED]: FrameAttributionEvent,\n};\n\nexport class NetworkProject {\n  static resolveFrame(uiSourceCode: Workspace.UISourceCode.UISourceCode, frameId: Protocol.Page.FrameId):\n      SDK.ResourceTreeModel.ResourceTreeFrame|null {\n    const target = NetworkProject.targetForUISourceCode(uiSourceCode);\n    const resourceTreeModel = target && target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    return resourceTreeModel ? resourceTreeModel.frameForId(frameId) : null;\n  }\n\n  static setInitialFrameAttribution(uiSourceCode: Workspace.UISourceCode.UISourceCode, frameId: Protocol.Page.FrameId):\n      void {\n    if (!frameId) {\n      return;\n    }\n    const frame = NetworkProject.resolveFrame(uiSourceCode, frameId);\n    if (!frame) {\n      return;\n    }\n    const attribution = new Map<Protocol.Page.FrameId, {\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame,\n      count: number,\n    }>();\n    attribution.set(frameId, {frame, count: 1});\n    uiSourceCodeToAttributionMap.set(uiSourceCode, attribution);\n  }\n\n  static cloneInitialFrameAttribution(\n      fromUISourceCode: Workspace.UISourceCode.UISourceCode,\n      toUISourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const fromAttribution = uiSourceCodeToAttributionMap.get(fromUISourceCode);\n    if (!fromAttribution) {\n      return;\n    }\n    const toAttribution = new Map<Protocol.Page.FrameId, {\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame,\n      count: number,\n    }>();\n    for (const frameId of fromAttribution.keys()) {\n      const value = fromAttribution.get(frameId);\n      if (typeof value !== 'undefined') {\n        toAttribution.set(frameId, {frame: value.frame, count: value.count});\n      }\n    }\n    uiSourceCodeToAttributionMap.set(toUISourceCode, toAttribution);\n  }\n\n  static addFrameAttribution(uiSourceCode: Workspace.UISourceCode.UISourceCode, frameId: Protocol.Page.FrameId): void {\n    const frame = NetworkProject.resolveFrame(uiSourceCode, frameId);\n    if (!frame) {\n      return;\n    }\n    const frameAttribution = uiSourceCodeToAttributionMap.get(uiSourceCode);\n    if (!frameAttribution) {\n      return;\n    }\n    const attributionInfo = frameAttribution.get(frameId) || {frame, count: 0};\n    attributionInfo.count += 1;\n    frameAttribution.set(frameId, attributionInfo);\n    if (attributionInfo.count !== 1) {\n      return;\n    }\n\n    const data = {uiSourceCode, frame};\n    NetworkProjectManager.instance().dispatchEventToListeners(Events.FRAME_ATTRIBUTION_ADDED, data);\n  }\n\n  static removeFrameAttribution(uiSourceCode: Workspace.UISourceCode.UISourceCode, frameId: Protocol.Page.FrameId):\n      void {\n    const frameAttribution = uiSourceCodeToAttributionMap.get(uiSourceCode);\n    if (!frameAttribution) {\n      return;\n    }\n    const attributionInfo = frameAttribution.get(frameId);\n    console.assert(Boolean(attributionInfo), 'Failed to remove frame attribution for url: ' + uiSourceCode.url());\n    if (!attributionInfo) {\n      return;\n    }\n    attributionInfo.count -= 1;\n    if (attributionInfo.count > 0) {\n      return;\n    }\n    frameAttribution.delete(frameId);\n    const data = {uiSourceCode, frame: attributionInfo.frame};\n    NetworkProjectManager.instance().dispatchEventToListeners(Events.FRAME_ATTRIBUTION_REMOVED, data);\n  }\n\n  static targetForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): SDK.Target.Target|null {\n    return projectToTargetMap.get(uiSourceCode.project()) || null;\n  }\n\n  static setTargetForProject(project: Workspace.Workspace.Project, target: SDK.Target.Target): void {\n    projectToTargetMap.set(project, target);\n  }\n\n  static getTargetForProject(project: Workspace.Workspace.Project): SDK.Target.Target|null {\n    return projectToTargetMap.get(project) || null;\n  }\n\n  static framesForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      SDK.ResourceTreeModel.ResourceTreeFrame[] {\n    const target = NetworkProject.targetForUISourceCode(uiSourceCode);\n    const resourceTreeModel = target && target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const attribution = uiSourceCodeToAttributionMap.get(uiSourceCode);\n    if (!resourceTreeModel || !attribution) {\n      return [];\n    }\n    const frames = Array.from(attribution.keys()).map(frameId => resourceTreeModel.frameForId(frameId));\n    return frames.filter(frame => Boolean(frame)) as SDK.ResourceTreeModel.ResourceTreeFrame[];\n  }\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
