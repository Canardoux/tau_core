{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/insights/FontDisplay.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {InsightCategory, type InsightModel, type InsightSetContext, type RequiredData} from './types.js';\n\nconst UIStrings = {\n  /** Title of an insight that provides details about the fonts used on the page, and the value of their `font-display` properties. */\n  title: 'Font display',\n  /**\n   * @description Text to tell the user about the font-display CSS feature to help improve a the UX of a page.\n   */\n  description:\n      'Consider setting [`font-display`](https://developer.chrome.com/blog/font-display) to `swap` or `optional` to ensure text is consistently visible. `swap` can be further optimized to mitigate layout shifts with [font metric overrides](https://developer.chrome.com/blog/font-fallbacks).',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/FontDisplay.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function deps(): ['Meta', 'NetworkRequests', 'LayoutShifts'] {\n  return ['Meta', 'NetworkRequests', 'LayoutShifts'];\n}\n\nexport type FontDisplayInsightModel = InsightModel<{\n  fonts: Array<{\n    request: Types.Events.SyntheticNetworkRequest,\n    display: string,\n    wastedTime: Types.Timing.MilliSeconds,\n  }>,\n}>;\n\nfunction finalize(partialModel: Omit<FontDisplayInsightModel, 'title'|'description'|'category'|'shouldShow'>):\n    FontDisplayInsightModel {\n  return {\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.INP,\n    shouldShow: Boolean(partialModel.fonts.find(font => font.wastedTime > 0)),\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: RequiredData<typeof deps>, context: InsightSetContext): FontDisplayInsightModel {\n  const fonts = [];\n  for (const event of parsedTrace.LayoutShifts.beginRemoteFontLoadEvents) {\n    if (!Helpers.Timing.eventIsInBounds(event, context.bounds)) {\n      continue;\n    }\n\n    const requestId = `${event.pid}.${event.args.id}`;\n    const request = parsedTrace.NetworkRequests.byId.get(requestId);\n    if (!request) {\n      continue;\n    }\n\n    const display = event.args.display;\n    let wastedTime = Types.Timing.MilliSeconds(0);\n\n    if (/^(block|fallback|auto)$/.test(display)) {\n      const wastedTimeMicro = Types.Timing.MicroSeconds(\n          request.args.data.syntheticData.finishTime - request.args.data.syntheticData.sendStartTime);\n      // TODO(crbug.com/352244504): should really end at the time of the next Commit trace event.\n      wastedTime = Platform.NumberUtilities.floor(Helpers.Timing.microSecondsToMilliseconds(wastedTimeMicro), 1 / 5) as\n          Types.Timing.MilliSeconds;\n      // All browsers wait for no more than 3s.\n      wastedTime = Math.min(wastedTime, 3000) as Types.Timing.MilliSeconds;\n    }\n\n    fonts.push({\n      request,\n      display,\n      wastedTime,\n    });\n  }\n\n  fonts.sort((a, b) => b.wastedTime - a.wastedTime);\n\n  const savings = Math.max(...fonts.map(f => f.wastedTime)) as Types.Timing.MilliSeconds;\n\n  return finalize({\n    relatedEvents: fonts.map(f => f.request),\n    fonts,\n    metricSavings: {FCP: savings},\n  });\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,YAAY,aAAa;AACzB,YAAY,WAAW;AAEvB,SAAQ,uBAAoF;AAE5F,MAAM,YAAY;AAAA;AAAA,EAEhB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIP,aACI;AACN;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,wCAAwC,SAAS;AAC1F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAE7D,gBAAS,OAAoD;AAClE,SAAO,CAAC,QAAQ,mBAAmB,cAAc;AACnD;AAUA,SAAS,SAAS,cACU;AAC1B,SAAO;AAAA,IACL,OAAO,WAAW,UAAU,KAAK;AAAA,IACjC,aAAa,WAAW,UAAU,WAAW;AAAA,IAC7C,UAAU,gBAAgB;AAAA,IAC1B,YAAY,QAAQ,aAAa,MAAM,KAAK,UAAQ,KAAK,aAAa,CAAC,CAAC;AAAA,IACxE,GAAG;AAAA,EACL;AACF;AAEO,gBAAS,gBACZ,aAAwC,SAAqD;AAC/F,QAAM,QAAQ,CAAC;AACf,aAAW,SAAS,YAAY,aAAa,2BAA2B;AACtE,QAAI,CAAC,QAAQ,OAAO,gBAAgB,OAAO,QAAQ,MAAM,GAAG;AAC1D;AAAA,IACF;AAEA,UAAM,YAAY,GAAG,MAAM,GAAG,IAAI,MAAM,KAAK,EAAE;AAC/C,UAAM,UAAU,YAAY,gBAAgB,KAAK,IAAI,SAAS;AAC9D,QAAI,CAAC,SAAS;AACZ;AAAA,IACF;AAEA,UAAM,UAAU,MAAM,KAAK;AAC3B,QAAI,aAAa,MAAM,OAAO,aAAa,CAAC;AAE5C,QAAI,0BAA0B,KAAK,OAAO,GAAG;AAC3C,YAAM,kBAAkB,MAAM,OAAO;AAAA,QACjC,QAAQ,KAAK,KAAK,cAAc,aAAa,QAAQ,KAAK,KAAK,cAAc;AAAA,MAAa;AAE9F,mBAAa,SAAS,gBAAgB,MAAM,QAAQ,OAAO,2BAA2B,eAAe,GAAG,IAAI,CAAC;AAG7G,mBAAa,KAAK,IAAI,YAAY,GAAI;AAAA,IACxC;AAEA,UAAM,KAAK;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,EAAE,UAAU;AAEhD,QAAM,UAAU,KAAK,IAAI,GAAG,MAAM,IAAI,OAAK,EAAE,UAAU,CAAC;AAExD,SAAO,SAAS;AAAA,IACd,eAAe,MAAM,IAAI,OAAK,EAAE,OAAO;AAAA,IACvC;AAAA,IACA,eAAe,EAAC,KAAK,QAAO;AAAA,EAC9B,CAAC;AACH;",
  "names": []
}
