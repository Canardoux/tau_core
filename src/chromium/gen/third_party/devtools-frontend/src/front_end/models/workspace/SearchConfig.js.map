{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/workspace/SearchConfig.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nexport class SearchConfig {\n  readonly #query: string;\n  readonly #ignoreCase: boolean;\n  readonly #isRegex: boolean;\n\n  readonly #queries: string[];\n  readonly #fileRegexQueries: RegexQuery[];\n\n  constructor(query: string, ignoreCase: boolean, isRegex: boolean) {\n    this.#query = query;\n    this.#ignoreCase = ignoreCase;\n    this.#isRegex = isRegex;\n\n    const {queries, fileRegexQueries} = SearchConfig.#parse(query, ignoreCase, isRegex);\n    this.#queries = queries;\n    this.#fileRegexQueries = fileRegexQueries;\n  }\n\n  static fromPlainObject(object: {\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  }): SearchConfig {\n    return new SearchConfig(object.query, object.ignoreCase, object.isRegex);\n  }\n\n  filePathMatchesFileQuery(filePath: Platform.DevToolsPath.RawPathString|\n                           Platform.DevToolsPath.EncodedPathString|Platform.DevToolsPath.UrlString): boolean {\n    return this.#fileRegexQueries.every(({regex, shouldMatch}) => (Boolean(filePath.match(regex)) === shouldMatch));\n  }\n\n  queries(): string[] {\n    return this.#queries;\n  }\n\n  query(): string {\n    return this.#query;\n  }\n\n  ignoreCase(): boolean {\n    return this.#ignoreCase;\n  }\n\n  isRegex(): boolean {\n    return this.#isRegex;\n  }\n\n  toPlainObject(): {\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  } {\n    return {query: this.query(), ignoreCase: this.ignoreCase(), isRegex: this.isRegex()};\n  }\n\n  static #parse(query: string, ignoreCase: boolean, isRegex: boolean):\n      {queries: string[], fileRegexQueries: RegexQuery[]} {\n    // Inside double quotes: any symbol except double quote and backslash or any symbol escaped with a backslash.\n    const quotedPattern = /\"([^\\\\\"]|\\\\.)+\"/;\n    // A word is a sequence of any symbols except space and backslash or any symbols escaped with a backslash, that does not start with file:.\n    const unquotedWordPattern = /(\\s*(?!-?f(ile)?:)[^\\\\ ]|\\\\.)+/;\n    const unquotedPattern = unquotedWordPattern.source + '(\\\\s+' + unquotedWordPattern.source + ')*';\n\n    const pattern = [\n      '(\\\\s*' + FilePatternRegex.source + '\\\\s*)',\n      '(' + quotedPattern.source + ')',\n      '(' + unquotedPattern + ')',\n    ].join('|');\n    const regexp = new RegExp(pattern, 'g');\n    const queryParts = query.match(regexp) || [];\n\n    const queries: string[] = [];\n    const fileRegexQueries: RegexQuery[] = [];\n\n    for (const queryPart of queryParts) {\n      if (!queryPart) {\n        continue;\n      }\n      const fileQuery = SearchConfig.#parseFileQuery(queryPart);\n      if (fileQuery) {\n        const regex = new RegExp(fileQuery.text, ignoreCase ? 'i' : '');\n        fileRegexQueries.push({regex, shouldMatch: fileQuery.shouldMatch});\n      } else if (isRegex) {\n        queries.push(queryPart);\n      } else if (queryPart.startsWith('\"') && queryPart.endsWith('\"')) {\n        queries.push(SearchConfig.#parseQuotedQuery(queryPart));\n      } else {\n        queries.push(SearchConfig.#parseUnquotedQuery(queryPart));\n      }\n    }\n\n    return {queries, fileRegexQueries};\n  }\n\n  static #parseUnquotedQuery(query: string): string {\n    return query.replace(/\\\\(.)/g, '$1');\n  }\n\n  static #parseQuotedQuery(query: string): string {\n    return query.substring(1, query.length - 1).replace(/\\\\(.)/g, '$1');\n  }\n\n  static #parseFileQuery(query: string): QueryTerm|null {\n    const match = query.match(FilePatternRegex);\n    if (!match) {\n      return null;\n    }\n    query = match[3];\n    let result = '';\n    for (let i = 0; i < query.length; ++i) {\n      const char = query[i];\n      if (char === '*') {\n        result += '.*';\n      } else if (char === '\\\\') {\n        ++i;\n        const nextChar = query[i];\n        if (nextChar === ' ') {\n          result += ' ';\n        }\n      } else {\n        if (Platform.StringUtilities.regexSpecialCharacters().indexOf(query.charAt(i)) !== -1) {\n          result += '\\\\';\n        }\n        result += query.charAt(i);\n      }\n    }\n    const shouldMatch = !Boolean(match[1]);\n    return {text: result, shouldMatch};\n  }\n}\n\n// After file: prefix: any symbol except space and backslash or any symbol escaped with a backslash.\nconst FilePatternRegex = /(-)?f(ile)?:((?:[^\\\\ ]|\\\\.)+)/;\n\ninterface QueryTerm {\n  text: string;\n  shouldMatch: boolean;\n}\n\ninterface RegexQuery {\n  regex: RegExp;\n  shouldMatch: boolean;\n}\n"],
  "mappings": "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",
  "names": []
}
