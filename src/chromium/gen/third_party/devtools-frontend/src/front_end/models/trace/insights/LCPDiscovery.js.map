{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/insights/LCPDiscovery.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  type InsightModel,\n  type InsightSetContext,\n  InsightWarning,\n  type RequiredData,\n} from './types.js';\n\nconst UIStrings = {\n  /**\n   *@description Title of an insight that provides details about the LCP metric, and the network requests necessary to load it. Details how the LCP request was discoverable - in other words, the path necessary to load it (ex: network requests, JavaScript)\n   */\n  title: 'LCP request discovery',\n  /**\n   *@description Description of an insight that provides details about the LCP metric, and the network requests necessary to load it.\n   */\n  description:\n      'Optimize LCP by making the LCP image [discoverable](https://web.dev/articles/optimize-lcp#1_eliminate_resource_load_delay) from the HTML immediately, and [avoiding lazy-loading](https://web.dev/articles/lcp-lazy-loading)',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/LCPDiscovery.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function deps(): ['NetworkRequests', 'PageLoadMetrics', 'LargestImagePaint', 'Meta'] {\n  return ['NetworkRequests', 'PageLoadMetrics', 'LargestImagePaint', 'Meta'];\n}\n\nexport type LCPDiscoveryInsightModel = InsightModel<{\n  lcpEvent?: Types.Events.LargestContentfulPaintCandidate,\n  shouldRemoveLazyLoading?: boolean,\n  shouldIncreasePriorityHint?: boolean,\n  shouldPreloadImage?: boolean,\n  /** The network request for the LCP image, if there was one. */\n  lcpRequest?: Types.Events.SyntheticNetworkRequest,\n  earliestDiscoveryTimeTs?: Types.Timing.MicroSeconds,\n}>;\n\nfunction finalize(partialModel: Omit<LCPDiscoveryInsightModel, 'title'|'description'|'category'|'shouldShow'>):\n    LCPDiscoveryInsightModel {\n  const relatedEvents = partialModel.lcpEvent && partialModel.lcpRequest ?\n      // TODO: add entire request initiator chain?\n      [partialModel.lcpEvent, partialModel.lcpRequest] :\n      [];\n  return {\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    shouldShow: Boolean(\n        partialModel.lcpRequest &&\n        (partialModel.shouldIncreasePriorityHint || partialModel.shouldPreloadImage ||\n         partialModel.shouldRemoveLazyLoading)),\n    ...partialModel,\n    relatedEvents,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: RequiredData<typeof deps>, context: InsightSetContext): LCPDiscoveryInsightModel {\n  if (!context.navigation) {\n    return finalize({});\n  }\n\n  const networkRequests = parsedTrace.NetworkRequests;\n\n  const frameMetrics = parsedTrace.PageLoadMetrics.metricScoresByFrameId.get(context.frameId);\n  if (!frameMetrics) {\n    throw new Error('no frame metrics');\n  }\n\n  const navMetrics = frameMetrics.get(context.navigationId);\n  if (!navMetrics) {\n    throw new Error('no navigation metrics');\n  }\n  const metricScore = navMetrics.get(Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n  const lcpEvent = metricScore?.event;\n  if (!lcpEvent || !Types.Events.isLargestContentfulPaintCandidate(lcpEvent)) {\n    return finalize({warnings: [InsightWarning.NO_LCP]});\n  }\n\n  const docRequest = networkRequests.byTime.find(req => req.args.data.requestId === context.navigationId);\n  if (!docRequest) {\n    return finalize({lcpEvent, warnings: [InsightWarning.NO_DOCUMENT_REQUEST]});\n  }\n\n  const lcpRequest = parsedTrace.LargestImagePaint.lcpRequestByNavigation.get(context.navigation);\n  if (!lcpRequest) {\n    return finalize({lcpEvent});\n  }\n\n  const initiatorUrl = lcpRequest.args.data.initiator?.url;\n  // TODO(b/372319476): Explore using trace event HTMLDocumentParser::FetchQueuedPreloads to determine if the request\n  // is discovered by the preload scanner.\n  const initiatedByMainDoc =\n      lcpRequest?.args.data.initiator?.type === 'parser' && docRequest.args.data.url === initiatorUrl;\n  const imgPreloadedOrFoundInHTML = lcpRequest?.args.data.isLinkPreload || initiatedByMainDoc;\n\n  const imageLoadingAttr = lcpEvent.args.data?.loadingAttr;\n  const imageFetchPriorityHint = lcpRequest?.args.data.fetchPriorityHint;\n  // This is the earliest discovery time an LCP request could have - it's TTFB.\n  const earliestDiscoveryTime = docRequest && docRequest.args.data.timing ?\n      Helpers.Timing.secondsToMicroseconds(docRequest.args.data.timing.requestTime) +\n          Helpers.Timing.millisecondsToMicroseconds(docRequest.args.data.timing.receiveHeadersStart) :\n      undefined;\n\n  return finalize({\n    lcpEvent,\n    shouldRemoveLazyLoading: imageLoadingAttr === 'lazy',\n    shouldIncreasePriorityHint: imageFetchPriorityHint !== 'high',\n    shouldPreloadImage: !imgPreloadedOrFoundInHTML,\n    lcpRequest,\n    earliestDiscoveryTimeTs: earliestDiscoveryTime ? Types.Timing.MicroSeconds(earliestDiscoveryTime) : undefined,\n  });\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,YAAY,aAAa;AACzB,YAAY,WAAW;AAEvB;AAAA,EACE;AAAA,EAGA;AAAA,OAEK;AAEP,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIP,aACI;AACN;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,yCAAyC,SAAS;AAC3F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAE7D,gBAAS,OAA4E;AAC1F,SAAO,CAAC,mBAAmB,mBAAmB,qBAAqB,MAAM;AAC3E;AAYA,SAAS,SAAS,cACW;AAC3B,QAAM,gBAAgB,aAAa,YAAY,aAAa;AAAA;AAAA,IAExD,CAAC,aAAa,UAAU,aAAa,UAAU;AAAA,MAC/C,CAAC;AACL,SAAO;AAAA,IACL,OAAO,WAAW,UAAU,KAAK;AAAA,IACjC,aAAa,WAAW,UAAU,WAAW;AAAA,IAC7C,UAAU,gBAAgB;AAAA,IAC1B,YAAY;AAAA,MACR,aAAa,eACZ,aAAa,8BAA8B,aAAa,sBACxD,aAAa;AAAA,IAAwB;AAAA,IAC1C,GAAG;AAAA,IACH;AAAA,EACF;AACF;AAEO,gBAAS,gBACZ,aAAwC,SAAsD;AAChG,MAAI,CAAC,QAAQ,YAAY;AACvB,WAAO,SAAS,CAAC,CAAC;AAAA,EACpB;AAEA,QAAM,kBAAkB,YAAY;AAEpC,QAAM,eAAe,YAAY,gBAAgB,sBAAsB,IAAI,QAAQ,OAAO;AAC1F,MAAI,CAAC,cAAc;AACjB,UAAM,IAAI,MAAM,kBAAkB;AAAA,EACpC;AAEA,QAAM,aAAa,aAAa,IAAI,QAAQ,YAAY;AACxD,MAAI,CAAC,YAAY;AACf,UAAM,IAAI,MAAM,uBAAuB;AAAA,EACzC;AACA,QAAM,cAAc,WAAW,IAAI,SAAS,cAAc,gBAAgB,WAAW,GAAG;AACxF,QAAM,WAAW,aAAa;AAC9B,MAAI,CAAC,YAAY,CAAC,MAAM,OAAO,kCAAkC,QAAQ,GAAG;AAC1E,WAAO,SAAS,EAAC,UAAU,CAAC,eAAe,MAAM,EAAC,CAAC;AAAA,EACrD;AAEA,QAAM,aAAa,gBAAgB,OAAO,KAAK,SAAO,IAAI,KAAK,KAAK,cAAc,QAAQ,YAAY;AACtG,MAAI,CAAC,YAAY;AACf,WAAO,SAAS,EAAC,UAAU,UAAU,CAAC,eAAe,mBAAmB,EAAC,CAAC;AAAA,EAC5E;AAEA,QAAM,aAAa,YAAY,kBAAkB,uBAAuB,IAAI,QAAQ,UAAU;AAC9F,MAAI,CAAC,YAAY;AACf,WAAO,SAAS,EAAC,SAAQ,CAAC;AAAA,EAC5B;AAEA,QAAM,eAAe,WAAW,KAAK,KAAK,WAAW;AAGrD,QAAM,qBACF,YAAY,KAAK,KAAK,WAAW,SAAS,YAAY,WAAW,KAAK,KAAK,QAAQ;AACvF,QAAM,4BAA4B,YAAY,KAAK,KAAK,iBAAiB;AAEzE,QAAM,mBAAmB,SAAS,KAAK,MAAM;AAC7C,QAAM,yBAAyB,YAAY,KAAK,KAAK;AAErD,QAAM,wBAAwB,cAAc,WAAW,KAAK,KAAK,SAC7D,QAAQ,OAAO,sBAAsB,WAAW,KAAK,KAAK,OAAO,WAAW,IACxE,QAAQ,OAAO,2BAA2B,WAAW,KAAK,KAAK,OAAO,mBAAmB,IAC7F;AAEJ,SAAO,SAAS;AAAA,IACd;AAAA,IACA,yBAAyB,qBAAqB;AAAA,IAC9C,4BAA4B,2BAA2B;AAAA,IACvD,oBAAoB,CAAC;AAAA,IACrB;AAAA,IACA,yBAAyB,wBAAwB,MAAM,OAAO,aAAa,qBAAqB,IAAI;AAAA,EACtG,CAAC;AACH;",
  "names": []
}
