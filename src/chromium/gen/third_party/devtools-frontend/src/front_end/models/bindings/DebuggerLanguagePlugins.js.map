{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/DebuggerLanguagePlugins.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Chrome} from '../../../extension-api/ExtensionAPI.js';\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {ContentProviderBasedProject} from './ContentProviderBasedProject.js';\nimport type {DebuggerWorkspaceBinding} from './DebuggerWorkspaceBinding.js';\nimport {NetworkProject} from './NetworkProject.js';\n\nconst UIStrings = {\n  /**\n   *@description Error message that is displayed in the Console when language #plugins report errors\n   *@example {File not found} PH1\n   */\n  errorInDebuggerLanguagePlugin: 'Error in debugger language plugin: {PH1}',\n  /**\n   *@description Status message that is shown in the Console when debugging information is being\n   *loaded. The 2nd and 3rd placeholders are URLs.\n   *@example {C/C++ DevTools Support (DWARF)} PH1\n   *@example {http://web.dev/file.wasm} PH2\n   *@example {http://web.dev/file.wasm.debug.wasm} PH3\n   */\n  loadingDebugSymbolsForVia: '[{PH1}] Loading debug symbols for {PH2} (via {PH3})...',\n  /**\n   *@description Status message that is shown in the Console when debugging information is being loaded\n   *@example {C/C++ DevTools Support (DWARF)} PH1\n   *@example {http://web.dev/file.wasm} PH2\n   */\n  loadingDebugSymbolsFor: '[{PH1}] Loading debug symbols for {PH2}...',\n  /**\n   *@description Warning message that is displayed in the Console when debugging information was loaded, but no source files were found\n   *@example {C/C++ DevTools Support (DWARF)} PH1\n   *@example {http://web.dev/file.wasm} PH2\n   */\n  loadedDebugSymbolsForButDidnt: '[{PH1}] Loaded debug symbols for {PH2}, but didn\\'t find any source files',\n  /**\n   *@description Status message that is shown in the Console when debugging information is successfully loaded\n   *@example {C/C++ DevTools Support (DWARF)} PH1\n   *@example {http://web.dev/file.wasm} PH2\n   *@example {42} PH3\n   */\n  loadedDebugSymbolsForFound: '[{PH1}] Loaded debug symbols for {PH2}, found {PH3} source file(s)',\n  /**\n   *@description Error message that is displayed in the Console when debugging information cannot be loaded\n   *@example {C/C++ DevTools Support (DWARF)} PH1\n   *@example {http://web.dev/file.wasm} PH2\n   *@example {File not found} PH3\n   */\n  failedToLoadDebugSymbolsFor: '[{PH1}] Failed to load debug symbols for {PH2} ({PH3})',\n  /**\n   *@description Error message that is displayed in UI debugging information cannot be found for a call frame\n   *@example {main} PH1\n   */\n  failedToLoadDebugSymbolsForFunction: 'No debug information for function \"{PH1}\"',\n  /**\n   *@description Error message that is displayed in UI when a file needed for debugging information for a call frame is missing\n   *@example {mainp.debug.wasm.dwp} PH1\n   */\n  debugSymbolsIncomplete: 'The debug information for function {PH1} is incomplete',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/bindings/DebuggerLanguagePlugins.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * Generates the raw module ID for a script, which is used\n * to uniquely identify the debugging data for a script on\n * the responsible language #plugin.\n *\n * @param script the unique raw module ID for the script.\n */\nfunction rawModuleIdForScript(script: SDK.Script.Script): string {\n  return `${script.sourceURL}@${script.hash}`;\n}\n\nfunction getRawLocation(callFrame: SDK.DebuggerModel.CallFrame): Chrome.DevTools.RawLocation {\n  const {script} = callFrame;\n  return {\n    rawModuleId: rawModuleIdForScript(script),\n    codeOffset: callFrame.location().columnNumber - (script.codeOffset() || 0),\n    inlineFrameIndex: callFrame.inlineFrameIndex,\n  };\n}\n\nclass FormattingError extends Error {\n  exception: SDK.RemoteObject.RemoteObject;\n  exceptionDetails: Protocol.Runtime.ExceptionDetails;\n  constructor(exception: SDK.RemoteObject.RemoteObject, exceptionDetails: Protocol.Runtime.ExceptionDetails) {\n    const {description} = exceptionDetails.exception || {};\n    super(description || exceptionDetails.text);\n    this.exception = exception;\n    this.exceptionDetails = exceptionDetails;\n  }\n\n  static makeLocal(callFrame: SDK.DebuggerModel.CallFrame, message: string): FormattingError {\n    const exception: Protocol.Runtime.RemoteObject = {\n      type: Protocol.Runtime.RemoteObjectType.Object,\n      subtype: Protocol.Runtime.RemoteObjectSubtype.Error,\n      description: message,\n    };\n    const exceptionDetails: Protocol.Runtime\n        .ExceptionDetails = {text: 'Uncaught', exceptionId: -1, columnNumber: 0, lineNumber: 0, exception};\n    const errorObject = callFrame.debuggerModel.runtimeModel().createRemoteObject(exception);\n    return new FormattingError(errorObject, exceptionDetails);\n  }\n}\n\nclass NamespaceObject extends SDK.RemoteObject.LocalJSONObject {\n  constructor(value: typeof SDK.RemoteObject.LocalJSONObject.prototype.value) {\n    super(value);\n  }\n\n  override get description(): string {\n    return this.type;\n  }\n\n  override get type(): string {\n    return 'namespace';\n  }\n}\n\nasync function getRemoteObject(callFrame: SDK.DebuggerModel.CallFrame, object: Chrome.DevTools.ForeignObject):\n    Promise<Protocol.Runtime.RemoteObject> {\n  if (!/^(local|global|operand)$/.test(object.valueClass)) {\n    return {type: Protocol.Runtime.RemoteObjectType.Undefined};\n  }\n  const index = Number(object.index);\n  const expression = `${object.valueClass}s[${index}]`;\n  const response = await callFrame.debuggerModel.agent.invoke_evaluateOnCallFrame({\n    callFrameId: callFrame.id,\n    expression,\n    silent: true,\n    generatePreview: true,\n    throwOnSideEffect: true,\n  });\n  if (response.getError() || response.exceptionDetails) {\n    return {type: Protocol.Runtime.RemoteObjectType.Undefined};\n  }\n  return response.result;\n}\n\nasync function wrapRemoteObject(\n    callFrame: SDK.DebuggerModel.CallFrame, object: Chrome.DevTools.RemoteObject|Chrome.DevTools.ForeignObject,\n    plugin: DebuggerLanguagePlugin): Promise<SDK.RemoteObject.RemoteObject> {\n  if (object.type === 'reftype') {\n    const obj = await getRemoteObject(callFrame, object);\n    return callFrame.debuggerModel.runtimeModel().createRemoteObject(obj);\n  }\n  return new ExtensionRemoteObject(callFrame, object, plugin);\n}\n\nclass SourceScopeRemoteObject extends SDK.RemoteObject.RemoteObjectImpl {\n  variables: Chrome.DevTools.Variable[];\n  #callFrame: SDK.DebuggerModel.CallFrame;\n  #plugin: DebuggerLanguagePlugin;\n  stopId: StopId;\n\n  constructor(callFrame: SDK.DebuggerModel.CallFrame, stopId: StopId, plugin: DebuggerLanguagePlugin) {\n    super(callFrame.debuggerModel.runtimeModel(), undefined, 'object', undefined, null);\n    this.variables = [];\n    this.#callFrame = callFrame;\n    this.#plugin = plugin;\n    this.stopId = stopId;\n  }\n\n  override async doGetProperties(ownProperties: boolean, accessorPropertiesOnly: boolean, _generatePreview: boolean):\n      Promise<SDK.RemoteObject.GetPropertiesResult> {\n    if (accessorPropertiesOnly) {\n      return {properties: [], internalProperties: []} as SDK.RemoteObject.GetPropertiesResult;\n    }\n\n    const properties = [];\n    const namespaces: {\n      [x: string]: SDK.RemoteObject.RemoteObject,\n    } = {};\n\n    function makeProperty(name: string, obj: SDK.RemoteObject.RemoteObject): SDK.RemoteObject.RemoteObjectProperty {\n      return new SDK.RemoteObject.RemoteObjectProperty(\n          name, obj,\n          /* enumerable=*/ false, /* writable=*/ false, /* isOwn=*/ true, /* wasThrown=*/ false);\n    }\n\n    for (const variable of this.variables) {\n      let sourceVar: SDK.RemoteObject.RemoteObject|undefined;\n      try {\n        const evalResult = await this.#plugin.evaluate(variable.name, getRawLocation(this.#callFrame), this.stopId);\n        sourceVar = evalResult ? await wrapRemoteObject(this.#callFrame, evalResult, this.#plugin) :\n                                 new SDK.RemoteObject.LocalJSONObject(undefined);\n      } catch (e) {\n        console.warn(e);\n        sourceVar = new SDK.RemoteObject.LocalJSONObject(undefined);\n      }\n      if (variable.nestedName && variable.nestedName.length > 1) {\n        let parent: {\n          [x: string]: SDK.RemoteObject.RemoteObject,\n        } = namespaces;\n        for (let index = 0; index < variable.nestedName.length - 1; index++) {\n          const nestedName = variable.nestedName[index];\n          let child: NamespaceObject|SDK.RemoteObject.RemoteObject = parent[nestedName];\n          if (!child) {\n            child = new NamespaceObject({});\n            parent[nestedName] = child;\n          }\n          parent = child.value;\n        }\n        const name = variable.nestedName[variable.nestedName.length - 1];\n        parent[name] = sourceVar;\n      } else {\n        properties.push(makeProperty(variable.name, sourceVar));\n      }\n    }\n\n    for (const namespace in namespaces) {\n      properties.push(makeProperty(namespace, (namespaces[namespace] as SDK.RemoteObject.RemoteObject)));\n    }\n\n    return {properties, internalProperties: []};\n  }\n}\n\nexport class SourceScope implements SDK.DebuggerModel.ScopeChainEntry {\n  readonly #callFrameInternal: SDK.DebuggerModel.CallFrame;\n  readonly #typeInternal: string;\n  readonly #typeNameInternal: string;\n  readonly #iconInternal: string|undefined;\n  readonly #objectInternal: SourceScopeRemoteObject;\n  constructor(\n      callFrame: SDK.DebuggerModel.CallFrame, stopId: StopId, type: string, typeName: string, icon: string|undefined,\n      plugin: DebuggerLanguagePlugin) {\n    if (icon && new URL(icon).protocol !== 'data:') {\n      throw new Error('The icon must be a data:-URL');\n    }\n    this.#callFrameInternal = callFrame;\n    this.#typeInternal = type;\n    this.#typeNameInternal = typeName;\n    this.#iconInternal = icon;\n    this.#objectInternal = new SourceScopeRemoteObject(callFrame, stopId, plugin);\n  }\n\n  async getVariableValue(name: string): Promise<SDK.RemoteObject.RemoteObject|null> {\n    for (let v = 0; v < this.#objectInternal.variables.length; ++v) {\n      if (this.#objectInternal.variables[v].name !== name) {\n        continue;\n      }\n      const properties = await this.#objectInternal.getAllProperties(false, false);\n      if (!properties.properties) {\n        continue;\n      }\n      const {value} = properties.properties[v];\n      if (value) {\n        return value;\n      }\n    }\n    return null;\n  }\n\n  callFrame(): SDK.DebuggerModel.CallFrame {\n    return this.#callFrameInternal;\n  }\n\n  type(): string {\n    return this.#typeInternal;\n  }\n\n  typeName(): string {\n    return this.#typeNameInternal;\n  }\n\n  name(): string|undefined {\n    return undefined;\n  }\n\n  range(): null {\n    return null;\n  }\n\n  object(): SourceScopeRemoteObject {\n    return this.#objectInternal;\n  }\n\n  description(): string {\n    return '';\n  }\n\n  icon(): string|undefined {\n    return this.#iconInternal;\n  }\n\n  extraProperties(): SDK.RemoteObject.RemoteObjectProperty[] {\n    return [];\n  }\n}\n\nexport class ExtensionRemoteObject extends SDK.RemoteObject.RemoteObject {\n  private readonly extensionObject: Chrome.DevTools.RemoteObject;\n  private readonly plugin: DebuggerLanguagePlugin;\n  readonly callFrame: SDK.DebuggerModel.CallFrame;\n  constructor(\n      callFrame: SDK.DebuggerModel.CallFrame, extensionObject: Chrome.DevTools.RemoteObject,\n      plugin: DebuggerLanguagePlugin) {\n    super();\n    this.extensionObject = extensionObject;\n    this.plugin = plugin;\n    this.callFrame = callFrame;\n  }\n\n  get linearMemoryAddress(): number|undefined {\n    return this.extensionObject.linearMemoryAddress;\n  }\n\n  get linearMemorySize(): number|undefined {\n    return this.extensionObject.linearMemorySize;\n  }\n\n  override get objectId(): Protocol.Runtime.RemoteObjectId|undefined {\n    return this.extensionObject.objectId as Protocol.Runtime.RemoteObjectId;\n  }\n\n  override get type(): string {\n    if (this.extensionObject.type === 'array' || this.extensionObject.type === 'null') {\n      return 'object';\n    }\n    return this.extensionObject.type;\n  }\n\n  override get subtype(): string|undefined {\n    if (this.extensionObject.type === 'array' || this.extensionObject.type === 'null') {\n      return this.extensionObject.type;\n    }\n    return undefined;\n  }\n\n  override get value(): unknown {\n    return this.extensionObject.value;\n  }\n\n  override unserializableValue(): string|undefined {\n    return undefined;\n  }\n\n  override get description(): string|undefined {\n    return this.extensionObject.description;\n  }\n\n  override set description(description: string|undefined) {\n  }\n\n  override get hasChildren(): boolean {\n    return this.extensionObject.hasChildren;\n  }\n\n  override get preview(): Protocol.Runtime.ObjectPreview|undefined {\n    return undefined;\n  }\n\n  override get className(): string|null {\n    return this.extensionObject.className ?? null;\n  }\n\n  override arrayLength(): number {\n    return 0;\n  }\n\n  override arrayBufferByteLength(): number {\n    return 0;\n  }\n\n  override getOwnProperties(_generatePreview: boolean, _nonIndexedPropertiesOnly?: boolean):\n      Promise<SDK.RemoteObject.GetPropertiesResult> {\n    return this.getAllProperties(false, _generatePreview, _nonIndexedPropertiesOnly);\n  }\n\n  override async getAllProperties(\n      _accessorPropertiesOnly: boolean, _generatePreview: boolean,\n      _nonIndexedPropertiesOnly?: boolean): Promise<SDK.RemoteObject.GetPropertiesResult> {\n    const {objectId} = this.extensionObject;\n    if (objectId) {\n      assertNotNullOrUndefined(this.plugin.getProperties);\n      const extensionObjectProperties = await this.plugin.getProperties(objectId);\n      const properties = await Promise.all(extensionObjectProperties.map(\n          async p => new SDK.RemoteObject.RemoteObjectProperty(\n              p.name, await wrapRemoteObject(this.callFrame, p.value, this.plugin))));\n      return {properties, internalProperties: null};\n    }\n\n    return {properties: null, internalProperties: null};\n  }\n\n  override release(): void {\n    const {objectId} = this.extensionObject;\n    if (objectId) {\n      assertNotNullOrUndefined(this.plugin.releaseObject);\n      void this.plugin.releaseObject(objectId);\n    }\n  }\n\n  override debuggerModel(): SDK.DebuggerModel.DebuggerModel {\n    return this.callFrame.debuggerModel;\n  }\n\n  override runtimeModel(): SDK.RuntimeModel.RuntimeModel {\n    return this.callFrame.debuggerModel.runtimeModel();\n  }\n\n  override isLinearMemoryInspectable(): boolean {\n    return this.extensionObject.linearMemoryAddress !== undefined;\n  }\n}\n\nexport type StopId = bigint;\nexport class DebuggerLanguagePluginManager implements\n    SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel> {\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #debuggerWorkspaceBinding: DebuggerWorkspaceBinding;\n  #plugins: DebuggerLanguagePlugin[];\n  readonly #debuggerModelToData: Map<SDK.DebuggerModel.DebuggerModel, ModelData>;\n  readonly #rawModuleHandles: Map<string, {\n    rawModuleId: string,\n    plugin: DebuggerLanguagePlugin,\n    scripts: Array<SDK.Script.Script>,\n    addRawModulePromise:\n        Promise<Array<Platform.DevToolsPath.UrlString>|{missingSymbolFiles: SDK.DebuggerModel.MissingDebugFiles[]}>,\n  }>;\n  private readonly callFrameByStopId: Map<StopId, SDK.DebuggerModel.CallFrame> = new Map();\n  private readonly stopIdByCallFrame: Map<SDK.DebuggerModel.CallFrame, StopId> = new Map();\n  private nextStopId: StopId = 0n;\n\n  constructor(\n      targetManager: SDK.TargetManager.TargetManager, workspace: Workspace.Workspace.WorkspaceImpl,\n      debuggerWorkspaceBinding: DebuggerWorkspaceBinding) {\n    this.#workspace = workspace;\n    this.#debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n\n    this.#plugins = [];\n\n    this.#debuggerModelToData = new Map();\n    targetManager.observeModels(SDK.DebuggerModel.DebuggerModel, this);\n\n    this.#rawModuleHandles = new Map();\n  }\n\n  private async evaluateOnCallFrame(\n      callFrame: SDK.DebuggerModel.CallFrame, options: SDK.RuntimeModel.EvaluationOptions): Promise<{\n    object: SDK.RemoteObject.RemoteObject,\n    exceptionDetails: Protocol.Runtime.ExceptionDetails|undefined,\n  }|{\n    error: string,\n  }|null> {\n    const {script} = callFrame;\n    const {expression, returnByValue, throwOnSideEffect} = options;\n    const {plugin} = await this.rawModuleIdAndPluginForScript(script);\n    if (!plugin) {\n      return null;\n    }\n    const location = getRawLocation(callFrame);\n    const sourceLocations = await plugin.rawLocationToSourceLocation(location);\n    if (sourceLocations.length === 0) {\n      return null;\n    }\n\n    if (returnByValue) {\n      return {error: 'Cannot return by value'};\n    }\n    if (throwOnSideEffect) {\n      return {error: 'Cannot guarantee side-effect freedom'};\n    }\n\n    try {\n      const object = await plugin.evaluate(expression, location, this.stopIdForCallFrame(callFrame));\n      if (object) {\n        return {object: await wrapRemoteObject(callFrame, object, plugin), exceptionDetails: undefined};\n      }\n      return {object: new SDK.RemoteObject.LocalJSONObject(undefined), exceptionDetails: undefined};\n    } catch (error) {\n      if (error instanceof FormattingError) {\n        const {exception: object, exceptionDetails} = error;\n        return {object, exceptionDetails};\n      }\n      const {exception: object, exceptionDetails} = FormattingError.makeLocal(callFrame, error.message);\n      return {object, exceptionDetails};\n    }\n  }\n\n  stopIdForCallFrame(callFrame: SDK.DebuggerModel.CallFrame): StopId {\n    let stopId = this.stopIdByCallFrame.get(callFrame);\n    if (stopId !== undefined) {\n      return stopId;\n    }\n\n    stopId = this.nextStopId++;\n    this.stopIdByCallFrame.set(callFrame, stopId);\n    this.callFrameByStopId.set(stopId, callFrame);\n    return stopId;\n  }\n\n  callFrameForStopId(stopId: StopId): SDK.DebuggerModel.CallFrame|undefined {\n    return this.callFrameByStopId.get(stopId);\n  }\n\n  private expandCallFrames(callFrames: SDK.DebuggerModel.CallFrame[]): Promise<SDK.DebuggerModel.CallFrame[]> {\n    return Promise\n        .all(callFrames.map(async callFrame => {\n          const functionInfo = await this.getFunctionInfo(callFrame.script, callFrame.location());\n          if (functionInfo) {\n            if ('frames' in functionInfo && functionInfo.frames.length) {\n              return functionInfo.frames.map(({name}, index) => callFrame.createVirtualCallFrame(index, name));\n            }\n            if ('missingSymbolFiles' in functionInfo && functionInfo.missingSymbolFiles.length) {\n              const resources = functionInfo.missingSymbolFiles;\n              const details = i18nString(UIStrings.debugSymbolsIncomplete, {PH1: callFrame.functionName});\n              callFrame.missingDebugInfoDetails = {details, resources};\n            } else {\n              callFrame.missingDebugInfoDetails = {\n                details: i18nString(UIStrings.failedToLoadDebugSymbolsForFunction, {PH1: callFrame.functionName}),\n                resources: [],\n              };\n            }\n          }\n          return callFrame;\n        }))\n        .then(callFrames => callFrames.flat());\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    this.#debuggerModelToData.set(debuggerModel, new ModelData(debuggerModel, this.#workspace));\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.GlobalObjectCleared, this.globalObjectCleared, this);\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.ParsedScriptSource, this.parsedScriptSource, this);\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.DebuggerResumed, this.debuggerResumed, this);\n    debuggerModel.setEvaluateOnCallFrameCallback(this.evaluateOnCallFrame.bind(this));\n    debuggerModel.setExpandCallFramesCallback(this.expandCallFrames.bind(this));\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    debuggerModel.removeEventListener(SDK.DebuggerModel.Events.GlobalObjectCleared, this.globalObjectCleared, this);\n    debuggerModel.removeEventListener(SDK.DebuggerModel.Events.ParsedScriptSource, this.parsedScriptSource, this);\n    debuggerModel.removeEventListener(SDK.DebuggerModel.Events.DebuggerResumed, this.debuggerResumed, this);\n    debuggerModel.setEvaluateOnCallFrameCallback(null);\n    debuggerModel.setExpandCallFramesCallback(null);\n    const modelData = this.#debuggerModelToData.get(debuggerModel);\n    if (modelData) {\n      modelData.dispose();\n      this.#debuggerModelToData.delete(debuggerModel);\n    }\n    this.#rawModuleHandles.forEach((rawModuleHandle, rawModuleId) => {\n      const scripts = rawModuleHandle.scripts.filter(script => script.debuggerModel !== debuggerModel);\n      if (scripts.length === 0) {\n        rawModuleHandle.plugin.removeRawModule(rawModuleId).catch(error => {\n          Common.Console.Console.instance().error(\n              i18nString(UIStrings.errorInDebuggerLanguagePlugin, {PH1: error.message}), /* show=*/ false);\n        });\n        this.#rawModuleHandles.delete(rawModuleId);\n      } else {\n        rawModuleHandle.scripts = scripts;\n      }\n    });\n  }\n\n  private globalObjectCleared(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    this.modelRemoved(debuggerModel);\n    this.modelAdded(debuggerModel);\n  }\n\n  addPlugin(plugin: DebuggerLanguagePlugin): void {\n    this.#plugins.push(plugin);\n    for (const debuggerModel of this.#debuggerModelToData.keys()) {\n      for (const script of debuggerModel.scripts()) {\n        if (this.hasPluginForScript(script)) {\n          continue;\n        }\n        this.parsedScriptSource({data: script});\n      }\n    }\n  }\n\n  removePlugin(plugin: DebuggerLanguagePlugin): void {\n    this.#plugins = this.#plugins.filter(p => p !== plugin);\n    const scripts = new Set<SDK.Script.Script>();\n    this.#rawModuleHandles.forEach((rawModuleHandle, rawModuleId) => {\n      if (rawModuleHandle.plugin !== plugin) {\n        return;\n      }\n      rawModuleHandle.scripts.forEach(script => scripts.add(script));\n      this.#rawModuleHandles.delete(rawModuleId);\n    });\n    for (const script of scripts) {\n      const modelData = (this.#debuggerModelToData.get(script.debuggerModel) as ModelData);\n      modelData.removeScript(script);\n\n      // Let's see if we have another #plugin that's happy to\n      // take this orphaned script now. This is important to\n      // get right, since the same #plugin might race during\n      // unregister/register and we might already have the\n      // new instance of the #plugin added before we remove\n      // the previous instance.\n      this.parsedScriptSource({data: script});\n    }\n  }\n\n  hasPluginForScript(script: SDK.Script.Script): boolean {\n    const rawModuleId = rawModuleIdForScript(script);\n    const rawModuleHandle = this.#rawModuleHandles.get(rawModuleId);\n    return rawModuleHandle !== undefined && rawModuleHandle.scripts.includes(script);\n  }\n\n  /**\n   * Returns the responsible language #plugin and the raw module ID for a script.\n   *\n   * This ensures that the `addRawModule` call finishes first such that the\n   * caller can immediately issue calls to the returned #plugin without the\n   * risk of racing with the `addRawModule` call. The returned #plugin will be\n   * set to undefined to indicate that there's no #plugin for the script.\n   */\n  private async rawModuleIdAndPluginForScript(script: SDK.Script.Script): Promise<{\n    rawModuleId: string,\n    plugin: DebuggerLanguagePlugin|null,\n  }> {\n    const rawModuleId = rawModuleIdForScript(script);\n    const rawModuleHandle = this.#rawModuleHandles.get(rawModuleId);\n    if (rawModuleHandle) {\n      await rawModuleHandle.addRawModulePromise;\n      if (rawModuleHandle === this.#rawModuleHandles.get(rawModuleId)) {\n        return {rawModuleId, plugin: rawModuleHandle.plugin};\n      }\n    }\n    return {rawModuleId, plugin: null};\n  }\n\n  uiSourceCodeForURL(debuggerModel: SDK.DebuggerModel.DebuggerModel, url: Platform.DevToolsPath.UrlString):\n      Workspace.UISourceCode.UISourceCode|null {\n    const modelData = this.#debuggerModelToData.get(debuggerModel);\n    if (modelData) {\n      return modelData.getProject().uiSourceCodeForURL(url);\n    }\n    return null;\n  }\n\n  async rawLocationToUILocation(rawLocation: SDK.DebuggerModel.Location):\n      Promise<Workspace.UISourceCode.UILocation|null> {\n    const script = rawLocation.script();\n    if (!script) {\n      return null;\n    }\n    const {rawModuleId, plugin} = await this.rawModuleIdAndPluginForScript(script);\n    if (!plugin) {\n      return null;\n    }\n\n    const pluginLocation = {\n      rawModuleId,\n      // RawLocation.#columnNumber is the byte offset in the full raw wasm module. Plugins expect the offset in the code\n      // section, so subtract the offset of the code section in the module here.\n      codeOffset: rawLocation.columnNumber - (script.codeOffset() || 0),\n      inlineFrameIndex: rawLocation.inlineFrameIndex,\n    };\n\n    try {\n      const sourceLocations = await plugin.rawLocationToSourceLocation(pluginLocation);\n      for (const sourceLocation of sourceLocations) {\n        const uiSourceCode = this.uiSourceCodeForURL(\n            script.debuggerModel, sourceLocation.sourceFileURL as Platform.DevToolsPath.UrlString);\n        if (!uiSourceCode) {\n          continue;\n        }\n        // Absence of column information is indicated by the value `-1` in talking to language #plugins.\n        return uiSourceCode.uiLocation(\n            sourceLocation.lineNumber, sourceLocation.columnNumber >= 0 ? sourceLocation.columnNumber : undefined);\n      }\n    } catch (error) {\n      Common.Console.Console.instance().error(\n          i18nString(UIStrings.errorInDebuggerLanguagePlugin, {PH1: error.message}), /* show=*/ false);\n    }\n    return null;\n  }\n\n  uiLocationToRawLocationRanges(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number,\n      columnNumber: number|undefined = -1): Promise<{\n    start: SDK.DebuggerModel.Location,\n    end: SDK.DebuggerModel.Location,\n  }[]|null> {\n    const locationPromises: Promise<{\n      start: SDK.DebuggerModel.Location,\n      end: SDK.DebuggerModel.Location,\n    }[]>[] = [];\n    this.scriptsForUISourceCode(uiSourceCode).forEach(script => {\n      const rawModuleId = rawModuleIdForScript(script);\n      const rawModuleHandle = this.#rawModuleHandles.get(rawModuleId);\n      if (!rawModuleHandle) {\n        return;\n      }\n      const {plugin} = rawModuleHandle;\n      locationPromises.push(getLocations(rawModuleId, plugin, script));\n    });\n    if (locationPromises.length === 0) {\n      return Promise.resolve(null);\n    }\n\n    return Promise.all(locationPromises).then(locations => locations.flat()).catch(error => {\n      Common.Console.Console.instance().error(\n          i18nString(UIStrings.errorInDebuggerLanguagePlugin, {PH1: error.message}), /* show=*/ false);\n      return null;\n    });\n\n    async function getLocations(\n        rawModuleId: string, plugin: DebuggerLanguagePlugin, script: SDK.Script.Script): Promise<{\n      start: SDK.DebuggerModel.Location,\n      end: SDK.DebuggerModel.Location,\n    }[]> {\n      const pluginLocation = {rawModuleId, sourceFileURL: uiSourceCode.url(), lineNumber, columnNumber};\n\n      const rawLocations = await plugin.sourceLocationToRawLocation(pluginLocation);\n      if (!rawLocations) {\n        return [];\n      }\n      return rawLocations.map(\n          m => ({\n            start: new SDK.DebuggerModel.Location(\n                script.debuggerModel, script.scriptId, 0, Number(m.startOffset) + (script.codeOffset() || 0)),\n            end: new SDK.DebuggerModel.Location(\n                script.debuggerModel, script.scriptId, 0, Number(m.endOffset) + (script.codeOffset() || 0)),\n          }));\n    }\n  }\n\n  async uiLocationToRawLocations(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number,\n      columnNumber?: number): Promise<SDK.DebuggerModel.Location[]|null> {\n    const locationRanges = await this.uiLocationToRawLocationRanges(uiSourceCode, lineNumber, columnNumber);\n    if (!locationRanges) {\n      return null;\n    }\n    return locationRanges.map(({start}) => start);\n  }\n\n  async uiLocationRangeToRawLocationRanges(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      textRange: TextUtils.TextRange.TextRange): Promise<SDK.DebuggerModel.LocationRange[]|null> {\n    const locationRangesPromises = [];\n    for (let line = textRange.startLine; line <= textRange.endLine; ++line) {\n      locationRangesPromises.push(this.uiLocationToRawLocationRanges(uiSourceCode, line));\n    }\n    const ranges = [];\n    for (const locationRanges of await Promise.all(locationRangesPromises)) {\n      if (locationRanges === null) {\n        return null;\n      }\n      for (const range of locationRanges) {\n        const [startLocation, endLocation] = await Promise.all([\n          this.rawLocationToUILocation(range.start),\n          this.rawLocationToUILocation(range.end),\n        ]);\n        if (startLocation === null || endLocation === null) {\n          continue;\n        }\n        // Report all ranges that somehow intersect with the `textRange`. It's the\n        // responsibility of the caller to filter / clamp these ranges appropriately.\n        const overlap = textRange.intersection(new TextUtils.TextRange.TextRange(\n            startLocation.lineNumber, startLocation.columnNumber ?? 0, endLocation.lineNumber,\n            endLocation.columnNumber ?? Infinity));\n        if (!overlap.isEmpty()) {\n          ranges.push(range);\n        }\n      }\n    }\n    return ranges;\n  }\n\n  scriptsForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): SDK.Script.Script[] {\n    for (const modelData of this.#debuggerModelToData.values()) {\n      const scripts = modelData.uiSourceCodeToScripts.get(uiSourceCode);\n      if (scripts) {\n        return scripts;\n      }\n    }\n    return [];\n  }\n\n  setDebugInfoURL(script: SDK.Script.Script, externalURL: Platform.DevToolsPath.UrlString): void {\n    if (this.hasPluginForScript(script)) {\n      return;\n    }\n    script.debugSymbols = {type: Protocol.Debugger.DebugSymbolsType.ExternalDWARF, externalURL};\n    this.parsedScriptSource({data: script});\n    void script.debuggerModel.setDebugInfoURL(script, externalURL);\n  }\n\n  private parsedScriptSource(event: Common.EventTarget.EventTargetEvent<SDK.Script.Script>): void {\n    const script = event.data;\n    if (!script.sourceURL) {\n      return;\n    }\n\n    for (const plugin of this.#plugins) {\n      if (!plugin.handleScript(script)) {\n        continue;\n      }\n      const rawModuleId = rawModuleIdForScript(script);\n      let rawModuleHandle = this.#rawModuleHandles.get(rawModuleId);\n      if (!rawModuleHandle) {\n        const sourceFileURLsPromise = (async () => {\n          const console = Common.Console.Console.instance();\n          const url = script.sourceURL;\n          const symbolsUrl = (script.debugSymbols && script.debugSymbols.externalURL) || '';\n          if (symbolsUrl) {\n            console.log(i18nString(UIStrings.loadingDebugSymbolsForVia, {PH1: plugin.name, PH2: url, PH3: symbolsUrl}));\n          } else {\n            console.log(i18nString(UIStrings.loadingDebugSymbolsFor, {PH1: plugin.name, PH2: url}));\n          }\n          try {\n            const code =\n                (!symbolsUrl && Common.ParsedURL.schemeIs(url, 'wasm:')) ? await script.getWasmBytecode() : undefined;\n            const addModuleResult = await plugin.addRawModule(rawModuleId, symbolsUrl, {url, code});\n            // Check that the handle isn't stale by now. This works because the code that assigns to\n            // `rawModuleHandle` below will run before this code because of the `await` in the preceding\n            // line. This is primarily to avoid logging the message below, which would give the developer\n            // the misleading information that we're done, while in reality it was a stale call that finished.\n            if (rawModuleHandle !== this.#rawModuleHandles.get(rawModuleId)) {\n              return [];\n            }\n            if ('missingSymbolFiles' in addModuleResult) {\n              const initiator = plugin.createPageResourceLoadInitiator();\n              const missingSymbolFiles = addModuleResult.missingSymbolFiles.map(resource => {\n                const resourceUrl = resource as Platform.DevToolsPath.UrlString;\n                return {resourceUrl, initiator};\n              });\n              return {missingSymbolFiles};\n            }\n            const sourceFileURLs = addModuleResult as Platform.DevToolsPath.UrlString[];\n            if (sourceFileURLs.length === 0) {\n              console.warn(i18nString(UIStrings.loadedDebugSymbolsForButDidnt, {PH1: plugin.name, PH2: url}));\n            } else {\n              console.log(i18nString(\n                  UIStrings.loadedDebugSymbolsForFound, {PH1: plugin.name, PH2: url, PH3: sourceFileURLs.length}));\n            }\n            return sourceFileURLs;\n          } catch (error) {\n            console.error(\n                i18nString(UIStrings.failedToLoadDebugSymbolsFor, {PH1: plugin.name, PH2: url, PH3: error.message}),\n                /* show=*/ false);\n            this.#rawModuleHandles.delete(rawModuleId);\n            return [];\n          }\n        })();\n        rawModuleHandle = {rawModuleId, plugin, scripts: [script], addRawModulePromise: sourceFileURLsPromise};\n        this.#rawModuleHandles.set(rawModuleId, rawModuleHandle);\n      } else {\n        rawModuleHandle.scripts.push(script);\n      }\n\n      // Wait for the addRawModule call to finish and\n      // update the #project. It's important to check\n      // for the DebuggerModel again, which may disappear\n      // in the meantime...\n      void rawModuleHandle.addRawModulePromise.then(sourceFileURLs => {\n        if (!('missingSymbolFiles' in sourceFileURLs)) {\n          // The script might have disappeared meanwhile...\n          if (script.debuggerModel.scriptForId(script.scriptId) === script) {\n            const modelData = this.#debuggerModelToData.get(script.debuggerModel);\n            if (modelData) {  // The DebuggerModel could have disappeared meanwhile...\n              modelData.addSourceFiles(script, sourceFileURLs);\n              void this.#debuggerWorkspaceBinding.updateLocations(script);\n            }\n          }\n        }\n      });\n      return;\n    }\n  }\n\n  private debuggerResumed(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const resumedFrames =\n        Array.from(this.callFrameByStopId.values()).filter(callFrame => callFrame.debuggerModel === event.data);\n    for (const callFrame of resumedFrames) {\n      const stopId = this.stopIdByCallFrame.get(callFrame);\n      assertNotNullOrUndefined(stopId);\n      this.stopIdByCallFrame.delete(callFrame);\n      this.callFrameByStopId.delete(stopId);\n    }\n  }\n\n  getSourcesForScript(script: SDK.Script.Script):\n      Promise<Array<Platform.DevToolsPath.UrlString>|{missingSymbolFiles: SDK.DebuggerModel.MissingDebugFiles[]}|\n              undefined> {\n    const rawModuleId = rawModuleIdForScript(script);\n    const rawModuleHandle = this.#rawModuleHandles.get(rawModuleId);\n    if (rawModuleHandle) {\n      return rawModuleHandle.addRawModulePromise;\n    }\n    return Promise.resolve(undefined);\n  }\n\n  async resolveScopeChain(callFrame: SDK.DebuggerModel.CallFrame): Promise<SourceScope[]|null> {\n    const script = callFrame.script;\n    const {rawModuleId, plugin} = await this.rawModuleIdAndPluginForScript(script);\n    if (!plugin) {\n      return null;\n    }\n\n    const location = {\n      rawModuleId,\n      codeOffset: callFrame.location().columnNumber - (script.codeOffset() || 0),\n      inlineFrameIndex: callFrame.inlineFrameIndex,\n    };\n\n    const stopId = this.stopIdForCallFrame(callFrame);\n\n    try {\n      const sourceMapping = await plugin.rawLocationToSourceLocation(location);\n      if (sourceMapping.length === 0) {\n        return null;\n      }\n      const scopes = new Map<string, SourceScope>();\n      const variables = await plugin.listVariablesInScope(location);\n      for (const variable of variables || []) {\n        let scope = scopes.get(variable.scope);\n        if (!scope) {\n          const {type, typeName, icon} = await plugin.getScopeInfo(variable.scope);\n          scope = new SourceScope(callFrame, stopId, type, typeName, icon, plugin);\n          scopes.set(variable.scope, scope);\n        }\n        scope.object().variables.push(variable);\n      }\n      return Array.from(scopes.values());\n    } catch (error) {\n      Common.Console.Console.instance().error(\n          i18nString(UIStrings.errorInDebuggerLanguagePlugin, {PH1: error.message}), /* show=*/ false);\n      return null;\n    }\n  }\n\n  async getFunctionInfo(script: SDK.Script.Script, location: SDK.DebuggerModel.Location):\n      Promise<{frames: Array<Chrome.DevTools.FunctionInfo>, missingSymbolFiles: SDK.DebuggerModel.MissingDebugFiles[]}|\n              {frames: Array<Chrome.DevTools.FunctionInfo>}|{missingSymbolFiles: SDK.DebuggerModel.MissingDebugFiles[]}|\n              null> {\n    const {rawModuleId, plugin} = await this.rawModuleIdAndPluginForScript(script);\n    if (!plugin) {\n      return null;\n    }\n\n    const rawLocation: Chrome.DevTools.RawLocation = {\n      rawModuleId,\n      codeOffset: location.columnNumber - (script.codeOffset() || 0),\n      inlineFrameIndex: 0,\n    };\n\n    try {\n      const functionInfo = await plugin.getFunctionInfo(rawLocation);\n      if ('missingSymbolFiles' in functionInfo) {\n        const initiator = plugin.createPageResourceLoadInitiator();\n        const missingSymbolFiles = functionInfo.missingSymbolFiles.map(resource => {\n          const resourceUrl = resource as Platform.DevToolsPath.UrlString;\n          return {resourceUrl, initiator};\n        });\n        return {missingSymbolFiles, ...('frames' in functionInfo && {frames: functionInfo.frames})};\n      }\n      return functionInfo;\n    } catch (error) {\n      Common.Console.Console.instance().warn(i18nString(UIStrings.errorInDebuggerLanguagePlugin, {PH1: error.message}));\n      return {frames: []};\n    }\n  }\n\n  async getInlinedFunctionRanges(rawLocation: SDK.DebuggerModel.Location): Promise<{\n    start: SDK.DebuggerModel.Location,\n    end: SDK.DebuggerModel.Location,\n  }[]> {\n    const script = rawLocation.script();\n    if (!script) {\n      return [];\n    }\n    const {rawModuleId, plugin} = await this.rawModuleIdAndPluginForScript(script);\n    if (!plugin) {\n      return [];\n    }\n\n    const pluginLocation = {\n      rawModuleId,\n      // RawLocation.#columnNumber is the byte offset in the full raw wasm module. Plugins expect the offset in the code\n      // section, so subtract the offset of the code section in the module here.\n      codeOffset: rawLocation.columnNumber - (script.codeOffset() || 0),\n    };\n\n    try {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // @ts-ignore\n      const locations = await plugin.getInlinedFunctionRanges(pluginLocation);\n      return locations.map(\n          m => ({\n            start: new SDK.DebuggerModel.Location(\n                script.debuggerModel, script.scriptId, 0, Number(m.startOffset) + (script.codeOffset() || 0)),\n            end: new SDK.DebuggerModel.Location(\n                script.debuggerModel, script.scriptId, 0, Number(m.endOffset) + (script.codeOffset() || 0)),\n          }));\n    } catch (error) {\n      Common.Console.Console.instance().warn(i18nString(UIStrings.errorInDebuggerLanguagePlugin, {PH1: error.message}));\n      return [];\n    }\n  }\n\n  async getInlinedCalleesRanges(rawLocation: SDK.DebuggerModel.Location): Promise<{\n    start: SDK.DebuggerModel.Location,\n    end: SDK.DebuggerModel.Location,\n  }[]> {\n    const script = rawLocation.script();\n    if (!script) {\n      return [];\n    }\n    const {rawModuleId, plugin} = await this.rawModuleIdAndPluginForScript(script);\n    if (!plugin) {\n      return [];\n    }\n\n    const pluginLocation = {\n      rawModuleId,\n      // RawLocation.#columnNumber is the byte offset in the full raw wasm module. Plugins expect the offset in the code\n      // section, so subtract the offset of the code section in the module here.\n      codeOffset: rawLocation.columnNumber - (script.codeOffset() || 0),\n    };\n\n    try {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // @ts-ignore\n      const locations = await plugin.getInlinedCalleesRanges(pluginLocation);\n      return locations.map(\n          m => ({\n            start: new SDK.DebuggerModel.Location(\n                script.debuggerModel, script.scriptId, 0, Number(m.startOffset) + (script.codeOffset() || 0)),\n            end: new SDK.DebuggerModel.Location(\n                script.debuggerModel, script.scriptId, 0, Number(m.endOffset) + (script.codeOffset() || 0)),\n          }));\n    } catch (error) {\n      Common.Console.Console.instance().warn(i18nString(UIStrings.errorInDebuggerLanguagePlugin, {PH1: error.message}));\n      return [];\n    }\n  }\n\n  async getMappedLines(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<Set<number>|null> {\n    const rawModuleIds =\n        await Promise.all(this.scriptsForUISourceCode(uiSourceCode).map(s => this.rawModuleIdAndPluginForScript(s)));\n\n    let mappedLines: Set<number>|null = null;\n    for (const {rawModuleId, plugin} of rawModuleIds) {\n      if (!plugin) {\n        continue;\n      }\n      const lines = await plugin.getMappedLines(rawModuleId, uiSourceCode.url());\n\n      if (lines === undefined) {\n        continue;\n      }\n      if (mappedLines === null) {\n        mappedLines = new Set(lines);\n      } else {\n        lines.forEach(l => (mappedLines as Set<number>).add(l));\n      }\n    }\n    return mappedLines;\n  }\n}\n\nclass ModelData {\n  project: ContentProviderBasedProject;\n  readonly uiSourceCodeToScripts: Map<Workspace.UISourceCode.UISourceCode, SDK.Script.Script[]>;\n  constructor(debuggerModel: SDK.DebuggerModel.DebuggerModel, workspace: Workspace.Workspace.WorkspaceImpl) {\n    this.project = new ContentProviderBasedProject(\n        workspace, 'language_plugins::' + debuggerModel.target().id(), Workspace.Workspace.projectTypes.Network, '',\n        false /* isServiceProject */);\n    NetworkProject.setTargetForProject(this.project, debuggerModel.target());\n\n    this.uiSourceCodeToScripts = new Map();\n  }\n\n  addSourceFiles(script: SDK.Script.Script, urls: Platform.DevToolsPath.UrlString[]): void {\n    const initiator = script.createPageResourceLoadInitiator();\n    for (const url of urls) {\n      let uiSourceCode = this.project.uiSourceCodeForURL(url);\n      if (!uiSourceCode) {\n        uiSourceCode = this.project.createUISourceCode(url, Common.ResourceType.resourceTypes.SourceMapScript);\n        NetworkProject.setInitialFrameAttribution(uiSourceCode, script.frameId);\n\n        // Bind the uiSourceCode to the script first before we add the\n        // uiSourceCode to the #project and thereby notify the rest of\n        // the system about the new source file.\n        // https://crbug.com/1150295 is an example where the breakpoint\n        // resolution logic kicks in right after adding the uiSourceCode\n        // and at that point we already need to have the mapping in place\n        // otherwise we will not get the breakpoint right.\n        this.uiSourceCodeToScripts.set(uiSourceCode, [script]);\n\n        const contentProvider = new SDK.CompilerSourceMappingContentProvider.CompilerSourceMappingContentProvider(\n            url, Common.ResourceType.resourceTypes.SourceMapScript, initiator);\n        const mimeType = Common.ResourceType.ResourceType.mimeFromURL(url) || 'text/javascript';\n        this.project.addUISourceCodeWithProvider(uiSourceCode, contentProvider, null, mimeType);\n      } else {\n        // The same uiSourceCode can be provided by different scripts,\n        // but we don't expect that to happen frequently.\n        const scripts = (this.uiSourceCodeToScripts.get(uiSourceCode) as SDK.Script.Script[]);\n        if (!scripts.includes(script)) {\n          scripts.push(script);\n        }\n      }\n    }\n  }\n\n  removeScript(script: SDK.Script.Script): void {\n    this.uiSourceCodeToScripts.forEach((scripts, uiSourceCode) => {\n      scripts = scripts.filter(s => s !== script);\n      if (scripts.length === 0) {\n        this.uiSourceCodeToScripts.delete(uiSourceCode);\n        this.project.removeUISourceCode(uiSourceCode.url());\n      } else {\n        this.uiSourceCodeToScripts.set(uiSourceCode, scripts);\n      }\n    });\n  }\n\n  dispose(): void {\n    this.project.dispose();\n  }\n\n  getProject(): ContentProviderBasedProject {\n    return this.project;\n  }\n}\n\nexport interface DebuggerLanguagePlugin extends Chrome.DevTools.LanguageExtensionPlugin {\n  name: string;\n  handleScript(script: SDK.Script.Script): boolean;\n  createPageResourceLoadInitiator(): SDK.PageResourceLoader.PageResourceLoadInitiator;\n}\n"],
  "mappings": "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",
  "names": ["object", "exceptionDetails", "callFrames", "console"]
}
