{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/lantern/graph/NetworkNode.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {BaseNode} from './BaseNode.js';\nimport type * as Lantern from '../types/types.js';\n\nconst NON_NETWORK_SCHEMES = [\n  'blob',        // @see https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n  'data',        // @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n  'intent',      // @see https://developer.chrome.com/docs/multidevice/android/intents/\n  'file',        // @see https://en.wikipedia.org/wiki/File_URI_scheme\n  'filesystem',  // @see https://developer.mozilla.org/en-US/docs/Web/API/FileSystem\n  'chrome-extension',\n];\n\n/**\n * Note: the `protocol` field from CDP can be 'h2', 'http', (not 'https'!) or it'll be url's scheme.\n *   https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/protocol/network_handler.cc;l=598-611;drc=56d4a9a9deb30be73adcee8737c73bcb2a5ab64f\n * However, a `new URL(href).protocol` has a colon suffix.\n *   https://url.spec.whatwg.org/#dom-url-protocol\n * A URL's `scheme` is specced as the `protocol` sans-colon, but isn't exposed on a URL object.\n * This method can take all 3 of these string types as a parameter.\n *\n * @param protocol Either a networkRequest's `protocol` per CDP or a `new URL(href).protocol`\n */\nfunction isNonNetworkProtocol(protocol: string): boolean {\n  // Strip off any colon\n  const urlScheme = protocol.includes(':') ? protocol.slice(0, protocol.indexOf(':')) : protocol;\n  return NON_NETWORK_SCHEMES.includes(urlScheme);\n}\n\nclass NetworkNode<T = Lantern.AnyNetworkObject> extends BaseNode<T> {\n  _request: Lantern.NetworkRequest<T>;\n\n  constructor(networkRequest: Lantern.NetworkRequest<T>) {\n    super(networkRequest.requestId);\n    this._request = networkRequest;\n  }\n\n  override get type(): 'network' {\n    return BaseNode.types.NETWORK;\n  }\n\n  override get startTime(): number {\n    return this._request.rendererStartTime * 1000;\n  }\n\n  override get endTime(): number {\n    return this._request.networkEndTime * 1000;\n  }\n\n  get rawRequest(): Readonly<T> {\n    return this._request.rawRequest as Required<T>;\n  }\n\n  get request(): Lantern.NetworkRequest<T> {\n    return this._request;\n  }\n\n  get initiatorType(): string {\n    return this._request.initiator && this._request.initiator.type;\n  }\n\n  get fromDiskCache(): boolean {\n    return Boolean(this._request.fromDiskCache);\n  }\n\n  get isNonNetworkProtocol(): boolean {\n    // The 'protocol' field in devtools a string more like a `scheme`\n    return isNonNetworkProtocol(this.request.protocol) ||\n        // But `protocol` can fail to be populated if the request fails, so fallback to scheme.\n        isNonNetworkProtocol(this.request.parsedURL.scheme);\n  }\n\n  /**\n   * Returns whether this network request can be downloaded without a TCP connection.\n   * During simulation we treat data coming in over a network connection separately from on-device data.\n   */\n  get isConnectionless(): boolean {\n    return this.fromDiskCache || this.isNonNetworkProtocol;\n  }\n\n  hasRenderBlockingPriority(): boolean {\n    const priority = this._request.priority;\n    const isScript = this._request.resourceType === 'Script';\n    const isDocument = this._request.resourceType === 'Document';\n    const isBlockingScript = priority === 'High' && isScript;\n    const isBlockingHtmlImport = priority === 'High' && isDocument;\n    return priority === 'VeryHigh' || isBlockingScript || isBlockingHtmlImport;\n  }\n\n  override cloneWithoutRelationships(): NetworkNode<T> {\n    const node = new NetworkNode(this._request);\n    node.setIsMainDocument(this._isMainDocument);\n    return node;\n  }\n}\n\nexport {NetworkNode};\n"],
  "mappings": ";AAIA,SAAQ,gBAAe;AAGvB,MAAM,sBAAsB;AAAA,EAC1B;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AACF;AAYA,SAAS,qBAAqB,UAA2B;AAEvD,QAAM,YAAY,SAAS,SAAS,GAAG,IAAI,SAAS,MAAM,GAAG,SAAS,QAAQ,GAAG,CAAC,IAAI;AACtF,SAAO,oBAAoB,SAAS,SAAS;AAC/C;AAEA,MAAM,oBAAkD,SAAY;AAAA,EAClE;AAAA,EAEA,YAAY,gBAA2C;AACrD,UAAM,eAAe,SAAS;AAC9B,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,IAAa,OAAkB;AAC7B,WAAO,SAAS,MAAM;AAAA,EACxB;AAAA,EAEA,IAAa,YAAoB;AAC/B,WAAO,KAAK,SAAS,oBAAoB;AAAA,EAC3C;AAAA,EAEA,IAAa,UAAkB;AAC7B,WAAO,KAAK,SAAS,iBAAiB;AAAA,EACxC;AAAA,EAEA,IAAI,aAA0B;AAC5B,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,IAAI,UAAqC;AACvC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,gBAAwB;AAC1B,WAAO,KAAK,SAAS,aAAa,KAAK,SAAS,UAAU;AAAA,EAC5D;AAAA,EAEA,IAAI,gBAAyB;AAC3B,WAAO,QAAQ,KAAK,SAAS,aAAa;AAAA,EAC5C;AAAA,EAEA,IAAI,uBAAgC;AAElC,WAAO,qBAAqB,KAAK,QAAQ,QAAQ;AAAA,IAE7C,qBAAqB,KAAK,QAAQ,UAAU,MAAM;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,mBAA4B;AAC9B,WAAO,KAAK,iBAAiB,KAAK;AAAA,EACpC;AAAA,EAEA,4BAAqC;AACnC,UAAM,WAAW,KAAK,SAAS;AAC/B,UAAM,WAAW,KAAK,SAAS,iBAAiB;AAChD,UAAM,aAAa,KAAK,SAAS,iBAAiB;AAClD,UAAM,mBAAmB,aAAa,UAAU;AAChD,UAAM,uBAAuB,aAAa,UAAU;AACpD,WAAO,aAAa,cAAc,oBAAoB;AAAA,EACxD;AAAA,EAES,4BAA4C;AACnD,UAAM,OAAO,IAAI,YAAY,KAAK,QAAQ;AAC1C,SAAK,kBAAkB,KAAK,eAAe;AAC3C,WAAO;AAAA,EACT;AACF;AAEA,SAAQ;",
  "names": []
}
