{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/emulation/DeviceModeModel.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {\n  type EmulatedDevice,\n  Horizontal,\n  HorizontalSpanned,\n  type Mode,\n  Vertical,\n  VerticalSpanned,\n} from './EmulatedDevices.js';\n\nconst UIStrings = {\n  /**\n   * @description Error message shown in the Devices settings pane when the user enters an empty\n   * width for a custom device.\n   */\n  widthCannotBeEmpty: 'Width cannot be empty.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user enters an invalid\n   * width for a custom device.\n   */\n  widthMustBeANumber: 'Width must be a number.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user has entered a width\n   * for a custom device that is too large.\n   * @example {9999} PH1\n   */\n  widthMustBeLessThanOrEqualToS: 'Width must be less than or equal to {PH1}.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user has entered a width\n   * for a custom device that is too small.\n   * @example {50} PH1\n   */\n  widthMustBeGreaterThanOrEqualToS: 'Width must be greater than or equal to {PH1}.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user enters an empty\n   * height for a custom device.\n   */\n  heightCannotBeEmpty: 'Height cannot be empty.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user enters an invalid\n   * height for a custom device.\n   */\n  heightMustBeANumber: 'Height must be a number.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user has entered a height\n   * for a custom device that is too large.\n   * @example {9999} PH1\n   */\n  heightMustBeLessThanOrEqualToS: 'Height must be less than or equal to {PH1}.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user has entered a height\n   * for a custom device that is too small.\n   * @example {50} PH1\n   */\n  heightMustBeGreaterThanOrEqualTo: 'Height must be greater than or equal to {PH1}.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user enters an invalid\n   * device pixel ratio for a custom device.\n   */\n  devicePixelRatioMustBeANumberOr: 'Device pixel ratio must be a number or blank.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user enters a device\n   * pixel ratio for a custom device that is too large.\n   * @example {10} PH1\n   */\n  devicePixelRatioMustBeLessThanOr: 'Device pixel ratio must be less than or equal to {PH1}.',\n  /**\n   * @description Error message shown in the Devices settings pane when the user enters a device\n   * pixel ratio for a custom device that is too small.\n   * @example {0} PH1\n   */\n  devicePixelRatioMustBeGreater: 'Device pixel ratio must be greater than or equal to {PH1}.',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/emulation/DeviceModeModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet deviceModeModelInstance: DeviceModeModel|null;\n\nexport class DeviceModeModel extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.EmulationModel.EmulationModel> {\n  #screenRectInternal: Rect;\n  #visiblePageRectInternal: Rect;\n  #availableSize: UI.Geometry.Size;\n  #preferredSize: UI.Geometry.Size;\n  #initialized: boolean;\n  #appliedDeviceSizeInternal: UI.Geometry.Size;\n  #appliedDeviceScaleFactorInternal: number;\n  #appliedUserAgentTypeInternal: UA;\n  readonly #webPlatformExperimentalFeaturesEnabledInternal: boolean;\n  readonly #scaleSettingInternal: Common.Settings.Setting<number>;\n  #scaleInternal: number;\n  #widthSetting: Common.Settings.Setting<number>;\n  #heightSetting: Common.Settings.Setting<number>;\n  #uaSettingInternal: Common.Settings.Setting<UA>;\n  readonly #deviceScaleFactorSettingInternal: Common.Settings.Setting<number>;\n  readonly #deviceOutlineSettingInternal: Common.Settings.Setting<boolean>;\n  readonly #toolbarControlsEnabledSettingInternal: Common.Settings.Setting<boolean>;\n  #typeInternal: Type;\n  #deviceInternal: EmulatedDevice|null;\n  #modeInternal: Mode|null;\n  #fitScaleInternal: number;\n  #touchEnabled: boolean;\n  #touchMobile: boolean;\n  #emulationModel: SDK.EmulationModel.EmulationModel|null;\n  #onModelAvailable: (() => void)|null;\n  #outlineRectInternal?: Rect;\n\n  private constructor() {\n    super();\n    this.#screenRectInternal = new Rect(0, 0, 1, 1);\n    this.#visiblePageRectInternal = new Rect(0, 0, 1, 1);\n    this.#availableSize = new UI.Geometry.Size(1, 1);\n    this.#preferredSize = new UI.Geometry.Size(1, 1);\n    this.#initialized = false;\n    this.#appliedDeviceSizeInternal = new UI.Geometry.Size(1, 1);\n    this.#appliedDeviceScaleFactorInternal = window.devicePixelRatio;\n    this.#appliedUserAgentTypeInternal = UA.DESKTOP;\n    this.#webPlatformExperimentalFeaturesEnabledInternal =\n        window.visualViewport ? 'segments' in window.visualViewport : false;\n\n    this.#scaleSettingInternal = Common.Settings.Settings.instance().createSetting('emulation.device-scale', 1);\n    // We've used to allow zero before.\n    if (!this.#scaleSettingInternal.get()) {\n      this.#scaleSettingInternal.set(1);\n    }\n    this.#scaleSettingInternal.addChangeListener(this.scaleSettingChanged, this);\n    this.#scaleInternal = 1;\n\n    this.#widthSetting = Common.Settings.Settings.instance().createSetting('emulation.device-width', 400);\n    if (this.#widthSetting.get() < MinDeviceSize) {\n      this.#widthSetting.set(MinDeviceSize);\n    }\n    if (this.#widthSetting.get() > MaxDeviceSize) {\n      this.#widthSetting.set(MaxDeviceSize);\n    }\n    this.#widthSetting.addChangeListener(this.widthSettingChanged, this);\n\n    this.#heightSetting = Common.Settings.Settings.instance().createSetting('emulation.device-height', 0);\n    if (this.#heightSetting.get() && this.#heightSetting.get() < MinDeviceSize) {\n      this.#heightSetting.set(MinDeviceSize);\n    }\n    if (this.#heightSetting.get() > MaxDeviceSize) {\n      this.#heightSetting.set(MaxDeviceSize);\n    }\n    this.#heightSetting.addChangeListener(this.heightSettingChanged, this);\n\n    this.#uaSettingInternal = Common.Settings.Settings.instance().createSetting('emulation.device-ua', UA.MOBILE);\n    this.#uaSettingInternal.addChangeListener(this.uaSettingChanged, this);\n    this.#deviceScaleFactorSettingInternal =\n        Common.Settings.Settings.instance().createSetting('emulation.device-scale-factor', 0);\n    this.#deviceScaleFactorSettingInternal.addChangeListener(this.deviceScaleFactorSettingChanged, this);\n\n    this.#deviceOutlineSettingInternal =\n        Common.Settings.Settings.instance().moduleSetting('emulation.show-device-outline');\n    this.#deviceOutlineSettingInternal.addChangeListener(this.deviceOutlineSettingChanged, this);\n\n    this.#toolbarControlsEnabledSettingInternal = Common.Settings.Settings.instance().createSetting(\n        'emulation.toolbar-controls-enabled', true, Common.Settings.SettingStorageType.SESSION);\n\n    this.#typeInternal = Type.None;\n    this.#deviceInternal = null;\n    this.#modeInternal = null;\n    this.#fitScaleInternal = 1;\n    this.#touchEnabled = false;\n    this.#touchMobile = false;\n\n    this.#emulationModel = null;\n    this.#onModelAvailable = null;\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.EmulationModel.EmulationModel, this);\n  }\n\n  static instance(opts?: {forceNew: boolean}): DeviceModeModel {\n    if (!deviceModeModelInstance || opts?.forceNew) {\n      deviceModeModelInstance = new DeviceModeModel();\n    }\n\n    return deviceModeModelInstance;\n  }\n\n  /**\n   * This wraps `instance()` in a try/catch because in some DevTools entry points\n   * (such as worker_app.ts) the Emulation panel is not included and as such\n   * the below code fails; it tries to instantiate the model which requires\n   * reading the value of a setting which has not been registered.\n   * See crbug.com/361515458 for an example bug that this resolves.\n   */\n  static tryInstance(opts?: {forceNew: boolean}): DeviceModeModel|null {\n    try {\n      return this.instance(opts);\n    } catch {\n      return null;\n    }\n  }\n\n  static widthValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    let valid = false;\n    let errorMessage;\n\n    if (!value) {\n      errorMessage = i18nString(UIStrings.widthCannotBeEmpty);\n    } else if (!/^[\\d]+$/.test(value)) {\n      errorMessage = i18nString(UIStrings.widthMustBeANumber);\n    } else if (Number(value) > MaxDeviceSize) {\n      errorMessage = i18nString(UIStrings.widthMustBeLessThanOrEqualToS, {PH1: MaxDeviceSize});\n    } else if (Number(value) < MinDeviceSize) {\n      errorMessage = i18nString(UIStrings.widthMustBeGreaterThanOrEqualToS, {PH1: MinDeviceSize});\n    } else {\n      valid = true;\n    }\n\n    return {valid, errorMessage};\n  }\n\n  static heightValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    let valid = false;\n    let errorMessage;\n\n    if (!value) {\n      errorMessage = i18nString(UIStrings.heightCannotBeEmpty);\n    } else if (!/^[\\d]+$/.test(value)) {\n      errorMessage = i18nString(UIStrings.heightMustBeANumber);\n    } else if (Number(value) > MaxDeviceSize) {\n      errorMessage = i18nString(UIStrings.heightMustBeLessThanOrEqualToS, {PH1: MaxDeviceSize});\n    } else if (Number(value) < MinDeviceSize) {\n      errorMessage = i18nString(UIStrings.heightMustBeGreaterThanOrEqualTo, {PH1: MinDeviceSize});\n    } else {\n      valid = true;\n    }\n\n    return {valid, errorMessage};\n  }\n\n  static scaleValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    let valid = false;\n    let errorMessage;\n    const parsedValue = Number(value.trim());\n\n    if (!value) {\n      valid = true;\n    } else if (Number.isNaN(parsedValue)) {\n      errorMessage = i18nString(UIStrings.devicePixelRatioMustBeANumberOr);\n    } else if (Number(value) > MaxDeviceScaleFactor) {\n      errorMessage = i18nString(UIStrings.devicePixelRatioMustBeLessThanOr, {PH1: MaxDeviceScaleFactor});\n    } else if (Number(value) < MinDeviceScaleFactor) {\n      errorMessage = i18nString(UIStrings.devicePixelRatioMustBeGreater, {PH1: MinDeviceScaleFactor});\n    } else {\n      valid = true;\n    }\n\n    return {valid, errorMessage};\n  }\n\n  get scaleSettingInternal(): Common.Settings.Setting<number> {\n    return this.#scaleSettingInternal;\n  }\n\n  setAvailableSize(availableSize: UI.Geometry.Size, preferredSize: UI.Geometry.Size): void {\n    this.#availableSize = availableSize;\n    this.#preferredSize = preferredSize;\n    this.#initialized = true;\n    this.calculateAndEmulate(false);\n  }\n\n  emulate(type: Type, device: EmulatedDevice|null, mode: Mode|null, scale?: number): void {\n    const resetPageScaleFactor =\n        this.#typeInternal !== type || this.#deviceInternal !== device || this.#modeInternal !== mode;\n    this.#typeInternal = type;\n\n    if (type === Type.Device && device && mode) {\n      console.assert(Boolean(device) && Boolean(mode), 'Must pass device and mode for device emulation');\n      this.#modeInternal = mode;\n      this.#deviceInternal = device;\n      if (this.#initialized) {\n        const orientation = device.orientationByName(mode.orientation);\n        this.#scaleSettingInternal.set(\n            scale ||\n            this.calculateFitScale(orientation.width, orientation.height, this.currentOutline(), this.currentInsets()));\n      }\n    } else {\n      this.#deviceInternal = null;\n      this.#modeInternal = null;\n    }\n\n    if (type !== Type.None) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.DeviceModeEnabled);\n    }\n    this.calculateAndEmulate(resetPageScaleFactor);\n  }\n\n  setWidth(width: number): void {\n    const max = Math.min(MaxDeviceSize, this.preferredScaledWidth());\n    width = Math.max(Math.min(width, max), 1);\n    this.#widthSetting.set(width);\n  }\n\n  setWidthAndScaleToFit(width: number): void {\n    width = Math.max(Math.min(width, MaxDeviceSize), 1);\n    this.#scaleSettingInternal.set(this.calculateFitScale(width, this.#heightSetting.get()));\n    this.#widthSetting.set(width);\n  }\n\n  setHeight(height: number): void {\n    const max = Math.min(MaxDeviceSize, this.preferredScaledHeight());\n    height = Math.max(Math.min(height, max), 0);\n    if (height === this.preferredScaledHeight()) {\n      height = 0;\n    }\n    this.#heightSetting.set(height);\n  }\n\n  setHeightAndScaleToFit(height: number): void {\n    height = Math.max(Math.min(height, MaxDeviceSize), 0);\n    this.#scaleSettingInternal.set(this.calculateFitScale(this.#widthSetting.get(), height));\n    this.#heightSetting.set(height);\n  }\n\n  setScale(scale: number): void {\n    this.#scaleSettingInternal.set(scale);\n  }\n\n  device(): EmulatedDevice|null {\n    return this.#deviceInternal;\n  }\n\n  mode(): Mode|null {\n    return this.#modeInternal;\n  }\n\n  type(): Type {\n    return this.#typeInternal;\n  }\n\n  screenImage(): string {\n    return (this.#deviceInternal && this.#modeInternal) ? this.#deviceInternal.modeImage(this.#modeInternal) : '';\n  }\n\n  outlineImage(): string {\n    return (this.#deviceInternal && this.#modeInternal && this.#deviceOutlineSettingInternal.get()) ?\n        this.#deviceInternal.outlineImage(this.#modeInternal) :\n        '';\n  }\n\n  outlineRect(): Rect|null {\n    return this.#outlineRectInternal || null;\n  }\n\n  screenRect(): Rect {\n    return this.#screenRectInternal;\n  }\n\n  visiblePageRect(): Rect {\n    return this.#visiblePageRectInternal;\n  }\n\n  scale(): number {\n    return this.#scaleInternal;\n  }\n\n  fitScale(): number {\n    return this.#fitScaleInternal;\n  }\n\n  appliedDeviceSize(): UI.Geometry.Size {\n    return this.#appliedDeviceSizeInternal;\n  }\n\n  appliedDeviceScaleFactor(): number {\n    return this.#appliedDeviceScaleFactorInternal;\n  }\n\n  appliedUserAgentType(): UA {\n    return this.#appliedUserAgentTypeInternal;\n  }\n\n  isFullHeight(): boolean {\n    return !this.#heightSetting.get();\n  }\n\n  isMobile(): boolean {\n    switch (this.#typeInternal) {\n      case Type.Device:\n        return this.#deviceInternal ? this.#deviceInternal.mobile() : false;\n      case Type.None:\n        return false;\n      case Type.Responsive:\n        return this.#uaSettingInternal.get() === UA.MOBILE || this.#uaSettingInternal.get() === UA.MOBILE_NO_TOUCH;\n    }\n    return false;\n  }\n\n  enabledSetting(): Common.Settings.Setting<boolean> {\n    return Common.Settings.Settings.instance().createSetting('emulation.show-device-mode', false);\n  }\n\n  scaleSetting(): Common.Settings.Setting<number> {\n    return this.#scaleSettingInternal;\n  }\n\n  uaSetting(): Common.Settings.Setting<UA> {\n    return this.#uaSettingInternal;\n  }\n\n  deviceScaleFactorSetting(): Common.Settings.Setting<number> {\n    return this.#deviceScaleFactorSettingInternal;\n  }\n\n  deviceOutlineSetting(): Common.Settings.Setting<boolean> {\n    return this.#deviceOutlineSettingInternal;\n  }\n\n  toolbarControlsEnabledSetting(): Common.Settings.Setting<boolean> {\n    return this.#toolbarControlsEnabledSettingInternal;\n  }\n\n  reset(): void {\n    this.#deviceScaleFactorSettingInternal.set(0);\n    this.#scaleSettingInternal.set(1);\n    this.setWidth(400);\n    this.setHeight(0);\n    this.#uaSettingInternal.set(UA.MOBILE);\n  }\n\n  modelAdded(emulationModel: SDK.EmulationModel.EmulationModel): void {\n    if (emulationModel.target() === SDK.TargetManager.TargetManager.instance().primaryPageTarget() &&\n        emulationModel.supportsDeviceEmulation()) {\n      this.#emulationModel = emulationModel;\n      if (this.#onModelAvailable) {\n        const callback = this.#onModelAvailable;\n        this.#onModelAvailable = null;\n        callback();\n      }\n      const resourceTreeModel = emulationModel.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n      if (resourceTreeModel) {\n        resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.FrameResized, this.onFrameChange, this);\n        resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.FrameNavigated, this.onFrameChange, this);\n      }\n    } else {\n      void emulationModel.emulateTouch(this.#touchEnabled, this.#touchMobile);\n    }\n  }\n\n  modelRemoved(emulationModel: SDK.EmulationModel.EmulationModel): void {\n    if (this.#emulationModel === emulationModel) {\n      this.#emulationModel = null;\n    }\n  }\n\n  inspectedURL(): string|null {\n    return this.#emulationModel ? this.#emulationModel.target().inspectedURL() : null;\n  }\n\n  private onFrameChange(): void {\n    const overlayModel = this.#emulationModel ? this.#emulationModel.overlayModel() : null;\n    if (!overlayModel) {\n      return;\n    }\n\n    this.showHingeIfApplicable(overlayModel);\n  }\n\n  private scaleSettingChanged(): void {\n    this.calculateAndEmulate(false);\n  }\n\n  private widthSettingChanged(): void {\n    this.calculateAndEmulate(false);\n  }\n\n  private heightSettingChanged(): void {\n    this.calculateAndEmulate(false);\n  }\n\n  private uaSettingChanged(): void {\n    this.calculateAndEmulate(true);\n  }\n\n  private deviceScaleFactorSettingChanged(): void {\n    this.calculateAndEmulate(false);\n  }\n\n  private deviceOutlineSettingChanged(): void {\n    this.calculateAndEmulate(false);\n  }\n\n  private preferredScaledWidth(): number {\n    return Math.floor(this.#preferredSize.width / (this.#scaleSettingInternal.get() || 1));\n  }\n\n  private preferredScaledHeight(): number {\n    return Math.floor(this.#preferredSize.height / (this.#scaleSettingInternal.get() || 1));\n  }\n\n  private currentOutline(): Insets {\n    let outline: Insets = new Insets(0, 0, 0, 0);\n    if (this.#typeInternal !== Type.Device || !this.#deviceInternal || !this.#modeInternal) {\n      return outline;\n    }\n    const orientation = this.#deviceInternal.orientationByName(this.#modeInternal.orientation);\n    if (this.#deviceOutlineSettingInternal.get()) {\n      outline = orientation.outlineInsets || outline;\n    }\n    return outline;\n  }\n\n  private currentInsets(): Insets {\n    if (this.#typeInternal !== Type.Device || !this.#modeInternal) {\n      return new Insets(0, 0, 0, 0);\n    }\n    return this.#modeInternal.insets;\n  }\n\n  private getScreenOrientationType(): Protocol.Emulation.ScreenOrientationType {\n    if (!this.#modeInternal) {\n      throw new Error('Mode required to get orientation type.');\n    }\n    switch (this.#modeInternal.orientation) {\n      case VerticalSpanned:\n      case Vertical:\n        return Protocol.Emulation.ScreenOrientationType.PortraitPrimary;\n      case HorizontalSpanned:\n      case Horizontal:\n      default:\n        return Protocol.Emulation.ScreenOrientationType.LandscapePrimary;\n    }\n  }\n\n  private calculateAndEmulate(resetPageScaleFactor: boolean): void {\n    if (!this.#emulationModel) {\n      this.#onModelAvailable = this.calculateAndEmulate.bind(this, resetPageScaleFactor);\n    }\n    const mobile = this.isMobile();\n    const overlayModel = this.#emulationModel ? this.#emulationModel.overlayModel() : null;\n    if (overlayModel) {\n      this.showHingeIfApplicable(overlayModel);\n    }\n    if (this.#typeInternal === Type.Device && this.#deviceInternal && this.#modeInternal) {\n      const orientation = this.#deviceInternal.orientationByName(this.#modeInternal.orientation);\n      const outline = this.currentOutline();\n      const insets = this.currentInsets();\n      this.#fitScaleInternal = this.calculateFitScale(orientation.width, orientation.height, outline, insets);\n      if (mobile) {\n        this.#appliedUserAgentTypeInternal = this.#deviceInternal.touch() ? UA.MOBILE : UA.MOBILE_NO_TOUCH;\n      } else {\n        this.#appliedUserAgentTypeInternal = this.#deviceInternal.touch() ? UA.DESKTOP_TOUCH : UA.DESKTOP;\n      }\n      this.applyDeviceMetrics(\n          new UI.Geometry.Size(orientation.width, orientation.height), insets, outline,\n          this.#scaleSettingInternal.get(), this.#deviceInternal.deviceScaleFactor, mobile,\n          this.getScreenOrientationType(), resetPageScaleFactor, this.#webPlatformExperimentalFeaturesEnabledInternal);\n      this.applyUserAgent(this.#deviceInternal.userAgent, this.#deviceInternal.userAgentMetadata);\n      this.applyTouch(this.#deviceInternal.touch(), mobile);\n    } else if (this.#typeInternal === Type.None) {\n      this.#fitScaleInternal = this.calculateFitScale(this.#availableSize.width, this.#availableSize.height);\n      this.#appliedUserAgentTypeInternal = UA.DESKTOP;\n      this.applyDeviceMetrics(\n          this.#availableSize, new Insets(0, 0, 0, 0), new Insets(0, 0, 0, 0), 1, 0, mobile, null,\n          resetPageScaleFactor);\n      this.applyUserAgent('', null);\n      this.applyTouch(false, false);\n    } else if (this.#typeInternal === Type.Responsive) {\n      let screenWidth = this.#widthSetting.get();\n      if (!screenWidth || screenWidth > this.preferredScaledWidth()) {\n        screenWidth = this.preferredScaledWidth();\n      }\n      let screenHeight = this.#heightSetting.get();\n      if (!screenHeight || screenHeight > this.preferredScaledHeight()) {\n        screenHeight = this.preferredScaledHeight();\n      }\n      const defaultDeviceScaleFactor = mobile ? defaultMobileScaleFactor : 0;\n      this.#fitScaleInternal = this.calculateFitScale(this.#widthSetting.get(), this.#heightSetting.get());\n      this.#appliedUserAgentTypeInternal = this.#uaSettingInternal.get();\n      this.applyDeviceMetrics(\n          new UI.Geometry.Size(screenWidth, screenHeight), new Insets(0, 0, 0, 0), new Insets(0, 0, 0, 0),\n          this.#scaleSettingInternal.get(), this.#deviceScaleFactorSettingInternal.get() || defaultDeviceScaleFactor,\n          mobile,\n          screenHeight >= screenWidth ? Protocol.Emulation.ScreenOrientationType.PortraitPrimary :\n                                        Protocol.Emulation.ScreenOrientationType.LandscapePrimary,\n          resetPageScaleFactor);\n      this.applyUserAgent(mobile ? defaultMobileUserAgent : '', mobile ? defaultMobileUserAgentMetadata : null);\n      this.applyTouch(\n          this.#uaSettingInternal.get() === UA.DESKTOP_TOUCH || this.#uaSettingInternal.get() === UA.MOBILE,\n          this.#uaSettingInternal.get() === UA.MOBILE);\n    }\n\n    if (overlayModel) {\n      overlayModel.setShowViewportSizeOnResize(this.#typeInternal === Type.None);\n    }\n    this.dispatchEventToListeners(Events.UPDATED);\n  }\n\n  private calculateFitScale(screenWidth: number, screenHeight: number, outline?: Insets, insets?: Insets): number {\n    const outlineWidth = outline ? outline.left + outline.right : 0;\n    const outlineHeight = outline ? outline.top + outline.bottom : 0;\n    const insetsWidth = insets ? insets.left + insets.right : 0;\n    const insetsHeight = insets ? insets.top + insets.bottom : 0;\n    let scale = Math.min(\n        screenWidth ? this.#preferredSize.width / (screenWidth + outlineWidth) : 1,\n        screenHeight ? this.#preferredSize.height / (screenHeight + outlineHeight) : 1);\n    scale = Math.min(Math.floor(scale * 100), 100);\n\n    let sharpScale = scale;\n    while (sharpScale > scale * 0.7) {\n      let sharp = true;\n      if (screenWidth) {\n        sharp = sharp && Number.isInteger((screenWidth - insetsWidth) * sharpScale / 100);\n      }\n      if (screenHeight) {\n        sharp = sharp && Number.isInteger((screenHeight - insetsHeight) * sharpScale / 100);\n      }\n      if (sharp) {\n        return sharpScale / 100;\n      }\n      sharpScale -= 1;\n    }\n    return scale / 100;\n  }\n\n  setSizeAndScaleToFit(width: number, height: number): void {\n    this.#scaleSettingInternal.set(this.calculateFitScale(width, height));\n    this.setWidth(width);\n    this.setHeight(height);\n  }\n\n  private applyUserAgent(userAgent: string, userAgentMetadata: Protocol.Emulation.UserAgentMetadata|null): void {\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setUserAgentOverride(userAgent, userAgentMetadata);\n  }\n\n  private applyDeviceMetrics(\n      screenSize: UI.Geometry.Size, insets: Insets, outline: Insets, scale: number, deviceScaleFactor: number,\n      mobile: boolean, screenOrientation: Protocol.Emulation.ScreenOrientationType|null, resetPageScaleFactor: boolean,\n      forceMetricsOverride: boolean|undefined = false): void {\n    screenSize.width = Math.max(1, Math.floor(screenSize.width));\n    screenSize.height = Math.max(1, Math.floor(screenSize.height));\n\n    let pageWidth: 0|number = screenSize.width - insets.left - insets.right;\n    let pageHeight: 0|number = screenSize.height - insets.top - insets.bottom;\n\n    const positionX = insets.left;\n    const positionY = insets.top;\n    const screenOrientationAngle =\n        screenOrientation === Protocol.Emulation.ScreenOrientationType.LandscapePrimary ? 90 : 0;\n\n    this.#appliedDeviceSizeInternal = screenSize;\n    this.#appliedDeviceScaleFactorInternal = deviceScaleFactor || window.devicePixelRatio;\n    this.#screenRectInternal = new Rect(\n        Math.max(0, (this.#availableSize.width - screenSize.width * scale) / 2), outline.top * scale,\n        screenSize.width * scale, screenSize.height * scale);\n    this.#outlineRectInternal = new Rect(\n        this.#screenRectInternal.left - outline.left * scale, 0,\n        (outline.left + screenSize.width + outline.right) * scale,\n        (outline.top + screenSize.height + outline.bottom) * scale);\n    this.#visiblePageRectInternal = new Rect(\n        positionX * scale, positionY * scale,\n        Math.min(pageWidth * scale, this.#availableSize.width - this.#screenRectInternal.left - positionX * scale),\n        Math.min(pageHeight * scale, this.#availableSize.height - this.#screenRectInternal.top - positionY * scale));\n    this.#scaleInternal = scale;\n    if (!forceMetricsOverride) {\n      // When sending displayFeature, we cannot use the optimization below due to backend restrictions.\n      if (scale === 1 && this.#availableSize.width >= screenSize.width &&\n          this.#availableSize.height >= screenSize.height) {\n        // When we have enough space, no page size override is required. This will speed things up and remove lag.\n        pageWidth = 0;\n        pageHeight = 0;\n      }\n      if (this.#visiblePageRectInternal.width === pageWidth * scale &&\n          this.#visiblePageRectInternal.height === pageHeight * scale && Number.isInteger(pageWidth * scale) &&\n          Number.isInteger(pageHeight * scale)) {\n        // When we only have to apply scale, do not resize the page. This will speed things up and remove lag.\n        pageWidth = 0;\n        pageHeight = 0;\n      }\n    }\n\n    if (!this.#emulationModel) {\n      return;\n    }\n\n    if (resetPageScaleFactor) {\n      void this.#emulationModel.resetPageScaleFactor();\n    }\n    if (pageWidth || pageHeight || mobile || deviceScaleFactor || scale !== 1 || screenOrientation ||\n        forceMetricsOverride) {\n      const metrics: Protocol.Emulation.SetDeviceMetricsOverrideRequest = {\n        width: pageWidth,\n        height: pageHeight,\n        deviceScaleFactor,\n        mobile,\n        scale,\n        screenWidth: screenSize.width,\n        screenHeight: screenSize.height,\n        positionX,\n        positionY,\n        dontSetVisibleSize: true,\n        displayFeature: undefined,\n        devicePosture: undefined,\n        screenOrientation: undefined,\n      };\n      const displayFeature = this.getDisplayFeature();\n      if (displayFeature) {\n        metrics.displayFeature = displayFeature;\n        metrics.devicePosture = {type: Protocol.Emulation.DevicePostureType.Folded};\n      } else {\n        metrics.devicePosture = {type: Protocol.Emulation.DevicePostureType.Continuous};\n      }\n      if (screenOrientation) {\n        metrics.screenOrientation = {type: screenOrientation, angle: screenOrientationAngle};\n      }\n      void this.#emulationModel.emulateDevice(metrics);\n    } else {\n      void this.#emulationModel.emulateDevice(null);\n    }\n  }\n\n  exitHingeMode(): void {\n    const overlayModel = this.#emulationModel ? this.#emulationModel.overlayModel() : null;\n    if (overlayModel) {\n      overlayModel.showHingeForDualScreen(null);\n    }\n  }\n\n  webPlatformExperimentalFeaturesEnabled(): boolean {\n    return this.#webPlatformExperimentalFeaturesEnabledInternal;\n  }\n\n  shouldReportDisplayFeature(): boolean {\n    return this.#webPlatformExperimentalFeaturesEnabledInternal;\n  }\n\n  async captureScreenshot(fullSize: boolean, clip?: Protocol.Page.Viewport): Promise<string|null> {\n    const screenCaptureModel =\n        this.#emulationModel ? this.#emulationModel.target().model(SDK.ScreenCaptureModel.ScreenCaptureModel) : null;\n    if (!screenCaptureModel) {\n      return null;\n    }\n\n    let screenshotMode;\n    if (clip) {\n      screenshotMode = SDK.ScreenCaptureModel.ScreenshotMode.FROM_CLIP;\n    } else if (fullSize) {\n      screenshotMode = SDK.ScreenCaptureModel.ScreenshotMode.FULLPAGE;\n    } else {\n      screenshotMode = SDK.ScreenCaptureModel.ScreenshotMode.FROM_VIEWPORT;\n    }\n\n    const overlayModel = this.#emulationModel ? this.#emulationModel.overlayModel() : null;\n    if (overlayModel) {\n      overlayModel.setShowViewportSizeOnResize(false);\n    }\n\n    const screenshot = await screenCaptureModel.captureScreenshot(\n        Protocol.Page.CaptureScreenshotRequestFormat.Png, 100, screenshotMode, clip);\n\n    const deviceMetrics: Protocol.Page.SetDeviceMetricsOverrideRequest = {\n      width: 0,\n      height: 0,\n      deviceScaleFactor: 0,\n      mobile: false,\n    };\n    if (fullSize && this.#emulationModel) {\n      if (this.#deviceInternal && this.#modeInternal) {\n        const orientation = this.#deviceInternal.orientationByName(this.#modeInternal.orientation);\n        deviceMetrics.width = orientation.width;\n        deviceMetrics.height = orientation.height;\n        const dispFeature = this.getDisplayFeature();\n        if (dispFeature) {\n          // @ts-ignore: displayFeature isn't in protocol.ts but is an\n          // experimental flag:\n          // https://chromedevtools.github.io/devtools-protocol/tot/Emulation/#method-setDeviceMetricsOverride\n          deviceMetrics.displayFeature = dispFeature;\n        }\n      } else {\n        deviceMetrics.width = 0;\n        deviceMetrics.height = 0;\n      }\n      await this.#emulationModel.emulateDevice(deviceMetrics);\n    }\n    this.calculateAndEmulate(false);\n    return screenshot;\n  }\n\n  private applyTouch(touchEnabled: boolean, mobile: boolean): void {\n    this.#touchEnabled = touchEnabled;\n    this.#touchMobile = mobile;\n    for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(SDK.EmulationModel.EmulationModel)) {\n      void emulationModel.emulateTouch(touchEnabled, mobile);\n    }\n  }\n\n  private showHingeIfApplicable(overlayModel: SDK.OverlayModel.OverlayModel): void {\n    const orientation = (this.#deviceInternal && this.#modeInternal) ?\n        this.#deviceInternal.orientationByName(this.#modeInternal.orientation) :\n        null;\n    if (orientation && orientation.hinge) {\n      overlayModel.showHingeForDualScreen(orientation.hinge);\n      return;\n    }\n\n    overlayModel.showHingeForDualScreen(null);\n  }\n\n  private getDisplayFeatureOrientation(): Protocol.Emulation.DisplayFeatureOrientation {\n    if (!this.#modeInternal) {\n      throw new Error('Mode required to get display feature orientation.');\n    }\n    switch (this.#modeInternal.orientation) {\n      case VerticalSpanned:\n      case Vertical:\n        return Protocol.Emulation.DisplayFeatureOrientation.Vertical;\n      case HorizontalSpanned:\n      case Horizontal:\n      default:\n        return Protocol.Emulation.DisplayFeatureOrientation.Horizontal;\n    }\n  }\n\n  private getDisplayFeature(): Protocol.Emulation.DisplayFeature|null {\n    if (!this.shouldReportDisplayFeature()) {\n      return null;\n    }\n\n    if (!this.#deviceInternal || !this.#modeInternal ||\n        (this.#modeInternal.orientation !== VerticalSpanned && this.#modeInternal.orientation !== HorizontalSpanned)) {\n      return null;\n    }\n\n    const orientation = this.#deviceInternal.orientationByName(this.#modeInternal.orientation);\n    if (!orientation || !orientation.hinge) {\n      return null;\n    }\n\n    const hinge = orientation.hinge;\n    return {\n      orientation: this.getDisplayFeatureOrientation(),\n      offset: (this.#modeInternal.orientation === VerticalSpanned) ? hinge.x : hinge.y,\n      maskLength: (this.#modeInternal.orientation === VerticalSpanned) ? hinge.width : hinge.height,\n    };\n  }\n}\n\nexport class Insets {\n  constructor(public left: number, public top: number, public right: number, public bottom: number) {\n  }\n\n  isEqual(insets: Insets|null): boolean {\n    return insets !== null && this.left === insets.left && this.top === insets.top && this.right === insets.right &&\n        this.bottom === insets.bottom;\n  }\n}\n\nexport class Rect {\n  constructor(public left: number, public top: number, public width: number, public height: number) {\n  }\n\n  isEqual(rect: Rect|null): boolean {\n    return rect !== null && this.left === rect.left && this.top === rect.top && this.width === rect.width &&\n        this.height === rect.height;\n  }\n\n  scale(scale: number): Rect {\n    return new Rect(this.left * scale, this.top * scale, this.width * scale, this.height * scale);\n  }\n\n  relativeTo(origin: Rect): Rect {\n    return new Rect(this.left - origin.left, this.top - origin.top, this.width, this.height);\n  }\n\n  rebaseTo(origin: Rect): Rect {\n    return new Rect(this.left + origin.left, this.top + origin.top, this.width, this.height);\n  }\n}\n\nexport const enum Events {\n  UPDATED = 'Updated',\n}\n\nexport type EventTypes = {\n  [Events.UPDATED]: void,\n};\n\nexport enum Type {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  None = 'None',\n  Responsive = 'Responsive',\n  Device = 'Device',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport const enum UA {\n  // TODO(crbug.com/1136655): This enum is used for both display and code functionality.\n  // we should refactor this so localization of these strings only happens for user display.\n  MOBILE = 'Mobile',\n  MOBILE_NO_TOUCH = 'Mobile (no touch)',\n  DESKTOP = 'Desktop',\n  DESKTOP_TOUCH = 'Desktop (touch)',\n}\n\nexport const MinDeviceSize = 50;\nexport const MaxDeviceSize = 9999;\nexport const MinDeviceScaleFactor = 0;\nexport const MaxDeviceScaleFactor = 10;\nexport const MaxDeviceNameLength = 50;\n\nconst mobileUserAgent =\n    'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/%s Mobile Safari/537.36';\nconst defaultMobileUserAgent =\n    SDK.NetworkManager.MultitargetNetworkManager.patchUserAgentWithChromeVersion(mobileUserAgent);\n\nconst defaultMobileUserAgentMetadata = {\n  platform: 'Android',\n  platformVersion: '6.0',\n  architecture: '',\n  model: 'Nexus 5',\n  mobile: true,\n};\nexport const defaultMobileScaleFactor = 2;\n"],
  "mappings": "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",
  "names": ["Events", "Type", "UA"]
}
