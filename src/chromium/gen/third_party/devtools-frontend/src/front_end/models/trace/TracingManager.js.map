{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/TracingManager.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type * as Types from './types/types.js';\n\nexport class TracingManager extends SDK.SDKModel.SDKModel<void> {\n  readonly #tracingAgent: ProtocolProxyApi.TracingApi;\n  #activeClient: TracingManagerClient|null;\n  #eventsRetrieved: number;\n  #finishing?: boolean;\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    this.#tracingAgent = target.tracingAgent();\n    target.registerTracingDispatcher(new TracingDispatcher(this));\n\n    this.#activeClient = null;\n    this.#eventsRetrieved = 0;\n  }\n\n  bufferUsage(usage?: number, eventCount?: number, percentFull?: number): void {\n    if (this.#activeClient) {\n      this.#activeClient.tracingBufferUsage(usage || percentFull || 0);\n    }\n  }\n\n  eventsCollected(events: Types.Events.Event[]): void {\n    if (!this.#activeClient) {\n      return;\n    }\n    this.#activeClient.traceEventsCollected(events);\n    this.#eventsRetrieved += events.length;\n\n    // CDP no longer provides an approximate_event_count AKA eventCount. It's always 0.\n    // To give some idea of progress we'll compare to a large (900k event) trace.\n    // And we'll clamp both sides so the user sees some progress, and never maxed at 99%\n    const progress = Math.min((this.#eventsRetrieved / 900_000) + 0.15, 0.90);\n    this.#activeClient.eventsRetrievalProgress(progress);\n  }\n\n  tracingComplete(): void {\n    this.#eventsRetrieved = 0;\n    if (this.#activeClient) {\n      this.#activeClient.tracingComplete();\n      this.#activeClient = null;\n    }\n    this.#finishing = false;\n  }\n\n  async reset(): Promise<void> {\n    // If we have an active client, we should try to stop\n    // it before resetting it, else we will leave the\n    // backend in a broken state where it thinks we are in\n    // the middle of tracing, but we think we are not.\n    // Then, any subsequent attempts to record will fail\n    // because the backend will not let us start a second\n    // tracing session.\n    if (this.#activeClient) {\n      await this.#tracingAgent.invoke_end();\n    }\n    this.#eventsRetrieved = 0;\n    this.#activeClient = null;\n    this.#finishing = false;\n  }\n\n  // TODO(petermarshall): Use the traceConfig argument instead of deprecated\n  // categories + options.\n  async start(client: TracingManagerClient, categoryFilter: string, options: string):\n      Promise<Protocol.ProtocolResponseWithError> {\n    if (this.#activeClient) {\n      throw new Error('Tracing is already started');\n    }\n    const bufferUsageReportingIntervalMs = 500;\n    this.#activeClient = client;\n    const args = {\n      bufferUsageReportingInterval: bufferUsageReportingIntervalMs,\n      categories: categoryFilter,\n      options,\n      transferMode: Protocol.Tracing.StartRequestTransferMode.ReportEvents,\n    };\n    const response = await this.#tracingAgent.invoke_start(args);\n    if (response.getError()) {\n      this.#activeClient = null;\n    }\n    return response;\n  }\n\n  stop(): void {\n    if (!this.#activeClient) {\n      throw new Error('Tracing is not started');\n    }\n    if (this.#finishing) {\n      throw new Error('Tracing is already being stopped');\n    }\n    this.#finishing = true;\n    void this.#tracingAgent.invoke_end();\n  }\n}\n\nexport interface TracingManagerClient {\n  traceEventsCollected(events: Types.Events.Event[]): void;\n\n  tracingComplete(): void;\n  tracingBufferUsage(usage: number): void;\n  eventsRetrievalProgress(progress: number): void;\n}\n\nclass TracingDispatcher implements ProtocolProxyApi.TracingDispatcher {\n  readonly #tracingManager: TracingManager;\n  constructor(tracingManager: TracingManager) {\n    this.#tracingManager = tracingManager;\n  }\n\n  // `eventCount` will always be 0 as perfetto no longer calculates `approximate_event_count`\n  bufferUsage({value, eventCount, percentFull}: Protocol.Tracing.BufferUsageEvent): void {\n    this.#tracingManager.bufferUsage(value, eventCount, percentFull);\n  }\n\n  dataCollected({value}: Protocol.Tracing.DataCollectedEvent): void {\n    this.#tracingManager.eventsCollected(value);\n  }\n\n  tracingComplete(): void {\n    this.#tracingManager.tracingComplete();\n  }\n}\n\nSDK.SDKModel.SDKModel.register(TracingManager, {capabilities: SDK.Target.Capability.TRACING, autostart: false});\n"],
  "mappings": ";AAIA,YAAY,SAAS;AAErB,YAAY,cAAc;AAInB,aAAM,uBAAuB,IAAI,SAAS,SAAe;AAAA,EACrD;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,QAA2B;AACrC,UAAM,MAAM;AACZ,SAAK,gBAAgB,OAAO,aAAa;AACzC,WAAO,0BAA0B,IAAI,kBAAkB,IAAI,CAAC;AAE5D,SAAK,gBAAgB;AACrB,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EAEA,YAAY,OAAgB,YAAqB,aAA4B;AAC3E,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,mBAAmB,SAAS,eAAe,CAAC;AAAA,IACjE;AAAA,EACF;AAAA,EAEA,gBAAgB,QAAoC;AAClD,QAAI,CAAC,KAAK,eAAe;AACvB;AAAA,IACF;AACA,SAAK,cAAc,qBAAqB,MAAM;AAC9C,SAAK,oBAAoB,OAAO;AAKhC,UAAM,WAAW,KAAK,IAAK,KAAK,mBAAmB,MAAW,MAAM,GAAI;AACxE,SAAK,cAAc,wBAAwB,QAAQ;AAAA,EACrD;AAAA,EAEA,kBAAwB;AACtB,SAAK,mBAAmB;AACxB,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,gBAAgB;AACnC,WAAK,gBAAgB;AAAA,IACvB;AACA,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,MAAM,QAAuB;AAQ3B,QAAI,KAAK,eAAe;AACtB,YAAM,KAAK,cAAc,WAAW;AAAA,IACtC;AACA,SAAK,mBAAmB;AACxB,SAAK,gBAAgB;AACrB,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA,EAIA,MAAM,MAAM,QAA8B,gBAAwB,SAClB;AAC9C,QAAI,KAAK,eAAe;AACtB,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AACA,UAAM,iCAAiC;AACvC,SAAK,gBAAgB;AACrB,UAAM,OAAO;AAAA,MACX,8BAA8B;AAAA,MAC9B,YAAY;AAAA,MACZ;AAAA,MACA,cAAc,SAAS,QAAQ,yBAAyB;AAAA,IAC1D;AACA,UAAM,WAAW,MAAM,KAAK,cAAc,aAAa,IAAI;AAC3D,QAAI,SAAS,SAAS,GAAG;AACvB,WAAK,gBAAgB;AAAA,IACvB;AACA,WAAO;AAAA,EACT;AAAA,EAEA,OAAa;AACX,QAAI,CAAC,KAAK,eAAe;AACvB,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC1C;AACA,QAAI,KAAK,YAAY;AACnB,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AACA,SAAK,aAAa;AAClB,SAAK,KAAK,cAAc,WAAW;AAAA,EACrC;AACF;AAUA,MAAM,kBAAgE;AAAA,EAC3D;AAAA,EACT,YAAY,gBAAgC;AAC1C,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA,EAGA,YAAY,EAAC,OAAO,YAAY,YAAW,GAA4C;AACrF,SAAK,gBAAgB,YAAY,OAAO,YAAY,WAAW;AAAA,EACjE;AAAA,EAEA,cAAc,EAAC,MAAK,GAA8C;AAChE,SAAK,gBAAgB,gBAAgB,KAAK;AAAA,EAC5C;AAAA,EAEA,kBAAwB;AACtB,SAAK,gBAAgB,gBAAgB;AAAA,EACvC;AACF;AAEA,IAAI,SAAS,SAAS,SAAS,gBAAgB,EAAC,cAAc,IAAI,OAAO,WAAW,SAAS,WAAW,MAAK,CAAC;",
  "names": []
}
