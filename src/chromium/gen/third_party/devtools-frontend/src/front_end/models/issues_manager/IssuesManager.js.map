{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/issues_manager/IssuesManager.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {AttributionReportingIssue} from './AttributionReportingIssue.js';\nimport {BounceTrackingIssue} from './BounceTrackingIssue.js';\nimport {ClientHintIssue} from './ClientHintIssue.js';\nimport {ContentSecurityPolicyIssue} from './ContentSecurityPolicyIssue.js';\nimport {CookieDeprecationMetadataIssue} from './CookieDeprecationMetadataIssue.js';\nimport {CookieIssue} from './CookieIssue.js';\nimport {CorsIssue} from './CorsIssue.js';\nimport {CrossOriginEmbedderPolicyIssue, isCrossOriginEmbedderPolicyIssue} from './CrossOriginEmbedderPolicyIssue.js';\nimport {DeprecationIssue} from './DeprecationIssue.js';\nimport {FederatedAuthRequestIssue} from './FederatedAuthRequestIssue.js';\nimport {GenericIssue} from './GenericIssue.js';\nimport {HeavyAdIssue} from './HeavyAdIssue.js';\nimport type {Issue, IssueKind} from './Issue.js';\nimport {Events} from './IssuesManagerEvents.js';\nimport {LowTextContrastIssue} from './LowTextContrastIssue.js';\nimport {MixedContentIssue} from './MixedContentIssue.js';\nimport {PropertyRuleIssue} from './PropertyRuleIssue.js';\nimport {QuirksModeIssue} from './QuirksModeIssue.js';\nimport {SharedArrayBufferIssue} from './SharedArrayBufferIssue.js';\nimport {SharedDictionaryIssue} from './SharedDictionaryIssue.js';\nimport {SourceFrameIssuesManager} from './SourceFrameIssuesManager.js';\nimport {StylesheetLoadingIssue} from './StylesheetLoadingIssue.js';\n\nexport {Events} from './IssuesManagerEvents.js';\n\nlet issuesManagerInstance: IssuesManager|null = null;\n\nfunction createIssuesForBlockedByResponseIssue(\n    issuesModel: SDK.IssuesModel.IssuesModel,\n    inspectorIssue: Protocol.Audits.InspectorIssue): CrossOriginEmbedderPolicyIssue[] {\n  const blockedByResponseIssueDetails = inspectorIssue.details.blockedByResponseIssueDetails;\n  if (!blockedByResponseIssueDetails) {\n    console.warn('BlockedByResponse issue without details received.');\n    return [];\n  }\n  if (isCrossOriginEmbedderPolicyIssue(blockedByResponseIssueDetails.reason)) {\n    return [new CrossOriginEmbedderPolicyIssue(blockedByResponseIssueDetails, issuesModel)];\n  }\n  return [];\n}\n\nconst issueCodeHandlers = new Map<\n    Protocol.Audits.InspectorIssueCode,\n    (model: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue) => Issue[]>([\n  [\n    Protocol.Audits.InspectorIssueCode.CookieIssue,\n    CookieIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.MixedContentIssue,\n    MixedContentIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.HeavyAdIssue,\n    HeavyAdIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,\n    ContentSecurityPolicyIssue.fromInspectorIssue,\n  ],\n  [Protocol.Audits.InspectorIssueCode.BlockedByResponseIssue, createIssuesForBlockedByResponseIssue],\n  [\n    Protocol.Audits.InspectorIssueCode.SharedArrayBufferIssue,\n    SharedArrayBufferIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.SharedDictionaryIssue,\n    SharedDictionaryIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.LowTextContrastIssue,\n    LowTextContrastIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.CorsIssue,\n    CorsIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.QuirksModeIssue,\n    QuirksModeIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.AttributionReportingIssue,\n    AttributionReportingIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.GenericIssue,\n    GenericIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.DeprecationIssue,\n    DeprecationIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.ClientHintIssue,\n    ClientHintIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.FederatedAuthRequestIssue,\n    FederatedAuthRequestIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.BounceTrackingIssue,\n    BounceTrackingIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.StylesheetLoadingIssue,\n    StylesheetLoadingIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.PropertyRuleIssue,\n    PropertyRuleIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.CookieDeprecationMetadataIssue,\n    CookieDeprecationMetadataIssue.fromInspectorIssue,\n  ],\n]);\n\n/**\n * Each issue reported by the backend can result in multiple `Issue` instances.\n * Handlers are simple functions hard-coded into a map.\n */\nexport function createIssuesFromProtocolIssue(\n    issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue): Issue[] {\n  const handler = issueCodeHandlers.get(inspectorIssue.code);\n  if (handler) {\n    return handler(issuesModel, inspectorIssue);\n  }\n  console.warn(`No handler registered for issue code ${inspectorIssue.code}`);\n  return [];\n}\n\nexport interface IssuesManagerCreationOptions {\n  forceNew: boolean;\n  /** Throw an error if this is not the first instance created */\n  ensureFirst: boolean;\n  showThirdPartyIssuesSetting?: Common.Settings.Setting<boolean>;\n  hideIssueSetting?: Common.Settings.Setting<HideIssueMenuSetting>;\n}\n\nexport type HideIssueMenuSetting = {\n  [x: string]: IssueStatus,\n};\n\nexport const enum IssueStatus {\n  HIDDEN = 'Hidden',\n  UNHIDDEN = 'Unhidden',\n}\n\nexport function defaultHideIssueByCodeSetting(): HideIssueMenuSetting {\n  const setting: HideIssueMenuSetting = {};\n  return setting;\n}\n\nexport function getHideIssueByCodeSetting(): Common.Settings.Setting<HideIssueMenuSetting> {\n  return Common.Settings.Settings.instance().createSetting(\n      'hide-issue-by-code-setting-experiment-2021', defaultHideIssueByCodeSetting());\n}\n\n/**\n * The `IssuesManager` is the central storage for issues. It collects issues from all the\n * `IssuesModel` instances in the page, and deduplicates them wrt their primary key.\n * It also takes care of clearing the issues when it sees a main-frame navigated event.\n * Any client can subscribe to the events provided, and/or query the issues via the public\n * interface.\n *\n * Additionally, the `IssuesManager` can filter Issues. All Issues are stored, but only\n * Issues that are accepted by the filter cause events to be fired or are returned by\n * `IssuesManager#issues()`.\n */\nexport class IssuesManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.IssuesModel.IssuesModel> {\n  #eventListeners = new WeakMap<SDK.IssuesModel.IssuesModel, Common.EventTarget.EventDescriptor>();\n  #allIssues = new Map<string, Issue>();\n  #filteredIssues = new Map<string, Issue>();\n  #issueCounts = new Map<IssueKind, number>();\n  #hiddenIssueCount = new Map<IssueKind, number>();\n  #hasSeenPrimaryPageChanged = false;\n  #issuesById: Map<string, Issue> = new Map();\n  #issuesByOutermostTarget: WeakMap<SDK.Target.Target, Set<Issue>> = new Map();\n\n  constructor(\n      private readonly showThirdPartyIssuesSetting?: Common.Settings.Setting<boolean>,\n      private readonly hideIssueSetting?: Common.Settings.Setting<HideIssueMenuSetting>) {\n    super();\n    new SourceFrameIssuesManager(this);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.IssuesModel.IssuesModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n    SDK.FrameManager.FrameManager.instance().addEventListener(\n        SDK.FrameManager.Events.FRAME_ADDED_TO_TARGET, this.#onFrameAddedToTarget, this);\n\n    // issueFilter uses the 'show-third-party-issues' setting. Clients of IssuesManager need\n    // a full update when the setting changes to get an up-to-date issues list.\n    this.showThirdPartyIssuesSetting?.addChangeListener(() => this.#updateFilteredIssues());\n    this.hideIssueSetting?.addChangeListener(() => this.#updateFilteredIssues());\n    SDK.TargetManager.TargetManager.instance().observeTargets(\n        {\n          targetAdded: (target: SDK.Target.Target) => {\n            if (target.outermostTarget() === target) {\n              this.#updateFilteredIssues();\n            }\n          },\n          targetRemoved: (_: SDK.Target.Target) => {},\n        },\n        {scoped: true});\n  }\n\n  static instance(opts: IssuesManagerCreationOptions = {\n    forceNew: false,\n    ensureFirst: false,\n  }): IssuesManager {\n    if (issuesManagerInstance && opts.ensureFirst) {\n      throw new Error(\n          'IssuesManager was already created. Either set \"ensureFirst\" to false or make sure that this invocation is really the first one.');\n    }\n\n    if (!issuesManagerInstance || opts.forceNew) {\n      issuesManagerInstance = new IssuesManager(opts.showThirdPartyIssuesSetting, opts.hideIssueSetting);\n    }\n\n    return issuesManagerInstance;\n  }\n\n  static removeInstance(): void {\n    issuesManagerInstance = null;\n  }\n\n  /**\n   * Once we have seen at least one `PrimaryPageChanged` event, we can be reasonably sure\n   * that we also collected issues that were reported during the navigation to the current\n   * page. If we haven't seen a main frame navigated, we might have missed issues that arose\n   * during navigation.\n   */\n  reloadForAccurateInformationRequired(): boolean {\n    return !this.#hasSeenPrimaryPageChanged;\n  }\n\n  #onPrimaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<\n          {frame: SDK.ResourceTreeModel.ResourceTreeFrame, type: SDK.ResourceTreeModel.PrimaryPageChangeType}>): void {\n    const {frame, type} = event.data;\n    const keptIssues = new Map<string, Issue>();\n    for (const [key, issue] of this.#allIssues.entries()) {\n      if (issue.isAssociatedWithRequestId(frame.loaderId)) {\n        keptIssues.set(key, issue);\n        // Keep issues for prerendered target alive in case of prerender-activation.\n      } else if (\n          (type === SDK.ResourceTreeModel.PrimaryPageChangeType.ACTIVATION) &&\n          (frame.resourceTreeModel().target() === issue.model()?.target())) {\n        keptIssues.set(key, issue);\n        // Keep BounceTrackingIssues alive for non-user-initiated navigations.\n      } else if (\n          issue.code() === Protocol.Audits.InspectorIssueCode.BounceTrackingIssue ||\n          issue.code() === Protocol.Audits.InspectorIssueCode.CookieIssue) {\n        const networkManager = frame.resourceTreeModel().target().model(SDK.NetworkManager.NetworkManager);\n        if (networkManager?.requestForLoaderId(frame.loaderId as Protocol.Network.LoaderId)?.hasUserGesture() ===\n            false) {\n          keptIssues.set(key, issue);\n        }\n      }\n    }\n    this.#allIssues = keptIssues;\n    this.#hasSeenPrimaryPageChanged = true;\n    this.#updateFilteredIssues();\n  }\n\n  #onFrameAddedToTarget(event: Common.EventTarget.EventTargetEvent<{frame: SDK.ResourceTreeModel.ResourceTreeFrame}>):\n      void {\n    const {frame} = event.data;\n    // Determining third-party status usually requires the registered domain of the outermost frame.\n    // When DevTools is opened after navigation has completed, issues may be received\n    // before the outermost frame is available. Thus, we trigger a recalcuation of third-party-ness\n    // when we attach to the outermost frame.\n    if (frame.isOutermostFrame() && SDK.TargetManager.TargetManager.instance().isInScope(frame.resourceTreeModel())) {\n      this.#updateFilteredIssues();\n    }\n  }\n\n  modelAdded(issuesModel: SDK.IssuesModel.IssuesModel): void {\n    const listener = issuesModel.addEventListener(SDK.IssuesModel.Events.ISSUE_ADDED, this.#onIssueAddedEvent, this);\n    this.#eventListeners.set(issuesModel, listener);\n  }\n\n  modelRemoved(issuesModel: SDK.IssuesModel.IssuesModel): void {\n    const listener = this.#eventListeners.get(issuesModel);\n    if (listener) {\n      Common.EventTarget.removeEventListeners([listener]);\n    }\n  }\n\n  #onIssueAddedEvent(event: Common.EventTarget.EventTargetEvent<SDK.IssuesModel.IssueAddedEvent>): void {\n    const {issuesModel, inspectorIssue} = event.data;\n    const issues = createIssuesFromProtocolIssue(issuesModel, inspectorIssue);\n    for (const issue of issues) {\n      this.addIssue(issuesModel, issue);\n      const message = issue.maybeCreateConsoleMessage();\n      if (message) {\n        issuesModel.target().model(SDK.ConsoleModel.ConsoleModel)?.addMessage(message);\n      }\n    }\n  }\n\n  addIssue(issuesModel: SDK.IssuesModel.IssuesModel, issue: Issue): void {\n    // Ignore issues without proper description; they are invisible to the user and only cause confusion.\n    if (!issue.getDescription()) {\n      return;\n    }\n    const primaryKey = issue.primaryKey();\n    if (this.#allIssues.has(primaryKey)) {\n      return;\n    }\n    this.#allIssues.set(primaryKey, issue);\n\n    const outermostTarget = issuesModel.target().outermostTarget();\n    if (outermostTarget) {\n      let issuesForTarget = this.#issuesByOutermostTarget.get(outermostTarget);\n      if (!issuesForTarget) {\n        issuesForTarget = new Set();\n        this.#issuesByOutermostTarget.set(outermostTarget, issuesForTarget);\n      }\n      issuesForTarget.add(issue);\n    }\n    if (this.#issueFilter(issue)) {\n      this.#filteredIssues.set(primaryKey, issue);\n      this.#issueCounts.set(issue.getKind(), 1 + (this.#issueCounts.get(issue.getKind()) || 0));\n      const issueId = issue.getIssueId();\n      if (issueId) {\n        this.#issuesById.set(issueId, issue);\n      }\n      const values = this.hideIssueSetting?.get();\n      this.#updateIssueHiddenStatus(issue, values);\n      if (issue.isHidden()) {\n        this.#hiddenIssueCount.set(issue.getKind(), 1 + (this.#hiddenIssueCount.get(issue.getKind()) || 0));\n      }\n      this.dispatchEventToListeners(Events.ISSUE_ADDED, {issuesModel, issue});\n    }\n    // Always fire the \"count\" event even if the issue was filtered out.\n    // The result of `hasOnlyThirdPartyIssues` could still change.\n    this.dispatchEventToListeners(Events.ISSUES_COUNT_UPDATED);\n  }\n\n  issues(): Iterable<Issue> {\n    return this.#filteredIssues.values();\n  }\n\n  numberOfIssues(kind?: IssueKind): number {\n    if (kind) {\n      return (this.#issueCounts.get(kind) ?? 0) - this.numberOfHiddenIssues(kind);\n    }\n    return this.#filteredIssues.size - this.numberOfHiddenIssues();\n  }\n\n  numberOfHiddenIssues(kind?: IssueKind): number {\n    if (kind) {\n      return this.#hiddenIssueCount.get(kind) ?? 0;\n    }\n    let count = 0;\n    for (const num of this.#hiddenIssueCount.values()) {\n      count += num;\n    }\n    return count;\n  }\n\n  numberOfAllStoredIssues(): number {\n    return this.#allIssues.size;\n  }\n\n  #issueFilter(issue: Issue): boolean {\n    const scopeTarget = SDK.TargetManager.TargetManager.instance().scopeTarget();\n    if (!scopeTarget) {\n      return false;\n    }\n    if (!this.#issuesByOutermostTarget.get(scopeTarget)?.has(issue)) {\n      return false;\n    }\n    return this.showThirdPartyIssuesSetting?.get() || !issue.isCausedByThirdParty();\n  }\n\n  #updateIssueHiddenStatus(issue: Issue, values: HideIssueMenuSetting|undefined): void {\n    const code = issue.code();\n    // All issues are hidden via their code.\n    // For hiding we check whether the issue code is present and has a value of IssueStatus.Hidden\n    // assosciated with it. If all these conditions are met the issue is hidden.\n    // IssueStatus is set in hidden issues menu.\n    // In case a user wants to hide a specific issue, the issue code is added to \"code\" section\n    // of our setting and its value is set to IssueStatus.Hidden. Then issue then gets hidden.\n    if (values && values[code]) {\n      if (values[code] === IssueStatus.HIDDEN) {\n        issue.setHidden(true);\n        return;\n      }\n      issue.setHidden(false);\n      return;\n    }\n  }\n\n  #updateFilteredIssues(): void {\n    this.#filteredIssues.clear();\n    this.#issueCounts.clear();\n    this.#issuesById.clear();\n    this.#hiddenIssueCount.clear();\n    const values = this.hideIssueSetting?.get();\n    for (const [key, issue] of this.#allIssues) {\n      if (this.#issueFilter(issue)) {\n        this.#updateIssueHiddenStatus(issue, values);\n        this.#filteredIssues.set(key, issue);\n        this.#issueCounts.set(issue.getKind(), 1 + (this.#issueCounts.get(issue.getKind()) ?? 0));\n        if (issue.isHidden()) {\n          this.#hiddenIssueCount.set(issue.getKind(), 1 + (this.#hiddenIssueCount.get(issue.getKind()) || 0));\n        }\n        const issueId = issue.getIssueId();\n        if (issueId) {\n          this.#issuesById.set(issueId, issue);\n        }\n      }\n    }\n    this.dispatchEventToListeners(Events.FULL_UPDATE_REQUIRED);\n    this.dispatchEventToListeners(Events.ISSUES_COUNT_UPDATED);\n  }\n\n  unhideAllIssues(): void {\n    for (const issue of this.#allIssues.values()) {\n      issue.setHidden(false);\n    }\n    this.hideIssueSetting?.set(defaultHideIssueByCodeSetting());\n  }\n\n  getIssueById(id: string): Issue|undefined {\n    return this.#issuesById.get(id);\n  }\n}\n\nexport interface IssueAddedEvent {\n  issuesModel: SDK.IssuesModel.IssuesModel;\n  issue: Issue;\n}\n\nexport type EventTypes = {\n  [Events.ISSUES_COUNT_UPDATED]: void,\n  [Events.FULL_UPDATE_REQUIRED]: void,\n  [Events.ISSUE_ADDED]: IssueAddedEvent,\n};\n\n// @ts-ignore\nglobalThis.addIssueForTest = (issue: Protocol.Audits.InspectorIssue) => {\n  const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n  const issuesModel = mainTarget?.model(SDK.IssuesModel.IssuesModel);\n  issuesModel?.issueAdded({issue});\n};\n"],
  "mappings": "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",
  "names": ["IssueStatus"]
}
