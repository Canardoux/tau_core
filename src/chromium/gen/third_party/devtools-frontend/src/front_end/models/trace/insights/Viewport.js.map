{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/insights/Viewport.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  type InsightModel,\n  type InsightSetContext,\n  InsightWarning,\n  type RequiredData,\n} from './types.js';\n\nconst UIStrings = {\n  /** Title of an insight that provides details about if the page's viewport is optimized for mobile viewing. */\n  title: 'Optimize viewport for mobile',\n  /**\n   * @description Text to tell the user how a viewport meta element can improve performance. \\xa0 is a non-breaking space\n   */\n  description:\n      'Tap interactions may be [delayed by up to 300\\xA0ms](https://developer.chrome.com/blog/300ms-tap-delay-gone-away/) if the viewport is not optimized for mobile.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/Viewport.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function deps(): ['Meta', 'UserInteractions'] {\n  return ['Meta', 'UserInteractions'];\n}\n\nexport type ViewportInsightModel = InsightModel<{\n  mobileOptimized: boolean | null,\n  viewportEvent?: Types.Events.ParseMetaViewport,\n}>;\n\nfunction finalize(partialModel: Omit<ViewportInsightModel, 'title'|'description'|'category'|'shouldShow'>):\n    ViewportInsightModel {\n  return {\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.INP,\n    shouldShow: partialModel.mobileOptimized === false,\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: RequiredData<typeof deps>, context: InsightSetContext): ViewportInsightModel {\n  const compositorEvents = parsedTrace.UserInteractions.beginCommitCompositorFrameEvents.filter(event => {\n    if (event.args.frame !== context.frameId) {\n      return false;\n    }\n\n    return Helpers.Timing.eventIsInBounds(event, context.bounds);\n  });\n\n  if (!compositorEvents.length) {\n    // Trace doesn't have the data we need.\n    return finalize({\n      mobileOptimized: null,\n      warnings: [InsightWarning.NO_LAYOUT],\n    });\n  }\n\n  const viewportEvent = parsedTrace.UserInteractions.parseMetaViewportEvents.find(event => {\n    if (event.args.data.frame !== context.frameId) {\n      return false;\n    }\n\n    return Helpers.Timing.eventIsInBounds(event, context.bounds);\n  });\n\n  // Returns true only if all events are mobile optimized.\n  for (const event of compositorEvents) {\n    if (!event.args.is_mobile_optimized) {\n      return finalize({\n        mobileOptimized: false,\n        viewportEvent,\n        metricSavings: {INP: 300 as Types.Timing.MilliSeconds},\n      });\n    }\n  }\n\n  return finalize({\n    mobileOptimized: true,\n    viewportEvent,\n  });\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,aAAa;AAGzB;AAAA,EACE;AAAA,EAGA;AAAA,OAEK;AAEP,MAAM,YAAY;AAAA;AAAA,EAEhB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIP,aACI;AACN;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,qCAAqC,SAAS;AACvF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAE7D,gBAAS,OAAqC;AACnD,SAAO,CAAC,QAAQ,kBAAkB;AACpC;AAOA,SAAS,SAAS,cACO;AACvB,SAAO;AAAA,IACL,OAAO,WAAW,UAAU,KAAK;AAAA,IACjC,aAAa,WAAW,UAAU,WAAW;AAAA,IAC7C,UAAU,gBAAgB;AAAA,IAC1B,YAAY,aAAa,oBAAoB;AAAA,IAC7C,GAAG;AAAA,EACL;AACF;AAEO,gBAAS,gBACZ,aAAwC,SAAkD;AAC5F,QAAM,mBAAmB,YAAY,iBAAiB,iCAAiC,OAAO,WAAS;AACrG,QAAI,MAAM,KAAK,UAAU,QAAQ,SAAS;AACxC,aAAO;AAAA,IACT;AAEA,WAAO,QAAQ,OAAO,gBAAgB,OAAO,QAAQ,MAAM;AAAA,EAC7D,CAAC;AAED,MAAI,CAAC,iBAAiB,QAAQ;AAE5B,WAAO,SAAS;AAAA,MACd,iBAAiB;AAAA,MACjB,UAAU,CAAC,eAAe,SAAS;AAAA,IACrC,CAAC;AAAA,EACH;AAEA,QAAM,gBAAgB,YAAY,iBAAiB,wBAAwB,KAAK,WAAS;AACvF,QAAI,MAAM,KAAK,KAAK,UAAU,QAAQ,SAAS;AAC7C,aAAO;AAAA,IACT;AAEA,WAAO,QAAQ,OAAO,gBAAgB,OAAO,QAAQ,MAAM;AAAA,EAC7D,CAAC;AAGD,aAAW,SAAS,kBAAkB;AACpC,QAAI,CAAC,MAAM,KAAK,qBAAqB;AACnC,aAAO,SAAS;AAAA,QACd,iBAAiB;AAAA,QACjB;AAAA,QACA,eAAe,EAAC,KAAK,IAAgC;AAAA,MACvD,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO,SAAS;AAAA,IACd,iBAAiB;AAAA,IACjB;AAAA,EACF,CAAC;AACH;",
  "names": []
}
