{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/source_map_scopes/ScopeTreeCache.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Formatter from '../formatter/formatter.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\ntype ScopeTreeNode = Formatter.FormatterWorkerPool.ScopeTreeNode;\n\n/** If a script failed to parse, we stash null in order to prevent unnecessary re-parsing */\nconst scopeTrees = new WeakMap<SDK.Script.Script, Promise<ScopeTreeNode|null>>();\n\n/**\n * Computes and caches the scope tree for `script`.\n *\n * We use {@link SDK.Script.Script} as a key to uniquely identify scripts.\n * {@link SDK.Script.Script} boils down to \"target\" + \"script ID\". This\n * duplicates work in case of identitical script running on multiple targets\n * (e.g. workers).\n */\nexport function scopeTreeForScript(script: SDK.Script.Script): Promise<ScopeTreeNode|null> {\n  let promise = scopeTrees.get(script);\n  if (promise === undefined) {\n    promise = script.requestContentData().then(content => {\n      if (TextUtils.ContentData.ContentData.isError(content)) {\n        return null;\n      }\n\n      const sourceType = script.isModule ? 'module' : 'script';\n      return Formatter.FormatterWorkerPool.formatterWorkerPool().javaScriptScopeTree(content.text, sourceType);\n    });\n    scopeTrees.set(script, promise);\n  }\n  // We intentionally return `null` here if the script already failed to parse once.\n  return promise;\n}\n"],
  "mappings": ";AAKA,YAAY,eAAe;AAC3B,YAAY,eAAe;AAK3B,MAAM,aAAa,oBAAI,QAAwD;AAUxE,gBAAS,mBAAmB,QAAwD;AACzF,MAAI,UAAU,WAAW,IAAI,MAAM;AACnC,MAAI,YAAY,QAAW;AACzB,cAAU,OAAO,mBAAmB,EAAE,KAAK,aAAW;AACpD,UAAI,UAAU,YAAY,YAAY,QAAQ,OAAO,GAAG;AACtD,eAAO;AAAA,MACT;AAEA,YAAM,aAAa,OAAO,WAAW,WAAW;AAChD,aAAO,UAAU,oBAAoB,oBAAoB,EAAE,oBAAoB,QAAQ,MAAM,UAAU;AAAA,IACzG,CAAC;AACD,eAAW,IAAI,QAAQ,OAAO;AAAA,EAChC;AAEA,SAAO;AACT;",
  "names": []
}
