{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/persistence/PlatformFileSystem.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nconst UIStrings = {\n  /**\n   * @description Assertion error message when failing to load a file.\n   */\n  unableToReadFilesWithThis: '`PlatformFileSystem` cannot read files.',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/PlatformFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class PlatformFileSystem {\n  private readonly pathInternal: Platform.DevToolsPath.UrlString;\n  private readonly typeInternal: string;\n  constructor(path: Platform.DevToolsPath.UrlString, type: string) {\n    this.pathInternal = path;\n    this.typeInternal = type;\n  }\n\n  getMetadata(_path: Platform.DevToolsPath.EncodedPathString): Promise<{modificationTime: Date, size: number}|null> {\n    return Promise.resolve(null);\n  }\n\n  initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    return [];\n  }\n\n  initialGitFolders(): Platform.DevToolsPath.EncodedPathString[] {\n    return [];\n  }\n\n  path(): Platform.DevToolsPath.UrlString {\n    return this.pathInternal;\n  }\n\n  embedderPath(): Platform.DevToolsPath.RawPathString {\n    throw new Error('Not implemented');\n  }\n\n  type(): string {\n    // TODO(kozyatinskiy): remove type, overrides should implement this interface.\n    return this.typeInternal;\n  }\n\n  async createFile(_path: Platform.DevToolsPath.EncodedPathString, _name: Platform.DevToolsPath.RawPathString|null):\n      Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    return Promise.resolve(null);\n  }\n\n  deleteFile(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  deleteDirectoryRecursively(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  requestFileBlob(_path: Platform.DevToolsPath.EncodedPathString): Promise<Blob|null> {\n    return Promise.resolve(null as Blob | null);\n  }\n\n  async requestFileContent(_path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    return {error: i18nString(UIStrings.unableToReadFilesWithThis)};\n  }\n\n  setFileContent(_path: Platform.DevToolsPath.EncodedPathString, _content: string, _isBase64: boolean): void {\n    throw new Error('Not implemented');\n  }\n\n  renameFile(\n      _path: Platform.DevToolsPath.EncodedPathString, _newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    callback(false);\n  }\n\n  addExcludedFolder(_path: Platform.DevToolsPath.EncodedPathString): void {\n  }\n\n  removeExcludedFolder(_path: Platform.DevToolsPath.EncodedPathString): void {\n  }\n\n  fileSystemRemoved(): void {\n  }\n\n  isFileExcluded(_folderPath: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  excludedFolders(): Set<Platform.DevToolsPath.EncodedPathString> {\n    return new Set();\n  }\n\n  searchInPath(_query: string, _progress: Common.Progress.Progress): Promise<string[]> {\n    return Promise.resolve([]);\n  }\n\n  indexContent(progress: Common.Progress.Progress): void {\n    queueMicrotask(() => {\n      progress.done();\n    });\n  }\n\n  mimeFromPath(_path: Platform.DevToolsPath.UrlString): string {\n    throw new Error('Not implemented');\n  }\n\n  canExcludeFolder(_path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  contentType(_path: string): Common.ResourceType.ResourceType {\n    throw new Error('Not implemented');\n  }\n\n  tooltipForURL(_url: Platform.DevToolsPath.UrlString): string {\n    throw new Error('Not implemented');\n  }\n\n  supportsAutomapping(): boolean {\n    throw new Error('Not implemented');\n  }\n}\n"],
  "mappings": ";AAMA,YAAY,UAAU;AAGtB,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,2BAA2B;AAC7B;AACA,MAAM,OAAO,KAAK,KAAK,kBAAkB,4CAA4C,SAAS;AAC9F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAC7D,aAAM,mBAAmB;AAAA,EACb;AAAA,EACA;AAAA,EACjB,YAAY,MAAuC,MAAc;AAC/D,SAAK,eAAe;AACpB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,YAAY,OAAsG;AAChH,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC7B;AAAA,EAEA,mBAA8D;AAC5D,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,oBAA+D;AAC7D,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,OAAwC;AACtC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,eAAoD;AAClD,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,OAAe;AAEb,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,WAAW,OAAgD,OACP;AACxD,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC7B;AAAA,EAEA,WAAW,OAAkE;AAC3E,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAC9B;AAAA,EAEA,2BAA2B,OAAkE;AAC3F,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAC9B;AAAA,EAEA,gBAAgB,OAAoE;AAClF,WAAO,QAAQ,QAAQ,IAAmB;AAAA,EAC5C;AAAA,EAEA,MAAM,mBAAmB,OAC6B;AACpD,WAAO,EAAC,OAAO,WAAW,UAAU,yBAAyB,EAAC;AAAA,EAChE;AAAA,EAEA,eAAe,OAAgD,UAAkB,WAA0B;AACzG,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,WACI,OAAgD,UAChD,UAAkE;AACpE,aAAS,KAAK;AAAA,EAChB;AAAA,EAEA,kBAAkB,OAAsD;AAAA,EACxE;AAAA,EAEA,qBAAqB,OAAsD;AAAA,EAC3E;AAAA,EAEA,oBAA0B;AAAA,EAC1B;AAAA,EAEA,eAAe,aAA+D;AAC5E,WAAO;AAAA,EACT;AAAA,EAEA,kBAAgE;AAC9D,WAAO,oBAAI,IAAI;AAAA,EACjB;AAAA,EAEA,aAAa,QAAgB,WAAwD;AACnF,WAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,EAC3B;AAAA,EAEA,aAAa,UAA0C;AACrD,mBAAe,MAAM;AACnB,eAAS,KAAK;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EAEA,aAAa,OAAgD;AAC3D,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,iBAAiB,OAAyD;AACxE,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,OAAiD;AAC3D,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,cAAc,MAA+C;AAC3D,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,sBAA+B;AAC7B,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AACF;",
  "names": []
}
