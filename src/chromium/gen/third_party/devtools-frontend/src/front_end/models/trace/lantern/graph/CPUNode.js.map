{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/lantern/graph/CPUNode.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {BaseNode} from './BaseNode.js';\nimport type * as Lantern from '../types/types.js';\n\nclass CPUNode<T = Lantern.AnyNetworkObject> extends BaseNode<T> {\n  _event: Lantern.TraceEvent;\n  _childEvents: Lantern.TraceEvent[];\n  correctedEndTs: number|undefined;\n\n  constructor(parentEvent: Lantern.TraceEvent, childEvents: Lantern.TraceEvent[] = [], correctedEndTs?: number) {\n    const nodeId = `${parentEvent.tid}.${parentEvent.ts}`;\n    super(nodeId);\n\n    this._event = parentEvent;\n    this._childEvents = childEvents;\n    this.correctedEndTs = correctedEndTs;\n  }\n\n  override get type(): 'cpu' {\n    return BaseNode.types.CPU;\n  }\n\n  override get startTime(): number {\n    return this._event.ts;\n  }\n\n  override get endTime(): number {\n    if (this.correctedEndTs) {\n      return this.correctedEndTs;\n    }\n    return this._event.ts + this._event.dur;\n  }\n\n  get duration(): number {\n    return this.endTime - this.startTime;\n  }\n\n  get event(): Lantern.TraceEvent {\n    return this._event;\n  }\n\n  get childEvents(): Lantern.TraceEvent[] {\n    return this._childEvents;\n  }\n\n  /**\n   * Returns true if this node contains a Layout task.\n   */\n  didPerformLayout(): boolean {\n    return this._childEvents.some(evt => evt.name === 'Layout');\n  }\n\n  /**\n   * Returns the script URLs that had their EvaluateScript events occur in this task.\n   */\n  getEvaluateScriptURLs(): Set<string> {\n    const urls = new Set<string>();\n    for (const event of this._childEvents) {\n      if (event.name !== 'EvaluateScript') {\n        continue;\n      }\n      if (!event.args.data || !event.args.data.url) {\n        continue;\n      }\n      urls.add(event.args.data.url);\n    }\n\n    return urls;\n  }\n\n  override cloneWithoutRelationships(): CPUNode {\n    return new CPUNode(this._event, this._childEvents, this.correctedEndTs);\n  }\n}\n\nexport {CPUNode};\n"],
  "mappings": ";AAIA,SAAQ,gBAAe;AAGvB,MAAM,gBAA8C,SAAY;AAAA,EAC9D;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,aAAiC,cAAoC,CAAC,GAAG,gBAAyB;AAC5G,UAAM,SAAS,GAAG,YAAY,GAAG,IAAI,YAAY,EAAE;AACnD,UAAM,MAAM;AAEZ,SAAK,SAAS;AACd,SAAK,eAAe;AACpB,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,IAAa,OAAc;AACzB,WAAO,SAAS,MAAM;AAAA,EACxB;AAAA,EAEA,IAAa,YAAoB;AAC/B,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EAEA,IAAa,UAAkB;AAC7B,QAAI,KAAK,gBAAgB;AACvB,aAAO,KAAK;AAAA,IACd;AACA,WAAO,KAAK,OAAO,KAAK,KAAK,OAAO;AAAA,EACtC;AAAA,EAEA,IAAI,WAAmB;AACrB,WAAO,KAAK,UAAU,KAAK;AAAA,EAC7B;AAAA,EAEA,IAAI,QAA4B;AAC9B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,cAAoC;AACtC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,mBAA4B;AAC1B,WAAO,KAAK,aAAa,KAAK,SAAO,IAAI,SAAS,QAAQ;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA,EAKA,wBAAqC;AACnC,UAAM,OAAO,oBAAI,IAAY;AAC7B,eAAW,SAAS,KAAK,cAAc;AACrC,UAAI,MAAM,SAAS,kBAAkB;AACnC;AAAA,MACF;AACA,UAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,KAAK,KAAK,KAAK;AAC5C;AAAA,MACF;AACA,WAAK,IAAI,MAAM,KAAK,KAAK,GAAG;AAAA,IAC9B;AAEA,WAAO;AAAA,EACT;AAAA,EAES,4BAAqC;AAC5C,WAAO,IAAI,QAAQ,KAAK,QAAQ,KAAK,cAAc,KAAK,cAAc;AAAA,EACxE;AACF;AAEA,SAAQ;",
  "names": []
}
