{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/CompilerScriptMapping.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {ContentProviderBasedProject} from './ContentProviderBasedProject.js';\nimport type {DebuggerSourceMapping, DebuggerWorkspaceBinding} from './DebuggerWorkspaceBinding.js';\nimport {IgnoreListManager} from './IgnoreListManager.js';\nimport {NetworkProject} from './NetworkProject.js';\n\n/**\n * The `CompilerScriptMapping` maps script entities from source maps to scripts and vice versa.\n * It is part of the {@link DebuggerWorkspaceBinding} and operates on top of the\n * {@link SDK.SourceMapManager.SourceMapManager}.\n *\n * The `CompilerScriptMapping` maintains a list of {@link ContentProviderBasedProject}s, in which it\n * creates the `UISourceCode`s for the source-mapped entities. The mapping is implemented in various\n * layers:\n *\n * - `#sourceMapToProject` holds a mapping of all the attached `SourceMap`s to their respective\n *   `ContentBasedProviderBasedProject`s. When resolving raw to UI locations this is the first\n *   place to check.\n * - `#uiSourceCodeToSourceMaps` maps every `UISourceCode` created herein to the `SourceMap` that\n *   it originated from. This is the authoritative source of information: The `#projects` might\n *   contain `UISourceCode` objects that were created from this `CompilerScriptMapping`, but which\n *   have become stale, and `#uiSourceCodeToSourceMaps` represents these as having no source maps.\n *\n * @see {@link SDK.SourceMap.SourceMap}\n * @see {@link SDK.SourceMapManager.SourceMapManager}\n */\nexport class CompilerScriptMapping implements DebuggerSourceMapping {\n  readonly #sourceMapManager: SDK.SourceMapManager.SourceMapManager<SDK.Script.Script>;\n  readonly #debuggerWorkspaceBinding: DebuggerWorkspaceBinding;\n  readonly #stubUISourceCodes = new Map<SDK.Script.Script, Workspace.UISourceCode.UISourceCode>();\n  readonly #stubProject: ContentProviderBasedProject;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n  readonly #projects = new Map<string, ContentProviderBasedProject>();\n  readonly #sourceMapToProject = new Map<SDK.SourceMap.SourceMap, ContentProviderBasedProject>();\n  readonly #uiSourceCodeToSourceMaps =\n      new Platform.MapUtilities.Multimap<Workspace.UISourceCode.UISourceCode, SDK.SourceMap.SourceMap>();\n\n  constructor(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, workspace: Workspace.Workspace.WorkspaceImpl,\n      debuggerWorkspaceBinding: DebuggerWorkspaceBinding) {\n    this.#sourceMapManager = debuggerModel.sourceMapManager();\n    this.#debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n\n    this.#stubProject = new ContentProviderBasedProject(\n        workspace, 'jsSourceMaps:stub:' + debuggerModel.target().id(), Workspace.Workspace.projectTypes.Service, '',\n        true /* isServiceProject */);\n    this.#eventListeners = [\n      this.#sourceMapManager.addEventListener(\n          SDK.SourceMapManager.Events.SourceMapWillAttach, this.sourceMapWillAttach, this),\n      this.#sourceMapManager.addEventListener(\n          SDK.SourceMapManager.Events.SourceMapFailedToAttach, this.sourceMapFailedToAttach, this),\n      this.#sourceMapManager.addEventListener(\n          SDK.SourceMapManager.Events.SourceMapAttached, this.sourceMapAttached, this),\n      this.#sourceMapManager.addEventListener(\n          SDK.SourceMapManager.Events.SourceMapDetached, this.sourceMapDetached, this),\n    ];\n  }\n\n  private addStubUISourceCode(script: SDK.Script.Script): void {\n    const stubUISourceCode = this.#stubProject.addContentProvider(\n        Common.ParsedURL.ParsedURL.concatenate(script.sourceURL, ':sourcemap'),\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            script.sourceURL, Common.ResourceType.resourceTypes.Script,\n            '\\n\\n\\n\\n\\n// Please wait a bit.\\n// Compiled script is not shown while source map is being loaded!'),\n        'text/javascript');\n    this.#stubUISourceCodes.set(script, stubUISourceCode);\n  }\n\n  private removeStubUISourceCode(script: SDK.Script.Script): void {\n    const uiSourceCode = this.#stubUISourceCodes.get(script);\n    this.#stubUISourceCodes.delete(script);\n    if (uiSourceCode) {\n      this.#stubProject.removeUISourceCode(uiSourceCode.url());\n    }\n  }\n\n  getLocationRangesForSameSourceLocation(rawLocation: SDK.DebuggerModel.Location): SDK.DebuggerModel.LocationRange[] {\n    const debuggerModel = rawLocation.debuggerModel;\n    const script = rawLocation.script();\n    if (!script) {\n      return [];\n    }\n    const sourceMap = this.#sourceMapManager.sourceMapForClient(script);\n    if (!sourceMap) {\n      return [];\n    }\n\n    // Find the source location for the raw location.\n    const {lineNumber, columnNumber} = script.rawLocationToRelativeLocation(rawLocation);\n    const entry = sourceMap.findEntry(lineNumber, columnNumber);\n    if (!entry || !entry.sourceURL) {\n      return [];\n    }\n\n    const project = this.#sourceMapToProject.get(sourceMap);\n    if (!project) {\n      return [];\n    }\n\n    const uiSourceCode = project.uiSourceCodeForURL(entry.sourceURL);\n    if (!uiSourceCode) {\n      return [];\n    }\n\n    // Check that the reverse is also true and we have a binding for this |uiSourceCode|\n    // that is referred to from the |sourceMap| of the |script|.\n    if (!this.#uiSourceCodeToSourceMaps.hasValue(uiSourceCode, sourceMap)) {\n      return [];\n    }\n\n    // Map the source location back to raw location ranges.\n    const ranges = sourceMap.findReverseRanges(entry.sourceURL, entry.sourceLineNumber, entry.sourceColumnNumber);\n    return ranges.map(({startLine, startColumn, endLine, endColumn}) => {\n      const start = script.relativeLocationToRawLocation({lineNumber: startLine, columnNumber: startColumn});\n      const end = script.relativeLocationToRawLocation({lineNumber: endLine, columnNumber: endColumn});\n      return {\n        start: debuggerModel.createRawLocation(script, start.lineNumber, start.columnNumber),\n        end: debuggerModel.createRawLocation(script, end.lineNumber, end.columnNumber),\n      };\n    });\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString, isContentScript: boolean):\n      Workspace.UISourceCode.UISourceCode|null {\n    const projectType =\n        isContentScript ? Workspace.Workspace.projectTypes.ContentScripts : Workspace.Workspace.projectTypes.Network;\n    for (const project of this.#projects.values()) {\n      if (project.type() !== projectType) {\n        continue;\n      }\n      const uiSourceCode = project.uiSourceCodeForURL(url);\n      if (uiSourceCode) {\n        return uiSourceCode;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Resolves the source-mapped entity mapped from the given `rawLocation` if any. If the `rawLocation`\n   * does not point into a script with a source map, `null` is returned from here, while if the source\n   * map for the script is currently being loaded, a stub `UISourceCode` is returned meanwhile. Otherwise,\n   * if the script has a source map entry for the position identified by the `rawLocation`, this method\n   * will compute the location in the source-mapped file by a reverse lookup on the source map.\n   *\n   * If `rawLocation` points to a script with a source map managed by this `CompilerScriptMapping`, which\n   * is stale (because it was overridden by a more recent mapping), `null` will be returned.\n   *\n   * @param rawLocation script location.\n   * @returns the {@link Workspace.UISourceCode.UILocation} for the `rawLocation` if any.\n   */\n  rawLocationToUILocation(rawLocation: SDK.DebuggerModel.Location): Workspace.UISourceCode.UILocation|null {\n    const script = rawLocation.script();\n    if (!script) {\n      return null;\n    }\n\n    const {lineNumber, columnNumber} = script.rawLocationToRelativeLocation(rawLocation);\n    const stubUISourceCode = this.#stubUISourceCodes.get(script);\n    if (stubUISourceCode) {\n      return new Workspace.UISourceCode.UILocation(stubUISourceCode, lineNumber, columnNumber);\n    }\n\n    const sourceMap = this.#sourceMapManager.sourceMapForClient(script);\n    if (!sourceMap) {\n      return null;\n    }\n\n    const project = this.#sourceMapToProject.get(sourceMap);\n    if (!project) {\n      return null;\n    }\n\n    const entry = sourceMap.findEntry(lineNumber, columnNumber, rawLocation.inlineFrameIndex);\n    if (!entry || !entry.sourceURL) {\n      return null;\n    }\n\n    const uiSourceCode = project.uiSourceCodeForURL(entry.sourceURL);\n    if (!uiSourceCode) {\n      return null;\n    }\n\n    // Check that the reverse is also true and we have a binding for this `uiSourceCode`\n    // that is referred to from the `sourceMap` of the `script`.\n    if (!this.#uiSourceCodeToSourceMaps.hasValue(uiSourceCode, sourceMap)) {\n      return null;\n    }\n\n    return uiSourceCode.uiLocation(entry.sourceLineNumber, entry.sourceColumnNumber);\n  }\n\n  /**\n   * Resolves a location within a source mapped entity managed by the `CompilerScriptMapping`\n   * to its script locations. If the `uiSourceCode` does not belong to this mapping or if its\n   * mapping is stale, an empty list will be returned.\n   *\n   * A single UI location can map to multiple different {@link SDK.DebuggerModel.RawLocation}s,\n   * and these raw locations don't even need to belong to the same script (e.g. multiple bundles\n   * can reference the same shared source file in case of code splitting, and locations within\n   * this shared source file will then resolve to locations in all the bundles).\n   *\n   * @param uiSourceCode the source mapped entity.\n   * @param lineNumber the line number in terms of the {@link uiSourceCode}.\n   * @param columnNumber the column number in terms of the {@link uiSourceCode}.\n   * @returns a list of raw locations that correspond to the UI location.\n   */\n  uiLocationToRawLocations(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number, columnNumber: number):\n      SDK.DebuggerModel.Location[] {\n    const locations = [];\n    for (const sourceMap of this.#uiSourceCodeToSourceMaps.get(uiSourceCode)) {\n      const entry = sourceMap.sourceLineMapping(uiSourceCode.url(), lineNumber, columnNumber);\n      if (!entry) {\n        continue;\n      }\n      const script = this.#sourceMapManager.clientForSourceMap(sourceMap);\n      if (!script) {\n        continue;\n      }\n      const location = script.relativeLocationToRawLocation(entry);\n      locations.push(script.debuggerModel.createRawLocation(script, location.lineNumber, location.columnNumber));\n    }\n    return locations;\n  }\n\n  uiLocationRangeToRawLocationRanges(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      textRange: TextUtils.TextRange.TextRange): SDK.DebuggerModel.LocationRange[]|null {\n    if (!this.#uiSourceCodeToSourceMaps.has(uiSourceCode)) {\n      return null;\n    }\n    const ranges = [];\n    for (const sourceMap of this.#uiSourceCodeToSourceMaps.get(uiSourceCode)) {\n      const script = this.#sourceMapManager.clientForSourceMap(sourceMap);\n      if (!script) {\n        continue;\n      }\n\n      for (const scriptTextRange of sourceMap.reverseMapTextRanges(uiSourceCode.url(), textRange)) {\n        const startLocation = script.relativeLocationToRawLocation(scriptTextRange.start);\n        const endLocation = script.relativeLocationToRawLocation(scriptTextRange.end);\n        const start =\n            script.debuggerModel.createRawLocation(script, startLocation.lineNumber, startLocation.columnNumber);\n        const end = script.debuggerModel.createRawLocation(script, endLocation.lineNumber, endLocation.columnNumber);\n        ranges.push({start, end});\n      }\n    }\n    return ranges;\n  }\n\n  /**\n   * Computes the set of line numbers which are source-mapped to a script within the\n   * given {@link uiSourceCode}.\n   *\n   * @param uiSourceCode the source mapped entity.\n   * @return a set of source-mapped line numbers or `null` if the {@link uiSourceCode}\n   *         is not provided by this {@link CompilerScriptMapping} instance.\n   */\n  getMappedLines(uiSourceCode: Workspace.UISourceCode.UISourceCode): Set<number>|null {\n    if (!this.#uiSourceCodeToSourceMaps.has(uiSourceCode)) {\n      return null;\n    }\n    const mappedLines = new Set<number>();\n    for (const sourceMap of this.#uiSourceCodeToSourceMaps.get(uiSourceCode)) {\n      for (const entry of sourceMap.mappings()) {\n        if (entry.sourceURL !== uiSourceCode.url()) {\n          continue;\n        }\n        mappedLines.add(entry.sourceLineNumber);\n      }\n    }\n    return mappedLines;\n  }\n\n  /**\n   * Invoked by the {@link SDK.SourceMapManager.SourceMapManager} whenever it starts loading the\n   * source map for a given {@link SDK.Script.Script}. The `CompilerScriptMapping` will set up a\n   * {@link Workspace.UISourceCode.UISourceCode} stub for the time that the source map is being\n   * loaded to avoid showing the generated code when the DevTools front-end is stopped early (for\n   * example on a breakpoint).\n   *\n   * @param event holds the {@link SDK.Script.Script} whose source map is being loaded.\n   */\n  private sourceMapWillAttach(event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script}>): void {\n    const {client: script} = event.data;\n    // Create stub UISourceCode for the time source mapping is being loaded.\n    this.addStubUISourceCode(script);\n    void this.#debuggerWorkspaceBinding.updateLocations(script);\n    if (IgnoreListManager.instance().isUserIgnoreListedURL(\n            script.sourceURL, {isContentScript: script.isContentScript()})) {\n      this.#sourceMapManager.cancelAttachSourceMap(script);\n    }\n  }\n\n  /**\n   * Invoked by the {@link SDK.SourceMapManager.SourceMapManager} after an attempt to load the\n   * source map for a given {@link SDK.Script.Script} failed. The `CompilerScriptMapping` will\n   * remove the {@link Workspace.UISourceCode.UISourceCode} stub, and from this time on won't\n   * report any mappings for the `client` script.\n   *\n   * @param event holds the {@link SDK.Script.Script} whose source map failed to load.\n   */\n  private sourceMapFailedToAttach(event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script}>): void {\n    const {client: script} = event.data;\n    this.removeStubUISourceCode(script);\n    void this.#debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  /**\n   * Invoked by the {@link SDK.SourceMapManager.SourceMapManager} after an attempt to load the\n   * source map for a given {@link SDK.Script.Script} succeeded. The `CompilerScriptMapping` will\n   * now create {@link Workspace.UISourceCode.UISourceCode}s for all the sources mentioned in the\n   * `sourceMap`.\n   *\n   * In case of a conflict this method creates a new {@link Workspace.UISourceCode.UISourceCode}\n   * and copies over all the mappings from the other source maps that were registered for the\n   * same URL and which are compatible (agree on the content and ignore-list hint for the given\n   * URL). If they are considered incompatible, the original `UISourceCode` will simply be\n   * removed and a new mapping will be established.\n   *\n   * @param event holds the {@link SDK.Script.Script} and its {@link SDK.SourceMap.SourceMap}.\n   */\n  private sourceMapAttached(event: Common.EventTarget.EventTargetEvent<{\n    client: SDK.Script.Script,\n    sourceMap: SDK.SourceMap.SourceMap,\n  }>): void {\n    const {client: script, sourceMap} = event.data;\n    const scripts = new Set<SDK.Script.Script>([script]);\n    this.removeStubUISourceCode(script);\n\n    const target = script.target();\n    const projectId = `jsSourceMaps:${script.isContentScript() ? 'extensions' : ''}:${target.id()}`;\n    let project = this.#projects.get(projectId);\n    if (!project) {\n      const projectType = script.isContentScript() ? Workspace.Workspace.projectTypes.ContentScripts :\n                                                     Workspace.Workspace.projectTypes.Network;\n      project = new ContentProviderBasedProject(\n          this.#stubProject.workspace(), projectId, projectType, /* displayName */ '', /* isServiceProject */ false);\n      NetworkProject.setTargetForProject(project, target);\n      this.#projects.set(projectId, project);\n    }\n    this.#sourceMapToProject.set(sourceMap, project);\n\n    for (const url of sourceMap.sourceURLs()) {\n      const contentType = Common.ResourceType.resourceTypes.SourceMapScript;\n      const uiSourceCode = project.createUISourceCode(url, contentType);\n      if (sourceMap.hasIgnoreListHint(url)) {\n        uiSourceCode.markKnownThirdParty();\n      }\n      const content = sourceMap.embeddedContentByURL(url);\n      const contentProvider = content !== null ?\n          TextUtils.StaticContentProvider.StaticContentProvider.fromString(url, contentType, content) :\n          new SDK.CompilerSourceMappingContentProvider.CompilerSourceMappingContentProvider(\n              url, contentType, script.createPageResourceLoadInitiator());\n      let metadata: Workspace.UISourceCode.UISourceCodeMetadata|null = null;\n      if (content !== null) {\n        const encoder = new TextEncoder();\n        metadata = new Workspace.UISourceCode.UISourceCodeMetadata(null, encoder.encode(content).length);\n      }\n      const mimeType = Common.ResourceType.ResourceType.mimeFromURL(url) ?? contentType.canonicalMimeType();\n\n      this.#uiSourceCodeToSourceMaps.set(uiSourceCode, sourceMap);\n      NetworkProject.setInitialFrameAttribution(uiSourceCode, script.frameId);\n\n      // Check if there was already an `UISourceCode` for the given `url`, and if so, discard\n      // the previous one. While it would be possible to keep the previous one and just add\n      // the new mapping (from the `sourceMap`) to it as long as there's no conflict, this\n      // doesn't really work with the way the `BreakpointManager` and other parts of the front-end\n      // work, which only listen for additions/removals of `UISourceCode`s, since there's no\n      // notion of a 'UISourceCodeChanged` event (yet).\n      //\n      // Therefore, unless we discard any previous `UISourceCode` for the `url` and publish the\n      // new `uiSourceCode`, the `BreakpointManager` will not restore / set breakpoints in newly\n      // added scripts in case of code-splitting, since it won't find out about these new mappings.\n      // By removing and (re)adding a `UISourceCode` for the `url` we effectively force restoration\n      // of breakpoints.\n      const otherUISourceCode = project.uiSourceCodeForURL(url);\n      if (otherUISourceCode !== null) {\n        // Copy the existing source mappings from the `otherUISourceCode` over as long as\n        // they are compatible with the `sourceMap` wrt. `url`. While doing so, also clean\n        // up the `otherUISourceCode` (in particular its frame attributions).\n        for (const otherSourceMap of this.#uiSourceCodeToSourceMaps.get(otherUISourceCode)) {\n          this.#uiSourceCodeToSourceMaps.delete(otherUISourceCode, otherSourceMap);\n          const otherScript = this.#sourceMapManager.clientForSourceMap(otherSourceMap);\n          if (!otherScript) {\n            continue;\n          }\n          NetworkProject.removeFrameAttribution(otherUISourceCode, otherScript.frameId);\n          if (sourceMap.compatibleForURL(url, otherSourceMap)) {\n            this.#uiSourceCodeToSourceMaps.set(uiSourceCode, otherSourceMap);\n            NetworkProject.addFrameAttribution(uiSourceCode, otherScript.frameId);\n          }\n          scripts.add(otherScript);\n        }\n        project.removeUISourceCode(url);\n      }\n\n      project.addUISourceCodeWithProvider(uiSourceCode, contentProvider, metadata, mimeType);\n    }\n    void Promise.all([...scripts].map(script => this.#debuggerWorkspaceBinding.updateLocations(script)))\n        .then(() => this.sourceMapAttachedForTest(sourceMap));\n  }\n\n  /**\n   * Invoked by the {@link SDK.SourceMapManager.SourceMapManager} when the source map for a given\n   * {@link SDK.Script.Script} is removed, which could be either because the target is execution\n   * context was destroyed, or the user manually asked to replace the source map for a given\n   * script.\n   *\n   * @param event holds the {@link SDK.Script.Script} and {@link SDK.SourceMap.SourceMap} that\n   *              should be detached.\n   */\n  private sourceMapDetached(event: Common.EventTarget.EventTargetEvent<{\n    client: SDK.Script.Script,\n    sourceMap: SDK.SourceMap.SourceMap,\n  }>): void {\n    const {client: script, sourceMap} = event.data;\n    const project = this.#sourceMapToProject.get(sourceMap);\n    if (!project) {\n      return;\n    }\n\n    // Remove all the files in the `project` that (still) belong to the `sourceMap`.\n    // In case of conflicts or overrides (for example due to HMR), not all the files\n    // that were originally provided by the `sourceMap` might still belong to it.\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      if (this.#uiSourceCodeToSourceMaps.delete(uiSourceCode, sourceMap)) {\n        NetworkProject.removeFrameAttribution(uiSourceCode, script.frameId);\n        if (!this.#uiSourceCodeToSourceMaps.has(uiSourceCode)) {\n          project.removeUISourceCode(uiSourceCode.url());\n        }\n      }\n    }\n\n    this.#sourceMapToProject.delete(sourceMap);\n    void this.#debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  scriptsForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): SDK.Script.Script[] {\n    const scripts = [];\n    for (const sourceMap of this.#uiSourceCodeToSourceMaps.get(uiSourceCode)) {\n      const script = this.#sourceMapManager.clientForSourceMap(sourceMap);\n      if (script) {\n        scripts.push(script);\n      }\n    }\n    return scripts;\n  }\n\n  private sourceMapAttachedForTest(_sourceMap: SDK.SourceMap.SourceMap): void {\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    for (const project of this.#projects.values()) {\n      project.dispose();\n    }\n    this.#stubProject.dispose();\n  }\n}\n"],
  "mappings": "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",
  "names": ["script"]
}
