{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/extensions/ExtensionAPI.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as PublicAPI from '../../../extension-api/ExtensionAPI'; // eslint-disable-line rulesdir/es_modules_import\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as HAR from '../har/har.js';\n\n/* eslint-disable @typescript-eslint/naming-convention,@typescript-eslint/no-non-null-assertion */\nexport namespace PrivateAPI {\n  export namespace Panels {\n    export const enum SearchAction {\n      CancelSearch = 'cancelSearch',\n      PerformSearch = 'performSearch',\n      NextSearchResult = 'nextSearchResult',\n      PreviousSearchResult = 'previousSearchResult',\n    }\n  }\n\n  export const enum Events {\n    ButtonClicked = 'button-clicked-',\n    PanelObjectSelected = 'panel-objectSelected-',\n    InspectedURLChanged = 'inspected-url-changed',\n    NetworkRequestFinished = 'network-request-finished',\n    OpenResource = 'open-resource',\n    PanelSearch = 'panel-search-',\n    ProfilingStarted = 'profiling-started-',\n    ProfilingStopped = 'profiling-stopped-',\n    ResourceAdded = 'resource-added',\n    ResourceContentCommitted = 'resource-content-committed',\n    ViewShown = 'view-shown-',\n    ViewHidden = 'view-hidden,',\n    ThemeChange = 'host-theme-change',\n  }\n\n  export const enum Commands {\n    AddRequestHeaders = 'addRequestHeaders',\n    CreatePanel = 'createPanel',\n    CreateSidebarPane = 'createSidebarPane',\n    CreateToolbarButton = 'createToolbarButton',\n    EvaluateOnInspectedPage = 'evaluateOnInspectedPage',\n    ForwardKeyboardEvent = '_forwardKeyboardEvent',\n    GetHAR = 'getHAR',\n    GetPageResources = 'getPageResources',\n    GetRequestContent = 'getRequestContent',\n    GetResourceContent = 'getResourceContent',\n    OpenResource = 'openResource',\n    Reload = 'Reload',\n    Subscribe = 'subscribe',\n    SetOpenResourceHandler = 'setOpenResourceHandler',\n    SetThemeChangeHandler = 'setThemeChangeHandler',\n    SetResourceContent = 'setResourceContent',\n    SetSidebarContent = 'setSidebarContent',\n    SetSidebarHeight = 'setSidebarHeight',\n    SetSidebarPage = 'setSidebarPage',\n    ShowPanel = 'showPanel',\n    Unsubscribe = 'unsubscribe',\n    UpdateButton = 'updateButton',\n    RegisterLanguageExtensionPlugin = 'registerLanguageExtensionPlugin',\n    GetWasmLinearMemory = 'getWasmLinearMemory',\n    GetWasmLocal = 'getWasmLocal',\n    GetWasmGlobal = 'getWasmGlobal',\n    GetWasmOp = 'getWasmOp',\n    RegisterRecorderExtensionPlugin = 'registerRecorderExtensionPlugin',\n    CreateRecorderView = 'createRecorderView',\n    ShowRecorderView = 'showRecorderView',\n    ShowNetworkPanel = 'showNetworkPanel',\n    ReportResourceLoad = 'reportResourceLoad',\n  }\n\n  export const enum LanguageExtensionPluginCommands {\n    AddRawModule = 'addRawModule',\n    RemoveRawModule = 'removeRawModule',\n    SourceLocationToRawLocation = 'sourceLocationToRawLocation',\n    RawLocationToSourceLocation = 'rawLocationToSourceLocation',\n    GetScopeInfo = 'getScopeInfo',\n    ListVariablesInScope = 'listVariablesInScope',\n    GetTypeInfo = 'getTypeInfo',\n    GetFormatter = 'getFormatter',\n    GetInspectableAddress = 'getInspectableAddress',\n    GetFunctionInfo = 'getFunctionInfo',\n    GetInlinedFunctionRanges = 'getInlinedFunctionRanges',\n    GetInlinedCalleesRanges = 'getInlinedCalleesRanges',\n    GetMappedLines = 'getMappedLines',\n    FormatValue = 'formatValue',\n    GetProperties = 'getProperties',\n    ReleaseObject = 'releaseObject',\n  }\n\n  export const enum LanguageExtensionPluginEvents {\n    UnregisteredLanguageExtensionPlugin = 'unregisteredLanguageExtensionPlugin',\n  }\n\n  export const enum RecorderExtensionPluginCommands {\n    Stringify = 'stringify',\n    StringifyStep = 'stringifyStep',\n    Replay = 'replay',\n  }\n\n  export const enum RecorderExtensionPluginEvents {\n    UnregisteredRecorderExtensionPlugin = 'unregisteredRecorderExtensionPlugin',\n  }\n\n  export interface EvaluateOptions {\n    frameURL?: string;\n    useContentScriptContext?: boolean;\n    scriptExecutionContext?: string;\n  }\n\n  type RegisterLanguageExtensionPluginRequest = {\n    command: Commands.RegisterLanguageExtensionPlugin,\n    pluginName: string,\n    port: MessagePort,\n    supportedScriptTypes: PublicAPI.Chrome.DevTools.SupportedScriptTypes,\n  };\n  export type RecordingExtensionPluginCapability = 'export'|'replay';\n  type RegisterRecorderExtensionPluginRequest = {\n    command: Commands.RegisterRecorderExtensionPlugin,\n    pluginName: string,\n    capabilities: RecordingExtensionPluginCapability[],\n    port: MessagePort,\n    mediaType?: string,\n  };\n  type CreateRecorderViewRequest = {\n    command: Commands.CreateRecorderView,\n    id: string,\n    title: string,\n    pagePath: string,\n  };\n  type ShowRecorderViewRequest = {\n    command: Commands.ShowRecorderView,\n    id: string,\n  };\n  type SubscribeRequest = {command: Commands.Subscribe, type: string};\n  type UnsubscribeRequest = {command: Commands.Unsubscribe, type: string};\n  type AddRequestHeadersRequest = {\n    command: Commands.AddRequestHeaders,\n    extensionId: string,\n    headers: {[key: string]: string},\n  };\n  type CreatePanelRequest = {command: Commands.CreatePanel, id: string, title: string, page: string};\n  type ShowPanelRequest = {command: Commands.ShowPanel, id: string};\n  type CreateToolbarButtonRequest = {\n    command: Commands.CreateToolbarButton,\n    id: string,\n    icon: string,\n    panel: string,\n    tooltip?: string,\n    disabled?: boolean,\n  };\n  type UpdateButtonRequest =\n      {command: Commands.UpdateButton, id: string, icon?: string, tooltip?: string, disabled?: boolean};\n  type CreateSidebarPaneRequest = {command: Commands.CreateSidebarPane, id: string, panel: string, title: string};\n  type SetSidebarHeightRequest = {command: Commands.SetSidebarHeight, id: string, height: string};\n  type SetSidebarContentRequest = {\n    command: Commands.SetSidebarContent,\n    id: string,\n    expression: string,\n    evaluateOnPage?: boolean,\n    rootTitle?: string,\n    evaluateOptions?: EvaluateOptions,\n  };\n  type SetSidebarPageRequest = {command: Commands.SetSidebarPage, id: string, page: string};\n  type OpenResourceRequest =\n      {command: Commands.OpenResource, url: Platform.DevToolsPath.UrlString, lineNumber: number, columnNumber: number};\n  type SetOpenResourceHandlerRequest = {command: Commands.SetOpenResourceHandler, handlerPresent: boolean};\n  type SetThemeChangeHandlerRequest = {command: Commands.SetThemeChangeHandler, handlerPresent: boolean};\n  type ReloadRequest = {\n    command: Commands.Reload,\n    options: null|{\n      userAgent?: string,\n      injectedScript?: string,\n      ignoreCache?: boolean,\n    },\n  };\n  type EvaluateOnInspectedPageRequest = {\n    command: Commands.EvaluateOnInspectedPage,\n    expression: string,\n    evaluateOptions?: EvaluateOptions,\n  };\n  type GetRequestContentRequest = {command: Commands.GetRequestContent, id: number};\n  type GetResourceContentRequest = {command: Commands.GetResourceContent, url: string};\n  type SetResourceContentRequest =\n      {command: Commands.SetResourceContent, url: string, content: string, commit: boolean};\n  type ForwardKeyboardEventRequest = {\n    command: Commands.ForwardKeyboardEvent,\n    entries: Array<KeyboardEventInit&{eventType: string}>,\n  };\n  type GetHARRequest = {command: Commands.GetHAR};\n  type GetPageResourcesRequest = {command: Commands.GetPageResources};\n  type GetWasmLinearMemoryRequest = {\n    command: Commands.GetWasmLinearMemory,\n    offset: number,\n    length: number,\n    stopId: unknown,\n  };\n  type GetWasmLocalRequest = {\n    command: Commands.GetWasmLocal,\n    local: number,\n    stopId: unknown,\n  };\n  type GetWasmGlobalRequest = {\n    command: Commands.GetWasmGlobal,\n    global: number,\n    stopId: unknown,\n  };\n  type GetWasmOpRequest = {command: Commands.GetWasmOp, op: number, stopId: unknown};\n  type ShowNetworkPanelRequest = {command: Commands.ShowNetworkPanel, filter: string|undefined};\n  type ReportResourceLoadRequest = {\n    command: Commands.ReportResourceLoad,\n    extensionId: string,\n    resourceUrl: string,\n    status: {success: boolean, errorMessage?: string, size?: number},\n  };\n\n  export type ServerRequests = ShowRecorderViewRequest|CreateRecorderViewRequest|RegisterRecorderExtensionPluginRequest|\n      RegisterLanguageExtensionPluginRequest|SubscribeRequest|UnsubscribeRequest|AddRequestHeadersRequest|\n      CreatePanelRequest|ShowPanelRequest|CreateToolbarButtonRequest|UpdateButtonRequest|CreateSidebarPaneRequest|\n      SetSidebarHeightRequest|SetSidebarContentRequest|SetSidebarPageRequest|OpenResourceRequest|\n      SetOpenResourceHandlerRequest|SetThemeChangeHandlerRequest|ReloadRequest|EvaluateOnInspectedPageRequest|\n      GetRequestContentRequest|GetResourceContentRequest|SetResourceContentRequest|ForwardKeyboardEventRequest|\n      GetHARRequest|GetPageResourcesRequest|GetWasmLinearMemoryRequest|GetWasmLocalRequest|GetWasmGlobalRequest|\n      GetWasmOpRequest|ShowNetworkPanelRequest|ReportResourceLoadRequest;\n  export type ExtensionServerRequestMessage = PrivateAPI.ServerRequests&{requestId?: number};\n\n  type AddRawModuleRequest = {\n    method: LanguageExtensionPluginCommands.AddRawModule,\n    parameters: {rawModuleId: string, symbolsURL: string|undefined, rawModule: PublicAPI.Chrome.DevTools.RawModule},\n  };\n  type SourceLocationToRawLocationRequest = {\n    method: LanguageExtensionPluginCommands.SourceLocationToRawLocation,\n    parameters: {sourceLocation: PublicAPI.Chrome.DevTools.SourceLocation},\n  };\n  type RawLocationToSourceLocationRequest = {\n    method: LanguageExtensionPluginCommands.RawLocationToSourceLocation,\n    parameters: {rawLocation: PublicAPI.Chrome.DevTools.RawLocation},\n  };\n  type GetScopeInfoRequest = {method: LanguageExtensionPluginCommands.GetScopeInfo, parameters: {type: string}};\n  type ListVariablesInScopeRequest = {\n    method: LanguageExtensionPluginCommands.ListVariablesInScope,\n    parameters: {rawLocation: PublicAPI.Chrome.DevTools.RawLocation},\n  };\n  type RemoveRawModuleRequest = {\n    method: LanguageExtensionPluginCommands.RemoveRawModule,\n    parameters: {rawModuleId: string},\n  };\n  type GetFunctionInfoRequest = {\n    method: LanguageExtensionPluginCommands.GetFunctionInfo,\n    parameters: {rawLocation: PublicAPI.Chrome.DevTools.RawLocation},\n  };\n  type GetInlinedFunctionRangesRequest = {\n    method: LanguageExtensionPluginCommands.GetInlinedFunctionRanges,\n    parameters: {rawLocation: PublicAPI.Chrome.DevTools.RawLocation},\n  };\n  type GetInlinedCalleesRangesRequest = {\n    method: LanguageExtensionPluginCommands.GetInlinedCalleesRanges,\n    parameters: {rawLocation: PublicAPI.Chrome.DevTools.RawLocation},\n  };\n  type GetMappedLinesRequest = {\n    method: LanguageExtensionPluginCommands.GetMappedLines,\n    parameters: {rawModuleId: string, sourceFileURL: string},\n  };\n  type FormatValueRequest = {\n    method: LanguageExtensionPluginCommands.FormatValue,\n    parameters: {expression: string, context: PublicAPI.Chrome.DevTools.RawLocation, stopId: number},\n  };\n  type GetPropertiesRequest = {\n    method: LanguageExtensionPluginCommands.GetProperties,\n    parameters: {objectId: PublicAPI.Chrome.DevTools.RemoteObjectId},\n  };\n  type ReleaseObjectRequest = {\n    method: LanguageExtensionPluginCommands.ReleaseObject,\n    parameters: {objectId: PublicAPI.Chrome.DevTools.RemoteObjectId},\n  };\n\n  export type LanguageExtensionRequests =\n      AddRawModuleRequest|SourceLocationToRawLocationRequest|RawLocationToSourceLocationRequest|GetScopeInfoRequest|\n      ListVariablesInScopeRequest|RemoveRawModuleRequest|GetFunctionInfoRequest|GetInlinedFunctionRangesRequest|\n      GetInlinedCalleesRangesRequest|GetMappedLinesRequest|FormatValueRequest|GetPropertiesRequest|ReleaseObjectRequest;\n\n  type StringifyRequest = {\n    method: RecorderExtensionPluginCommands.Stringify,\n    parameters: {recording: Record<string, unknown>},\n  };\n\n  type StringifyStepRequest = {\n    method: RecorderExtensionPluginCommands.StringifyStep,\n    parameters: {step: Record<string, unknown>},\n  };\n\n  type ReplayRequest = {\n    method: RecorderExtensionPluginCommands.Replay,\n    parameters: {recording: Record<string, unknown>},\n  };\n\n  export type RecorderExtensionRequests = StringifyRequest|StringifyStepRequest|ReplayRequest;\n}\n\ndeclare global {\n  interface Window {\n    injectedExtensionAPI:\n        (extensionInfo: ExtensionDescriptor, inspectedTabId: string, themeName: string, keysToForward: number[],\n         testHook:\n             (extensionServer: APIImpl.ExtensionServerClient, extensionAPI: APIImpl.InspectorExtensionAPI) => unknown,\n         injectedScriptId: number, targetWindow?: Window) => void;\n    buildExtensionAPIInjectedScript(\n        extensionInfo: ExtensionDescriptor, inspectedTabId: string, themeName: string, keysToForward: number[],\n        testHook: undefined|((extensionServer: unknown, extensionAPI: unknown) => unknown)): string;\n    chrome: PublicAPI.Chrome.DevTools.Chrome;\n    webInspector?: APIImpl.InspectorExtensionAPI;\n  }\n}\n\nexport type ExtensionDescriptor = {\n  startPage: string,\n  name: string,\n  exposeExperimentalAPIs: boolean,\n  exposeWebInspectorNamespace?: boolean,\n  allowFileAccess?: boolean,\n};\n\nnamespace APIImpl {\n  export interface InspectorExtensionAPI {\n    languageServices: PublicAPI.Chrome.DevTools.LanguageExtensions;\n    recorder: PublicAPI.Chrome.DevTools.RecorderExtensions;\n    performance: PublicAPI.Chrome.DevTools.Performance;\n    network: PublicAPI.Chrome.DevTools.Network;\n    panels: PublicAPI.Chrome.DevTools.Panels;\n    inspectedWindow: PublicAPI.Chrome.DevTools.InspectedWindow;\n  }\n\n  export interface ExtensionServerClient {\n    _callbacks: {[key: string]: (response: unknown) => unknown};\n    _handlers: {[key: string]: (request: {arguments: unknown[]}) => unknown};\n    _lastRequestId: number;\n    _lastObjectId: number;\n    _port: MessagePort;\n\n    _onCallback(request: unknown): void;\n    _onMessage(event: MessageEvent<{command: string, requestId: number, arguments: unknown[]}>): void;\n    _registerCallback(callback: (response: unknown) => unknown): number;\n    registerHandler(command: string, handler: (request: {arguments: unknown[]}) => unknown): void;\n    unregisterHandler(command: string): void;\n    hasHandler(command: string): boolean;\n    sendRequest<ResponseT>(\n        request: PrivateAPI.ServerRequests, callback?: ((response: ResponseT) => unknown), transfers?: unknown[]): void;\n    nextObjectId(): string;\n  }\n\n  export type Callable = (...args: any[]) => void;\n\n  export interface EventSink<ListenerT extends Callable> extends PublicAPI.Chrome.DevTools.EventSink<ListenerT> {\n    _type: string;\n    _listeners: ListenerT[];\n    _customDispatch: undefined|((this: EventSink<ListenerT>, request: {arguments: unknown[]}) => unknown);\n\n    _fire(..._vararg: Parameters<ListenerT>): void;\n    _dispatch(request: {arguments: unknown[]}): void;\n  }\n\n  export interface Network extends PublicAPI.Chrome.DevTools.Network {\n    addRequestHeaders(headers: {[key: string]: string}): void;\n  }\n\n  export interface Request extends PublicAPI.Chrome.DevTools.Request, HAR.Log.EntryDTO {\n    _id: number;\n  }\n\n  export interface Panels extends PublicAPI.Chrome.DevTools.Panels {\n    get SearchAction(): {[key: string]: string};\n    setOpenResourceHandler(callback?: (resource: PublicAPI.Chrome.DevTools.Resource, lineNumber: number) => unknown):\n        void;\n    setThemeChangeHandler(callback?: (themeName: string) => unknown): void;\n  }\n\n  export interface ExtensionView extends PublicAPI.Chrome.DevTools.ExtensionView {\n    _id: string|null;\n  }\n\n  export interface ExtensionSidebarPane extends ExtensionView, PublicAPI.Chrome.DevTools.ExtensionSidebarPane {\n    setExpression(\n        expression: string, rootTitle?: string, evaluteOptions?: PrivateAPI.EvaluateOptions,\n        callback?: () => unknown): void;\n  }\n\n  export interface PanelWithSidebar extends ExtensionView, PublicAPI.Chrome.DevTools.PanelWithSidebar {\n    _hostPanelName: string;\n  }\n\n  export interface LanguageExtensions extends PublicAPI.Chrome.DevTools.LanguageExtensions {\n    _plugins: Map<PublicAPI.Chrome.DevTools.LanguageExtensionPlugin, MessagePort>;\n  }\n\n  export interface RecorderExtensions extends PublicAPI.Chrome.DevTools.RecorderExtensions {\n    _plugins: Map<PublicAPI.Chrome.DevTools.RecorderExtensionPlugin, MessagePort>;\n  }\n\n  export interface ExtensionPanel extends ExtensionView, PublicAPI.Chrome.DevTools.ExtensionPanel {\n    show(): void;\n  }\n\n  export interface RecorderView extends ExtensionView, PublicAPI.Chrome.DevTools.RecorderView {}\n\n  export interface Button extends PublicAPI.Chrome.DevTools.Button {\n    _id: string;\n  }\n\n  export type ResourceData = {url: string, type: string};\n  export interface Resource extends PublicAPI.Chrome.DevTools.Resource {\n    _type: string;\n    _url: string;\n\n    get type(): string;\n  }\n}\n\nself.injectedExtensionAPI = function(\n    extensionInfo: ExtensionDescriptor, inspectedTabId: string, themeName: string, keysToForward: number[],\n    testHook: (extensionServer: APIImpl.ExtensionServerClient, extensionAPI: APIImpl.InspectorExtensionAPI) => unknown,\n    injectedScriptId: number, targetWindowForTest?: Window): void {\n  const keysToForwardSet = new Set<number>(keysToForward);\n  const chrome = window.chrome || {};\n\n  const devtools_descriptor = Object.getOwnPropertyDescriptor(chrome, 'devtools');\n  if (devtools_descriptor) {\n    return;\n  }\n  let userAction = false;\n  let userRecorderAction = false;\n\n  // Here and below, all constructors are private to API implementation.\n  // For a public type Foo, if internal fields are present, these are on\n  // a private FooImpl type, an instance of FooImpl is used in a closure\n  // by Foo consutrctor to re-bind publicly exported members to an instance\n  // of Foo.\n\n  function EventSinkImpl<ListenerT extends APIImpl.Callable>(\n      this: APIImpl.EventSink<ListenerT>, type: string,\n      customDispatch?: (this: APIImpl.EventSink<ListenerT>, request: {arguments: unknown[]}) => unknown): void {\n    this._type = type;\n    this._listeners = [];\n    this._customDispatch = customDispatch;\n  }\n\n  EventSinkImpl.prototype = {\n    addListener: function<ListenerT extends APIImpl.Callable>(this: APIImpl.EventSink<ListenerT>, callback: ListenerT):\n        void {\n          if (typeof callback !== 'function') {\n            throw 'addListener: callback is not a function';\n          }\n          if (this._listeners.length === 0) {\n            extensionServer.sendRequest({command: PrivateAPI.Commands.Subscribe, type: this._type});\n          }\n          this._listeners.push(callback);\n          extensionServer.registerHandler('notify-' + this._type, this._dispatch.bind(this));\n        },\n\n    removeListener: function<ListenerT extends APIImpl.Callable>(\n        this: APIImpl.EventSink<ListenerT>, callback: ListenerT): void {\n      const listeners = this._listeners;\n\n      for (let i = 0; i < listeners.length; ++i) {\n        if (listeners[i] === callback) {\n          listeners.splice(i, 1);\n          break;\n        }\n      }\n      if (this._listeners.length === 0) {\n        extensionServer.sendRequest({command: PrivateAPI.Commands.Unsubscribe, type: this._type});\n      }\n    },\n\n    _fire: function<ListenerT extends APIImpl.Callable>(\n        this: APIImpl.EventSink<ListenerT>, ..._vararg: Parameters<ListenerT>): void {\n      const listeners = this._listeners.slice();\n      for (let i = 0; i < listeners.length; ++i) {\n        listeners[i].apply(null, Array.from(arguments));\n      }\n    },\n\n    _dispatch: function<ListenerT extends APIImpl.Callable>(\n        this: APIImpl.EventSink<ListenerT>, request: {arguments: unknown[]}): void {\n      if (this._customDispatch) {\n        this._customDispatch.call(this, request);\n      } else {\n        this._fire.apply(this, request.arguments as Parameters<ListenerT>);\n      }\n    },\n  };\n\n  function Constructor<NewT extends APIImpl.Callable>(ctor: NewT): new (...args: Parameters<NewT>) =>\n      ThisParameterType<NewT> {\n    return ctor as unknown as new (...args: Parameters<NewT>) => ThisParameterType<NewT>;\n  }\n\n  function InspectorExtensionAPI(this: APIImpl.InspectorExtensionAPI): void {\n    this.inspectedWindow = new (Constructor(InspectedWindow))();\n    this.panels = new (Constructor(Panels))();\n    this.network = new (Constructor(Network))();\n    this.languageServices = new (Constructor(LanguageServicesAPI))();\n    this.recorder = new (Constructor(RecorderServicesAPI))();\n    this.performance = new (Constructor(Performance))();\n    defineDeprecatedProperty(this, 'webInspector', 'resources', 'network');\n  }\n\n  function Network(this: APIImpl.Network): void {\n    function dispatchRequestEvent(\n        this: APIImpl.EventSink<(request: PublicAPI.Chrome.DevTools.Request) => unknown>,\n        message: {arguments: unknown[]}): void {\n      const request = message.arguments[1] as APIImpl.Request & {__proto__: APIImpl.Request};\n\n      request.__proto__ = new (Constructor(Request))(message.arguments[0] as number);\n      this._fire(request);\n    }\n\n    this.onRequestFinished =\n        new (Constructor(EventSink))(PrivateAPI.Events.NetworkRequestFinished, dispatchRequestEvent);\n    defineDeprecatedProperty(this, 'network', 'onFinished', 'onRequestFinished');\n\n    this.onNavigated = new (Constructor(EventSink))(PrivateAPI.Events.InspectedURLChanged);\n  }\n\n  (Network.prototype as Pick<APIImpl.Network, 'getHAR'|'addRequestHeaders'>) = {\n    getHAR: function(this: PublicAPI.Chrome.DevTools.Network, callback?: (harLog: Object) => unknown): void {\n      function callbackWrapper(response: unknown): void {\n        const result =\n            response as ({entries: Array<HAR.Log.EntryDTO&{__proto__?: APIImpl.Request, _requestId?: number}>});\n        const entries = (result && result.entries) || [];\n        for (let i = 0; i < entries.length; ++i) {\n          entries[i].__proto__ = new (Constructor(Request))(entries[i]._requestId as number);\n          delete entries[i]._requestId;\n        }\n        callback && callback(result as Object);\n      }\n      extensionServer.sendRequest({command: PrivateAPI.Commands.GetHAR}, callback && callbackWrapper);\n    },\n\n    addRequestHeaders: function(headers: {[key: string]: string}): void {\n      extensionServer.sendRequest(\n          {command: PrivateAPI.Commands.AddRequestHeaders, headers, extensionId: window.location.hostname});\n    },\n  };\n\n  function RequestImpl(this: APIImpl.Request, id: number): void {\n    this._id = id;\n  }\n\n  (RequestImpl.prototype as Pick<APIImpl.Request, 'getContent'>) = {\n    getContent: function(this: APIImpl.Request, callback?: (content: string, encoding: string) => unknown): void {\n      function callbackWrapper(response: unknown): void {\n        const {content, encoding} = response as {content: string, encoding: string};\n        callback && callback(content, encoding);\n      }\n      extensionServer.sendRequest(\n          {command: PrivateAPI.Commands.GetRequestContent, id: this._id}, callback && callbackWrapper);\n    },\n  };\n\n  function Panels(this: APIImpl.Panels): void {\n    const panels: {[key: string]: ElementsPanel|SourcesPanel|PublicAPI.Chrome.DevTools.NetworkPanel} = {\n      elements: new ElementsPanel(),\n      sources: new SourcesPanel(),\n      network: new (Constructor(NetworkPanel))(),\n    };\n\n    function panelGetter(name: string): ElementsPanel|SourcesPanel|PublicAPI.Chrome.DevTools.NetworkPanel {\n      return panels[name];\n    }\n    for (const panel in panels) {\n      Object.defineProperty(this, panel, {get: panelGetter.bind(null, panel), enumerable: true});\n    }\n  }\n\n  (Panels.prototype as\n   Pick<APIImpl.Panels, 'create'|'setOpenResourceHandler'|'openResource'|'SearchAction'|'setThemeChangeHandler'>) = {\n    create: function(\n        title: string, icon: string, page: string,\n        callback: (panel: PublicAPI.Chrome.DevTools.ExtensionPanel) => unknown): void {\n      const id = 'extension-panel-' + extensionServer.nextObjectId();\n      extensionServer.sendRequest(\n          {command: PrivateAPI.Commands.CreatePanel, id, title, page},\n          callback && (() => callback.call(this, new (Constructor(ExtensionPanel))(id))));\n    },\n\n    setOpenResourceHandler: function(\n        callback: (resource: PublicAPI.Chrome.DevTools.Resource, lineNumber: number) => unknown): void {\n      const hadHandler = extensionServer.hasHandler(PrivateAPI.Events.OpenResource);\n\n      function callbackWrapper(message: unknown): void {\n        // Allow the panel to show itself when handling the event.\n        userAction = true;\n        try {\n          const {resource, lineNumber} = message as {resource: APIImpl.ResourceData, lineNumber: number};\n          if (canAccessResource(resource)) {\n            callback.call(null, new (Constructor(Resource))(resource), lineNumber);\n          }\n        } finally {\n          userAction = false;\n        }\n      }\n\n      if (!callback) {\n        extensionServer.unregisterHandler(PrivateAPI.Events.OpenResource);\n      } else {\n        extensionServer.registerHandler(PrivateAPI.Events.OpenResource, callbackWrapper);\n      }\n\n      // Only send command if we either removed an existing handler or added handler and had none before.\n      if (hadHandler === !callback) {\n        extensionServer.sendRequest(\n            {command: PrivateAPI.Commands.SetOpenResourceHandler, handlerPresent: Boolean(callback)});\n      }\n    },\n\n    setThemeChangeHandler: function(callback: (themeName: string) => unknown): void {\n      const hadHandler = extensionServer.hasHandler(PrivateAPI.Events.ThemeChange);\n\n      function callbackWrapper(message: unknown): void {\n        const {themeName} = message as {themeName: string};\n        chrome.devtools.panels.themeName = themeName;\n        callback.call(null, themeName);\n      }\n\n      if (!callback) {\n        extensionServer.unregisterHandler(PrivateAPI.Events.ThemeChange);\n      } else {\n        extensionServer.registerHandler(PrivateAPI.Events.ThemeChange, callbackWrapper);\n      }\n\n      // Only send command if we either removed an existing handler or added handler and had none before.\n      if (hadHandler === !callback) {\n        extensionServer.sendRequest(\n            {command: PrivateAPI.Commands.SetThemeChangeHandler, handlerPresent: Boolean(callback)});\n      }\n    },\n\n    openResource: function(\n        url: Platform.DevToolsPath.UrlString, lineNumber: number, columnNumber?: number,\n        _callback?: (response: unknown) => unknown): void {\n      const callbackArg = extractCallbackArgument(arguments);\n      // Handle older API:\n      const columnNumberArg = typeof columnNumber === 'number' ? columnNumber : 0;\n      extensionServer.sendRequest(\n          {command: PrivateAPI.Commands.OpenResource, url, lineNumber, columnNumber: columnNumberArg}, callbackArg);\n    },\n\n    get SearchAction(): {[key: string]: string} {\n      return {\n        CancelSearch: PrivateAPI.Panels.SearchAction.CancelSearch,\n        PerformSearch: PrivateAPI.Panels.SearchAction.PerformSearch,\n        NextSearchResult: PrivateAPI.Panels.SearchAction.NextSearchResult,\n        PreviousSearchResult: PrivateAPI.Panels.SearchAction.PreviousSearchResult,\n      };\n    },\n  };\n\n  function ExtensionViewImpl(this: APIImpl.ExtensionView, id: string|null): void {\n    this._id = id;\n\n    function dispatchShowEvent(\n        this: APIImpl.EventSink<(window?: Window) => unknown>, message: {arguments: unknown[]}): void {\n      const frameIndex = message.arguments[0];\n      if (typeof frameIndex === 'number') {\n        this._fire(window.parent.frames[frameIndex]);\n      } else {\n        this._fire();\n      }\n    }\n\n    if (id) {\n      this.onShown = new (Constructor(EventSink))(PrivateAPI.Events.ViewShown + id, dispatchShowEvent);\n\n      this.onHidden = new (Constructor(EventSink))(PrivateAPI.Events.ViewHidden + id);\n    }\n  }\n\n  function PanelWithSidebarImpl(this: APIImpl.PanelWithSidebar, hostPanelName: string): void {\n    ExtensionViewImpl.call(this, null);\n    this._hostPanelName = hostPanelName;\n\n    this.onSelectionChanged = new (Constructor(EventSink))(PrivateAPI.Events.PanelObjectSelected + hostPanelName);\n  }\n\n  (PanelWithSidebarImpl.prototype as Pick<APIImpl.PanelWithSidebar, 'createSidebarPane'>&\n   {__proto__: APIImpl.ExtensionView}) = {\n    createSidebarPane: function(\n        this: APIImpl.PanelWithSidebar, title: string,\n        callback?: (pane: PublicAPI.Chrome.DevTools.ExtensionSidebarPane) => unknown): void {\n      const id = 'extension-sidebar-' + extensionServer.nextObjectId();\n      function callbackWrapper(): void {\n        callback && callback(new (Constructor(ExtensionSidebarPane))(id));\n      }\n      extensionServer.sendRequest(\n          {command: PrivateAPI.Commands.CreateSidebarPane, panel: this._hostPanelName, id, title},\n          callback && callbackWrapper);\n    },\n\n    __proto__: ExtensionViewImpl.prototype,\n  };\n\n  function RecorderServicesAPIImpl(this: APIImpl.RecorderExtensions): void {\n    this._plugins = new Map();\n  }\n\n  async function registerRecorderExtensionPluginImpl(\n      this: APIImpl.RecorderExtensions, plugin: PublicAPI.Chrome.DevTools.RecorderExtensionPlugin, pluginName: string,\n      mediaType?: string): Promise<void> {\n    if (this._plugins.has(plugin)) {\n      throw new Error(`Tried to register plugin '${pluginName}' twice`);\n    }\n    const channel = new MessageChannel();\n    const port = channel.port1;\n    this._plugins.set(plugin, port);\n    port.onmessage = ({data}: MessageEvent<{requestId: number}&PrivateAPI.RecorderExtensionRequests>): void => {\n      const {requestId} = data;\n      dispatchMethodCall(data)\n          .then(result => port.postMessage({requestId, result}))\n          .catch(error => port.postMessage({requestId, error: {message: error.message}}));\n    };\n\n    async function dispatchMethodCall(request: PrivateAPI.RecorderExtensionRequests): Promise<unknown> {\n      switch (request.method) {\n        case PrivateAPI.RecorderExtensionPluginCommands.Stringify:\n          return (plugin as PublicAPI.Chrome.DevTools.RecorderExtensionExportPlugin)\n              .stringify(request.parameters.recording);\n        case PrivateAPI.RecorderExtensionPluginCommands.StringifyStep:\n          return (plugin as PublicAPI.Chrome.DevTools.RecorderExtensionExportPlugin)\n              .stringifyStep(request.parameters.step);\n        case PrivateAPI.RecorderExtensionPluginCommands.Replay:\n          try {\n            userAction = true;\n            userRecorderAction = true;\n            return (plugin as PublicAPI.Chrome.DevTools.RecorderExtensionReplayPlugin)\n                .replay(request.parameters.recording);\n          } finally {\n            userAction = false;\n            userRecorderAction = false;\n          }\n        default:\n          // @ts-expect-error\n          throw new Error(`'${request.method}' is not recognized`);\n      }\n    }\n\n    const capabilities: PrivateAPI.RecordingExtensionPluginCapability[] = [];\n\n    if ('stringify' in plugin && 'stringifyStep' in plugin) {\n      capabilities.push('export');\n    }\n\n    if ('replay' in plugin) {\n      capabilities.push('replay');\n    }\n\n    await new Promise<void>(resolve => {\n      extensionServer.sendRequest(\n          {\n            command: PrivateAPI.Commands.RegisterRecorderExtensionPlugin,\n            pluginName,\n            mediaType,\n            capabilities,\n            port: channel.port2,\n          },\n          () => resolve(), [channel.port2]);\n    });\n  }\n\n  (RecorderServicesAPIImpl.prototype as Pick<\n       APIImpl.RecorderExtensions,\n       'registerRecorderExtensionPlugin'|'unregisterRecorderExtensionPlugin'|'createView'>) = {\n    registerRecorderExtensionPlugin: registerRecorderExtensionPluginImpl,\n    unregisterRecorderExtensionPlugin: async function(\n        this: APIImpl.RecorderExtensions, plugin: PublicAPI.Chrome.DevTools.RecorderExtensionPlugin): Promise<void> {\n      const port = this._plugins.get(plugin);\n      if (!port) {\n        throw new Error('Tried to unregister a plugin that was not previously registered');\n      }\n      this._plugins.delete(plugin);\n      port.postMessage({event: PrivateAPI.RecorderExtensionPluginEvents.UnregisteredRecorderExtensionPlugin});\n      port.close();\n    },\n    createView: async function(this: APIImpl.RecorderExtensions, title: string, pagePath: string):\n        Promise<PublicAPI.Chrome.DevTools.RecorderView> {\n          const id = 'recorder-extension-view-' + extensionServer.nextObjectId();\n          await new Promise(resolve => {\n            extensionServer.sendRequest(\n                {command: PrivateAPI.Commands.CreateRecorderView, id, title, pagePath}, resolve);\n          });\n          return new (Constructor(RecorderView))(id);\n        },\n  };\n\n  function LanguageServicesAPIImpl(this: APIImpl.LanguageExtensions): void {\n    this._plugins = new Map();\n  }\n\n  (LanguageServicesAPIImpl.prototype as PublicAPI.Chrome.DevTools.LanguageExtensions) = {\n    registerLanguageExtensionPlugin: async function(\n        this: APIImpl.LanguageExtensions, plugin: PublicAPI.Chrome.DevTools.LanguageExtensionPlugin, pluginName: string,\n        supportedScriptTypes: PublicAPI.Chrome.DevTools.SupportedScriptTypes): Promise<void> {\n      if (this._plugins.has(plugin)) {\n        throw new Error(`Tried to register plugin '${pluginName}' twice`);\n      }\n      const channel = new MessageChannel();\n      const port = channel.port1;\n      this._plugins.set(plugin, port);\n      port.onmessage = ({data}: MessageEvent<{requestId: number}&PrivateAPI.LanguageExtensionRequests>): void => {\n        const {requestId} = data;\n        console.time(`${requestId}: ${data.method}`);\n        dispatchMethodCall(data)\n            .then(result => port.postMessage({requestId, result}))\n            .catch(error => port.postMessage({requestId, error: {message: error.message}}))\n            .finally(() => console.timeEnd(`${requestId}: ${data.method}`));\n      };\n\n      function dispatchMethodCall(request: PrivateAPI.LanguageExtensionRequests): Promise<unknown> {\n        switch (request.method) {\n          case PrivateAPI.LanguageExtensionPluginCommands.AddRawModule:\n            return plugin.addRawModule(\n                request.parameters.rawModuleId, request.parameters.symbolsURL, request.parameters.rawModule);\n          case PrivateAPI.LanguageExtensionPluginCommands.RemoveRawModule:\n            return plugin.removeRawModule(request.parameters.rawModuleId);\n          case PrivateAPI.LanguageExtensionPluginCommands.SourceLocationToRawLocation:\n            return plugin.sourceLocationToRawLocation(request.parameters.sourceLocation);\n          case PrivateAPI.LanguageExtensionPluginCommands.RawLocationToSourceLocation:\n            return plugin.rawLocationToSourceLocation(request.parameters.rawLocation);\n          case PrivateAPI.LanguageExtensionPluginCommands.GetScopeInfo:\n            return plugin.getScopeInfo(request.parameters.type);\n          case PrivateAPI.LanguageExtensionPluginCommands.ListVariablesInScope:\n            return plugin.listVariablesInScope(request.parameters.rawLocation);\n          case PrivateAPI.LanguageExtensionPluginCommands.GetFunctionInfo:\n            return plugin.getFunctionInfo(request.parameters.rawLocation);\n          case PrivateAPI.LanguageExtensionPluginCommands.GetInlinedFunctionRanges:\n            return plugin.getInlinedFunctionRanges(request.parameters.rawLocation);\n          case PrivateAPI.LanguageExtensionPluginCommands.GetInlinedCalleesRanges:\n            return plugin.getInlinedCalleesRanges(request.parameters.rawLocation);\n          case PrivateAPI.LanguageExtensionPluginCommands.GetMappedLines:\n            if ('getMappedLines' in plugin) {\n              return plugin.getMappedLines(request.parameters.rawModuleId, request.parameters.sourceFileURL);\n            }\n            return Promise.resolve(undefined);\n          case PrivateAPI.LanguageExtensionPluginCommands.FormatValue:\n            if ('evaluate' in plugin && plugin.evaluate) {\n              return plugin.evaluate(\n                  request.parameters.expression, request.parameters.context, request.parameters.stopId);\n            }\n            return Promise.resolve(undefined);\n          case PrivateAPI.LanguageExtensionPluginCommands.GetProperties:\n            if ('getProperties' in plugin && plugin.getProperties) {\n              return plugin.getProperties(request.parameters.objectId);\n            }\n            if (!('evaluate' in plugin &&\n                  plugin.evaluate)) {  // If evalute is defined but the remote objects methods aren't, that's a bug\n              return Promise.resolve(undefined);\n            }\n            break;\n          case PrivateAPI.LanguageExtensionPluginCommands.ReleaseObject:\n            if ('releaseObject' in plugin && plugin.releaseObject) {\n              return plugin.releaseObject(request.parameters.objectId);\n            }\n            break;\n        }\n        throw new Error(`Unknown language plugin method ${request.method}`);\n      }\n\n      await new Promise<void>(resolve => {\n        extensionServer.sendRequest(\n            {\n              command: PrivateAPI.Commands.RegisterLanguageExtensionPlugin,\n              pluginName,\n              port: channel.port2,\n              supportedScriptTypes,\n            },\n            () => resolve(), [channel.port2]);\n      });\n    },\n\n    unregisterLanguageExtensionPlugin: async function(\n        this: APIImpl.LanguageExtensions, plugin: PublicAPI.Chrome.DevTools.LanguageExtensionPlugin): Promise<void> {\n      const port = this._plugins.get(plugin);\n      if (!port) {\n        throw new Error('Tried to unregister a plugin that was not previously registered');\n      }\n      this._plugins.delete(plugin);\n      port.postMessage({event: PrivateAPI.LanguageExtensionPluginEvents.UnregisteredLanguageExtensionPlugin});\n      port.close();\n    },\n\n    getWasmLinearMemory: async function(\n        this: APIImpl.LanguageExtensions, offset: number, length: number, stopId: number): Promise<ArrayBuffer> {\n      const result = await new Promise(\n          resolve => extensionServer.sendRequest(\n              {command: PrivateAPI.Commands.GetWasmLinearMemory, offset, length, stopId}, resolve));\n      if (Array.isArray(result)) {\n        return new Uint8Array(result).buffer;\n      }\n      return new ArrayBuffer(0);\n    },\n    getWasmLocal: async function(\n        this: APIImpl.LanguageExtensions, local: number, stopId: number): Promise<PublicAPI.Chrome.DevTools.WasmValue> {\n      return new Promise(\n          resolve => extensionServer.sendRequest({command: PrivateAPI.Commands.GetWasmLocal, local, stopId}, resolve));\n    },\n    getWasmGlobal: async function(this: APIImpl.LanguageExtensions, global: number, stopId: number):\n        Promise<PublicAPI.Chrome.DevTools.WasmValue> {\n          return new Promise(\n              resolve =>\n                  extensionServer.sendRequest({command: PrivateAPI.Commands.GetWasmGlobal, global, stopId}, resolve));\n        },\n    getWasmOp: async function(this: APIImpl.LanguageExtensions, op: number, stopId: number):\n        Promise<PublicAPI.Chrome.DevTools.WasmValue> {\n          return new Promise(\n              resolve => extensionServer.sendRequest({command: PrivateAPI.Commands.GetWasmOp, op, stopId}, resolve));\n        },\n\n    reportResourceLoad: function(resourceUrl: string, status: {success: boolean, errorMessage?: string, size?: number}):\n        Promise<void> {\n          return new Promise(\n              resolve => extensionServer.sendRequest(\n                  {\n                    command: PrivateAPI.Commands.ReportResourceLoad,\n                    extensionId: window.location.origin,\n                    resourceUrl,\n                    status,\n                  },\n                  resolve));\n        },\n\n  };\n\n  function NetworkPanelImpl(this: PublicAPI.Chrome.DevTools.NetworkPanel): void {\n  }\n\n  (NetworkPanelImpl.prototype as Pick<PublicAPI.Chrome.DevTools.NetworkPanel, 'show'>) = {\n    show: function(options?: {filter: string}): Promise<void> {\n      return new Promise<void>(\n          resolve => extensionServer.sendRequest(\n              {command: PrivateAPI.Commands.ShowNetworkPanel, filter: options?.filter}, () => resolve()));\n    },\n  };\n\n  function PerformanceImpl(this: PublicAPI.Chrome.DevTools.Performance): void {\n    function dispatchProfilingStartedEvent(this: APIImpl.EventSink<() => unknown>): void {\n      this._fire();\n    }\n\n    function dispatchProfilingStoppedEvent(this: APIImpl.EventSink<() => unknown>): void {\n      this._fire();\n    }\n\n    this.onProfilingStarted =\n        new (Constructor(EventSink))(PrivateAPI.Events.ProfilingStarted, dispatchProfilingStartedEvent);\n    this.onProfilingStopped =\n        new (Constructor(EventSink))(PrivateAPI.Events.ProfilingStopped, dispatchProfilingStoppedEvent);\n  }\n\n  function declareInterfaceClass<ImplT extends APIImpl.Callable>(implConstructor: ImplT): (\n      this: ThisParameterType<ImplT>, ...args: Parameters<ImplT>) => void {\n    return function(this: ThisParameterType<ImplT>, ...args: Parameters<ImplT>): void {\n      const impl = {__proto__: implConstructor.prototype};\n      implConstructor.apply(impl, args);\n      populateInterfaceClass(this as {[key: string]: unknown}, impl);\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function defineDeprecatedProperty(object: any, className: string, oldName: string, newName: string): void {\n    let warningGiven = false;\n    function getter(): unknown {\n      if (!warningGiven) {\n        console.warn(className + '.' + oldName + ' is deprecated. Use ' + className + '.' + newName + ' instead');\n        warningGiven = true;\n      }\n      return object[newName];\n    }\n    object.__defineGetter__(oldName, getter);\n  }\n\n  function extractCallbackArgument(args: IArguments): ((...args: unknown[]) => unknown)|undefined {\n    const lastArgument = args[args.length - 1];\n    return typeof lastArgument === 'function' ? lastArgument as (...args: unknown[]) => unknown : undefined;\n  }\n\n  const LanguageServicesAPI = declareInterfaceClass(LanguageServicesAPIImpl);\n  const RecorderServicesAPI = declareInterfaceClass(RecorderServicesAPIImpl);\n  const Performance = declareInterfaceClass(PerformanceImpl);\n  const Button = declareInterfaceClass(ButtonImpl);\n  const EventSink = declareInterfaceClass(EventSinkImpl);\n  const ExtensionPanel = declareInterfaceClass(ExtensionPanelImpl);\n  const RecorderView = declareInterfaceClass(RecorderViewImpl);\n  const ExtensionSidebarPane = declareInterfaceClass(ExtensionSidebarPaneImpl);\n  const PanelWithSidebarClass = declareInterfaceClass(PanelWithSidebarImpl);\n  const Request = declareInterfaceClass(RequestImpl);\n  const Resource = declareInterfaceClass(ResourceImpl);\n  const NetworkPanel = declareInterfaceClass(NetworkPanelImpl);\n\n  class ElementsPanel extends (Constructor(PanelWithSidebarClass)) {\n    constructor() {\n      super('elements');\n    }\n  }\n\n  class SourcesPanel extends (Constructor(PanelWithSidebarClass)) {\n    constructor() {\n      super('sources');\n    }\n  }\n\n  function ExtensionPanelImpl(this: APIImpl.ExtensionPanel, id: string): void {\n    ExtensionViewImpl.call(this, id);\n\n    this.onSearch = new (Constructor(EventSink))(PrivateAPI.Events.PanelSearch + id);\n  }\n\n  (ExtensionPanelImpl.prototype as Pick<APIImpl.ExtensionPanel, 'createStatusBarButton'|'show'>&\n   {__proto__: APIImpl.ExtensionView}) = {\n    createStatusBarButton: function(\n                               this: APIImpl.ExtensionPanel, iconPath: string, tooltipText: string, disabled: boolean):\n                               PublicAPI.Chrome.DevTools.Button {\n                                 const id = 'button-' + extensionServer.nextObjectId();\n                                 extensionServer.sendRequest({\n                                   command: PrivateAPI.Commands.CreateToolbarButton,\n                                   panel: this._id as string,\n                                   id,\n                                   icon: iconPath,\n                                   tooltip: tooltipText,\n                                   disabled: Boolean(disabled),\n                                 });\n\n                                 return new (Constructor(Button))(id);\n                               },\n\n    show: function(this: APIImpl.ExtensionPanel): void {\n      if (!userAction) {\n        return;\n      }\n\n      extensionServer.sendRequest({command: PrivateAPI.Commands.ShowPanel, id: this._id as string});\n    },\n\n    __proto__: ExtensionViewImpl.prototype,\n  };\n\n  function RecorderViewImpl(this: APIImpl.RecorderView, id: string): void {\n    ExtensionViewImpl.call(this, id);\n  }\n\n  (RecorderViewImpl.prototype as Pick<APIImpl.RecorderView, 'show'>& {__proto__: APIImpl.ExtensionView}) = {\n    show: function(this: APIImpl.RecorderView): void {\n      if (!userAction || !userRecorderAction) {\n        return;\n      }\n\n      extensionServer.sendRequest({command: PrivateAPI.Commands.ShowRecorderView, id: this._id as string});\n    },\n\n    __proto__: ExtensionViewImpl.prototype,\n  };\n\n  function ExtensionSidebarPaneImpl(this: APIImpl.ExtensionSidebarPane, id: string): void {\n    ExtensionViewImpl.call(this, id);\n  }\n\n  (ExtensionSidebarPaneImpl.prototype as\n       Pick<APIImpl.ExtensionSidebarPane, 'setHeight'|'setExpression'|'setObject'|'setPage'>&\n   {__proto__: APIImpl.ExtensionView}) = {\n    setHeight: function(this: APIImpl.ExtensionSidebarPane, height: string): void {\n      extensionServer.sendRequest({command: PrivateAPI.Commands.SetSidebarHeight, id: this._id as string, height});\n    },\n\n    setExpression: function(\n        this: APIImpl.ExtensionSidebarPane, expression: string, rootTitle: string,\n        evaluateOptions?: PrivateAPI.EvaluateOptions, _callback?: () => unknown): void {\n      extensionServer.sendRequest(\n          {\n            command: PrivateAPI.Commands.SetSidebarContent,\n            id: this._id as string,\n            expression,\n            rootTitle,\n            evaluateOnPage: true,\n            evaluateOptions: (typeof evaluateOptions === 'object' ? evaluateOptions : {}),\n          },\n          extractCallbackArgument(arguments));\n    },\n\n    setObject: function(\n        this: APIImpl.ExtensionSidebarPane, jsonObject: string, rootTitle?: string, callback?: () => unknown): void {\n      extensionServer.sendRequest(\n          {\n            command: PrivateAPI.Commands.SetSidebarContent,\n            id: this._id as string,\n            expression: jsonObject,\n            rootTitle,\n          },\n          callback);\n    },\n\n    setPage: function(this: APIImpl.ExtensionSidebarPane, page: string): void {\n      extensionServer.sendRequest({command: PrivateAPI.Commands.SetSidebarPage, id: this._id as string, page});\n    },\n\n    __proto__: ExtensionViewImpl.prototype,\n  };\n\n  function ButtonImpl(this: APIImpl.Button, id: string): void {\n    this._id = id;\n\n    this.onClicked = new (Constructor(EventSink))(PrivateAPI.Events.ButtonClicked + id);\n  }\n\n  (ButtonImpl.prototype as Pick<APIImpl.Button, 'update'>) = {\n    update: function(this: APIImpl.Button, iconPath?: string, tooltipText?: string, disabled?: boolean): void {\n      extensionServer.sendRequest({\n        command: PrivateAPI.Commands.UpdateButton,\n        id: this._id,\n        icon: iconPath,\n        tooltip: tooltipText,\n        disabled: Boolean(disabled),\n      });\n    },\n  };\n\n  const protocolGet = Object.getOwnPropertyDescriptor(URL.prototype, 'protocol')?.get;\n  function getProtocol(url: string): string {\n    if (!protocolGet) {\n      throw new Error('URL.protocol is not available');\n    }\n    return protocolGet.call(new URL(url));\n  }\n\n  function canAccessResource(resource: APIImpl.ResourceData): boolean {\n    try {\n      return extensionInfo.allowFileAccess || getProtocol(resource.url) !== 'file:';\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function InspectedWindow(this: PublicAPI.Chrome.DevTools.InspectedWindow): void {\n    function dispatchResourceEvent(\n        this: APIImpl.EventSink<(resource: APIImpl.Resource) => unknown>, message: {arguments: unknown[]}): void {\n      const resourceData = message.arguments[0] as APIImpl.ResourceData;\n      if (!canAccessResource(resourceData)) {\n        return;\n      }\n      this._fire(new (Constructor(Resource))(resourceData));\n    }\n\n    function dispatchResourceContentEvent(\n        this: APIImpl.EventSink<(resource: APIImpl.Resource, content: string) => unknown>,\n        message: {arguments: unknown[]}): void {\n      const resourceData = message.arguments[0] as APIImpl.ResourceData;\n      if (!canAccessResource(resourceData)) {\n        return;\n      }\n      this._fire(new (Constructor(Resource))(resourceData), message.arguments[1] as string);\n    }\n\n    this.onResourceAdded = new (Constructor(EventSink))(PrivateAPI.Events.ResourceAdded, dispatchResourceEvent);\n    this.onResourceContentCommitted =\n        new (Constructor(EventSink))(PrivateAPI.Events.ResourceContentCommitted, dispatchResourceContentEvent);\n  }\n\n  (InspectedWindow.prototype as Pick<PublicAPI.Chrome.DevTools.InspectedWindow, 'reload'|'eval'|'getResources'>) = {\n    reload: function(optionsOrUserAgent: {\n      ignoreCache?: boolean,\n      injectedScript?: string,\n      userAgent?: string,\n    }): void {\n      let options: {\n        ignoreCache?: boolean,\n        injectedScript?: string,\n        userAgent?: string,\n      }|null = null;\n      if (typeof optionsOrUserAgent === 'object') {\n        options = optionsOrUserAgent;\n      } else if (typeof optionsOrUserAgent === 'string') {\n        options = {userAgent: optionsOrUserAgent};\n        console.warn(\n            'Passing userAgent as string parameter to inspectedWindow.reload() is deprecated. ' +\n            'Use inspectedWindow.reload({ userAgent: value}) instead.');\n      }\n      extensionServer.sendRequest({command: PrivateAPI.Commands.Reload, options});\n    },\n\n    eval: function(\n              expression: string,\n              evaluateOptions: {scriptExecutionContext?: string, frameURL?: string, useContentScriptContext?: boolean}):\n              Object |\n        null {\n          const callback = extractCallbackArgument(arguments);\n          function callbackWrapper(result: unknown): void {\n            const {isError, isException, value} = result as {\n              isError?: boolean,\n              isException?: boolean, value: unknown,\n            };\n            if (isError || isException) {\n              callback && callback(undefined, result);\n            } else {\n              callback && callback(value);\n            }\n          }\n          extensionServer.sendRequest(\n              {\n                command: PrivateAPI.Commands.EvaluateOnInspectedPage,\n                expression,\n                evaluateOptions: (typeof evaluateOptions === 'object' ? evaluateOptions : undefined),\n              },\n              callback && callbackWrapper);\n          return null;\n        },\n\n    getResources: function(callback?: (resources: PublicAPI.Chrome.DevTools.Resource[]) => unknown): void {\n      function wrapResource(resourceData: APIImpl.ResourceData): APIImpl.Resource {\n        return new (Constructor(Resource))(resourceData);\n      }\n      function callbackWrapper(resources: unknown): void {\n        callback && callback((resources as APIImpl.ResourceData[]).filter(canAccessResource).map(wrapResource));\n      }\n      extensionServer.sendRequest({command: PrivateAPI.Commands.GetPageResources}, callback && callbackWrapper);\n    },\n  };\n\n  function ResourceImpl(this: APIImpl.Resource, resourceData: APIImpl.ResourceData): void {\n    if (!canAccessResource(resourceData)) {\n      throw new Error('Resource access not allowed');\n    }\n    this._url = resourceData.url;\n    this._type = resourceData.type;\n  }\n\n  (ResourceImpl.prototype as Pick<APIImpl.Resource, 'url'|'type'|'getContent'|'setContent'>) = {\n    get url(): string {\n      return (this as APIImpl.Resource)._url;\n    },\n\n    get type(): string {\n      return (this as APIImpl.Resource)._type;\n    },\n\n    getContent: function(this: APIImpl.Resource, callback?: (content: string, encoding: string) => unknown): void {\n      function callbackWrapper(response: unknown): void {\n        const {content, encoding} = response as {content: string, encoding: string};\n        callback && callback(content, encoding);\n      }\n\n      extensionServer.sendRequest(\n          {command: PrivateAPI.Commands.GetResourceContent, url: this._url}, callback && callbackWrapper);\n    },\n\n    setContent: function(\n        this: APIImpl.Resource, content: string, commit: boolean, callback: (error?: Object) => unknown): void {\n      extensionServer.sendRequest(\n          {command: PrivateAPI.Commands.SetResourceContent, url: this._url, content, commit},\n          callback as (response: unknown) => unknown);\n    },\n  };\n\n  function getTabId(): string {\n    return inspectedTabId;\n  }\n\n  let keyboardEventRequestQueue: KeyboardEventInit&{eventType: string}[] = [];\n  let forwardTimer: number|null = null;\n  function forwardKeyboardEvent(event: KeyboardEvent): void {\n    // Check if the event should be forwarded.\n    // This is a workaround for crbug.com/923338.\n    const focused = document.activeElement;\n    if (focused) {\n      const isInput =\n          focused.nodeName === 'INPUT' || focused.nodeName === 'TEXTAREA' || (focused as HTMLElement).isContentEditable;\n      if (isInput && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        return;\n      }\n    }\n\n    let modifiers = 0;\n    if (event.shiftKey) {\n      modifiers |= 1;\n    }\n    if (event.ctrlKey) {\n      modifiers |= 2;\n    }\n    if (event.altKey) {\n      modifiers |= 4;\n    }\n    if (event.metaKey) {\n      modifiers |= 8;\n    }\n    const num = (event.keyCode & 255) | (modifiers << 8);\n    // We only care about global hotkeys, not about random text\n    if (!keysToForwardSet.has(num)) {\n      return;\n    }\n    event.preventDefault();\n    const requestPayload = {\n      eventType: event.type,\n      ctrlKey: event.ctrlKey,\n      altKey: event.altKey,\n      metaKey: event.metaKey,\n      shiftKey: event.shiftKey,\n      // @ts-expect-error keyIdentifier is a deprecated non-standard property that typescript doesn't know about.\n      keyIdentifier: event.keyIdentifier,\n      key: event.key,\n      code: event.code,\n      location: event.location,\n      keyCode: event.keyCode,\n    };\n    keyboardEventRequestQueue.push(requestPayload);\n    if (!forwardTimer) {\n      forwardTimer = window.setTimeout(forwardEventQueue, 0);\n    }\n  }\n\n  function forwardEventQueue(): void {\n    forwardTimer = null;\n    extensionServer.sendRequest(\n        {command: PrivateAPI.Commands.ForwardKeyboardEvent, entries: keyboardEventRequestQueue});\n    keyboardEventRequestQueue = [];\n  }\n\n  document.addEventListener('keydown', forwardKeyboardEvent, false);\n\n  function ExtensionServerClient(this: APIImpl.ExtensionServerClient, targetWindow: Window): void {\n    this._callbacks = {};\n    this._handlers = {};\n    this._lastRequestId = 0;\n    this._lastObjectId = 0;\n\n    this.registerHandler('callback', this._onCallback.bind(this));\n\n    const channel = new MessageChannel();\n    this._port = channel.port1;\n    this._port.addEventListener('message', this._onMessage.bind(this), false);\n    this._port.start();\n\n    targetWindow.postMessage('registerExtension', '*', [channel.port2]);\n  }\n\n  (ExtensionServerClient.prototype as Pick<\n       APIImpl.ExtensionServerClient,\n       'sendRequest'|'hasHandler'|'registerHandler'|'unregisterHandler'|'nextObjectId'|'_registerCallback'|\n       '_onCallback'|'_onMessage'>) = {\n    sendRequest: function<ResponseT>(\n        this: APIImpl.ExtensionServerClient, message: PrivateAPI.ServerRequests,\n        callback?: (response: ResponseT) => unknown, transfers?: Transferable[]): void {\n      if (typeof callback === 'function') {\n        (message as PrivateAPI.ExtensionServerRequestMessage).requestId =\n            this._registerCallback(callback as (response: unknown) => unknown);\n      }\n      // @ts-expect-error\n      this._port.postMessage(message, transfers);\n    },\n\n    hasHandler: function(this: APIImpl.ExtensionServerClient, command: string): boolean {\n      return Boolean(this._handlers[command]);\n    },\n\n    registerHandler: function(\n        this: APIImpl.ExtensionServerClient, command: string, handler: (request: {arguments: unknown[]}) => unknown):\n        void {\n          this._handlers[command] = handler;\n        },\n\n    unregisterHandler: function(this: APIImpl.ExtensionServerClient, command: string): void {\n      delete this._handlers[command];\n    },\n\n    nextObjectId: function(this: APIImpl.ExtensionServerClient): string {\n      return injectedScriptId.toString() + '_' + ++this._lastObjectId;\n    },\n\n    _registerCallback: function(this: APIImpl.ExtensionServerClient, callback: (response: unknown) => unknown): number {\n      const id = ++this._lastRequestId;\n      this._callbacks[id] = callback;\n      return id;\n    },\n\n    _onCallback: function(this: APIImpl.ExtensionServerClient, request: {requestId: number, result: unknown}): void {\n      if (request.requestId in this._callbacks) {\n        const callback = this._callbacks[request.requestId];\n        delete this._callbacks[request.requestId];\n        callback(request.result);\n      }\n    },\n\n    _onMessage: function(\n        this: APIImpl.ExtensionServerClient,\n        event: MessageEvent<{command: string, requestId: number, arguments: unknown[]}>): void {\n      const request = event.data;\n      const handler = this._handlers[request.command];\n      if (handler) {\n        handler.call(this, request);\n      }\n    },\n  };\n\n  function populateInterfaceClass(interfaze: {[key: string]: unknown}, implementation: {[key: string]: unknown}): void {\n    for (const member in implementation) {\n      if (member.charAt(0) === '_') {\n        continue;\n      }\n      let descriptor: (PropertyDescriptor|undefined)|null = null;\n      // Traverse prototype chain until we find the owner.\n      for (let owner = implementation; owner && !descriptor; owner = owner.__proto__ as {[key: string]: unknown}) {\n        descriptor = Object.getOwnPropertyDescriptor(owner, member);\n      }\n      if (!descriptor) {\n        continue;\n      }\n      if (typeof descriptor.value === 'function') {\n        interfaze[member] = descriptor.value.bind(implementation);\n      } else if (typeof descriptor.get === 'function') {\n        // @ts-expect-error\n        interfaze.__defineGetter__(member, descriptor.get.bind(implementation));\n      } else {\n        Object.defineProperty(interfaze, member, descriptor);\n      }\n    }\n  }\n\n  const extensionServer = new (Constructor(ExtensionServerClient))(targetWindowForTest || window.parent);\n\n  const coreAPI = new (Constructor(InspectorExtensionAPI))();\n\n  Object.defineProperty(chrome, 'devtools', {value: {}, enumerable: true});\n\n  // Only expose tabId on chrome.devtools.inspectedWindow, not webInspector.inspectedWindow.\n  // @ts-expect-error\n  chrome.devtools!.inspectedWindow = {};\n  Object.defineProperty(chrome.devtools!.inspectedWindow, 'tabId', {get: getTabId});\n  // @ts-expect-error\n  chrome.devtools!.inspectedWindow.__proto__ = coreAPI.inspectedWindow;\n  chrome.devtools!.network = coreAPI.network;\n  chrome.devtools!.panels = coreAPI.panels;\n  chrome.devtools!.panels.themeName = themeName;\n  chrome.devtools!.languageServices = coreAPI.languageServices;\n  chrome.devtools!.recorder = coreAPI.recorder;\n  chrome.devtools!.performance = coreAPI.performance;\n\n  // default to expose experimental APIs for now.\n  if (extensionInfo.exposeExperimentalAPIs !== false) {\n    chrome.experimental = chrome.experimental || {};\n    chrome.experimental.devtools = chrome.experimental.devtools || {};\n\n    const properties = Object.getOwnPropertyNames(coreAPI);\n    for (let i = 0; i < properties.length; ++i) {\n      const descriptor = Object.getOwnPropertyDescriptor(coreAPI, properties[i]);\n      if (descriptor) {\n        Object.defineProperty(chrome.experimental.devtools, properties[i], descriptor);\n      }\n    }\n    chrome.experimental.devtools.inspectedWindow = chrome.devtools.inspectedWindow;\n  }\n\n  if (extensionInfo.exposeWebInspectorNamespace) {\n    window.webInspector = coreAPI;\n  }\n  testHook(extensionServer, coreAPI);\n};\n\nself.buildExtensionAPIInjectedScript = function(\n    extensionInfo: {\n      startPage: string,\n      name: string,\n      exposeExperimentalAPIs: boolean,\n    },\n    inspectedTabId: string, themeName: string, keysToForward: number[],\n    testHook:\n        ((extensionServer: APIImpl.ExtensionServerClient, extensionAPI: APIImpl.InspectorExtensionAPI) => unknown)|\n    undefined): string {\n  const argumentsJSON =\n      [extensionInfo, inspectedTabId || null, themeName, keysToForward].map(_ => JSON.stringify(_)).join(',');\n  if (!testHook) {\n    testHook = (): void => {};\n  }\n  return '(function(injectedScriptId){ ' +\n      '(' + self.injectedExtensionAPI.toString() + ')(' + argumentsJSON + ',' + testHook + ', injectedScriptId);' +\n      '})';\n};\n"],
  "mappings": "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",
  "names": ["PrivateAPI", "Panels", "SearchAction", "Events", "Commands", "LanguageExtensionPluginCommands", "LanguageExtensionPluginEvents", "RecorderExtensionPluginCommands", "RecorderExtensionPluginEvents", "themeName"]
}
