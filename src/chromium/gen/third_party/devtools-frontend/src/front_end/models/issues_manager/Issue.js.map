{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/issues_manager/Issue.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {MarkdownIssueDescription} from './MarkdownIssueDescription.js';\n\nconst UIStrings = {\n  /**\n   *@description The kind of an issue (plural) (Issues are categorized into kinds).\n   */\n  improvements: 'Improvements',\n  /**\n   *@description The kind of an issue (plural) (Issues are categorized into kinds).\n   */\n  pageErrors: 'Page Errors',\n  /**\n   *@description The kind of an issue (plural) (Issues are categorized into kinds).\n   */\n  breakingChanges: 'Breaking Changes',\n  /**\n   *@description A description for a kind of issue we display in the issues tab.\n   */\n  pageErrorIssue: 'A page error issue: the page is not working correctly',\n  /**\n   *@description A description for a kind of issue we display in the issues tab.\n   */\n  breakingChangeIssue: 'A breaking change issue: the page may stop working in an upcoming version of Chrome',\n  /**\n   *@description A description for a kind of issue we display in the issues tab.\n   */\n  improvementIssue: 'An improvement issue: there is an opportunity to improve the page',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/issues_manager/Issue.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const enum IssueCategory {\n  CROSS_ORIGIN_EMBEDDER_POLICY = 'CrossOriginEmbedderPolicy',\n  GENERIC = 'Generic',\n  MIXED_CONTENT = 'MixedContent',\n  COOKIE = 'Cookie',\n  HEAVY_AD = 'HeavyAd',\n  CONTENT_SECURITY_POLICY = 'ContentSecurityPolicy',\n  LOW_TEXT_CONTRAST = 'LowTextContrast',\n  CORS = 'Cors',\n  ATTRIBUTION_REPORTING = 'AttributionReporting',\n  QUIRKS_MODE = 'QuirksMode',\n  OTHER = 'Other',\n}\n\nexport const enum IssueKind {\n  /**\n   * Something is not working in the page right now. Issues of this kind need\n   * usually be fixed right away. They usually indicate that a Web API is being\n   * used in a wrong way, or that a network request was misconfigured.\n   */\n  PAGE_ERROR = 'PageError',\n  /**\n   * The page is using a Web API or relying on browser behavior that is going\n   * to change in the future. If possible, the message associated with issues\n   * of this kind should include a time when the behavior is going to change.\n   */\n  BREAKING_CHANGE = 'BreakingChange',\n  /**\n   * Anything that can be improved about the page, but isn't urgent and doesn't\n   * impair functionality in a major way.\n   */\n  IMPROVEMENT = 'Improvement',\n}\n\nexport function getIssueKindName(issueKind: IssueKind): Common.UIString.LocalizedString {\n  switch (issueKind) {\n    case IssueKind.BREAKING_CHANGE:\n      return i18nString(UIStrings.breakingChanges);\n    case IssueKind.IMPROVEMENT:\n      return i18nString(UIStrings.improvements);\n    case IssueKind.PAGE_ERROR:\n      return i18nString(UIStrings.pageErrors);\n  }\n}\n\nexport function getIssueKindDescription(issueKind: IssueKind): Common.UIString.LocalizedString {\n  switch (issueKind) {\n    case IssueKind.PAGE_ERROR:\n      return i18nString(UIStrings.pageErrorIssue);\n    case IssueKind.BREAKING_CHANGE:\n      return i18nString(UIStrings.breakingChangeIssue);\n    case IssueKind.IMPROVEMENT:\n      return i18nString(UIStrings.improvementIssue);\n  }\n}\n\n/**\n * Union two issue kinds for issue aggregation. The idea is to show the most\n * important kind on aggregated issues that union issues of different kinds.\n */\nexport function unionIssueKind(a: IssueKind, b: IssueKind): IssueKind {\n  if (a === IssueKind.PAGE_ERROR || b === IssueKind.PAGE_ERROR) {\n    return IssueKind.PAGE_ERROR;\n  }\n  if (a === IssueKind.BREAKING_CHANGE || b === IssueKind.BREAKING_CHANGE) {\n    return IssueKind.BREAKING_CHANGE;\n  }\n  return IssueKind.IMPROVEMENT;\n}\n\nexport function getShowThirdPartyIssuesSetting(): Common.Settings.Setting<boolean> {\n  return Common.Settings.Settings.instance().createSetting('show-third-party-issues', true);\n}\n\nexport interface AffectedElement {\n  backendNodeId: Protocol.DOM.BackendNodeId;\n  nodeName: string;\n  target: SDK.Target.Target|null;\n}\n\nexport abstract class Issue<IssueCode extends string = string> {\n  #issueCode: IssueCode;\n  #issuesModel: SDK.IssuesModel.IssuesModel|null;\n  protected issueId: Protocol.Audits.IssueId|undefined = undefined;\n  #hidden: boolean;\n\n  constructor(\n      code: IssueCode|{code: IssueCode, umaCode: string}, issuesModel: SDK.IssuesModel.IssuesModel|null = null,\n      issueId?: Protocol.Audits.IssueId) {\n    this.#issueCode = typeof code === 'object' ? code.code : code;\n    this.#issuesModel = issuesModel;\n    this.issueId = issueId;\n    Host.userMetrics.issueCreated(typeof code === 'string' ? code : code.umaCode);\n    this.#hidden = false;\n  }\n\n  code(): IssueCode {\n    return this.#issueCode;\n  }\n\n  abstract primaryKey(): string;\n  abstract getDescription(): MarkdownIssueDescription|null;\n  abstract getCategory(): IssueCategory;\n  abstract getKind(): IssueKind;\n\n  getBlockedByResponseDetails(): Iterable<Protocol.Audits.BlockedByResponseIssueDetails> {\n    return [];\n  }\n\n  cookies(): Iterable<Protocol.Audits.AffectedCookie> {\n    return [];\n  }\n\n  rawCookieLines(): Iterable<string> {\n    return [];\n  }\n\n  elements(): Iterable<AffectedElement> {\n    return [];\n  }\n\n  requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return [];\n  }\n\n  sources(): Iterable<Protocol.Audits.SourceCodeLocation> {\n    return [];\n  }\n\n  trackingSites(): Iterable<string> {\n    return [];\n  }\n\n  isAssociatedWithRequestId(requestId: string): boolean {\n    for (const request of this.requests()) {\n      if (request.requestId === requestId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The model might be unavailable or belong to a target that has already been disposed.\n   */\n  model(): SDK.IssuesModel.IssuesModel|null {\n    return this.#issuesModel;\n  }\n\n  isCausedByThirdParty(): boolean {\n    return false;\n  }\n\n  getIssueId(): Protocol.Audits.IssueId|undefined {\n    return this.issueId;\n  }\n\n  isHidden(): boolean {\n    return this.#hidden;\n  }\n\n  setHidden(hidden: boolean): void {\n    this.#hidden = hidden;\n  }\n\n  maybeCreateConsoleMessage(): SDK.ConsoleModel.ConsoleMessage|undefined {\n    return;\n  }\n}\n\nexport function toZeroBasedLocation(location: Protocol.Audits.SourceCodeLocation|undefined): {\n  url: Platform.DevToolsPath.UrlString,\n  scriptId: Protocol.Runtime.ScriptId|undefined,\n  lineNumber: number,\n  columnNumber: number|undefined,\n}|undefined {\n  if (!location) {\n    return undefined;\n  }\n  return {\n    url: location.url as Platform.DevToolsPath.UrlString,\n    scriptId: location.scriptId,\n    lineNumber: location.lineNumber,\n    columnNumber: location.columnNumber === 0 ? undefined : location.columnNumber - 1,\n  };\n}\n"],
  "mappings": "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",
  "names": ["IssueCategory", "IssueKind"]
}
