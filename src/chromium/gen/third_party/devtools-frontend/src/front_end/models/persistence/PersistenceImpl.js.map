{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/persistence/PersistenceImpl.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as BreakpointManager from '../breakpoints/breakpoints.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {Automapping, type AutomappingStatus} from './Automapping.js';\nimport {LinkDecorator} from './PersistenceUtils.js';\n\nlet persistenceInstance: PersistenceImpl;\n\nexport class PersistenceImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  private readonly breakpointManager: BreakpointManager.BreakpointManager.BreakpointManager;\n  private readonly filePathPrefixesToBindingCount: FilePathPrefixesBindingCounts;\n  private subscribedBindingEventListeners:\n      Platform.MapUtilities.Multimap<Workspace.UISourceCode.UISourceCode, () => void>;\n  private readonly mapping: Automapping;\n\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl,\n      breakpointManager: BreakpointManager.BreakpointManager.BreakpointManager) {\n    super();\n    this.workspace = workspace;\n    this.breakpointManager = breakpointManager;\n    this.breakpointManager.addUpdateBindingsCallback(this.#setupBindings.bind(this));\n    this.filePathPrefixesToBindingCount = new FilePathPrefixesBindingCounts();\n\n    this.subscribedBindingEventListeners = new Platform.MapUtilities.Multimap();\n\n    const linkDecorator = new LinkDecorator(this);\n    Components.Linkifier.Linkifier.setLinkDecorator(linkDecorator);\n\n    this.mapping = new Automapping(this.workspace, this.onStatusAdded.bind(this), this.onStatusRemoved.bind(this));\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n    breakpointManager: BreakpointManager.BreakpointManager.BreakpointManager|null,\n  } = {forceNew: null, workspace: null, breakpointManager: null}): PersistenceImpl {\n    const {forceNew, workspace, breakpointManager} = opts;\n    if (!persistenceInstance || forceNew) {\n      if (!workspace || !breakpointManager) {\n        throw new Error('Missing arguments for workspace');\n      }\n      persistenceInstance = new PersistenceImpl(workspace, breakpointManager);\n    }\n\n    return persistenceInstance;\n  }\n\n  addNetworkInterceptor(interceptor: (arg0: Workspace.UISourceCode.UISourceCode) => boolean): void {\n    this.mapping.addNetworkInterceptor(interceptor);\n  }\n\n  refreshAutomapping(): void {\n    this.mapping.scheduleRemap();\n  }\n\n  async addBinding(binding: PersistenceBinding): Promise<void> {\n    await this.innerAddBinding(binding);\n  }\n\n  async addBindingForTest(binding: PersistenceBinding): Promise<void> {\n    await this.innerAddBinding(binding);\n  }\n\n  async removeBinding(binding: PersistenceBinding): Promise<void> {\n    await this.innerRemoveBinding(binding);\n  }\n\n  async removeBindingForTest(binding: PersistenceBinding): Promise<void> {\n    await this.innerRemoveBinding(binding);\n  }\n\n  #setupBindings(networkUISourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (networkUISourceCode.project().type() !== Workspace.Workspace.projectTypes.Network) {\n      return Promise.resolve();\n    }\n    return this.mapping.computeNetworkStatus(networkUISourceCode);\n  }\n\n  private async innerAddBinding(binding: PersistenceBinding): Promise<void> {\n    bindings.set(binding.network, binding);\n    bindings.set(binding.fileSystem, binding);\n\n    binding.fileSystem.forceLoadOnCheckContent();\n\n    binding.network.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.fileSystem.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.network.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n    binding.fileSystem.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n\n    this.filePathPrefixesToBindingCount.add(binding.fileSystem.url());\n\n    await this.moveBreakpoints(binding.fileSystem, binding.network);\n\n    console.assert(!binding.fileSystem.isDirty() || !binding.network.isDirty());\n    if (binding.fileSystem.isDirty()) {\n      this.syncWorkingCopy(binding.fileSystem);\n    } else if (binding.network.isDirty()) {\n      this.syncWorkingCopy(binding.network);\n    } else if (binding.network.hasCommits() && binding.network.content() !== binding.fileSystem.content()) {\n      binding.network.setWorkingCopy(binding.network.content());\n      this.syncWorkingCopy(binding.network);\n    }\n\n    this.notifyBindingEvent(binding.network);\n    this.notifyBindingEvent(binding.fileSystem);\n    this.dispatchEventToListeners(Events.BindingCreated, binding);\n  }\n\n  private async innerRemoveBinding(binding: PersistenceBinding): Promise<void> {\n    if (bindings.get(binding.network) !== binding) {\n      return;\n    }\n    console.assert(\n        bindings.get(binding.network) === bindings.get(binding.fileSystem),\n        'ERROR: inconsistent binding for networkURL ' + binding.network.url());\n\n    bindings.delete(binding.network);\n    bindings.delete(binding.fileSystem);\n\n    binding.network.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.fileSystem.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.network.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n    binding.fileSystem.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n\n    this.filePathPrefixesToBindingCount.remove(binding.fileSystem.url());\n    await this.breakpointManager.copyBreakpoints(binding.network, binding.fileSystem);\n\n    this.notifyBindingEvent(binding.network);\n    this.notifyBindingEvent(binding.fileSystem);\n    this.dispatchEventToListeners(Events.BindingRemoved, binding);\n  }\n\n  private onStatusAdded(status: AutomappingStatus): Promise<void> {\n    const binding = new PersistenceBinding(status.network, status.fileSystem);\n    statusBindings.set(status, binding);\n    return this.innerAddBinding(binding);\n  }\n\n  private async onStatusRemoved(status: AutomappingStatus): Promise<void> {\n    const binding = statusBindings.get(status) as PersistenceBinding;\n    await this.innerRemoveBinding(binding);\n  }\n\n  private onWorkingCopyChanged(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.syncWorkingCopy(uiSourceCode);\n  }\n\n  private syncWorkingCopy(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const binding = bindings.get(uiSourceCode);\n    if (!binding || mutedWorkingCopies.has(binding)) {\n      return;\n    }\n    const other = binding.network === uiSourceCode ? binding.fileSystem : binding.network;\n    if (!uiSourceCode.isDirty()) {\n      mutedWorkingCopies.add(binding);\n      other.resetWorkingCopy();\n      mutedWorkingCopies.delete(binding);\n      this.contentSyncedForTest();\n      return;\n    }\n\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(binding.network);\n    if (target && target.type() === SDK.Target.Type.NODE) {\n      const newContent = uiSourceCode.workingCopy();\n      void other.requestContentData().then(() => {\n        const nodeJSContent = PersistenceImpl.rewrapNodeJSContent(other, other.workingCopy(), newContent);\n        setWorkingCopy.call(this, () => nodeJSContent);\n      });\n      return;\n    }\n\n    setWorkingCopy.call(this, () => uiSourceCode.workingCopy());\n\n    function setWorkingCopy(this: PersistenceImpl, workingCopyGetter: () => string): void {\n      if (binding) {\n        mutedWorkingCopies.add(binding);\n      }\n      other.setWorkingCopyGetter(workingCopyGetter);\n      if (binding) {\n        mutedWorkingCopies.delete(binding);\n      }\n      this.contentSyncedForTest();\n    }\n  }\n\n  private onWorkingCopyCommitted(\n      event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.WorkingCopyCommitedEvent>): void {\n    const uiSourceCode = event.data.uiSourceCode;\n    const newContent = event.data.content;\n    this.syncContent(uiSourceCode, newContent, Boolean(event.data.encoded));\n  }\n\n  syncContent(uiSourceCode: Workspace.UISourceCode.UISourceCode, newContent: string, encoded: boolean): void {\n    const binding = bindings.get(uiSourceCode);\n    if (!binding || mutedCommits.has(binding)) {\n      return;\n    }\n    const other = binding.network === uiSourceCode ? binding.fileSystem : binding.network;\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(binding.network);\n    if (target && target.type() === SDK.Target.Type.NODE) {\n      void other.requestContent().then(currentContent => {\n        const nodeJSContent = PersistenceImpl.rewrapNodeJSContent(other, currentContent.content || '', newContent);\n        setContent.call(this, nodeJSContent);\n      });\n      return;\n    }\n    setContent.call(this, newContent);\n\n    function setContent(this: PersistenceImpl, newContent: string): void {\n      if (binding) {\n        mutedCommits.add(binding);\n      }\n      other.setContent(newContent, encoded);\n      if (binding) {\n        mutedCommits.delete(binding);\n      }\n      this.contentSyncedForTest();\n    }\n  }\n\n  static rewrapNodeJSContent(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, currentContent: string, newContent: string): string {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      if (newContent.startsWith(NodePrefix) && newContent.endsWith(NodeSuffix)) {\n        newContent = newContent.substring(NodePrefix.length, newContent.length - NodeSuffix.length);\n      }\n      if (currentContent.startsWith(NodeShebang)) {\n        newContent = NodeShebang + newContent;\n      }\n    } else {\n      if (newContent.startsWith(NodeShebang)) {\n        newContent = newContent.substring(NodeShebang.length);\n      }\n      if (currentContent.startsWith(NodePrefix) && currentContent.endsWith(NodeSuffix)) {\n        newContent = NodePrefix + newContent + NodeSuffix;\n      }\n    }\n    return newContent;\n  }\n\n  private contentSyncedForTest(): void {\n  }\n\n  private async moveBreakpoints(from: Workspace.UISourceCode.UISourceCode, to: Workspace.UISourceCode.UISourceCode):\n      Promise<void> {\n    const breakpoints = this.breakpointManager.breakpointLocationsForUISourceCode(from).map(\n        breakpointLocation => breakpointLocation.breakpoint);\n    await Promise.all(breakpoints.map(async breakpoint => {\n      await breakpoint.remove(false /* keepInStorage */);\n      return this.breakpointManager.setBreakpoint(\n          to, breakpoint.lineNumber(), breakpoint.columnNumber(), breakpoint.condition(), breakpoint.enabled(),\n          breakpoint.isLogpoint(), BreakpointManager.BreakpointManager.BreakpointOrigin.OTHER);\n    }));\n  }\n\n  hasUnsavedCommittedChanges(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    if (this.workspace.hasResourceContentTrackingExtensions()) {\n      return false;\n    }\n    if (uiSourceCode.project().canSetFileContent()) {\n      return false;\n    }\n    if (bindings.has(uiSourceCode)) {\n      return false;\n    }\n    return Boolean(uiSourceCode.hasCommits());\n  }\n\n  binding(uiSourceCode: Workspace.UISourceCode.UISourceCode): PersistenceBinding|null {\n    return bindings.get(uiSourceCode) || null;\n  }\n\n  subscribeForBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode, listener: () => void): void {\n    this.subscribedBindingEventListeners.set(uiSourceCode, listener);\n  }\n\n  unsubscribeFromBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode, listener: () => void): void {\n    this.subscribedBindingEventListeners.delete(uiSourceCode, listener);\n  }\n\n  private notifyBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (!this.subscribedBindingEventListeners.has(uiSourceCode)) {\n      return;\n    }\n    const listeners = Array.from(this.subscribedBindingEventListeners.get(uiSourceCode));\n    for (const listener of listeners) {\n      listener.call(null);\n    }\n  }\n\n  fileSystem(uiSourceCode: Workspace.UISourceCode.UISourceCode): Workspace.UISourceCode.UISourceCode|null {\n    const binding = this.binding(uiSourceCode);\n    return binding ? binding.fileSystem : null;\n  }\n\n  network(uiSourceCode: Workspace.UISourceCode.UISourceCode): Workspace.UISourceCode.UISourceCode|null {\n    const binding = this.binding(uiSourceCode);\n    return binding ? binding.network : null;\n  }\n\n  filePathHasBindings(filePath: Platform.DevToolsPath.UrlString): boolean {\n    return this.filePathPrefixesToBindingCount.hasBindingPrefix(filePath);\n  }\n}\n\nclass FilePathPrefixesBindingCounts {\n  private prefixCounts: Map<string, number>;\n\n  constructor() {\n    this.prefixCounts = new Map();\n  }\n\n  private getPlatformCanonicalFilePath(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return Host.Platform.isWin() ? Common.ParsedURL.ParsedURL.toLowerCase(path) : path;\n  }\n\n  add(filePath: Platform.DevToolsPath.UrlString): void {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    let relative = '';\n    for (const token of filePath.split('/')) {\n      relative += token + '/';\n      const count = this.prefixCounts.get(relative) || 0;\n      this.prefixCounts.set(relative, count + 1);\n    }\n  }\n\n  remove(filePath: Platform.DevToolsPath.UrlString): void {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    let relative = '';\n    for (const token of filePath.split('/')) {\n      relative += token + '/';\n      const count = this.prefixCounts.get(relative);\n      if (count === 1) {\n        this.prefixCounts.delete(relative);\n      } else if (count !== undefined) {\n        this.prefixCounts.set(relative, count - 1);\n      }\n    }\n  }\n\n  hasBindingPrefix(filePath: Platform.DevToolsPath.UrlString): boolean {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    if (!filePath.endsWith('/')) {\n      filePath = Common.ParsedURL.ParsedURL.concatenate(filePath, '/');\n    }\n    return this.prefixCounts.has(filePath);\n  }\n}\n\nconst bindings = new WeakMap<Workspace.UISourceCode.UISourceCode, PersistenceBinding>();\nconst statusBindings = new WeakMap<AutomappingStatus, PersistenceBinding>();\n\nconst mutedCommits = new WeakSet<PersistenceBinding>();\n\nconst mutedWorkingCopies = new WeakSet<PersistenceBinding>();\n\nexport const NodePrefix = '(function (exports, require, module, __filename, __dirname) { ';\nexport const NodeSuffix = '\\n});';\nexport const NodeShebang = '#!/usr/bin/env node';\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  BindingCreated = 'BindingCreated',\n  BindingRemoved = 'BindingRemoved',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport type EventTypes = {\n  [Events.BindingCreated]: PersistenceBinding,\n  [Events.BindingRemoved]: PersistenceBinding,\n};\n\nexport class PersistenceBinding {\n  network: Workspace.UISourceCode.UISourceCode;\n  fileSystem: Workspace.UISourceCode.UISourceCode;\n  constructor(network: Workspace.UISourceCode.UISourceCode, fileSystem: Workspace.UISourceCode.UISourceCode) {\n    this.network = network;\n    this.fileSystem = fileSystem;\n  }\n}\n"],
  "mappings": "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",
  "names": ["newContent", "Events"]
}
