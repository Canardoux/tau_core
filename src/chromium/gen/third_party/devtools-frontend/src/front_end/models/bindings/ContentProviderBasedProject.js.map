{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/models/bindings/ContentProviderBasedProject.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nconst UIStrings = {\n  /**\n   * @description Error message that is displayed in the Sources panel when can't be loaded.\n   */\n  unknownErrorLoadingFile: 'Unknown error loading file',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/bindings/ContentProviderBasedProject.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface UISourceCodeData {\n  mimeType: string;\n  metadata: Workspace.UISourceCode.UISourceCodeMetadata|null;\n  contentProvider: TextUtils.ContentProvider.ContentProvider;\n}\n\nexport class ContentProviderBasedProject extends Workspace.Workspace.ProjectStore {\n  readonly #isServiceProjectInternal: boolean;\n  readonly #uiSourceCodeToData: WeakMap<Workspace.UISourceCode.UISourceCode, UISourceCodeData>;\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, id: string, type: Workspace.Workspace.projectTypes,\n      displayName: string, isServiceProject: boolean) {\n    super(workspace, id, type, displayName);\n    this.#isServiceProjectInternal = isServiceProject;\n    this.#uiSourceCodeToData = new WeakMap();\n    workspace.addProject(this);\n  }\n\n  async requestFileContent(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    const {contentProvider} = this.#uiSourceCodeToData.get(uiSourceCode) as UISourceCodeData;\n    try {\n      return await contentProvider.requestContentData();\n    } catch (err) {\n      // TODO(rob.paveza): CRBug 1013683 - Consider propagating exceptions full-stack\n      return {\n        error: err ? String(err) : i18nString(UIStrings.unknownErrorLoadingFile),\n      };\n    }\n  }\n\n  isServiceProject(): boolean {\n    return this.#isServiceProjectInternal;\n  }\n\n  async requestMetadata(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<Workspace.UISourceCode.UISourceCodeMetadata|null> {\n    const {metadata} = this.#uiSourceCodeToData.get(uiSourceCode) as UISourceCodeData;\n    return metadata;\n  }\n\n  canSetFileContent(): boolean {\n    return false;\n  }\n\n  async setFileContent(_uiSourceCode: Workspace.UISourceCode.UISourceCode, _newContent: string, _isBase64: boolean):\n      Promise<void> {\n  }\n\n  fullDisplayName(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    let parentPath = uiSourceCode.parentURL().replace(/^(?:https?|file)\\:\\/\\//, '');\n    try {\n      parentPath = decodeURI(parentPath);\n    } catch (e) {\n    }\n    return parentPath + '/' + uiSourceCode.displayName(true);\n  }\n\n  mimeType(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const {mimeType} = (this.#uiSourceCodeToData.get(uiSourceCode) as UISourceCodeData);\n    return mimeType;\n  }\n\n  canRename(): boolean {\n    return false;\n  }\n\n  override rename(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, newName: Platform.DevToolsPath.RawPathString,\n      callback:\n          (arg0: boolean, arg1?: string|undefined, arg2?: Platform.DevToolsPath.UrlString|undefined,\n           arg3?: Common.ResourceType.ResourceType|undefined) => void): void {\n    const path = uiSourceCode.url();\n    this.performRename(path, newName, (success: boolean, newName?: string) => {\n      if (success && newName) {\n        this.renameUISourceCode(uiSourceCode, newName);\n      }\n      callback(success, newName);\n    });\n  }\n\n  override excludeFolder(_path: Platform.DevToolsPath.UrlString): void {\n  }\n\n  canExcludeFolder(_path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  async createFile(\n      _path: Platform.DevToolsPath.EncodedPathString, _name: string|null, _content: string,\n      _isBase64?: boolean): Promise<Workspace.UISourceCode.UISourceCode|null> {\n    return null;\n  }\n\n  canCreateFile(): boolean {\n    return false;\n  }\n\n  override deleteFile(_uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n  }\n\n  override remove(): void {\n  }\n\n  performRename(\n      path: Platform.DevToolsPath.UrlString, newName: string,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    callback(false);\n  }\n\n  searchInFileContent(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, query: string, caseSensitive: boolean,\n      isRegex: boolean): Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const {contentProvider} = this.#uiSourceCodeToData.get(uiSourceCode) as UISourceCodeData;\n    return contentProvider.searchInContent(query, caseSensitive, isRegex);\n  }\n\n  async findFilesMatchingSearchRequest(\n      searchConfig: Workspace.SearchConfig.SearchConfig, filesMatchingFileQuery: Workspace.UISourceCode.UISourceCode[],\n      progress: Common.Progress.Progress):\n      Promise<Map<Workspace.UISourceCode.UISourceCode, TextUtils.ContentProvider.SearchMatch[]|null>> {\n    const result = new Map();\n    progress.setTotalWork(filesMatchingFileQuery.length);\n    await Promise.all(filesMatchingFileQuery.map(searchInContent.bind(this)));\n    progress.done();\n    return result;\n\n    async function searchInContent(\n        this: ContentProviderBasedProject, uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n      let allMatchesFound = true;\n      let matches: TextUtils.ContentProvider.SearchMatch[] = [];\n      for (const query of searchConfig.queries().slice()) {\n        const searchMatches =\n            await this.searchInFileContent(uiSourceCode, query, !searchConfig.ignoreCase(), searchConfig.isRegex());\n        if (!searchMatches.length) {\n          allMatchesFound = false;\n          break;\n        }\n        matches = Platform.ArrayUtilities.mergeOrdered(\n            matches, searchMatches as TextUtils.ContentProvider.SearchMatch[],\n            TextUtils.ContentProvider.SearchMatch.comparator);\n      }\n      if (allMatchesFound) {\n        result.set(uiSourceCode, matches);\n      }\n      progress.incrementWorked(1);\n    }\n  }\n\n  override indexContent(progress: Common.Progress.Progress): void {\n    queueMicrotask(progress.done.bind(progress));\n  }\n\n  addUISourceCodeWithProvider(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, contentProvider: TextUtils.ContentProvider.ContentProvider,\n      metadata: Workspace.UISourceCode.UISourceCodeMetadata|null, mimeType: string): void {\n    this.#uiSourceCodeToData.set(uiSourceCode, {mimeType, metadata, contentProvider});\n    this.addUISourceCode(uiSourceCode);\n  }\n\n  addContentProvider(\n      url: Platform.DevToolsPath.UrlString, contentProvider: TextUtils.ContentProvider.ContentProvider,\n      mimeType: string): Workspace.UISourceCode.UISourceCode {\n    const uiSourceCode = this.createUISourceCode(url, contentProvider.contentType());\n    this.addUISourceCodeWithProvider(uiSourceCode, contentProvider, null, mimeType);\n    return uiSourceCode;\n  }\n\n  reset(): void {\n    this.removeProject();\n    this.workspace().addProject(this);\n  }\n\n  dispose(): void {\n    this.removeProject();\n  }\n}\n"],
  "mappings": "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",
  "names": ["newName"]
}
