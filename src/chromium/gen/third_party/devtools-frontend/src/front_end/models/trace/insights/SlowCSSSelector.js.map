{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/insights/SlowCSSSelector.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport {type SelectorTiming, SelectorTimingsKey} from '../types/TraceEvents.js';\nimport * as Types from '../types/types.js';\n\nimport {InsightCategory, type InsightModel, type InsightSetContext, type RequiredData} from './types.js';\n\nconst UIStrings = {\n  /**\n   *@description Title of an insight that provides details about slow CSS selectors.\n   */\n  title: 'CSS Selector costs',\n\n  /**\n   * @description Text to describe how to improve the performance of CSS selectors.\n   */\n  description:\n      'If Recalculate Style costs remain high, selector optimization can reduce them. [Optimize the selectors](https://developer.chrome.com/docs/devtools/performance/selector-stats) with both high elapsed time and high slow-path %. Simpler selectors, fewer selectors, a smaller DOM, and a shallower DOM will all reduce matching costs.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/SlowCSSSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function deps(): ['SelectorStats'] {\n  return ['SelectorStats'];\n}\n\nexport type SlowCSSSelectorInsightModel = InsightModel<{\n  totalElapsedMs: Types.Timing.MilliSeconds,\n  totalMatchAttempts: number,\n  totalMatchCount: number,\n  topElapsedMs: Types.Events.SelectorTiming[],\n  topMatchAttempts: Types.Events.SelectorTiming[],\n}>;\n\nfunction aggregateSelectorStats(\n    data: Map<Types.Events.UpdateLayoutTree, {\n      timings: Types.Events.SelectorTiming[],\n    }>,\n    context: InsightSetContext): SelectorTiming[] {\n  const selectorMap = new Map<String, SelectorTiming>();\n\n  for (const [event, value] of data) {\n    if (event.args.beginData?.frame !== context.frameId) {\n      continue;\n    }\n    if (!Helpers.Timing.eventIsInBounds(event, context.bounds)) {\n      continue;\n    }\n    for (const timing of value.timings) {\n      const key = timing[SelectorTimingsKey.Selector] + '_' + timing[SelectorTimingsKey.StyleSheetId];\n      const findTiming = selectorMap.get(key);\n      if (findTiming !== undefined) {\n        findTiming[SelectorTimingsKey.Elapsed] += timing[SelectorTimingsKey.Elapsed];\n        findTiming[SelectorTimingsKey.FastRejectCount] += timing[SelectorTimingsKey.FastRejectCount];\n        findTiming[SelectorTimingsKey.MatchAttempts] += timing[SelectorTimingsKey.MatchAttempts];\n        findTiming[SelectorTimingsKey.MatchCount] += timing[SelectorTimingsKey.MatchCount];\n      } else {\n        selectorMap.set(key, {...timing});\n      }\n    }\n  }\n\n  return [...selectorMap.values()];\n}\n\nfunction finalize(partialModel: Omit<SlowCSSSelectorInsightModel, 'title'|'description'|'category'|'shouldShow'>):\n    SlowCSSSelectorInsightModel {\n  return {\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    shouldShow: partialModel.topElapsedMs.length !== 0 && partialModel.topMatchAttempts.length !== 0,\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: RequiredData<typeof deps>, context: InsightSetContext): SlowCSSSelectorInsightModel {\n  const selectorStatsData = parsedTrace.SelectorStats;\n\n  if (!selectorStatsData) {\n    throw new Error('no selector stats data');\n  }\n\n  const selectorTimings = aggregateSelectorStats(selectorStatsData.dataForUpdateLayoutEvent, context);\n\n  let totalElapsedUs = 0;\n  let totalMatchAttempts = 0;\n  let totalMatchCount = 0;\n\n  selectorTimings.map(timing => {\n    totalElapsedUs += timing[SelectorTimingsKey.Elapsed];\n    totalMatchAttempts += timing[SelectorTimingsKey.MatchAttempts];\n    totalMatchCount += timing[SelectorTimingsKey.MatchCount];\n  });\n\n  // sort by elapsed time\n  const sortByElapsedMs = selectorTimings.toSorted((a, b) => {\n    return b[SelectorTimingsKey.Elapsed] - a[SelectorTimingsKey.Elapsed];\n  });\n\n  // sort by match attempts\n  const sortByMatchAttempts = selectorTimings.toSorted((a, b) => {\n    return b[SelectorTimingsKey.MatchAttempts] - a[SelectorTimingsKey.MatchAttempts];\n  });\n\n  return finalize({\n    // TODO: should we identify UpdateLayout events as linked to this insight?\n    relatedEvents: [],\n    totalElapsedMs: Types.Timing.MilliSeconds(totalElapsedUs / 1000.0),\n    totalMatchAttempts,\n    totalMatchCount,\n    topElapsedMs: sortByElapsedMs.slice(0, 3),\n    topMatchAttempts: sortByMatchAttempts.slice(0, 3),\n  });\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,aAAa;AACzB,SAA6B,0BAAyB;AACtD,YAAY,WAAW;AAEvB,SAAQ,uBAAoF;AAE5F,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,OAAO;AAAA;AAAA;AAAA;AAAA,EAKP,aACI;AACN;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,4CAA4C,SAAS;AAC9F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAE7D,gBAAS,OAA0B;AACxC,SAAO,CAAC,eAAe;AACzB;AAUA,SAAS,uBACL,MAGA,SAA8C;AAChD,QAAM,cAAc,oBAAI,IAA4B;AAEpD,aAAW,CAAC,OAAO,KAAK,KAAK,MAAM;AACjC,QAAI,MAAM,KAAK,WAAW,UAAU,QAAQ,SAAS;AACnD;AAAA,IACF;AACA,QAAI,CAAC,QAAQ,OAAO,gBAAgB,OAAO,QAAQ,MAAM,GAAG;AAC1D;AAAA,IACF;AACA,eAAW,UAAU,MAAM,SAAS;AAClC,YAAM,MAAM,OAAO,mBAAmB,QAAQ,IAAI,MAAM,OAAO,mBAAmB,YAAY;AAC9F,YAAM,aAAa,YAAY,IAAI,GAAG;AACtC,UAAI,eAAe,QAAW;AAC5B,mBAAW,mBAAmB,OAAO,KAAK,OAAO,mBAAmB,OAAO;AAC3E,mBAAW,mBAAmB,eAAe,KAAK,OAAO,mBAAmB,eAAe;AAC3F,mBAAW,mBAAmB,aAAa,KAAK,OAAO,mBAAmB,aAAa;AACvF,mBAAW,mBAAmB,UAAU,KAAK,OAAO,mBAAmB,UAAU;AAAA,MACnF,OAAO;AACL,oBAAY,IAAI,KAAK,EAAC,GAAG,OAAM,CAAC;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAEA,SAAO,CAAC,GAAG,YAAY,OAAO,CAAC;AACjC;AAEA,SAAS,SAAS,cACc;AAC9B,SAAO;AAAA,IACL,OAAO,WAAW,UAAU,KAAK;AAAA,IACjC,aAAa,WAAW,UAAU,WAAW;AAAA,IAC7C,UAAU,gBAAgB;AAAA,IAC1B,YAAY,aAAa,aAAa,WAAW,KAAK,aAAa,iBAAiB,WAAW;AAAA,IAC/F,GAAG;AAAA,EACL;AACF;AAEO,gBAAS,gBACZ,aAAwC,SAAyD;AACnG,QAAM,oBAAoB,YAAY;AAEtC,MAAI,CAAC,mBAAmB;AACtB,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC1C;AAEA,QAAM,kBAAkB,uBAAuB,kBAAkB,0BAA0B,OAAO;AAElG,MAAI,iBAAiB;AACrB,MAAI,qBAAqB;AACzB,MAAI,kBAAkB;AAEtB,kBAAgB,IAAI,YAAU;AAC5B,sBAAkB,OAAO,mBAAmB,OAAO;AACnD,0BAAsB,OAAO,mBAAmB,aAAa;AAC7D,uBAAmB,OAAO,mBAAmB,UAAU;AAAA,EACzD,CAAC;AAGD,QAAM,kBAAkB,gBAAgB,SAAS,CAAC,GAAG,MAAM;AACzD,WAAO,EAAE,mBAAmB,OAAO,IAAI,EAAE,mBAAmB,OAAO;AAAA,EACrE,CAAC;AAGD,QAAM,sBAAsB,gBAAgB,SAAS,CAAC,GAAG,MAAM;AAC7D,WAAO,EAAE,mBAAmB,aAAa,IAAI,EAAE,mBAAmB,aAAa;AAAA,EACjF,CAAC;AAED,SAAO,SAAS;AAAA;AAAA,IAEd,eAAe,CAAC;AAAA,IAChB,gBAAgB,MAAM,OAAO,aAAa,iBAAiB,GAAM;AAAA,IACjE;AAAA,IACA;AAAA,IACA,cAAc,gBAAgB,MAAM,GAAG,CAAC;AAAA,IACxC,kBAAkB,oBAAoB,MAAM,GAAG,CAAC;AAAA,EAClD,CAAC;AACH;",
  "names": []
}
