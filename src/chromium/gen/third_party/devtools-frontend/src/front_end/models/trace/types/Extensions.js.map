{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/models/trace/types/Extensions.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Args, Event, Phase, SyntheticBased} from './TraceEvents.js';\n\nexport type ExtensionEntryType = 'track-entry'|'marker';\n\nexport const extensionPalette = [\n  'primary',\n  'primary-light',\n  'primary-dark',\n  'secondary',\n  'secondary-light',\n  'secondary-dark',\n  'tertiary',\n  'tertiary-light',\n  'tertiary-dark',\n  'error',\n  'warning',\n] as const;\n\nexport type ExtensionColorFromPalette = typeof extensionPalette[number];\n\nexport function colorIsValid(color: string): boolean {\n  return (extensionPalette as readonly string[]).includes(color);\n}\n\nexport interface ExtensionDataPayloadBase {\n  color?: ExtensionColorFromPalette;\n  properties?: [string, string][];\n  tooltipText?: string;\n}\n\nexport type ExtensionDataPayload = ExtensionTrackEntryPayload|ExtensionMarkerPayload;\n\nexport interface ExtensionTrackEntryPayload extends ExtensionDataPayloadBase {\n  // Typed as possibly undefined since when no data type is provided\n  // the entry is defaulted to a track entry\n  dataType?: 'track-entry';\n  // The name of the track the entry will be displayed in.\n  // Entries intended to be displayed in the same track must contain the\n  // same value in this property.\n  // If undefined, measurement is added to the Timings track\n  track: string;\n  // The track group an entry\u2019s track belongs to.\n  // Entries intended to be displayed in the same track must contain the\n  // same value in this property as well as the same value in the track\n  // property.\n  trackGroup?: string;\n}\n\nexport interface ExtensionMarkerPayload extends ExtensionDataPayloadBase {\n  dataType: 'marker';\n}\n\n/**\n * Synthetic events created for extension tracks.\n */\nexport interface SyntheticExtensionTrackEntry extends SyntheticBased<Phase.COMPLETE> {\n  args: Args&ExtensionTrackEntryPayload;\n}\n\n/**\n * Synthetic events created for extension marks.\n */\nexport interface SyntheticExtensionMarker extends SyntheticBased<Phase.COMPLETE> {\n  args: Args&ExtensionMarkerPayload;\n}\n\nexport type SyntheticExtensionEntry = SyntheticExtensionTrackEntry|SyntheticExtensionMarker;\n\nexport function isExtensionPayloadMarker(payload: {dataType?: string}): payload is ExtensionMarkerPayload {\n  return payload.dataType === 'marker';\n}\n\nexport function isExtensionPayloadTrackEntry(payload: {track?: string, dataType?: string}):\n    payload is ExtensionTrackEntryPayload {\n  const hasTrack = 'track' in payload && Boolean(payload.track);\n  const validEntryType = payload.dataType === 'track-entry' || payload.dataType === undefined;\n  return validEntryType && hasTrack;\n}\n\nexport function isValidExtensionPayload(payload: {track?: string, dataType?: string}): payload is ExtensionDataPayload {\n  return isExtensionPayloadMarker(payload) || isExtensionPayloadTrackEntry(payload);\n}\n\nexport function isSyntheticExtensionEntry(entry: Event): entry is SyntheticExtensionEntry {\n  return entry.cat === 'devtools.extension';\n}\n\nexport interface ExtensionTrackData {\n  // Name of the top level track. If it's a track group then this value\n  // has the name of the group, otherwise it has the name of the track.\n  name: string;\n  isTrackGroup: boolean;\n  // If this contains the data of a track group, this property contains\n  // the entries of each of the tracks in the the group. If this is a\n  // standalone track, then this contains that track's entries only.\n  entriesByTrack: {\n    [x: string]: SyntheticExtensionTrackEntry[],\n  };\n}\n"],
  "mappings": ";AAQO,aAAM,mBAAmB;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAIO,gBAAS,aAAa,OAAwB;AACnD,SAAQ,iBAAuC,SAAS,KAAK;AAC/D;AA8CO,gBAAS,yBAAyB,SAAiE;AACxG,SAAO,QAAQ,aAAa;AAC9B;AAEO,gBAAS,6BAA6B,SACH;AACxC,QAAM,WAAW,WAAW,WAAW,QAAQ,QAAQ,KAAK;AAC5D,QAAM,iBAAiB,QAAQ,aAAa,iBAAiB,QAAQ,aAAa;AAClF,SAAO,kBAAkB;AAC3B;AAEO,gBAAS,wBAAwB,SAA+E;AACrH,SAAO,yBAAyB,OAAO,KAAK,6BAA6B,OAAO;AAClF;AAEO,gBAAS,0BAA0B,OAAgD;AACxF,SAAO,MAAM,QAAQ;AACvB;",
  "names": []
}
