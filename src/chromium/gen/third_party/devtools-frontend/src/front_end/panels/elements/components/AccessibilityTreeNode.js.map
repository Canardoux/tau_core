{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/elements/components/AccessibilityTreeNode.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Protocol from '../../../generated/protocol.js';\n\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport accessibilityTreeNodeStyles from './accessibilityTreeNode.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Ignored node element text content in Accessibility Tree View of the Elements panel\n   */\n  ignored: 'Ignored',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/AccessibilityTreeNode.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// TODO(jobay) move this to Platform.StringUtilities if still needed.\n// This function is a variant of setTextContentTruncatedIfNeeded found in DOMExtension.\nfunction truncateTextIfNeeded(text: string): string {\n  const maxTextContentLength = 10000;\n\n  if (text.length > maxTextContentLength) {\n    return Platform.StringUtilities.trimMiddle(text, maxTextContentLength);\n  }\n  return text;\n}\n\nfunction isPrintable(valueType: Protocol.Accessibility.AXValueType): boolean {\n  switch (valueType) {\n    case Protocol.Accessibility.AXValueType.Boolean:\n    case Protocol.Accessibility.AXValueType.BooleanOrUndefined:\n    case Protocol.Accessibility.AXValueType.String:\n    case Protocol.Accessibility.AXValueType.Number:\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport interface AccessibilityTreeNodeData {\n  ignored: boolean;\n  name: string;\n  role: string;\n  properties: Protocol.Accessibility.AXProperty[];\n  id: string;\n}\n\nexport class AccessibilityTreeNode extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #ignored = true;\n  #name = '';\n  #role = '';\n  #properties: Protocol.Accessibility.AXProperty[] = [];\n  #id = '';\n\n  set data(data: AccessibilityTreeNodeData) {\n    this.#ignored = data.ignored;\n    this.#name = data.name;\n    this.#role = data.role;\n    this.#properties = data.properties;\n    this.#id = data.id;\n    void this.#render();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [accessibilityTreeNodeStyles];\n  }\n\n  async #render(): Promise<void> {\n    const role = html`<span class='role-value'>${truncateTextIfNeeded(this.#role)}</span>`;\n    const name = html`\"<span class='attribute-value'>${this.#name}</span>\"`;\n    const properties = this.#properties.map(\n        ({name, value}) => isPrintable(value.type) ?\n            html` <span class='attribute-name'>${name}</span>:&nbsp;<span class='attribute-value'>${\n                value.value}</span>` :\n            LitHtml.nothing);\n    const content =\n        this.#ignored ? html`<span>${i18nString(UIStrings.ignored)}</span>` : html`${role}&nbsp;${name}${properties}`;\n    await Coordinator.RenderCoordinator.RenderCoordinator.instance().write(\n        `Accessibility node ${this.#id} render`, () => {\n          // clang-format off\n      LitHtml.render(\n        html`<div class='container'>${content}</div>`,\n        this.#shadow,\n        {host: this});\n          // clang-format on\n        });\n  }\n}\n\ncustomElements.define('devtools-accessibility-tree-node', AccessibilityTreeNode);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-accessibility-tree-node': AccessibilityTreeNode;\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,YAAY,cAAc;AAE1B,YAAY,iBAAiB;AAC7B,YAAY,aAAa;AAEzB,OAAO,iCAAiC;AAExC,MAAM,EAAC,KAAI,IAAI;AAEf,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,SAAS;AACX;AACA,MAAM,OAAO,KAAK,KAAK,kBAAkB,uDAAuD,SAAS;AACzG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAIpE,SAAS,qBAAqB,MAAsB;AAClD,QAAM,uBAAuB;AAE7B,MAAI,KAAK,SAAS,sBAAsB;AACtC,WAAO,SAAS,gBAAgB,WAAW,MAAM,oBAAoB;AAAA,EACvE;AACA,SAAO;AACT;AAEA,SAAS,YAAY,WAAwD;AAC3E,UAAQ,WAAW;AAAA,IACjB,KAAK,SAAS,cAAc,YAAY;AAAA,IACxC,KAAK,SAAS,cAAc,YAAY;AAAA,IACxC,KAAK,SAAS,cAAc,YAAY;AAAA,IACxC,KAAK,SAAS,cAAc,YAAY;AACtC,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAUO,aAAM,8BAA8B,YAAY;AAAA,EAC5C,UAAU,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;AAAA,EAEnD,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,cAAmD,CAAC;AAAA,EACpD,MAAM;AAAA,EAEN,IAAI,KAAK,MAAiC;AACxC,SAAK,WAAW,KAAK;AACrB,SAAK,QAAQ,KAAK;AAClB,SAAK,QAAQ,KAAK;AAClB,SAAK,cAAc,KAAK;AACxB,SAAK,MAAM,KAAK;AAChB,SAAK,KAAK,QAAQ;AAAA,EACpB;AAAA,EAEA,oBAA0B;AACxB,SAAK,QAAQ,qBAAqB,CAAC,2BAA2B;AAAA,EAChE;AAAA,EAEA,MAAM,UAAyB;AAC7B,UAAM,OAAO,gCAAgC,qBAAqB,KAAK,KAAK,CAAC;AAC7E,UAAM,OAAO,sCAAsC,KAAK,KAAK;AAC7D,UAAM,aAAa,KAAK,YAAY;AAAA,MAChC,CAAC,EAAC,MAAAA,OAAM,MAAK,MAAM,YAAY,MAAM,IAAI,IACrC,qCAAqCA,KAAI,+CACrC,MAAM,KAAK,YACf,QAAQ;AAAA,IAAO;AACvB,UAAM,UACF,KAAK,WAAW,aAAa,WAAW,UAAU,OAAO,CAAC,YAAY,OAAO,IAAI,SAAS,IAAI,GAAG,UAAU;AAC/G,UAAM,YAAY,kBAAkB,kBAAkB,SAAS,EAAE;AAAA,MAC7D,sBAAsB,KAAK,GAAG;AAAA,MAAW,MAAM;AAEjD,gBAAQ;AAAA,UACN,8BAA8B,OAAO;AAAA,UACrC,KAAK;AAAA,UACL,EAAC,MAAM,KAAI;AAAA,QAAC;AAAA,MAEZ;AAAA,IAAC;AAAA,EACP;AACF;AAEA,eAAe,OAAO,oCAAoC,qBAAqB;",
  "names": ["name"]
}
