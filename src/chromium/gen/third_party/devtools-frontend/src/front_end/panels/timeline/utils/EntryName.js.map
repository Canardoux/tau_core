{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/timeline/utils/EntryName.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport {getEventStyle} from './EntryStyles.js';\n\nconst UIStrings = {\n  /**\n   *@description Text shown for an entry in the flame chart that has no explict name.\n   */\n  anonymous: '(anonymous)',\n  /**\n   *@description Text used to show an EventDispatch event which has a type associated with it\n   *@example {click} PH1\n   */\n  eventDispatchS: 'Event: {PH1}',\n  /**\n   *@description Text shown for an entry in the flame chart that represents a frame.\n   */\n  frame: 'Frame',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  wsConnectionOpened: 'WebSocket opened',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   *@example {ws://example.com} PH1\n   */\n  wsConnectionOpenedWithUrl: 'WebSocket opened: {PH1}',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  wsConnectionClosed: 'WebSocket closed',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/utils/EntryName.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * Calculates the display name for a given entry.\n * @param parsedTrace - If the trace data is provided\n * as the second argument it can be used to find source map resolved names for\n * profile calls.\n * Use this function to customise the user visible name for an entry. If no\n * custom name is found, we will fallback to the `name` property in the trace\n * entry.\n */\nexport function nameForEntry(\n    entry: Trace.Types.Events.Event,\n    parsedTrace?: Trace.Handlers.Types.ParsedTrace,\n    ): string {\n  if (Trace.Types.Events.isProfileCall(entry)) {\n    if (parsedTrace) {\n      const potentialCallName =\n          Trace.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(parsedTrace.Samples, entry);\n      // We need this extra check because the call name could be the empty\n      // string. If it is, we want to fallback.\n      if (potentialCallName) {\n        return potentialCallName;\n      }\n    }\n    return entry.callFrame.functionName || i18nString(UIStrings.anonymous);\n  }\n\n  if (Trace.Types.Events.isLegacyTimelineFrame(entry)) {\n    return i18n.i18n.lockedString(UIStrings.frame);\n  }\n\n  if (Trace.Types.Events.isDispatch(entry)) {\n    // EventDispatch represent user actions such as clicks, so in this case\n    // rather than show the event title (which is always just \"Event\"), we\n    // add the type (\"click\") to help the user understand the event.\n    return i18nString(UIStrings.eventDispatchS, {PH1: entry.args.data.type});\n  }\n  if (Trace.Types.Events.isSyntheticNetworkRequest(entry)) {\n    const parsedURL = new Common.ParsedURL.ParsedURL(entry.args.data.url);\n    const text =\n        parsedURL.isValid ? `${parsedURL.displayName} (${parsedURL.host})` : entry.args.data.url || 'Network request';\n    return text;\n  }\n\n  if (Trace.Types.Events.isWebSocketCreate(entry)) {\n    if (entry.args.data.url) {\n      return i18nString(UIStrings.wsConnectionOpenedWithUrl, {PH1: entry.args.data.url});\n    }\n\n    return i18nString(UIStrings.wsConnectionOpened);\n  }\n\n  if (Trace.Types.Events.isWebSocketDestroy(entry)) {\n    return i18nString(UIStrings.wsConnectionClosed);\n  }\n\n  if (Trace.Types.Events.isSyntheticInteraction(entry)) {\n    return nameForInteractionEvent(entry);\n  }\n\n  const eventStyleCustomName = getEventStyle(entry.name as Trace.Types.Events.Name)?.title;\n\n  return eventStyleCustomName || entry.name;\n}\n\nfunction nameForInteractionEvent(event: Trace.Types.Events.SyntheticInteractionPair): string {\n  const category = Trace.Handlers.ModelHandlers.UserInteractions.categoryOfInteraction(event);\n  // Because we hide nested interactions, we do not want to show the\n  // specific type of the interaction that was not hidden, so instead we\n  // show just the category of that interaction.\n  if (category === 'OTHER') {\n    return 'Other';\n  }\n  if (category === 'KEYBOARD') {\n    return 'Keyboard';\n  }\n  if (category === 'POINTER') {\n    return 'Pointer';\n  }\n  return event.type;\n}\n"],
  "mappings": ";AAIA,YAAY,YAAY;AACxB,YAAY,UAAU;AACtB,YAAY,WAAW;AAEvB,SAAQ,qBAAoB;AAE5B,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIhB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIP,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,2BAA2B;AAAA;AAAA;AAAA;AAAA,EAI3B,oBAAoB;AACtB;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,sCAAsC,SAAS;AACxF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAW7D,gBAAS,aACZ,OACA,aACU;AACZ,MAAI,MAAM,MAAM,OAAO,cAAc,KAAK,GAAG;AAC3C,QAAI,aAAa;AACf,YAAM,oBACF,MAAM,SAAS,cAAc,QAAQ,2BAA2B,YAAY,SAAS,KAAK;AAG9F,UAAI,mBAAmB;AACrB,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO,MAAM,UAAU,gBAAgB,WAAW,UAAU,SAAS;AAAA,EACvE;AAEA,MAAI,MAAM,MAAM,OAAO,sBAAsB,KAAK,GAAG;AACnD,WAAO,KAAK,KAAK,aAAa,UAAU,KAAK;AAAA,EAC/C;AAEA,MAAI,MAAM,MAAM,OAAO,WAAW,KAAK,GAAG;AAIxC,WAAO,WAAW,UAAU,gBAAgB,EAAC,KAAK,MAAM,KAAK,KAAK,KAAI,CAAC;AAAA,EACzE;AACA,MAAI,MAAM,MAAM,OAAO,0BAA0B,KAAK,GAAG;AACvD,UAAM,YAAY,IAAI,OAAO,UAAU,UAAU,MAAM,KAAK,KAAK,GAAG;AACpE,UAAM,OACF,UAAU,UAAU,GAAG,UAAU,WAAW,KAAK,UAAU,IAAI,MAAM,MAAM,KAAK,KAAK,OAAO;AAChG,WAAO;AAAA,EACT;AAEA,MAAI,MAAM,MAAM,OAAO,kBAAkB,KAAK,GAAG;AAC/C,QAAI,MAAM,KAAK,KAAK,KAAK;AACvB,aAAO,WAAW,UAAU,2BAA2B,EAAC,KAAK,MAAM,KAAK,KAAK,IAAG,CAAC;AAAA,IACnF;AAEA,WAAO,WAAW,UAAU,kBAAkB;AAAA,EAChD;AAEA,MAAI,MAAM,MAAM,OAAO,mBAAmB,KAAK,GAAG;AAChD,WAAO,WAAW,UAAU,kBAAkB;AAAA,EAChD;AAEA,MAAI,MAAM,MAAM,OAAO,uBAAuB,KAAK,GAAG;AACpD,WAAO,wBAAwB,KAAK;AAAA,EACtC;AAEA,QAAM,uBAAuB,cAAc,MAAM,IAA+B,GAAG;AAEnF,SAAO,wBAAwB,MAAM;AACvC;AAEA,SAAS,wBAAwB,OAA4D;AAC3F,QAAM,WAAW,MAAM,SAAS,cAAc,iBAAiB,sBAAsB,KAAK;AAI1F,MAAI,aAAa,SAAS;AACxB,WAAO;AAAA,EACT;AACA,MAAI,aAAa,YAAY;AAC3B,WAAO;AAAA,EACT;AACA,MAAI,aAAa,WAAW;AAC1B,WAAO;AAAA,EACT;AACA,SAAO,MAAM;AACf;",
  "names": []
}
