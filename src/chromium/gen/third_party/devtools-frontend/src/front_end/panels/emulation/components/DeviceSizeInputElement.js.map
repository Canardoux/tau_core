{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/emulation/components/DeviceSizeInputElement.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as EmulationModel from '../../../models/emulation/emulation.js';\nimport * as UILegacy from '../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nconst {html} = LitHtml;\n\nclass SizeChangedEvent extends Event {\n  static readonly eventName = 'sizechanged';\n  constructor(public size: number) {\n    super(SizeChangedEvent.eventName);\n  }\n}\n\nfunction getInputValue(event: Event): number {\n  return Number((event.target as HTMLInputElement).value);\n}\n\nexport class SizeInputElement extends HTMLElement {\n  #root = this.attachShadow({mode: 'open'});\n  #disabled = false;\n  #size = '0';\n  #placeholder = '';\n  #title: Platform.UIString.LocalizedString;\n  #jslogContext: string;\n\n  constructor(title: Platform.UIString.LocalizedString, {jslogContext}: {jslogContext: string}) {\n    super();\n    this.#title = title;\n    this.#jslogContext = jslogContext;\n  }\n\n  connectedCallback(): void {\n    this.render();\n  }\n\n  set disabled(disabled: boolean) {\n    this.#disabled = disabled;\n    this.render();\n  }\n\n  set size(size: string) {\n    this.#size = size;\n    this.render();\n  }\n\n  set placeholder(placeholder: string) {\n    this.#placeholder = placeholder;\n    this.render();\n  }\n\n  render(): void {\n    LitHtml.render(\n        // Since the emulation code runs in a different frame, we can't\n        // use constructed stylesheets (they are disallowed cross-frame).\n        // For now, use an inline style tag and later we can refactor this\n        // to use proper constructed stylesheets, when the code runs\n        // in the correct frame context.\n        // eslint-disable-next-line rulesdir/ban_style_tags_in_lit_html\n        html`\n      <style>\n        input {\n          /*\n           * 4 characters for the maximum size of the value,\n           * 2 characters for the width of the step-buttons,\n           * 2 pixels padding between the characters and the\n           * step-buttons.\n           */\n          width: calc(4ch + 2ch + 2px);\n          max-height: 18px;\n          border: var(--sys-color-neutral-outline);\n          border-radius: 4px;\n          margin: 0 2px;\n          text-align: center;\n          font-size: inherit;\n          font-family: inherit;\n        }\n\n        input:disabled {\n          user-select: none;\n        }\n\n        input:focus::-webkit-input-placeholder {\n          color: transparent;\n        }\n      </style>\n      <input type=\"number\"\n             max=${EmulationModel.DeviceModeModel.MaxDeviceSize}\n             min=${EmulationModel.DeviceModeModel.MinDeviceSize}\n             jslog=${VisualLogging.textField().track({change: true}).context(this.#jslogContext)}\n             maxlength=\"4\"\n             title=${this.#title}\n             placeholder=${this.#placeholder}\n             ?disabled=${this.#disabled}\n             .value=${this.#size}\n             @change=${this.#fireSizeChange}\n             @keydown=${this.#handleModifierKeys} />\n    `,\n        this.#root, {host: this});\n  }\n\n  #fireSizeChange(event: Event): void {\n    this.dispatchEvent(new SizeChangedEvent(getInputValue(event)));\n  }\n\n  #handleModifierKeys(event: Event): void {\n    let modifiedValue = UILegacy.UIUtils.modifiedFloatNumber(getInputValue(event), event);\n    if (modifiedValue === null) {\n      return;\n    }\n\n    modifiedValue = Math.min(modifiedValue, EmulationModel.DeviceModeModel.MaxDeviceSize);\n    modifiedValue = Math.max(modifiedValue, EmulationModel.DeviceModeModel.MinDeviceSize);\n\n    event.preventDefault();\n    (event.target as HTMLInputElement).value = String(modifiedValue);\n    this.dispatchEvent(new SizeChangedEvent(modifiedValue));\n  }\n}\n\ncustomElements.define('device-mode-emulation-size-input', SizeInputElement);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'device-mode-emulation-size-input': SizeInputElement;\n  }\n  interface HTMLElementEventMap {\n    'sizechanged': SizeChangedEvent;\n  }\n}\n"],
  "mappings": ";AAKA,YAAY,oBAAoB;AAChC,YAAY,cAAc;AAC1B,YAAY,aAAa;AACzB,YAAY,mBAAmB;AAE/B,MAAM,EAAC,KAAI,IAAI;AAEf,MAAM,yBAAyB,MAAM;AAAA,EAEnC,YAAmB,MAAc;AAC/B,UAAM,iBAAiB,SAAS;AADf;AAAA,EAEnB;AAAA,EAHA,OAAgB,YAAY;AAI9B;AAEA,SAAS,cAAc,OAAsB;AAC3C,SAAO,OAAQ,MAAM,OAA4B,KAAK;AACxD;AAEO,aAAM,yBAAyB,YAAY;AAAA,EAChD,QAAQ,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;AAAA,EACxC,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,eAAe;AAAA,EACf;AAAA,EACA;AAAA,EAEA,YAAY,OAA0C,EAAC,aAAY,GAA2B;AAC5F,UAAM;AACN,SAAK,SAAS;AACd,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAEA,oBAA0B;AACxB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,IAAI,SAAS,UAAmB;AAC9B,SAAK,YAAY;AACjB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,IAAI,KAAK,MAAc;AACrB,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,IAAI,YAAY,aAAqB;AACnC,SAAK,eAAe;AACpB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,SAAe;AACb,YAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA4BW,eAAe,gBAAgB,aAAa;AAAA,mBAC5C,eAAe,gBAAgB,aAAa;AAAA,qBAC1C,cAAc,UAAU,EAAE,MAAM,EAAC,QAAQ,KAAI,CAAC,EAAE,QAAQ,KAAK,aAAa,CAAC;AAAA;AAAA,qBAE3E,KAAK,MAAM;AAAA,2BACL,KAAK,YAAY;AAAA,yBACnB,KAAK,SAAS;AAAA,sBACjB,KAAK,KAAK;AAAA,uBACT,KAAK,eAAe;AAAA,wBACnB,KAAK,mBAAmB;AAAA;AAAA,MAExC,KAAK;AAAA,MAAO,EAAC,MAAM,KAAI;AAAA,IAAC;AAAA,EAC9B;AAAA,EAEA,gBAAgB,OAAoB;AAClC,SAAK,cAAc,IAAI,iBAAiB,cAAc,KAAK,CAAC,CAAC;AAAA,EAC/D;AAAA,EAEA,oBAAoB,OAAoB;AACtC,QAAI,gBAAgB,SAAS,QAAQ,oBAAoB,cAAc,KAAK,GAAG,KAAK;AACpF,QAAI,kBAAkB,MAAM;AAC1B;AAAA,IACF;AAEA,oBAAgB,KAAK,IAAI,eAAe,eAAe,gBAAgB,aAAa;AACpF,oBAAgB,KAAK,IAAI,eAAe,eAAe,gBAAgB,aAAa;AAEpF,UAAM,eAAe;AACrB,IAAC,MAAM,OAA4B,QAAQ,OAAO,aAAa;AAC/D,SAAK,cAAc,IAAI,iBAAiB,aAAa,CAAC;AAAA,EACxD;AACF;AAEA,eAAe,OAAO,oCAAoC,gBAAgB;",
  "names": []
}
