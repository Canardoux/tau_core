{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/recorder/injected/selectors/XPath.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {SelectorPart, type Selector} from './Selector.js';\n\nconst attributeSelector = (name: string, value: string): string => {\n  return `//*[@${name}=${JSON.stringify(value)}]`;\n};\n\nconst getSelectorPart = (\n    node: Node,\n    optimized?: boolean,\n    attributes: string[] = [],\n    ): SelectorPart|undefined => {\n  let value: string;\n  switch (node.nodeType) {\n    case Node.ELEMENT_NODE:\n      if (!(node instanceof Element)) {\n        return;\n      }\n      if (optimized) {\n        for (const attribute of attributes) {\n          value = node.getAttribute(attribute) ?? '';\n          if (value) {\n            return new SelectorPart(attributeSelector(attribute, value), true);\n          }\n        }\n      }\n      if (node.id) {\n        return new SelectorPart(attributeSelector('id', node.id), true);\n      }\n      value = node.localName;\n      break;\n    case Node.ATTRIBUTE_NODE:\n      value = '@' + node.nodeName;\n      break;\n    case Node.TEXT_NODE:\n    case Node.CDATA_SECTION_NODE:\n      value = 'text()';\n      break;\n    case Node.PROCESSING_INSTRUCTION_NODE:\n      value = 'processing-instruction()';\n      break;\n    case Node.COMMENT_NODE:\n      value = 'comment()';\n      break;\n    case Node.DOCUMENT_NODE:\n      value = '';\n      break;\n    default:\n      value = '';\n      break;\n  }\n\n  const index = getXPathIndexInParent(node);\n  if (index > 0) {\n    value += `[${index}]`;\n  }\n\n  return new SelectorPart(value, node.nodeType === Node.DOCUMENT_NODE);\n};\n\nconst getXPathIndexInParent = (node: Node): number => {\n  /**\n   * @returns -1 in case of error, 0 if no siblings matching the same expression,\n   * XPath index among the same expression-matching sibling nodes otherwise.\n   */\n  function areNodesSimilar(left: Node, right: Node): boolean {\n    if (left === right) {\n      return true;\n    }\n\n    if (left instanceof Element && right instanceof Element) {\n      return left.localName === right.localName;\n    }\n\n    if (left.nodeType === right.nodeType) {\n      return true;\n    }\n\n    // XPath treats CDATA as text nodes.\n    const leftType = left.nodeType === Node.CDATA_SECTION_NODE ? Node.TEXT_NODE : left.nodeType;\n    const rightType = right.nodeType === Node.CDATA_SECTION_NODE ? Node.TEXT_NODE : right.nodeType;\n    return leftType === rightType;\n  }\n\n  const children = node.parentNode ? node.parentNode.children : null;\n  if (!children) {\n    return 0;\n  }\n  let hasSameNamedElements;\n  for (let i = 0; i < children.length; ++i) {\n    if (areNodesSimilar(node, children[i]) && children[i] !== node) {\n      hasSameNamedElements = true;\n      break;\n    }\n  }\n  if (!hasSameNamedElements) {\n    return 0;\n  }\n  let ownIndex = 1;  // XPath indices start with 1.\n  for (let i = 0; i < children.length; ++i) {\n    if (areNodesSimilar(node, children[i])) {\n      if (children[i] === node) {\n        return ownIndex;\n      }\n      ++ownIndex;\n    }\n  }\n\n  throw new Error(\n      'This is impossible; a child must be the child of the parent',\n  );\n};\n\n/**\n * Computes the XPath for a node.\n *\n * @param node - The node to compute.\n * @param optimized - Whether to optimize the XPath for the node. Does not imply\n * the XPath is shorter; implies the XPath will be highly-scoped to the node.\n * @returns The computed XPath.\n *\n * @internal\n */\nexport const computeXPath = (\n    node: Node,\n    optimized?: boolean,\n    attributes?: string[],\n    ): Selector|undefined => {\n  if (node.nodeType === Node.DOCUMENT_NODE) {\n    return '/';\n  }\n\n  const selectors = [];\n\n  const buffer = [];\n  let contextNode: Node|null = node;\n  while (contextNode !== document && contextNode) {\n    const part = getSelectorPart(contextNode, optimized, attributes);\n    if (!part) {\n      return;\n    }\n    buffer.unshift(part);\n    if (part.optimized) {\n      contextNode = contextNode.getRootNode();\n    } else {\n      contextNode = contextNode.parentNode;\n    }\n    if (contextNode instanceof ShadowRoot) {\n      selectors.unshift((buffer[0].optimized ? '' : '/') + buffer.join('/'));\n      buffer.splice(0, buffer.length);\n      contextNode = contextNode.host;\n    }\n  }\n\n  if (buffer.length) {\n    selectors.unshift((buffer[0].optimized ? '' : '/') + buffer.join('/'));\n  }\n\n  if (!selectors.length || selectors.length > 1) {\n    // XPath evaluation does not work on shadowRoot.\n    return;\n  }\n\n  return selectors;\n};\n"],
  "mappings": "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",
  "names": []
}
