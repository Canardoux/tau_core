{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/snippets/ScriptSnippetFileSystem.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   *@description Default snippet name when a new snippet is created in the Sources panel\n   *@example {1} PH1\n   */\n  scriptSnippet: 'Script snippet #{PH1}',\n  /**\n   *@description Text to show something is linked to another\n   *@example {example.url} PH1\n   */\n  linkedTo: 'Linked to {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/snippets/ScriptSnippetFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nfunction escapeSnippetName(name: Platform.DevToolsPath.RawPathString): Platform.DevToolsPath.EncodedPathString {\n  return Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(name);\n}\n\nfunction unescapeSnippetName(name: Platform.DevToolsPath.EncodedPathString): Platform.DevToolsPath.RawPathString {\n  return Common.ParsedURL.ParsedURL.encodedPathToRawPathString(name);\n}\n\nexport class SnippetFileSystem extends Persistence.PlatformFileSystem.PlatformFileSystem {\n  private readonly lastSnippetIdentifierSetting: Common.Settings.Setting<number>;\n  private readonly snippetsSetting: Common.Settings.Setting<Snippet[]>;\n  constructor() {\n    super('snippet://' as Platform.DevToolsPath.UrlString, 'snippets');\n    this.lastSnippetIdentifierSetting =\n        Common.Settings.Settings.instance().createSetting('script-snippets-last-identifier', 0);\n    this.snippetsSetting = Common.Settings.Settings.instance().createSetting('script-snippets', []);\n  }\n\n  override initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    const savedSnippets: Snippet[] = this.snippetsSetting.get();\n    return savedSnippets.map(snippet => escapeSnippetName(snippet.name));\n  }\n\n  override async createFile(_path: Platform.DevToolsPath.EncodedPathString, _name: Platform.DevToolsPath.RawPathString|null):\n      Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    const nextId = this.lastSnippetIdentifierSetting.get() + 1;\n    this.lastSnippetIdentifierSetting.set(nextId);\n\n    const snippetName =\n        i18nString(UIStrings.scriptSnippet, {PH1: nextId}) as string as Platform.DevToolsPath.RawPathString;\n    const snippets = this.snippetsSetting.get();\n    snippets.push({name: snippetName, content: ''});\n    this.snippetsSetting.set(snippets);\n\n    return escapeSnippetName(snippetName);\n  }\n\n  override async deleteFile(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    const name = unescapeSnippetName(Common.ParsedURL.ParsedURL.substring(path, 1));\n    const allSnippets: Snippet[] = this.snippetsSetting.get();\n    const snippets = allSnippets.filter(snippet => snippet.name !== name);\n    if (allSnippets.length !== snippets.length) {\n      this.snippetsSetting.set(snippets);\n      return true;\n    }\n    return false;\n  }\n\n  override async requestFileContent(path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    const name = unescapeSnippetName(Common.ParsedURL.ParsedURL.substring(path, 1));\n    const snippets: Snippet[] = this.snippetsSetting.get();\n    const snippet = snippets.find(snippet => snippet.name === name);\n    if (snippet) {\n      return new TextUtils.ContentData.ContentData(snippet.content, /* isBase64 */ false, 'text/javascript');\n    }\n    return {error: `A snippet with name '${name}' was not found`};\n  }\n\n  override async setFileContent(path: Platform.DevToolsPath.EncodedPathString, content: string, _isBase64: boolean):\n      Promise<boolean> {\n    const name = unescapeSnippetName(Common.ParsedURL.ParsedURL.substring(path, 1));\n    const snippets: Snippet[] = this.snippetsSetting.get();\n    const snippet = snippets.find(snippet => snippet.name === name);\n    if (snippet) {\n      snippet.content = content;\n      this.snippetsSetting.set(snippets);\n      return true;\n    }\n    return false;\n  }\n\n  override renameFile(\n      path: Platform.DevToolsPath.EncodedPathString, newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    const name = unescapeSnippetName(Common.ParsedURL.ParsedURL.substring(path, 1));\n    const snippets: Snippet[] = this.snippetsSetting.get();\n    const snippet = snippets.find(snippet => snippet.name === name);\n    newName = Common.ParsedURL.ParsedURL.trim(newName);\n    if (!snippet || newName.length === 0 || snippets.find(snippet => snippet.name === newName)) {\n      callback(false);\n      return;\n    }\n    snippet.name = newName;\n    this.snippetsSetting.set(snippets);\n    callback(true, newName);\n  }\n\n  override async searchInPath(query: string, _progress: Common.Progress.Progress): Promise<string[]> {\n    const re = new RegExp(Platform.StringUtilities.escapeForRegExp(query), 'i');\n    const allSnippets: Snippet[] = this.snippetsSetting.get();\n    const matchedSnippets = allSnippets.filter(snippet => snippet.content.match(re));\n    return matchedSnippets.map(snippet => `snippet:///${escapeSnippetName(snippet.name)}`);\n  }\n\n  override mimeFromPath(_path: Platform.DevToolsPath.UrlString): string {\n    return 'text/javascript';\n  }\n\n  override contentType(_path: string): Common.ResourceType.ResourceType {\n    return Common.ResourceType.resourceTypes.Script;\n  }\n\n  override tooltipForURL(url: Platform.DevToolsPath.UrlString): string {\n    return i18nString(\n        UIStrings.linkedTo,\n        {PH1: unescapeSnippetName(Common.ParsedURL.ParsedURL.sliceUrlToEncodedPathString(url, this.path().length))});\n  }\n\n  override supportsAutomapping(): boolean {\n    return true;\n  }\n}\n\nexport async function evaluateScriptSnippet(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n  if (!Common.ParsedURL.schemeIs(uiSourceCode.url(), 'snippet:')) {\n    return;\n  }\n\n  const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n  if (!executionContext) {\n    return;\n  }\n\n  const runtimeModel = executionContext.runtimeModel;\n  const consoleModel = executionContext.target().model(SDK.ConsoleModel.ConsoleModel);\n  await uiSourceCode.requestContent();\n  uiSourceCode.commitWorkingCopy();\n  const expression = uiSourceCode.workingCopy();\n  Common.Console.Console.instance().show();\n\n  const url = uiSourceCode.url();\n\n  const result = await executionContext.evaluate(\n      {\n        expression: `${expression}\\n//# sourceURL=${url}`,\n        objectGroup: 'console',\n        silent: false,\n        includeCommandLineAPI: true,\n        returnByValue: false,\n        generatePreview: true,\n        replMode: true,\n      } as SDK.RuntimeModel.EvaluationOptions,\n      true, true);\n\n  if ('exceptionDetails' in result && result.exceptionDetails) {\n    consoleModel?.addMessage(SDK.ConsoleModel.ConsoleMessage.fromException(\n        runtimeModel, result.exceptionDetails, /* messageType */ undefined, /* timestamp */ undefined, url));\n    return;\n  }\n  if (!('object' in result) || !result.object) {\n    return;\n  }\n\n  const scripts = executionContext.debuggerModel.scriptsForSourceURL(url);\n  if (scripts.length < 1) {\n    return;\n  }\n  const scriptId = scripts[scripts.length - 1].scriptId;\n  const details = {\n    type: SDK.ConsoleModel.FrontendMessageType.Result,\n    url,\n    parameters: [result.object],\n    executionContextId: executionContext.id,\n    scriptId,\n  };\n  consoleModel?.addMessage(new SDK.ConsoleModel.ConsoleMessage(\n      runtimeModel, Protocol.Log.LogEntrySource.Javascript, Protocol.Log.LogEntryLevel.Info, '', details));\n}\n\nexport function isSnippetsUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n  return Common.ParsedURL.schemeIs(uiSourceCode.url(), 'snippet:');\n}\n\nexport function isSnippetsProject(project: Workspace.Workspace.Project): boolean {\n  return project.type() === Workspace.Workspace.projectTypes.FileSystem &&\n      Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemType(project) === 'snippets';\n}\n\nexport function findSnippetsProject(): Workspace.Workspace.Project {\n  const workspaceProject =\n      Workspace.Workspace.WorkspaceImpl.instance()\n          .projectsForType(Workspace.Workspace.projectTypes.FileSystem)\n          .find(\n              project => Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemType(project) ===\n                  'snippets');\n\n  if (!workspaceProject) {\n    throw new Error('Unable to find workspace project for the snippets file system');\n  }\n\n  return workspaceProject;\n}\nexport interface Snippet {\n  name: Platform.DevToolsPath.RawPathString;\n  content: string;\n}\n"],
  "mappings": "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",
  "names": ["snippet"]
}
