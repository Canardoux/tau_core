{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/elements/components/ElementsTreeExpandButton.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport elementsTreeExpandButtonStyles from './elementsTreeExpandButton.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Aria label for a button expanding collapsed subtree\n   */\n  expand: 'Expand',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/ElementsTreeExpandButton.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ElementsTreeExpandButtonData {\n  clickHandler: (event?: Event) => void;\n}\nexport class ElementsTreeExpandButton extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #clickHandler: ((event?: Event) => void) = () => {};\n\n  set data(data: ElementsTreeExpandButtonData) {\n    this.#clickHandler = data.clickHandler;\n    this.#update();\n  }\n\n  #update(): void {\n    this.#render();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [elementsTreeExpandButtonStyles];\n  }\n\n  #render(): void {\n    // clang-format off\n    // This button's innerText will be tested by e2e test and blink layout tests.\n    // It can't have any other characters like '\\n' or space, otherwise it will break tests.\n    LitHtml.render(html`<button\n        class=\"expand-button\"\n        tabindex=\"-1\"\n        aria-label=${i18nString(UIStrings.expand)}\n        jslog=${VisualLogging.action('expand').track({click: true})}\n        @click=${this.#clickHandler}><devtools-icon name=\"dots-horizontal\"></devtools-icon></button>`,\n      this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-elements-tree-expand-button', ElementsTreeExpandButton);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-elements-tree-expand-button': ElementsTreeExpandButton;\n  }\n}\n"],
  "mappings": ";AAIA,OAAO;AAEP,YAAY,UAAU;AACtB,YAAY,aAAa;AACzB,YAAY,mBAAmB;AAE/B,OAAO,oCAAoC;AAE3C,MAAM,EAAC,KAAI,IAAI;AAEf,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,QAAQ;AACV;AACA,MAAM,OAAO,KAAK,KAAK,kBAAkB,0DAA0D,SAAS;AAC5G,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAK7D,aAAM,iCAAiC,YAAY;AAAA,EAC/C,UAAU,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;AAAA,EAEnD,gBAA2C,MAAM;AAAA,EAAC;AAAA,EAElD,IAAI,KAAK,MAAoC;AAC3C,SAAK,gBAAgB,KAAK;AAC1B,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,UAAgB;AACd,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,oBAA0B;AACxB,SAAK,QAAQ,qBAAqB,CAAC,8BAA8B;AAAA,EACnE;AAAA,EAEA,UAAgB;AAId,YAAQ;AAAA,MAAO;AAAA;AAAA;AAAA,qBAGE,WAAW,UAAU,MAAM,CAAC;AAAA,gBACjC,cAAc,OAAO,QAAQ,EAAE,MAAM,EAAC,OAAO,KAAI,CAAC,CAAC;AAAA,iBAClD,KAAK,aAAa;AAAA,MAC7B,KAAK;AAAA,MAAS,EAAC,MAAM,KAAI;AAAA,IAAC;AAAA,EAE9B;AACF;AAEA,eAAe,OAAO,wCAAwC,wBAAwB;",
  "names": []
}
