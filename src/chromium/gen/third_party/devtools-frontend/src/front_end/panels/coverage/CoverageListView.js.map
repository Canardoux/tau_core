{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/coverage/CoverageListView.ts"],
  "sourcesContent": ["// Copyright (c) 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport coverageListViewStyles from './coverageListView.css.js';\nimport {\n  CoverageType,\n  SourceURLCoverageInfo,\n  type URLCoverageInfo,\n} from './CoverageModel.js';\n\nconst UIStrings = {\n  /**\n   *@description Text that appears on a button for the css resource type filter.\n   */\n  css: 'CSS',\n  /**\n   *@description Text in Coverage List View of the Coverage tab\n   */\n  jsPerFunction: 'JS (per function)',\n  /**\n   *@description Text in Coverage List View of the Coverage tab\n   */\n  jsPerBlock: 'JS (per block)',\n  /**\n   *@description Text for web URLs\n   */\n  url: 'URL',\n  /**\n   *@description Text that refers to some types\n   */\n  type: 'Type',\n  /**\n   *@description Text in Coverage List View of the Coverage tab\n   */\n  totalBytes: 'Total Bytes',\n  /**\n   *@description Text in Coverage List View of the Coverage tab\n   */\n  unusedBytes: 'Unused Bytes',\n  /**\n   *@description Text in the Coverage List View of the Coverage Tab\n   */\n  usageVisualization: 'Usage Visualization',\n  /**\n   *@description Data grid name for Coverage data grids\n   */\n  codeCoverage: 'Code Coverage',\n  /**\n   *@description Cell title in Coverage List View of the Coverage tab. The coverage tool tells\n   *developers which functions (logical groups of lines of code) were actually run/executed. If a\n   *function does get run, then it is marked in the UI to indicate that it was covered.\n   */\n  jsCoverageWithPerFunction:\n      'JS coverage with per function granularity: Once a function was executed, the whole function is marked as covered.',\n  /**\n   *@description Cell title in Coverage List View of the Coverage tab. The coverage tool tells\n   *developers which blocks (logical groups of lines of code, smaller than a function) were actually\n   *run/executed. If a block does get run, then it is marked in the UI to indicate that it was\n   *covered.\n   */\n  jsCoverageWithPerBlock:\n      'JS coverage with per block granularity: Once a block of JavaScript was executed, that block is marked as covered.',\n  /**\n   *@description Accessible text for the value in bytes in memory allocation or coverage view.\n   */\n  sBytes: '{n, plural, =1 {# byte} other {# bytes}}',\n  /**\n   *@description Accessible text for the unused bytes column in the coverage tool that describes the total unused bytes and percentage of the file unused.\n   *@example {88%} percentage\n   */\n  sBytesS: '{n, plural, =1 {# byte, {percentage}} other {# bytes, {percentage}}}',\n  /**\n   *@description Tooltip text for the bar in the coverage list view of the coverage tool that illustrates the relation between used and unused bytes.\n   *@example {1000} PH1\n   *@example {12.34} PH2\n   */\n  sBytesSBelongToFunctionsThatHave: '{PH1} bytes ({PH2}) belong to functions that have not (yet) been executed.',\n  /**\n   *@description Tooltip text for the bar in the coverage list view of the coverage tool that illustrates the relation between used and unused bytes.\n   *@example {1000} PH1\n   *@example {12.34} PH2\n   */\n  sBytesSBelongToBlocksOf: '{PH1} bytes ({PH2}) belong to blocks of JavaScript that have not (yet) been executed.',\n  /**\n   *@description Message in Coverage View of the Coverage tab\n   *@example {1000} PH1\n   *@example {12.34} PH2\n   */\n  sBytesSBelongToFunctionsThatHaveExecuted: '{PH1} bytes ({PH2}) belong to functions that have executed at least once.',\n  /**\n   *@description Message in Coverage View of the Coverage tab\n   *@example {1000} PH1\n   *@example {12.34} PH2\n   */\n  sBytesSBelongToBlocksOfJavascript:\n      '{PH1} bytes ({PH2}) belong to blocks of JavaScript that have executed at least once.',\n  /**\n   *@description Accessible text for the visualization column of coverage tool. Contains percentage of unused bytes to used bytes.\n   *@example {12.3} PH1\n   *@example {12.3} PH2\n   */\n  sOfFileUnusedSOfFileUsed: '{PH1} % of file unused, {PH2} % of file used',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/coverage/CoverageListView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function coverageTypeToString(type: CoverageType): string {\n  const types = [];\n  if (type & CoverageType.CSS) {\n    types.push(i18nString(UIStrings.css));\n  }\n  if (type & CoverageType.JAVA_SCRIPT_PER_FUNCTION) {\n    types.push(i18nString(UIStrings.jsPerFunction));\n  } else if (type & CoverageType.JAVA_SCRIPT) {\n    types.push(i18nString(UIStrings.jsPerBlock));\n  }\n  return types.join('+');\n}\n\nexport class CoverageListView extends UI.Widget.VBox {\n  private readonly nodeForCoverageInfo: Map<URLCoverageInfo, GridNode>;\n  private readonly isVisibleFilter: (arg0: URLCoverageInfo) => boolean;\n  private highlightRegExp: RegExp|null;\n  private dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<GridNode>;\n\n  constructor(isVisibleFilter: (arg0: URLCoverageInfo) => boolean) {\n    super(true);\n    this.nodeForCoverageInfo = new Map();\n    this.isVisibleFilter = isVisibleFilter;\n    this.highlightRegExp = null;\n\n    const columns = [\n      {\n        id: 'url',\n        title: i18nString(UIStrings.url),\n        width: '250px',\n        weight: 3,\n        fixedWidth: false,\n        sortable: true,\n        disclosure: true,\n      },\n      {id: 'type', title: i18nString(UIStrings.type), width: '45px', weight: 1, fixedWidth: true, sortable: true},\n      {\n        id: 'size',\n        title: i18nString(UIStrings.totalBytes),\n        width: '60px',\n        fixedWidth: true,\n        sortable: true,\n        align: DataGrid.DataGrid.Align.RIGHT,\n        weight: 1,\n      },\n      {\n        id: 'unused-size',\n        title: i18nString(UIStrings.unusedBytes),\n        width: '100px',\n        fixedWidth: true,\n        sortable: true,\n        align: DataGrid.DataGrid.Align.RIGHT,\n        sort: DataGrid.DataGrid.Order.Descending,\n        weight: 1,\n      },\n      {\n        id: 'bars',\n        title: i18nString(UIStrings.usageVisualization),\n        width: '250px',\n        fixedWidth: false,\n        sortable: true,\n        weight: 1,\n      },\n    ] as DataGrid.DataGrid.ColumnDescriptor[];\n    this.dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid<GridNode>({\n      displayName: i18nString(UIStrings.codeCoverage),\n      columns,\n      editCallback: undefined,\n      refreshCallback: undefined,\n      deleteCallback: undefined,\n    });\n    this.dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.LAST);\n    this.dataGrid.setStriped(true);\n    this.dataGrid.element.classList.add('flex-auto');\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.OPENED_NODE, this.onOpenedNode, this);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SORTING_CHANGED, this.sortingChanged, this);\n\n    const dataGridWidget = this.dataGrid.asWidget();\n    dataGridWidget.show(this.contentElement);\n    this.setDefaultFocusedChild(dataGridWidget);\n  }\n\n  override update(coverageInfo: URLCoverageInfo[] = []): void {\n    let hadUpdates = false;\n    const maxSize = coverageInfo.reduce((acc, entry) => Math.max(acc, entry.size()), 0);\n    const rootNode = this.dataGrid.rootNode();\n    for (const entry of coverageInfo) {\n      let node = this.nodeForCoverageInfo.get(entry);\n      if (node) {\n        if (this.isVisibleFilter(node.coverageInfo)) {\n          hadUpdates = node.refreshIfNeeded(maxSize) || hadUpdates;\n          if (entry.sourcesURLCoverageInfo.size > 0) {\n            this.updateSourceNodes(entry.sourcesURLCoverageInfo, maxSize, node);\n          }\n        }\n        continue;\n      }\n      node = new GridNode(entry, maxSize);\n      this.nodeForCoverageInfo.set(entry, node);\n      if (this.isVisibleFilter(node.coverageInfo)) {\n        rootNode.appendChild(node);\n        if (entry.sourcesURLCoverageInfo.size > 0) {\n          void this.createSourceNodes(entry.sourcesURLCoverageInfo, maxSize, node);\n        }\n        hadUpdates = true;\n      }\n    }\n    if (hadUpdates) {\n      this.sortingChanged();\n    }\n  }\n\n  updateSourceNodes(\n      sourcesURLCoverageInfo: Map<Platform.DevToolsPath.UrlString, SourceURLCoverageInfo>, maxSize: number,\n      node: GridNode): void {\n    let shouldCreateSourceNodes = false;\n    for (const coverageInfo of sourcesURLCoverageInfo.values()) {\n      const sourceNode = this.nodeForCoverageInfo.get(coverageInfo);\n      if (sourceNode) {\n        sourceNode.refreshIfNeeded(maxSize);\n      } else {\n        shouldCreateSourceNodes = true;\n        break;\n      }\n    }\n    if (shouldCreateSourceNodes) {\n      void this.createSourceNodes(sourcesURLCoverageInfo, maxSize, node);\n    }\n  }\n\n  async createSourceNodes(\n      sourcesURLCoverageInfo: Map<Platform.DevToolsPath.UrlString, SourceURLCoverageInfo>, maxSize: number,\n      node: GridNode): Promise<void> {\n    for (const coverageInfo of sourcesURLCoverageInfo.values()) {\n      const sourceNode = new GridNode(coverageInfo, maxSize);\n      node.appendChild(sourceNode);\n      this.nodeForCoverageInfo.set(coverageInfo, sourceNode);\n    }\n  }\n\n  reset(): void {\n    this.nodeForCoverageInfo.clear();\n    this.dataGrid.rootNode().removeChildren();\n  }\n\n  updateFilterAndHighlight(highlightRegExp: RegExp|null): void {\n    this.highlightRegExp = highlightRegExp;\n    let hadTreeUpdates = false;\n    for (const node of this.nodeForCoverageInfo.values()) {\n      const shouldBeVisible = this.isVisibleFilter(node.coverageInfo);\n      const isVisible = Boolean(node.parent);\n      if (shouldBeVisible) {\n        node.setHighlight(this.highlightRegExp);\n      }\n      if (shouldBeVisible === isVisible) {\n        continue;\n      }\n      hadTreeUpdates = true;\n      if (!shouldBeVisible) {\n        node.remove();\n      } else {\n        this.appendNodeByType(node);\n      }\n    }\n    if (hadTreeUpdates) {\n      this.sortingChanged();\n    }\n  }\n\n  private appendNodeByType(node: GridNode): void {\n    if (node.coverageInfo instanceof SourceURLCoverageInfo) {\n      const parentNode = this.nodeForCoverageInfo.get(node.coverageInfo.generatedURLCoverageInfo);\n      parentNode?.appendChild(node);\n    } else {\n      this.dataGrid.rootNode().appendChild(node);\n    }\n  }\n\n  selectByUrl(url: string): void {\n    for (const [info, node] of this.nodeForCoverageInfo.entries()) {\n      if (info.url() === url) {\n        node.revealAndSelect();\n        break;\n      }\n    }\n  }\n\n  private onOpenedNode(): void {\n    void this.revealSourceForSelectedNode();\n  }\n\n  private async revealSourceForSelectedNode(): Promise<void> {\n    const node = this.dataGrid.selectedNode;\n    if (!node) {\n      return;\n    }\n    const coverageInfo = (node as GridNode).coverageInfo;\n    const sourceCode = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(coverageInfo.url());\n    if (!sourceCode) {\n      return;\n    }\n\n    if (this.dataGrid.selectedNode !== node) {\n      return;\n    }\n    void Common.Revealer.reveal(sourceCode);\n  }\n\n  private sortingChanged(): void {\n    const columnId = this.dataGrid.sortColumnId();\n    if (!columnId) {\n      return;\n    }\n    const sortFunction = GridNode.sortFunctionForColumn(columnId) as (\n                             (arg0: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n                              arg1: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>) => number) |\n        null;\n    if (!sortFunction) {\n      return;\n    }\n    this.dataGrid.sortNodes(sortFunction, !this.dataGrid.isSortOrderAscending());\n  }\n  override wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([coverageListViewStyles]);\n  }\n}\n\nlet percentageFormatter: Intl.NumberFormat|null = null;\n\nfunction getPercentageFormatter(): Intl.NumberFormat {\n  if (!percentageFormatter) {\n    percentageFormatter = new Intl.NumberFormat(i18n.DevToolsLocale.DevToolsLocale.instance().locale, {\n      style: 'percent',\n      maximumFractionDigits: 1,\n    });\n  }\n  return percentageFormatter;\n}\n\nlet bytesFormatter: Intl.NumberFormat|null = null;\n\nfunction getBytesFormatter(): Intl.NumberFormat {\n  if (!bytesFormatter) {\n    bytesFormatter = new Intl.NumberFormat(i18n.DevToolsLocale.DevToolsLocale.instance().locale);\n  }\n  return bytesFormatter;\n}\n\nexport class GridNode extends DataGrid.SortableDataGrid.SortableDataGridNode<GridNode> {\n  coverageInfo: URLCoverageInfo;\n  private lastUsedSize!: number|undefined;\n  private url: Platform.DevToolsPath.UrlString;\n  private maxSize: number;\n  private highlightRegExp: RegExp|null;\n\n  constructor(coverageInfo: URLCoverageInfo, maxSize: number) {\n    super();\n    this.coverageInfo = coverageInfo;\n    this.url = coverageInfo.url();\n    this.maxSize = maxSize;\n    this.highlightRegExp = null;\n  }\n\n  setHighlight(highlightRegExp: RegExp|null): void {\n    if (this.highlightRegExp === highlightRegExp) {\n      return;\n    }\n    this.highlightRegExp = highlightRegExp;\n    this.refresh();\n  }\n\n  refreshIfNeeded(maxSize: number): boolean {\n    if (this.lastUsedSize === this.coverageInfo.usedSize() && maxSize === this.maxSize) {\n      return false;\n    }\n    this.lastUsedSize = this.coverageInfo.usedSize();\n    this.maxSize = maxSize;\n    this.refresh();\n    return true;\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    switch (columnId) {\n      case 'url': {\n        UI.Tooltip.Tooltip.install(cell, this.url);\n        const outer = cell.createChild('div', 'url-outer');\n        const prefix = outer.createChild('div', 'url-prefix');\n        const suffix = outer.createChild('div', 'url-suffix');\n        const splitURL = /^(.*)(\\/[^/]*)$/.exec(this.url);\n        prefix.textContent = splitURL ? splitURL[1] : this.url;\n        suffix.textContent = splitURL ? splitURL[2] : '';\n        if (this.highlightRegExp) {\n          this.highlight(outer, this.url);\n        }\n        this.setCellAccessibleName(this.url, cell, columnId);\n        break;\n      }\n      case 'type': {\n        cell.textContent = coverageTypeToString(this.coverageInfo.type());\n        if (this.coverageInfo.type() & CoverageType.JAVA_SCRIPT_PER_FUNCTION) {\n          UI.Tooltip.Tooltip.install(cell, i18nString(UIStrings.jsCoverageWithPerFunction));\n        } else if (this.coverageInfo.type() & CoverageType.JAVA_SCRIPT) {\n          UI.Tooltip.Tooltip.install(cell, i18nString(UIStrings.jsCoverageWithPerBlock));\n        }\n        break;\n      }\n      case 'size': {\n        const size = this.coverageInfo.size() || 0;\n        const sizeSpan = cell.createChild('span');\n        const sizeFormatted = getBytesFormatter().format(size);\n        sizeSpan.textContent = sizeFormatted;\n        const sizeAccessibleName = i18nString(UIStrings.sBytes, {n: size});\n        this.setCellAccessibleName(sizeAccessibleName, cell, columnId);\n        break;\n      }\n      case 'unused-size': {\n        const unusedSize = this.coverageInfo.unusedSize() || 0;\n        const unusedSizeSpan = cell.createChild('span');\n        const unusedPercentsSpan = cell.createChild('span', 'percent-value');\n        const unusedSizeFormatted = getBytesFormatter().format(unusedSize);\n        unusedSizeSpan.textContent = unusedSizeFormatted;\n        const unusedPercentFormatted = getPercentageFormatter().format(this.coverageInfo.unusedPercentage());\n        unusedPercentsSpan.textContent = unusedPercentFormatted;\n        const unusedAccessibleName = i18nString(UIStrings.sBytesS, {n: unusedSize, percentage: unusedPercentFormatted});\n        this.setCellAccessibleName(unusedAccessibleName, cell, columnId);\n        break;\n      }\n      case 'bars': {\n        const barContainer = cell.createChild('div', 'bar-container');\n        const unusedPercent = getPercentageFormatter().format(this.coverageInfo.unusedPercentage());\n        const usedPercent = getPercentageFormatter().format(this.coverageInfo.usedPercentage());\n        if (this.coverageInfo.unusedSize() > 0) {\n          const unusedSizeBar = barContainer.createChild('div', 'bar bar-unused-size');\n          unusedSizeBar.style.width = ((this.coverageInfo.unusedSize() / this.maxSize) * 100 || 0) + '%';\n          if (this.coverageInfo.type() & CoverageType.JAVA_SCRIPT_PER_FUNCTION) {\n            UI.Tooltip.Tooltip.install(\n                unusedSizeBar,\n                i18nString(\n                    UIStrings.sBytesSBelongToFunctionsThatHave,\n                    {PH1: this.coverageInfo.unusedSize(), PH2: unusedPercent}));\n          } else if (this.coverageInfo.type() & CoverageType.JAVA_SCRIPT) {\n            UI.Tooltip.Tooltip.install(\n                unusedSizeBar,\n                i18nString(\n                    UIStrings.sBytesSBelongToBlocksOf, {PH1: this.coverageInfo.unusedSize(), PH2: unusedPercent}));\n          }\n        }\n        if (this.coverageInfo.usedSize() > 0) {\n          const usedSizeBar = barContainer.createChild('div', 'bar bar-used-size');\n          usedSizeBar.style.width = ((this.coverageInfo.usedSize() / this.maxSize) * 100 || 0) + '%';\n          if (this.coverageInfo.type() & CoverageType.JAVA_SCRIPT_PER_FUNCTION) {\n            UI.Tooltip.Tooltip.install(\n                usedSizeBar,\n                i18nString(\n                    UIStrings.sBytesSBelongToFunctionsThatHaveExecuted,\n                    {PH1: this.coverageInfo.usedSize(), PH2: usedPercent}));\n          } else if (this.coverageInfo.type() & CoverageType.JAVA_SCRIPT) {\n            UI.Tooltip.Tooltip.install(\n                usedSizeBar,\n                i18nString(\n                    UIStrings.sBytesSBelongToBlocksOfJavascript,\n                    {PH1: this.coverageInfo.usedSize(), PH2: usedPercent}));\n          }\n        }\n        this.setCellAccessibleName(\n            i18nString(UIStrings.sOfFileUnusedSOfFileUsed, {PH1: unusedPercent, PH2: usedPercent}), cell, columnId);\n      }\n    }\n    return cell;\n  }\n\n  private highlight(element: Element, textContent: string): void {\n    if (!this.highlightRegExp) {\n      return;\n    }\n    const matches = this.highlightRegExp.exec(textContent);\n    if (!matches || !matches.length) {\n      return;\n    }\n    const range = new TextUtils.TextRange.SourceRange(matches.index, matches[0].length);\n    UI.UIUtils.highlightRangesWithStyleClass(element, [range], 'filter-highlight');\n  }\n\n  static sortFunctionForColumn(columnId: string): ((arg0: GridNode, arg1: GridNode) => number)|null {\n    const compareURL = (a: GridNode, b: GridNode): number => a.url.localeCompare(b.url);\n    switch (columnId) {\n      case 'url':\n        return compareURL;\n      case 'type':\n        return (a: GridNode, b: GridNode) => {\n          const typeA = coverageTypeToString(a.coverageInfo.type());\n          const typeB = coverageTypeToString(b.coverageInfo.type());\n          return typeA.localeCompare(typeB) || compareURL(a, b);\n        };\n      case 'size':\n        return (a: GridNode, b: GridNode) => a.coverageInfo.size() - b.coverageInfo.size() || compareURL(a, b);\n      case 'bars':\n      case 'unused-size':\n        return (a: GridNode, b: GridNode) =>\n                   a.coverageInfo.unusedSize() - b.coverageInfo.unusedSize() || compareURL(a, b);\n      default:\n        console.assert(false, 'Unknown sort field: ' + columnId);\n        return null;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
