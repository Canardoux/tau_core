{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/search/SearchResultsPane.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport searchResultsPaneStyles from './searchResultsPane.css.js';\nimport type {SearchResult} from './SearchScope.js';\n\nconst UIStrings = {\n  /**\n   *@description Accessibility label for number of matches in each file in search results pane\n   *@example {2} PH1\n   */\n  matchesCountS: 'Matches Count {PH1}',\n  /**\n   *@description Search result label for results in the Search tool\n   *@example {2} PH1\n   */\n  lineS: 'Line {PH1}',\n  /**\n   *@description Text in Search Results Pane of the Search tab\n   *@example {2} PH1\n   */\n  showDMore: 'Show {PH1} more',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchResultsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SearchResultsPane extends UI.Widget.VBox {\n  private readonly searchConfig: Workspace.SearchConfig.SearchConfig;\n  private readonly searchResults: SearchResult[];\n  private readonly treeElements: SearchResultsTreeElement[];\n  private treeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  private matchesExpandedCount: number;\n\n  constructor(searchConfig: Workspace.SearchConfig.SearchConfig) {\n    super(true);\n    this.searchConfig = searchConfig;\n\n    this.searchResults = [];\n    this.treeElements = [];\n    this.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    this.treeOutline.hideOverflow();\n\n    this.contentElement.appendChild(this.treeOutline.element);\n\n    this.matchesExpandedCount = 0;\n  }\n\n  addSearchResult(searchResult: SearchResult): void {\n    this.searchResults.push(searchResult);\n    this.addTreeElement(searchResult);\n  }\n\n  showAllMatches(): void {\n    this.treeElements.forEach(treeElement => {\n      treeElement.expand();\n      treeElement.showAllMatches();\n    });\n  }\n\n  collapseAllResults(): void {\n    this.treeElements.forEach(treeElement => {\n      treeElement.collapse();\n    });\n  }\n\n  private addTreeElement(searchResult: SearchResult): void {\n    const treeElement = new SearchResultsTreeElement(this.searchConfig, searchResult);\n    this.treeOutline.appendChild(treeElement);\n    if (!this.treeOutline.selectedTreeElement) {\n      treeElement.select(/* omitFocus */ true, /* selectedByUser */ true);\n    }\n    // Expand until at least a certain number of matches is expanded.\n    if (this.matchesExpandedCount < matchesExpandedByDefault) {\n      treeElement.expand();\n    }\n    this.matchesExpandedCount += searchResult.matchesCount();\n    this.treeElements.push(treeElement);\n  }\n  override wasShown(): void {\n    super.wasShown();\n    this.treeOutline.registerCSSFiles([searchResultsPaneStyles]);\n  }\n}\n\nexport const matchesExpandedByDefault = 200;\nexport const matchesShownAtOnce = 20;\n\nexport class SearchResultsTreeElement extends UI.TreeOutline.TreeElement {\n  private searchConfig: Workspace.SearchConfig.SearchConfig;\n  private searchResult: SearchResult;\n  private initialized: boolean;\n  override toggleOnClick: boolean;\n\n  constructor(searchConfig: Workspace.SearchConfig.SearchConfig, searchResult: SearchResult) {\n    super('', true);\n    this.searchConfig = searchConfig;\n    this.searchResult = searchResult;\n    this.initialized = false;\n    this.toggleOnClick = true;\n  }\n\n  override onexpand(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    this.updateMatchesUI();\n    this.initialized = true;\n  }\n\n  showAllMatches(): void {\n    this.removeChildren();\n    this.appendSearchMatches(0, this.searchResult.matchesCount());\n  }\n\n  private updateMatchesUI(): void {\n    this.removeChildren();\n    const toIndex = Math.min(this.searchResult.matchesCount(), matchesShownAtOnce);\n    if (toIndex < this.searchResult.matchesCount()) {\n      this.appendSearchMatches(0, toIndex - 1);\n      this.appendShowMoreMatchesElement(toIndex - 1);\n    } else {\n      this.appendSearchMatches(0, toIndex);\n    }\n  }\n\n  override onattach(): void {\n    this.updateSearchMatches();\n  }\n\n  private updateSearchMatches(): void {\n    this.listItemElement.classList.add('search-result');\n\n    const fileNameSpan = span(this.searchResult.label(), 'search-result-file-name');\n    fileNameSpan.appendChild(span('\\u2014', 'search-result-dash'));\n    fileNameSpan.appendChild(span(this.searchResult.description(), 'search-result-qualifier'));\n\n    this.tooltip = this.searchResult.description();\n    this.listItemElement.appendChild(fileNameSpan);\n    const matchesCountSpan = document.createElement('span');\n    matchesCountSpan.className = 'search-result-matches-count';\n\n    matchesCountSpan.textContent = `${this.searchResult.matchesCount()}`;\n    UI.ARIAUtils.setLabel(\n        matchesCountSpan, i18nString(UIStrings.matchesCountS, {PH1: this.searchResult.matchesCount()}));\n\n    this.listItemElement.appendChild(matchesCountSpan);\n    if (this.expanded) {\n      this.updateMatchesUI();\n    }\n\n    function span(text: string, className: string): Element {\n      const span = document.createElement('span');\n      span.className = className;\n      span.textContent = text;\n      return span;\n    }\n  }\n\n  private appendSearchMatches(fromIndex: number, toIndex: number): void {\n    const searchResult = this.searchResult;\n\n    const queries = this.searchConfig.queries();\n    const regexes = [];\n    for (let i = 0; i < queries.length; ++i) {\n      regexes.push(Platform.StringUtilities.createSearchRegex(\n          queries[i], !this.searchConfig.ignoreCase(), this.searchConfig.isRegex()));\n    }\n\n    for (let i = fromIndex; i < toIndex; ++i) {\n      let lineContent = searchResult.matchLineContent(i);\n      let matchRanges: TextUtils.TextRange.SourceRange[] = [];\n      // Searching in scripts and network response bodies produces one result entry per match. We can skip re-doing the\n      // search since we have the exact match range.\n      // For matches found in headers or the request URL we re-do the search to find all match ranges.\n      const column = searchResult.matchColumn(i);\n      const matchLength = searchResult.matchLength(i);\n      if (column !== undefined && matchLength !== undefined) {\n        const {matchRange, lineSegment} =\n            lineSegmentForMatch(lineContent, new TextUtils.TextRange.SourceRange(column, matchLength));\n        lineContent = lineSegment;\n        matchRanges = [matchRange];\n      } else {\n        lineContent = lineContent.trim();\n        for (let j = 0; j < regexes.length; ++j) {\n          matchRanges = matchRanges.concat(this.regexMatchRanges(lineContent, regexes[j]));\n        }\n        ({lineSegment: lineContent, matchRanges} = lineSegmentForMultipleMatches(lineContent, matchRanges));\n      }\n\n      const anchor = Components.Linkifier.Linkifier.linkifyRevealable(\n          searchResult.matchRevealable(i), '', undefined, undefined, undefined, 'search-match');\n      anchor.classList.add('search-match-link');\n      anchor.tabIndex = 0;\n      const labelSpan = document.createElement('span');\n      labelSpan.classList.add('search-match-line-number');\n      const resultLabel = searchResult.matchLabel(i);\n      labelSpan.textContent = resultLabel;\n      if (typeof resultLabel === 'number' && !isNaN(resultLabel)) {\n        UI.ARIAUtils.setLabel(labelSpan, i18nString(UIStrings.lineS, {PH1: resultLabel}));\n      } else {\n        UI.ARIAUtils.setLabel(labelSpan, resultLabel);\n      }\n      anchor.appendChild(labelSpan);\n\n      const contentSpan = this.createContentSpan(lineContent, matchRanges);\n      anchor.appendChild(contentSpan);\n\n      const searchMatchElement = new UI.TreeOutline.TreeElement();\n      this.appendChild(searchMatchElement);\n      searchMatchElement.listItemElement.className = 'search-match';\n      searchMatchElement.listItemElement.appendChild(anchor);\n      searchMatchElement.listItemElement.addEventListener('keydown', event => {\n        if (event.key === 'Enter') {\n          event.consume(true);\n          void Common.Revealer.reveal(searchResult.matchRevealable(i));\n        }\n      });\n      searchMatchElement.tooltip = lineContent;\n    }\n  }\n\n  private appendShowMoreMatchesElement(startMatchIndex: number): void {\n    const matchesLeftCount = this.searchResult.matchesCount() - startMatchIndex;\n    const showMoreMatchesText = i18nString(UIStrings.showDMore, {PH1: matchesLeftCount});\n    const showMoreMatchesTreeElement = new UI.TreeOutline.TreeElement(showMoreMatchesText);\n    this.appendChild(showMoreMatchesTreeElement);\n    showMoreMatchesTreeElement.listItemElement.classList.add('show-more-matches');\n    showMoreMatchesTreeElement.onselect =\n        this.showMoreMatchesElementSelected.bind(this, showMoreMatchesTreeElement, startMatchIndex);\n  }\n\n  private createContentSpan(lineContent: string, matchRanges: TextUtils.TextRange.SourceRange[]): Element {\n    const contentSpan = document.createElement('span');\n    contentSpan.className = 'search-match-content';\n    contentSpan.textContent = lineContent;\n    UI.ARIAUtils.setLabel(contentSpan, `${lineContent} line`);\n    UI.UIUtils.highlightRangesWithStyleClass(contentSpan, matchRanges, 'highlighted-search-result');\n    return contentSpan;\n  }\n\n  private regexMatchRanges(lineContent: string, regex: RegExp): TextUtils.TextRange.SourceRange[] {\n    regex.lastIndex = 0;\n    let match;\n    const matchRanges = [];\n    while ((regex.lastIndex < lineContent.length) && (match = regex.exec(lineContent))) {\n      matchRanges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n    }\n\n    return matchRanges;\n  }\n\n  private showMoreMatchesElementSelected(\n      showMoreMatchesTreeElement: UI.TreeOutline.TreeElement, startMatchIndex: number): boolean {\n    this.removeChild(showMoreMatchesTreeElement);\n    this.appendSearchMatches(startMatchIndex, this.searchResult.matchesCount());\n    return false;\n  }\n}\n\nconst DEFAULT_OPTS = {\n  prefixLength: 25,\n  maxLength: 1000,\n};\n\n/**\n * Takes a whole line and calculates the substring we want to actually display in the UI.\n * Also returns a translated {matchRange} (the parameter is relative to {lineContent} but the\n * caller needs it relative to {lineSegment}).\n *\n * {lineContent} is modified in the following way:\n *\n *   * Whitespace is trimmed from the beginning (unless the match includes it).\n *   * We only leave {options.prefixLength} characters before the match (and add an ellipsis in\n *     case we removed anything)\n *   * Truncate the remainder to {options.maxLength} characters.\n */\nexport function lineSegmentForMatch(\n    lineContent: string, range: TextUtils.TextRange.SourceRange,\n    optionsArg: Partial<typeof DEFAULT_OPTS> =\n        DEFAULT_OPTS): {lineSegment: string, matchRange: TextUtils.TextRange.SourceRange} {\n  const options = {...DEFAULT_OPTS, ...optionsArg};\n\n  // Remove the whitespace at the beginning, but stop where the match starts.\n  const attemptedTrimmedLine = lineContent.trimStart();\n  const potentiallyRemovedWhitespaceLength = lineContent.length - attemptedTrimmedLine.length;\n  const actuallyRemovedWhitespaceLength = Math.min(range.offset, potentiallyRemovedWhitespaceLength);\n\n  // Apply {options.prefixLength} and {options.maxLength}.\n  const lineSegmentBegin = Math.max(actuallyRemovedWhitespaceLength, range.offset - options.prefixLength);\n  const lineSegmentEnd = Math.min(lineContent.length, lineSegmentBegin + options.maxLength);\n  const lineSegmentPrefix = lineSegmentBegin > actuallyRemovedWhitespaceLength ? '\u2026' : '';\n\n  // Build the resulting line segment and match range.\n  const lineSegment = lineSegmentPrefix + lineContent.substring(lineSegmentBegin, lineSegmentEnd);\n  const rangeOffset = range.offset - lineSegmentBegin + lineSegmentPrefix.length;\n  const rangeLength = Math.min(range.length, lineSegment.length - rangeOffset);\n  const matchRange = new TextUtils.TextRange.SourceRange(rangeOffset, rangeLength);\n\n  return {lineSegment, matchRange};\n}\n\n/**\n * Takes a line and multiple match ranges and trims/cuts the line accordingly.\n * The match ranges are then adjusted to reflect the transformation.\n *\n * Ideally prefer `lineSegmentForMatch`, it can center the line on the match\n * whereas this method risks cutting matches out of the string.\n */\nfunction lineSegmentForMultipleMatches(lineContent: string, ranges: TextUtils.TextRange.SourceRange[]):\n    {lineSegment: string, matchRanges: TextUtils.TextRange.SourceRange[]} {\n  let trimBy = 0;\n  let matchRanges = ranges;\n  if (matchRanges.length > 0 && matchRanges[0].offset > 20) {\n    trimBy = 15;\n  }\n  let lineSegment = lineContent.substring(trimBy, 1000 + trimBy);\n  if (trimBy) {\n    matchRanges =\n        matchRanges.map(range => new TextUtils.TextRange.SourceRange(range.offset - trimBy + 1, range.length));\n    lineSegment = '\u2026' + lineSegment;\n  }\n  return {lineSegment, matchRanges};\n}\n"],
  "mappings": "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",
  "names": ["span"]
}
