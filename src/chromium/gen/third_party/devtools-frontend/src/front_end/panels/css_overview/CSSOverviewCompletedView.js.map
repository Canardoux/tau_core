{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/css_overview/CSSOverviewCompletedView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport cssOverviewCompletedViewStyles from './cssOverviewCompletedView.css.js';\nimport {\n  Events as CSSOverViewControllerEvents,\n  type OverviewController,\n  type PopulateNodesEvent,\n  type PopulateNodesEventNodes,\n  type PopulateNodesEventNodeTypes,\n} from './CSSOverviewController.js';\nimport {CSSOverviewSidebarPanel, type ItemSelectedEvent, SidebarEvents} from './CSSOverviewSidebarPanel.js';\nimport type {UnusedDeclaration} from './CSSOverviewUnusedDeclarations.js';\n\nconst UIStrings = {\n  /**\n   *@description Label for the summary in the CSS overview report\n   */\n  overviewSummary: 'Overview summary',\n  /**\n   *@description Title of colors subsection in the CSS overview panel\n   */\n  colors: 'Colors',\n  /**\n   *@description Title of font info subsection in the CSS overview panel\n   */\n  fontInfo: 'Font info',\n  /**\n   *@description Label to denote unused declarations in the target page\n   */\n  unusedDeclarations: 'Unused declarations',\n  /**\n   *@description Label for the number of media queries in the CSS overview report\n   */\n  mediaQueries: 'Media queries',\n  /**\n   *@description Title of the Elements Panel\n   */\n  elements: 'Elements',\n  /**\n   *@description Label for the number of External stylesheets in the CSS overview report\n   */\n  externalStylesheets: 'External stylesheets',\n  /**\n   *@description Label for the number of inline style elements in the CSS overview report\n   */\n  inlineStyleElements: 'Inline style elements',\n  /**\n   *@description Label for the number of style rules in CSS overview report\n   */\n  styleRules: 'Style rules',\n  /**\n   *@description Label for the number of type selectors in the CSS overview report\n   */\n  typeSelectors: 'Type selectors',\n  /**\n   *@description Label for the number of ID selectors in the CSS overview report\n   */\n  idSelectors: 'ID selectors',\n  /**\n   *@description Label for the number of class selectors in the CSS overview report\n   */\n  classSelectors: 'Class selectors',\n  /**\n   *@description Label for the number of universal selectors in the CSS overview report\n   */\n  universalSelectors: 'Universal selectors',\n  /**\n   *@description Label for the number of Attribute selectors in the CSS overview report\n   */\n  attributeSelectors: 'Attribute selectors',\n  /**\n   *@description Label for the number of non-simple selectors in the CSS overview report\n   */\n  nonsimpleSelectors: 'Non-simple selectors',\n  /**\n   *@description Label for unique background colors in the CSS overview panel\n   *@example {32} PH1\n   */\n  backgroundColorsS: 'Background colors: {PH1}',\n  /**\n   *@description Label for unique text colors in the CSS overview panel\n   *@example {32} PH1\n   */\n  textColorsS: 'Text colors: {PH1}',\n  /**\n   *@description Label for unique fill colors in the CSS overview panel\n   *@example {32} PH1\n   */\n  fillColorsS: 'Fill colors: {PH1}',\n  /**\n   *@description Label for unique border colors in the CSS overview panel\n   *@example {32} PH1\n   */\n  borderColorsS: 'Border colors: {PH1}',\n  /**\n   *@description Label to indicate that there are no fonts in use\n   */\n  thereAreNoFonts: 'There are no fonts.',\n  /**\n   *@description Message to show when no unused declarations in the target page\n   */\n  thereAreNoUnusedDeclarations: 'There are no unused declarations.',\n  /**\n   *@description Message to show when no media queries are found in the target page\n   */\n  thereAreNoMediaQueries: 'There are no media queries.',\n  /**\n   *@description Title of the Drawer for contrast issues in the CSS overview panel\n   */\n  contrastIssues: 'Contrast issues',\n  /**\n   * @description Text to indicate how many times this CSS rule showed up.\n   */\n  nOccurrences: '{n, plural, =1 {# occurrence} other {# occurrences}}',\n  /**\n   *@description Section header for contrast issues in the CSS overview panel\n   *@example {1} PH1\n   */\n  contrastIssuesS: 'Contrast issues: {PH1}',\n  /**\n   *@description Title of the button for a contrast issue in the CSS overview panel\n   *@example {#333333} PH1\n   *@example {#333333} PH2\n   *@example {2} PH3\n   */\n  textColorSOverSBackgroundResults: 'Text color {PH1} over {PH2} background results in low contrast for {PH3} elements',\n  /**\n   *@description Label aa text content in Contrast Details of the Color Picker\n   */\n  aa: 'AA',\n  /**\n   *@description Label aaa text content in Contrast Details of the Color Picker\n   */\n  aaa: 'AAA',\n  /**\n   *@description Label for the APCA contrast in Color Picker\n   */\n  apca: 'APCA',\n  /**\n   *@description Label for the column in the element list in the CSS overview report\n   */\n  element: 'Element',\n  /**\n   *@description Column header title denoting which declaration is unused\n   */\n  declaration: 'Declaration',\n  /**\n   *@description Text for the source of something\n   */\n  source: 'Source',\n  /**\n   *@description Text of a DOM element in Contrast Details of the Color Picker\n   */\n  contrastRatio: 'Contrast ratio',\n  /**\n   *@description Accessible title of a table in the CSS overview elements.\n   */\n  cssOverviewElements: 'CSS overview elements',\n  /**\n   *@description Title of the button to show the element in the CSS overview panel\n   */\n  showElement: 'Show element',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/css_overview/CSSOverviewCompletedView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type NodeStyleStats = Map<string, Set<number>>;\n\nexport interface ContrastIssue {\n  nodeId: Protocol.DOM.BackendNodeId;\n  contrastRatio: number;\n  textColor: Common.Color.Color;\n  backgroundColor: Common.Color.Color;\n  thresholdsViolated: {\n    aa: boolean,\n    aaa: boolean,\n    apca: boolean,\n  };\n}\nexport interface OverviewData {\n  backgroundColors: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  textColors: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  textColorContrastIssues: Map<string, ContrastIssue[]>;\n  fillColors: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  borderColors: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  globalStyleStats: {\n    styleRules: number,\n    inlineStyles: number,\n    externalSheets: number,\n    stats: {type: number, class: number, id: number, universal: number, attribute: number, nonSimple: number},\n  };\n  fontInfo: Map<string, Map<string, Map<string, Protocol.DOM.BackendNodeId[]>>>;\n  elementCount: number;\n  mediaQueries: Map<string, Protocol.CSS.CSSMedia[]>;\n  unusedDeclarations: Map<string, UnusedDeclaration[]>;\n}\n\nexport type FontInfo = Map<string, Map<string, Map<string, number[]>>>;\n\nfunction getBorderString(color: Common.Color.Legacy): string {\n  let {h, s, l} = color.as(Common.Color.Format.HSL);\n  h = Math.round(h * 360);\n  s = Math.round(s * 100);\n  l = Math.round(l * 100);\n\n  // Reduce the lightness of the border to make sure that there's always a visible outline.\n  l = Math.max(0, l - 15);\n\n  return `1px solid hsl(${h}deg ${s}% ${l}%)`;\n}\n\nexport class CSSOverviewCompletedView extends UI.Widget.VBox {\n  readonly #splitWidget: UI.SplitWidget.SplitWidget;\n  #controller: OverviewController;\n  #formatter: Intl.NumberFormat;\n  readonly #mainContainer: UI.SplitWidget.SplitWidget;\n  readonly #resultsContainer: UI.Widget.VBox;\n  readonly #elementContainer: DetailsView;\n  readonly #sideBar: CSSOverviewSidebarPanel;\n  #cssModel?: SDK.CSSModel.CSSModel;\n  #domModel?: SDK.DOMModel.DOMModel;\n  #linkifier: Components.Linkifier.Linkifier;\n  #viewMap: Map<string, ElementDetailsView>;\n  #data: OverviewData|null;\n  #fragment?: UI.Fragment.Fragment;\n\n  constructor(controller: OverviewController) {\n    super();\n\n    this.#controller = controller;\n    this.#formatter = new Intl.NumberFormat('en-US');\n\n    this.#splitWidget = new UI.SplitWidget.SplitWidget(true, false, undefined, 200);\n    this.#splitWidget.show(this.element);\n\n    this.#mainContainer = new UI.SplitWidget.SplitWidget(true, true);\n    this.#resultsContainer = new UI.Widget.VBox();\n    this.#elementContainer = new DetailsView();\n\n    // If closing the last tab, collapse the sidebar.\n    this.#elementContainer.addEventListener(Events.TAB_CLOSED, evt => {\n      if (evt.data === 0) {\n        this.#mainContainer.setSidebarMinimized(true);\n      }\n    });\n\n    // Dupe the styles into the main container because of the shadow root will prevent outer styles.\n\n    this.#mainContainer.setMainWidget(this.#resultsContainer);\n    this.#mainContainer.setSidebarWidget(this.#elementContainer);\n    this.#mainContainer.setVertical(false);\n    this.#mainContainer.setSecondIsSidebar(true);\n    this.#mainContainer.setSidebarMinimized(true);\n\n    this.#sideBar = new CSSOverviewSidebarPanel();\n    this.#sideBar.setMinimumSize(100, 25);\n    this.#splitWidget.setSidebarWidget(this.#sideBar);\n    this.#splitWidget.setMainWidget(this.#mainContainer);\n\n    this.#linkifier = new Components.Linkifier.Linkifier(/* maxLinkLength */ 20, /* useLinkDecorator */ true);\n\n    this.#viewMap = new Map();\n\n    this.#sideBar.addItem(i18nString(UIStrings.overviewSummary), 'summary');\n    this.#sideBar.addItem(i18nString(UIStrings.colors), 'colors');\n    this.#sideBar.addItem(i18nString(UIStrings.fontInfo), 'font-info');\n    this.#sideBar.addItem(i18nString(UIStrings.unusedDeclarations), 'unused-declarations');\n    this.#sideBar.addItem(i18nString(UIStrings.mediaQueries), 'media-queries');\n    this.#sideBar.select('summary', false);\n\n    this.#sideBar.addEventListener(SidebarEvents.ITEM_SELECTED, this.#sideBarItemSelected, this);\n    this.#sideBar.addEventListener(SidebarEvents.RESET, this.#sideBarReset, this);\n    this.#controller.addEventListener(CSSOverViewControllerEvents.RESET, this.#reset, this);\n    this.#controller.addEventListener(CSSOverViewControllerEvents.POPULATE_NODES, this.#createElementsView, this);\n    this.#resultsContainer.element.addEventListener('click', this.#onClick.bind(this));\n\n    this.#data = null;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.#mainContainer.registerCSSFiles([cssOverviewCompletedViewStyles]);\n    this.registerCSSFiles([cssOverviewCompletedViewStyles]);\n\n    // TODO(paullewis): update the links in the panels in case source has been .\n  }\n\n  initializeModels(target: SDK.Target.Target): void {\n    const cssModel = target.model(SDK.CSSModel.CSSModel);\n    const domModel = target.model(SDK.DOMModel.DOMModel);\n    if (!cssModel || !domModel) {\n      throw new Error('Target must provide CSS and DOM models');\n    }\n    this.#cssModel = cssModel;\n    this.#domModel = domModel;\n  }\n\n  #sideBarItemSelected(event: Common.EventTarget.EventTargetEvent<ItemSelectedEvent>): void {\n    const {data} = event;\n    const section = (this.#fragment as UI.Fragment.Fragment).$(data.id);\n    if (!section) {\n      return;\n    }\n\n    section.scrollIntoView();\n    // Set focus for keyboard invoked event\n    if (!data.isMouseEvent && data.key === 'Enter') {\n      const focusableElement: HTMLElement|null = section.querySelector('button, [tabindex=\"0\"]');\n      focusableElement?.focus();\n    }\n  }\n\n  #sideBarReset(): void {\n    this.#controller.dispatchEventToListeners(CSSOverViewControllerEvents.RESET);\n  }\n\n  #reset(): void {\n    this.#resultsContainer.element.removeChildren();\n    this.#mainContainer.setSidebarMinimized(true);\n    this.#elementContainer.closeTabs();\n    this.#viewMap = new Map();\n    CSSOverviewCompletedView.pushedNodes.clear();\n    this.#sideBar.select('summary', false);\n  }\n\n  #onClick(evt: Event): void {\n    if (!evt.target) {\n      return;\n    }\n    const target = (evt.target as HTMLElement);\n    const dataset = target.dataset;\n\n    const type = dataset.type;\n    if (!type || !this.#data) {\n      return;\n    }\n\n    let payload: PopulateNodesEvent;\n    switch (type) {\n      case 'contrast': {\n        const section = dataset.section;\n        const key = dataset.key;\n\n        if (!key) {\n          return;\n        }\n\n        // Remap the Set to an object that is the same shape as the unused declarations.\n        const nodes = this.#data.textColorContrastIssues.get(key) || [];\n        payload = {type, key, nodes, section};\n        break;\n      }\n      case 'color': {\n        const color = dataset.color;\n        const section = dataset.section;\n        if (!color) {\n          return;\n        }\n\n        let nodes;\n        switch (section) {\n          case 'text':\n            nodes = this.#data.textColors.get(color);\n            break;\n\n          case 'background':\n            nodes = this.#data.backgroundColors.get(color);\n            break;\n\n          case 'fill':\n            nodes = this.#data.fillColors.get(color);\n            break;\n\n          case 'border':\n            nodes = this.#data.borderColors.get(color);\n            break;\n        }\n\n        if (!nodes) {\n          return;\n        }\n\n        // Remap the Set to an object that is the same shape as the unused declarations.\n        nodes = Array.from(nodes).map(nodeId => ({nodeId}));\n        payload = {type, color, nodes, section};\n        break;\n      }\n\n      case 'unused-declarations': {\n        const declaration = dataset.declaration;\n        if (!declaration) {\n          return;\n        }\n        const nodes = this.#data.unusedDeclarations.get(declaration);\n        if (!nodes) {\n          return;\n        }\n\n        payload = {type, declaration, nodes};\n        break;\n      }\n\n      case 'media-queries': {\n        const text = dataset.text;\n        if (!text) {\n          return;\n        }\n        const nodes = this.#data.mediaQueries.get(text);\n        if (!nodes) {\n          return;\n        }\n\n        payload = {type, text, nodes};\n        break;\n      }\n\n      case 'font-info': {\n        const value = dataset.value;\n        if (!dataset.path) {\n          return;\n        }\n\n        const [fontFamily, fontMetric] = dataset.path.split('/');\n        if (!value) {\n          return;\n        }\n\n        const fontFamilyInfo = this.#data.fontInfo.get(fontFamily);\n        if (!fontFamilyInfo) {\n          return;\n        }\n\n        const fontMetricInfo = fontFamilyInfo.get(fontMetric);\n        if (!fontMetricInfo) {\n          return;\n        }\n\n        const nodesIds = fontMetricInfo.get(value);\n        if (!nodesIds) {\n          return;\n        }\n\n        const nodes = nodesIds.map(nodeId => ({nodeId}));\n        const name = `${value} (${fontFamily}, ${fontMetric})`;\n        payload = {type, name, nodes};\n        break;\n      }\n\n      default:\n        return;\n    }\n\n    evt.consume();\n    this.#controller.dispatchEventToListeners(CSSOverViewControllerEvents.POPULATE_NODES, {payload});\n    this.#mainContainer.setSidebarMinimized(false);\n  }\n\n  async #render(data: OverviewData): Promise<void> {\n    if (!data || !('backgroundColors' in data) || !('textColors' in data)) {\n      return;\n    }\n\n    this.#data = data;\n    const {\n      elementCount,\n      backgroundColors,\n      textColors,\n      textColorContrastIssues,\n      fillColors,\n      borderColors,\n      globalStyleStats,\n      mediaQueries,\n      unusedDeclarations,\n      fontInfo,\n    } = this.#data;\n\n    // Convert rgb values from the computed styles to either undefined or HEX(A) strings.\n    const sortedBackgroundColors = this.#sortColorsByLuminance(backgroundColors);\n    const sortedTextColors = this.#sortColorsByLuminance(textColors);\n    const sortedFillColors = this.#sortColorsByLuminance(fillColors);\n    const sortedBorderColors = this.#sortColorsByLuminance(borderColors);\n\n    this.#fragment = UI.Fragment.Fragment.build`\n    <div class=\"vbox overview-completed-view\">\n      <div $=\"summary\" class=\"results-section horizontally-padded summary\">\n        <h1>${i18nString(UIStrings.overviewSummary)}</h1>\n\n        <ul>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.elements)}</div>\n            <div class=\"value\">${this.#formatter.format(elementCount)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.externalStylesheets)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.externalSheets)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.inlineStyleElements)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.inlineStyles)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.styleRules)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.styleRules)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.mediaQueries)}</div>\n            <div class=\"value\">${this.#formatter.format(mediaQueries.size)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.typeSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.type)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.idSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.id)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.classSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.class)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.universalSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.universal)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.attributeSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.attribute)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.nonsimpleSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.nonSimple)}</div>\n          </li>\n        </ul>\n      </div>\n\n      <div $=\"colors\" class=\"results-section horizontally-padded colors\">\n        <h1>${i18nString(UIStrings.colors)}</h1>\n        <h2>${i18nString(UIStrings.backgroundColorsS, {\n      PH1: sortedBackgroundColors.length,\n    })}</h2>\n        <ul>\n          ${sortedBackgroundColors.map(this.#colorsToFragment.bind(this, 'background'))}\n        </ul>\n\n        <h2>${i18nString(UIStrings.textColorsS, {\n      PH1: sortedTextColors.length,\n    })}</h2>\n        <ul>\n          ${sortedTextColors.map(this.#colorsToFragment.bind(this, 'text'))}\n        </ul>\n\n        ${textColorContrastIssues.size > 0 ? this.#contrastIssuesToFragment(textColorContrastIssues) : ''}\n\n        <h2>${i18nString(UIStrings.fillColorsS, {\n      PH1: sortedFillColors.length,\n    })}</h2>\n        <ul>\n          ${sortedFillColors.map(this.#colorsToFragment.bind(this, 'fill'))}\n        </ul>\n\n        <h2>${i18nString(UIStrings.borderColorsS, {\n      PH1: sortedBorderColors.length,\n    })}</h2>\n        <ul>\n          ${sortedBorderColors.map(this.#colorsToFragment.bind(this, 'border'))}\n        </ul>\n      </div>\n\n      <div $=\"font-info\" class=\"results-section font-info\">\n        <h1>${i18nString(UIStrings.fontInfo)}</h1>\n        ${\n        fontInfo.size > 0 ? this.#fontInfoToFragment(fontInfo) :\n                            UI.Fragment.Fragment.build`<div>${i18nString(UIStrings.thereAreNoFonts)}</div>`}\n      </div>\n\n      <div $=\"unused-declarations\" class=\"results-section unused-declarations\">\n        <h1>${i18nString(UIStrings.unusedDeclarations)}</h1>\n        ${\n        unusedDeclarations.size > 0 ? this.#groupToFragment(unusedDeclarations, 'unused-declarations', 'declaration') :\n                                      UI.Fragment.Fragment.build`<div class=\"horizontally-padded\">${\n                                          i18nString(UIStrings.thereAreNoUnusedDeclarations)}</div>`}\n      </div>\n\n      <div $=\"media-queries\" class=\"results-section media-queries\">\n        <h1>${i18nString(UIStrings.mediaQueries)}</h1>\n        ${\n        mediaQueries.size > 0 ? this.#groupToFragment(mediaQueries, 'media-queries', 'text') :\n                                UI.Fragment.Fragment.build`<div class=\"horizontally-padded\">${\n                                    i18nString(UIStrings.thereAreNoMediaQueries)}</div>`}\n      </div>\n    </div>`;\n\n    this.#resultsContainer.element.appendChild(this.#fragment.element());\n  }\n\n  #createElementsView(evt: Common.EventTarget.EventTargetEvent<{payload: PopulateNodesEvent}>): void {\n    const {payload} = evt.data;\n\n    let id = '';\n    let tabTitle = '';\n\n    switch (payload.type) {\n      case 'contrast': {\n        const {section, key} = payload;\n        id = `${section}-${key}`;\n        tabTitle = i18nString(UIStrings.contrastIssues);\n        break;\n      }\n\n      case 'color': {\n        const {section, color} = payload;\n        id = `${section}-${color}`;\n        tabTitle = `${color.toUpperCase()} (${section})`;\n        break;\n      }\n\n      case 'unused-declarations': {\n        const {declaration} = payload;\n        id = `${declaration}`;\n        tabTitle = `${declaration}`;\n        break;\n      }\n\n      case 'media-queries': {\n        const {text} = payload;\n        id = `${text}`;\n        tabTitle = `${text}`;\n        break;\n      }\n\n      case 'font-info': {\n        const {name} = payload;\n        id = `${name}`;\n        tabTitle = `${name}`;\n        break;\n      }\n    }\n\n    let view = this.#viewMap.get(id);\n    if (!view) {\n      if (!this.#domModel || !this.#cssModel) {\n        throw new Error('Unable to initialize CSS overview, missing models');\n      }\n      view = new ElementDetailsView(this.#controller, this.#domModel, this.#cssModel, this.#linkifier);\n      void view.populateNodes(payload.nodes);\n      this.#viewMap.set(id, view);\n    }\n\n    this.#elementContainer.appendTab(id, tabTitle, view, payload.type);\n  }\n\n  #fontInfoToFragment(fontInfo: Map<string, Map<string, Map<string, number[]>>>): UI.Fragment.Fragment {\n    const fonts = Array.from(fontInfo.entries());\n    return UI.Fragment.Fragment.build`\n  ${fonts.map(([font, fontMetrics]) => {\n      return UI.Fragment.Fragment.build`<section class=\"font-family\"><h2>${font}</h2> ${\n          this.#fontMetricsToFragment(font, fontMetrics)}</section>`;\n    })}\n  `;\n  }\n\n  #fontMetricsToFragment(font: string, fontMetrics: Map<string, Map<string, number[]>>): UI.Fragment.Fragment {\n    const fontMetricInfo = Array.from(fontMetrics.entries());\n\n    return UI.Fragment.Fragment.build`\n  <div class=\"font-metric\">\n  ${fontMetricInfo.map(([label, values]) => {\n      const sanitizedPath = `${font}/${label}`;\n      return UI.Fragment.Fragment.build`\n  <div>\n  <h3>${label}</h3>\n  ${this.#groupToFragment(values, 'font-info', 'value', sanitizedPath)}\n  </div>`;\n    })}\n  </div>`;\n  }\n\n  #groupToFragment(\n      items: Map<string, (number | UnusedDeclaration | Protocol.CSS.CSSMedia)[]>, type: string, dataLabel: string,\n      path: string = ''): UI.Fragment.Fragment {\n    // Sort by number of items descending.\n    const values = Array.from(items.entries()).sort((d1, d2) => {\n      const v1Nodes = d1[1];\n      const v2Nodes = d2[1];\n      return v2Nodes.length - v1Nodes.length;\n    });\n\n    const total = values.reduce((prev, curr) => prev + curr[1].length, 0);\n\n    return UI.Fragment.Fragment.build`<ul>\n    ${values.map(([title, nodes]) => {\n      const width = 100 * nodes.length / total;\n      const itemLabel = i18nString(UIStrings.nOccurrences, {n: nodes.length});\n\n      return UI.Fragment.Fragment.build`<li>\n        <div class=\"title\">${title}</div>\n        <button data-type=\"${type}\" data-path=\"${path}\" data-${dataLabel}=\"${title}\"\n        jslog=\"${VisualLogging.action().track({click: true}).context(`css-overview.${type}`)}\">\n          <div class=\"details\">${itemLabel}</div>\n          <div class=\"bar-container\">\n            <div class=\"bar\" style=\"width: ${width}%;\"></div>\n          </div>\n        </button>\n      </li>`;\n    })}\n    </ul>`;\n  }\n\n  #contrastIssuesToFragment(issues: Map<string, ContrastIssue[]>): UI.Fragment.Fragment {\n    return UI.Fragment.Fragment.build`\n  <h2>${i18nString(UIStrings.contrastIssuesS, {\n      PH1: issues.size,\n    })}</h2>\n  <ul>\n  ${[...issues.entries()].map(([key, value]) => this.#contrastIssueToFragment(key, value))}\n  </ul>\n  `;\n  }\n\n  #contrastIssueToFragment(key: string, issues: ContrastIssue[]): UI.Fragment.Fragment {\n    console.assert(issues.length > 0);\n\n    let minContrastIssue: ContrastIssue = issues[0];\n    for (const issue of issues) {\n      // APCA contrast can be a negative value that is to be displayed. But the\n      // absolute value is used to compare against the threshold. Therefore, the min\n      // absolute value is the worst contrast.\n      if (Math.abs(issue.contrastRatio) < Math.abs(minContrastIssue.contrastRatio)) {\n        minContrastIssue = issue;\n      }\n    }\n\n    const color = (minContrastIssue.textColor.asString(Common.Color.Format.HEXA) as string);\n    const backgroundColor = (minContrastIssue.backgroundColor.asString(Common.Color.Format.HEXA) as string);\n\n    const showAPCA = Root.Runtime.experiments.isEnabled('apca');\n\n    const title = i18nString(UIStrings.textColorSOverSBackgroundResults, {\n      PH1: color,\n      PH2: backgroundColor,\n      PH3: issues.length,\n    });\n\n    const blockFragment = UI.Fragment.Fragment.build`<li>\n      <button\n        title=\"${title}\" aria-label=\"${title}\"\n        data-type=\"contrast\" data-key=\"${key}\" data-section=\"contrast\" class=\"block\" $=\"color\"\n        jslog=\"${VisualLogging.action('css-overview.contrast').track({\n      click: true,\n    })}\">\n        Text\n      </button>\n      <div class=\"block-title\">\n        <div class=\"contrast-warning hidden\" $=\"aa\"><span class=\"threshold-label\">${\n        i18nString(UIStrings.aa)}</span></div>\n        <div class=\"contrast-warning hidden\" $=\"aaa\"><span class=\"threshold-label\">${\n        i18nString(UIStrings.aaa)}</span></div>\n        <div class=\"contrast-warning hidden\" $=\"apca\"><span class=\"threshold-label\">${\n        i18nString(UIStrings.apca)}</span></div>\n      </div>\n    </li>`;\n\n    if (showAPCA) {\n      const apca = (blockFragment.$('apca') as HTMLElement);\n      if (minContrastIssue.thresholdsViolated.apca) {\n        apca.appendChild(createClearIcon());\n      } else {\n        apca.appendChild(createCheckIcon());\n      }\n      apca.classList.remove('hidden');\n    } else {\n      const aa = (blockFragment.$('aa') as HTMLElement);\n      if (minContrastIssue.thresholdsViolated.aa) {\n        aa.appendChild(createClearIcon());\n      } else {\n        aa.appendChild(createCheckIcon());\n      }\n      const aaa = (blockFragment.$('aaa') as HTMLElement);\n      if (minContrastIssue.thresholdsViolated.aaa) {\n        aaa.appendChild(createClearIcon());\n      } else {\n        aaa.appendChild(createCheckIcon());\n      }\n      aa.classList.remove('hidden');\n      aaa.classList.remove('hidden');\n    }\n\n    const block = (blockFragment.$('color') as HTMLElement);\n    block.style.backgroundColor = backgroundColor;\n    block.style.color = color;\n    block.style.border = getBorderString(minContrastIssue.backgroundColor.asLegacyColor());\n\n    return blockFragment;\n  }\n\n  #colorsToFragment(section: string, color: string): UI.Fragment.Fragment|undefined {\n    const blockFragment = UI.Fragment.Fragment.build`<li>\n      <button title=${color} data-type=\"color\" data-color=\"${color}\"\n        data-section=\"${section}\" class=\"block\" $=\"color\"\n        jslog=\"${VisualLogging.action('css-overview.color').track({\n      click: true,\n    })}\"></button>\n      <div class=\"block-title color-text\">${color}</div>\n    </li>`;\n\n    const block = (blockFragment.$('color') as HTMLElement);\n    block.style.backgroundColor = color;\n\n    const borderColor = Common.Color.parse(color)?.asLegacyColor();\n    if (!borderColor) {\n      return;\n    }\n    block.style.border = getBorderString(borderColor);\n\n    return blockFragment;\n  }\n\n  #sortColorsByLuminance(srcColors: Map<string, Set<number>>): string[] {\n    return Array.from(srcColors.keys()).sort((colA, colB) => {\n      const colorA = Common.Color.parse(colA)?.asLegacyColor();\n      const colorB = Common.Color.parse(colB)?.asLegacyColor();\n      if (!colorA || !colorB) {\n        return 0;\n      }\n      return Common.ColorUtils.luminance(colorB.rgba()) - Common.ColorUtils.luminance(colorA.rgba());\n    });\n  }\n\n  setOverviewData(data: OverviewData): void {\n    void this.#render(data);\n  }\n\n  static readonly pushedNodes = new Set<Protocol.DOM.BackendNodeId>();\n}\nexport class DetailsView extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  #tabbedPane: UI.TabbedPane.TabbedPane;\n  constructor() {\n    super();\n\n    this.#tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.#tabbedPane.show(this.element);\n    this.#tabbedPane.addEventListener(UI.TabbedPane.Events.TabClosed, () => {\n      this.dispatchEventToListeners(Events.TAB_CLOSED, this.#tabbedPane.tabIds().length);\n    });\n  }\n\n  appendTab(id: string, tabTitle: string, view: UI.Widget.Widget, jslogContext?: string): void {\n    if (!this.#tabbedPane.hasTab(id)) {\n      this.#tabbedPane.appendTab(\n          id, tabTitle, view, undefined, undefined, /* isCloseable */ true, undefined, undefined, jslogContext);\n    }\n\n    this.#tabbedPane.selectTab(id);\n  }\n\n  closeTabs(): void {\n    this.#tabbedPane.closeTabs(this.#tabbedPane.tabIds());\n  }\n}\n\nexport const enum Events {\n  TAB_CLOSED = 'TabClosed',\n}\n\nexport type EventTypes = {\n  [Events.TAB_CLOSED]: number,\n};\n\nexport class ElementDetailsView extends UI.Widget.Widget {\n  readonly #controller: OverviewController;\n  #domModel: SDK.DOMModel.DOMModel;\n  readonly #cssModel: SDK.CSSModel.CSSModel;\n  readonly #linkifier: Components.Linkifier.Linkifier;\n  readonly #elementGridColumns: DataGrid.DataGrid.ColumnDescriptor[];\n  #elementGrid: DataGrid.SortableDataGrid.SortableDataGrid<unknown>;\n\n  constructor(\n      controller: OverviewController, domModel: SDK.DOMModel.DOMModel, cssModel: SDK.CSSModel.CSSModel,\n      linkifier: Components.Linkifier.Linkifier) {\n    super();\n\n    this.#controller = controller;\n    this.#domModel = domModel;\n    this.#cssModel = cssModel;\n    this.#linkifier = linkifier;\n\n    this.#elementGridColumns = [\n      {\n        id: 'node-id',\n        title: i18nString(UIStrings.element),\n        sortable: true,\n        weight: 50,\n        titleDOMFragment: undefined,\n        sort: undefined,\n        align: undefined,\n        width: undefined,\n        fixedWidth: undefined,\n        editable: undefined,\n        nonSelectable: undefined,\n        longText: undefined,\n        disclosure: undefined,\n        allowInSortByEvenWhenHidden: undefined,\n        dataType: undefined,\n        defaultWeight: undefined,\n      },\n      {\n        id: 'declaration',\n        title: i18nString(UIStrings.declaration),\n        sortable: true,\n        weight: 50,\n        titleDOMFragment: undefined,\n        sort: undefined,\n        align: undefined,\n        width: undefined,\n        fixedWidth: undefined,\n        editable: undefined,\n        nonSelectable: undefined,\n        longText: undefined,\n        disclosure: undefined,\n        allowInSortByEvenWhenHidden: undefined,\n        dataType: undefined,\n        defaultWeight: undefined,\n      },\n      {\n        id: 'source-url',\n        title: i18nString(UIStrings.source),\n        sortable: false,\n        weight: 100,\n        titleDOMFragment: undefined,\n        sort: undefined,\n        align: undefined,\n        width: undefined,\n        fixedWidth: undefined,\n        editable: undefined,\n        nonSelectable: undefined,\n        longText: undefined,\n        disclosure: undefined,\n        allowInSortByEvenWhenHidden: undefined,\n        dataType: undefined,\n        defaultWeight: undefined,\n      },\n      {\n        id: 'contrast-ratio',\n        title: i18nString(UIStrings.contrastRatio),\n        sortable: true,\n        weight: 25,\n        titleDOMFragment: undefined,\n        sort: undefined,\n        align: undefined,\n        width: '150px',\n        fixedWidth: true,\n        editable: undefined,\n        nonSelectable: undefined,\n        longText: undefined,\n        disclosure: undefined,\n        allowInSortByEvenWhenHidden: undefined,\n        dataType: undefined,\n        defaultWeight: undefined,\n      },\n    ];\n\n    this.#elementGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n      displayName: i18nString(UIStrings.cssOverviewElements),\n      columns: this.#elementGridColumns,\n      editCallback: undefined,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n    this.#elementGrid.element.classList.add('element-grid');\n    this.#elementGrid.element.addEventListener('mouseover', this.#onMouseOver.bind(this));\n    this.#elementGrid.setStriped(true);\n    this.#elementGrid.addEventListener(\n        DataGrid.DataGrid.Events.SORTING_CHANGED, this.#sortMediaQueryDataGrid.bind(this));\n\n    this.#elementGrid.asWidget().show(this.element);\n  }\n\n  #sortMediaQueryDataGrid(): void {\n    const sortColumnId = this.#elementGrid.sortColumnId();\n    if (!sortColumnId) {\n      return;\n    }\n\n    const comparator = DataGrid.SortableDataGrid.SortableDataGrid.StringComparator.bind(null, sortColumnId);\n    this.#elementGrid.sortNodes(comparator, !this.#elementGrid.isSortOrderAscending());\n  }\n\n  #onMouseOver(evt: Event): void {\n    // Traverse the event path on the grid to find the nearest element with a backend node ID attached. Use\n    // that for the highlighting.\n    const node = (evt.composedPath() as HTMLElement[]).find(el => el.dataset && el.dataset.backendNodeId);\n    if (!node) {\n      return;\n    }\n\n    const backendNodeId = Number(node.dataset.backendNodeId);\n    this.#controller.dispatchEventToListeners(CSSOverViewControllerEvents.REQUEST_NODE_HIGHLIGHT, backendNodeId);\n  }\n\n  async populateNodes(data: PopulateNodesEventNodes): Promise<void> {\n    this.#elementGrid.rootNode().removeChildren();\n\n    if (!data.length) {\n      return;\n    }\n\n    const [firstItem] = data;\n    const visibility = new Set<string>();\n    'nodeId' in firstItem && firstItem.nodeId && visibility.add('node-id');\n    'declaration' in firstItem && firstItem.declaration && visibility.add('declaration');\n    'sourceURL' in firstItem && firstItem.sourceURL && visibility.add('source-url');\n    'contrastRatio' in firstItem && firstItem.contrastRatio && visibility.add('contrast-ratio');\n\n    let relatedNodesMap: Map<Protocol.DOM.BackendNodeId, SDK.DOMModel.DOMNode|null>|null|undefined;\n    if ('nodeId' in firstItem && visibility.has('node-id')) {\n      // Grab the nodes from the frontend, but only those that have not been\n      // retrieved already.\n      const nodeIds = (data as {nodeId: Protocol.DOM.BackendNodeId}[]).reduce((prev, curr) => {\n        const nodeId = curr.nodeId;\n        if (CSSOverviewCompletedView.pushedNodes.has(nodeId)) {\n          return prev;\n        }\n        CSSOverviewCompletedView.pushedNodes.add(nodeId);\n        return prev.add(nodeId);\n      }, new Set<Protocol.DOM.BackendNodeId>());\n      relatedNodesMap = await this.#domModel.pushNodesByBackendIdsToFrontend(nodeIds);\n    }\n\n    for (const item of data) {\n      let frontendNode;\n      if ('nodeId' in item && visibility.has('node-id')) {\n        if (!relatedNodesMap) {\n          continue;\n        }\n        frontendNode = relatedNodesMap.get(item.nodeId);\n        if (!frontendNode) {\n          continue;\n        }\n      }\n\n      const node = new ElementNode(item, frontendNode, this.#linkifier, this.#cssModel);\n      node.selectable = false;\n      this.#elementGrid.insertChild(node);\n    }\n\n    this.#elementGrid.setColumnsVisibility(visibility);\n    this.#elementGrid.renderInline();\n    this.#elementGrid.wasShown();\n  }\n}\n\nexport class ElementNode extends DataGrid.SortableDataGrid.SortableDataGridNode<ElementNode> {\n  readonly #linkifier: Components.Linkifier.Linkifier;\n  readonly #cssModel: SDK.CSSModel.CSSModel;\n  readonly #frontendNode: SDK.DOMModel.DOMNode|null|undefined;\n\n  constructor(\n      data: PopulateNodesEventNodeTypes, frontendNode: SDK.DOMModel.DOMNode|null|undefined,\n      linkifier: Components.Linkifier.Linkifier, cssModel: SDK.CSSModel.CSSModel) {\n    super(data);\n\n    this.#frontendNode = frontendNode;\n    this.#linkifier = linkifier;\n    this.#cssModel = cssModel;\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    // Nodes.\n    const frontendNode = this.#frontendNode;\n    if (columnId === 'node-id') {\n      const cell = this.createTD(columnId);\n      cell.textContent = '...';\n\n      if (!frontendNode) {\n        throw new Error('Node entry is missing a related frontend node.');\n      }\n\n      void Common.Linkifier.Linkifier.linkify(frontendNode).then(link => {\n        cell.textContent = '';\n        (link as HTMLElement).dataset.backendNodeId = frontendNode.backendNodeId().toString();\n        cell.appendChild(link);\n        const showNodeIcon = new IconButton.Icon.Icon();\n        showNodeIcon.data = {iconName: 'select-element', color: 'var(--icon-show-element)', width: '16px'};\n        showNodeIcon.classList.add('show-element');\n        UI.Tooltip.Tooltip.install(showNodeIcon, i18nString(UIStrings.showElement));\n        showNodeIcon.tabIndex = 0;\n        showNodeIcon.onclick = () => frontendNode.scrollIntoView();\n        cell.appendChild(showNodeIcon);\n      });\n      return cell;\n    }\n\n    // Links to CSS.\n    if (columnId === 'source-url') {\n      const cell = this.createTD(columnId);\n\n      if (this.data.range) {\n        const link = this.#linkifyRuleLocation(\n            this.#cssModel, this.#linkifier, this.data.styleSheetId,\n            TextUtils.TextRange.TextRange.fromObject(this.data.range));\n\n        if (!link || link.textContent === '') {\n          cell.textContent = '(unable to link)';\n        } else {\n          cell.appendChild(link);\n        }\n      } else {\n        cell.textContent = '(unable to link to inlined styles)';\n      }\n      return cell;\n    }\n\n    if (columnId === 'contrast-ratio') {\n      const cell = this.createTD(columnId);\n      const showAPCA = Root.Runtime.experiments.isEnabled('apca');\n      const contrastRatio = Platform.NumberUtilities.floor(this.data.contrastRatio, 2);\n      const contrastRatioString = showAPCA ? contrastRatio + '%' : contrastRatio;\n      const border = getBorderString(this.data.backgroundColor);\n      const color = this.data.textColor.asString();\n      const backgroundColor = this.data.backgroundColor.asString();\n      const contrastFragment = UI.Fragment.Fragment.build`\n        <div class=\"contrast-container-in-grid\" $=\"container\">\n          <span class=\"contrast-preview\" style=\"border: ${border};\n          color: ${color};\n          background-color: ${backgroundColor};\">Aa</span>\n          <span>${contrastRatioString}</span>\n        </div>\n      `;\n      const container = contrastFragment.$('container');\n      if (showAPCA) {\n        container.append(UI.Fragment.Fragment.build`<span>${i18nString(UIStrings.apca)}</span>`.element());\n        if (this.data.thresholdsViolated.apca) {\n          container.appendChild(createClearIcon());\n        } else {\n          container.appendChild(createCheckIcon());\n        }\n      } else {\n        container.append(UI.Fragment.Fragment.build`<span>${i18nString(UIStrings.aa)}</span>`.element());\n        if (this.data.thresholdsViolated.aa) {\n          container.appendChild(createClearIcon());\n        } else {\n          container.appendChild(createCheckIcon());\n        }\n        container.append(UI.Fragment.Fragment.build`<span>${i18nString(UIStrings.aaa)}</span>`.element());\n        if (this.data.thresholdsViolated.aaa) {\n          container.appendChild(createClearIcon());\n        } else {\n          container.appendChild(createCheckIcon());\n        }\n      }\n      cell.appendChild(contrastFragment.element());\n      return cell;\n    }\n\n    return super.createCell(columnId);\n  }\n\n  #linkifyRuleLocation(\n      cssModel: SDK.CSSModel.CSSModel, linkifier: Components.Linkifier.Linkifier,\n      styleSheetId: Protocol.CSS.StyleSheetId, ruleLocation: TextUtils.TextRange.TextRange): Element|undefined {\n    const styleSheetHeader = cssModel.styleSheetHeaderForId(styleSheetId);\n    if (!styleSheetHeader) {\n      return;\n    }\n    const lineNumber = styleSheetHeader.lineNumberInSource(ruleLocation.startLine);\n    const columnNumber = styleSheetHeader.columnNumberInSource(ruleLocation.startLine, ruleLocation.startColumn);\n    const matchingSelectorLocation = new SDK.CSSModel.CSSLocation(styleSheetHeader, lineNumber, columnNumber);\n    return linkifier.linkifyCSSLocation(matchingSelectorLocation);\n  }\n}\n\nfunction createClearIcon(): IconButton.Icon.Icon {\n  const icon = new IconButton.Icon.Icon();\n  icon.data = {iconName: 'clear', color: 'var(--icon-error)', width: '14px', height: '14px'};\n  return icon;\n}\n\nfunction createCheckIcon(): IconButton.Icon.Icon {\n  const icon = new IconButton.Icon.Icon();\n  icon.data = {iconName: 'checkmark', color: 'var(--icon-checkmark-green)', width: '14px', height: '14px'};\n  return icon;\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
