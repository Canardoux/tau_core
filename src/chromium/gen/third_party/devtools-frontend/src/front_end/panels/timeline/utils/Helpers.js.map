{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/timeline/utils/Helpers.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/components/markdown_view/markdown_view.js';\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as CrUXManager from '../../../models/crux-manager/crux-manager.js';\nimport * as Marked from '../../../third_party/marked/marked.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as MobileThrottling from '../../mobile_throttling/mobile_throttling.js';\n\nconst {html} = LitHtml;\n\nexport function getThrottlingRecommendations():\n    {cpuRate: number|null, networkConditions: SDK.NetworkManager.Conditions|null} {\n  const cpuRate = 4;  // TODO(crbug.com/311438112): suggest \"mid-tier\" mobile device when implemented.\n  let networkConditions = null;\n\n  const response = CrUXManager.CrUXManager.instance().getSelectedFieldMetricData('round_trip_time');\n  if (response?.percentiles) {\n    const rtt = Number(response.percentiles.p75);\n    networkConditions = MobileThrottling.ThrottlingPresets.ThrottlingPresets.getRecommendedNetworkPreset(rtt);\n  }\n\n  return {\n    cpuRate,\n    networkConditions,\n  };\n}\n\nfunction createTrimmedUrlSearch(url: URL): string {\n  const maxSearchValueLength = 8;\n  let search = '';\n\n  for (const [key, value] of url.searchParams) {\n    if (search) {\n      search += '&';\n    }\n    if (value) {\n      search += `${key}=${Platform.StringUtilities.trimEndWithMaxLength(value, maxSearchValueLength)}`;\n    } else {\n      search += key;\n    }\n  }\n  if (search) {\n    search = '?' + search;\n  }\n\n  return search;\n}\n\n/**\n * Shortens URLs as much as possible while keeping important context.\n *\n * - Elides the host if the previous url is the same host+protocol\n * - Always elide search param values\n * - Always includes protocol/domain if there is a mix of protocols\n * - First URL is elided fully to show just the pathname, unless there is a mix of protocols (see above)\n */\nexport function createUrlLabels(urls: URL[]): string[] {\n  const labels: string[] = [];\n  const isAllHttps = urls.every(url => url.protocol === 'https:');\n\n  for (const [index, url] of urls.entries()) {\n    const previousUrl = urls[index - 1];\n    const sameHostAndProtocol = previousUrl && url.host === previousUrl.host && url.protocol === previousUrl.protocol;\n    let elideHost = sameHostAndProtocol;\n    let elideProtocol = isAllHttps;\n\n    // For the first URL, show just the pathname and search - this will be relative to the domain as seen in the\n    // trace dropdown selector. Exception is if there are non-https protocols, in which case we're only going to elide\n    // parts of the query string.\n    if (index === 0 && isAllHttps) {\n      elideHost = true;\n      elideProtocol = true;\n    }\n\n    const search = createTrimmedUrlSearch(url);\n    if (!elideProtocol) {\n      labels.push(`${url.protocol}//${url.host}${url.pathname}${search}`);\n    } else if (!elideHost) {\n      labels.push(`${url.host}${url.pathname}${search}`);\n    } else {\n      labels.push(`${url.pathname}${search}`);\n    }\n  }\n\n  // Lastly, remove any trailing `/`.\n  return labels.map(label => label.length > 1 && label.endsWith('/') ? label.substring(0, label.length - 1) : label);\n}\n\n/**\n * Shortens the provided URL for use within a narrow display usecase.\n *\n * The resulting string will at least contain the last path component of the URL.\n * More components are included until a limit of maxChars (default 20) is reached.\n * No querystring is included.\n *\n * If the last path component is larger than maxChars characters, the middle is elided.\n */\nexport function shortenUrl(url: URL, maxChars = 20): string {\n  const parts = url.pathname.split('/');\n  let shortenedUrl = parts.at(-1) ?? '';\n\n  if (shortenedUrl.length > maxChars) {\n    return Platform.StringUtilities.trimMiddle(shortenedUrl, maxChars);\n  }\n\n  let i = parts.length - 1;\n  while (--i >= 0) {\n    if (shortenedUrl.length + parts[i].length <= maxChars) {\n      shortenedUrl = `${parts[i]}/${shortenedUrl}`;\n    }\n  }\n\n  return shortenedUrl;\n}\n\n/**\n * Returns a rendered MarkdownView component.\n *\n * This should only be used for markdown that is guaranteed to be valid,\n * and not contain any user-generated content.\n */\nexport function md(markdown: Common.UIString.LocalizedString): LitHtml.TemplateResult {\n  const tokens = Marked.Marked.lexer(markdown);\n  const data = {tokens};\n  return html`<devtools-markdown-view .data=${data}></devtools-markdown-view>`;\n}\n"],
  "mappings": ";AAIA,OAAO;AAGP,YAAY,cAAc;AAE1B,YAAY,iBAAiB;AAC7B,YAAY,YAAY;AACxB,YAAY,aAAa;AACzB,YAAY,sBAAsB;AAElC,MAAM,EAAC,KAAI,IAAI;AAER,gBAAS,+BACkE;AAChF,QAAM,UAAU;AAChB,MAAI,oBAAoB;AAExB,QAAM,WAAW,YAAY,YAAY,SAAS,EAAE,2BAA2B,iBAAiB;AAChG,MAAI,UAAU,aAAa;AACzB,UAAM,MAAM,OAAO,SAAS,YAAY,GAAG;AAC3C,wBAAoB,iBAAiB,kBAAkB,kBAAkB,4BAA4B,GAAG;AAAA,EAC1G;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAEA,SAAS,uBAAuB,KAAkB;AAChD,QAAM,uBAAuB;AAC7B,MAAI,SAAS;AAEb,aAAW,CAAC,KAAK,KAAK,KAAK,IAAI,cAAc;AAC3C,QAAI,QAAQ;AACV,gBAAU;AAAA,IACZ;AACA,QAAI,OAAO;AACT,gBAAU,GAAG,GAAG,IAAI,SAAS,gBAAgB,qBAAqB,OAAO,oBAAoB,CAAC;AAAA,IAChG,OAAO;AACL,gBAAU;AAAA,IACZ;AAAA,EACF;AACA,MAAI,QAAQ;AACV,aAAS,MAAM;AAAA,EACjB;AAEA,SAAO;AACT;AAUO,gBAAS,gBAAgB,MAAuB;AACrD,QAAM,SAAmB,CAAC;AAC1B,QAAM,aAAa,KAAK,MAAM,SAAO,IAAI,aAAa,QAAQ;AAE9D,aAAW,CAAC,OAAO,GAAG,KAAK,KAAK,QAAQ,GAAG;AACzC,UAAM,cAAc,KAAK,QAAQ,CAAC;AAClC,UAAM,sBAAsB,eAAe,IAAI,SAAS,YAAY,QAAQ,IAAI,aAAa,YAAY;AACzG,QAAI,YAAY;AAChB,QAAI,gBAAgB;AAKpB,QAAI,UAAU,KAAK,YAAY;AAC7B,kBAAY;AACZ,sBAAgB;AAAA,IAClB;AAEA,UAAM,SAAS,uBAAuB,GAAG;AACzC,QAAI,CAAC,eAAe;AAClB,aAAO,KAAK,GAAG,IAAI,QAAQ,KAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,GAAG,MAAM,EAAE;AAAA,IACpE,WAAW,CAAC,WAAW;AACrB,aAAO,KAAK,GAAG,IAAI,IAAI,GAAG,IAAI,QAAQ,GAAG,MAAM,EAAE;AAAA,IACnD,OAAO;AACL,aAAO,KAAK,GAAG,IAAI,QAAQ,GAAG,MAAM,EAAE;AAAA,IACxC;AAAA,EACF;AAGA,SAAO,OAAO,IAAI,WAAS,MAAM,SAAS,KAAK,MAAM,SAAS,GAAG,IAAI,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,IAAI,KAAK;AACnH;AAWO,gBAAS,WAAW,KAAU,WAAW,IAAY;AAC1D,QAAM,QAAQ,IAAI,SAAS,MAAM,GAAG;AACpC,MAAI,eAAe,MAAM,GAAG,EAAE,KAAK;AAEnC,MAAI,aAAa,SAAS,UAAU;AAClC,WAAO,SAAS,gBAAgB,WAAW,cAAc,QAAQ;AAAA,EACnE;AAEA,MAAI,IAAI,MAAM,SAAS;AACvB,SAAO,EAAE,KAAK,GAAG;AACf,QAAI,aAAa,SAAS,MAAM,CAAC,EAAE,UAAU,UAAU;AACrD,qBAAe,GAAG,MAAM,CAAC,CAAC,IAAI,YAAY;AAAA,IAC5C;AAAA,EACF;AAEA,SAAO;AACT;AAQO,gBAAS,GAAG,UAAmE;AACpF,QAAM,SAAS,OAAO,OAAO,MAAM,QAAQ;AAC3C,QAAM,OAAO,EAAC,OAAM;AACpB,SAAO,qCAAqC,IAAI;AAClD;",
  "names": []
}
