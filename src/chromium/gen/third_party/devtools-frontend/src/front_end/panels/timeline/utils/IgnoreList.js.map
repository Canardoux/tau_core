{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/timeline/utils/IgnoreList.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport {SourceMapsResolver} from './SourceMapsResolver.js';\n\nconst UIStrings = {\n  /**\n   * @description Refers to when skipping content scripts is enabled and the current script is ignored because it's a content script.\n   */\n  skipContentScripts: 'Content script',\n  /**\n   * @description Refers to when skipping known third party scripts is enabled and the current script is ignored because it's a known third party script.\n   */\n  skip3rdPartyScripts: 'Marked with ignoreList in source map',\n  /**\n   * @description Refers to when skipping anonymous scripts is enabled and the current script is ignored because is an anonymous script.\n   */\n  skipAnonymousScripts: 'Anonymous script',\n  /**\n   * @description Refers to when the current script is ignored because of an unknown rule.\n   */\n  unknown: 'Unknown',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/utils/IgnoreList.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nfunction getUrlAndIgnoreListOptions(entry: Trace.Types.Events.SyntheticProfileCall):\n    {url: Platform.DevToolsPath.UrlString, ignoreListOptions: Bindings.IgnoreListManager.IgnoreListGeneralRules} {\n  const rawUrl = entry.callFrame.url as Platform.DevToolsPath.UrlString;\n\n  const sourceMappedData = SourceMapsResolver.resolvedCodeLocationForEntry(entry);\n  const script = sourceMappedData?.script;\n  const uiSourceCode = sourceMappedData?.devtoolsLocation?.uiSourceCode;\n  const resolvedUrl = uiSourceCode?.url();\n  const isKnownThirdParty = uiSourceCode?.isKnownThirdParty();\n  const isContentScript = script?.isContentScript();\n  const ignoreListOptions: Bindings.IgnoreListManager.IgnoreListGeneralRules = {isContentScript, isKnownThirdParty};\n  const url = resolvedUrl || rawUrl;\n  return {url, ignoreListOptions};\n}\n\nexport function isIgnoreListedEntry(entry: Trace.Types.Events.Event): boolean {\n  if (!Trace.Types.Events.isProfileCall(entry)) {\n    return false;\n  }\n  const {url, ignoreListOptions} = getUrlAndIgnoreListOptions(entry);\n  return isIgnoreListedURL(url, ignoreListOptions);\n}\n\nfunction isIgnoreListedURL(\n    url: Platform.DevToolsPath.UrlString, options?: Bindings.IgnoreListManager.IgnoreListGeneralRules): boolean {\n  return Bindings.IgnoreListManager.IgnoreListManager.instance().isUserIgnoreListedURL(url, options);\n}\n\n/**\n * Returns the ignore reason for the given entry.\n *\n * This function should be called when `isIgnoreListedEntry(entry)` is true\n */\nexport function getIgnoredReasonString(entry: Trace.Types.Events.Event): string {\n  if (!Trace.Types.Events.isProfileCall(entry)) {\n    console.warn('Ignore list feature should only support ProfileCall.');\n    return '';\n  }\n  const {url, ignoreListOptions} = getUrlAndIgnoreListOptions(entry);\n\n  const ignoreListMgr = Bindings.IgnoreListManager.IgnoreListManager.instance();\n  if (ignoreListOptions.isContentScript && ignoreListMgr.skipContentScripts) {\n    return i18nString(UIStrings.skipContentScripts);\n  }\n  if (ignoreListOptions.isKnownThirdParty && ignoreListMgr.automaticallyIgnoreListKnownThirdPartyScripts) {\n    return i18nString(UIStrings.skip3rdPartyScripts);\n  }\n\n  if (!url) {\n    if (ignoreListMgr.skipAnonymousScripts) {\n      return i18nString(UIStrings.skipAnonymousScripts);\n    }\n    // This branch shouldn't be reached because when |skipAnonymousScripts| is false, this url is not ignored.\n    // So just return empty string to make the type check work.\n    return '';\n  }\n  const regex = ignoreListMgr.getFirstMatchedRegex(url);\n  return regex ? regex.source : i18nString(UIStrings.unknown);\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AAEtB,YAAY,cAAc;AAC1B,YAAY,WAAW;AAEvB,SAAQ,0BAAyB;AAEjC,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,oBAAoB;AAAA;AAAA;AAAA;AAAA,EAIpB,qBAAqB;AAAA;AAAA;AAAA;AAAA,EAIrB,sBAAsB;AAAA;AAAA;AAAA;AAAA,EAItB,SAAS;AACX;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,uCAAuC,SAAS;AACzF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAEpE,SAAS,2BAA2B,OAC6E;AAC/G,QAAM,SAAS,MAAM,UAAU;AAE/B,QAAM,mBAAmB,mBAAmB,6BAA6B,KAAK;AAC9E,QAAM,SAAS,kBAAkB;AACjC,QAAM,eAAe,kBAAkB,kBAAkB;AACzD,QAAM,cAAc,cAAc,IAAI;AACtC,QAAM,oBAAoB,cAAc,kBAAkB;AAC1D,QAAM,kBAAkB,QAAQ,gBAAgB;AAChD,QAAM,oBAAuE,EAAC,iBAAiB,kBAAiB;AAChH,QAAM,MAAM,eAAe;AAC3B,SAAO,EAAC,KAAK,kBAAiB;AAChC;AAEO,gBAAS,oBAAoB,OAA0C;AAC5E,MAAI,CAAC,MAAM,MAAM,OAAO,cAAc,KAAK,GAAG;AAC5C,WAAO;AAAA,EACT;AACA,QAAM,EAAC,KAAK,kBAAiB,IAAI,2BAA2B,KAAK;AACjE,SAAO,kBAAkB,KAAK,iBAAiB;AACjD;AAEA,SAAS,kBACL,KAAsC,SAAsE;AAC9G,SAAO,SAAS,kBAAkB,kBAAkB,SAAS,EAAE,sBAAsB,KAAK,OAAO;AACnG;AAOO,gBAAS,uBAAuB,OAAyC;AAC9E,MAAI,CAAC,MAAM,MAAM,OAAO,cAAc,KAAK,GAAG;AAC5C,YAAQ,KAAK,sDAAsD;AACnE,WAAO;AAAA,EACT;AACA,QAAM,EAAC,KAAK,kBAAiB,IAAI,2BAA2B,KAAK;AAEjE,QAAM,gBAAgB,SAAS,kBAAkB,kBAAkB,SAAS;AAC5E,MAAI,kBAAkB,mBAAmB,cAAc,oBAAoB;AACzE,WAAO,WAAW,UAAU,kBAAkB;AAAA,EAChD;AACA,MAAI,kBAAkB,qBAAqB,cAAc,+CAA+C;AACtG,WAAO,WAAW,UAAU,mBAAmB;AAAA,EACjD;AAEA,MAAI,CAAC,KAAK;AACR,QAAI,cAAc,sBAAsB;AACtC,aAAO,WAAW,UAAU,oBAAoB;AAAA,IAClD;AAGA,WAAO;AAAA,EACT;AACA,QAAM,QAAQ,cAAc,qBAAqB,GAAG;AACpD,SAAO,QAAQ,MAAM,SAAS,WAAW,UAAU,OAAO;AAC5D;",
  "names": []
}
