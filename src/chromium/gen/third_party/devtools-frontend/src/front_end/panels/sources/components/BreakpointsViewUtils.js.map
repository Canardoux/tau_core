{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/sources/components/BreakpointsViewUtils.ts"],
  "sourcesContent": ["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport {assertNotNullOrUndefined} from '../../../core/platform/platform.js';\n\nconst SUMMARY_ELEMENT_SELECTOR = 'summary';\n\nconst domNodeIsTree = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('role') === 'tree';\n};\n\nconst domNodeIsBreakpointItemNode = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('role') === 'treeitem';\n};\n\nconst domNodeIsPauseOnExceptionsNode = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('data-first-pause') !== null || domNode.getAttribute('data-last-pause') !== null;\n};\n\nconst domNodeIsSummaryNode = (domNode: HTMLElement): boolean => {\n  return !domNodeIsBreakpointItemNode(domNode);\n};\n\nconst groupIsExpanded = (detailsElement: HTMLDetailsElement): boolean => {\n  return detailsElement.getAttribute('open') !== null;\n};\n\nconst getFirstBreakpointItemInGroup = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLElement>('[data-first-breakpoint]');\n};\n\nconst getLastBreakpointItemInGroup = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLDivElement>('[data-last-breakpoint]');\n};\n\nconst getNextGroupsSummaryNode = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  const nextDetailsElement = getNextDetailsElement(detailsElement);\n  if (nextDetailsElement && nextDetailsElement instanceof HTMLDetailsElement) {\n    return nextDetailsElement?.querySelector<HTMLElement>('summary');\n  }\n  return null;\n};\n\nconst getCurrentSummaryNode = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLElement>(SUMMARY_ELEMENT_SELECTOR);\n};\n\nconst getNextDetailsElement = (detailsElement: HTMLDetailsElement): HTMLDetailsElement|null => {\n  const nextDetailsElement = detailsElement.nextElementSibling;\n  if (nextDetailsElement && nextDetailsElement instanceof HTMLDetailsElement) {\n    return nextDetailsElement;\n  }\n  return null;\n};\n\nconst getPreviousDetailsElement = (detailsElement: HTMLDetailsElement): HTMLDetailsElement|null => {\n  const previousDetailsElement = detailsElement.previousElementSibling;\n  if (previousDetailsElement && previousDetailsElement instanceof HTMLDetailsElement) {\n    return previousDetailsElement;\n  }\n  return null;\n};\n\nfunction findNextNodeForPauseOnExceptions(target: HTMLElement, key: Platform.KeyboardUtilities.ArrowKey): HTMLElement|\n    null {\n  // Handle keyboard navigation on one of the pause on exceptions checkboxes.\n  console.assert(domNodeIsPauseOnExceptionsNode(target));\n  let nextNode: HTMLElement|null = null;\n  switch (key) {\n    case Platform.KeyboardUtilities.ArrowKey.UP: {\n      const previousElementSibling = target.previousElementSibling;\n      if (previousElementSibling instanceof HTMLElement) {\n        nextNode = previousElementSibling;\n        console.assert(domNodeIsPauseOnExceptionsNode(nextNode));\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.DOWN: {\n      const nextElementSibling = target.nextElementSibling;\n      if (nextElementSibling instanceof HTMLElement) {\n        if (domNodeIsTree(nextElementSibling)) {\n          const detailsElement = nextElementSibling.querySelector<HTMLDetailsElement>('[data-first-group]');\n          if (detailsElement) {\n            nextNode = getCurrentSummaryNode(detailsElement);\n          }\n        } else {\n          nextNode = nextElementSibling;\n          console.assert(domNodeIsPauseOnExceptionsNode(nextNode));\n        }\n      }\n      break;\n    }\n    default:\n      break;\n  }\n\n  return nextNode;\n}\n\nexport async function findNextNodeForKeyboardNavigation(\n    target: HTMLElement, key: Platform.KeyboardUtilities.ArrowKey,\n    setGroupExpandedStateCallback: (detailsElement: HTMLDetailsElement, expanded: boolean) =>\n        Promise<unknown>): Promise<HTMLElement|null> {\n  if (domNodeIsPauseOnExceptionsNode(target)) {\n    return findNextNodeForPauseOnExceptions(target, key);\n  }\n\n  // Handle keyboard navigation in the breakpoint tree.\n  const detailsElement = target.parentElement;\n  if (!detailsElement || !(detailsElement instanceof HTMLDetailsElement)) {\n    throw new Error('The selected nodes should be direct children of an HTMLDetails element.');\n  }\n\n  let nextNode: HTMLElement|null = null;\n  switch (key) {\n    case Platform.KeyboardUtilities.ArrowKey.LEFT: {\n      if (domNodeIsSummaryNode(target)) {\n        // On a summary node, collapse if group is expanded.\n        if (groupIsExpanded(detailsElement)) {\n          await setGroupExpandedStateCallback(detailsElement, false);\n        }\n      } else {\n        // On a breakpoint item node, navigate up to the summary node.\n        return getCurrentSummaryNode(detailsElement);\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.RIGHT: {\n      if (domNodeIsSummaryNode(target)) {\n        // On a summary node, expand if group is collapsed, and otherwise navigate\n        // to the first breakpoint item in this group.\n        if (groupIsExpanded(detailsElement)) {\n          return getFirstBreakpointItemInGroup(detailsElement);\n        }\n        await setGroupExpandedStateCallback(detailsElement, true);\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.DOWN: {\n      if (domNodeIsSummaryNode(target)) {\n        if (groupIsExpanded(detailsElement)) {\n          // If the current node is a summary node of an expanded group, navigating down\n          // should lead to the first breakpoint item within the group.\n          nextNode = getFirstBreakpointItemInGroup(detailsElement);\n        } else {\n          // If the current node is a summary node of a collapsed group, go to the next\n          // group's summary node if existent.\n          nextNode = getNextGroupsSummaryNode(detailsElement);\n        }\n      } else {\n        // If the current node is a breakpoint item, try to get the next\n        // breakpoint item if available, otherwise the next group's summary\n        // node.\n        const nextSibling = target.nextElementSibling;\n        if (nextSibling && nextSibling instanceof HTMLDivElement) {\n          nextNode = nextSibling;\n        } else {\n          nextNode = getNextGroupsSummaryNode(detailsElement);\n        }\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.UP: {\n      // If the current node is a summary node, navigating upwards will either\n      // navigate to the last breakpoint item of the previous group (if expanded),\n      // and otherwise navigate to the previous group's summary node.\n      if (domNodeIsSummaryNode(target)) {\n        const previousDetailsElement = getPreviousDetailsElement(detailsElement);\n        if (previousDetailsElement) {\n          if (groupIsExpanded(previousDetailsElement)) {\n            nextNode = getLastBreakpointItemInGroup(previousDetailsElement);\n          } else {\n            nextNode = getCurrentSummaryNode(previousDetailsElement);\n          }\n        } else {\n          const pauseOnExceptions = detailsElement.parentElement?.previousElementSibling;\n          if (pauseOnExceptions instanceof HTMLElement) {\n            nextNode = pauseOnExceptions;\n          }\n        }\n      } else {\n        // If the current node is a breakpoint item, going up should get\n        // the previous sibling, which can be both a summary node or a\n        // a breakpoint item.\n        const previousSibling = target.previousElementSibling;\n        if (previousSibling instanceof HTMLElement) {\n          nextNode = previousSibling;\n        }\n      }\n      break;\n    }\n  }\n  return nextNode;\n}\n\nexport interface TitleInfo {\n  name: string;\n  url: Platform.DevToolsPath.UrlString;\n}\n\nfunction findFirstDifferingSegmentIndex(splitUrls: string[][]): number {\n  const firstUrl = splitUrls[0];\n  let firstDifferingIndex = -1;\n  for (let segmentIndex = 0; segmentIndex < firstUrl.length && firstDifferingIndex === -1; ++segmentIndex) {\n    const segment = firstUrl[segmentIndex];\n    for (let urlIndex = 1; urlIndex < splitUrls.length; ++urlIndex) {\n      const url = splitUrls[urlIndex];\n      if (url.length <= segmentIndex || url[segmentIndex] !== segment) {\n        firstDifferingIndex = segmentIndex;\n        break;\n      }\n    }\n  }\n\n  return firstDifferingIndex === -1 ? firstUrl.length : firstDifferingIndex;\n}\n\nfunction findDifferentiatingPath(url: string[], allUrls: string[][], startIndex: number): string[] {\n  const differentiatingPath = [];\n  let remainingUrlsToDifferentiate = allUrls.filter(other => other !== url);\n\n  for (let segmentIndex = startIndex; segmentIndex < url.length; ++segmentIndex) {\n    const segment = url[segmentIndex];\n    differentiatingPath.push(segment);\n    remainingUrlsToDifferentiate =\n        remainingUrlsToDifferentiate.filter(url => url.length > segmentIndex && url[segmentIndex] === segment);\n    if (remainingUrlsToDifferentiate.length === 0) {\n      break;\n    }\n  }\n  return differentiatingPath;\n}\n\n// This function tries to find a subpath (if available) that we can use to differentiate\n// urls that have the same file name.\n// It does so by 1. removing common suffixes, 2. taking segments of the path (from right to left) until the path is\n// unique.\n//\n// Example:\n//\n//     Paths:  'http://www.google.com/src/a/index.js', 'http://www.google.com/src2/a/index.js'\n//     Output: 'src/\u2026/', 'src2/\u2026/'\nfunction populateDifferentiatingPathMap(\n    urls: Platform.DevToolsPath.UrlString[], urlToDifferentiator: Map<Platform.DevToolsPath.UrlString, string>): void {\n  const splitReversedUrls = urls.map(url => {\n    // Get the folder path components without the first '/'.\n    const paths = Common.ParsedURL.ParsedURL.fromString(url)?.folderPathComponents.slice(1);\n    assertNotNullOrUndefined(paths);\n    return paths.split('/').reverse();\n  });\n\n  const startIndex = findFirstDifferingSegmentIndex(splitReversedUrls);\n\n  for (let i = 0; i < splitReversedUrls.length; ++i) {\n    const splitUrl = splitReversedUrls[i];\n    const differentiator = findDifferentiatingPath(splitUrl, splitReversedUrls, startIndex);\n    const reversed = differentiator.reverse().join('/');\n    // If we start to collect the differentiator from the last segment (startIndex === 0),\n    // only append a '/', otherwise' \u2026/'.\n    if (startIndex === 0) {\n      urlToDifferentiator.set(urls[i], reversed + '/');\n    } else {\n      urlToDifferentiator.set(urls[i], reversed + '/\\u2026/');\n    }\n  }\n  console.assert(new Set(urlToDifferentiator.values()).size === urls.length, 'Differentiators should be unique.');\n}\n\nexport function getDifferentiatingPathMap(titleInfos: TitleInfo[]): Map<Platform.DevToolsPath.UrlString, string> {\n  const nameToUrl = new Map<string, Platform.DevToolsPath.UrlString[]>();\n  const urlToDifferentiatingPath = new Map<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>();\n\n  for (const {name, url} of titleInfos) {\n    if (!nameToUrl.has(name)) {\n      nameToUrl.set(name, []);\n    }\n    nameToUrl.get(name)?.push(url);\n  }\n\n  for (const urlsGroupedByName of nameToUrl.values()) {\n    if (urlsGroupedByName.length > 1) {\n      populateDifferentiatingPathMap(urlsGroupedByName, urlToDifferentiatingPath);\n    }\n  }\n  return urlToDifferentiatingPath;\n}\n"],
  "mappings": "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",
  "names": ["url"]
}
