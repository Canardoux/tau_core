{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/elements/components/ElementsBreadcrumbs.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/components/icon_button/icon_button.js';\nimport '../../../ui/components/node_text/node_text.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport elementsBreadcrumbsStyles from './elementsBreadcrumbs.css.js';\nimport {crumbsToRender, type UserScrollPosition} from './ElementsBreadcrumbsUtils.js';\nimport type {DOMNode} from './Helper.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   * @description Accessible name for DOM tree breadcrumb navigation.\n   */\n  breadcrumbs: 'DOM tree breadcrumbs',\n  /**\n   * @description A label/tooltip for a button that scrolls the breadcrumbs bar to the left to show more entries.\n   */\n  scrollLeft: 'Scroll left',\n  /**\n   * @description A label/tooltip for a button that scrolls the breadcrumbs bar to the right to show more entries.\n   */\n  scrollRight: 'Scroll right',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/ElementsBreadcrumbs.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class NodeSelectedEvent extends Event {\n  static readonly eventName = 'breadcrumbsnodeselected';\n  legacyDomNode: SDK.DOMModel.DOMNode;\n\n  constructor(node: DOMNode) {\n    super(NodeSelectedEvent.eventName, {});\n    this.legacyDomNode = node.legacyDomNode;\n  }\n}\n\nexport interface ElementsBreadcrumbsData {\n  selectedNode: DOMNode|null;\n  crumbs: DOMNode[];\n}\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nexport class ElementsBreadcrumbs extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #resizeObserver = new ResizeObserver(() => this.#checkForOverflowOnResize());\n  readonly #renderBound = this.#render.bind(this);\n\n  #crumbsData: readonly DOMNode[] = [];\n  #selectedDOMNode: Readonly<DOMNode>|null = null;\n  #overflowing = false;\n  #userScrollPosition: UserScrollPosition = 'start';\n  #isObservingResize = false;\n  #userHasManuallyScrolled = false;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [elementsBreadcrumbsStyles];\n  }\n\n  set data(data: ElementsBreadcrumbsData) {\n    this.#selectedDOMNode = data.selectedNode;\n    this.#crumbsData = data.crumbs;\n    this.#userHasManuallyScrolled = false;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  disconnectedCallback(): void {\n    this.#isObservingResize = false;\n    this.#resizeObserver.disconnect();\n  }\n\n  #onCrumbClick(node: DOMNode): (event: Event) => void {\n    return (event: Event): void => {\n      event.preventDefault();\n      this.dispatchEvent(new NodeSelectedEvent(node));\n    };\n  }\n\n  /*\n   * When the window is resized, we need to check if we either:\n   * 1) overflowing, and now the window is big enough that we don't need to\n   * 2) not overflowing, and now the window is small and we do need to\n   *\n   * If either of these are true, we toggle the overflowing state accordingly and trigger a re-render.\n   */\n  async #checkForOverflowOnResize(): Promise<void> {\n    const crumbScrollContainer = this.#shadow.querySelector('.crumbs-scroll-container');\n    const crumbWindow = this.#shadow.querySelector('.crumbs-window');\n\n    if (!crumbScrollContainer || !crumbWindow) {\n      return;\n    }\n\n    const crumbWindowWidth = await coordinator.read<number>(() => {\n      return crumbWindow.clientWidth;\n    });\n\n    const scrollContainerWidth = await coordinator.read<number>(() => {\n      return crumbScrollContainer.clientWidth;\n    });\n\n    if (this.#overflowing) {\n      // We currently have overflow buttons.\n      // If the content while displaying buttons still fits, then we can\n      // rerender without overflow.\n      if (scrollContainerWidth < crumbWindowWidth) {\n        this.#overflowing = false;\n      }\n    } else {\n      // We currently do not have overflow buttons.\n      // If the content won't fit anymore, then rerender with overflow.\n      if (scrollContainerWidth > crumbWindowWidth) {\n        this.#overflowing = true;\n      }\n    }\n    void this.#ensureSelectedNodeIsVisible();\n    void this.#updateScrollState(crumbWindow);\n  }\n\n  #onCrumbMouseMove(node: DOMNode): () => void {\n    return (): void => node.highlightNode();\n  }\n\n  #onCrumbMouseLeave(node: DOMNode): () => void {\n    return (): void => node.clearHighlight();\n  }\n\n  #onCrumbFocus(node: DOMNode): () => void {\n    return (): void => node.highlightNode();\n  }\n\n  #onCrumbBlur(node: DOMNode): () => void {\n    return (): void => node.clearHighlight();\n  }\n\n  #engageResizeObserver(): void {\n    if (!this.#resizeObserver || this.#isObservingResize === true) {\n      return;\n    }\n\n    const crumbs = this.#shadow.querySelector('.crumbs');\n\n    if (!crumbs) {\n      return;\n    }\n\n    this.#resizeObserver.observe(crumbs);\n    this.#isObservingResize = true;\n  }\n\n  /**\n   * This method runs after render or resize and checks if the crumbs are too large\n   * for their container and therefore we need to render the overflow buttons at\n   * either end which the user can use to scroll back and forward through the crumbs.\n   * If it finds that we are overflowing, it sets the instance variable and\n   * triggers a re-render. If we are not overflowing, this method returns and\n   * does nothing.\n   */\n  async #checkForOverflow(): Promise<void> {\n    const crumbScrollContainer = this.#shadow.querySelector('.crumbs-scroll-container');\n    const crumbWindow = this.#shadow.querySelector('.crumbs-window');\n\n    if (!crumbScrollContainer || !crumbWindow) {\n      return;\n    }\n\n    const crumbWindowWidth = await coordinator.read<number>(() => {\n      return crumbWindow.clientWidth;\n    });\n\n    const scrollContainerWidth = await coordinator.read<number>(() => {\n      return crumbScrollContainer.clientWidth;\n    });\n\n    if (this.#overflowing) {\n      // We currently have overflow buttons.\n      // If the content while displaying buttons still fits, then we can\n      // rerender without overflow.\n      if (scrollContainerWidth < crumbWindowWidth) {\n        this.#overflowing = false;\n        void this.#render();\n      }\n    } else {\n      // We currently do not have overflow buttons.\n      // If the content won't fit anymore, then rerender with overflow.\n      if (scrollContainerWidth > crumbWindowWidth) {\n        this.#overflowing = true;\n        void this.#render();\n      }\n    }\n  }\n\n  #onCrumbsWindowScroll(event: Event): void {\n    if (!event.target) {\n      return;\n    }\n\n    /* not all Events are DOM Events so the TS Event def doesn't have\n     * .target typed as an Element but in this case we're getting this\n     * from a DOM event so we're confident of having .target and it\n     * being an element\n     */\n    const scrollWindow = event.target as Element;\n\n    this.#updateScrollState(scrollWindow);\n  }\n\n  #updateScrollState(scrollWindow: Element): void {\n    const maxScrollLeft = scrollWindow.scrollWidth - scrollWindow.clientWidth;\n    const currentScroll = scrollWindow.scrollLeft;\n\n    /**\n     * When we check if the user is at the beginning or end of the crumbs (such\n     * that we disable the relevant button - you can't keep scrolling right if\n     * you're at the last breadcrumb) we want to not check exact numbers but\n     * give a bit of padding. This means if the user has scrolled to nearly the\n     * end but not quite (e.g. there are 2 more pixels they could scroll) we'll\n     * mark it as them being at the end. This variable controls how much padding\n     * we apply. So if a user has scrolled to within 10px of the end, we count\n     * them as being at the end and disable the button.\n     */\n    const scrollBeginningAndEndPadding = 10;\n\n    if (currentScroll < scrollBeginningAndEndPadding) {\n      this.#userScrollPosition = 'start';\n    } else if (currentScroll >= maxScrollLeft - scrollBeginningAndEndPadding) {\n      this.#userScrollPosition = 'end';\n    } else {\n      this.#userScrollPosition = 'middle';\n    }\n\n    void this.#render();\n  }\n\n  #onOverflowClick(direction: 'left'|'right'): () => void {\n    return (): void => {\n      this.#userHasManuallyScrolled = true;\n      const scrollWindow = this.#shadow.querySelector('.crumbs-window');\n\n      if (!scrollWindow) {\n        return;\n      }\n\n      const amountToScrollOnClick = scrollWindow.clientWidth / 2;\n\n      const newScrollAmount = direction === 'left' ?\n          Math.max(Math.floor(scrollWindow.scrollLeft - amountToScrollOnClick), 0) :\n          scrollWindow.scrollLeft + amountToScrollOnClick;\n\n      scrollWindow.scrollTo({\n        behavior: 'smooth',\n        left: newScrollAmount,\n      });\n    };\n  }\n\n  #renderOverflowButton(direction: 'left'|'right', disabled: boolean): LitHtml.TemplateResult {\n    const buttonStyles = LitHtml.Directives.classMap({\n      overflow: true,\n      [direction]: true,\n      hidden: !this.#overflowing,\n    });\n\n    const tooltipString = direction === 'left' ? i18nString(UIStrings.scrollLeft) : i18nString(UIStrings.scrollRight);\n    // clang-format off\n    return html`\n      <button\n        class=${buttonStyles}\n        @click=${this.#onOverflowClick(direction)}\n        ?disabled=${disabled}\n        aria-label=${tooltipString}\n        title=${tooltipString}>\n        <devtools-icon .data=${{\n          iconName: 'triangle-' + direction,\n          color: 'var(--sys-color-on-surface)',\n          width: '12px',\n          height: '10px',\n        }}>\n        </devtools-icon>\n      </button>\n      `;\n          // clang-format on\n  }\n\n  #render(): void {\n    const crumbs = crumbsToRender(this.#crumbsData, this.#selectedDOMNode);\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    LitHtml.render(html`\n      <nav class=\"crumbs\" aria-label=${i18nString(UIStrings.breadcrumbs)} jslog=${VisualLogging.elementsBreadcrumbs()}>\n        ${this.#renderOverflowButton('left', this.#userScrollPosition === 'start')}\n\n        <div class=\"crumbs-window\" @scroll=${this.#onCrumbsWindowScroll}>\n          <ul class=\"crumbs-scroll-container\">\n            ${crumbs.map(crumb => {\n              const crumbClasses = {\n                crumb: true,\n                selected: crumb.selected,\n              };\n              // eslint-disable-next-line rulesdir/ban_a_tags_in_lit_html\n              return html`\n                <li class=${LitHtml.Directives.classMap(crumbClasses)}\n                  data-node-id=${crumb.node.id}\n                  data-crumb=\"true\"\n                >\n                  <a href=\"#\"\n                    draggable=false\n                    class=\"crumb-link\"\n                    jslog=${VisualLogging.item().track({click:true})}\n                    @click=${this.#onCrumbClick(crumb.node)}\n                    @mousemove=${this.#onCrumbMouseMove(crumb.node)}\n                    @mouseleave=${this.#onCrumbMouseLeave(crumb.node)}\n                    @focus=${this.#onCrumbFocus(crumb.node)}\n                    @blur=${this.#onCrumbBlur(crumb.node)}\n                  ><devtools-node-text data-node-title=${crumb.title.main} .data=${{\n                    nodeTitle: crumb.title.main,\n                    nodeId: crumb.title.extras.id,\n                    nodeClasses: crumb.title.extras.classes,\n                  }}></devtools-node-text></a>\n                </li>`;\n            })}\n          </ul>\n        </div>\n        ${this.#renderOverflowButton('right', this.#userScrollPosition === 'end')}\n      </nav>\n    `, this.#shadow, { host: this });\n    // clang-format on\n\n    void this.#checkForOverflow();\n    this.#engageResizeObserver();\n    void this.#ensureSelectedNodeIsVisible();\n  }\n\n  async #ensureSelectedNodeIsVisible(): Promise<void> {\n    /*\n     * If the user has manually scrolled the crumbs in either direction, we\n     * effectively hand control over the scrolling down to them. This is to\n     * prevent the user manually scrolling to the end, and then us scrolling\n     * them back to the selected node. The moment they click either scroll\n     * button we set userHasManuallyScrolled, and we reset it when we get new\n     * data in. This means if the user clicks on a different element in the\n     * tree, we will auto-scroll that element into view, because we'll get new\n     * data and hence the flag will be reset.\n     */\n    if (!this.#selectedDOMNode || !this.#shadow || !this.#overflowing || this.#userHasManuallyScrolled) {\n      return;\n    }\n    const activeCrumbId = this.#selectedDOMNode.id;\n    const activeCrumb = this.#shadow.querySelector(`.crumb[data-node-id=\"${activeCrumbId}\"]`);\n\n    if (activeCrumb) {\n      await coordinator.scroll(() => {\n        activeCrumb.scrollIntoView({\n          // We only want to scroll smoothly when the user is clicking the\n          // buttons manually. If we are automatically scrolling, we could be\n          // scrolling a long distance, so just jump there right away. This\n          // most commonly occurs when the user first opens DevTools on a\n          // deeply nested element, and the slow scrolling of the breadcrumbs\n          // is just a distraction and not useful.\n          behavior: 'auto',\n        });\n      });\n    }\n  }\n}\n\ncustomElements.define('devtools-elements-breadcrumbs', ElementsBreadcrumbs);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-elements-breadcrumbs': ElementsBreadcrumbs;\n  }\n\n  interface HTMLElementEventMap {\n    [NodeSelectedEvent.eventName]: NodeSelectedEvent;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
