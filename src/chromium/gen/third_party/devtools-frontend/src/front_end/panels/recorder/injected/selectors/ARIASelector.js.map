{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/recorder/injected/selectors/ARIASelector.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {DeepSelector, Selector} from './Selector.js';\n\nexport interface AccessibilityBindings {\n  getAccessibleName(node: Node): string;\n  getAccessibleRole(node: Node): string;\n}\n\nclass ARIASelectorComputer {\n  #bindings: AccessibilityBindings;\n\n  constructor(bindings: AccessibilityBindings) {\n    this.#bindings = bindings;\n  }\n\n  // Takes a path consisting of element names and roles and makes sure that\n  // every element resolves to a single result. If it does, the selector is added\n  // to the chain of selectors.\n  #computeUniqueARIASelectorForElements = (\n      elements: {name: string, role: string}[],\n      queryByRoleOnly: boolean,\n      ): DeepSelector|undefined => {\n    const selectors: string[] = [];\n    let parent: Element|Document = document;\n    for (const element of elements) {\n      let result = this.#queryA11yTreeOneByName(parent, element.name);\n      if (result) {\n        selectors.push(element.name);\n        parent = result;\n        continue;\n      }\n      if (queryByRoleOnly) {\n        result = this.#queryA11yTreeOneByRole(parent, element.role);\n        if (result) {\n          selectors.push(`[role=\"${element.role}\"]`);\n          parent = result;\n          continue;\n        }\n      }\n      result = this.#queryA11yTreeOneByNameAndRole(\n          parent,\n          element.name,\n          element.role,\n      );\n      if (result) {\n        selectors.push(`${element.name}[role=\"${element.role}\"]`);\n        parent = result;\n        continue;\n      }\n      return;\n    }\n    return selectors;\n  };\n\n  #queryA11yTreeOneByName = (\n      parent: Element|Document,\n      name?: string,\n      ): Element|null => {\n    if (!name) {\n      return null;\n    }\n    const maxResults = 2;\n    const result = this.#queryA11yTree(parent, name, undefined, maxResults);\n    if (result.length !== 1) {\n      return null;\n    }\n    return result[0];\n  };\n\n  #queryA11yTreeOneByRole = (\n      parent: Element|Document,\n      role?: string,\n      ): Element|null => {\n    if (!role) {\n      return null;\n    }\n    const maxResults = 2;\n    const result = this.#queryA11yTree(parent, undefined, role, maxResults);\n    if (result.length !== 1) {\n      return null;\n    }\n    return result[0];\n  };\n\n  #queryA11yTreeOneByNameAndRole = (\n      parent: Element|Document,\n      name?: string,\n      role?: string,\n      ): Element|null => {\n    if (!role || !name) {\n      return null;\n    }\n    const maxResults = 2;\n    const result = this.#queryA11yTree(parent, name, role, maxResults);\n    if (result.length !== 1) {\n      return null;\n    }\n    return result[0];\n  };\n\n  // Queries the DOM tree for elements with matching accessibility name and role.\n  // It attempts to mimic https://chromedevtools.github.io/devtools-protocol/tot/Accessibility/#method-queryAXTree.\n  #queryA11yTree = (\n      parent: Element|Document,\n      name?: string,\n      role?: string,\n      maxResults = 0,\n      ): Element[] => {\n    const result: Element[] = [];\n    if (!name && !role) {\n      throw new Error('Both role and name are empty');\n    }\n    const shouldMatchName = Boolean(name);\n    const shouldMatchRole = Boolean(role);\n    const collect = (root: Element|ShadowRoot): void => {\n      const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n      do {\n        const currentNode = iter.currentNode as HTMLElement;\n        if (currentNode.shadowRoot) {\n          collect(currentNode.shadowRoot);\n        }\n        if (currentNode instanceof ShadowRoot) {\n          continue;\n        }\n        if (shouldMatchName && this.#bindings.getAccessibleName(currentNode) !== name) {\n          continue;\n        }\n        if (shouldMatchRole && this.#bindings.getAccessibleRole(currentNode) !== role) {\n          continue;\n        }\n        result.push(currentNode);\n        if (maxResults && result.length >= maxResults) {\n          return;\n        }\n      } while (iter.nextNode());\n    };\n    collect(parent instanceof Document ? document.documentElement : parent);\n    return result;\n  };\n\n  compute = (node: Node): Selector|undefined => {\n    let selector: Selector|undefined;\n    let current: Node|null = node;\n    const elements: {name: string, role: string}[] = [];\n    while (current) {\n      const role = this.#bindings.getAccessibleRole(current);\n      const name = this.#bindings.getAccessibleName(current);\n      if (!role && !name) {\n        if (current === node) {\n          break;\n        }\n      } else {\n        elements.unshift({name, role});\n        selector = this.#computeUniqueARIASelectorForElements(\n            elements,\n            current !== node,\n        );\n        if (selector) {\n          break;\n        }\n        if (current !== node) {\n          elements.shift();\n        }\n      }\n      current = current.parentNode;\n      if (current instanceof ShadowRoot) {\n        current = current.host;\n      }\n    }\n    return selector;\n  };\n}\n\n/**\n * Computes the ARIA selector for a node.\n *\n * @param node - The node to compute.\n * @returns The computed CSS selector.\n *\n * @internal\n */\nexport const computeARIASelector = (\n    node: Node,\n    bindings: AccessibilityBindings,\n    ): Selector|undefined => {\n  return new ARIASelectorComputer(bindings).compute(node);\n};\n"],
  "mappings": "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",
  "names": []
}
