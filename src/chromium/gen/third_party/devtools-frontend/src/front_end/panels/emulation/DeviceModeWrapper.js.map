{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/emulation/DeviceModeWrapper.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {DeviceModeView} from './DeviceModeView.js';\nimport type {InspectedPagePlaceholder} from './InspectedPagePlaceholder.js';\n\nlet deviceModeWrapperInstance: DeviceModeWrapper;\n\nexport class DeviceModeWrapper extends UI.Widget.VBox {\n  private readonly inspectedPagePlaceholder: InspectedPagePlaceholder;\n  private deviceModeView: DeviceModeView|null;\n  private readonly toggleDeviceModeAction: UI.ActionRegistration.Action;\n  private showDeviceModeSetting: Common.Settings.Setting<boolean>;\n\n  private constructor(inspectedPagePlaceholder: InspectedPagePlaceholder) {\n    super();\n    this.inspectedPagePlaceholder = inspectedPagePlaceholder;\n    this.deviceModeView = null;\n    this.toggleDeviceModeAction = UI.ActionRegistry.ActionRegistry.instance().getAction('emulation.toggle-device-mode');\n    const model = EmulationModel.DeviceModeModel.DeviceModeModel.instance();\n    this.showDeviceModeSetting = model.enabledSetting();\n    this.showDeviceModeSetting.setRequiresUserAction(Boolean(Root.Runtime.Runtime.queryParam('hasOtherClients')));\n    this.showDeviceModeSetting.addChangeListener(this.update.bind(this, false));\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.OverlayModel.OverlayModel, SDK.OverlayModel.Events.SCREENSHOT_REQUESTED,\n        this.screenshotRequestedFromOverlay, this);\n    this.update(true);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    inspectedPagePlaceholder: InspectedPagePlaceholder|null,\n  } = {forceNew: null, inspectedPagePlaceholder: null}): DeviceModeWrapper {\n    const {forceNew, inspectedPagePlaceholder} = opts;\n    if (!deviceModeWrapperInstance || forceNew) {\n      if (!inspectedPagePlaceholder) {\n        throw new Error(\n            `Unable to create DeviceModeWrapper: inspectedPagePlaceholder must be provided: ${new Error().stack}`);\n      }\n\n      deviceModeWrapperInstance = new DeviceModeWrapper(inspectedPagePlaceholder);\n    }\n\n    return deviceModeWrapperInstance;\n  }\n\n  toggleDeviceMode(): void {\n    this.showDeviceModeSetting.set(!this.showDeviceModeSetting.get());\n  }\n\n  isDeviceModeOn(): boolean {\n    return this.showDeviceModeSetting.get();\n  }\n\n  captureScreenshot(fullSize?: boolean, clip?: Protocol.Page.Viewport): boolean {\n    if (!this.deviceModeView) {\n      this.deviceModeView = new DeviceModeView();\n    }\n    this.deviceModeView.setNonEmulatedAvailableSize(this.inspectedPagePlaceholder.element);\n    if (fullSize) {\n      void this.deviceModeView.captureFullSizeScreenshot();\n    } else if (clip) {\n      void this.deviceModeView.captureAreaScreenshot(clip);\n    } else {\n      void this.deviceModeView.captureScreenshot();\n    }\n    return true;\n  }\n\n  private screenshotRequestedFromOverlay(event: Common.EventTarget.EventTargetEvent<Protocol.Page.Viewport>): void {\n    const clip = event.data;\n    this.captureScreenshot(false, clip);\n  }\n\n  override update(force?: boolean): void {\n    this.toggleDeviceModeAction.setToggled(this.showDeviceModeSetting.get());\n    if (!force) {\n      const showing = this.deviceModeView && this.deviceModeView.isShowing();\n      if (this.showDeviceModeSetting.get() === showing) {\n        return;\n      }\n    }\n\n    if (this.showDeviceModeSetting.get()) {\n      if (!this.deviceModeView) {\n        this.deviceModeView = new DeviceModeView();\n      }\n      this.deviceModeView.show(this.element);\n      this.inspectedPagePlaceholder.clearMinimumSize();\n      this.inspectedPagePlaceholder.show(this.deviceModeView.element);\n    } else {\n      if (this.deviceModeView) {\n        this.deviceModeView.exitHingeMode();\n        this.deviceModeView.detach();\n      }\n      this.inspectedPagePlaceholder.restoreMinimumSize();\n      this.inspectedPagePlaceholder.show(this.element);\n    }\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'emulation.capture-screenshot':\n        return DeviceModeWrapper.instance().captureScreenshot();\n\n      case 'emulation.capture-node-screenshot': {\n        const node = context.flavor(SDK.DOMModel.DOMNode);\n        if (!node) {\n          return true;\n        }\n        async function captureClip(): Promise<void> {\n          if (!node) {\n            return;\n          }\n\n          const object = await node.resolveToObject();\n          if (!object) {\n            return;\n          }\n          const result = await object.callFunction(function(this: Element) {\n            const rect = this.getBoundingClientRect();\n            const docRect = this.ownerDocument.documentElement.getBoundingClientRect();\n            return JSON.stringify({\n              x: rect.left - docRect.left,\n              y: rect.top - docRect.top,\n              width: rect.width,\n              height: rect.height,\n              scale: 1,\n            });\n          });\n          if (!result.object) {\n            throw new Error('Clipping error: could not get object data.');\n          }\n          const clip = (JSON.parse((result.object.value as string)));\n          const response = await node.domModel().target().pageAgent().invoke_getLayoutMetrics();\n          const error = response.getError();\n          const zoom = !error && response.visualViewport.zoom || 1;\n          clip.x *= zoom;\n          clip.y *= zoom;\n          clip.width *= zoom;\n          clip.height *= zoom;\n          DeviceModeWrapper.instance().captureScreenshot(false, clip);\n        }\n        void captureClip();\n        return true;\n      }\n\n      case 'emulation.capture-full-height-screenshot':\n        return DeviceModeWrapper.instance().captureScreenshot(true);\n\n      case 'emulation.toggle-device-mode':\n        DeviceModeWrapper.instance().toggleDeviceMode();\n        return true;\n    }\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
