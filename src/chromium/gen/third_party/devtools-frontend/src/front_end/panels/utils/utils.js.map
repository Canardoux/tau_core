{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/utils/utils.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport type * as Diff from '../../third_party/diff/diff.js';\nimport * as DiffView from '../../ui/components/diff_view/diff_view.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Snippets from '../snippets/snippets.js';\n\nconst UIStrings = {\n  /**\n   *@description Tooltip to explain the resource's overridden status\n   */\n  requestContentHeadersOverridden: 'Both request content and headers are overridden',\n  /**\n   *@description Tooltip to explain the resource's overridden status\n   */\n  requestContentOverridden: 'Request content is overridden',\n  /**\n   *@description Tooltip to explain the resource's overridden status\n   */\n  requestHeadersOverridden: 'Request headers are overridden',\n  /**\n   *@description Tooltip to explain why the request has warning icon\n   */\n  thirdPartyPhaseout:\n      'Cookies for this request are blocked either because of Chrome flags or browser configuration. Learn more in the Issues panel.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/utils/utils.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// These utilities are packaged in a class to allow unittests to stub or spy the implementation.\nexport class PanelUtils {\n  static isFailedNetworkRequest(request: SDK.NetworkRequest.NetworkRequest|null): boolean {\n    if (!request) {\n      return false;\n    }\n    if (request.failed && !request.statusCode) {\n      return true;\n    }\n    if (request.statusCode >= 400) {\n      return true;\n    }\n    const signedExchangeInfo = request.signedExchangeInfo();\n    if (signedExchangeInfo !== null && Boolean(signedExchangeInfo.errors)) {\n      return true;\n    }\n    if (request.webBundleInfo()?.errorMessage || request.webBundleInnerRequestInfo()?.errorMessage) {\n      return true;\n    }\n    if (request.corsErrorStatus()) {\n      return true;\n    }\n    return false;\n  }\n\n  static createIconElement(iconData: {iconName: string, color: string}, title: string): HTMLElement {\n    const iconElement = document.createElement('div');\n    iconElement.title = title;\n    const url = new URL(`../../Images/${iconData.iconName}.svg`, import.meta.url).toString();\n    iconElement.style.setProperty('mask', `url('${url}')  no-repeat center /99%`);\n    iconElement.style.setProperty('background-color', iconData.color);\n    return iconElement;\n  }\n\n  static getIconForNetworkRequest(request: SDK.NetworkRequest.NetworkRequest): HTMLElement {\n    let type = request.resourceType();\n    let iconElement: HTMLElement;\n\n    if (PanelUtils.isFailedNetworkRequest(request)) {\n      let iconData = undefined;\n      // Failed prefetch network requests are displayed as warnings instead of errors.\n      if (request.resourceType() === Common.ResourceType.resourceTypes.Prefetch) {\n        iconData = {\n          iconName: 'warning-filled',\n          color: 'var(--icon-warning)',\n        };\n      } else {\n        iconData = {\n          iconName: 'cross-circle-filled',\n          color: 'var(--icon-error)',\n        };\n      }\n\n      iconElement = PanelUtils.createIconElement(iconData, type.title());\n      iconElement.classList.add('icon');\n\n      return iconElement;\n    }\n\n    if (request.hasThirdPartyCookiePhaseoutIssue()) {\n      const iconData = {\n        iconName: 'warning-filled',\n        color: 'var(--icon-warning)',\n      };\n      iconElement = this.createIconElement(iconData, i18nString(UIStrings.thirdPartyPhaseout));\n      iconElement.classList.add('icon');\n\n      return iconElement;\n    }\n\n    const isHeaderOverriden = request.hasOverriddenHeaders();\n    const isContentOverriden = request.hasOverriddenContent;\n    if (isHeaderOverriden || isContentOverriden) {\n      const iconData = {\n        iconName: 'document',\n        color: 'var(--icon-default)',\n      };\n\n      let title: Common.UIString.LocalizedString;\n      if (isHeaderOverriden && isContentOverriden) {\n        title = i18nString(UIStrings.requestContentHeadersOverridden);\n      } else if (isContentOverriden) {\n        title = i18nString(UIStrings.requestContentOverridden);\n      } else {\n        title = i18nString(UIStrings.requestHeadersOverridden);\n      }\n\n      const iconChildElement = this.createIconElement(iconData, title);\n      iconChildElement.classList.add('icon');\n\n      iconElement = document.createElement('div');\n      iconElement.classList.add('network-override-marker');\n      iconElement.appendChild(iconChildElement);\n\n      return iconElement;\n    }\n\n    // Pick icon based on MIME type in the following cases:\n    // - If the MIME type is 'image': some images have request type of 'fetch' or etc.\n    // - If the request type is 'fetch': everything fetched by service worker has request type 'fetch'.\n    // - If the request type is 'other' and MIME type is 'script', e.g. for wasm files\n    const typeFromMime = Common.ResourceType.ResourceType.fromMimeType(request.mimeType);\n\n    if (typeFromMime !== type && typeFromMime !== Common.ResourceType.resourceTypes.Other) {\n      if (type === Common.ResourceType.resourceTypes.Fetch) {\n        type = typeFromMime;\n      } else if (typeFromMime === Common.ResourceType.resourceTypes.Image) {\n        type = typeFromMime;\n      } else if (\n          type === Common.ResourceType.resourceTypes.Other &&\n          typeFromMime === Common.ResourceType.resourceTypes.Script) {\n        type = typeFromMime;\n      }\n    }\n\n    if (type === Common.ResourceType.resourceTypes.Image) {\n      const previewImage = document.createElement('img');\n      previewImage.classList.add('image-network-icon-preview');\n      previewImage.alt = request.resourceType().title();\n      void request.populateImageSource((previewImage as HTMLImageElement));\n\n      iconElement = document.createElement('div');\n      iconElement.classList.add('image', 'icon');\n      iconElement.appendChild(previewImage);\n\n      return iconElement;\n    }\n\n    // Exclude Manifest here because it has mimeType:application/json but it has its own icon\n    if (type !== Common.ResourceType.resourceTypes.Manifest &&\n        Common.ResourceType.ResourceType.simplifyContentType(request.mimeType) === 'application/json') {\n      const iconData = {\n        iconName: 'file-json',\n        color: 'var(--icon-file-script)',\n      };\n      iconElement = this.createIconElement(iconData, request.resourceType().title());\n      iconElement.classList.add('icon');\n\n      return iconElement;\n    }\n\n    // Others\n    const iconData = PanelUtils.iconDataForResourceType(type);\n    iconElement = this.createIconElement(iconData, request.resourceType().title());\n    iconElement.classList.add('icon');\n    return iconElement;\n  }\n\n  static iconDataForResourceType(resourceType: Common.ResourceType.ResourceType): {iconName: string, color: string} {\n    if (resourceType.isDocument()) {\n      return {iconName: 'file-document', color: 'var(--icon-file-document)'};\n    }\n    if (resourceType.isImage()) {\n      return {iconName: 'file-image', color: 'var(--icon-file-image)'};\n    }\n    if (resourceType.isFont()) {\n      return {iconName: 'file-font', color: 'var(--icon-file-font)'};\n    }\n    if (resourceType.isScript()) {\n      return {iconName: 'file-script', color: 'var(--icon-file-script)'};\n    }\n    if (resourceType.isStyleSheet()) {\n      return {iconName: 'file-stylesheet', color: 'var(--icon-file-styles)'};\n    }\n    if (resourceType.name() === Common.ResourceType.resourceTypes.Manifest.name()) {\n      return {iconName: 'file-manifest', color: 'var(--icon-default)'};\n    }\n    if (resourceType.name() === Common.ResourceType.resourceTypes.Wasm.name()) {\n      return {iconName: 'file-wasm', color: 'var(--icon-default)'};\n    }\n    if (resourceType.name() === Common.ResourceType.resourceTypes.WebSocket.name()) {\n      return {iconName: 'file-websocket', color: 'var(--icon-default)'};\n    }\n    if (resourceType.name() === Common.ResourceType.resourceTypes.Media.name()) {\n      return {iconName: 'file-media', color: 'var(--icon-file-media)'};\n    }\n    if (resourceType.isWebbundle()) {\n      return {iconName: 'bundle', color: 'var(--icon-default)'};\n    }\n\n    if (resourceType.name() === Common.ResourceType.resourceTypes.Fetch.name() ||\n        resourceType.name() === Common.ResourceType.resourceTypes.XHR.name()) {\n      return {iconName: 'file-fetch-xhr', color: 'var(--icon-default)'};\n    }\n\n    return {iconName: 'file-generic', color: 'var(--icon-default)'};\n  }\n\n  static getIconForSourceFile(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      IconButton.FileSourceIcon.FileSourceIcon {\n    const binding = Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode);\n    const networkPersistenceManager = Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance();\n    let iconType = 'document';\n    let hasDotBadge = false;\n    let isDotPurple = false;\n    if (binding) {\n      if (Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(binding.fileSystem)) {\n        iconType = 'snippet';\n      }\n      hasDotBadge = true;\n      isDotPurple = networkPersistenceManager.project() === binding.fileSystem.project();\n    } else if (networkPersistenceManager.isActiveHeaderOverrides(uiSourceCode)) {\n      hasDotBadge = true;\n      isDotPurple = true;\n    } else {\n      if (Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(uiSourceCode)) {\n        iconType = 'snippet';\n      }\n    }\n\n    const icon = new IconButton.FileSourceIcon.FileSourceIcon(iconType);\n    icon.data = {\n      contentType: uiSourceCode.contentType().name(),\n      hasDotBadge,\n      isDotPurple,\n    };\n\n    if (binding) {\n      UI.Tooltip.Tooltip.install(\n          icon, Persistence.PersistenceUtils.PersistenceUtils.tooltipForUISourceCode(uiSourceCode));\n    }\n\n    return icon;\n  }\n\n  static async formatCSSChangesFromDiff(diff: Diff.Diff.DiffArray): Promise<string> {\n    const indent = '  ';\n    const {originalLines, currentLines, rows} = DiffView.DiffView.buildDiffRows(diff);\n    const originalRuleMaps = await buildStyleRuleMaps(originalLines.join('\\n'));\n    const currentRuleMaps = await buildStyleRuleMaps(currentLines.join('\\n'));\n\n    let changes = '';\n    let recordedOriginalSelector, recordedCurrentSelector;\n    let hasOpenDeclarationBlock = false;\n    for (const {currentLineNumber, originalLineNumber, type} of rows) {\n      if (type !== DiffView.DiffView.RowType.DELETION && type !== DiffView.DiffView.RowType.ADDITION) {\n        continue;\n      }\n\n      const isDeletion = type === DiffView.DiffView.RowType.DELETION;\n      const lines = isDeletion ? originalLines : currentLines;\n      // Diff line arrays starts at 0, but line numbers start at 1.\n      const lineIndex = isDeletion ? originalLineNumber - 1 : currentLineNumber - 1;\n      const line = lines[lineIndex].trim();\n      const {declarationIDToStyleRule, styleRuleIDToStyleRule} = isDeletion ? originalRuleMaps : currentRuleMaps;\n      let styleRule;\n      let prefix = '';\n      if (declarationIDToStyleRule.has(lineIndex)) {\n        styleRule = declarationIDToStyleRule.get(lineIndex) as FormattableStyleRule;\n        const selector = styleRule.selector;\n        // Use the equality of selector strings as a best-effort check for the equality of style rules.\n        if (selector !== recordedOriginalSelector && selector !== recordedCurrentSelector) {\n          prefix += `${selector} {\\n`;\n        }\n        prefix += indent;\n        hasOpenDeclarationBlock = true;\n      } else {\n        if (hasOpenDeclarationBlock) {\n          prefix = '}\\n\\n';\n          hasOpenDeclarationBlock = false;\n        }\n        if (styleRuleIDToStyleRule.has(lineIndex)) {\n          styleRule = styleRuleIDToStyleRule.get(lineIndex);\n        }\n      }\n\n      const processedLine = isDeletion ? `/* ${line} */` : line;\n      changes += prefix + processedLine + '\\n';\n      if (isDeletion) {\n        recordedOriginalSelector = styleRule?.selector;\n      } else {\n        recordedCurrentSelector = styleRule?.selector;\n      }\n    }\n\n    if (changes.length > 0) {\n      changes += '}';\n    }\n    return changes;\n  }\n\n  static highlightElement(element: HTMLElement): void {\n    element.scrollIntoViewIfNeeded();\n    element.animate(\n        [\n          {offset: 0, backgroundColor: 'rgba(255, 255, 0, 0.2)'},\n          {offset: 0.1, backgroundColor: 'rgba(255, 255, 0, 0.7)'},\n          {offset: 1, backgroundColor: 'transparent'},\n        ],\n        {duration: 2000, easing: 'cubic-bezier(0, 0, 0.2, 1)'});\n  }\n}\n\ninterface FormattableStyleRule {\n  rule: Formatter.FormatterWorkerPool.CSSRule;\n  selector: string;\n}\n\nasync function buildStyleRuleMaps(content: string): Promise<{\n  declarationIDToStyleRule: Map<number, FormattableStyleRule>,\n  styleRuleIDToStyleRule: Map<number, FormattableStyleRule>,\n}> {\n  const rules = await new Promise<Formatter.FormatterWorkerPool.CSSRule[]>(res => {\n    const rules: Formatter.FormatterWorkerPool.CSSRule[] = [];\n    Formatter.FormatterWorkerPool.formatterWorkerPool().parseCSS(content, (isLastChunk, currentRules) => {\n      rules.push(...currentRules);\n      if (isLastChunk) {\n        res(rules);\n      }\n    });\n  });\n\n  // We use line numbers as unique IDs for rules and declarations\n  const declarationIDToStyleRule = new Map<number, FormattableStyleRule>();\n  const styleRuleIDToStyleRule = new Map<number, FormattableStyleRule>();\n  for (const rule of rules) {\n    if ('styleRange' in rule) {\n      const selector = rule.selectorText.split('\\n').pop()?.trim();\n      if (!selector) {\n        continue;\n      }\n      const styleRule = {rule, selector};\n      styleRuleIDToStyleRule.set(rule.styleRange.startLine, styleRule);\n      for (const property of rule.properties) {\n        declarationIDToStyleRule.set(property.range.startLine, styleRule);\n      }\n    }\n  }\n  return {declarationIDToStyleRule, styleRuleIDToStyleRule};\n}\n"],
  "mappings": "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",
  "names": ["iconData", "rules"]
}
