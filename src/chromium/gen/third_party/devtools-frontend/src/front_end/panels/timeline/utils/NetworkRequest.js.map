{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/timeline/utils/NetworkRequest.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../../core/common/common.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport type * as Trace from '../../../models/trace/trace.js';\n\nexport function getNetworkRequest(syntheticNetworkRequest: Trace.Types.Events.SyntheticNetworkRequest):\n    SDK.NetworkRequest.NetworkRequest|undefined|null {\n  const url = syntheticNetworkRequest.args.data.url as Platform.DevToolsPath.UrlString;\n  const urlWithoutHash = Common.ParsedURL.ParsedURL.urlWithoutHash(url) as Platform.DevToolsPath.UrlString;\n  const resource = Bindings.ResourceUtils.resourceForURL(url) || Bindings.ResourceUtils.resourceForURL(urlWithoutHash);\n  return resource?.request;\n}\n\nexport function createTimelineNetworkRequest(syntheticNetworkRequest: Trace.Types.Events.SyntheticNetworkRequest):\n    TimelineNetworkRequest|null {\n  const request = getNetworkRequest(syntheticNetworkRequest);\n  return request ? new TimelineNetworkRequest(request) : null;\n}\n\n// Add a wrapper class here.\n// The reason is the `Open in Network panel` option is handled by the context menu provider, which will add this\n// option for all supporting types. And there are a lot of context menu providers that support\n// `SDK.NetworkRequest.NetworkRequest`, for example `Override content` by PersistenceActions, but we so far just want\n// the one to reveal in network panel, so add a new class which will only be supported by Network panel. Also we want to\n// have a different behavior(select the network request) from the `SDK.NetworkRequest.NetworkRequest` (highlight the\n// network request once).\nexport class TimelineNetworkRequest {\n  #request: SDK.NetworkRequest.NetworkRequest;\n  constructor(request: SDK.NetworkRequest.NetworkRequest) {\n    this.#request = request;\n  }\n\n  get request(): SDK.NetworkRequest.NetworkRequest {\n    return this.#request;\n  }\n}\n"],
  "mappings": ";AAGA,YAAY,YAAY;AAGxB,YAAY,cAAc;AAGnB,gBAAS,kBAAkB,yBACmB;AACnD,QAAM,MAAM,wBAAwB,KAAK,KAAK;AAC9C,QAAM,iBAAiB,OAAO,UAAU,UAAU,eAAe,GAAG;AACpE,QAAM,WAAW,SAAS,cAAc,eAAe,GAAG,KAAK,SAAS,cAAc,eAAe,cAAc;AACnH,SAAO,UAAU;AACnB;AAEO,gBAAS,6BAA6B,yBACb;AAC9B,QAAM,UAAU,kBAAkB,uBAAuB;AACzD,SAAO,UAAU,IAAI,uBAAuB,OAAO,IAAI;AACzD;AASO,aAAM,uBAAuB;AAAA,EAClC;AAAA,EACA,YAAY,SAA4C;AACtD,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,IAAI,UAA6C;AAC/C,WAAO,KAAK;AAAA,EACd;AACF;",
  "names": []
}
