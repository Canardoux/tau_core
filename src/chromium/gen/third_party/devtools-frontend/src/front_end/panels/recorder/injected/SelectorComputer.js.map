{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/recorder/injected/SelectorComputer.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {SelectorType} from '../../../third_party/puppeteer-replay/puppeteer-replay.js';\n\nimport type {Logger} from './Logger.js';\nimport {MonotonicArray} from './MonotonicArray.js';\nimport {\n  type AccessibilityBindings,\n  computeARIASelector,\n} from './selectors/ARIASelector.js';\nimport {computeCSSSelector} from './selectors/CSSSelector.js';\nimport {computePierceSelector} from './selectors/PierceSelector.js';\nimport type {Selector} from './selectors/Selector.js';\nimport {computeTextSelector} from './selectors/TextSelector.js';\nimport {computeXPath} from './selectors/XPath.js';\n\nconst prefixSelector = (\n    selector: Selector|undefined,\n    prefix: string,\n    ): Selector|undefined => {\n  if (selector === undefined) {\n    return;\n  }\n  if (typeof selector === 'string') {\n    return `${prefix}/${selector}`;\n  }\n  return selector.map(selector => `${prefix}/${selector}`);\n};\n\nexport class SelectorComputer {\n  #customAttributes = [\n    // Most common attributes first.\n    'data-testid',\n    'data-test',\n    'data-qa',\n    'data-cy',\n    'data-test-id',\n    'data-qa-id',\n    'data-testing',\n  ];\n\n  #bindings: AccessibilityBindings;\n  #logger: Logger;\n  #nodes = new MonotonicArray<Node>();\n  #selectorFunctionsInOrder: Array<(node: Node) => Selector | undefined>;\n\n  constructor(\n      bindings: AccessibilityBindings,\n      logger: Logger,\n      customAttribute = '',\n      selectorTypesToRecord?: SelectorType[],\n  ) {\n    this.#bindings = bindings;\n    this.#logger = logger;\n\n    let selectorOrder = [\n      'aria',\n      'css',\n      'xpath',\n      'pierce',\n      'text',\n    ] as SelectorType[];\n    if (customAttribute) {\n      // Custom DOM attributes indicate a preference for CSS/XPath selectors.\n      this.#customAttributes.unshift(customAttribute);\n      selectorOrder = [\n        'css',\n        'xpath',\n        'pierce',\n        'aria',\n        'text',\n      ] as SelectorType[];\n    }\n\n    this.#selectorFunctionsInOrder = selectorOrder\n                                         .filter(type => {\n                                           if (selectorTypesToRecord) {\n                                             return selectorTypesToRecord.includes(type);\n                                           }\n                                           return true;\n                                         })\n                                         .map(selectorType => {\n                                           switch (selectorType) {\n                                             case 'css':\n                                               return this.getCSSSelector.bind(this);\n                                             case 'xpath':\n                                               return this.getXPathSelector.bind(this);\n                                             case 'pierce':\n                                               return this.getPierceSelector.bind(this);\n                                             case 'aria':\n                                               return this.getARIASelector.bind(this);\n                                             case 'text':\n                                               return this.getTextSelector.bind(this);\n                                             default:\n                                               throw new Error('Unknown selector type: ' + selectorType);\n                                           }\n                                         });\n  }\n\n  getSelectors(node: Node): Selector[] {\n    const selectors: Selector[] = [];\n    for (const getSelector of this.#selectorFunctionsInOrder) {\n      const selector = getSelector(node);\n      if (selector) {\n        selectors.push(selector);\n      }\n    }\n    return selectors;\n  }\n\n  getCSSSelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getCSSSelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return computeCSSSelector(node, this.#customAttributes);\n    });\n  }\n\n  getTextSelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getTextSelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return prefixSelector(computeTextSelector(node), 'text');\n    });\n  }\n\n  getXPathSelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getXPathSelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return prefixSelector(\n          computeXPath(node, true, this.#customAttributes),\n          'xpath',\n      );\n    });\n  }\n\n  getPierceSelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getPierceSelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return prefixSelector(\n          computePierceSelector(node, this.#customAttributes),\n          'pierce',\n      );\n    });\n  }\n\n  getARIASelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getARIASelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return prefixSelector(computeARIASelector(node, this.#bindings), 'aria');\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["selector"]
}
