{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/linear_memory_inspector/components/LinearMemoryInspectorUtils.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const HEXADECIMAL_REGEXP = /^0x[a-fA-F0-9]+$/;\nexport const DECIMAL_REGEXP = /^0$|[1-9]\\d*$/;\n\nexport function toHexString(data: {number: number, pad: number, prefix: boolean}): string {\n  const hex = data.number.toString(16).padStart(data.pad, '0');\n  const upperHex = hex.toUpperCase();\n  return data.prefix ? '0x' + upperHex : upperHex;\n}\n\nexport function formatAddress(address: number): string {\n  return toHexString({number: address, pad: 8, prefix: true});\n}\n\nexport function parseAddress(address: string): number|undefined {\n  const hexMatch = address.match(HEXADECIMAL_REGEXP);\n  const decMatch = address.match(DECIMAL_REGEXP);\n\n  let newAddress = undefined;\n  if (hexMatch && hexMatch[0].length === address.length) {\n    newAddress = parseInt(address, 16);\n  } else if (decMatch && decMatch[0].length === address.length) {\n    newAddress = parseInt(address, 10);\n  }\n  return newAddress;\n}\n"],
  "mappings": ";AAIO,aAAM,qBAAqB;AAC3B,aAAM,iBAAiB;AAEvB,gBAAS,YAAY,MAA8D;AACxF,QAAM,MAAM,KAAK,OAAO,SAAS,EAAE,EAAE,SAAS,KAAK,KAAK,GAAG;AAC3D,QAAM,WAAW,IAAI,YAAY;AACjC,SAAO,KAAK,SAAS,OAAO,WAAW;AACzC;AAEO,gBAAS,cAAc,SAAyB;AACrD,SAAO,YAAY,EAAC,QAAQ,SAAS,KAAK,GAAG,QAAQ,KAAI,CAAC;AAC5D;AAEO,gBAAS,aAAa,SAAmC;AAC9D,QAAM,WAAW,QAAQ,MAAM,kBAAkB;AACjD,QAAM,WAAW,QAAQ,MAAM,cAAc;AAE7C,MAAI,aAAa;AACjB,MAAI,YAAY,SAAS,CAAC,EAAE,WAAW,QAAQ,QAAQ;AACrD,iBAAa,SAAS,SAAS,EAAE;AAAA,EACnC,WAAW,YAAY,SAAS,CAAC,EAAE,WAAW,QAAQ,QAAQ;AAC5D,iBAAa,SAAS,SAAS,EAAE;AAAA,EACnC;AACA,SAAO;AACT;",
  "names": []
}
