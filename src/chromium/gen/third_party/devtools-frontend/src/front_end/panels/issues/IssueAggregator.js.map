{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/issues/IssueAggregator.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\n\ntype AggregationKeyTag = {\n  aggregationKeyTag: undefined,\n};\n\n/**\n * An opaque type for the key which we use to aggregate issues. The key must be\n * chosen such that if two aggregated issues have the same aggregation key, then\n * they also have the same issue code.\n */\nexport type AggregationKey = {\n  toString(): string,\n}&AggregationKeyTag;\n\n/**\n * An `AggregatedIssue` representes a number of `IssuesManager.Issue.Issue` objects that are displayed together.\n * Currently only grouping by issue code, is supported. The class provides helpers to support displaying\n * of all resources that are affected by the aggregated issues.\n */\nexport class AggregatedIssue extends IssuesManager.Issue.Issue {\n  #affectedCookies = new Map<string, {\n    cookie: Protocol.Audits.AffectedCookie,\n    hasRequest: boolean,\n  }>();\n  #affectedRawCookieLines = new Map<string, {rawCookieLine: string, hasRequest: boolean}>();\n  #affectedRequests = new Map<string, Protocol.Audits.AffectedRequest>();\n  #affectedLocations = new Map<string, Protocol.Audits.SourceCodeLocation>();\n  #heavyAdIssues = new Set<IssuesManager.HeavyAdIssue.HeavyAdIssue>();\n  #blockedByResponseDetails = new Map<string, Protocol.Audits.BlockedByResponseIssueDetails>();\n  #bounceTrackingSites = new Set<string>();\n  #corsIssues = new Set<IssuesManager.CorsIssue.CorsIssue>();\n  #cspIssues = new Set<IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue>();\n  #deprecationIssues = new Set<IssuesManager.DeprecationIssue.DeprecationIssue>();\n  #issueKind = IssuesManager.Issue.IssueKind.IMPROVEMENT;\n  #lowContrastIssues = new Set<IssuesManager.LowTextContrastIssue.LowTextContrastIssue>();\n  #cookieDeprecationMetadataIssues =\n      new Set<IssuesManager.CookieDeprecationMetadataIssue.CookieDeprecationMetadataIssue>();\n  #mixedContentIssues = new Set<IssuesManager.MixedContentIssue.MixedContentIssue>();\n  #sharedArrayBufferIssues = new Set<IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue>();\n  #quirksModeIssues = new Set<IssuesManager.QuirksModeIssue.QuirksModeIssue>();\n  #attributionReportingIssues = new Set<IssuesManager.AttributionReportingIssue.AttributionReportingIssue>();\n  #genericIssues = new Set<IssuesManager.GenericIssue.GenericIssue>();\n  #representative?: IssuesManager.Issue.Issue;\n  #aggregatedIssuesCount = 0;\n  #key: AggregationKey;\n\n  constructor(code: string, aggregationKey: AggregationKey) {\n    super(code);\n    this.#key = aggregationKey;\n  }\n\n  override primaryKey(): string {\n    throw new Error('This should never be called');\n  }\n\n  aggregationKey(): AggregationKey {\n    return this.#key;\n  }\n\n  override getBlockedByResponseDetails(): Iterable<Protocol.Audits.BlockedByResponseIssueDetails> {\n    return this.#blockedByResponseDetails.values();\n  }\n\n  override cookies(): Iterable<Protocol.Audits.AffectedCookie> {\n    return Array.from(this.#affectedCookies.values()).map(x => x.cookie);\n  }\n\n  getRawCookieLines(): Iterable<{rawCookieLine: string, hasRequest: boolean}> {\n    return this.#affectedRawCookieLines.values();\n  }\n\n  override sources(): Iterable<Protocol.Audits.SourceCodeLocation> {\n    return this.#affectedLocations.values();\n  }\n\n  getBounceTrackingSites(): Iterable<string> {\n    return this.#bounceTrackingSites.values();\n  }\n\n  cookiesWithRequestIndicator(): Iterable<{\n    cookie: Protocol.Audits.AffectedCookie,\n    hasRequest: boolean,\n  }> {\n    return this.#affectedCookies.values();\n  }\n\n  getHeavyAdIssues(): Iterable<IssuesManager.HeavyAdIssue.HeavyAdIssue> {\n    return this.#heavyAdIssues;\n  }\n\n  getCookieDeprecationMetadataIssues():\n      Iterable<IssuesManager.CookieDeprecationMetadataIssue.CookieDeprecationMetadataIssue> {\n    return this.#cookieDeprecationMetadataIssues;\n  }\n\n  getMixedContentIssues(): Iterable<IssuesManager.MixedContentIssue.MixedContentIssue> {\n    return this.#mixedContentIssues;\n  }\n\n  getCorsIssues(): Set<IssuesManager.CorsIssue.CorsIssue> {\n    return this.#corsIssues;\n  }\n\n  getCspIssues(): Iterable<IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue> {\n    return this.#cspIssues;\n  }\n\n  getDeprecationIssues(): Iterable<IssuesManager.DeprecationIssue.DeprecationIssue> {\n    return this.#deprecationIssues;\n  }\n\n  getLowContrastIssues(): Iterable<IssuesManager.LowTextContrastIssue.LowTextContrastIssue> {\n    return this.#lowContrastIssues;\n  }\n\n  override requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return this.#affectedRequests.values();\n  }\n\n  getSharedArrayBufferIssues(): Iterable<IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue> {\n    return this.#sharedArrayBufferIssues;\n  }\n\n  getQuirksModeIssues(): Iterable<IssuesManager.QuirksModeIssue.QuirksModeIssue> {\n    return this.#quirksModeIssues;\n  }\n\n  getAttributionReportingIssues(): ReadonlySet<IssuesManager.AttributionReportingIssue.AttributionReportingIssue> {\n    return this.#attributionReportingIssues;\n  }\n\n  getGenericIssues(): ReadonlySet<IssuesManager.GenericIssue.GenericIssue> {\n    return this.#genericIssues;\n  }\n\n  getDescription(): IssuesManager.MarkdownIssueDescription.MarkdownIssueDescription|null {\n    if (this.#representative) {\n      return this.#representative.getDescription();\n    }\n    return null;\n  }\n\n  getCategory(): IssuesManager.Issue.IssueCategory {\n    if (this.#representative) {\n      return this.#representative.getCategory();\n    }\n    return IssuesManager.Issue.IssueCategory.OTHER;\n  }\n\n  getAggregatedIssuesCount(): number {\n    return this.#aggregatedIssuesCount;\n  }\n\n  /**\n   * Produces a primary key for a cookie. Use this instead of `JSON.stringify` in\n   * case new fields are added to `AffectedCookie`.\n   */\n  #keyForCookie(cookie: Protocol.Audits.AffectedCookie): string {\n    const {domain, path, name} = cookie;\n    return `${domain};${path};${name}`;\n  }\n\n  addInstance(issue: IssuesManager.Issue.Issue): void {\n    this.#aggregatedIssuesCount++;\n    if (!this.#representative) {\n      this.#representative = issue;\n    }\n    this.#issueKind = IssuesManager.Issue.unionIssueKind(this.#issueKind, issue.getKind());\n    let hasRequest = false;\n    for (const request of issue.requests()) {\n      hasRequest = true;\n      if (!this.#affectedRequests.has(request.requestId)) {\n        this.#affectedRequests.set(request.requestId, request);\n      }\n    }\n    for (const cookie of issue.cookies()) {\n      const key = this.#keyForCookie(cookie);\n      if (!this.#affectedCookies.has(key)) {\n        this.#affectedCookies.set(key, {cookie, hasRequest});\n      }\n    }\n    for (const rawCookieLine of issue.rawCookieLines()) {\n      if (!this.#affectedRawCookieLines.has(rawCookieLine)) {\n        this.#affectedRawCookieLines.set(rawCookieLine, {rawCookieLine, hasRequest});\n      }\n    }\n    for (const site of issue.trackingSites()) {\n      if (!this.#bounceTrackingSites.has(site)) {\n        this.#bounceTrackingSites.add(site);\n      }\n    }\n    for (const location of issue.sources()) {\n      const key = JSON.stringify(location);\n      if (!this.#affectedLocations.has(key)) {\n        this.#affectedLocations.set(key, location);\n      }\n    }\n    if (issue instanceof IssuesManager.CookieDeprecationMetadataIssue.CookieDeprecationMetadataIssue) {\n      this.#cookieDeprecationMetadataIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.MixedContentIssue.MixedContentIssue) {\n      this.#mixedContentIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.HeavyAdIssue.HeavyAdIssue) {\n      this.#heavyAdIssues.add(issue);\n    }\n    for (const details of issue.getBlockedByResponseDetails()) {\n      const key = JSON.stringify(details, ['parentFrame', 'blockedFrame', 'requestId', 'frameId', 'reason', 'request']);\n      this.#blockedByResponseDetails.set(key, details);\n    }\n    if (issue instanceof IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue) {\n      this.#cspIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.DeprecationIssue.DeprecationIssue) {\n      this.#deprecationIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue) {\n      this.#sharedArrayBufferIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.LowTextContrastIssue.LowTextContrastIssue) {\n      this.#lowContrastIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.CorsIssue.CorsIssue) {\n      this.#corsIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.QuirksModeIssue.QuirksModeIssue) {\n      this.#quirksModeIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.AttributionReportingIssue.AttributionReportingIssue) {\n      this.#attributionReportingIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.GenericIssue.GenericIssue) {\n      this.#genericIssues.add(issue);\n    }\n  }\n\n  getKind(): IssuesManager.Issue.IssueKind {\n    return this.#issueKind;\n  }\n\n  override isHidden(): boolean {\n    return this.#representative?.isHidden() || false;\n  }\n\n  override setHidden(_value: boolean): void {\n    throw new Error('Should not call setHidden on aggregatedIssue');\n  }\n}\n\nexport class IssueAggregator extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #aggregatedIssuesByKey = new Map<AggregationKey, AggregatedIssue>();\n  readonly #hiddenAggregatedIssuesByKey = new Map<AggregationKey, AggregatedIssue>();\n  constructor(private readonly issuesManager: IssuesManager.IssuesManager.IssuesManager) {\n    super();\n    this.issuesManager.addEventListener(IssuesManager.IssuesManager.Events.ISSUE_ADDED, this.#onIssueAdded, this);\n    this.issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.FULL_UPDATE_REQUIRED, this.#onFullUpdateRequired, this);\n    for (const issue of this.issuesManager.issues()) {\n      this.#aggregateIssue(issue);\n    }\n  }\n\n  #onIssueAdded(event: Common.EventTarget.EventTargetEvent<IssuesManager.IssuesManager.IssueAddedEvent>): void {\n    this.#aggregateIssue(event.data.issue);\n  }\n\n  #onFullUpdateRequired(): void {\n    this.#aggregatedIssuesByKey.clear();\n    this.#hiddenAggregatedIssuesByKey.clear();\n    for (const issue of this.issuesManager.issues()) {\n      this.#aggregateIssue(issue);\n    }\n    this.dispatchEventToListeners(Events.FULL_UPDATE_REQUIRED);\n  }\n\n  #aggregateIssue(issue: IssuesManager.Issue.Issue): AggregatedIssue|undefined {\n    const excludeFromAggregate = [\n      Protocol.Audits.CookieWarningReason.WarnThirdPartyCookieHeuristic,\n      Protocol.Audits.CookieWarningReason.WarnDeprecationTrialMetadata,\n    ];\n\n    if (excludeFromAggregate.some(exclude => issue.code().includes(exclude))) {\n      return;\n    }\n\n    const map = issue.isHidden() ? this.#hiddenAggregatedIssuesByKey : this.#aggregatedIssuesByKey;\n    const aggregatedIssue = this.#aggregateIssueByStatus(map, issue);\n    this.dispatchEventToListeners(Events.AGGREGATED_ISSUE_UPDATED, aggregatedIssue);\n    return aggregatedIssue;\n  }\n\n  #aggregateIssueByStatus(aggregatedIssuesMap: Map<AggregationKey, AggregatedIssue>, issue: IssuesManager.Issue.Issue):\n      AggregatedIssue {\n    const key = issue.code() as unknown as AggregationKey;\n    let aggregatedIssue = aggregatedIssuesMap.get(key);\n    if (!aggregatedIssue) {\n      aggregatedIssue = new AggregatedIssue(issue.code(), key);\n      aggregatedIssuesMap.set(key, aggregatedIssue);\n    }\n    aggregatedIssue.addInstance(issue);\n    return aggregatedIssue;\n  }\n\n  aggregatedIssues(): Iterable<AggregatedIssue> {\n    return [...this.#aggregatedIssuesByKey.values(), ...this.#hiddenAggregatedIssuesByKey.values()];\n  }\n\n  hiddenAggregatedIssues(): Iterable<AggregatedIssue> {\n    return this.#hiddenAggregatedIssuesByKey.values();\n  }\n\n  aggregatedIssueCodes(): Set<AggregationKey> {\n    return new Set([...this.#aggregatedIssuesByKey.keys(), ...this.#hiddenAggregatedIssuesByKey.keys()]);\n  }\n\n  aggregatedIssueCategories(): Set<IssuesManager.Issue.IssueCategory> {\n    const result = new Set<IssuesManager.Issue.IssueCategory>();\n    for (const issue of this.#aggregatedIssuesByKey.values()) {\n      result.add(issue.getCategory());\n    }\n    return result;\n  }\n\n  aggregatedIssueKinds(): Set<IssuesManager.Issue.IssueKind> {\n    const result = new Set<IssuesManager.Issue.IssueKind>();\n    for (const issue of this.#aggregatedIssuesByKey.values()) {\n      result.add(issue.getKind());\n    }\n    return result;\n  }\n\n  numberOfAggregatedIssues(): number {\n    return this.#aggregatedIssuesByKey.size;\n  }\n\n  numberOfHiddenAggregatedIssues(): number {\n    return this.#hiddenAggregatedIssuesByKey.size;\n  }\n\n  keyForIssue(issue: IssuesManager.Issue.Issue<string>): AggregationKey {\n    return issue.code() as unknown as AggregationKey;\n  }\n}\n\nexport const enum Events {\n  AGGREGATED_ISSUE_UPDATED = 'AggregatedIssueUpdated',\n  FULL_UPDATE_REQUIRED = 'FullUpdateRequired',\n}\n\nexport type EventTypes = {\n  [Events.AGGREGATED_ISSUE_UPDATED]: AggregatedIssue,\n  [Events.FULL_UPDATE_REQUIRED]: void,\n};\n"],
  "mappings": ";AAIA,YAAY,YAAY;AACxB,YAAY,cAAc;AAC1B,YAAY,mBAAmB;AAoBxB,aAAM,wBAAwB,cAAc,MAAM,MAAM;AAAA,EAC7D,mBAAmB,oBAAI,IAGpB;AAAA,EACH,0BAA0B,oBAAI,IAA0D;AAAA,EACxF,oBAAoB,oBAAI,IAA6C;AAAA,EACrE,qBAAqB,oBAAI,IAAgD;AAAA,EACzE,iBAAiB,oBAAI,IAA6C;AAAA,EAClE,4BAA4B,oBAAI,IAA2D;AAAA,EAC3F,uBAAuB,oBAAI,IAAY;AAAA,EACvC,cAAc,oBAAI,IAAuC;AAAA,EACzD,aAAa,oBAAI,IAAyE;AAAA,EAC1F,qBAAqB,oBAAI,IAAqD;AAAA,EAC9E,aAAa,cAAc,MAAM,UAAU;AAAA,EAC3C,qBAAqB,oBAAI,IAA6D;AAAA,EACtF,mCACI,oBAAI,IAAiF;AAAA,EACzF,sBAAsB,oBAAI,IAAuD;AAAA,EACjF,2BAA2B,oBAAI,IAAiE;AAAA,EAChG,oBAAoB,oBAAI,IAAmD;AAAA,EAC3E,8BAA8B,oBAAI,IAAuE;AAAA,EACzG,iBAAiB,oBAAI,IAA6C;AAAA,EAClE;AAAA,EACA,yBAAyB;AAAA,EACzB;AAAA,EAEA,YAAY,MAAc,gBAAgC;AACxD,UAAM,IAAI;AACV,SAAK,OAAO;AAAA,EACd;AAAA,EAES,aAAqB;AAC5B,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,iBAAiC;AAC/B,WAAO,KAAK;AAAA,EACd;AAAA,EAES,8BAAuF;AAC9F,WAAO,KAAK,0BAA0B,OAAO;AAAA,EAC/C;AAAA,EAES,UAAoD;AAC3D,WAAO,MAAM,KAAK,KAAK,iBAAiB,OAAO,CAAC,EAAE,IAAI,OAAK,EAAE,MAAM;AAAA,EACrE;AAAA,EAEA,oBAA4E;AAC1E,WAAO,KAAK,wBAAwB,OAAO;AAAA,EAC7C;AAAA,EAES,UAAwD;AAC/D,WAAO,KAAK,mBAAmB,OAAO;AAAA,EACxC;AAAA,EAEA,yBAA2C;AACzC,WAAO,KAAK,qBAAqB,OAAO;AAAA,EAC1C;AAAA,EAEA,8BAGG;AACD,WAAO,KAAK,iBAAiB,OAAO;AAAA,EACtC;AAAA,EAEA,mBAAsE;AACpE,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,qCAC0F;AACxF,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,wBAAqF;AACnF,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,gBAAwD;AACtD,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,eAA8F;AAC5F,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,uBAAkF;AAChF,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,uBAA0F;AACxF,WAAO,KAAK;AAAA,EACd;AAAA,EAES,WAAsD;AAC7D,WAAO,KAAK,kBAAkB,OAAO;AAAA,EACvC;AAAA,EAEA,6BAAoG;AAClG,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,sBAA+E;AAC7E,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,gCAAgH;AAC9G,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,mBAAyE;AACvE,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,iBAAuF;AACrF,QAAI,KAAK,iBAAiB;AACxB,aAAO,KAAK,gBAAgB,eAAe;AAAA,IAC7C;AACA,WAAO;AAAA,EACT;AAAA,EAEA,cAAiD;AAC/C,QAAI,KAAK,iBAAiB;AACxB,aAAO,KAAK,gBAAgB,YAAY;AAAA,IAC1C;AACA,WAAO,cAAc,MAAM,cAAc;AAAA,EAC3C;AAAA,EAEA,2BAAmC;AACjC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,QAAgD;AAC5D,UAAM,EAAC,QAAQ,MAAM,KAAI,IAAI;AAC7B,WAAO,GAAG,MAAM,IAAI,IAAI,IAAI,IAAI;AAAA,EAClC;AAAA,EAEA,YAAY,OAAwC;AAClD,SAAK;AACL,QAAI,CAAC,KAAK,iBAAiB;AACzB,WAAK,kBAAkB;AAAA,IACzB;AACA,SAAK,aAAa,cAAc,MAAM,eAAe,KAAK,YAAY,MAAM,QAAQ,CAAC;AACrF,QAAI,aAAa;AACjB,eAAW,WAAW,MAAM,SAAS,GAAG;AACtC,mBAAa;AACb,UAAI,CAAC,KAAK,kBAAkB,IAAI,QAAQ,SAAS,GAAG;AAClD,aAAK,kBAAkB,IAAI,QAAQ,WAAW,OAAO;AAAA,MACvD;AAAA,IACF;AACA,eAAW,UAAU,MAAM,QAAQ,GAAG;AACpC,YAAM,MAAM,KAAK,cAAc,MAAM;AACrC,UAAI,CAAC,KAAK,iBAAiB,IAAI,GAAG,GAAG;AACnC,aAAK,iBAAiB,IAAI,KAAK,EAAC,QAAQ,WAAU,CAAC;AAAA,MACrD;AAAA,IACF;AACA,eAAW,iBAAiB,MAAM,eAAe,GAAG;AAClD,UAAI,CAAC,KAAK,wBAAwB,IAAI,aAAa,GAAG;AACpD,aAAK,wBAAwB,IAAI,eAAe,EAAC,eAAe,WAAU,CAAC;AAAA,MAC7E;AAAA,IACF;AACA,eAAW,QAAQ,MAAM,cAAc,GAAG;AACxC,UAAI,CAAC,KAAK,qBAAqB,IAAI,IAAI,GAAG;AACxC,aAAK,qBAAqB,IAAI,IAAI;AAAA,MACpC;AAAA,IACF;AACA,eAAW,YAAY,MAAM,QAAQ,GAAG;AACtC,YAAM,MAAM,KAAK,UAAU,QAAQ;AACnC,UAAI,CAAC,KAAK,mBAAmB,IAAI,GAAG,GAAG;AACrC,aAAK,mBAAmB,IAAI,KAAK,QAAQ;AAAA,MAC3C;AAAA,IACF;AACA,QAAI,iBAAiB,cAAc,+BAA+B,gCAAgC;AAChG,WAAK,iCAAiC,IAAI,KAAK;AAAA,IACjD;AACA,QAAI,iBAAiB,cAAc,kBAAkB,mBAAmB;AACtE,WAAK,oBAAoB,IAAI,KAAK;AAAA,IACpC;AACA,QAAI,iBAAiB,cAAc,aAAa,cAAc;AAC5D,WAAK,eAAe,IAAI,KAAK;AAAA,IAC/B;AACA,eAAW,WAAW,MAAM,4BAA4B,GAAG;AACzD,YAAM,MAAM,KAAK,UAAU,SAAS,CAAC,eAAe,gBAAgB,aAAa,WAAW,UAAU,SAAS,CAAC;AAChH,WAAK,0BAA0B,IAAI,KAAK,OAAO;AAAA,IACjD;AACA,QAAI,iBAAiB,cAAc,2BAA2B,4BAA4B;AACxF,WAAK,WAAW,IAAI,KAAK;AAAA,IAC3B;AACA,QAAI,iBAAiB,cAAc,iBAAiB,kBAAkB;AACpE,WAAK,mBAAmB,IAAI,KAAK;AAAA,IACnC;AACA,QAAI,iBAAiB,cAAc,uBAAuB,wBAAwB;AAChF,WAAK,yBAAyB,IAAI,KAAK;AAAA,IACzC;AACA,QAAI,iBAAiB,cAAc,qBAAqB,sBAAsB;AAC5E,WAAK,mBAAmB,IAAI,KAAK;AAAA,IACnC;AACA,QAAI,iBAAiB,cAAc,UAAU,WAAW;AACtD,WAAK,YAAY,IAAI,KAAK;AAAA,IAC5B;AACA,QAAI,iBAAiB,cAAc,gBAAgB,iBAAiB;AAClE,WAAK,kBAAkB,IAAI,KAAK;AAAA,IAClC;AACA,QAAI,iBAAiB,cAAc,0BAA0B,2BAA2B;AACtF,WAAK,4BAA4B,IAAI,KAAK;AAAA,IAC5C;AACA,QAAI,iBAAiB,cAAc,aAAa,cAAc;AAC5D,WAAK,eAAe,IAAI,KAAK;AAAA,IAC/B;AAAA,EACF;AAAA,EAEA,UAAyC;AACvC,WAAO,KAAK;AAAA,EACd;AAAA,EAES,WAAoB;AAC3B,WAAO,KAAK,iBAAiB,SAAS,KAAK;AAAA,EAC7C;AAAA,EAES,UAAU,QAAuB;AACxC,UAAM,IAAI,MAAM,8CAA8C;AAAA,EAChE;AACF;AAEO,aAAM,wBAAwB,OAAO,cAAc,cAA0B;AAAA,EAGlF,YAA6B,eAA0D;AACrF,UAAM;AADqB;AAE3B,SAAK,cAAc,iBAAiB,cAAc,cAAc,OAAO,aAAa,KAAK,eAAe,IAAI;AAC5G,SAAK,cAAc;AAAA,MACf,cAAc,cAAc,OAAO;AAAA,MAAsB,KAAK;AAAA,MAAuB;AAAA,IAAI;AAC7F,eAAW,SAAS,KAAK,cAAc,OAAO,GAAG;AAC/C,WAAK,gBAAgB,KAAK;AAAA,IAC5B;AAAA,EACF;AAAA,EAVS,yBAAyB,oBAAI,IAAqC;AAAA,EAClE,+BAA+B,oBAAI,IAAqC;AAAA,EAWjF,cAAc,OAA+F;AAC3G,SAAK,gBAAgB,MAAM,KAAK,KAAK;AAAA,EACvC;AAAA,EAEA,wBAA8B;AAC5B,SAAK,uBAAuB,MAAM;AAClC,SAAK,6BAA6B,MAAM;AACxC,eAAW,SAAS,KAAK,cAAc,OAAO,GAAG;AAC/C,WAAK,gBAAgB,KAAK;AAAA,IAC5B;AACA,SAAK,yBAAyB,+CAA2B;AAAA,EAC3D;AAAA,EAEA,gBAAgB,OAA6D;AAC3E,UAAM,uBAAuB;AAAA,MAC3B,SAAS,OAAO,oBAAoB;AAAA,MACpC,SAAS,OAAO,oBAAoB;AAAA,IACtC;AAEA,QAAI,qBAAqB,KAAK,aAAW,MAAM,KAAK,EAAE,SAAS,OAAO,CAAC,GAAG;AACxE;AAAA,IACF;AAEA,UAAM,MAAM,MAAM,SAAS,IAAI,KAAK,+BAA+B,KAAK;AACxE,UAAM,kBAAkB,KAAK,wBAAwB,KAAK,KAAK;AAC/D,SAAK,yBAAyB,yDAAiC,eAAe;AAC9E,WAAO;AAAA,EACT;AAAA,EAEA,wBAAwB,qBAA2D,OAC/D;AAClB,UAAM,MAAM,MAAM,KAAK;AACvB,QAAI,kBAAkB,oBAAoB,IAAI,GAAG;AACjD,QAAI,CAAC,iBAAiB;AACpB,wBAAkB,IAAI,gBAAgB,MAAM,KAAK,GAAG,GAAG;AACvD,0BAAoB,IAAI,KAAK,eAAe;AAAA,IAC9C;AACA,oBAAgB,YAAY,KAAK;AACjC,WAAO;AAAA,EACT;AAAA,EAEA,mBAA8C;AAC5C,WAAO,CAAC,GAAG,KAAK,uBAAuB,OAAO,GAAG,GAAG,KAAK,6BAA6B,OAAO,CAAC;AAAA,EAChG;AAAA,EAEA,yBAAoD;AAClD,WAAO,KAAK,6BAA6B,OAAO;AAAA,EAClD;AAAA,EAEA,uBAA4C;AAC1C,WAAO,oBAAI,IAAI,CAAC,GAAG,KAAK,uBAAuB,KAAK,GAAG,GAAG,KAAK,6BAA6B,KAAK,CAAC,CAAC;AAAA,EACrG;AAAA,EAEA,4BAAoE;AAClE,UAAM,SAAS,oBAAI,IAAuC;AAC1D,eAAW,SAAS,KAAK,uBAAuB,OAAO,GAAG;AACxD,aAAO,IAAI,MAAM,YAAY,CAAC;AAAA,IAChC;AACA,WAAO;AAAA,EACT;AAAA,EAEA,uBAA2D;AACzD,UAAM,SAAS,oBAAI,IAAmC;AACtD,eAAW,SAAS,KAAK,uBAAuB,OAAO,GAAG;AACxD,aAAO,IAAI,MAAM,QAAQ,CAAC;AAAA,IAC5B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,2BAAmC;AACjC,WAAO,KAAK,uBAAuB;AAAA,EACrC;AAAA,EAEA,iCAAyC;AACvC,WAAO,KAAK,6BAA6B;AAAA,EAC3C;AAAA,EAEA,YAAY,OAA0D;AACpE,WAAO,MAAM,KAAK;AAAA,EACpB;AACF;AAEO,WAAW,SAAX,kBAAWA,YAAX;AACL,EAAAA,QAAA,8BAA2B;AAC3B,EAAAA,QAAA,0BAAuB;AAFP,SAAAA;AAAA,GAAA;",
  "names": ["Events"]
}
