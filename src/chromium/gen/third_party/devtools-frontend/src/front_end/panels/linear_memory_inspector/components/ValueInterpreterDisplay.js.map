{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/linear_memory_inspector/components/ValueInterpreterDisplay.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport inspectorCommonStyles from '../../../ui/legacy/inspectorCommon.css.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport valueInterpreterDisplayStyles from './valueInterpreterDisplay.css.js';\nimport {\n  Endianness,\n  format,\n  getDefaultValueTypeMapping,\n  getPointerAddress,\n  isNumber,\n  isPointer,\n  isValidMode,\n  VALUE_TYPE_MODE_LIST,\n  ValueType,\n  ValueTypeMode,\n} from './ValueInterpreterDisplayUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Tooltip text that appears when hovering over an unsigned interpretation of the memory under the Value Interpreter\n   */\n  unsignedValue: '`Unsigned` value',\n  /**\n   *@description Tooltip text that appears when hovering over the element to change value type modes of under the Value Interpreter. Value type modes\n   *             are different ways of viewing a certain value, e.g.: 10 (decimal) can be 0xa in hexadecimal mode, or 12 in octal mode.\n   */\n  changeValueTypeMode: 'Change mode',\n  /**\n   *@description Tooltip text that appears when hovering over a signed interpretation of the memory under the Value Interpreter\n   */\n  signedValue: '`Signed` value',\n  /**\n   *@description Tooltip text that appears when hovering over a 'jump-to-address' button that is next to a pointer (32-bit or 64-bit) under the Value Interpreter\n   */\n  jumpToPointer: 'Jump to address',\n  /**\n   *@description Tooltip text that appears when hovering over a 'jump-to-address' button that is next to a pointer (32-bit or 64-bit) with an invalid address under the Value Interpreter.\n   */\n  addressOutOfRange: 'Address out of memory range',\n\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/ValueInterpreterDisplay.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html} = LitHtml;\n\nconst SORTED_VALUE_TYPES = Array.from(getDefaultValueTypeMapping().keys());\n\nexport interface ValueDisplayData {\n  buffer: ArrayBuffer;\n  valueTypes: Set<ValueType>;\n  endianness: Endianness;\n  memoryLength: number;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n}\n\nexport class ValueTypeModeChangedEvent extends Event {\n  static readonly eventName = 'valuetypemodechanged';\n  data: {type: ValueType, mode: ValueTypeMode};\n\n  constructor(type: ValueType, mode: ValueTypeMode) {\n    super(ValueTypeModeChangedEvent.eventName, {\n      composed: true,\n    });\n    this.data = {type, mode};\n  }\n}\n\nexport class JumpToPointerAddressEvent extends Event {\n  static readonly eventName = 'jumptopointeraddress';\n  data: number;\n\n  constructor(address: number) {\n    super(JumpToPointerAddressEvent.eventName, {\n      composed: true,\n    });\n    this.data = address;\n  }\n}\n\nexport class ValueInterpreterDisplay extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #endianness = Endianness.LITTLE;\n  #buffer = new ArrayBuffer(0);\n  #valueTypes: Set<ValueType> = new Set();\n  #valueTypeModeConfig: Map<ValueType, ValueTypeMode> = getDefaultValueTypeMapping();\n  #memoryLength = 0;\n\n  constructor() {\n    super();\n    this.#shadow.adoptedStyleSheets = [\n      inspectorCommonStyles,\n    ];\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [valueInterpreterDisplayStyles];\n  }\n\n  set data(data: ValueDisplayData) {\n    this.#buffer = data.buffer;\n    this.#endianness = data.endianness;\n    this.#valueTypes = data.valueTypes;\n    this.#memoryLength = data.memoryLength;\n\n    if (data.valueTypeModes) {\n      data.valueTypeModes.forEach((mode, valueType) => {\n        if (isValidMode(valueType, mode)) {\n          this.#valueTypeModeConfig.set(valueType, mode);\n        }\n      });\n    }\n\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"value-types\">\n        ${SORTED_VALUE_TYPES.map(type => this.#valueTypes.has(type) ? this.#showValue(type) : '')}\n      </div>\n    `, this.#shadow, {host: this},\n    );\n    // clang-format on\n  }\n\n  #showValue(type: ValueType): LitHtml.TemplateResult {\n    if (isNumber(type)) {\n      return this.#renderNumberValues(type);\n    }\n    if (isPointer(type)) {\n      return this.#renderPointerValue(type);\n    }\n    throw new Error(`No known way to format ${type}`);\n  }\n\n  #renderPointerValue(type: ValueType): LitHtml.TemplateResult {\n    const unsignedValue = this.#parse({type, signed: false});\n    const address = getPointerAddress(type, this.#buffer, this.#endianness);\n    const jumpDisabled = Number.isNaN(address) || BigInt(address) >= BigInt(this.#memoryLength);\n    const buttonTitle = jumpDisabled ? i18nString(UIStrings.addressOutOfRange) : i18nString(UIStrings.jumpToPointer);\n    const iconColor = jumpDisabled ? 'var(--icon-default)' : 'var(--icon-link)';\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <span class=\"value-type-cell-no-mode value-type-cell selectable-text\">${i18n.i18n.lockedString(type)}</span>\n      <div class=\"value-type-cell\">\n        <div class=\"value-type-value-with-link\" data-value=\"true\">\n        <span class=\"selectable-text\">${unsignedValue}</span>\n          ${\n            html`\n              <button class=\"jump-to-button\" data-jump=\"true\" title=${buttonTitle} ?disabled=${jumpDisabled}\n                jslog=${VisualLogging.action('linear-memory-inspector.jump-to-address').track({click: true})}\n                @click=${this.#onJumpToAddressClicked.bind(this, Number(address))}>\n                <devtools-icon .data=${\n                  {iconName: 'open-externally', color: iconColor, width: '16px'}}>\n                </devtools-icon>\n              </button>`}\n        </div>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #onJumpToAddressClicked(address: number): void {\n    this.dispatchEvent(new JumpToPointerAddressEvent(address));\n  }\n\n  #renderNumberValues(type: ValueType): LitHtml.TemplateResult {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <span class=\"value-type-cell selectable-text\">${i18n.i18n.lockedString(type)}</span>\n      <div>\n        <select title=${i18nString(UIStrings.changeValueTypeMode)}\n          data-mode-settings=\"true\"\n          class=\"chrome-select\"\n          style=\"border: none; background-color: transparent; cursor: pointer; color: var(--sys-color-token-subtle);\"\n          jslog=${VisualLogging.dropDown('linear-memory-inspector.value-type-mode').track({change: true})}\n          @change=${this.#onValueTypeModeChange.bind(this, type)}>\n            ${VALUE_TYPE_MODE_LIST.filter(x => isValidMode(type, x)).map(mode => {\n              return html`\n                <option value=${mode} .selected=${this.#valueTypeModeConfig.get(type) === mode}\n                        jslog=${VisualLogging.item(mode).track({click: true})}>${\n                  i18n.i18n.lockedString(mode)}\n                </option>`;\n            })}\n        </select>\n      </div>\n      ${this.#renderSignedAndUnsigned(type)}\n    `;\n    // clang-format on\n  }\n\n  #renderSignedAndUnsigned(type: ValueType): LitHtml.TemplateResult {\n    const unsignedValue = this.#parse({type, signed: false});\n    const signedValue = this.#parse({type, signed: true});\n    const mode = this.#valueTypeModeConfig.get(type);\n    const showSignedAndUnsigned =\n        signedValue !== unsignedValue && mode !== ValueTypeMode.HEXADECIMAL && mode !== ValueTypeMode.OCTAL;\n\n    const unsignedRendered = html`<span class=\"value-type-cell selectable-text\"  title=${\n        i18nString(UIStrings.unsignedValue)} data-value=\"true\">${unsignedValue}</span>`;\n    if (!showSignedAndUnsigned) {\n      return unsignedRendered;\n    }\n\n    // Some values are too long to show in one line, we're putting them into the next line.\n    const showInMultipleLines = type === ValueType.INT32 || type === ValueType.INT64;\n    const signedRendered = html`<span class=\"selectable-text\" data-value=\"true\" title=${\n        i18nString(UIStrings.signedValue)}>${signedValue}</span>`;\n\n    if (showInMultipleLines) {\n      return html`\n        <div class=\"value-type-cell\">\n          ${unsignedRendered}\n          ${signedRendered}\n        </div>\n        `;\n    }\n\n    return html`\n      <div class=\"value-type-cell\" style=\"flex-direction: row;\">\n        ${unsignedRendered}\n        <span class=\"signed-divider\"></span>\n        ${signedRendered}\n      </div>\n    `;\n  }\n\n  #onValueTypeModeChange(type: ValueType, event: Event): void {\n    event.preventDefault();\n    const select = event.target as HTMLInputElement;\n    const mode = select.value as ValueTypeMode;\n    this.dispatchEvent(new ValueTypeModeChangedEvent(type, mode));\n  }\n\n  #parse(data: {type: ValueType, signed?: boolean}): string {\n    const mode = this.#valueTypeModeConfig.get(data.type);\n    return format(\n        {buffer: this.#buffer, type: data.type, endianness: this.#endianness, signed: data.signed || false, mode});\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-interpreter-display', ValueInterpreterDisplay);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-display': ValueInterpreterDisplay;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
