{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/mobile_throttling/ThrottlingManager.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {MobileThrottlingSelector} from './MobileThrottlingSelector.js';\nimport {NetworkThrottlingSelector} from './NetworkThrottlingSelector.js';\nimport {\n  type Conditions,\n  type ConditionsList,\n  type MobileThrottlingConditionsGroup,\n  type NetworkThrottlingConditionsGroup,\n  ThrottlingPresets,\n} from './ThrottlingPresets.js';\n\nexport interface CPUThrottlingSelectorWrapper {\n  control: UI.Toolbar.ToolbarComboBox;\n  updateRecommendedRate(recommendedRate: number|null): void;\n}\n\nexport interface NetworkThrottlingSelectorWrapper {\n  selector: NetworkThrottlingSelector;\n  updateRecommendedConditions(recommendedConditions: SDK.NetworkManager.Conditions|null): void;\n}\n\nconst UIStrings = {\n  /**\n   *@description Text with two placeholders separated by a colon\n   *@example {Node removed} PH1\n   *@example {div#id1} PH2\n   */\n  sS: '{PH1}: {PH2}',\n  /**\n   *@description Text in Throttling Manager of the Network panel\n   */\n  add: 'Add\u2026',\n  /**\n   *@description Accessibility label for custom add network throttling option\n   *@example {Custom} PH1\n   */\n  addS: 'Add {PH1}',\n  /**\n   *@description Text to indicate the network connectivity is offline\n   */\n  offline: 'Offline',\n  /**\n   *@description Text in Throttling Manager of the Network panel\n   */\n  forceDisconnectedFromNetwork: 'Force disconnected from network',\n  /**\n   *@description Text for throttling the network\n   */\n  throttling: 'Throttling',\n  /**\n   *@description Icon title in Throttling Manager of the Network panel\n   */\n  cpuThrottlingIsEnabled: 'CPU throttling is enabled',\n  /**\n   *@description Screen reader label for a select box that chooses the CPU throttling speed in the Performance panel\n   */\n  cpuThrottling: 'CPU throttling',\n  /**\n   *@description Text for no network throttling\n   */\n  noThrottling: 'No throttling',\n  /**\n   *@description Text in Throttling Manager of the Network panel\n   *@example {2} PH1\n   */\n  dSlowdown: '{PH1}\u00D7 slowdown',\n  /**\n   *@description Tooltip text in Throttling Manager of the Performance panel\n   */\n  excessConcurrency: 'Exceeding the default value may degrade system performance.',\n  /**\n   *@description Tooltip text in Throttling Manager of the Performance panel\n   */\n  resetConcurrency: 'Reset to the default value',\n  /**\n   *@description Label for an check box that neables overriding navigator.hardwareConcurrency\n   */\n  hardwareConcurrency: 'Hardware concurrency',\n  /**\n   *@description Tooltip text for an input box that overrides navigator.hardwareConcurrency on the page\n   */\n  hardwareConcurrencySettingLabel: 'Override the value reported by navigator.hardwareConcurrency',\n  /**\n   * @description Text label for a selection box showing that a specific option is recommended.\n   * @example {Fast 4G} PH1\n   * @example {4x slowdown} PH1\n   */\n  recommendedThrottling: '{PH1} - recommended',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/ThrottlingManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet throttlingManagerInstance: ThrottlingManager;\n\nexport class ThrottlingManager {\n  private readonly cpuThrottlingControls: Set<UI.Toolbar.ToolbarComboBox>;\n  private readonly cpuThrottlingRates: number[];\n  private readonly customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private readonly currentNetworkThrottlingConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions>;\n  private lastNetworkThrottlingConditions!: SDK.NetworkManager.Conditions;\n  private readonly cpuThrottlingManager: SDK.CPUThrottlingManager.CPUThrottlingManager;\n  #hardwareConcurrencyOverrideEnabled = false;\n  get hardwareConcurrencyOverrideEnabled(): boolean {\n    return this.#hardwareConcurrencyOverrideEnabled;\n  }\n\n  private constructor() {\n    this.cpuThrottlingManager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance();\n    this.cpuThrottlingManager.addEventListener(\n        SDK.CPUThrottlingManager.Events.RATE_CHANGED,\n        (event: Common.EventTarget.EventTargetEvent<number>) => this.onCPUThrottlingRateChangedOnSDK(event.data));\n    this.cpuThrottlingControls = new Set();\n    this.cpuThrottlingRates = ThrottlingPresets.cpuThrottlingPresets;\n    this.customNetworkConditionsSetting =\n        Common.Settings.Settings.instance().moduleSetting('custom-network-conditions');\n    this.currentNetworkThrottlingConditionsSetting = Common.Settings.Settings.instance().createSetting(\n        'preferred-network-condition', SDK.NetworkManager.NoThrottlingConditions);\n\n    this.currentNetworkThrottlingConditionsSetting.setSerializer(new SDK.NetworkManager.ConditionsSerializer());\n\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, () => {\n          this.lastNetworkThrottlingConditions = this.currentNetworkThrottlingConditionsSetting.get();\n          this.currentNetworkThrottlingConditionsSetting.set(\n              SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions());\n        });\n\n    if (this.isDirty()) {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          this.currentNetworkThrottlingConditionsSetting.get());\n    }\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ThrottlingManager {\n    const {forceNew} = opts;\n    if (!throttlingManagerInstance || forceNew) {\n      throttlingManagerInstance = new ThrottlingManager();\n    }\n\n    return throttlingManagerInstance;\n  }\n\n  createOfflineToolbarCheckbox(): UI.Toolbar.ToolbarCheckbox {\n    const checkbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.offline), i18nString(UIStrings.forceDisconnectedFromNetwork), forceOffline.bind(this));\n    checkbox.element.setAttribute('jslog', `${VisualLogging.toggle('disconnect-from-network').track({click: true})}`);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, networkConditionsChanged);\n    checkbox.setChecked(SDK.NetworkManager.MultitargetNetworkManager.instance().isOffline());\n\n    function forceOffline(this: ThrottlingManager): void {\n      if (checkbox.checked()) {\n        SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n            SDK.NetworkManager.OfflineConditions);\n      } else {\n        const newConditions =\n            (!this.lastNetworkThrottlingConditions.download && !this.lastNetworkThrottlingConditions.upload) ?\n            SDK.NetworkManager.NoThrottlingConditions :\n            this.lastNetworkThrottlingConditions;\n        SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(newConditions);\n      }\n    }\n\n    function networkConditionsChanged(): void {\n      checkbox.setChecked(SDK.NetworkManager.MultitargetNetworkManager.instance().isOffline());\n    }\n\n    return checkbox;\n  }\n\n  createMobileThrottlingButton(): UI.Toolbar.ToolbarMenuButton {\n    const button = new UI.Toolbar.ToolbarMenuButton(appendItems, undefined, undefined, 'mobile-throttling');\n    button.setTitle(i18nString(UIStrings.throttling));\n    button.setDarkText();\n\n    let options: ConditionsList = [];\n    let selectedIndex = -1;\n    const selector = new MobileThrottlingSelector(populate, select);\n    return button;\n\n    function appendItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n      for (let index = 0; index < options.length; ++index) {\n        const conditions = options[index];\n        if (!conditions) {\n          continue;\n        }\n        if (conditions.title === ThrottlingPresets.getCustomConditions().title &&\n            conditions.description === ThrottlingPresets.getCustomConditions().description) {\n          continue;\n        }\n        contextMenu.defaultSection().appendCheckboxItem(\n            conditions.title, selector.optionSelected.bind(selector, conditions as Conditions),\n            {checked: selectedIndex === index, jslogContext: conditions.jslogContext});\n      }\n    }\n\n    function populate(groups: MobileThrottlingConditionsGroup[]): ConditionsList {\n      options = [];\n      for (const group of groups) {\n        for (const conditions of group.items) {\n          options.push(conditions);\n        }\n        options.push(null);\n      }\n      return options;\n    }\n\n    function select(index: number): void {\n      selectedIndex = index;\n      const option = options[index];\n      if (option) {\n        button.setText(option.title);\n        button.setTitle(`${option.title}: ${option.description}`);\n      }\n    }\n  }\n\n  private updatePanelIcon(): void {\n    const warnings = [];\n    if (this.cpuThrottlingManager.cpuThrottlingRate() !== SDK.CPUThrottlingManager.CPUThrottlingRates.NO_THROTTLING) {\n      warnings.push(i18nString(UIStrings.cpuThrottlingIsEnabled));\n    }\n    UI.InspectorView.InspectorView.instance().setPanelWarnings('timeline', warnings);\n  }\n\n  setCPUThrottlingRate(rate: number): void {\n    // This will transitively call onCPUThrottlingRateChangedOnSDK.\n    this.cpuThrottlingManager.setCPUThrottlingRate(rate);\n  }\n\n  onCPUThrottlingRateChangedOnSDK(rate: number): void {\n    if (rate !== SDK.CPUThrottlingManager.CPUThrottlingRates.NO_THROTTLING) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuThrottlingEnabled);\n    }\n    const index = this.cpuThrottlingRates.indexOf(rate);\n    for (const control of this.cpuThrottlingControls) {\n      control.setSelectedIndex(index);\n    }\n    this.updatePanelIcon();\n  }\n\n  createNetworkThrottlingSelector(selectElement: HTMLSelectElement): NetworkThrottlingSelectorWrapper {\n    let options: (SDK.NetworkManager.Conditions|null)[] = [];\n    let titles: string[] = [];\n    let optionEls: HTMLOptionElement[] = [];\n    const selector = new NetworkThrottlingSelector(populate, select, this.customNetworkConditionsSetting);\n    selectElement.setAttribute(\n        'jslog',\n        `${\n            VisualLogging.dropDown()\n                .track({change: true})\n                .context(this.currentNetworkThrottlingConditionsSetting.name)}`);\n    selectElement.addEventListener('change', optionSelected, false);\n\n    function populate(groups: NetworkThrottlingConditionsGroup[]): (SDK.NetworkManager.Conditions|null)[] {\n      selectElement.removeChildren();\n      options = [];\n      titles = [];\n      optionEls = [];\n      for (let i = 0; i < groups.length; ++i) {\n        const group = groups[i];\n        const groupElement = selectElement.createChild('optgroup') as HTMLOptGroupElement;\n        groupElement.label = group.title;\n        for (const conditions of group.items) {\n          // The title is usually an i18nLazyString except for custom values that are stored in the local storage in the form of a string.\n          const title = typeof conditions.title === 'function' ? conditions.title() : conditions.title;\n          const option = new Option(title, title);\n          UI.ARIAUtils.setLabel(option, i18nString(UIStrings.sS, {PH1: group.title, PH2: title}));\n          const jslogContext = i === groups.length - 1 ?\n              'custom-network-throttling-item' :\n              Platform.StringUtilities.toKebabCase(conditions.i18nTitleKey || title);\n          option.setAttribute('jslog', `${VisualLogging.item(jslogContext).track({\n                                click: true,\n                              })}`);\n          groupElement.appendChild(option);\n          options.push(conditions);\n\n          titles.push(title);\n          optionEls.push(option);\n        }\n        if (i === groups.length - 1) {\n          const option = new Option(i18nString(UIStrings.add), i18nString(UIStrings.add));\n          UI.ARIAUtils.setLabel(option, i18nString(UIStrings.addS, {PH1: group.title}));\n          option.setAttribute('jslog', `${VisualLogging.action('add').track({click: true})}`);\n          groupElement.appendChild(option);\n          options.push(null);\n        }\n      }\n      return options;\n    }\n\n    function optionSelected(): void {\n      if (selectElement.selectedIndex === selectElement.options.length - 1) {\n        selector.revealAndUpdate();\n      } else {\n        const option = options[selectElement.selectedIndex];\n        if (option) {\n          selector.optionSelected(option);\n        }\n      }\n    }\n\n    function select(index: number): void {\n      if (selectElement.selectedIndex !== index) {\n        selectElement.selectedIndex = index;\n      }\n    }\n\n    return {\n      selector,\n      updateRecommendedConditions(recommendedConditions: SDK.NetworkManager.Conditions|null) {\n        for (let i = 0; i < optionEls.length; i++) {\n          let title = titles[i];\n          if (options[i] === recommendedConditions) {\n            title = i18nString(UIStrings.recommendedThrottling, {PH1: title});\n          }\n          optionEls[i].text = title;\n        }\n      },\n    };\n  }\n\n  createCPUThrottlingSelector(): CPUThrottlingSelectorWrapper {\n    const control = new UI.Toolbar.ToolbarComboBox(\n        event => this.setCPUThrottlingRate(this.cpuThrottlingRates[(event.target as HTMLSelectElement).selectedIndex]),\n        i18nString(UIStrings.cpuThrottling), '', 'cpu-throttling');\n    this.cpuThrottlingControls.add(control);\n    const currentRate = this.cpuThrottlingManager.cpuThrottlingRate();\n\n    const titles: string[] = [];\n    const optionEls: HTMLOptionElement[] = [];\n    const rates = this.cpuThrottlingRates;\n\n    for (let i = 0; i < this.cpuThrottlingRates.length; ++i) {\n      const rate = this.cpuThrottlingRates[i];\n      const title = rate === 1 ? i18nString(UIStrings.noThrottling) : i18nString(UIStrings.dSlowdown, {PH1: rate});\n      const value = rate === 1 ? 'cpu-no-throttling' : `cpu-throttled-${rate}`;\n      const option = control.createOption(title, value);\n      control.addOption(option);\n      if (currentRate === rate) {\n        control.setSelectedIndex(i);\n      }\n\n      titles.push(title);\n      optionEls.push(option);\n    }\n\n    return {\n      control,\n      updateRecommendedRate(recommendedRate: number|null) {\n        for (let i = 0; i < optionEls.length; i++) {\n          let title = titles[i];\n          if (rates[i] === recommendedRate) {\n            title = i18nString(UIStrings.recommendedThrottling, {PH1: title});\n          }\n          optionEls[i].text = title;\n        }\n      },\n    };\n  }\n\n  /** Hardware Concurrency doesn't store state in a setting. */\n  createHardwareConcurrencySelector(): {\n    numericInput: UI.Toolbar.ToolbarItem,\n    reset: UI.Toolbar.ToolbarButton,\n    warning: UI.Toolbar.ToolbarItem,\n    checkbox: UI.UIUtils.CheckboxLabel,\n  } {\n    const numericInput =\n        new UI.Toolbar.ToolbarItem(UI.UIUtils.createInput('devtools-text-input', 'number', 'hardware-concurrency'));\n    numericInput.setTitle(i18nString(UIStrings.hardwareConcurrencySettingLabel));\n    const inputElement = numericInput.element as HTMLInputElement;\n    inputElement.min = '1';\n    numericInput.setEnabled(false);\n\n    const checkbox = UI.UIUtils.CheckboxLabel.create(\n        i18nString(UIStrings.hardwareConcurrency), false, i18nString(UIStrings.hardwareConcurrencySettingLabel),\n        'hardware-concurrency');\n\n    const reset = new UI.Toolbar.ToolbarButton('Reset concurrency', 'undo', undefined, 'hardware-concurrency-reset');\n    reset.setTitle(i18nString(UIStrings.resetConcurrency));\n    const icon = new IconButton.Icon.Icon();\n    icon.data = {iconName: 'warning-filled', color: 'var(--icon-warning)', width: '14px', height: '14px'};\n    const warning = new UI.Toolbar.ToolbarItem(icon);\n    warning.setTitle(i18nString(UIStrings.excessConcurrency));\n\n    checkbox.checkboxElement.disabled = true;  // Prevent modification while still wiring things up asynchronously below\n    reset.element.classList.add('concurrency-hidden');\n    warning.element.classList.add('concurrency-hidden');\n\n    void this.cpuThrottlingManager.getHardwareConcurrency().then(defaultValue => {\n      if (defaultValue === undefined) {\n        return;\n      }\n\n      const setHardwareConcurrency = (value: number): void => {\n        if (value >= 1) {\n          this.cpuThrottlingManager.setHardwareConcurrency(value);\n        }\n        if (value > defaultValue) {\n          warning.element.classList.remove('concurrency-hidden');\n        } else {\n          warning.element.classList.add('concurrency-hidden');\n        }\n        if (value === defaultValue) {\n          reset.element.classList.add('concurrency-hidden');\n        } else {\n          reset.element.classList.remove('concurrency-hidden');\n        }\n      };\n\n      inputElement.value = `${defaultValue}`;\n      inputElement.oninput = () => setHardwareConcurrency(Number(inputElement.value));\n      checkbox.checkboxElement.disabled = false;\n      checkbox.checkboxElement.addEventListener('change', () => {\n        this.#hardwareConcurrencyOverrideEnabled = checkbox.checkboxElement.checked;\n\n        numericInput.setEnabled(this.hardwareConcurrencyOverrideEnabled);\n        setHardwareConcurrency(this.hardwareConcurrencyOverrideEnabled ? Number(inputElement.value) : defaultValue);\n      });\n\n      reset.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n        inputElement.value = `${defaultValue}`;\n        setHardwareConcurrency(defaultValue);\n      });\n    });\n\n    return {numericInput, reset, warning, checkbox};\n  }\n\n  setHardwareConcurrency(concurrency: number): void {\n    this.cpuThrottlingManager.setHardwareConcurrency(concurrency);\n  }\n\n  private isDirty(): boolean {\n    const networkConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    const knownCurrentConditions = this.currentNetworkThrottlingConditionsSetting.get();\n    return !SDK.NetworkManager.networkConditionsEqual(networkConditions, knownCurrentConditions);\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    if (actionId === 'network-conditions.network-online') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          SDK.NetworkManager.NoThrottlingConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-low-end-mobile') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(SDK.NetworkManager.Slow3GConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-mid-tier-mobile') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(SDK.NetworkManager.Slow4GConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-offline') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          SDK.NetworkManager.OfflineConditions);\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function throttlingManager(): ThrottlingManager {\n  return ThrottlingManager.instance();\n}\n"],
  "mappings": "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",
  "names": []
}
