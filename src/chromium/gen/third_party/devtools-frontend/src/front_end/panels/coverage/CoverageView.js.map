{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/coverage/CoverageView.ts"],
  "sourcesContent": ["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {CoverageDecorationManager} from './CoverageDecorationManager.js';\nimport {CoverageListView} from './CoverageListView.js';\nimport {type CoverageInfo, CoverageModel, CoverageType, Events, type URLCoverageInfo} from './CoverageModel.js';\nimport coverageViewStyles from './coverageView.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Tooltip in Coverage List View of the Coverage tab for selecting JavaScript coverage mode\n   */\n  chooseCoverageGranularityPer:\n      'Choose coverage granularity: Per function has low overhead, per block has significant overhead.',\n  /**\n   *@description Text in Coverage List View of the Coverage tab\n   */\n  perFunction: 'Per function',\n  /**\n   *@description Text in Coverage List View of the Coverage tab\n   */\n  perBlock: 'Per block',\n  /**\n   *@description Text in Coverage View of the Coverage tab\n   */\n  filterByUrl: 'Filter by URL',\n  /**\n   *@description Label for the type filter in the Converage Panel\n   */\n  filterCoverageByType: 'Filter coverage by type',\n  /**\n   *@description Text for everything\n   */\n  all: 'All',\n  /**\n   *@description Text that appears on a button for the css resource type filter.\n   */\n  css: 'CSS',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  javascript: 'JavaScript',\n  /**\n   *@description Tooltip text that appears on the setting when hovering over it in Coverage View of the Coverage tab\n   */\n  includeExtensionContentScripts: 'Include extension content scripts',\n  /**\n   *@description Title for a type of source files\n   */\n  contentScripts: 'Content scripts',\n  /**\n   *@description Message in Coverage View of the Coverage tab\n   *@example {record button icon} PH1\n   */\n  clickTheReloadButtonSToReloadAnd: 'Click the reload button {PH1} to reload and start capturing coverage.',\n  /**\n   *@description Message in Coverage View of the Coverage tab\n   *@example {record button icon} PH1\n   */\n  clickTheRecordButtonSToStart: 'Click the record button {PH1} to start capturing coverage.',\n  /**\n   *@description Message in the Coverage View explaining that DevTools could not capture coverage.\n   */\n  bfcacheNoCapture: 'Could not capture coverage info because the page was served from the back/forward cache.',\n  /**\n   *@description  Message in the Coverage View explaining that DevTools could not capture coverage.\n   */\n  activationNoCapture: 'Could not capture coverage info because the page was prerendered in the background.',\n  /**\n   *@description  Message in the Coverage View prompting the user to reload the page.\n   *@example {reload button icon} PH1\n   */\n  reloadPrompt: 'Click the reload button {PH1} to reload and get coverage.',\n\n  /**\n   *@description Footer message in Coverage View of the Coverage tab\n   *@example {300k used, 600k unused} PH1\n   *@example {500k used, 800k unused} PH2\n   */\n  filteredSTotalS: 'Filtered: {PH1}  Total: {PH2}',\n  /**\n   *@description Footer message in Coverage View of the Coverage tab\n   *@example {1.5 MB} PH1\n   *@example {2.1 MB} PH2\n   *@example {71%} PH3\n   *@example {29%} PH4\n   */\n  sOfSSUsedSoFarSUnused: '{PH1} of {PH2} ({PH3}%) used so far, {PH4} unused.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/coverage/CoverageView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet coverageViewInstance: CoverageView|undefined;\n\nexport class CoverageView extends UI.Widget.VBox {\n  private model: CoverageModel|null;\n  private decorationManager: CoverageDecorationManager|null;\n  private readonly coverageTypeComboBox: UI.Toolbar.ToolbarComboBox;\n  private readonly coverageTypeComboBoxSetting: Common.Settings.Setting<number>;\n  private toggleRecordAction: UI.ActionRegistration.Action;\n  private readonly toggleRecordButton: UI.Toolbar.ToolbarButton;\n  private inlineReloadButton: Element|null;\n  private readonly startWithReloadButton: UI.Toolbar.ToolbarButton|undefined;\n  private readonly clearAction: UI.ActionRegistration.Action;\n  private readonly exportAction: UI.ActionRegistration.Action;\n  private textFilterRegExp: RegExp|null;\n  private readonly filterInput: UI.Toolbar.ToolbarInput;\n  private typeFilterValue: number|null;\n  private readonly filterByTypeComboBox: UI.Toolbar.ToolbarComboBox;\n  private showContentScriptsSetting: Common.Settings.Setting<boolean>;\n  private readonly contentScriptsCheckbox: UI.Toolbar.ToolbarSettingCheckbox;\n  private readonly coverageResultsElement: HTMLElement;\n  private readonly landingPage: UI.Widget.VBox;\n  private readonly bfcacheReloadPromptPage: UI.Widget.VBox;\n  private readonly activationReloadPromptPage: UI.Widget.VBox;\n  private listView: CoverageListView;\n  private readonly statusToolbarElement: HTMLElement;\n  private statusMessageElement: HTMLElement;\n\n  constructor() {\n    super(true);\n\n    this.element.setAttribute('jslog', `${VisualLogging.panel('coverage').track({resize: true})}`);\n\n    this.model = null;\n    this.decorationManager = null;\n\n    const toolbarContainer = this.contentElement.createChild('div', 'coverage-toolbar-container');\n    toolbarContainer.setAttribute('jslog', `${VisualLogging.toolbar()}`);\n    const toolbar = new UI.Toolbar.Toolbar('coverage-toolbar', toolbarContainer);\n    toolbar.makeWrappable(true);\n\n    this.coverageTypeComboBox = new UI.Toolbar.ToolbarComboBox(\n        this.onCoverageTypeComboBoxSelectionChanged.bind(this), i18nString(UIStrings.chooseCoverageGranularityPer),\n        undefined, 'coverage-type');\n    const coverageTypes = [\n      {\n        label: i18nString(UIStrings.perFunction),\n        value: CoverageType.JAVA_SCRIPT | CoverageType.JAVA_SCRIPT_PER_FUNCTION,\n      },\n      {\n        label: i18nString(UIStrings.perBlock),\n        value: CoverageType.JAVA_SCRIPT,\n      },\n    ];\n    for (const type of coverageTypes) {\n      this.coverageTypeComboBox.addOption(this.coverageTypeComboBox.createOption(type.label, `${type.value}`));\n    }\n    this.coverageTypeComboBoxSetting =\n        Common.Settings.Settings.instance().createSetting('coverage-view-coverage-type', 0);\n    this.coverageTypeComboBox.setSelectedIndex(this.coverageTypeComboBoxSetting.get());\n    this.coverageTypeComboBox.setEnabled(true);\n    toolbar.appendToolbarItem(this.coverageTypeComboBox);\n    this.toggleRecordAction = UI.ActionRegistry.ActionRegistry.instance().getAction('coverage.toggle-recording');\n    this.toggleRecordButton = UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction);\n    toolbar.appendToolbarItem(this.toggleRecordButton);\n\n    const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    const mainTargetSupportsRecordOnReload = mainTarget && mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    this.inlineReloadButton = null;\n    if (mainTargetSupportsRecordOnReload) {\n      this.startWithReloadButton = UI.Toolbar.Toolbar.createActionButtonForId('coverage.start-with-reload');\n      toolbar.appendToolbarItem(this.startWithReloadButton);\n      this.toggleRecordButton.setEnabled(false);\n      this.toggleRecordButton.setVisible(false);\n    }\n    this.clearAction = UI.ActionRegistry.ActionRegistry.instance().getAction('coverage.clear');\n    this.clearAction.setEnabled(false);\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.clearAction));\n\n    toolbar.appendSeparator();\n    this.exportAction = UI.ActionRegistry.ActionRegistry.instance().getAction('coverage.export');\n    this.exportAction.setEnabled(false);\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.exportAction));\n\n    this.textFilterRegExp = null;\n    toolbar.appendSeparator();\n    this.filterInput = new UI.Toolbar.ToolbarFilter(i18nString(UIStrings.filterByUrl), 0.4, 1);\n    this.filterInput.setEnabled(false);\n    this.filterInput.addEventListener(UI.Toolbar.ToolbarInput.Event.TEXT_CHANGED, this.onFilterChanged, this);\n    toolbar.appendToolbarItem(this.filterInput);\n\n    toolbar.appendSeparator();\n\n    this.typeFilterValue = null;\n    this.filterByTypeComboBox = new UI.Toolbar.ToolbarComboBox(\n        this.onFilterByTypeChanged.bind(this), i18nString(UIStrings.filterCoverageByType), undefined,\n        'coverage-by-type');\n    const options = [\n      {\n        label: i18nString(UIStrings.all),\n        value: '',\n      },\n      {\n        label: i18nString(UIStrings.css),\n        value: CoverageType.CSS,\n      },\n      {\n        label: i18nString(UIStrings.javascript),\n        value: CoverageType.JAVA_SCRIPT | CoverageType.JAVA_SCRIPT_PER_FUNCTION,\n      },\n    ];\n    for (const option of options) {\n      this.filterByTypeComboBox.addOption(this.filterByTypeComboBox.createOption(option.label, `${option.value}`));\n    }\n\n    this.filterByTypeComboBox.setSelectedIndex(0);\n    this.filterByTypeComboBox.setEnabled(false);\n    toolbar.appendToolbarItem(this.filterByTypeComboBox);\n\n    toolbar.appendSeparator();\n    this.showContentScriptsSetting = Common.Settings.Settings.instance().createSetting('show-content-scripts', false);\n    this.showContentScriptsSetting.addChangeListener(this.onFilterChanged, this);\n    this.contentScriptsCheckbox = new UI.Toolbar.ToolbarSettingCheckbox(\n        this.showContentScriptsSetting, i18nString(UIStrings.includeExtensionContentScripts),\n        i18nString(UIStrings.contentScripts));\n    this.contentScriptsCheckbox.setEnabled(false);\n    toolbar.appendToolbarItem(this.contentScriptsCheckbox);\n\n    this.coverageResultsElement = this.contentElement.createChild('div', 'coverage-results');\n    this.landingPage = this.buildLandingPage();\n    this.bfcacheReloadPromptPage = this.buildReloadPromptPage(i18nString(UIStrings.bfcacheNoCapture), 'bfcache-page');\n    this.activationReloadPromptPage =\n        this.buildReloadPromptPage(i18nString(UIStrings.activationNoCapture), 'prerender-page');\n    this.listView = new CoverageListView(this.isVisible.bind(this, false));\n\n    this.statusToolbarElement = this.contentElement.createChild('div', 'coverage-toolbar-summary');\n    this.statusMessageElement = this.statusToolbarElement.createChild('div', 'coverage-message');\n    this.landingPage.show(this.coverageResultsElement);\n  }\n\n  static instance(): CoverageView {\n    if (!coverageViewInstance) {\n      coverageViewInstance = new CoverageView();\n    }\n    return coverageViewInstance;\n  }\n\n  static removeInstance(): void {\n    coverageViewInstance = undefined;\n  }\n\n  private buildLandingPage(): UI.Widget.VBox {\n    const widget = new UI.Widget.VBox();\n    let message;\n    if (this.startWithReloadButton) {\n      this.inlineReloadButton =\n          UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButtonForId('coverage.start-with-reload'));\n      message = i18n.i18n.getFormatLocalizedString(\n          str_, UIStrings.clickTheReloadButtonSToReloadAnd, {PH1: this.inlineReloadButton});\n    } else {\n      const recordButton =\n          UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction));\n      message = i18n.i18n.getFormatLocalizedString(str_, UIStrings.clickTheRecordButtonSToStart, {PH1: recordButton});\n    }\n    message.classList.add('message');\n    widget.contentElement.appendChild(message);\n    widget.element.classList.add('landing-page');\n    return widget;\n  }\n\n  private buildReloadPromptPage(message: Common.UIString.LocalizedString, className: string): UI.Widget.VBox {\n    const widget = new UI.Widget.VBox();\n    const reasonDiv = document.createElement('div');\n    reasonDiv.classList.add('message');\n    reasonDiv.textContent = message;\n    widget.contentElement.appendChild(reasonDiv);\n    this.inlineReloadButton =\n        UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButtonForId('inspector-main.reload'));\n    const messageElement =\n        i18n.i18n.getFormatLocalizedString(str_, UIStrings.reloadPrompt, {PH1: this.inlineReloadButton});\n    messageElement.classList.add('message');\n    widget.contentElement.appendChild(messageElement);\n    widget.element.classList.add(className);\n    return widget;\n  }\n\n  clear(): void {\n    if (this.model) {\n      this.model.reset();\n    }\n    this.reset();\n  }\n\n  private reset(): void {\n    if (this.decorationManager) {\n      this.decorationManager.dispose();\n      this.decorationManager = null;\n    }\n    this.listView.reset();\n    this.listView.detach();\n    this.landingPage.show(this.coverageResultsElement);\n    this.statusMessageElement.textContent = '';\n    this.filterInput.setEnabled(false);\n    this.filterByTypeComboBox.setEnabled(false);\n    this.contentScriptsCheckbox.setEnabled(false);\n    this.exportAction.setEnabled(false);\n  }\n\n  toggleRecording(): void {\n    const enable = !this.toggleRecordAction.toggled();\n\n    if (enable) {\n      void this.startRecording({reload: false, jsCoveragePerBlock: this.isBlockCoverageSelected()});\n    } else {\n      void this.stopRecording();\n    }\n  }\n\n  isBlockCoverageSelected(): boolean {\n    const option = this.coverageTypeComboBox.selectedOption();\n    const coverageType = Number(option ? option.value : Number.NaN);\n    // Check that Coverage.CoverageType.JavaScriptPerFunction is not present.\n    return coverageType === CoverageType.JAVA_SCRIPT;\n  }\n\n  private selectCoverageType(jsCoveragePerBlock: boolean): void {\n    const selectedIndex = jsCoveragePerBlock ? 1 : 0;\n    this.coverageTypeComboBox.setSelectedIndex(selectedIndex);\n  }\n\n  private onCoverageTypeComboBoxSelectionChanged(): void {\n    this.coverageTypeComboBoxSetting.set(this.coverageTypeComboBox.selectedIndex());\n  }\n\n  async ensureRecordingStarted(): Promise<void> {\n    const enabled = this.toggleRecordAction.toggled();\n\n    if (enabled) {\n      await this.stopRecording();\n    }\n    await this.startRecording({reload: false, jsCoveragePerBlock: false});\n  }\n\n  async startRecording(options: {reload: (boolean|undefined), jsCoveragePerBlock: (boolean|undefined)}|\n                       null): Promise<void> {\n    let hadFocus, reloadButtonFocused;\n    if ((this.startWithReloadButton && this.startWithReloadButton.element.hasFocus()) ||\n        (this.inlineReloadButton && this.inlineReloadButton.hasFocus())) {\n      reloadButtonFocused = true;\n    } else if (this.hasFocus()) {\n      hadFocus = true;\n    }\n\n    this.reset();\n    const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (!mainTarget) {\n      return;\n    }\n\n    const {reload, jsCoveragePerBlock} = {reload: false, jsCoveragePerBlock: false, ...options};\n\n    if (!this.model || reload) {\n      this.model = mainTarget.model(CoverageModel);\n    }\n    if (!this.model) {\n      return;\n    }\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CoverageStarted);\n    if (jsCoveragePerBlock) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CoverageStartedPerBlock);\n    }\n    const success = await this.model.start(Boolean(jsCoveragePerBlock));\n    if (!success) {\n      return;\n    }\n    this.selectCoverageType(Boolean(jsCoveragePerBlock));\n    this.model.addEventListener(Events.CoverageUpdated, this.onCoverageDataReceived, this);\n    this.model.addEventListener(Events.SourceMapResolved, this.updateListView, this);\n    const resourceTreeModel =\n        mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel) as SDK.ResourceTreeModel.ResourceTreeModel | null;\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.onPrimaryPageChanged, this);\n    this.decorationManager = new CoverageDecorationManager(\n        this.model, Workspace.Workspace.WorkspaceImpl.instance(),\n        Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance(),\n        Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance());\n    this.toggleRecordAction.setToggled(true);\n    this.clearAction.setEnabled(false);\n    if (this.startWithReloadButton) {\n      this.startWithReloadButton.setEnabled(false);\n      this.startWithReloadButton.setVisible(false);\n      this.toggleRecordButton.setEnabled(true);\n      this.toggleRecordButton.setVisible(true);\n      if (reloadButtonFocused) {\n        this.toggleRecordButton.focus();\n      }\n    }\n    this.coverageTypeComboBox.setEnabled(false);\n    this.filterInput.setEnabled(true);\n    this.filterByTypeComboBox.setEnabled(true);\n    this.contentScriptsCheckbox.setEnabled(true);\n    if (this.landingPage.isShowing()) {\n      this.landingPage.detach();\n    }\n    this.listView.show(this.coverageResultsElement);\n    if (hadFocus && !reloadButtonFocused) {\n      this.listView.focus();\n    }\n    if (reload && resourceTreeModel) {\n      resourceTreeModel.reloadPage();\n    } else {\n      void this.model.startPolling();\n    }\n  }\n\n  private onCoverageDataReceived(event: Common.EventTarget.EventTargetEvent<CoverageInfo[]>): void {\n    const data = event.data;\n    this.updateViews(data);\n  }\n\n  private updateListView(): void {\n    this.listView.update(this.model && this.model.entries() || []);\n  }\n\n  async stopRecording(): Promise<void> {\n    SDK.TargetManager.TargetManager.instance().removeModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.onPrimaryPageChanged, this);\n    if (this.hasFocus()) {\n      this.listView.focus();\n    }\n    // Stopping the model triggers one last poll to get the final data.\n    if (this.model) {\n      await this.model.stop();\n      this.model.removeEventListener(Events.CoverageUpdated, this.onCoverageDataReceived, this);\n    }\n    this.toggleRecordAction.setToggled(false);\n    this.coverageTypeComboBox.setEnabled(true);\n    if (this.startWithReloadButton) {\n      this.startWithReloadButton.setEnabled(true);\n      this.startWithReloadButton.setVisible(true);\n      this.toggleRecordButton.setEnabled(false);\n      this.toggleRecordButton.setVisible(false);\n    }\n    this.clearAction.setEnabled(true);\n  }\n\n  processBacklog(): void {\n    this.model && void this.model.processJSBacklog();\n  }\n\n  private async onPrimaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<\n          {frame: SDK.ResourceTreeModel.ResourceTreeFrame, type: SDK.ResourceTreeModel.PrimaryPageChangeType}>):\n      Promise<void> {\n    const frame = event.data.frame;\n    const coverageModel = frame.resourceTreeModel().target().model(CoverageModel);\n    if (!coverageModel) {\n      return;\n    }\n    // If the primary page target has changed (due to MPArch activation), switch to new CoverageModel.\n    if (this.model !== coverageModel) {\n      if (this.model) {\n        await this.model.stop();\n        this.model.removeEventListener(Events.CoverageUpdated, this.onCoverageDataReceived, this);\n      }\n      this.model = coverageModel;\n      const success = await this.model.start(this.isBlockCoverageSelected());\n      if (!success) {\n        return;\n      }\n\n      this.model.addEventListener(Events.CoverageUpdated, this.onCoverageDataReceived, this);\n      this.decorationManager = new CoverageDecorationManager(\n          this.model, Workspace.Workspace.WorkspaceImpl.instance(),\n          Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance(),\n          Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance());\n    }\n\n    if (this.bfcacheReloadPromptPage.isShowing()) {\n      this.bfcacheReloadPromptPage.detach();\n      this.listView.show(this.coverageResultsElement);\n    }\n    if (this.activationReloadPromptPage.isShowing()) {\n      this.activationReloadPromptPage.detach();\n      this.listView.show(this.coverageResultsElement);\n    }\n    if (frame.backForwardCacheDetails.restoredFromCache) {\n      this.listView.detach();\n      this.bfcacheReloadPromptPage.show(this.coverageResultsElement);\n    }\n    if (event.data.type === SDK.ResourceTreeModel.PrimaryPageChangeType.ACTIVATION) {\n      this.listView.detach();\n      this.activationReloadPromptPage.show(this.coverageResultsElement);\n    }\n\n    this.model.reset();\n    this.decorationManager && this.decorationManager.reset();\n    this.listView.reset();\n    void this.model.startPolling();\n  }\n\n  private updateViews(updatedEntries: CoverageInfo[]): void {\n    this.updateStats();\n    this.listView.update(this.model && this.model.entries() || []);\n    this.exportAction.setEnabled(this.model !== null && this.model.entries().length > 0);\n    this.decorationManager && this.decorationManager.update(updatedEntries);\n  }\n\n  private updateStats(): void {\n    const all = {total: 0, unused: 0};\n    const filtered = {total: 0, unused: 0};\n    const filterApplied = this.textFilterRegExp !== null;\n    if (this.model) {\n      for (const info of this.model.entries()) {\n        all.total += info.size();\n        all.unused += info.unusedSize();\n        if (this.isVisible(false, info)) {\n          if (this.textFilterRegExp?.test(info.url())) {\n            filtered.total += info.size();\n            filtered.unused += info.unusedSize();\n          } else {\n            // If it doesn't match the filter, calculate the stats from visible children if there are any\n            for (const childInfo of info.sourcesURLCoverageInfo.values()) {\n              if (this.isVisible(false, childInfo)) {\n                filtered.total += childInfo.size();\n                filtered.unused += childInfo.unusedSize();\n              }\n            }\n          }\n        }\n      }\n    }\n    this.statusMessageElement.textContent = filterApplied ?\n        i18nString(UIStrings.filteredSTotalS, {PH1: formatStat(filtered), PH2: formatStat(all)}) :\n        formatStat(all);\n\n    function formatStat({total, unused}: {total: number, unused: number}): string {\n      const used = total - unused;\n      const percentUsed = total ? Math.round(100 * used / total) : 0;\n      return i18nString(UIStrings.sOfSSUsedSoFarSUnused, {\n        PH1: i18n.ByteUtilities.bytesToString(used),\n        PH2: i18n.ByteUtilities.bytesToString(total),\n        PH3: percentUsed,\n        PH4: i18n.ByteUtilities.bytesToString(unused),\n      });\n    }\n  }\n\n  private onFilterChanged(): void {\n    if (!this.listView) {\n      return;\n    }\n    const text = this.filterInput.value();\n    this.textFilterRegExp = text ? Platform.StringUtilities.createPlainTextSearchRegex(text, 'i') : null;\n    this.listView.updateFilterAndHighlight(this.textFilterRegExp);\n    this.updateStats();\n  }\n\n  private onFilterByTypeChanged(): void {\n    if (!this.listView) {\n      return;\n    }\n\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CoverageReportFiltered);\n\n    const option = this.filterByTypeComboBox.selectedOption();\n    const type = option && option.value;\n    this.typeFilterValue = parseInt(type || '', 10) || null;\n    this.listView.updateFilterAndHighlight(this.textFilterRegExp);\n    this.updateStats();\n  }\n\n  private isVisible(ignoreTextFilter: boolean, coverageInfo: URLCoverageInfo): boolean {\n    const url = coverageInfo.url();\n    if (url.startsWith(CoverageView.EXTENSION_BINDINGS_URL_PREFIX)) {\n      return false;\n    }\n    if (coverageInfo.isContentScript() && !this.showContentScriptsSetting.get()) {\n      return false;\n    }\n    if (this.typeFilterValue && !(coverageInfo.type() & this.typeFilterValue)) {\n      return false;\n    }\n    // If it's a parent, check if any children are visible\n    if (coverageInfo.sourcesURLCoverageInfo.size > 0) {\n      for (const sourceURLCoverageInfo of coverageInfo.sourcesURLCoverageInfo.values()) {\n        if (this.isVisible(ignoreTextFilter, sourceURLCoverageInfo)) {\n          return true;\n        }\n      }\n    }\n\n    return ignoreTextFilter || !this.textFilterRegExp || this.textFilterRegExp.test(url);\n  }\n\n  async exportReport(): Promise<void> {\n    const fos = new Bindings.FileUtils.FileOutputStream();\n    const fileName =\n        `Coverage-${Platform.DateUtilities.toISO8601Compact(new Date())}.json` as Platform.DevToolsPath.RawPathString;\n    const accepted = await fos.open(fileName);\n    if (!accepted) {\n      return;\n    }\n    this.model && await this.model.exportReport(fos);\n  }\n\n  selectCoverageItemByUrl(url: string): void {\n    this.listView.selectByUrl(url);\n  }\n\n  static readonly EXTENSION_BINDINGS_URL_PREFIX = 'extensions::';\n\n  override wasShown(): void {\n    UI.Context.Context.instance().setFlavor(CoverageView, this);\n    super.wasShown();\n    this.registerCSSFiles([coverageViewStyles]);\n  }\n\n  override willHide(): void {\n    super.willHide();\n    UI.Context.Context.instance().setFlavor(CoverageView, null);\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    const coverageViewId = 'coverage';\n    void UI.ViewManager.ViewManager.instance()\n        .showView(coverageViewId, /** userGesture= */ false, /** omitFocus= */ true)\n        .then(() => {\n          const view = UI.ViewManager.ViewManager.instance().view(coverageViewId);\n          return view && view.widget();\n        })\n        .then(widget => this.innerHandleAction(widget as CoverageView, actionId));\n\n    return true;\n  }\n\n  private innerHandleAction(coverageView: CoverageView, actionId: string): void {\n    switch (actionId) {\n      case 'coverage.toggle-recording':\n        coverageView.toggleRecording();\n        break;\n      case 'coverage.start-with-reload':\n        void coverageView.startRecording({reload: true, jsCoveragePerBlock: coverageView.isBlockCoverageSelected()});\n        break;\n      case 'coverage.clear':\n        coverageView.clear();\n        break;\n      case 'coverage.export':\n        void coverageView.exportReport();\n        break;\n      default:\n        console.assert(false, `Unknown action: ${actionId}`);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
