{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/mobile_throttling/NetworkThrottlingSelector.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport {ThrottlingPresets, type NetworkThrottlingConditionsGroup} from './ThrottlingPresets.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to indicate something is not enabled\n   */\n  disabled: 'Disabled',\n  /**\n   *@description Title for a group of configuration options\n   */\n  presets: 'Presets',\n  /**\n   *@description Text in Network Throttling Selector of the Network panel\n   */\n  custom: 'Custom',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/NetworkThrottlingSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class NetworkThrottlingSelector {\n  private populateCallback:\n      (arg0: Array<NetworkThrottlingConditionsGroup>) => Array<SDK.NetworkManager.Conditions|null>;\n  private readonly selectCallback: (arg0: number) => void;\n  private readonly customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private options!: (SDK.NetworkManager.Conditions|null)[];\n\n  constructor(\n      populateCallback: (arg0: Array<NetworkThrottlingConditionsGroup>) => Array<SDK.NetworkManager.Conditions|null>,\n      selectCallback: (arg0: number) => void,\n      customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>) {\n    this.populateCallback = populateCallback;\n    this.selectCallback = selectCallback;\n    this.customNetworkConditionsSetting = customNetworkConditionsSetting;\n    this.customNetworkConditionsSetting.addChangeListener(this.populateOptions, this);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, () => {\n          this.networkConditionsChanged();\n        }, this);\n    this.populateOptions();\n  }\n\n  revealAndUpdate(): void {\n    void Common.Revealer.reveal(this.customNetworkConditionsSetting);\n    this.networkConditionsChanged();\n  }\n\n  optionSelected(conditions: SDK.NetworkManager.Conditions): void {\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(conditions);\n  }\n\n  private populateOptions(): void {\n    const disabledGroup = {title: i18nString(UIStrings.disabled), items: [SDK.NetworkManager.NoThrottlingConditions]};\n    const presetsGroup = {title: i18nString(UIStrings.presets), items: ThrottlingPresets.networkPresets};\n    const customGroup = {title: i18nString(UIStrings.custom), items: this.customNetworkConditionsSetting.get()};\n    this.options = this.populateCallback([disabledGroup, presetsGroup, customGroup]);\n    if (!this.networkConditionsChanged()) {\n      for (let i = this.options.length - 1; i >= 0; i--) {\n        if (this.options[i]) {\n          this.optionSelected(this.options[i] as SDK.NetworkManager.Conditions);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * returns false if selected condition no longer exists\n   */\n  private networkConditionsChanged(): boolean {\n    const value = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    for (let index = 0; index < this.options.length; ++index) {\n      const option = this.options[index];\n      if (option && SDK.NetworkManager.networkConditionsEqual(value, option)) {\n        this.selectCallback(index);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,YAAY;AACxB,YAAY,UAAU;AACtB,YAAY,SAAS;AAErB,SAAQ,yBAA+D;AAEvE,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,UAAU;AAAA;AAAA;AAAA;AAAA,EAIV,SAAS;AAAA;AAAA;AAAA;AAAA,EAIT,QAAQ;AACV;AACA,MAAM,OAAO,KAAK,KAAK,kBAAkB,yDAAyD,SAAS;AAC3G,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAC7D,aAAM,0BAA0B;AAAA,EAC7B;AAAA,EAES;AAAA,EACA;AAAA,EACT;AAAA,EAER,YACI,kBACA,gBACA,gCAA0F;AAC5F,SAAK,mBAAmB;AACxB,SAAK,iBAAiB;AACtB,SAAK,iCAAiC;AACtC,SAAK,+BAA+B,kBAAkB,KAAK,iBAAiB,IAAI;AAChF,QAAI,eAAe,0BAA0B,SAAS,EAAE;AAAA,MACpD,IAAI,eAAe,0BAA0B,OAAO;AAAA,MAAoB,MAAM;AAC5E,aAAK,yBAAyB;AAAA,MAChC;AAAA,MAAG;AAAA,IAAI;AACX,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAEA,kBAAwB;AACtB,SAAK,OAAO,SAAS,OAAO,KAAK,8BAA8B;AAC/D,SAAK,yBAAyB;AAAA,EAChC;AAAA,EAEA,eAAe,YAAiD;AAC9D,QAAI,eAAe,0BAA0B,SAAS,EAAE,qBAAqB,UAAU;AAAA,EACzF;AAAA,EAEQ,kBAAwB;AAC9B,UAAM,gBAAgB,EAAC,OAAO,WAAW,UAAU,QAAQ,GAAG,OAAO,CAAC,IAAI,eAAe,sBAAsB,EAAC;AAChH,UAAM,eAAe,EAAC,OAAO,WAAW,UAAU,OAAO,GAAG,OAAO,kBAAkB,eAAc;AACnG,UAAM,cAAc,EAAC,OAAO,WAAW,UAAU,MAAM,GAAG,OAAO,KAAK,+BAA+B,IAAI,EAAC;AAC1G,SAAK,UAAU,KAAK,iBAAiB,CAAC,eAAe,cAAc,WAAW,CAAC;AAC/E,QAAI,CAAC,KAAK,yBAAyB,GAAG;AACpC,eAAS,IAAI,KAAK,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AACjD,YAAI,KAAK,QAAQ,CAAC,GAAG;AACnB,eAAK,eAAe,KAAK,QAAQ,CAAC,CAAkC;AACpE;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,2BAAoC;AAC1C,UAAM,QAAQ,IAAI,eAAe,0BAA0B,SAAS,EAAE,kBAAkB;AACxF,aAAS,QAAQ,GAAG,QAAQ,KAAK,QAAQ,QAAQ,EAAE,OAAO;AACxD,YAAM,SAAS,KAAK,QAAQ,KAAK;AACjC,UAAI,UAAU,IAAI,eAAe,uBAAuB,OAAO,MAAM,GAAG;AACtE,aAAK,eAAe,KAAK;AACzB,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
