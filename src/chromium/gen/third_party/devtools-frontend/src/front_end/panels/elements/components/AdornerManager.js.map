{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/elements/components/AdornerManager.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const enum AdornerCategories {\n  SECURITY = 'Security',\n  LAYOUT = 'Layout',\n  DEFAULT = 'Default',\n}\n\nexport interface AdornerSetting {\n  adorner: string;\n  isEnabled: boolean;\n}\n\nexport type AdornerSettingsMap = Map<string, boolean>;\n\nexport interface RegisteredAdorner {\n  readonly name: string;\n  readonly category: AdornerCategories;\n  readonly enabledByDefault: boolean;\n}\n\nexport enum RegisteredAdorners {\n  GRID = 'grid',\n  SUBGRID = 'subgrid',\n  FLEX = 'flex',\n  AD = 'ad',\n  SCROLL_SNAP = 'scroll-snap',\n  CONTAINER = 'container',\n  SLOT = 'slot',\n  TOP_LAYER = 'top-layer',\n  REVEAL = 'reveal',\n  MEDIA = 'media',\n  SCROLL = 'scroll',\n}\n\n// This enum-like const object serves as the authoritative registry for all the\n// adorners available.\nexport function getRegisteredAdorner(which: RegisteredAdorners): RegisteredAdorner {\n  switch (which) {\n    case RegisteredAdorners.GRID:\n      return {\n        name: 'grid',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.SUBGRID:\n      return {\n        name: 'subgrid',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.FLEX:\n      return {\n        name: 'flex',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.AD:\n      return {\n        name: 'ad',\n        category: AdornerCategories.SECURITY,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.SCROLL_SNAP:\n      return {\n        name: 'scroll-snap',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.CONTAINER:\n      return {\n        name: 'container',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.SLOT:\n      return {\n        name: 'slot',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.TOP_LAYER:\n      return {\n        name: 'top-layer',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.REVEAL:\n      return {\n        name: 'reveal',\n        category: AdornerCategories.DEFAULT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.MEDIA:\n      return {\n        name: 'media',\n        category: AdornerCategories.DEFAULT,\n        enabledByDefault: false,\n      };\n    case RegisteredAdorners.SCROLL:\n      return {\n        name: 'scroll',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n  }\n}\n\nlet adornerNameToCategoryMap: Map<string, AdornerCategories>|undefined = undefined;\n\nfunction getCategoryFromAdornerName(name: string): AdornerCategories {\n  if (!adornerNameToCategoryMap) {\n    adornerNameToCategoryMap = new Map();\n    for (const {name, category} of Object.values(RegisteredAdorners).map(getRegisteredAdorner)) {\n      adornerNameToCategoryMap.set(name, category);\n    }\n  }\n  return adornerNameToCategoryMap.get(name) || AdornerCategories.DEFAULT;\n}\n\nexport const DefaultAdornerSettings: AdornerSetting[] =\n    Object.values(RegisteredAdorners).map(getRegisteredAdorner).map(({name, enabledByDefault}) => ({\n                                                                      adorner: name,\n                                                                      isEnabled: enabledByDefault,\n                                                                    }));\n\ninterface SettingStore<Setting> {\n  get(): Setting;\n  set(setting: Setting): void;\n}\n\nexport class AdornerManager {\n  #adornerSettings: AdornerSettingsMap = new Map();\n  #settingStore: SettingStore<AdornerSetting[]>;\n\n  constructor(settingStore: SettingStore<AdornerSetting[]>) {\n    this.#settingStore = settingStore;\n    this.#syncSettings();\n  }\n\n  updateSettings(settings: AdornerSettingsMap): void {\n    this.#adornerSettings = settings;\n    this.#persistCurrentSettings();\n  }\n\n  getSettings(): Readonly<AdornerSettingsMap> {\n    return this.#adornerSettings;\n  }\n\n  isAdornerEnabled(adornerText: string): boolean {\n    return this.#adornerSettings.get(adornerText) || false;\n  }\n\n  #persistCurrentSettings(): void {\n    const settingList = [];\n    for (const [adorner, isEnabled] of this.#adornerSettings) {\n      settingList.push({adorner, isEnabled});\n    }\n    this.#settingStore.set(settingList);\n  }\n\n  #loadSettings(): void {\n    const settingList = this.#settingStore.get();\n    for (const setting of settingList) {\n      this.#adornerSettings.set(setting.adorner, setting.isEnabled);\n    }\n  }\n\n  #syncSettings(): void {\n    this.#loadSettings();\n\n    // Prune outdated adorners and add new ones to the persistence.\n    const outdatedAdorners = new Set(this.#adornerSettings.keys());\n    for (const {adorner, isEnabled} of DefaultAdornerSettings) {\n      outdatedAdorners.delete(adorner);\n      if (!this.#adornerSettings.has(adorner)) {\n        this.#adornerSettings.set(adorner, isEnabled);\n      }\n    }\n    for (const outdatedAdorner of outdatedAdorners) {\n      this.#adornerSettings.delete(outdatedAdorner);\n    }\n\n    this.#persistCurrentSettings();\n  }\n}\n\nconst OrderedAdornerCategories = [\n  AdornerCategories.SECURITY,\n  AdornerCategories.LAYOUT,\n  AdornerCategories.DEFAULT,\n];\n\n// Use idx + 1 for the order to avoid JavaScript's 0 == false issue\nexport const AdornerCategoryOrder = new Map(OrderedAdornerCategories.map((category, idx) => [category, idx + 1]));\n\nexport function compareAdornerNamesByCategory(nameA: string, nameB: string): number {\n  const orderA = AdornerCategoryOrder.get(getCategoryFromAdornerName(nameA)) || Number.POSITIVE_INFINITY;\n  const orderB = AdornerCategoryOrder.get(getCategoryFromAdornerName(nameB)) || Number.POSITIVE_INFINITY;\n  return orderA - orderB;\n}\n"],
  "mappings": "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",
  "names": ["AdornerCategories", "RegisteredAdorners", "name"]
}
