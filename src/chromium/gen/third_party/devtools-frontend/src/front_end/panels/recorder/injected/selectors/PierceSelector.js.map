{
  "version": 3,
  "sources": ["../../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/recorder/injected/selectors/PierceSelector.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  pierceQuerySelectorAll,\n} from '../../../../third_party/puppeteer/package/lib/esm/puppeteer/injected/PierceQuerySelector.js';\n\nimport {\n  findMinMax,\n  type QueryableNode,\n  type RangeOps,\n  SelectorRangeOps,\n} from './CSSSelector.js';\nimport type {Selector} from './Selector.js';\n\nclass PierceSelectorRangeOpts implements RangeOps<QueryableNode, string[][]> {\n  #selector: string[][] = [[]];\n  #attributes: string[];\n  #depth = 0;\n\n  constructor(attributes: string[] = []) {\n    this.#attributes = attributes;\n  }\n\n  inc(node: Node): Document|ShadowRoot {\n    return node.getRootNode() as Document | ShadowRoot;\n  }\n  self(node: Document|ShadowRoot): QueryableNode {\n    return node instanceof ShadowRoot ? node.host : node;\n  }\n  valueOf(node: QueryableNode): string[][] {\n    const selector = findMinMax(\n        [node, node.getRootNode()],\n        new SelectorRangeOps(this.#attributes),\n    );\n    if (this.#depth > 1) {\n      this.#selector.unshift([selector]);\n    } else {\n      this.#selector[0].unshift(selector);\n    }\n    this.#depth = 0;\n    return this.#selector;\n  }\n  gte(selector: string[][], node: Node): boolean {\n    ++this.#depth;\n    // Note we use some insider logic here. `valueOf(node)` will always\n    // correspond to `selector.flat().slice(1)`, so it suffices to check\n    // uniqueness for `selector.flat()[0]`.\n    return pierceQuerySelectorAll(node, selector[0][0]).length === 1;\n  }\n}\n\n/**\n * Computes the pierce CSS selector for a node.\n *\n * @param node - The node to compute.\n * @returns The computed pierce CSS selector.\n *\n * @internal\n */\nexport const computePierceSelector = (\n    node: Node,\n    attributes?: string[],\n    ): string[]|undefined => {\n  try {\n    const ops = new PierceSelectorRangeOpts(attributes);\n    return findMinMax([node, document], ops).flat();\n  } catch {\n    return undefined;\n  }\n};\n\nexport const queryPierceSelectorAll = (selectors: Selector): Element[] => {\n  if (typeof selectors === 'string') {\n    selectors = [selectors];\n  } else if (selectors.length === 0) {\n    return [];\n  }\n  let lists: Element[][] = [[document.documentElement]];\n  do {\n    const selector = selectors.shift() as string;\n    const roots: Element[][] = [];\n    for (const nodes of lists) {\n      for (const node of nodes) {\n        const list = pierceQuerySelectorAll(node.shadowRoot ?? node, selector);\n        if (list.length > 0) {\n          roots.push(list);\n        }\n      }\n    }\n    lists = roots;\n  } while (selectors.length > 0 && lists.length > 0);\n  return lists.flatMap(list => [...list]);\n};\n"],
  "mappings": ";AAIA;AAAA,EACE;AAAA,OACK;AAEP;AAAA,EACE;AAAA,EAGA;AAAA,OACK;AAGP,MAAM,wBAAuE;AAAA,EAC3E,YAAwB,CAAC,CAAC,CAAC;AAAA,EAC3B;AAAA,EACA,SAAS;AAAA,EAET,YAAY,aAAuB,CAAC,GAAG;AACrC,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,IAAI,MAAiC;AACnC,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA,EACA,KAAK,MAA0C;AAC7C,WAAO,gBAAgB,aAAa,KAAK,OAAO;AAAA,EAClD;AAAA,EACA,QAAQ,MAAiC;AACvC,UAAM,WAAW;AAAA,MACb,CAAC,MAAM,KAAK,YAAY,CAAC;AAAA,MACzB,IAAI,iBAAiB,KAAK,WAAW;AAAA,IACzC;AACA,QAAI,KAAK,SAAS,GAAG;AACnB,WAAK,UAAU,QAAQ,CAAC,QAAQ,CAAC;AAAA,IACnC,OAAO;AACL,WAAK,UAAU,CAAC,EAAE,QAAQ,QAAQ;AAAA,IACpC;AACA,SAAK,SAAS;AACd,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,UAAsB,MAAqB;AAC7C,MAAE,KAAK;AAIP,WAAO,uBAAuB,MAAM,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,WAAW;AAAA,EACjE;AACF;AAUO,aAAM,wBAAwB,CACjC,MACA,eACyB;AAC3B,MAAI;AACF,UAAM,MAAM,IAAI,wBAAwB,UAAU;AAClD,WAAO,WAAW,CAAC,MAAM,QAAQ,GAAG,GAAG,EAAE,KAAK;AAAA,EAChD,QAAQ;AACN,WAAO;AAAA,EACT;AACF;AAEO,aAAM,yBAAyB,CAAC,cAAmC;AACxE,MAAI,OAAO,cAAc,UAAU;AACjC,gBAAY,CAAC,SAAS;AAAA,EACxB,WAAW,UAAU,WAAW,GAAG;AACjC,WAAO,CAAC;AAAA,EACV;AACA,MAAI,QAAqB,CAAC,CAAC,SAAS,eAAe,CAAC;AACpD,KAAG;AACD,UAAM,WAAW,UAAU,MAAM;AACjC,UAAM,QAAqB,CAAC;AAC5B,eAAW,SAAS,OAAO;AACzB,iBAAW,QAAQ,OAAO;AACxB,cAAM,OAAO,uBAAuB,KAAK,cAAc,MAAM,QAAQ;AACrE,YAAI,KAAK,SAAS,GAAG;AACnB,gBAAM,KAAK,IAAI;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AACA,YAAQ;AAAA,EACV,SAAS,UAAU,SAAS,KAAK,MAAM,SAAS;AAChD,SAAO,MAAM,QAAQ,UAAQ,CAAC,GAAG,IAAI,CAAC;AACxC;",
  "names": []
}
