{
  "version": 3,
  "sources": ["../../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/linear_memory_inspector/components/ValueInterpreterSettings.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Input from '../../../ui/components/input/input.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport {ValueType, valueTypeToLocalizedString} from './ValueInterpreterDisplayUtils.js';\nimport valueInterpreterSettingsStyles from './valueInterpreterSettings.css.js';\n\nconst {render, html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Name of a group of selectable value types that do not fall under integer and floating point value types, e.g. Pointer32. The group appears name appears under the Value Interpreter Settings.\n   */\n  otherGroup: 'Other',\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/ValueInterpreterSettings.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ValueInterpreterSettingsData {\n  valueTypes: Set<ValueType>;\n}\n\nconst enum ValueTypeGroup {\n  INTEGER = 'Integer',\n  FLOAT = 'Floating point',\n  OTHER = 'Other',\n}\n\nconst GROUP_TO_TYPES = new Map(\n    [\n      [ValueTypeGroup.INTEGER, [ValueType.INT8, ValueType.INT16, ValueType.INT32, ValueType.INT64]],\n      [ValueTypeGroup.FLOAT, [ValueType.FLOAT32, ValueType.FLOAT64]],\n      [ValueTypeGroup.OTHER, [ValueType.POINTER32, ValueType.POINTER64]],\n    ],\n);\n\nfunction valueTypeGroupToLocalizedString(group: ValueTypeGroup): string {\n  if (group === ValueTypeGroup.OTHER) {\n    return i18nString(UIStrings.otherGroup);\n  }\n\n  // The remaining group type names should not be localized.\n  return group;\n}\n\nexport class TypeToggleEvent extends Event {\n  static readonly eventName = 'typetoggle';\n  data: {type: ValueType, checked: boolean};\n\n  constructor(type: ValueType, checked: boolean) {\n    super(TypeToggleEvent.eventName);\n    this.data = {type, checked};\n  }\n}\n\nexport class ValueInterpreterSettings extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #valueTypes: Set<ValueType> = new Set();\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, valueInterpreterSettingsStyles];\n  }\n\n  set data(data: ValueInterpreterSettingsData) {\n    this.#valueTypes = data.valueTypes;\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"settings\" jslog=${VisualLogging.pane('settings')}>\n       ${[...GROUP_TO_TYPES.keys()].map(group => {\n        return html`\n          <div class=\"value-types-selection\">\n            <span class=\"group\">${valueTypeGroupToLocalizedString(group)}</span>\n            ${this.#plotTypeSelections(group)}\n          </div>\n        `;})}\n      </div>\n      `, this.#shadow, {host: this});\n  }\n\n  #plotTypeSelections(group: ValueTypeGroup): LitHtml.TemplateResult {\n    const types = GROUP_TO_TYPES.get(group);\n    if (!types) {\n      throw new Error(`Unknown group ${group}`);\n    }\n    return html`\n      ${types.map(type => {\n        return html`\n          <label class=\"type-label\" title=${valueTypeToLocalizedString(type)}>\n            <input data-input=\"true\" type=\"checkbox\" .checked=${this.#valueTypes.has(type)} @change=${(e: Event) => this.#onTypeToggle(type, e)} jslog=${VisualLogging.toggle().track({change: true}).context(Platform.StringUtilities.toKebabCase(type))}>\n            <span data-title=\"true\">${valueTypeToLocalizedString(type)}</span>\n          </label>\n     `;})}`;\n  }\n\n  #onTypeToggle(type: ValueType, event: Event): void {\n    const checkbox = event.target as HTMLInputElement;\n    this.dispatchEvent(new TypeToggleEvent(type, checkbox.checked));\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-interpreter-settings', ValueInterpreterSettings);\n\ndeclare global {\n\ninterface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-settings': ValueInterpreterSettings;\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,YAAY,WAAW;AACvB,YAAY,aAAa;AACzB,YAAY,mBAAmB;AAE/B,SAAQ,WAAW,kCAAiC;AACpD,OAAO,oCAAoC;AAE3C,MAAM,EAAC,QAAQ,KAAI,IAAI;AAEvB,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,YAAY;AACd;AACA,MAAM,OACF,KAAK,KAAK,kBAAkB,yEAAyE,SAAS;AAClH,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAMpE,IAAW,iBAAX,kBAAWA,oBAAX;AACE,EAAAA,gBAAA,aAAU;AACV,EAAAA,gBAAA,WAAQ;AACR,EAAAA,gBAAA,WAAQ;AAHC,SAAAA;AAAA,GAAA;AAMX,MAAM,iBAAiB,oBAAI;AAAA,EACvB;AAAA,IACE,CAAC,yBAAwB,CAAC,UAAU,MAAM,UAAU,OAAO,UAAU,OAAO,UAAU,KAAK,CAAC;AAAA,IAC5F,CAAC,8BAAsB,CAAC,UAAU,SAAS,UAAU,OAAO,CAAC;AAAA,IAC7D,CAAC,qBAAsB,CAAC,UAAU,WAAW,UAAU,SAAS,CAAC;AAAA,EACnE;AACJ;AAEA,SAAS,gCAAgC,OAA+B;AACtE,MAAI,UAAU,qBAAsB;AAClC,WAAO,WAAW,UAAU,UAAU;AAAA,EACxC;AAGA,SAAO;AACT;AAEO,aAAM,wBAAwB,MAAM;AAAA,EACzC,OAAgB,YAAY;AAAA,EAC5B;AAAA,EAEA,YAAY,MAAiB,SAAkB;AAC7C,UAAM,gBAAgB,SAAS;AAC/B,SAAK,OAAO,EAAC,MAAM,QAAO;AAAA,EAC5B;AACF;AAEO,aAAM,iCAAiC,YAAY;AAAA,EAE/C,UAAU,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;AAAA,EACnD,cAA8B,oBAAI,IAAI;AAAA,EAEtC,oBAA0B;AACxB,SAAK,QAAQ,qBAAqB,CAAC,MAAM,gBAAgB,8BAA8B;AAAA,EACzF;AAAA,EAEA,IAAI,KAAK,MAAoC;AAC3C,SAAK,cAAc,KAAK;AACxB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,UAAgB;AAGd,WAAO;AAAA,oCACyB,cAAc,KAAK,UAAU,CAAC;AAAA,SACzD,CAAC,GAAG,eAAe,KAAK,CAAC,EAAE,IAAI,WAAS;AACzC,aAAO;AAAA;AAAA,kCAEmB,gCAAgC,KAAK,CAAC;AAAA,cAC1D,KAAK,oBAAoB,KAAK,CAAC;AAAA;AAAA;AAAA,IAEnC,CAAC,CAAC;AAAA;AAAA,SAEH,KAAK,SAAS,EAAC,MAAM,KAAI,CAAC;AAAA,EACjC;AAAA,EAEA,oBAAoB,OAA+C;AACjE,UAAM,QAAQ,eAAe,IAAI,KAAK;AACtC,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,iBAAiB,KAAK,EAAE;AAAA,IAC1C;AACA,WAAO;AAAA,QACH,MAAM,IAAI,UAAQ;AAClB,aAAO;AAAA,4CAC6B,2BAA2B,IAAI,CAAC;AAAA,gEACZ,KAAK,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,MAAa,KAAK,cAAc,MAAM,CAAC,CAAC,UAAU,cAAc,OAAO,EAAE,MAAM,EAAC,QAAQ,KAAI,CAAC,EAAE,QAAQ,SAAS,gBAAgB,YAAY,IAAI,CAAC,CAAC;AAAA,sCACnN,2BAA2B,IAAI,CAAC;AAAA;AAAA;AAAA,IAE/D,CAAC,CAAC;AAAA,EACP;AAAA,EAEA,cAAc,MAAiB,OAAoB;AACjD,UAAM,WAAW,MAAM;AACvB,SAAK,cAAc,IAAI,gBAAgB,MAAM,SAAS,OAAO,CAAC;AAAA,EAChE;AACF;AAEA,eAAe,OAAO,yDAAyD,wBAAwB;",
  "names": ["ValueTypeGroup"]
}
