{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/panels/coverage/CoverageDecorationManager.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\n\nimport type {CoverageInfo, CoverageModel} from './CoverageModel.js';\n\nexport const decoratorType = 'coverage';\n\nexport class CoverageDecorationManager {\n  private coverageModel: CoverageModel;\n  private readonly textByProvider: Map<TextUtils.ContentProvider.ContentProvider, TextUtils.Text.Text|null>;\n  private readonly uiSourceCodeByContentProvider:\n      Platform.MapUtilities.Multimap<TextUtils.ContentProvider.ContentProvider, Workspace.UISourceCode.UISourceCode>;\n\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #debuggerBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding;\n  readonly #cssBinding: Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding;\n\n  constructor(\n      coverageModel: CoverageModel, workspace: Workspace.Workspace.WorkspaceImpl,\n      debuggerBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding,\n      cssBinding: Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding) {\n    this.coverageModel = coverageModel;\n    this.#workspace = workspace;\n    this.#debuggerBinding = debuggerBinding;\n    this.#cssBinding = cssBinding;\n\n    this.textByProvider = new Map();\n    this.uiSourceCodeByContentProvider = new Platform.MapUtilities.Multimap();\n\n    for (const uiSourceCode of this.#workspace.uiSourceCodes()) {\n      uiSourceCode.setDecorationData(decoratorType, this);\n    }\n    this.#workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeAdded, this.onUISourceCodeAdded, this);\n  }\n\n  reset(): void {\n    for (const uiSourceCode of this.#workspace.uiSourceCodes()) {\n      uiSourceCode.setDecorationData(decoratorType, undefined);\n    }\n  }\n\n  dispose(): void {\n    this.reset();\n    this.#workspace.removeEventListener(Workspace.Workspace.Events.UISourceCodeAdded, this.onUISourceCodeAdded, this);\n  }\n\n  update(updatedEntries: CoverageInfo[]): void {\n    for (const entry of updatedEntries) {\n      for (const uiSourceCode of this.uiSourceCodeByContentProvider.get(entry.getContentProvider())) {\n        uiSourceCode.setDecorationData(decoratorType, this);\n      }\n    }\n  }\n\n  /**\n   * Returns the coverage per line of the provided uiSourceCode. The resulting array has the same length\n   * as the provided `lines` array.\n   *\n   * @param uiSourceCode The UISourceCode for which to get the coverage info.\n   * @param lineMappings The caller might have applied formatting to the UISourceCode. Each entry\n   *                     in this array represents one line and the range specifies where it's found in\n   *                     the original content.\n   */\n  async usageByLine(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineMappings: TextUtils.TextRange.TextRange[]):\n      Promise<(boolean | undefined)[]> {\n    const result = [];\n    await this.updateTexts(uiSourceCode, lineMappings);\n\n    for (const {startLine, startColumn, endLine, endColumn} of lineMappings) {\n      const startLocationsPromise = this.rawLocationsForSourceLocation(uiSourceCode, startLine, startColumn);\n      const endLocationsPromise = this.rawLocationsForSourceLocation(uiSourceCode, endLine, endColumn);\n      const [startLocations, endLocations] = await Promise.all([startLocationsPromise, endLocationsPromise]);\n      let used: (boolean|undefined)|undefined = undefined;\n      for (let startIndex = 0, endIndex = 0; startIndex < startLocations.length; ++startIndex) {\n        const start = startLocations[startIndex];\n        while (endIndex < endLocations.length &&\n               CoverageDecorationManager.compareLocations(start, endLocations[endIndex]) >= 0) {\n          ++endIndex;\n        }\n        if (endIndex >= endLocations.length || endLocations[endIndex].id !== start.id) {\n          continue;\n        }\n        const end = endLocations[endIndex++];\n        const text = this.textByProvider.get(end.contentProvider);\n        if (!text) {\n          continue;\n        }\n        const textValue = text.value();\n        let startOffset = Math.min(text.offsetFromPosition(start.line, start.column), textValue.length - 1);\n        let endOffset = Math.min(text.offsetFromPosition(end.line, end.column), textValue.length - 1);\n        while (startOffset <= endOffset && /\\s/.test(textValue[startOffset])) {\n          ++startOffset;\n        }\n        while (startOffset <= endOffset && /\\s/.test(textValue[endOffset])) {\n          --endOffset;\n        }\n        if (startOffset <= endOffset) {\n          used = this.coverageModel.usageForRange(end.contentProvider, startOffset, endOffset);\n        }\n        if (used) {\n          break;\n        }\n      }\n      result.push(used);\n    }\n    return result;\n  }\n\n  private async updateTexts(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineMappings: TextUtils.TextRange.TextRange[]): Promise<void> {\n    const promises = [];\n    for (const range of lineMappings) {\n      for (const entry of await this.rawLocationsForSourceLocation(uiSourceCode, range.startLine, 0)) {\n        if (this.textByProvider.has(entry.contentProvider)) {\n          continue;\n        }\n        this.textByProvider.set(entry.contentProvider, null);\n        this.uiSourceCodeByContentProvider.set(entry.contentProvider, uiSourceCode);\n        promises.push(this.updateTextForProvider(entry.contentProvider));\n      }\n    }\n    await Promise.all(promises);\n  }\n\n  private async updateTextForProvider(contentProvider: TextUtils.ContentProvider.ContentProvider): Promise<void> {\n    const contentData =\n        TextUtils.ContentData.ContentData.contentDataOrEmpty(await contentProvider.requestContentData());\n    this.textByProvider.set(contentProvider, contentData.textObj);\n  }\n\n  private async rawLocationsForSourceLocation(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, line: number, column: number): Promise<RawLocation[]> {\n    const result: RawLocation[] = [];\n    const contentType = uiSourceCode.contentType();\n    if (contentType.hasScripts()) {\n      let locations = await this.#debuggerBinding.uiLocationToRawLocations(uiSourceCode, line, column);\n      locations = locations.filter(location => Boolean(location.script()));\n      for (const location of locations) {\n        const script = location.script();\n        if (!script) {\n          continue;\n        }\n        if (script.isInlineScript() && contentType.isDocument()) {\n          location.lineNumber -= script.lineOffset;\n          if (!location.lineNumber) {\n            location.columnNumber -= script.columnOffset;\n          }\n        }\n        result.push({\n          id: `js:${location.scriptId}`,\n          contentProvider: script,\n          line: location.lineNumber,\n          column: location.columnNumber,\n        });\n      }\n    }\n    if (contentType.isStyleSheet() || contentType.isDocument()) {\n      const rawStyleLocations =\n          this.#cssBinding.uiLocationToRawLocations(new Workspace.UISourceCode.UILocation(uiSourceCode, line, column));\n      for (const location of rawStyleLocations) {\n        const header = location.header();\n        if (!header) {\n          continue;\n        }\n        if (header.isInline && contentType.isDocument()) {\n          location.lineNumber -= header.startLine;\n          if (!location.lineNumber) {\n            location.columnNumber -= header.startColumn;\n          }\n        }\n        result.push({\n          id: `css:${location.styleSheetId}`,\n          contentProvider: header,\n          line: location.lineNumber,\n          column: location.columnNumber,\n        });\n      }\n    }\n    return result.sort(CoverageDecorationManager.compareLocations);\n  }\n\n  private static compareLocations(a: RawLocation, b: RawLocation): number {\n    return a.id.localeCompare(b.id) || a.line - b.line || a.column - b.column;\n  }\n\n  private onUISourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    uiSourceCode.setDecorationData(decoratorType, this);\n  }\n}\nexport interface RawLocation {\n  id: string;\n  contentProvider: TextUtils.ContentProvider.ContentProvider;\n  line: number;\n  column: number;\n}\n"],
  "mappings": "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",
  "names": []
}
