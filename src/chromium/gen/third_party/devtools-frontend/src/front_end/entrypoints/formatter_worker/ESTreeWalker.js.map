{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/entrypoints/formatter_worker/ESTreeWalker.ts"],
  "sourcesContent": ["// Copyright (c) 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Acorn from '../../third_party/acorn/acorn.js';\n\nexport class ESTreeWalker {\n  readonly #beforeVisit: (arg0: Acorn.ESTree.Node) => unknown;\n  readonly #afterVisit: (arg0: Acorn.ESTree.Node) => unknown;\n\n  constructor(beforeVisit: (arg0: Acorn.ESTree.Node) => unknown, afterVisit: ((arg0: Acorn.ESTree.Node) => unknown)) {\n    this.#beforeVisit = beforeVisit;\n    this.#afterVisit = afterVisit;\n  }\n\n  walk(ast: Acorn.ESTree.Node): void {\n    this.#innerWalk(ast, null);\n  }\n\n  #innerWalk(node: Acorn.ESTree.Node, parent: Acorn.ESTree.Node|null): void {\n    if (!node) {\n      return;\n    }\n    node.parent = parent;\n\n    this.#beforeVisit.call(null, node);\n\n    const walkOrder = WALK_ORDER[node.type];\n    if (!walkOrder) {\n      console.error('Walk order not defined for ' + node.type);\n      return;\n    }\n\n    if (node.type === 'TemplateLiteral') {\n      const templateLiteral = (node as Acorn.ESTree.TemplateLiteral);\n      const expressionsLength = templateLiteral.expressions.length;\n      for (let i = 0; i < expressionsLength; ++i) {\n        this.#innerWalk(templateLiteral.quasis[i], templateLiteral);\n        this.#innerWalk(templateLiteral.expressions[i], templateLiteral);\n      }\n      this.#innerWalk(templateLiteral.quasis[expressionsLength], templateLiteral);\n    } else {\n      for (let i = 0; i < walkOrder.length; ++i) {\n        // @ts-ignore We are doing type traversal here, but the strings\n        // in _walkOrder are not mapping. Preferably, we would use the\n        // properties as defined in the types, but we can't do that yet.\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const entity = (node[walkOrder[i]] as any);\n        if (Array.isArray(entity)) {\n          this.#walkArray((entity as Acorn.ESTree.Node[]), node);\n        } else {\n          this.#innerWalk((entity as Acorn.ESTree.Node), node);\n        }\n      }\n    }\n\n    this.#afterVisit.call(null, node);\n  }\n\n  #walkArray(nodeArray: Acorn.ESTree.Node[], parentNode: Acorn.ESTree.Node|null): void {\n    for (let i = 0; i < nodeArray.length; ++i) {\n      this.#innerWalk(nodeArray[i], parentNode);\n    }\n  }\n}\n\nconst WALK_ORDER = {\n  AwaitExpression: ['argument'],\n  ArrayExpression: ['elements'],\n  ArrayPattern: ['elements'],\n  ArrowFunctionExpression: ['params', 'body'],\n  AssignmentExpression: ['left', 'right'],\n  AssignmentPattern: ['left', 'right'],\n  BinaryExpression: ['left', 'right'],\n  BlockStatement: ['body'],\n  BreakStatement: ['label'],\n  CallExpression: ['callee', 'arguments'],\n  CatchClause: ['param', 'body'],\n  ClassBody: ['body'],\n  ClassDeclaration: ['id', 'superClass', 'body'],\n  ClassExpression: ['id', 'superClass', 'body'],\n  ChainExpression: ['expression'],\n  ConditionalExpression: ['test', 'consequent', 'alternate'],\n  ContinueStatement: ['label'],\n  DebuggerStatement: [],\n  DoWhileStatement: ['body', 'test'],\n  EmptyStatement: [],\n  ExpressionStatement: ['expression'],\n  ForInStatement: ['left', 'right', 'body'],\n  ForOfStatement: ['left', 'right', 'body'],\n  ForStatement: ['init', 'test', 'update', 'body'],\n  FunctionDeclaration: ['id', 'params', 'body'],\n  FunctionExpression: ['id', 'params', 'body'],\n  Identifier: [],\n  ImportDeclaration: ['specifiers', 'source'],\n  ImportDefaultSpecifier: ['local'],\n  ImportNamespaceSpecifier: ['local'],\n  ImportSpecifier: ['imported', 'local'],\n  ImportExpression: ['source'],\n  ExportAllDeclaration: ['source'],\n  ExportDefaultDeclaration: ['declaration'],\n  ExportNamedDeclaration: ['specifiers', 'source', 'declaration'],\n  ExportSpecifier: ['exported', 'local'],\n  IfStatement: ['test', 'consequent', 'alternate'],\n  LabeledStatement: ['label', 'body'],\n  Literal: [],\n  LogicalExpression: ['left', 'right'],\n  MemberExpression: ['object', 'property'],\n  MetaProperty: ['meta', 'property'],\n  MethodDefinition: ['key', 'value'],\n  NewExpression: ['callee', 'arguments'],\n  ObjectExpression: ['properties'],\n  ObjectPattern: ['properties'],\n  ParenthesizedExpression: ['expression'],\n  PrivateIdentifier: [],\n  PropertyDefinition: ['key', 'value'],\n  Program: ['body'],\n  Property: ['key', 'value'],\n  RestElement: ['argument'],\n  ReturnStatement: ['argument'],\n  SequenceExpression: ['expressions'],\n  SpreadElement: ['argument'],\n  StaticBlock: ['body'],\n  Super: [],\n  SwitchCase: ['test', 'consequent'],\n  SwitchStatement: ['discriminant', 'cases'],\n  TaggedTemplateExpression: ['tag', 'quasi'],\n  TemplateElement: [],\n  TemplateLiteral: ['quasis', 'expressions'],\n  ThisExpression: [],\n  ThrowStatement: ['argument'],\n  TryStatement: ['block', 'handler', 'finalizer'],\n  UnaryExpression: ['argument'],\n  UpdateExpression: ['argument'],\n  VariableDeclaration: ['declarations'],\n  VariableDeclarator: ['id', 'init'],\n  WhileStatement: ['test', 'body'],\n  WithStatement: ['object', 'body'],\n  YieldExpression: ['argument'],\n};\n"],
  "mappings": "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",
  "names": []
}
