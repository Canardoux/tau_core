{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/entrypoints/formatter_worker/FormattedContentBuilder.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport class FormattedContentBuilder {\n  #lastOriginalPosition = 0;\n  #formattedContent: string[] = [];\n  #formattedContentLength = 0;\n  #lastFormattedPosition = 0;\n  #nestingLevel = 0;\n  #newLines = 0;\n  #enforceSpaceBetweenWords = true;\n  #softSpace = false;\n  #hardSpaces = 0;\n  #cachedIndents = new Map<number, string>();\n  #canBeIdentifierOrNumber = /[$\\u200C\\u200D\\p{ID_Continue}]/u;\n\n  mapping = {original: [0], formatted: [0]};\n\n  constructor(private indentString: string) {\n  }\n\n  setEnforceSpaceBetweenWords(value: boolean): boolean {\n    const oldValue = this.#enforceSpaceBetweenWords;\n    this.#enforceSpaceBetweenWords = value;\n    return oldValue;\n  }\n\n  addToken(token: string, offset: number): void {\n    // Skip the regex check if `addSoftSpace` will be a no-op.\n    if (this.#enforceSpaceBetweenWords && !this.#hardSpaces && !this.#softSpace) {\n      const lastCharOfLastToken = this.#formattedContent.at(-1)?.at(-1) ?? '';\n      if (this.#canBeIdentifierOrNumber.test(lastCharOfLastToken) && this.#canBeIdentifierOrNumber.test(token)) {\n        this.addSoftSpace();\n      }\n    }\n\n    this.#appendFormatting();\n\n    // Insert token.\n    this.#addMappingIfNeeded(offset);\n    this.#addText(token);\n  }\n\n  addSoftSpace(): void {\n    if (!this.#hardSpaces) {\n      this.#softSpace = true;\n    }\n  }\n\n  addHardSpace(): void {\n    this.#softSpace = false;\n    ++this.#hardSpaces;\n  }\n\n  addNewLine(noSquash?: boolean): void {\n    // Avoid leading newlines.\n    if (!this.#formattedContentLength) {\n      return;\n    }\n    if (noSquash) {\n      ++this.#newLines;\n    } else {\n      this.#newLines = this.#newLines || 1;\n    }\n  }\n\n  increaseNestingLevel(): void {\n    this.#nestingLevel += 1;\n  }\n\n  decreaseNestingLevel(): void {\n    if (this.#nestingLevel > 0) {\n      this.#nestingLevel -= 1;\n    }\n  }\n\n  content(): string {\n    return this.#formattedContent.join('') + (this.#newLines ? '\\n' : '');\n  }\n\n  #appendFormatting(): void {\n    if (this.#newLines) {\n      for (let i = 0; i < this.#newLines; ++i) {\n        this.#addText('\\n');\n      }\n      this.#addText(this.#indent());\n    } else if (this.#softSpace) {\n      this.#addText(' ');\n    }\n    if (this.#hardSpaces) {\n      for (let i = 0; i < this.#hardSpaces; ++i) {\n        this.#addText(' ');\n      }\n    }\n    this.#newLines = 0;\n    this.#softSpace = false;\n    this.#hardSpaces = 0;\n  }\n\n  #indent(): string {\n    const cachedValue = this.#cachedIndents.get(this.#nestingLevel);\n    if (cachedValue) {\n      return cachedValue;\n    }\n\n    let fullIndent = '';\n    for (let i = 0; i < this.#nestingLevel; ++i) {\n      fullIndent += this.indentString;\n    }\n\n    // Cache a maximum of 20 nesting level indents.\n    if (this.#nestingLevel <= 20) {\n      this.#cachedIndents.set(this.#nestingLevel, fullIndent);\n    }\n    return fullIndent;\n  }\n\n  #addText(text: string): void {\n    this.#formattedContent.push(text);\n    this.#formattedContentLength += text.length;\n  }\n\n  #addMappingIfNeeded(originalPosition: number): void {\n    if (originalPosition - this.#lastOriginalPosition === this.#formattedContentLength - this.#lastFormattedPosition) {\n      return;\n    }\n    this.mapping.original.push(originalPosition);\n    this.#lastOriginalPosition = originalPosition;\n    this.mapping.formatted.push(this.#formattedContentLength);\n    this.#lastFormattedPosition = this.#formattedContentLength;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
