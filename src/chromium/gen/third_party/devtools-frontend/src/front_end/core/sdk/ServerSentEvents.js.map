{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/ServerSentEvents.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport {Events, type EventSourceMessage, type NetworkRequest} from './NetworkRequest.js';\nimport {ServerSentEventsParser} from './ServerSentEventsProtocol.js';\n\n/**\n * Server sent events only arrive via CDP (Explicit Network.eventSourceMessageReceived) when\n * the page uses \"EventSource\" in the code.\n *\n * If the page manually uses 'fetch' or XHR we have to do the protocol parsing\n * ourselves.\n *\n * `ServerSentEvents` is a small helper class that manages this distinction for a specific\n * request, stores the event data and sends out \"EventSourceMessageAdded\" events for a request.\n */\nexport class ServerSentEvents {\n  readonly #request: NetworkRequest;\n  readonly #parser?: ServerSentEventsParser;\n\n  // In the case where we parse the events ourselves we use the time of the last 'dataReceived'\n  // event for all the events that come out of the corresponding chunk of data.\n  #lastDataReceivedTime: number = 0;\n\n  readonly #eventSourceMessages: EventSourceMessage[] = [];\n\n  constructor(request: NetworkRequest, parseFromStreamedData: boolean) {\n    this.#request = request;\n\n    // Only setup parsing if we don't get the events over CDP directly.\n    if (parseFromStreamedData) {\n      this.#lastDataReceivedTime = request.pseudoWallTime(request.startTime);\n      this.#parser = new ServerSentEventsParser(this.#onParserEvent.bind(this), request.charset() ?? undefined);\n\n      // Get the streaming content and add the already received bytes if someone else started\n      // the streaming earlier.\n      void this.#request.requestStreamingContent().then(streamingContentData => {\n        if (!TextUtils.StreamingContentData.isError(streamingContentData)) {\n          void this.#parser?.addBase64Chunk(streamingContentData.content().base64);\n          streamingContentData.addEventListener(\n              TextUtils.StreamingContentData.Events.CHUNK_ADDED, ({data: {chunk}}) => {\n                this.#lastDataReceivedTime = request.pseudoWallTime(request.endTime);\n                void this.#parser?.addBase64Chunk(chunk);\n              });\n        }\n      });\n    }\n  }\n\n  get eventSourceMessages(): readonly EventSourceMessage[] {\n    return this.#eventSourceMessages;\n  }\n\n  /** Forwarded Network.eventSourceMessage received */\n  onProtocolEventSourceMessageReceived(eventName: string, data: string, eventId: string, time: number): void {\n    this.#recordMessageAndDispatchEvent({\n      eventName,\n      eventId,\n      data,\n      time,\n    });\n  }\n\n  #onParserEvent(eventName: string, data: string, eventId: string): void {\n    this.#recordMessageAndDispatchEvent({\n      eventName,\n      eventId,\n      data,\n      time: this.#lastDataReceivedTime,\n    });\n  }\n\n  #recordMessageAndDispatchEvent(message: EventSourceMessage): void {\n    this.#eventSourceMessages.push(message);\n    this.#request.dispatchEventToListeners(Events.EVENT_SOURCE_MESSAGE_ADDED, message);\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,eAAe;AAE3B,SAAQ,cAA2D;AACnE,SAAQ,8BAA6B;AAY9B,aAAM,iBAAiB;AAAA,EACnB;AAAA,EACA;AAAA;AAAA;AAAA,EAIT,wBAAgC;AAAA,EAEvB,uBAA6C,CAAC;AAAA,EAEvD,YAAY,SAAyB,uBAAgC;AACnE,SAAK,WAAW;AAGhB,QAAI,uBAAuB;AACzB,WAAK,wBAAwB,QAAQ,eAAe,QAAQ,SAAS;AACrE,WAAK,UAAU,IAAI,uBAAuB,KAAK,eAAe,KAAK,IAAI,GAAG,QAAQ,QAAQ,KAAK,MAAS;AAIxG,WAAK,KAAK,SAAS,wBAAwB,EAAE,KAAK,0BAAwB;AACxE,YAAI,CAAC,UAAU,qBAAqB,QAAQ,oBAAoB,GAAG;AACjE,eAAK,KAAK,SAAS,eAAe,qBAAqB,QAAQ,EAAE,MAAM;AACvE,+BAAqB;AAAA,YACjB,UAAU,qBAAqB,OAAO;AAAA,YAAa,CAAC,EAAC,MAAM,EAAC,MAAK,EAAC,MAAM;AACtE,mBAAK,wBAAwB,QAAQ,eAAe,QAAQ,OAAO;AACnE,mBAAK,KAAK,SAAS,eAAe,KAAK;AAAA,YACzC;AAAA,UAAC;AAAA,QACP;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,IAAI,sBAAqD;AACvD,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,qCAAqC,WAAmB,MAAc,SAAiB,MAAoB;AACzG,SAAK,+BAA+B;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,eAAe,WAAmB,MAAc,SAAuB;AACrE,SAAK,+BAA+B;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,KAAK;AAAA,IACb,CAAC;AAAA,EACH;AAAA,EAEA,+BAA+B,SAAmC;AAChE,SAAK,qBAAqB,KAAK,OAAO;AACtC,SAAK,SAAS,yBAAyB,OAAO,4BAA4B,OAAO;AAAA,EACnF;AACF;",
  "names": []
}
