{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/ServiceWorkerCacheModel.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport type {NameValue} from './NetworkRequest.js';\nimport {SDKModel} from './SDKModel.js';\nimport {type BucketEvent, Events as StorageBucketsModelEvents, StorageBucketsModel} from './StorageBucketsModel.js';\nimport {Capability, type Target} from './Target.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Service Worker Cache Model\n   *@example {https://cache} PH1\n   *@example {error message} PH2\n   */\n  serviceworkercacheagentError: '`ServiceWorkerCacheAgent` error deleting cache entry {PH1} in cache: {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ServiceWorkerCacheModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ServiceWorkerCacheModel extends SDKModel<EventTypes> implements ProtocolProxyApi.StorageDispatcher {\n  readonly cacheAgent: ProtocolProxyApi.CacheStorageApi;\n  readonly #storageAgent: ProtocolProxyApi.StorageApi;\n  readonly #storageBucketModel: StorageBucketsModel;\n\n  readonly #cachesInternal = new Map<string, Cache>();\n  readonly #storageKeysTracked = new Set<string>();\n  readonly #storageBucketsUpdated = new Set<Protocol.Storage.StorageBucket>();\n  readonly #throttler = new Common.Throttler.Throttler(2000);\n  #enabled = false;\n\n  // Used by tests to remove the Throttler timeout.\n  #scheduleAsSoonAsPossible = false;\n\n  /**\n   * Invariant: This #model can only be constructed on a ServiceWorker target.\n   */\n  constructor(target: Target) {\n    super(target);\n    target.registerStorageDispatcher(this);\n\n    this.cacheAgent = target.cacheStorageAgent();\n    this.#storageAgent = target.storageAgent();\n    this.#storageBucketModel = (target.model(StorageBucketsModel) as StorageBucketsModel);\n  }\n\n  enable(): void {\n    if (this.#enabled) {\n      return;\n    }\n\n    this.#storageBucketModel.addEventListener(StorageBucketsModelEvents.BUCKET_ADDED, this.storageBucketAdded, this);\n    this.#storageBucketModel.addEventListener(\n        StorageBucketsModelEvents.BUCKET_REMOVED, this.storageBucketRemoved, this);\n\n    for (const storageBucket of this.#storageBucketModel.getBuckets()) {\n      this.addStorageBucket(storageBucket.bucket);\n    }\n    this.#enabled = true;\n  }\n\n  clearForStorageKey(storageKey: string): void {\n    for (const [opaqueId, cache] of this.#cachesInternal.entries()) {\n      if (cache.storageKey === storageKey) {\n        this.#cachesInternal.delete((opaqueId as string));\n        this.cacheRemoved((cache as Cache));\n      }\n    }\n    for (const storageBucket of this.#storageBucketModel.getBucketsForStorageKey(storageKey)) {\n      void this.loadCacheNames(storageBucket.bucket);\n    }\n  }\n\n  refreshCacheNames(): void {\n    for (const cache of this.#cachesInternal.values()) {\n      this.cacheRemoved(cache);\n    }\n    this.#cachesInternal.clear();\n    const storageBuckets = this.#storageBucketModel.getBuckets();\n    for (const storageBucket of storageBuckets) {\n      void this.loadCacheNames(storageBucket.bucket);\n    }\n  }\n\n  async deleteCache(cache: Cache): Promise<void> {\n    const response = await this.cacheAgent.invoke_deleteCache({cacheId: cache.cacheId});\n    if (response.getError()) {\n      console.error(`ServiceWorkerCacheAgent error deleting cache ${cache.toString()}: ${response.getError()}`);\n      return;\n    }\n    this.#cachesInternal.delete(cache.cacheId);\n    this.cacheRemoved(cache);\n  }\n\n  async deleteCacheEntry(cache: Cache, request: string): Promise<void> {\n    const response = await this.cacheAgent.invoke_deleteEntry({cacheId: cache.cacheId, request});\n    if (response.getError()) {\n      Common.Console.Console.instance().error(i18nString(\n          UIStrings.serviceworkercacheagentError, {PH1: cache.toString(), PH2: String(response.getError())}));\n      return;\n    }\n  }\n\n  loadCacheData(\n      cache: Cache, skipCount: number, pageSize: number, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): void {\n    void this.requestEntries(cache, skipCount, pageSize, pathFilter, callback);\n  }\n\n  loadAllCacheData(\n      cache: Cache, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): void {\n    void this.requestAllEntries(cache, pathFilter, callback);\n  }\n\n  caches(): Cache[] {\n    const caches = new Array();\n    for (const cache of this.#cachesInternal.values()) {\n      caches.push(cache);\n    }\n    return caches;\n  }\n\n  override dispose(): void {\n    for (const cache of this.#cachesInternal.values()) {\n      this.cacheRemoved(cache);\n    }\n    this.#cachesInternal.clear();\n    if (this.#enabled) {\n      this.#storageBucketModel.removeEventListener(\n          StorageBucketsModelEvents.BUCKET_ADDED, this.storageBucketAdded, this);\n      this.#storageBucketModel.removeEventListener(\n          StorageBucketsModelEvents.BUCKET_REMOVED, this.storageBucketRemoved, this);\n    }\n  }\n\n  private addStorageBucket(storageBucket: Protocol.Storage.StorageBucket): void {\n    void this.loadCacheNames(storageBucket);\n    if (!this.#storageKeysTracked.has(storageBucket.storageKey)) {\n      this.#storageKeysTracked.add(storageBucket.storageKey);\n      void this.#storageAgent.invoke_trackCacheStorageForStorageKey({storageKey: storageBucket.storageKey});\n    }\n  }\n\n  private removeStorageBucket(storageBucket: Protocol.Storage.StorageBucket): void {\n    let storageKeyCount = 0;\n    for (const [opaqueId, cache] of this.#cachesInternal.entries()) {\n      if (storageBucket.storageKey === cache.storageKey) {\n        storageKeyCount++;\n      }\n      if (cache.inBucket(storageBucket)) {\n        storageKeyCount--;\n        this.#cachesInternal.delete((opaqueId as string));\n        this.cacheRemoved((cache as Cache));\n      }\n    }\n    if (storageKeyCount === 0) {\n      this.#storageKeysTracked.delete(storageBucket.storageKey);\n      void this.#storageAgent.invoke_untrackCacheStorageForStorageKey({storageKey: storageBucket.storageKey});\n    }\n  }\n\n  private async loadCacheNames(storageBucket: Protocol.Storage.StorageBucket): Promise<void> {\n    const response = await this.cacheAgent.invoke_requestCacheNames({storageBucket});\n    if (response.getError()) {\n      return;\n    }\n    this.updateCacheNames(storageBucket, response.caches);\n  }\n\n  private updateCacheNames(storageBucket: Protocol.Storage.StorageBucket, cachesJson: Protocol.CacheStorage.Cache[]):\n      void {\n    function deleteAndSaveOldCaches(this: ServiceWorkerCacheModel, cache: Cache): void {\n      if (cache.inBucket(storageBucket) && !updatingCachesIds.has(cache.cacheId)) {\n        oldCaches.set(cache.cacheId, cache);\n        this.#cachesInternal.delete(cache.cacheId);\n      }\n    }\n\n    const updatingCachesIds = new Set<string>();\n    const newCaches = new Map<string, Cache>();\n    const oldCaches = new Map<string, Cache>();\n\n    for (const cacheJson of cachesJson) {\n      const storageBucket = cacheJson.storageBucket ??\n          this.#storageBucketModel.getDefaultBucketForStorageKey(cacheJson.storageKey)?.bucket;\n      if (!storageBucket) {\n        continue;\n      }\n      const cache = new Cache(this, storageBucket, cacheJson.cacheName, cacheJson.cacheId);\n      updatingCachesIds.add(cache.cacheId);\n      if (this.#cachesInternal.has(cache.cacheId)) {\n        continue;\n      }\n      newCaches.set(cache.cacheId, cache);\n      this.#cachesInternal.set(cache.cacheId, cache);\n    }\n    this.#cachesInternal.forEach(deleteAndSaveOldCaches, this);\n    newCaches.forEach(this.cacheAdded, this);\n    oldCaches.forEach(this.cacheRemoved, this);\n  }\n\n  private storageBucketAdded({data: {bucketInfo: {bucket}}}: Common.EventTarget.EventTargetEvent<BucketEvent>): void {\n    this.addStorageBucket(bucket);\n  }\n\n  private storageBucketRemoved({data: {bucketInfo: {bucket}}}: Common.EventTarget.EventTargetEvent<BucketEvent>): void {\n    this.removeStorageBucket(bucket);\n  }\n\n  private cacheAdded(cache: Cache): void {\n    this.dispatchEventToListeners(Events.CACHE_ADDED, {model: this, cache});\n  }\n\n  private cacheRemoved(cache: Cache): void {\n    this.dispatchEventToListeners(Events.CACHE_REMOVED, {model: this, cache});\n  }\n\n  private async requestEntries(\n      cache: Cache, skipCount: number, pageSize: number, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): Promise<void> {\n    const response =\n        await this.cacheAgent.invoke_requestEntries({cacheId: cache.cacheId, skipCount, pageSize, pathFilter});\n    if (response.getError()) {\n      console.error('ServiceWorkerCacheAgent error while requesting entries: ', response.getError());\n      return;\n    }\n    callback(response.cacheDataEntries, response.returnCount);\n  }\n\n  private async requestAllEntries(\n      cache: Cache, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): Promise<void> {\n    const response = await this.cacheAgent.invoke_requestEntries({cacheId: cache.cacheId, pathFilter});\n    if (response.getError()) {\n      console.error('ServiceWorkerCacheAgent error while requesting entries: ', response.getError());\n      return;\n    }\n    callback(response.cacheDataEntries, response.returnCount);\n  }\n\n  cacheStorageListUpdated({bucketId}: Protocol.Storage.CacheStorageListUpdatedEvent): void {\n    const storageBucket = this.#storageBucketModel.getBucketById(bucketId)?.bucket;\n    if (storageBucket) {\n      this.#storageBucketsUpdated.add(storageBucket);\n\n      void this.#throttler.schedule(\n          () => {\n            const promises =\n                Array.from(this.#storageBucketsUpdated, storageBucket => this.loadCacheNames(storageBucket));\n            this.#storageBucketsUpdated.clear();\n            return Promise.all(promises);\n          },\n          this.#scheduleAsSoonAsPossible ? Common.Throttler.Scheduling.AS_SOON_AS_POSSIBLE :\n                                           Common.Throttler.Scheduling.DEFAULT);\n    }\n  }\n\n  cacheStorageContentUpdated({bucketId, cacheName}: Protocol.Storage.CacheStorageContentUpdatedEvent): void {\n    const storageBucket = this.#storageBucketModel.getBucketById(bucketId)?.bucket;\n    if (storageBucket) {\n      this.dispatchEventToListeners(Events.CACHE_STORAGE_CONTENT_UPDATED, {storageBucket, cacheName});\n    }\n  }\n\n  attributionReportingTriggerRegistered(_event: Protocol.Storage.AttributionReportingTriggerRegisteredEvent): void {\n  }\n\n  indexedDBListUpdated(_event: Protocol.Storage.IndexedDBListUpdatedEvent): void {\n  }\n\n  indexedDBContentUpdated(_event: Protocol.Storage.IndexedDBContentUpdatedEvent): void {\n  }\n\n  interestGroupAuctionEventOccurred(_event: Protocol.Storage.InterestGroupAuctionEventOccurredEvent): void {\n  }\n\n  interestGroupAccessed(_event: Protocol.Storage.InterestGroupAccessedEvent): void {\n  }\n\n  interestGroupAuctionNetworkRequestCreated(_event: Protocol.Storage.InterestGroupAuctionNetworkRequestCreatedEvent):\n      void {\n  }\n\n  sharedStorageAccessed(_event: Protocol.Storage.SharedStorageAccessedEvent): void {\n  }\n\n  storageBucketCreatedOrUpdated(_event: Protocol.Storage.StorageBucketCreatedOrUpdatedEvent): void {\n  }\n\n  storageBucketDeleted(_event: Protocol.Storage.StorageBucketDeletedEvent): void {\n  }\n\n  setThrottlerSchedulesAsSoonAsPossibleForTest(): void {\n    this.#scheduleAsSoonAsPossible = true;\n  }\n\n  attributionReportingSourceRegistered(_event: Protocol.Storage.AttributionReportingSourceRegisteredEvent): void {\n  }\n}\n\nexport const enum Events {\n  CACHE_ADDED = 'CacheAdded',\n  CACHE_REMOVED = 'CacheRemoved',\n  CACHE_STORAGE_CONTENT_UPDATED = 'CacheStorageContentUpdated',\n}\n\nexport interface CacheEvent {\n  model: ServiceWorkerCacheModel;\n  cache: Cache;\n}\n\nexport interface CacheStorageContentUpdatedEvent {\n  storageBucket: Protocol.Storage.StorageBucket;\n  cacheName: string;\n}\n\nexport type EventTypes = {\n  [Events.CACHE_ADDED]: CacheEvent,\n  [Events.CACHE_REMOVED]: CacheEvent,\n  [Events.CACHE_STORAGE_CONTENT_UPDATED]: CacheStorageContentUpdatedEvent,\n};\n\nexport class Cache {\n  readonly #model: ServiceWorkerCacheModel;\n  storageKey: string;\n  storageBucket: Protocol.Storage.StorageBucket;\n  cacheName: string;\n  cacheId: Protocol.CacheStorage.CacheId;\n\n  constructor(\n      model: ServiceWorkerCacheModel, storageBucket: Protocol.Storage.StorageBucket, cacheName: string,\n      cacheId: Protocol.CacheStorage.CacheId) {\n    this.#model = model;\n    this.storageBucket = storageBucket;\n    this.storageKey = storageBucket.storageKey;\n    this.cacheName = cacheName;\n    this.cacheId = cacheId;\n  }\n\n  inBucket(storageBucket: Protocol.Storage.StorageBucket): boolean {\n    return this.storageKey === storageBucket.storageKey && this.storageBucket.name === storageBucket.name;\n  }\n\n  equals(cache: Cache): boolean {\n    return this.cacheId === cache.cacheId;\n  }\n\n  toString(): string {\n    return this.storageKey + this.cacheName;\n  }\n\n  async requestCachedResponse(url: Platform.DevToolsPath.UrlString, requestHeaders: NameValue[]):\n      Promise<Protocol.CacheStorage.CachedResponse|null> {\n    const response = await this.#model.cacheAgent.invoke_requestCachedResponse(\n        {cacheId: this.cacheId, requestURL: url, requestHeaders});\n    if (response.getError()) {\n      return null;\n    }\n    return response.response;\n  }\n}\n\nSDKModel.register(ServiceWorkerCacheModel, {capabilities: Capability.STORAGE, autostart: false});\n"],
  "mappings": "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",
  "names": ["storageBucket", "Events"]
}
