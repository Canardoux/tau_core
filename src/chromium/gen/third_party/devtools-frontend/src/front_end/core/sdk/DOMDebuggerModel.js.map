{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/DOMDebuggerModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {CategorizedBreakpoint, Category} from './CategorizedBreakpoint.js';\nimport type {EventListenerPausedDetailsAuxData, Location} from './DebuggerModel.js';\nimport {DOMModel, type DOMNode, Events as DOMModelEvents} from './DOMModel.js';\nimport {RemoteObject} from './RemoteObject.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\nimport {type SDKModelObserver, TargetManager} from './TargetManager.js';\n\nexport class DOMDebuggerModel extends SDKModel<EventTypes> {\n  readonly agent: ProtocolProxyApi.DOMDebuggerApi;\n  readonly #runtimeModelInternal: RuntimeModel;\n  #domModel: DOMModel;\n  #domBreakpointsInternal: DOMBreakpoint[];\n  readonly #domBreakpointsSetting: Common.Settings.Setting<{\n    url: Platform.DevToolsPath.UrlString,\n    path: string,\n    type: Protocol.DOMDebugger.DOMBreakpointType,\n    enabled: boolean,\n  }[]>;\n  suspended = false;\n\n  constructor(target: Target) {\n    super(target);\n    this.agent = target.domdebuggerAgent();\n    this.#runtimeModelInternal = (target.model(RuntimeModel) as RuntimeModel);\n    this.#domModel = (target.model(DOMModel) as DOMModel);\n    this.#domModel.addEventListener(DOMModelEvents.DocumentUpdated, this.documentUpdated, this);\n    this.#domModel.addEventListener(DOMModelEvents.NodeRemoved, this.nodeRemoved, this);\n\n    this.#domBreakpointsInternal = [];\n    this.#domBreakpointsSetting = Common.Settings.Settings.instance().createLocalSetting('dom-breakpoints', []);\n    if (this.#domModel.existingDocument()) {\n      void this.documentUpdated();\n    }\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.#runtimeModelInternal;\n  }\n\n  override async suspendModel(): Promise<void> {\n    this.suspended = true;\n  }\n\n  override async resumeModel(): Promise<void> {\n    this.suspended = false;\n  }\n\n  async eventListeners(remoteObject: RemoteObject): Promise<EventListener[]> {\n    console.assert(remoteObject.runtimeModel() === this.#runtimeModelInternal);\n    if (!remoteObject.objectId) {\n      return [];\n    }\n\n    const listeners = await this.agent.invoke_getEventListeners({objectId: remoteObject.objectId});\n    const eventListeners = [];\n    for (const payload of listeners.listeners || []) {\n      const location = this.#runtimeModelInternal.debuggerModel().createRawLocationByScriptId(\n          payload.scriptId, payload.lineNumber, payload.columnNumber);\n      if (!location) {\n        continue;\n      }\n      eventListeners.push(new EventListener(\n          this, remoteObject, payload.type, payload.useCapture, payload.passive, payload.once,\n          payload.handler ? this.#runtimeModelInternal.createRemoteObject(payload.handler) : null,\n          payload.originalHandler ? this.#runtimeModelInternal.createRemoteObject(payload.originalHandler) : null,\n          location, null));\n    }\n    return eventListeners;\n  }\n\n  retrieveDOMBreakpoints(): void {\n    void this.#domModel.requestDocument();\n  }\n\n  domBreakpoints(): DOMBreakpoint[] {\n    return this.#domBreakpointsInternal.slice();\n  }\n\n  hasDOMBreakpoint(node: DOMNode, type: Protocol.DOMDebugger.DOMBreakpointType): boolean {\n    return this.#domBreakpointsInternal.some(breakpoint => (breakpoint.node === node && breakpoint.type === type));\n  }\n\n  setDOMBreakpoint(node: DOMNode, type: Protocol.DOMDebugger.DOMBreakpointType): DOMBreakpoint {\n    for (const breakpoint of this.#domBreakpointsInternal) {\n      if (breakpoint.node === node && breakpoint.type === type) {\n        this.toggleDOMBreakpoint(breakpoint, true);\n        return breakpoint;\n      }\n    }\n    const breakpoint = new DOMBreakpoint(this, node, type, true);\n    this.#domBreakpointsInternal.push(breakpoint);\n    this.saveDOMBreakpoints();\n    this.enableDOMBreakpoint(breakpoint);\n    this.dispatchEventToListeners(Events.DOM_BREAKPOINT_ADDED, breakpoint);\n    return breakpoint;\n  }\n\n  removeDOMBreakpoint(node: DOMNode, type: Protocol.DOMDebugger.DOMBreakpointType): void {\n    this.removeDOMBreakpoints(breakpoint => breakpoint.node === node && breakpoint.type === type);\n  }\n\n  removeAllDOMBreakpoints(): void {\n    this.removeDOMBreakpoints(_breakpoint => true);\n  }\n\n  toggleDOMBreakpoint(breakpoint: DOMBreakpoint, enabled: boolean): void {\n    if (enabled === breakpoint.enabled) {\n      return;\n    }\n    breakpoint.enabled = enabled;\n    if (enabled) {\n      this.enableDOMBreakpoint(breakpoint);\n    } else {\n      this.disableDOMBreakpoint(breakpoint);\n    }\n    this.dispatchEventToListeners(Events.DOM_BREAKPOINT_TOGGLED, breakpoint);\n  }\n\n  private enableDOMBreakpoint(breakpoint: DOMBreakpoint): void {\n    if (breakpoint.node.id) {\n      void this.agent.invoke_setDOMBreakpoint({nodeId: breakpoint.node.id, type: breakpoint.type});\n      breakpoint.node.setMarker(Marker, true);\n    }\n  }\n\n  private disableDOMBreakpoint(breakpoint: DOMBreakpoint): void {\n    if (breakpoint.node.id) {\n      void this.agent.invoke_removeDOMBreakpoint({nodeId: breakpoint.node.id, type: breakpoint.type});\n      breakpoint.node.setMarker(Marker, this.nodeHasBreakpoints(breakpoint.node) ? true : null);\n    }\n  }\n\n  private nodeHasBreakpoints(node: DOMNode): boolean {\n    for (const breakpoint of this.#domBreakpointsInternal) {\n      if (breakpoint.node === node && breakpoint.enabled) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  resolveDOMBreakpointData(auxData: {\n    type: Protocol.DOMDebugger.DOMBreakpointType,\n    nodeId: Protocol.DOM.NodeId,\n    targetNodeId: Protocol.DOM.NodeId,\n    insertion: boolean,\n  }): {\n    type: Protocol.DOMDebugger.DOMBreakpointType,\n    node: DOMNode,\n    targetNode: DOMNode|null,\n    insertion: boolean,\n  }|null {\n    const type = auxData['type'];\n    const node = this.#domModel.nodeForId(auxData['nodeId']);\n    if (!type || !node) {\n      return null;\n    }\n    let targetNode: (DOMNode|null)|null = null;\n    let insertion = false;\n    if (type === Protocol.DOMDebugger.DOMBreakpointType.SubtreeModified) {\n      insertion = auxData['insertion'] || false;\n      targetNode = this.#domModel.nodeForId(auxData['targetNodeId']);\n    }\n    return {type, node, targetNode, insertion};\n  }\n\n  private currentURL(): Platform.DevToolsPath.UrlString {\n    const domDocument = this.#domModel.existingDocument();\n    return domDocument ? domDocument.documentURL : Platform.DevToolsPath.EmptyUrlString;\n  }\n\n  private async documentUpdated(): Promise<void> {\n    if (this.suspended) {\n      return;\n    }\n    const removed = this.#domBreakpointsInternal;\n    this.#domBreakpointsInternal = [];\n    this.dispatchEventToListeners(Events.DOM_BREAKPOINTS_REMOVED, removed);\n\n    // this.currentURL() is empty when the page is reloaded because the\n    // new document has not been requested yet and the old one has been\n    // removed. Therefore, we need to request the document and wait for it.\n    // Note that requestDocument() caches the document so that it is requested\n    // only once.\n    const document = await this.#domModel.requestDocument();\n    const currentURL = document ? document.documentURL : Platform.DevToolsPath.EmptyUrlString;\n    for (const breakpoint of this.#domBreakpointsSetting.get()) {\n      if (breakpoint.url === currentURL) {\n        void this.#domModel.pushNodeByPathToFrontend(breakpoint.path).then(appendBreakpoint.bind(this, breakpoint));\n      }\n    }\n\n    function appendBreakpoint(\n        this: DOMDebuggerModel, breakpoint: {\n          type: Protocol.DOMDebugger.DOMBreakpointType,\n          enabled: boolean,\n        },\n        nodeId: Protocol.DOM.NodeId|null): void {\n      const node = nodeId ? this.#domModel.nodeForId(nodeId) : null;\n      if (!node) {\n        return;\n      }\n      const domBreakpoint = new DOMBreakpoint(this, node, breakpoint.type, breakpoint.enabled);\n      this.#domBreakpointsInternal.push(domBreakpoint);\n      if (breakpoint.enabled) {\n        this.enableDOMBreakpoint(domBreakpoint);\n      }\n      this.dispatchEventToListeners(Events.DOM_BREAKPOINT_ADDED, domBreakpoint);\n    }\n  }\n\n  private removeDOMBreakpoints(filter: (arg0: DOMBreakpoint) => boolean): void {\n    const removed = [];\n    const left = [];\n    for (const breakpoint of this.#domBreakpointsInternal) {\n      if (filter(breakpoint)) {\n        removed.push(breakpoint);\n        if (breakpoint.enabled) {\n          breakpoint.enabled = false;\n          this.disableDOMBreakpoint(breakpoint);\n        }\n      } else {\n        left.push(breakpoint);\n      }\n    }\n\n    if (!removed.length) {\n      return;\n    }\n    this.#domBreakpointsInternal = left;\n    this.saveDOMBreakpoints();\n    this.dispatchEventToListeners(Events.DOM_BREAKPOINTS_REMOVED, removed);\n  }\n\n  private nodeRemoved(event: Common.EventTarget.EventTargetEvent<{node: DOMNode, parent: DOMNode}>): void {\n    if (this.suspended) {\n      return;\n    }\n    const {node} = event.data;\n    const children = node.children() || [];\n    this.removeDOMBreakpoints(breakpoint => breakpoint.node === node || children.indexOf(breakpoint.node) !== -1);\n  }\n\n  private saveDOMBreakpoints(): void {\n    const currentURL = this.currentURL();\n    const breakpoints = this.#domBreakpointsSetting.get().filter((breakpoint: {\n                                                                   url: Platform.DevToolsPath.UrlString,\n                                                                 }) => breakpoint.url !== currentURL);\n    for (const breakpoint of this.#domBreakpointsInternal) {\n      breakpoints.push(\n          {url: currentURL, path: breakpoint.node.path(), type: breakpoint.type, enabled: breakpoint.enabled});\n    }\n    this.#domBreakpointsSetting.set(breakpoints);\n  }\n}\n\nexport const enum Events {\n  DOM_BREAKPOINT_ADDED = 'DOMBreakpointAdded',\n  DOM_BREAKPOINT_TOGGLED = 'DOMBreakpointToggled',\n  DOM_BREAKPOINTS_REMOVED = 'DOMBreakpointsRemoved',\n}\n\nexport type EventTypes = {\n  [Events.DOM_BREAKPOINT_ADDED]: DOMBreakpoint,\n  [Events.DOM_BREAKPOINT_TOGGLED]: DOMBreakpoint,\n  [Events.DOM_BREAKPOINTS_REMOVED]: DOMBreakpoint[],\n};\n\nconst Marker = 'breakpoint-marker';\n\nexport class DOMBreakpoint {\n  domDebuggerModel: DOMDebuggerModel;\n  node: DOMNode;\n  type: Protocol.DOMDebugger.DOMBreakpointType;\n  enabled: boolean;\n\n  constructor(\n      domDebuggerModel: DOMDebuggerModel, node: DOMNode, type: Protocol.DOMDebugger.DOMBreakpointType,\n      enabled: boolean) {\n    this.domDebuggerModel = domDebuggerModel;\n    this.node = node;\n    this.type = type;\n    this.enabled = enabled;\n  }\n}\n\nexport class EventListener {\n  readonly #domDebuggerModelInternal: DOMDebuggerModel;\n  readonly #eventTarget: RemoteObject;\n  readonly #typeInternal: string;\n  readonly #useCaptureInternal: boolean;\n  readonly #passiveInternal: boolean;\n  readonly #onceInternal: boolean;\n  readonly #handlerInternal: RemoteObject|null;\n  readonly #originalHandlerInternal: RemoteObject|null;\n  readonly #locationInternal: Location;\n  readonly #sourceURLInternal: Platform.DevToolsPath.UrlString;\n  readonly #customRemoveFunction: RemoteObject|null;\n  #originInternal: string;\n\n  constructor(\n      domDebuggerModel: DOMDebuggerModel, eventTarget: RemoteObject, type: string, useCapture: boolean,\n      passive: boolean, once: boolean, handler: RemoteObject|null, originalHandler: RemoteObject|null,\n      location: Location, customRemoveFunction: RemoteObject|null, origin?: string) {\n    this.#domDebuggerModelInternal = domDebuggerModel;\n    this.#eventTarget = eventTarget;\n    this.#typeInternal = type;\n    this.#useCaptureInternal = useCapture;\n    this.#passiveInternal = passive;\n    this.#onceInternal = once;\n    this.#handlerInternal = handler;\n    this.#originalHandlerInternal = originalHandler || handler;\n    this.#locationInternal = location;\n    const script = location.script();\n    this.#sourceURLInternal = script ? script.contentURL() : Platform.DevToolsPath.EmptyUrlString;\n    this.#customRemoveFunction = customRemoveFunction;\n    this.#originInternal = origin || EventListener.Origin.RAW;\n  }\n\n  domDebuggerModel(): DOMDebuggerModel {\n    return this.#domDebuggerModelInternal;\n  }\n\n  type(): string {\n    return this.#typeInternal;\n  }\n\n  useCapture(): boolean {\n    return this.#useCaptureInternal;\n  }\n\n  passive(): boolean {\n    return this.#passiveInternal;\n  }\n\n  once(): boolean {\n    return this.#onceInternal;\n  }\n\n  handler(): RemoteObject|null {\n    return this.#handlerInternal;\n  }\n\n  location(): Location {\n    return this.#locationInternal;\n  }\n\n  sourceURL(): Platform.DevToolsPath.UrlString {\n    return this.#sourceURLInternal;\n  }\n\n  originalHandler(): RemoteObject|null {\n    return this.#originalHandlerInternal;\n  }\n\n  canRemove(): boolean {\n    return Boolean(this.#customRemoveFunction) || this.#originInternal !== EventListener.Origin.FRAMEWORK_USER;\n  }\n\n  remove(): Promise<void> {\n    if (!this.canRemove()) {\n      return Promise.resolve(undefined);\n    }\n\n    if (this.#originInternal !== EventListener.Origin.FRAMEWORK_USER) {\n      function removeListener(\n          this: {\n            removeEventListener: (arg0: string, arg1: () => void, arg2: boolean) => void,\n          },\n          type: string, listener: () => void, useCapture: boolean): void {\n        this.removeEventListener(type, listener, useCapture);\n        // @ts-ignore:\n        if (this['on' + type]) {\n          // @ts-ignore:\n          this['on' + type] = undefined;\n        }\n      }\n\n      return this.#eventTarget\n                 .callFunction(\n                     removeListener,\n                     [\n                       RemoteObject.toCallArgument(this.#typeInternal),\n                       RemoteObject.toCallArgument(this.#originalHandlerInternal),\n                       RemoteObject.toCallArgument(this.#useCaptureInternal),\n                     ])\n                 .then(() => undefined) as Promise<undefined>;\n    }\n\n    if (this.#customRemoveFunction) {\n      function callCustomRemove(\n          this: (arg0: string, arg1: () => void, arg2: boolean, arg3: boolean) => void, type: string,\n          listener: () => void, useCapture: boolean, passive: boolean): void {\n        this.call(null, type, listener, useCapture, passive);\n      }\n\n      return this.#customRemoveFunction\n          .callFunction(\n              callCustomRemove,\n              [\n                RemoteObject.toCallArgument(this.#typeInternal),\n                RemoteObject.toCallArgument(this.#originalHandlerInternal),\n                RemoteObject.toCallArgument(this.#useCaptureInternal),\n                RemoteObject.toCallArgument(this.#passiveInternal),\n              ])\n          .then(() => undefined);\n    }\n    return Promise.resolve(undefined);\n  }\n\n  canTogglePassive(): boolean {\n    return this.#originInternal !== EventListener.Origin.FRAMEWORK_USER;\n  }\n\n  togglePassive(): Promise<undefined> {\n    return this.#eventTarget\n        .callFunction(\n            callTogglePassive,\n            [\n              RemoteObject.toCallArgument(this.#typeInternal),\n              RemoteObject.toCallArgument(this.#originalHandlerInternal),\n              RemoteObject.toCallArgument(this.#useCaptureInternal),\n              RemoteObject.toCallArgument(this.#passiveInternal),\n            ])\n        .then(() => undefined);\n\n    function callTogglePassive(\n        this: {\n          addEventListener: (arg0: string, arg1: () => void, arg2: {\n            capture: boolean,\n            passive: boolean,\n          }) => void,\n          removeEventListener: (arg0: string, arg1: () => void, arg2: {\n            capture: boolean,\n          }) => void,\n        },\n        type: string, listener: () => void, useCapture: boolean, passive: boolean): void {\n      this.removeEventListener(type, listener, {capture: useCapture});\n      this.addEventListener(type, listener, {capture: useCapture, passive: !passive});\n    }\n  }\n\n  origin(): string {\n    return this.#originInternal;\n  }\n\n  markAsFramework(): void {\n    this.#originInternal = EventListener.Origin.FRAMEWORK;\n  }\n\n  isScrollBlockingType(): boolean {\n    return this.#typeInternal === 'touchstart' || this.#typeInternal === 'touchmove' ||\n        this.#typeInternal === 'mousewheel' || this.#typeInternal === 'wheel';\n  }\n}\n\nexport namespace EventListener {\n  export const enum Origin {\n    RAW = 'Raw',\n    FRAMEWORK = 'Framework',\n    FRAMEWORK_USER = 'FrameworkUser',\n  }\n}\n\nexport class CSPViolationBreakpoint extends CategorizedBreakpoint {\n  readonly #typeInternal: Protocol.DOMDebugger.CSPViolationType;\n  constructor(category: Category, type: Protocol.DOMDebugger.CSPViolationType) {\n    super(category, type);\n    this.#typeInternal = type;\n  }\n\n  type(): Protocol.DOMDebugger.CSPViolationType {\n    return this.#typeInternal;\n  }\n}\n\nexport class DOMEventListenerBreakpoint extends CategorizedBreakpoint {\n  readonly eventTargetNames: string[];\n  constructor(eventName: string, eventTargetNames: string[], category: Category) {\n    super(category, eventName);\n    this.eventTargetNames = eventTargetNames;\n  }\n\n  override setEnabled(enabled: boolean): void {\n    if (this.enabled() === enabled) {\n      return;\n    }\n    super.setEnabled(enabled);\n    for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n      this.updateOnModel(model);\n    }\n  }\n\n  updateOnModel(model: DOMDebuggerModel): void {\n    for (const eventTargetName of this.eventTargetNames) {\n      if (this.enabled()) {\n        void model.agent.invoke_setEventListenerBreakpoint({eventName: this.name, targetName: eventTargetName});\n      } else {\n        void model.agent.invoke_removeEventListenerBreakpoint({eventName: this.name, targetName: eventTargetName});\n      }\n    }\n  }\n\n  static readonly listener = 'listener:';\n}\n\nlet domDebuggerManagerInstance: DOMDebuggerManager;\n\nexport class DOMDebuggerManager implements SDKModelObserver<DOMDebuggerModel> {\n  readonly #xhrBreakpointsSetting: Common.Settings.Setting<{url: string, enabled: boolean}[]>;\n  readonly #xhrBreakpointsInternal: Map<string, boolean>;\n  readonly #cspViolationsToBreakOn: CSPViolationBreakpoint[];\n  readonly #eventListenerBreakpointsInternal: DOMEventListenerBreakpoint[];\n\n  constructor() {\n    this.#xhrBreakpointsSetting = Common.Settings.Settings.instance().createLocalSetting('xhr-breakpoints', []);\n    this.#xhrBreakpointsInternal = new Map();\n    for (const breakpoint of this.#xhrBreakpointsSetting.get()) {\n      this.#xhrBreakpointsInternal.set(breakpoint.url, breakpoint.enabled);\n    }\n\n    this.#cspViolationsToBreakOn = [];\n    this.#cspViolationsToBreakOn.push(new CSPViolationBreakpoint(\n        Category.TRUSTED_TYPE_VIOLATION, Protocol.DOMDebugger.CSPViolationType.TrustedtypeSinkViolation));\n    this.#cspViolationsToBreakOn.push(new CSPViolationBreakpoint(\n        Category.TRUSTED_TYPE_VIOLATION, Protocol.DOMDebugger.CSPViolationType.TrustedtypePolicyViolation));\n\n    this.#eventListenerBreakpointsInternal = [];\n    this.createEventListenerBreakpoints(\n        Category.MEDIA,\n        [\n          'play',      'pause',          'playing',    'canplay',    'canplaythrough', 'seeking',\n          'seeked',    'timeupdate',     'ended',      'ratechange', 'durationchange', 'volumechange',\n          'loadstart', 'progress',       'suspend',    'abort',      'error',          'emptied',\n          'stalled',   'loadedmetadata', 'loadeddata', 'waiting',\n        ],\n        ['audio', 'video']);\n    this.createEventListenerBreakpoints(\n        Category.PICTURE_IN_PICTURE, ['enterpictureinpicture', 'leavepictureinpicture'], ['video']);\n    this.createEventListenerBreakpoints(Category.PICTURE_IN_PICTURE, ['resize'], ['PictureInPictureWindow']);\n    this.createEventListenerBreakpoints(Category.PICTURE_IN_PICTURE, ['enter'], ['documentPictureInPicture']);\n    this.createEventListenerBreakpoints(\n        Category.CLIPBOARD, ['copy', 'cut', 'paste', 'beforecopy', 'beforecut', 'beforepaste'], ['*']);\n    this.createEventListenerBreakpoints(\n        Category.CONTROL,\n        [\n          'resize',\n          'scroll',\n          'scrollend',\n          'scrollsnapchange',\n          'scrollsnapchanging',\n          'zoom',\n          'focus',\n          'blur',\n          'select',\n          'change',\n          'submit',\n          'reset',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(Category.DEVICE, ['deviceorientation', 'devicemotion'], ['*']);\n    this.createEventListenerBreakpoints(\n        Category.DOM_MUTATION,\n        [\n          'DOMActivate',\n          'DOMFocusIn',\n          'DOMFocusOut',\n          'DOMAttrModified',\n          'DOMCharacterDataModified',\n          'DOMNodeInserted',\n          'DOMNodeInsertedIntoDocument',\n          'DOMNodeRemoved',\n          'DOMNodeRemovedFromDocument',\n          'DOMSubtreeModified',\n          'DOMContentLoaded',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(\n        Category.DRAG_DROP, ['drag', 'dragstart', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop'], ['*']);\n\n    this.createEventListenerBreakpoints(Category.KEYBOARD, ['keydown', 'keyup', 'keypress', 'input'], ['*']);\n    this.createEventListenerBreakpoints(\n        Category.LOAD,\n        [\n          'load',\n          'beforeunload',\n          'unload',\n          'abort',\n          'error',\n          'hashchange',\n          'popstate',\n          'navigate',\n          'navigatesuccess',\n          'navigateerror',\n          'currentchange',\n          'navigateto',\n          'navigatefrom',\n          'finish',\n          'dispose',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(\n        Category.MOUSE,\n        [\n          'auxclick',\n          'click',\n          'dblclick',\n          'mousedown',\n          'mouseup',\n          'mouseover',\n          'mousemove',\n          'mouseout',\n          'mouseenter',\n          'mouseleave',\n          'mousewheel',\n          'wheel',\n          'contextmenu',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(\n        Category.POINTER,\n        [\n          'pointerover',\n          'pointerout',\n          'pointerenter',\n          'pointerleave',\n          'pointerdown',\n          'pointerup',\n          'pointermove',\n          'pointercancel',\n          'gotpointercapture',\n          'lostpointercapture',\n          'pointerrawupdate',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(Category.TOUCH, ['touchstart', 'touchmove', 'touchend', 'touchcancel'], ['*']);\n    this.createEventListenerBreakpoints(Category.WORKER, ['message', 'messageerror'], ['*']);\n    this.createEventListenerBreakpoints(\n        Category.XHR, ['readystatechange', 'load', 'loadstart', 'loadend', 'abort', 'error', 'progress', 'timeout'],\n        ['xmlhttprequest', 'xmlhttprequestupload']);\n\n    TargetManager.instance().observeModels(DOMDebuggerModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): DOMDebuggerManager {\n    const {forceNew} = opts;\n    if (!domDebuggerManagerInstance || forceNew) {\n      domDebuggerManagerInstance = new DOMDebuggerManager();\n    }\n\n    return domDebuggerManagerInstance;\n  }\n\n  cspViolationBreakpoints(): CSPViolationBreakpoint[] {\n    return this.#cspViolationsToBreakOn.slice();\n  }\n\n  private createEventListenerBreakpoints(category: Category, eventNames: string[], eventTargetNames: string[]): void {\n    for (const eventName of eventNames) {\n      this.#eventListenerBreakpointsInternal.push(\n          new DOMEventListenerBreakpoint(eventName, eventTargetNames, category));\n    }\n  }\n\n  resolveEventListenerBreakpoint({eventName, targetName}: EventListenerPausedDetailsAuxData): DOMEventListenerBreakpoint\n      |null {\n    const listenerPrefix = 'listener:';\n    if (eventName.startsWith(listenerPrefix)) {\n      eventName = eventName.substring(listenerPrefix.length);\n    } else {\n      return null;\n    }\n    targetName = (targetName || '*').toLowerCase();\n    let result: DOMEventListenerBreakpoint|null = null;\n    for (const breakpoint of this.#eventListenerBreakpointsInternal) {\n      if (eventName && breakpoint.name === eventName && breakpoint.eventTargetNames.indexOf(targetName) !== -1) {\n        result = breakpoint;\n      }\n      if (!result && eventName && breakpoint.name === eventName && breakpoint.eventTargetNames.indexOf('*') !== -1) {\n        result = breakpoint;\n      }\n    }\n    return result;\n  }\n\n  eventListenerBreakpoints(): DOMEventListenerBreakpoint[] {\n    return this.#eventListenerBreakpointsInternal.slice();\n  }\n\n  updateCSPViolationBreakpoints(): void {\n    const violationTypes = this.#cspViolationsToBreakOn.filter(v => v.enabled()).map(v => v.type());\n    for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n      this.updateCSPViolationBreakpointsForModel(model, violationTypes);\n    }\n  }\n\n  private updateCSPViolationBreakpointsForModel(\n      model: DOMDebuggerModel, violationTypes: Protocol.DOMDebugger.CSPViolationType[]): void {\n    void model.agent.invoke_setBreakOnCSPViolation({violationTypes});\n  }\n\n  xhrBreakpoints(): Map<string, boolean> {\n    return this.#xhrBreakpointsInternal;\n  }\n\n  private saveXHRBreakpoints(): void {\n    const breakpoints = [];\n    for (const url of this.#xhrBreakpointsInternal.keys()) {\n      breakpoints.push({url, enabled: this.#xhrBreakpointsInternal.get(url) || false});\n    }\n    this.#xhrBreakpointsSetting.set(breakpoints);\n  }\n\n  addXHRBreakpoint(url: string, enabled: boolean): void {\n    this.#xhrBreakpointsInternal.set(url, enabled);\n    if (enabled) {\n      for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n        void model.agent.invoke_setXHRBreakpoint({url});\n      }\n    }\n    this.saveXHRBreakpoints();\n  }\n\n  removeXHRBreakpoint(url: string): void {\n    const enabled = this.#xhrBreakpointsInternal.get(url);\n    this.#xhrBreakpointsInternal.delete(url);\n    if (enabled) {\n      for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n        void model.agent.invoke_removeXHRBreakpoint({url});\n      }\n    }\n    this.saveXHRBreakpoints();\n  }\n\n  toggleXHRBreakpoint(url: string, enabled: boolean): void {\n    this.#xhrBreakpointsInternal.set(url, enabled);\n    for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n      if (enabled) {\n        void model.agent.invoke_setXHRBreakpoint({url});\n      } else {\n        void model.agent.invoke_removeXHRBreakpoint({url});\n      }\n    }\n    this.saveXHRBreakpoints();\n  }\n\n  modelAdded(domDebuggerModel: DOMDebuggerModel): void {\n    for (const url of this.#xhrBreakpointsInternal.keys()) {\n      if (this.#xhrBreakpointsInternal.get(url)) {\n        void domDebuggerModel.agent.invoke_setXHRBreakpoint({url});\n      }\n    }\n    for (const breakpoint of this.#eventListenerBreakpointsInternal) {\n      if (breakpoint.enabled()) {\n        breakpoint.updateOnModel(domDebuggerModel);\n      }\n    }\n    const violationTypes = this.#cspViolationsToBreakOn.filter(v => v.enabled()).map(v => v.type());\n    this.updateCSPViolationBreakpointsForModel(domDebuggerModel, violationTypes);\n  }\n\n  modelRemoved(_domDebuggerModel: DOMDebuggerModel): void {\n  }\n}\n\nSDKModel.register(DOMDebuggerModel, {capabilities: Capability.DOM, autostart: false});\n"],
  "mappings": "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",
  "names": ["breakpoint", "Events", "removeListener", "callCustomRemove", "EventListener", "Origin"]
}
