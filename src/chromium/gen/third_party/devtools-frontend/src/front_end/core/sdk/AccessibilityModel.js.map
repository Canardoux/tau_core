{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/AccessibilityModel.ts"],
  "sourcesContent": ["// Copyright (c) 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {DeferredDOMNode, type DOMNode} from './DOMModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\n\nexport const enum CoreAxPropertyName {\n  NAME = 'name',\n  DESCRIPTION = 'description',\n  VALUE = 'value',\n  ROLE = 'role',\n}\n\nexport interface CoreOrProtocolAxProperty {\n  name: CoreAxPropertyName|Protocol.Accessibility.AXPropertyName;\n  value: Protocol.Accessibility.AXValue;\n}\n\nexport class AccessibilityNode {\n  readonly #accessibilityModelInternal: AccessibilityModel;\n  readonly #idInternal: Protocol.Accessibility.AXNodeId;\n  readonly #backendDOMNodeIdInternal: Protocol.DOM.BackendNodeId|null;\n  readonly #deferredDOMNodeInternal: DeferredDOMNode|null;\n  readonly #ignoredInternal: boolean;\n  readonly #ignoredReasonsInternal: Protocol.Accessibility.AXProperty[]|undefined;\n  readonly #roleInternal: Protocol.Accessibility.AXValue|null;\n  readonly #nameInternal: Protocol.Accessibility.AXValue|null;\n  readonly #descriptionInternal: Protocol.Accessibility.AXValue|null;\n  readonly #valueInternal: Protocol.Accessibility.AXValue|null;\n  readonly #propertiesInternal: Protocol.Accessibility.AXProperty[]|null;\n  readonly #parentId: Protocol.Accessibility.AXNodeId|null;\n  readonly #frameId: Protocol.Page.FrameId|null;\n  readonly #childIds: Protocol.Accessibility.AXNodeId[]|null;\n\n  constructor(accessibilityModel: AccessibilityModel, payload: Protocol.Accessibility.AXNode) {\n    this.#accessibilityModelInternal = accessibilityModel;\n\n    this.#idInternal = payload.nodeId;\n    accessibilityModel.setAXNodeForAXId(this.#idInternal, this);\n    if (payload.backendDOMNodeId) {\n      accessibilityModel.setAXNodeForBackendDOMNodeId(payload.backendDOMNodeId, this);\n      this.#backendDOMNodeIdInternal = payload.backendDOMNodeId;\n      this.#deferredDOMNodeInternal = new DeferredDOMNode(accessibilityModel.target(), payload.backendDOMNodeId);\n    } else {\n      this.#backendDOMNodeIdInternal = null;\n      this.#deferredDOMNodeInternal = null;\n    }\n    this.#ignoredInternal = payload.ignored;\n    if (this.#ignoredInternal && 'ignoredReasons' in payload) {\n      this.#ignoredReasonsInternal = payload.ignoredReasons;\n    }\n\n    this.#roleInternal = payload.role || null;\n    this.#nameInternal = payload.name || null;\n    this.#descriptionInternal = payload.description || null;\n    this.#valueInternal = payload.value || null;\n    this.#propertiesInternal = payload.properties || null;\n    this.#childIds = [...new Set(payload.childIds)];\n    this.#parentId = payload.parentId || null;\n    if (payload.frameId && !payload.parentId) {\n      this.#frameId = payload.frameId;\n      accessibilityModel.setRootAXNodeForFrameId(payload.frameId, this);\n    } else {\n      this.#frameId = null;\n    }\n  }\n\n  id(): Protocol.Accessibility.AXNodeId {\n    return this.#idInternal;\n  }\n\n  accessibilityModel(): AccessibilityModel {\n    return this.#accessibilityModelInternal;\n  }\n\n  ignored(): boolean {\n    return this.#ignoredInternal;\n  }\n\n  ignoredReasons(): Protocol.Accessibility.AXProperty[]|null {\n    return this.#ignoredReasonsInternal || null;\n  }\n\n  role(): Protocol.Accessibility.AXValue|null {\n    return this.#roleInternal || null;\n  }\n\n  coreProperties(): CoreOrProtocolAxProperty[] {\n    const properties: CoreOrProtocolAxProperty[] = [];\n\n    if (this.#nameInternal) {\n      properties.push({name: CoreAxPropertyName.NAME, value: this.#nameInternal});\n    }\n    if (this.#descriptionInternal) {\n      properties.push({name: CoreAxPropertyName.DESCRIPTION, value: this.#descriptionInternal});\n    }\n    if (this.#valueInternal) {\n      properties.push({name: CoreAxPropertyName.VALUE, value: this.#valueInternal});\n    }\n\n    return properties;\n  }\n\n  name(): Protocol.Accessibility.AXValue|null {\n    return this.#nameInternal || null;\n  }\n\n  description(): Protocol.Accessibility.AXValue|null {\n    return this.#descriptionInternal || null;\n  }\n\n  value(): Protocol.Accessibility.AXValue|null {\n    return this.#valueInternal || null;\n  }\n\n  properties(): Protocol.Accessibility.AXProperty[]|null {\n    return this.#propertiesInternal || null;\n  }\n\n  parentNode(): AccessibilityNode|null {\n    if (this.#parentId) {\n      return this.#accessibilityModelInternal.axNodeForId(this.#parentId);\n    }\n    return null;\n  }\n\n  isDOMNode(): boolean {\n    return Boolean(this.#backendDOMNodeIdInternal);\n  }\n\n  backendDOMNodeId(): Protocol.DOM.BackendNodeId|null {\n    return this.#backendDOMNodeIdInternal;\n  }\n\n  deferredDOMNode(): DeferredDOMNode|null {\n    return this.#deferredDOMNodeInternal;\n  }\n\n  highlightDOMNode(): void {\n    const deferredNode = this.deferredDOMNode();\n    if (!deferredNode) {\n      return;\n    }\n    // Highlight node in page.\n    deferredNode.highlight();\n  }\n\n  children(): AccessibilityNode[] {\n    if (!this.#childIds) {\n      return [];\n    }\n\n    const children = [];\n    for (const childId of this.#childIds) {\n      const child = this.#accessibilityModelInternal.axNodeForId(childId);\n      if (child) {\n        children.push(child);\n      }\n    }\n\n    return children;\n  }\n\n  numChildren(): number {\n    if (!this.#childIds) {\n      return 0;\n    }\n    return this.#childIds.length;\n  }\n\n  hasOnlyUnloadedChildren(): boolean {\n    if (!this.#childIds || !this.#childIds.length) {\n      return false;\n    }\n    return this.#childIds.every(id => this.#accessibilityModelInternal.axNodeForId(id) === null);\n  }\n\n  hasUnloadedChildren(): boolean {\n    if (!this.#childIds || !this.#childIds.length) {\n      return false;\n    }\n    return this.#childIds.some(id => this.#accessibilityModelInternal.axNodeForId(id) === null);\n  }\n  // Only the root node gets a frameId, so nodes have to walk up the tree to find their frameId.\n  getFrameId(): Protocol.Page.FrameId|null {\n    return this.#frameId || this.parentNode()?.getFrameId() || null;\n  }\n}\n\nexport const enum Events {\n  TREE_UPDATED = 'TreeUpdated',\n}\n\nexport type EventTypes = {\n  [Events.TREE_UPDATED]: {root?: AccessibilityNode},\n};\n\nexport class AccessibilityModel extends SDKModel<EventTypes> implements ProtocolProxyApi.AccessibilityDispatcher {\n  agent: ProtocolProxyApi.AccessibilityApi;\n  #axIdToAXNode: Map<string, AccessibilityNode>;\n  #backendDOMNodeIdToAXNode: Map<Protocol.DOM.BackendNodeId, AccessibilityNode>;\n  #frameIdToAXNode: Map<Protocol.Page.FrameId, AccessibilityNode>;\n  #pendingChildRequests: Map<string, Promise<Protocol.Accessibility.GetChildAXNodesResponse>>;\n  #root: AccessibilityNode|null;\n\n  constructor(target: Target) {\n    super(target);\n    target.registerAccessibilityDispatcher(this);\n    this.agent = target.accessibilityAgent();\n    void this.resumeModel();\n\n    this.#axIdToAXNode = new Map();\n    this.#backendDOMNodeIdToAXNode = new Map();\n    this.#frameIdToAXNode = new Map();\n    this.#pendingChildRequests = new Map();\n    this.#root = null;\n  }\n\n  clear(): void {\n    this.#root = null;\n    this.#axIdToAXNode.clear();\n    this.#backendDOMNodeIdToAXNode.clear();\n    this.#frameIdToAXNode.clear();\n  }\n\n  override async resumeModel(): Promise<void> {\n    await this.agent.invoke_enable();\n  }\n\n  override async suspendModel(): Promise<void> {\n    await this.agent.invoke_disable();\n  }\n\n  async requestPartialAXTree(node: DOMNode): Promise<void> {\n    const {nodes} = await this.agent.invoke_getPartialAXTree({nodeId: node.id, fetchRelatives: true});\n    if (!nodes) {\n      return;\n    }\n    const axNodes = [];\n    for (const payload of nodes) {\n      axNodes.push(new AccessibilityNode(this, payload));\n    }\n  }\n\n  loadComplete({root}: Protocol.Accessibility.LoadCompleteEvent): void {\n    this.clear();\n    this.#root = new AccessibilityNode(this, root);\n    this.dispatchEventToListeners(Events.TREE_UPDATED, {root: this.#root});\n  }\n\n  nodesUpdated({nodes}: Protocol.Accessibility.NodesUpdatedEvent): void {\n    this.createNodesFromPayload(nodes);\n    this.dispatchEventToListeners(Events.TREE_UPDATED, {});\n    return;\n  }\n\n  private createNodesFromPayload(payloadNodes: Protocol.Accessibility.AXNode[]): AccessibilityNode[] {\n    const accessibilityNodes = payloadNodes.map(node => {\n      const sdkNode = new AccessibilityNode(this, node);\n      return sdkNode;\n    });\n\n    return accessibilityNodes;\n  }\n\n  async requestRootNode(frameId?: Protocol.Page.FrameId): Promise<AccessibilityNode|undefined> {\n    if (frameId && this.#frameIdToAXNode.has(frameId)) {\n      return this.#frameIdToAXNode.get(frameId);\n    }\n    if (!frameId && this.#root) {\n      return this.#root;\n    }\n    const {node} = await this.agent.invoke_getRootAXNode({frameId});\n    if (!node) {\n      return;\n    }\n    return this.createNodesFromPayload([node])[0];\n  }\n\n  async requestAXChildren(nodeId: Protocol.Accessibility.AXNodeId, frameId?: Protocol.Page.FrameId):\n      Promise<AccessibilityNode[]> {\n    const parent = this.#axIdToAXNode.get(nodeId);\n    if (!parent) {\n      throw Error('Cannot request children before parent');\n    }\n    if (!parent.hasUnloadedChildren()) {\n      return parent.children();\n    }\n\n    const request = this.#pendingChildRequests.get(nodeId);\n    if (request) {\n      await request;\n    } else {\n      const request = this.agent.invoke_getChildAXNodes({id: nodeId, frameId});\n      this.#pendingChildRequests.set(nodeId, request);\n      const result = await request;\n      if (!result.getError()) {\n        this.createNodesFromPayload(result.nodes);\n        this.#pendingChildRequests.delete(nodeId);\n      }\n    }\n    return parent.children();\n  }\n\n  async requestAndLoadSubTreeToNode(node: DOMNode): Promise<AccessibilityNode[]|null> {\n    // Node may have already been loaded, so don't bother requesting it again.\n    const result = [];\n    let ancestor = this.axNodeForDOMNode(node);\n    while (ancestor) {\n      result.push(ancestor);\n      const parent = ancestor.parentNode();\n      if (!parent) {\n        return result;\n      }\n      ancestor = parent;\n    }\n    const {nodes} = await this.agent.invoke_getAXNodeAndAncestors({backendNodeId: node.backendNodeId()});\n    if (!nodes) {\n      return null;\n    }\n    const ancestors = this.createNodesFromPayload(nodes);\n\n    return ancestors;\n  }\n\n  axNodeForId(axId: Protocol.Accessibility.AXNodeId): AccessibilityNode|null {\n    return this.#axIdToAXNode.get(axId) || null;\n  }\n\n  setRootAXNodeForFrameId(frameId: Protocol.Page.FrameId, axNode: AccessibilityNode): void {\n    this.#frameIdToAXNode.set(frameId, axNode);\n  }\n\n  axNodeForFrameId(frameId: Protocol.Page.FrameId): AccessibilityNode|null {\n    return this.#frameIdToAXNode.get(frameId) ?? null;\n  }\n\n  setAXNodeForAXId(axId: string, axNode: AccessibilityNode): void {\n    this.#axIdToAXNode.set(axId, axNode);\n  }\n\n  axNodeForDOMNode(domNode: DOMNode|null): AccessibilityNode|null {\n    if (!domNode) {\n      return null;\n    }\n    return this.#backendDOMNodeIdToAXNode.get(domNode.backendNodeId()) ?? null;\n  }\n\n  setAXNodeForBackendDOMNodeId(backendDOMNodeId: Protocol.DOM.BackendNodeId, axNode: AccessibilityNode): void {\n    this.#backendDOMNodeIdToAXNode.set(backendDOMNodeId, axNode);\n  }\n\n  getAgent(): ProtocolProxyApi.AccessibilityApi {\n    return this.agent;\n  }\n}\n\nSDKModel.register(AccessibilityModel, {capabilities: Capability.DOM, autostart: false});\n"],
  "mappings": ";AAOA,SAAQ,uBAAoC;AAC5C,SAAQ,gBAAe;AACvB,SAAQ,kBAA8B;AAE/B,WAAW,qBAAX,kBAAWA,wBAAX;AACL,EAAAA,oBAAA,UAAO;AACP,EAAAA,oBAAA,iBAAc;AACd,EAAAA,oBAAA,WAAQ;AACR,EAAAA,oBAAA,UAAO;AAJS,SAAAA;AAAA,GAAA;AAYX,aAAM,kBAAkB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAET,YAAY,oBAAwC,SAAwC;AAC1F,SAAK,8BAA8B;AAEnC,SAAK,cAAc,QAAQ;AAC3B,uBAAmB,iBAAiB,KAAK,aAAa,IAAI;AAC1D,QAAI,QAAQ,kBAAkB;AAC5B,yBAAmB,6BAA6B,QAAQ,kBAAkB,IAAI;AAC9E,WAAK,4BAA4B,QAAQ;AACzC,WAAK,2BAA2B,IAAI,gBAAgB,mBAAmB,OAAO,GAAG,QAAQ,gBAAgB;AAAA,IAC3G,OAAO;AACL,WAAK,4BAA4B;AACjC,WAAK,2BAA2B;AAAA,IAClC;AACA,SAAK,mBAAmB,QAAQ;AAChC,QAAI,KAAK,oBAAoB,oBAAoB,SAAS;AACxD,WAAK,0BAA0B,QAAQ;AAAA,IACzC;AAEA,SAAK,gBAAgB,QAAQ,QAAQ;AACrC,SAAK,gBAAgB,QAAQ,QAAQ;AACrC,SAAK,uBAAuB,QAAQ,eAAe;AACnD,SAAK,iBAAiB,QAAQ,SAAS;AACvC,SAAK,sBAAsB,QAAQ,cAAc;AACjD,SAAK,YAAY,CAAC,GAAG,IAAI,IAAI,QAAQ,QAAQ,CAAC;AAC9C,SAAK,YAAY,QAAQ,YAAY;AACrC,QAAI,QAAQ,WAAW,CAAC,QAAQ,UAAU;AACxC,WAAK,WAAW,QAAQ;AACxB,yBAAmB,wBAAwB,QAAQ,SAAS,IAAI;AAAA,IAClE,OAAO;AACL,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA,EAEA,KAAsC;AACpC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,qBAAyC;AACvC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,UAAmB;AACjB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,iBAA2D;AACzD,WAAO,KAAK,2BAA2B;AAAA,EACzC;AAAA,EAEA,OAA4C;AAC1C,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA,EAEA,iBAA6C;AAC3C,UAAM,aAAyC,CAAC;AAEhD,QAAI,KAAK,eAAe;AACtB,iBAAW,KAAK,EAAC,MAAM,mBAAyB,OAAO,KAAK,cAAa,CAAC;AAAA,IAC5E;AACA,QAAI,KAAK,sBAAsB;AAC7B,iBAAW,KAAK,EAAC,MAAM,iCAAgC,OAAO,KAAK,qBAAoB,CAAC;AAAA,IAC1F;AACA,QAAI,KAAK,gBAAgB;AACvB,iBAAW,KAAK,EAAC,MAAM,qBAA0B,OAAO,KAAK,eAAc,CAAC;AAAA,IAC9E;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAA4C;AAC1C,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA,EAEA,cAAmD;AACjD,WAAO,KAAK,wBAAwB;AAAA,EACtC;AAAA,EAEA,QAA6C;AAC3C,WAAO,KAAK,kBAAkB;AAAA,EAChC;AAAA,EAEA,aAAuD;AACrD,WAAO,KAAK,uBAAuB;AAAA,EACrC;AAAA,EAEA,aAAqC;AACnC,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK,4BAA4B,YAAY,KAAK,SAAS;AAAA,IACpE;AACA,WAAO;AAAA,EACT;AAAA,EAEA,YAAqB;AACnB,WAAO,QAAQ,KAAK,yBAAyB;AAAA,EAC/C;AAAA,EAEA,mBAAoD;AAClD,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,kBAAwC;AACtC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,mBAAyB;AACvB,UAAM,eAAe,KAAK,gBAAgB;AAC1C,QAAI,CAAC,cAAc;AACjB;AAAA,IACF;AAEA,iBAAa,UAAU;AAAA,EACzB;AAAA,EAEA,WAAgC;AAC9B,QAAI,CAAC,KAAK,WAAW;AACnB,aAAO,CAAC;AAAA,IACV;AAEA,UAAM,WAAW,CAAC;AAClB,eAAW,WAAW,KAAK,WAAW;AACpC,YAAM,QAAQ,KAAK,4BAA4B,YAAY,OAAO;AAClE,UAAI,OAAO;AACT,iBAAS,KAAK,KAAK;AAAA,MACrB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,cAAsB;AACpB,QAAI,CAAC,KAAK,WAAW;AACnB,aAAO;AAAA,IACT;AACA,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,0BAAmC;AACjC,QAAI,CAAC,KAAK,aAAa,CAAC,KAAK,UAAU,QAAQ;AAC7C,aAAO;AAAA,IACT;AACA,WAAO,KAAK,UAAU,MAAM,QAAM,KAAK,4BAA4B,YAAY,EAAE,MAAM,IAAI;AAAA,EAC7F;AAAA,EAEA,sBAA+B;AAC7B,QAAI,CAAC,KAAK,aAAa,CAAC,KAAK,UAAU,QAAQ;AAC7C,aAAO;AAAA,IACT;AACA,WAAO,KAAK,UAAU,KAAK,QAAM,KAAK,4BAA4B,YAAY,EAAE,MAAM,IAAI;AAAA,EAC5F;AAAA;AAAA,EAEA,aAAyC;AACvC,WAAO,KAAK,YAAY,KAAK,WAAW,GAAG,WAAW,KAAK;AAAA,EAC7D;AACF;AAEO,WAAW,SAAX,kBAAWC,YAAX;AACL,EAAAA,QAAA,kBAAe;AADC,SAAAA;AAAA,GAAA;AAQX,aAAM,2BAA2B,SAAyE;AAAA,EAC/G;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,QAAgB;AAC1B,UAAM,MAAM;AACZ,WAAO,gCAAgC,IAAI;AAC3C,SAAK,QAAQ,OAAO,mBAAmB;AACvC,SAAK,KAAK,YAAY;AAEtB,SAAK,gBAAgB,oBAAI,IAAI;AAC7B,SAAK,4BAA4B,oBAAI,IAAI;AACzC,SAAK,mBAAmB,oBAAI,IAAI;AAChC,SAAK,wBAAwB,oBAAI,IAAI;AACrC,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,QAAc;AACZ,SAAK,QAAQ;AACb,SAAK,cAAc,MAAM;AACzB,SAAK,0BAA0B,MAAM;AACrC,SAAK,iBAAiB,MAAM;AAAA,EAC9B;AAAA,EAEA,MAAe,cAA6B;AAC1C,UAAM,KAAK,MAAM,cAAc;AAAA,EACjC;AAAA,EAEA,MAAe,eAA8B;AAC3C,UAAM,KAAK,MAAM,eAAe;AAAA,EAClC;AAAA,EAEA,MAAM,qBAAqB,MAA8B;AACvD,UAAM,EAAC,MAAK,IAAI,MAAM,KAAK,MAAM,wBAAwB,EAAC,QAAQ,KAAK,IAAI,gBAAgB,KAAI,CAAC;AAChG,QAAI,CAAC,OAAO;AACV;AAAA,IACF;AACA,UAAM,UAAU,CAAC;AACjB,eAAW,WAAW,OAAO;AAC3B,cAAQ,KAAK,IAAI,kBAAkB,MAAM,OAAO,CAAC;AAAA,IACnD;AAAA,EACF;AAAA,EAEA,aAAa,EAAC,KAAI,GAAmD;AACnE,SAAK,MAAM;AACX,SAAK,QAAQ,IAAI,kBAAkB,MAAM,IAAI;AAC7C,SAAK,yBAAyB,kCAAqB,EAAC,MAAM,KAAK,MAAK,CAAC;AAAA,EACvE;AAAA,EAEA,aAAa,EAAC,MAAK,GAAmD;AACpE,SAAK,uBAAuB,KAAK;AACjC,SAAK,yBAAyB,kCAAqB,CAAC,CAAC;AACrD;AAAA,EACF;AAAA,EAEQ,uBAAuB,cAAoE;AACjG,UAAM,qBAAqB,aAAa,IAAI,UAAQ;AAClD,YAAM,UAAU,IAAI,kBAAkB,MAAM,IAAI;AAChD,aAAO;AAAA,IACT,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,gBAAgB,SAAuE;AAC3F,QAAI,WAAW,KAAK,iBAAiB,IAAI,OAAO,GAAG;AACjD,aAAO,KAAK,iBAAiB,IAAI,OAAO;AAAA,IAC1C;AACA,QAAI,CAAC,WAAW,KAAK,OAAO;AAC1B,aAAO,KAAK;AAAA,IACd;AACA,UAAM,EAAC,KAAI,IAAI,MAAM,KAAK,MAAM,qBAAqB,EAAC,QAAO,CAAC;AAC9D,QAAI,CAAC,MAAM;AACT;AAAA,IACF;AACA,WAAO,KAAK,uBAAuB,CAAC,IAAI,CAAC,EAAE,CAAC;AAAA,EAC9C;AAAA,EAEA,MAAM,kBAAkB,QAAyC,SAChC;AAC/B,UAAM,SAAS,KAAK,cAAc,IAAI,MAAM;AAC5C,QAAI,CAAC,QAAQ;AACX,YAAM,MAAM,uCAAuC;AAAA,IACrD;AACA,QAAI,CAAC,OAAO,oBAAoB,GAAG;AACjC,aAAO,OAAO,SAAS;AAAA,IACzB;AAEA,UAAM,UAAU,KAAK,sBAAsB,IAAI,MAAM;AACrD,QAAI,SAAS;AACX,YAAM;AAAA,IACR,OAAO;AACL,YAAMC,WAAU,KAAK,MAAM,uBAAuB,EAAC,IAAI,QAAQ,QAAO,CAAC;AACvE,WAAK,sBAAsB,IAAI,QAAQA,QAAO;AAC9C,YAAM,SAAS,MAAMA;AACrB,UAAI,CAAC,OAAO,SAAS,GAAG;AACtB,aAAK,uBAAuB,OAAO,KAAK;AACxC,aAAK,sBAAsB,OAAO,MAAM;AAAA,MAC1C;AAAA,IACF;AACA,WAAO,OAAO,SAAS;AAAA,EACzB;AAAA,EAEA,MAAM,4BAA4B,MAAkD;AAElF,UAAM,SAAS,CAAC;AAChB,QAAI,WAAW,KAAK,iBAAiB,IAAI;AACzC,WAAO,UAAU;AACf,aAAO,KAAK,QAAQ;AACpB,YAAM,SAAS,SAAS,WAAW;AACnC,UAAI,CAAC,QAAQ;AACX,eAAO;AAAA,MACT;AACA,iBAAW;AAAA,IACb;AACA,UAAM,EAAC,MAAK,IAAI,MAAM,KAAK,MAAM,6BAA6B,EAAC,eAAe,KAAK,cAAc,EAAC,CAAC;AACnG,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AACA,UAAM,YAAY,KAAK,uBAAuB,KAAK;AAEnD,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,MAA+D;AACzE,WAAO,KAAK,cAAc,IAAI,IAAI,KAAK;AAAA,EACzC;AAAA,EAEA,wBAAwB,SAAgC,QAAiC;AACvF,SAAK,iBAAiB,IAAI,SAAS,MAAM;AAAA,EAC3C;AAAA,EAEA,iBAAiB,SAAwD;AACvE,WAAO,KAAK,iBAAiB,IAAI,OAAO,KAAK;AAAA,EAC/C;AAAA,EAEA,iBAAiB,MAAc,QAAiC;AAC9D,SAAK,cAAc,IAAI,MAAM,MAAM;AAAA,EACrC;AAAA,EAEA,iBAAiB,SAA+C;AAC9D,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AACA,WAAO,KAAK,0BAA0B,IAAI,QAAQ,cAAc,CAAC,KAAK;AAAA,EACxE;AAAA,EAEA,6BAA6B,kBAA8C,QAAiC;AAC1G,SAAK,0BAA0B,IAAI,kBAAkB,MAAM;AAAA,EAC7D;AAAA,EAEA,WAA8C;AAC5C,WAAO,KAAK;AAAA,EACd;AACF;AAEA,SAAS,SAAS,oBAAoB,EAAC,cAAc,WAAW,KAAK,WAAW,MAAK,CAAC;",
  "names": ["CoreAxPropertyName", "Events", "request"]
}
