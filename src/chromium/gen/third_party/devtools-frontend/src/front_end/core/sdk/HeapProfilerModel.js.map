{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/HeapProfilerModel.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport type {DebuggerModel} from './DebuggerModel.js';\nimport type {RemoteObject} from './RemoteObject.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\n\nexport class HeapProfilerModel extends SDKModel<EventTypes> {\n  #enabled: boolean;\n  readonly #heapProfilerAgent: ProtocolProxyApi.HeapProfilerApi;\n  readonly #runtimeModelInternal: RuntimeModel;\n  #samplingProfilerDepth: number;\n\n  constructor(target: Target) {\n    super(target);\n    target.registerHeapProfilerDispatcher(new HeapProfilerDispatcher(this));\n    this.#enabled = false;\n    this.#heapProfilerAgent = target.heapProfilerAgent();\n    this.#runtimeModelInternal = (target.model(RuntimeModel) as RuntimeModel);\n    this.#samplingProfilerDepth = 0;\n  }\n\n  debuggerModel(): DebuggerModel {\n    return this.#runtimeModelInternal.debuggerModel();\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.#runtimeModelInternal;\n  }\n\n  async enable(): Promise<void> {\n    if (this.#enabled) {\n      return;\n    }\n\n    this.#enabled = true;\n    await this.#heapProfilerAgent.invoke_enable();\n  }\n\n  async startSampling(samplingRateInBytes?: number): Promise<boolean> {\n    if (this.#samplingProfilerDepth++) {\n      return false;\n    }\n    const defaultSamplingIntervalInBytes = 16384;\n    const response = await this.#heapProfilerAgent.invoke_startSampling(\n        {samplingInterval: samplingRateInBytes || defaultSamplingIntervalInBytes});\n    return Boolean(response.getError());\n  }\n\n  async stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile|null> {\n    if (!this.#samplingProfilerDepth) {\n      throw new Error('Sampling profiler is not running.');\n    }\n    if (--this.#samplingProfilerDepth) {\n      return this.getSamplingProfile();\n    }\n    const response = await this.#heapProfilerAgent.invoke_stopSampling();\n    if (response.getError()) {\n      return null;\n    }\n    return response.profile;\n  }\n\n  async getSamplingProfile(): Promise<Protocol.HeapProfiler.SamplingHeapProfile|null> {\n    const response = await this.#heapProfilerAgent.invoke_getSamplingProfile();\n    if (response.getError()) {\n      return null;\n    }\n    return response.profile;\n  }\n\n  async collectGarbage(): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_collectGarbage();\n    return Boolean(response.getError());\n  }\n\n  async snapshotObjectIdForObjectId(objectId: Protocol.Runtime.RemoteObjectId): Promise<string|null> {\n    const response = await this.#heapProfilerAgent.invoke_getHeapObjectId({objectId});\n    if (response.getError()) {\n      return null;\n    }\n    return response.heapSnapshotObjectId;\n  }\n\n  async objectForSnapshotObjectId(\n      snapshotObjectId: Protocol.HeapProfiler.HeapSnapshotObjectId,\n      objectGroupName: string): Promise<RemoteObject|null> {\n    const result = await this.#heapProfilerAgent.invoke_getObjectByHeapObjectId(\n        {objectId: snapshotObjectId, objectGroup: objectGroupName});\n    if (result.getError()) {\n      return null;\n    }\n    return this.#runtimeModelInternal.createRemoteObject(result.result);\n  }\n\n  async addInspectedHeapObject(snapshotObjectId: Protocol.HeapProfiler.HeapSnapshotObjectId): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_addInspectedHeapObject({heapObjectId: snapshotObjectId});\n    return Boolean(response.getError());\n  }\n\n  async takeHeapSnapshot(heapSnapshotOptions: Protocol.HeapProfiler.TakeHeapSnapshotRequest): Promise<void> {\n    await this.#heapProfilerAgent.invoke_takeHeapSnapshot(heapSnapshotOptions);\n  }\n\n  async startTrackingHeapObjects(recordAllocationStacks: boolean): Promise<boolean> {\n    const response =\n        await this.#heapProfilerAgent.invoke_startTrackingHeapObjects({trackAllocations: recordAllocationStacks});\n    return Boolean(response.getError());\n  }\n\n  async stopTrackingHeapObjects(reportProgress: boolean): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_stopTrackingHeapObjects({reportProgress});\n    return Boolean(response.getError());\n  }\n\n  heapStatsUpdate(samples: number[]): void {\n    this.dispatchEventToListeners(Events.HEAP_STATS_UPDATED, samples);\n  }\n\n  lastSeenObjectId(lastSeenObjectId: number, timestamp: number): void {\n    this.dispatchEventToListeners(Events.LAST_SEEN_OBJECT_ID, {lastSeenObjectId, timestamp});\n  }\n\n  addHeapSnapshotChunk(chunk: string): void {\n    this.dispatchEventToListeners(Events.ADD_HEAP_SNAPSHOT_CHUNK, chunk);\n  }\n\n  reportHeapSnapshotProgress(done: number, total: number, finished?: boolean): void {\n    this.dispatchEventToListeners(Events.REPORT_HEAP_SNAPSHOT_PROGRESS, {done, total, finished});\n  }\n\n  resetProfiles(): void {\n    this.dispatchEventToListeners(Events.RESET_PROFILES, this);\n  }\n}\n\nexport const enum Events {\n  HEAP_STATS_UPDATED = 'HeapStatsUpdate',\n  LAST_SEEN_OBJECT_ID = 'LastSeenObjectId',\n  ADD_HEAP_SNAPSHOT_CHUNK = 'AddHeapSnapshotChunk',\n  REPORT_HEAP_SNAPSHOT_PROGRESS = 'ReportHeapSnapshotProgress',\n  RESET_PROFILES = 'ResetProfiles',\n}\n\n/**\n * An array of triplets. Each triplet describes a fragment. The first number is the fragment\n * index, the second number is a total count of objects for the fragment, the third number is\n * a total size of the objects for the fragment.\n */\nexport type HeapStatsUpdateSamples = number[];\n\nexport interface LastSeenObjectId {\n  lastSeenObjectId: number;\n  timestamp: number;\n}\n\nexport interface HeapSnapshotProgress {\n  done: number;\n  total: number;\n  finished?: boolean;\n}\n\nexport type EventTypes = {\n  [Events.HEAP_STATS_UPDATED]: HeapStatsUpdateSamples,\n  [Events.LAST_SEEN_OBJECT_ID]: LastSeenObjectId,\n  [Events.ADD_HEAP_SNAPSHOT_CHUNK]: string,\n  [Events.REPORT_HEAP_SNAPSHOT_PROGRESS]: HeapSnapshotProgress,\n  [Events.RESET_PROFILES]: HeapProfilerModel,\n};\n\nexport interface NativeProfilerCallFrame {\n  functionName: string;\n  url: Platform.DevToolsPath.UrlString;\n  scriptId?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\nexport interface CommonHeapProfileNode {\n  callFrame: NativeProfilerCallFrame;\n  selfSize: number;\n  id?: number;\n  children: CommonHeapProfileNode[];\n}\n\nexport interface CommonHeapProfile {\n  head: CommonHeapProfileNode;\n  modules: Protocol.Memory.Module[];\n}\n\nclass HeapProfilerDispatcher implements ProtocolProxyApi.HeapProfilerDispatcher {\n  readonly #heapProfilerModel: HeapProfilerModel;\n  constructor(model: HeapProfilerModel) {\n    this.#heapProfilerModel = model;\n  }\n\n  heapStatsUpdate({statsUpdate}: Protocol.HeapProfiler.HeapStatsUpdateEvent): void {\n    this.#heapProfilerModel.heapStatsUpdate(statsUpdate);\n  }\n\n  lastSeenObjectId({lastSeenObjectId, timestamp}: Protocol.HeapProfiler.LastSeenObjectIdEvent): void {\n    this.#heapProfilerModel.lastSeenObjectId(lastSeenObjectId, timestamp);\n  }\n\n  addHeapSnapshotChunk({chunk}: Protocol.HeapProfiler.AddHeapSnapshotChunkEvent): void {\n    this.#heapProfilerModel.addHeapSnapshotChunk(chunk);\n  }\n\n  reportHeapSnapshotProgress({done, total, finished}: Protocol.HeapProfiler.ReportHeapSnapshotProgressEvent): void {\n    this.#heapProfilerModel.reportHeapSnapshotProgress(done, total, finished);\n  }\n\n  resetProfiles(): void {\n    this.#heapProfilerModel.resetProfiles();\n  }\n}\n\nSDKModel.register(HeapProfilerModel, {capabilities: Capability.JS, autostart: false});\n"],
  "mappings": "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",
  "names": ["Events"]
}
