{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/Target.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\nimport * as ProtocolClient from '../protocol_client/protocol_client.js';\n\nimport {SDKModel} from './SDKModel.js';\nimport type {TargetManager} from './TargetManager.js';\n\nexport class Target extends ProtocolClient.InspectorBackend.TargetBase {\n  readonly #targetManagerInternal: TargetManager;\n  #nameInternal: string;\n  #inspectedURLInternal: Platform.DevToolsPath.UrlString;\n  #inspectedURLName: string;\n  readonly #capabilitiesMask: number;\n  #typeInternal: Type;\n  readonly #parentTargetInternal: Target|null;\n  #idInternal: Protocol.Target.TargetID|'main';\n  #modelByConstructor: Map<new(arg1: Target) => SDKModel, SDKModel>;\n  #isSuspended: boolean;\n  #targetInfoInternal: Protocol.Target.TargetInfo|undefined;\n  #creatingModels?: boolean;\n\n  constructor(\n      targetManager: TargetManager, id: Protocol.Target.TargetID|'main', name: string, type: Type,\n      parentTarget: Target|null, sessionId: string, suspended: boolean,\n      connection: ProtocolClient.InspectorBackend.Connection|null, targetInfo?: Protocol.Target.TargetInfo) {\n    const needsNodeJSPatching = type === Type.NODE;\n    super(needsNodeJSPatching, parentTarget, sessionId, connection);\n    this.#targetManagerInternal = targetManager;\n    this.#nameInternal = name;\n    this.#inspectedURLInternal = Platform.DevToolsPath.EmptyUrlString;\n    this.#inspectedURLName = '';\n    this.#capabilitiesMask = 0;\n    switch (type) {\n      case Type.FRAME:\n        this.#capabilitiesMask = Capability.BROWSER | Capability.STORAGE | Capability.DOM | Capability.JS |\n            Capability.LOG | Capability.NETWORK | Capability.TARGET | Capability.TRACING | Capability.EMULATION |\n            Capability.INPUT | Capability.INSPECTOR | Capability.AUDITS | Capability.WEB_AUTHN | Capability.IO |\n            Capability.MEDIA | Capability.EVENT_BREAKPOINTS;\n        if (parentTarget?.type() !== Type.FRAME) {\n          // This matches backend exposing certain capabilities only for the main frame.\n          this.#capabilitiesMask |=\n              Capability.DEVICE_EMULATION | Capability.SCREEN_CAPTURE | Capability.SECURITY | Capability.SERVICE_WORKER;\n          if (Common.ParsedURL.schemeIs(targetInfo?.url as Platform.DevToolsPath.UrlString, 'chrome-extension:')) {\n            this.#capabilitiesMask &= ~Capability.SECURITY;\n          }\n\n          // TODO(dgozman): we report service workers for the whole frame tree on the main frame,\n          // while we should be able to only cover the subtree corresponding to the target.\n        }\n        break;\n      case Type.ServiceWorker:\n        this.#capabilitiesMask = Capability.JS | Capability.LOG | Capability.NETWORK | Capability.TARGET |\n            Capability.INSPECTOR | Capability.IO | Capability.EVENT_BREAKPOINTS;\n        if (parentTarget?.type() !== Type.FRAME) {\n          this.#capabilitiesMask |= Capability.BROWSER;\n        }\n        break;\n      case Type.SHARED_WORKER:\n        this.#capabilitiesMask = Capability.JS | Capability.LOG | Capability.NETWORK | Capability.TARGET |\n            Capability.IO | Capability.MEDIA | Capability.INSPECTOR | Capability.EVENT_BREAKPOINTS;\n        break;\n      case Type.SHARED_STORAGE_WORKLET:\n        this.#capabilitiesMask = Capability.JS | Capability.LOG | Capability.INSPECTOR | Capability.EVENT_BREAKPOINTS;\n        break;\n      case Type.Worker:\n        this.#capabilitiesMask = Capability.JS | Capability.LOG | Capability.NETWORK | Capability.TARGET |\n            Capability.IO | Capability.MEDIA | Capability.EMULATION | Capability.EVENT_BREAKPOINTS;\n        break;\n      case Type.WORKLET:\n        this.#capabilitiesMask = Capability.JS | Capability.LOG | Capability.EVENT_BREAKPOINTS | Capability.NETWORK;\n        break;\n      case Type.NODE:\n        this.#capabilitiesMask = Capability.JS;\n        break;\n      case Type.AUCTION_WORKLET:\n        this.#capabilitiesMask = Capability.JS | Capability.EVENT_BREAKPOINTS;\n        break;\n      case Type.BROWSER:\n        this.#capabilitiesMask = Capability.TARGET | Capability.IO;\n        break;\n      case Type.TAB:\n        this.#capabilitiesMask = Capability.TARGET | Capability.TRACING;\n        break;\n    }\n    this.#typeInternal = type;\n    this.#parentTargetInternal = parentTarget;\n    this.#idInternal = id;\n    /* } */\n    this.#modelByConstructor = new Map();\n    this.#isSuspended = suspended;\n    this.#targetInfoInternal = targetInfo;\n  }\n\n  createModels(required: Set<new(arg1: Target) => SDKModel>): void {\n    this.#creatingModels = true;\n    const registeredModels = Array.from(SDKModel.registeredModels.entries());\n    // Create early models.\n    for (const [modelClass, info] of registeredModels) {\n      if (info.early) {\n        this.model(modelClass);\n      }\n    }\n    // Create autostart and required models.\n    for (const [modelClass, info] of registeredModels) {\n      if (info.autostart || required.has(modelClass)) {\n        this.model(modelClass);\n      }\n    }\n    this.#creatingModels = false;\n  }\n\n  id(): Protocol.Target.TargetID|'main' {\n    return this.#idInternal;\n  }\n\n  name(): string {\n    return this.#nameInternal || this.#inspectedURLName;\n  }\n\n  setName(name: string): void {\n    if (this.#nameInternal === name) {\n      return;\n    }\n    this.#nameInternal = name;\n    this.#targetManagerInternal.onNameChange(this);\n  }\n\n  type(): Type {\n    return this.#typeInternal;\n  }\n\n  override markAsNodeJSForTest(): void {\n    super.markAsNodeJSForTest();\n    this.#typeInternal = Type.NODE;\n  }\n\n  targetManager(): TargetManager {\n    return this.#targetManagerInternal;\n  }\n\n  hasAllCapabilities(capabilitiesMask: number): boolean {\n    // TODO(dgozman): get rid of this method, once we never observe targets with\n    // capability mask.\n    return (this.#capabilitiesMask & capabilitiesMask) === capabilitiesMask;\n  }\n\n  decorateLabel(label: string): string {\n    return (this.#typeInternal === Type.Worker || this.#typeInternal === Type.ServiceWorker) ? '\\u2699 ' + label :\n                                                                                               label;\n  }\n\n  parentTarget(): Target|null {\n    return this.#parentTargetInternal;\n  }\n\n  outermostTarget(): Target|null {\n    let lastTarget: Target|null = null;\n    let currentTarget: Target|null = this;\n    do {\n      if (currentTarget.type() !== Type.TAB && currentTarget.type() !== Type.BROWSER) {\n        lastTarget = currentTarget;\n      }\n      currentTarget = currentTarget.parentTarget();\n    } while (currentTarget);\n\n    return lastTarget;\n  }\n\n  override dispose(reason: string): void {\n    super.dispose(reason);\n    this.#targetManagerInternal.removeTarget(this);\n    for (const model of this.#modelByConstructor.values()) {\n      model.dispose();\n    }\n  }\n\n  model<T extends SDKModel>(modelClass: new(arg1: Target) => T): T|null {\n    if (!this.#modelByConstructor.get(modelClass)) {\n      const info = SDKModel.registeredModels.get(modelClass);\n      if (info === undefined) {\n        throw 'Model class is not registered @' + new Error().stack;\n      }\n      if ((this.#capabilitiesMask & info.capabilities) === info.capabilities) {\n        const model = new modelClass(this);\n        this.#modelByConstructor.set(modelClass, model);\n        if (!this.#creatingModels) {\n          this.#targetManagerInternal.modelAdded(this, modelClass, model, this.#targetManagerInternal.isInScope(this));\n        }\n      }\n    }\n    return (this.#modelByConstructor.get(modelClass) as T) || null;\n  }\n\n  models(): Map<new(arg1: Target) => SDKModel, SDKModel> {\n    return this.#modelByConstructor;\n  }\n\n  inspectedURL(): Platform.DevToolsPath.UrlString {\n    return this.#inspectedURLInternal;\n  }\n\n  setInspectedURL(inspectedURL: Platform.DevToolsPath.UrlString): void {\n    this.#inspectedURLInternal = inspectedURL;\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(inspectedURL);\n    this.#inspectedURLName = parsedURL ? parsedURL.lastPathComponentWithFragment() : '#' + this.#idInternal;\n    this.#targetManagerInternal.onInspectedURLChange(this);\n    if (!this.#nameInternal) {\n      this.#targetManagerInternal.onNameChange(this);\n    }\n  }\n\n  async suspend(reason?: string): Promise<void> {\n    if (this.#isSuspended) {\n      return;\n    }\n    this.#isSuspended = true;\n\n    await Promise.all(Array.from(this.models().values(), m => m.preSuspendModel(reason)));\n    await Promise.all(Array.from(this.models().values(), m => m.suspendModel(reason)));\n  }\n\n  async resume(): Promise<void> {\n    if (!this.#isSuspended) {\n      return;\n    }\n    this.#isSuspended = false;\n\n    await Promise.all(Array.from(this.models().values(), m => m.resumeModel()));\n    await Promise.all(Array.from(this.models().values(), m => m.postResumeModel()));\n  }\n\n  suspended(): boolean {\n    return this.#isSuspended;\n  }\n\n  updateTargetInfo(targetInfo: Protocol.Target.TargetInfo): void {\n    this.#targetInfoInternal = targetInfo;\n  }\n\n  targetInfo(): Protocol.Target.TargetInfo|undefined {\n    return this.#targetInfoInternal;\n  }\n}\n\nexport enum Type {\n  FRAME = 'frame',\n  // eslint-disable-next-line @typescript-eslint/naming-convention -- Used by web_tests.\n  ServiceWorker = 'service-worker',\n  // eslint-disable-next-line @typescript-eslint/naming-convention -- Used by web_tests.\n  Worker = 'worker',\n  SHARED_WORKER = 'shared-worker',\n  SHARED_STORAGE_WORKLET = 'shared-storage-worklet',\n  NODE = 'node',\n  BROWSER = 'browser',\n  AUCTION_WORKLET = 'auction-worklet',\n  WORKLET = 'worklet',\n  TAB = 'tab',\n}\n\nexport const enum Capability {\n  BROWSER = 1 << 0,\n  DOM = 1 << 1,\n  JS = 1 << 2,\n  LOG = 1 << 3,\n  NETWORK = 1 << 4,\n  TARGET = 1 << 5,\n  SCREEN_CAPTURE = 1 << 6,\n  TRACING = 1 << 7,\n  EMULATION = 1 << 8,\n  SECURITY = 1 << 9,\n  INPUT = 1 << 10,\n  INSPECTOR = 1 << 11,\n  DEVICE_EMULATION = 1 << 12,\n  STORAGE = 1 << 13,\n  SERVICE_WORKER = 1 << 14,\n  AUDITS = 1 << 15,\n  WEB_AUTHN = 1 << 16,\n  IO = 1 << 17,\n  MEDIA = 1 << 18,\n  EVENT_BREAKPOINTS = 1 << 19,\n  NONE = 0,\n}\n"],
  "mappings": "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",
  "names": ["Type", "Capability"]
}
