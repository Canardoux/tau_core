{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/ServiceWorkerManager.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Events as RuntimeModelEvents, RuntimeModel, type ExecutionContext} from './RuntimeModel.js';\n\nimport {Capability, Type, type Target} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   *@description Service worker running status displayed in the Service Workers view in the Application panel\n   */\n  running: 'running',\n  /**\n   *@description Service worker running status displayed in the Service Workers view in the Application panel\n   */\n  starting: 'starting',\n  /**\n   *@description Service worker running status displayed in the Service Workers view in the Application panel\n   */\n  stopped: 'stopped',\n  /**\n   *@description Service worker running status displayed in the Service Workers view in the Application panel\n   */\n  stopping: 'stopping',\n  /**\n   *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  activated: 'activated',\n  /**\n   *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  activating: 'activating',\n  /**\n   *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  installed: 'installed',\n  /**\n   *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  installing: 'installing',\n  /**\n   *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  new: 'new',\n  /**\n   *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   */\n  redundant: 'redundant',\n  /**\n   *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n   *@example {sw.js} PH1\n   *@example {117} PH2\n   *@example {activated} PH3\n   */\n  sSS: '{PH1} #{PH2} ({PH3})',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ServiceWorkerManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport class ServiceWorkerManager extends SDKModel<EventTypes> {\n  readonly #agent: ProtocolProxyApi.ServiceWorkerApi;\n  readonly #registrationsInternal: Map<string, ServiceWorkerRegistration>;\n  #enabled: boolean;\n  readonly #forceUpdateSetting: Common.Settings.Setting<boolean>;\n  serviceWorkerNetworkRequestsPanelStatus: {\n    isOpen: boolean,\n    openedAt: number,\n  };\n\n  constructor(target: Target) {\n    super(target);\n    target.registerServiceWorkerDispatcher(new ServiceWorkerDispatcher(this));\n    this.#agent = target.serviceWorkerAgent();\n    this.#registrationsInternal = new Map();\n    this.#enabled = false;\n    void this.enable();\n    this.#forceUpdateSetting =\n        Common.Settings.Settings.instance().createSetting('service-worker-update-on-reload', false);\n    if (this.#forceUpdateSetting.get()) {\n      this.forceUpdateSettingChanged();\n    }\n    this.#forceUpdateSetting.addChangeListener(this.forceUpdateSettingChanged, this);\n    new ServiceWorkerContextNamer(target, this);\n\n    /** Status of service worker network requests panel */\n    this.serviceWorkerNetworkRequestsPanelStatus = {\n      isOpen: false,\n      openedAt: 0,\n    };\n  }\n\n  async enable(): Promise<void> {\n    if (this.#enabled) {\n      return;\n    }\n    this.#enabled = true;\n    await this.#agent.invoke_enable();\n  }\n\n  async disable(): Promise<void> {\n    if (!this.#enabled) {\n      return;\n    }\n    this.#enabled = false;\n    this.#registrationsInternal.clear();\n    await this.#agent.invoke_enable();\n  }\n\n  registrations(): Map<string, ServiceWorkerRegistration> {\n    return this.#registrationsInternal;\n  }\n\n  hasRegistrationForURLs(urls: string[]): boolean {\n    for (const registration of this.#registrationsInternal.values()) {\n      if (urls.filter(url => url && url.startsWith(registration.scopeURL)).length === urls.length) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  findVersion(versionId: string): ServiceWorkerVersion|null {\n    for (const registration of this.registrations().values()) {\n      const version = registration.versions.get(versionId);\n      if (version) {\n        return version;\n      }\n    }\n    return null;\n  }\n\n  deleteRegistration(registrationId: string): void {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    if (registration.isRedundant()) {\n      this.#registrationsInternal.delete(registrationId);\n      this.dispatchEventToListeners(Events.REGISTRATION_DELETED, registration);\n      return;\n    }\n    registration.deleting = true;\n    for (const version of registration.versions.values()) {\n      void this.stopWorker(version.id);\n    }\n    void this.unregister(registration.scopeURL);\n  }\n\n  async updateRegistration(registrationId: string): Promise<void> {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    await this.#agent.invoke_updateRegistration({scopeURL: registration.scopeURL});\n  }\n\n  async deliverPushMessage(registrationId: Protocol.ServiceWorker.RegistrationID, data: string): Promise<void> {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_deliverPushMessage({origin, registrationId, data});\n  }\n\n  async dispatchSyncEvent(registrationId: Protocol.ServiceWorker.RegistrationID, tag: string, lastChance: boolean):\n      Promise<void> {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_dispatchSyncEvent({origin, registrationId, tag, lastChance});\n  }\n\n  async dispatchPeriodicSyncEvent(registrationId: Protocol.ServiceWorker.RegistrationID, tag: string): Promise<void> {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_dispatchPeriodicSyncEvent({origin, registrationId, tag});\n  }\n\n  private async unregister(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_unregister({scopeURL});\n  }\n\n  async startWorker(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_startWorker({scopeURL});\n  }\n\n  async skipWaiting(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_skipWaiting({scopeURL});\n  }\n\n  async stopWorker(versionId: string): Promise<void> {\n    await this.#agent.invoke_stopWorker({versionId});\n  }\n\n  async inspectWorker(versionId: string): Promise<void> {\n    await this.#agent.invoke_inspectWorker({versionId});\n  }\n\n  workerRegistrationUpdated(registrations: Protocol.ServiceWorker.ServiceWorkerRegistration[]): void {\n    for (const payload of registrations) {\n      let registration = this.#registrationsInternal.get(payload.registrationId);\n      if (!registration) {\n        registration = new ServiceWorkerRegistration(payload);\n        this.#registrationsInternal.set(payload.registrationId, registration);\n        this.dispatchEventToListeners(Events.REGISTRATION_UPDATED, registration);\n        continue;\n      }\n      registration.update(payload);\n\n      if (registration.shouldBeRemoved()) {\n        this.#registrationsInternal.delete(registration.id);\n        this.dispatchEventToListeners(Events.REGISTRATION_DELETED, registration);\n      } else {\n        this.dispatchEventToListeners(Events.REGISTRATION_UPDATED, registration);\n      }\n    }\n  }\n\n  workerVersionUpdated(versions: Protocol.ServiceWorker.ServiceWorkerVersion[]): void {\n    const registrations = new Set<ServiceWorkerRegistration>();\n    for (const payload of versions) {\n      const registration = this.#registrationsInternal.get(payload.registrationId);\n      if (!registration) {\n        continue;\n      }\n      registration.updateVersion(payload);\n      registrations.add(registration);\n    }\n    for (const registration of registrations) {\n      if (registration.shouldBeRemoved()) {\n        this.#registrationsInternal.delete(registration.id);\n        this.dispatchEventToListeners(Events.REGISTRATION_DELETED, registration);\n      } else {\n        this.dispatchEventToListeners(Events.REGISTRATION_UPDATED, registration);\n      }\n    }\n  }\n\n  workerErrorReported(payload: Protocol.ServiceWorker.ServiceWorkerErrorMessage): void {\n    const registration = this.#registrationsInternal.get(payload.registrationId);\n    if (!registration) {\n      return;\n    }\n    registration.errors.push(payload);\n    this.dispatchEventToListeners(Events.REGISTRATION_ERROR_ADDED, {registration, error: payload});\n  }\n\n  forceUpdateOnReloadSetting(): Common.Settings.Setting<boolean> {\n    return this.#forceUpdateSetting;\n  }\n\n  private forceUpdateSettingChanged(): void {\n    const forceUpdateOnPageLoad = this.#forceUpdateSetting.get();\n    void this.#agent.invoke_setForceUpdateOnPageLoad({forceUpdateOnPageLoad});\n  }\n}\n\nexport const enum Events {\n  REGISTRATION_UPDATED = 'RegistrationUpdated',\n  REGISTRATION_ERROR_ADDED = 'RegistrationErrorAdded',\n  REGISTRATION_DELETED = 'RegistrationDeleted',\n}\n\nexport interface RegistrationErrorAddedEvent {\n  registration: ServiceWorkerRegistration;\n  error: Protocol.ServiceWorker.ServiceWorkerErrorMessage;\n}\n\nexport type EventTypes = {\n  [Events.REGISTRATION_UPDATED]: ServiceWorkerRegistration,\n  [Events.REGISTRATION_ERROR_ADDED]: RegistrationErrorAddedEvent,\n  [Events.REGISTRATION_DELETED]: ServiceWorkerRegistration,\n};\n\nclass ServiceWorkerDispatcher implements ProtocolProxyApi.ServiceWorkerDispatcher {\n  readonly #manager: ServiceWorkerManager;\n  constructor(manager: ServiceWorkerManager) {\n    this.#manager = manager;\n  }\n\n  workerRegistrationUpdated({registrations}: Protocol.ServiceWorker.WorkerRegistrationUpdatedEvent): void {\n    this.#manager.workerRegistrationUpdated(registrations);\n  }\n\n  workerVersionUpdated({versions}: Protocol.ServiceWorker.WorkerVersionUpdatedEvent): void {\n    this.#manager.workerVersionUpdated(versions);\n  }\n\n  workerErrorReported({errorMessage}: Protocol.ServiceWorker.WorkerErrorReportedEvent): void {\n    this.#manager.workerErrorReported(errorMessage);\n  }\n}\n\n/**\n * For every version, we keep a history of ServiceWorkerVersionState. Every time\n * a version is updated we will add a new state at the head of the history chain.\n * This history tells us information such as what the current state is, or when\n * the version becomes installed.\n */\nexport class ServiceWorkerVersionState {\n  runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus;\n  status: Protocol.ServiceWorker.ServiceWorkerVersionStatus;\n  lastUpdatedTimestamp: number;\n  previousState: ServiceWorkerVersionState|null;\n  constructor(\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus,\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus, previousState: ServiceWorkerVersionState|null,\n      timestamp: number) {\n    this.runningStatus = runningStatus;\n    this.status = status;\n    this.lastUpdatedTimestamp = timestamp;\n    this.previousState = previousState;\n  }\n}\n\nexport class ServiceWorkerRouterRule {\n  condition: string;\n  source: string;\n  id: number;\n  constructor(condition: string, source: string, id: number) {\n    this.condition = condition;\n    this.source = source;\n    this.id = id;\n  }\n}\n\nexport class ServiceWorkerVersion {\n  id!: string;\n  scriptURL!: Platform.DevToolsPath.UrlString;\n  parsedURL!: Common.ParsedURL.ParsedURL;\n  securityOrigin!: string;\n  scriptLastModified!: number|undefined;\n  scriptResponseTime!: number|undefined;\n  controlledClients!: Protocol.Target.TargetID[];\n  targetId!: string|null;\n  routerRules!: ServiceWorkerRouterRule[]|null;\n  currentState!: ServiceWorkerVersionState;\n  registration: ServiceWorkerRegistration;\n  constructor(registration: ServiceWorkerRegistration, payload: Protocol.ServiceWorker.ServiceWorkerVersion) {\n    this.registration = registration;\n    this.update(payload);\n  }\n\n  update(payload: Protocol.ServiceWorker.ServiceWorkerVersion): void {\n    this.id = payload.versionId;\n    this.scriptURL = payload.scriptURL as Platform.DevToolsPath.UrlString;\n    const parsedURL = new Common.ParsedURL.ParsedURL(payload.scriptURL);\n    this.securityOrigin = parsedURL.securityOrigin();\n    this.currentState =\n        new ServiceWorkerVersionState(payload.runningStatus, payload.status, this.currentState, Date.now());\n    this.scriptLastModified = payload.scriptLastModified;\n    this.scriptResponseTime = payload.scriptResponseTime;\n    if (payload.controlledClients) {\n      this.controlledClients = payload.controlledClients.slice();\n    } else {\n      this.controlledClients = [];\n    }\n    this.targetId = payload.targetId || null;\n    this.routerRules = null;\n    if (payload.routerRules) {\n      this.routerRules = this.parseJSONRules(payload.routerRules);\n    }\n  }\n\n  isStartable(): boolean {\n    return !this.registration.isDeleted && this.isActivated() && this.isStopped();\n  }\n\n  isStoppedAndRedundant(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped &&\n        this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant;\n  }\n\n  isStopped(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped;\n  }\n\n  isStarting(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting;\n  }\n\n  isRunning(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running;\n  }\n\n  isStopping(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping;\n  }\n\n  isNew(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.New;\n  }\n\n  isInstalling(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing;\n  }\n\n  isInstalled(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed;\n  }\n\n  isActivating(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating;\n  }\n\n  isActivated(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated;\n  }\n\n  isRedundant(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant;\n  }\n\n  get status(): Protocol.ServiceWorker.ServiceWorkerVersionStatus {\n    return this.currentState.status;\n  }\n\n  get runningStatus(): Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus {\n    return this.currentState.runningStatus;\n  }\n\n  mode(): string {\n    if (this.isNew() || this.isInstalling()) {\n      return ServiceWorkerVersion.Modes.INSTALLING;\n    }\n    if (this.isInstalled()) {\n      return ServiceWorkerVersion.Modes.WAITING;\n    }\n    if (this.isActivating() || this.isActivated()) {\n      return ServiceWorkerVersion.Modes.ACTIVE;\n    }\n    return ServiceWorkerVersion.Modes.REDUNDANT;\n  }\n\n  private parseJSONRules(input: string): ServiceWorkerRouterRule[]|null {\n    try {\n      const parsedObject = JSON.parse(input);\n      if (!Array.isArray(parsedObject)) {\n        console.error('Parse error: `routerRules` in ServiceWorkerVersion should be an array');\n        return null;\n      }\n      const routerRules: ServiceWorkerRouterRule[] = [];\n      for (const parsedRule of parsedObject) {\n        const {condition, source, id} = parsedRule;\n        if (condition === undefined || source === undefined || id === undefined) {\n          console.error('Parse error: Missing some fields of `routerRules` in ServiceWorkerVersion');\n          return null;\n        }\n        routerRules.push(new ServiceWorkerRouterRule(JSON.stringify(condition), JSON.stringify(source), id));\n      }\n      return routerRules;\n    } catch (e) {\n      console.error('Parse error: Invalid `routerRules` in ServiceWorkerVersion');\n      return null;\n    }\n  }\n}\n\nexport namespace ServiceWorkerVersion {\n  export const RunningStatus = {\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running]: i18nLazyString(UIStrings.running),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting]: i18nLazyString(UIStrings.starting),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped]: i18nLazyString(UIStrings.stopped),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping]: i18nLazyString(UIStrings.stopping),\n  };\n\n  export const Status = {\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated]: i18nLazyString(UIStrings.activated),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating]: i18nLazyString(UIStrings.activating),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed]: i18nLazyString(UIStrings.installed),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing]: i18nLazyString(UIStrings.installing),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.New]: i18nLazyString(UIStrings.new),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant]: i18nLazyString(UIStrings.redundant),\n  };\n\n  export const enum Modes {\n    INSTALLING = 'installing',\n    WAITING = 'waiting',\n    ACTIVE = 'active',\n    REDUNDANT = 'redundant',\n  }\n}\n\nexport class ServiceWorkerRegistration {\n  #fingerprintInternal!: symbol;\n  id!: Protocol.ServiceWorker.RegistrationID;\n  scopeURL!: Platform.DevToolsPath.UrlString;\n  securityOrigin!: Platform.DevToolsPath.UrlString;\n  isDeleted!: boolean;\n  versions: Map<string, ServiceWorkerVersion>;\n  deleting: boolean;\n  errors: Protocol.ServiceWorker.ServiceWorkerErrorMessage[];\n\n  constructor(payload: Protocol.ServiceWorker.ServiceWorkerRegistration) {\n    this.update(payload);\n    this.versions = new Map();\n    this.deleting = false;\n    this.errors = [];\n  }\n\n  update(payload: Protocol.ServiceWorker.ServiceWorkerRegistration): void {\n    this.#fingerprintInternal = Symbol('fingerprint');\n    this.id = payload.registrationId;\n    this.scopeURL = payload.scopeURL as Platform.DevToolsPath.UrlString;\n    const parsedURL = new Common.ParsedURL.ParsedURL(payload.scopeURL);\n    this.securityOrigin = parsedURL.securityOrigin();\n    this.isDeleted = payload.isDeleted;\n  }\n\n  fingerprint(): symbol {\n    return this.#fingerprintInternal;\n  }\n\n  versionsByMode(): Map<string, ServiceWorkerVersion> {\n    const result = new Map<string, ServiceWorkerVersion>();\n    for (const version of this.versions.values()) {\n      result.set(version.mode(), version);\n    }\n    return result;\n  }\n\n  updateVersion(payload: Protocol.ServiceWorker.ServiceWorkerVersion): ServiceWorkerVersion {\n    this.#fingerprintInternal = Symbol('fingerprint');\n    let version = this.versions.get(payload.versionId);\n    if (!version) {\n      version = new ServiceWorkerVersion(this, payload);\n      this.versions.set(payload.versionId, version);\n      return version;\n    }\n    version.update(payload);\n    return version;\n  }\n\n  isRedundant(): boolean {\n    for (const version of this.versions.values()) {\n      if (!version.isStoppedAndRedundant()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  shouldBeRemoved(): boolean {\n    return this.isRedundant() && (!this.errors.length || this.deleting);\n  }\n\n  canBeRemoved(): boolean {\n    return this.isDeleted || this.deleting;\n  }\n\n  clearErrors(): void {\n    this.#fingerprintInternal = Symbol('fingerprint');\n    this.errors = [];\n  }\n}\n\nclass ServiceWorkerContextNamer {\n  readonly #target: Target;\n  readonly #serviceWorkerManager: ServiceWorkerManager;\n  readonly #versionByTargetId: Map<string, ServiceWorkerVersion>;\n\n  constructor(target: Target, serviceWorkerManager: ServiceWorkerManager) {\n    this.#target = target;\n    this.#serviceWorkerManager = serviceWorkerManager;\n    this.#versionByTargetId = new Map();\n    serviceWorkerManager.addEventListener(Events.REGISTRATION_UPDATED, this.registrationsUpdated, this);\n    serviceWorkerManager.addEventListener(Events.REGISTRATION_DELETED, this.registrationsUpdated, this);\n    TargetManager.instance().addModelListener(\n        RuntimeModel, RuntimeModelEvents.ExecutionContextCreated, this.executionContextCreated, this);\n  }\n\n  private registrationsUpdated(): void {\n    this.#versionByTargetId.clear();\n    const registrations = this.#serviceWorkerManager.registrations().values();\n    for (const registration of registrations) {\n      for (const version of registration.versions.values()) {\n        if (version.targetId) {\n          this.#versionByTargetId.set(version.targetId, version);\n        }\n      }\n    }\n    this.updateAllContextLabels();\n  }\n\n  private executionContextCreated(event: Common.EventTarget.EventTargetEvent<ExecutionContext>): void {\n    const executionContext = event.data;\n    const serviceWorkerTargetId = this.serviceWorkerTargetId(executionContext.target());\n    if (!serviceWorkerTargetId) {\n      return;\n    }\n    this.updateContextLabel(executionContext, this.#versionByTargetId.get(serviceWorkerTargetId) || null);\n  }\n\n  private serviceWorkerTargetId(target: Target): string|null {\n    if (target.parentTarget() !== this.#target || target.type() !== Type.ServiceWorker) {\n      return null;\n    }\n    return target.id();\n  }\n\n  private updateAllContextLabels(): void {\n    for (const target of TargetManager.instance().targets()) {\n      const serviceWorkerTargetId = this.serviceWorkerTargetId(target);\n      if (!serviceWorkerTargetId) {\n        continue;\n      }\n      const version = this.#versionByTargetId.get(serviceWorkerTargetId) || null;\n      const runtimeModel = target.model(RuntimeModel);\n      const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n      for (const context of executionContexts) {\n        this.updateContextLabel(context, version);\n      }\n    }\n  }\n\n  private updateContextLabel(context: ExecutionContext, version: ServiceWorkerVersion|null): void {\n    if (!version) {\n      context.setLabel('');\n      return;\n    }\n    const parsedUrl = Common.ParsedURL.ParsedURL.fromString(context.origin);\n    const label = parsedUrl ? parsedUrl.lastPathComponentWithFragment() : context.name;\n    const localizedStatus = ServiceWorkerVersion.Status[version.status];\n    context.setLabel(i18nString(UIStrings.sSS, {PH1: label, PH2: version.id, PH3: localizedStatus()}));\n  }\n}\n\nSDKModel.register(ServiceWorkerManager, {capabilities: Capability.SERVICE_WORKER, autostart: true});\n"],
  "mappings": "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",
  "names": ["Events", "ServiceWorkerVersion", "Modes"]
}
