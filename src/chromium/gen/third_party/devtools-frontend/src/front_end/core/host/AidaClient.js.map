{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/host/AidaClient.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport type * as Root from '../root/root.js';\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {AidaClientResult, SyncInformation} from './InspectorFrontendHostAPI.js';\nimport {bindOutputStream} from './ResourceLoader.js';\n\nexport enum Role {\n  // Unspecified role.\n  ROLE_UNSPECIFIED = 0,\n  // The user.\n  USER = 1,\n  // The model.\n  MODEL = 2,\n}\n\nexport const enum Rating {\n  SENTIMENT_UNSPECIFIED = 'SENTIMENT_UNSPECIFIED',\n  POSITIVE = 'POSITIVE',\n  NEGATIVE = 'NEGATIVE',\n}\n\n// A `Content` represents a single turn message.\nexport interface Content {\n  parts: Part[];\n  // The producer of the content.\n  role: Role;\n}\n\nexport type Part = {\n  text: string,\n}|{\n  functionCall: {\n    name: string,\n    args: Record<string, unknown>,\n  },\n}|{\n  functionResponse: {\n    name: string,\n    response: Record<string, unknown>,\n  },\n}|{\n  // Inline media bytes.\n  inlineData: MediaBlob,\n};\n\nexport const enum ParametersTypes {\n  STRING = 1,\n  NUMBER = 2,\n  INTEGER = 3,\n  BOOLEAN = 4,\n  ARRAY = 5,\n  OBJECT = 6,\n}\n\ninterface BaseFunctionParam {\n  description: string;\n  nullable?: boolean;\n}\n\ninterface FunctionPrimitiveParams extends BaseFunctionParam {\n  type: ParametersTypes.BOOLEAN|ParametersTypes.INTEGER|ParametersTypes.STRING|ParametersTypes.BOOLEAN;\n}\n\ninterface FunctionArrayParam extends BaseFunctionParam {\n  type: ParametersTypes.ARRAY;\n  items: FunctionPrimitiveParams[];\n}\n\ninterface FunctionObjectParam extends BaseFunctionParam {\n  type: ParametersTypes.OBJECT;\n  // TODO: this can be also be ObjectParams\n  properties: {[Key in string]: FunctionPrimitiveParams|FunctionArrayParam};\n}\n\n/**\n * More about function declaration can be read at\n * https://ai.google.dev/gemini-api/docs/function-calling\n */\nexport interface FunctionDeclaration {\n  name: string;\n  /**\n   * A description for the LLM to understand what the specific function will do once called.\n   */\n  description: string;\n  parameters: FunctionObjectParam|FunctionPrimitiveParams;\n}\n\n// Raw media bytes.\nexport interface MediaBlob {\n  // The IANA standard MIME type of the source data.\n  // Currently supported types are: image/png, image/jpeg.\n  // Format: base64-encoded\n  // For reference: google3/google/x/pitchfork/aida/v1/content.proto\n  mimeType: string;\n  data: string;\n}\n\nexport enum FunctionalityType {\n  // Unspecified functionality type.\n  FUNCTIONALITY_TYPE_UNSPECIFIED = 0,\n  // The generic AI chatbot functionality.\n  CHAT = 1,\n  // The explain error functionality.\n  EXPLAIN_ERROR = 2,\n}\n\nexport enum ClientFeature {\n  // Unspecified client feature.\n  CLIENT_FEATURE_UNSPECIFIED = 0,\n  // Chrome console insights feature.\n  CHROME_CONSOLE_INSIGHTS = 1,\n  // Chrome freestyler.\n  CHROME_FREESTYLER = 2,\n  // Chrome DrJones Network Agent.\n  CHROME_DRJONES_NETWORK_AGENT = 7,\n  // Chrome DrJones Performance Agent.\n  CHROME_DRJONES_PERFORMANCE_AGENT = 8,\n  // Chrome DrJones File Agent.\n  CHROME_DRJONES_FILE_AGENT = 9,\n}\n\nexport enum UserTier {\n  // Unspecified user tier.\n  USER_TIER_UNSPECIFIED = 0,\n  // Users who are internal testers.\n  TESTERS = 1,\n  // Users who are early adopters.\n  BETA = 2,\n  // Users in the general public.\n  PUBLIC = 3,\n}\n\nexport interface AidaRequest {\n  client: string;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  current_message?: Content;\n  preamble?: string;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  historical_contexts?: Content[];\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  function_declarations?: FunctionDeclaration[];\n  options?: {\n    temperature?: number,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    model_id?: string,\n  };\n  metadata?: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    disable_user_content_logging: boolean,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    string_session_id?: string,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    user_tier?: UserTier,\n  };\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  functionality_type?: FunctionalityType;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  client_feature?: ClientFeature;\n}\n\nexport interface AidaDoConversationClientEvent {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  corresponding_aida_rpc_global_id: number;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disable_user_content_logging: boolean;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  do_conversation_client_event: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    user_feedback: {\n      sentiment?: Rating,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      user_input?: {\n        comment?: string,\n      },\n    },\n  };\n}\n\nexport enum RecitationAction {\n  ACTION_UNSPECIFIED = 'ACTION_UNSPECIFIED',\n  CITE = 'CITE',\n  BLOCK = 'BLOCK',\n  NO_ACTION = 'NO_ACTION',\n  EXEMPT_FOUND_IN_PROMPT = 'EXEMPT_FOUND_IN_PROMPT',\n}\n\nexport interface Citation {\n  startIndex: number;\n  endIndex: number;\n  url: string;\n}\n\nexport interface AttributionMetadata {\n  attributionAction: RecitationAction;\n  citations: Citation[];\n}\n\nexport interface AidaFunctionCallResponse {\n  name: string;\n  args: Record<string, unknown>;\n}\n\nexport interface AidaResponseMetadata {\n  rpcGlobalId?: number;\n  attributionMetadata?: AttributionMetadata[];\n}\n\nexport interface AidaResponse {\n  explanation: string;\n  metadata: AidaResponseMetadata;\n  functionCall?: AidaFunctionCallResponse;\n  completed: boolean;\n}\n\nexport const enum AidaAccessPreconditions {\n  AVAILABLE = 'available',\n  NO_ACCOUNT_EMAIL = 'no-account-email',\n  NO_INTERNET = 'no-internet',\n  // This is the state (mostly enterprise) users are in, when they are automatically logged out from\n  // Chrome after a certain time period. For making AIDA requests, they need to log in again.\n  SYNC_IS_PAUSED = 'sync-is-paused',\n}\n\nexport const CLIENT_NAME = 'CHROME_DEVTOOLS';\n\nconst CODE_CHUNK_SEPARATOR = '\\n`````\\n';\n\nexport class AidaAbortError extends Error {}\nexport class AidaBlockError extends Error {}\n\nexport class AidaClient {\n  static buildConsoleInsightsRequest(input: string): AidaRequest {\n    const request: AidaRequest = {\n      current_message: {parts: [{text: input}], role: Role.USER},\n      client: CLIENT_NAME,\n      functionality_type: FunctionalityType.EXPLAIN_ERROR,\n      client_feature: ClientFeature.CHROME_CONSOLE_INSIGHTS,\n    };\n    const config = Common.Settings.Settings.instance().getHostConfig();\n    let temperature = -1;\n    let modelId = '';\n    if (config.devToolsConsoleInsights?.enabled) {\n      temperature = config.devToolsConsoleInsights.temperature ?? -1;\n      modelId = config.devToolsConsoleInsights.modelId || '';\n    }\n    const disallowLogging = config.aidaAvailability?.disallowLogging ?? true;\n\n    if (temperature >= 0) {\n      request.options ??= {};\n      request.options.temperature = temperature;\n    }\n    if (modelId) {\n      request.options ??= {};\n      request.options.model_id = modelId;\n    }\n    if (disallowLogging) {\n      request.metadata = {\n        disable_user_content_logging: true,\n      };\n    }\n    return request;\n  }\n\n  static async checkAccessPreconditions(): Promise<AidaAccessPreconditions> {\n    if (!navigator.onLine) {\n      return AidaAccessPreconditions.NO_INTERNET;\n    }\n\n    const syncInfo = await new Promise<SyncInformation>(\n        resolve => InspectorFrontendHostInstance.getSyncInformation(syncInfo => resolve(syncInfo)));\n    if (!syncInfo.accountEmail) {\n      return AidaAccessPreconditions.NO_ACCOUNT_EMAIL;\n    }\n\n    if (syncInfo.isSyncPaused) {\n      return AidaAccessPreconditions.SYNC_IS_PAUSED;\n    }\n\n    return AidaAccessPreconditions.AVAILABLE;\n  }\n\n  async * fetch(request: AidaRequest, options?: {signal?: AbortSignal}): AsyncGenerator<AidaResponse, void, void> {\n    if (!InspectorFrontendHostInstance.doAidaConversation) {\n      throw new Error('doAidaConversation is not available');\n    }\n    const stream = (() => {\n      let {promise, resolve, reject} = Promise.withResolvers<string|null>();\n      options?.signal?.addEventListener('abort', () => {\n        reject(new AidaAbortError());\n      });\n      return {\n        write: async(data: string): Promise<void> => {\n          resolve(data);\n          ({promise, resolve, reject} = Promise.withResolvers<string|null>());\n        },\n        close: async(): Promise<void> => {\n          resolve(null);\n        },\n        read: (): Promise<string|null> => {\n          return promise;\n        },\n        fail: (e: Error) => reject(e),\n      };\n    })();\n    const streamId = bindOutputStream(stream);\n    InspectorFrontendHostInstance.doAidaConversation(JSON.stringify(request), streamId, result => {\n      if (result.statusCode === 403) {\n        stream.fail(new Error('Server responded: permission denied'));\n      } else if (result.error) {\n        stream.fail(new Error(`Cannot send request: ${result.error} ${result.detail || ''}`));\n      } else if (result.statusCode !== 200) {\n        stream.fail(new Error(`Request failed: ${JSON.stringify(result)}`));\n      } else {\n        void stream.close();\n      }\n    });\n    let chunk;\n    const text = [];\n    let inCodeChunk = false;\n    let functionCall: AidaFunctionCallResponse|undefined = undefined;\n    const metadata: AidaResponseMetadata = {rpcGlobalId: 0};\n    while ((chunk = await stream.read())) {\n      let textUpdated = false;\n      // The AIDA response is a JSON array of objects, split at the object\n      // boundary. Therefore each chunk may start with `[` or `,` and possibly\n      // followed by `]`. Each chunk may include one or more objects, so we\n      // make sure that each chunk becomes a well-formed JSON array when we\n      // parse it by adding `[` and `]` and removing `,` where appropriate.\n      if (!chunk.length) {\n        continue;\n      }\n      if (chunk.startsWith(',')) {\n        chunk = chunk.slice(1);\n      }\n      if (!chunk.startsWith('[')) {\n        chunk = '[' + chunk;\n      }\n      if (!chunk.endsWith(']')) {\n        chunk = chunk + ']';\n      }\n      let results;\n      try {\n        results = JSON.parse(chunk);\n      } catch (error) {\n        throw new Error('Cannot parse chunk: ' + chunk, {cause: error});\n      }\n\n      for (const result of results) {\n        if ('metadata' in result) {\n          metadata.rpcGlobalId = result.metadata.rpcGlobalId;\n          if ('attributionMetadata' in result.metadata) {\n            if (!metadata.attributionMetadata) {\n              metadata.attributionMetadata = [];\n            }\n            metadata.attributionMetadata.push(result.metadata.attributionMetadata);\n            if (result.metadata.attributionMetadata.attributionAction === RecitationAction.BLOCK) {\n              throw new AidaBlockError();\n            }\n          }\n        }\n        if ('textChunk' in result) {\n          if (inCodeChunk) {\n            text.push(CODE_CHUNK_SEPARATOR);\n            inCodeChunk = false;\n          }\n          text.push(result.textChunk.text);\n          textUpdated = true;\n        } else if ('codeChunk' in result) {\n          if (!inCodeChunk) {\n            text.push(CODE_CHUNK_SEPARATOR);\n            inCodeChunk = true;\n          }\n          text.push(result.codeChunk.code);\n          textUpdated = true;\n        } else if ('functionCallChunk' in result) {\n          functionCall = {\n            name: result.functionCallChunk.functionCall.name,\n            args: result.functionCallChunk.functionCall.args,\n          };\n        } else if ('error' in result) {\n          throw new Error(`Server responded: ${JSON.stringify(result)}`);\n        } else {\n          throw new Error('Unknown chunk result');\n        }\n      }\n      if (textUpdated) {\n        yield {\n          explanation: text.join('') + (inCodeChunk ? CODE_CHUNK_SEPARATOR : ''),\n          metadata,\n          completed: false,\n        };\n      }\n    }\n    yield {\n      explanation: text.join('') + (inCodeChunk ? CODE_CHUNK_SEPARATOR : ''),\n      metadata,\n      functionCall,\n      completed: true,\n    };\n  }\n\n  registerClientEvent(clientEvent: AidaDoConversationClientEvent): Promise<AidaClientResult> {\n    const {promise, resolve} = Promise.withResolvers<AidaClientResult>();\n    InspectorFrontendHostInstance.registerAidaClientEvent(\n        JSON.stringify({\n          client: CLIENT_NAME,\n          event_time: new Date().toISOString(),\n          ...clientEvent,\n        }),\n        resolve,\n    );\n\n    return promise;\n  }\n}\n\nexport function convertToUserTierEnum(userTier: string|undefined): UserTier {\n  if (userTier) {\n    switch (userTier) {\n      case 'TESTERS':\n        return UserTier.TESTERS;\n      case 'BETA':\n        return UserTier.BETA;\n      case 'PUBLIC':\n        return UserTier.PUBLIC;\n    }\n  }\n  return UserTier.BETA;\n}\n\nlet hostConfigTrackerInstance: HostConfigTracker|undefined;\n\nexport class HostConfigTracker extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #pollTimer?: number;\n  #aidaAvailability?: AidaAccessPreconditions;\n\n  private constructor() {\n    super();\n  }\n\n  static instance(): HostConfigTracker {\n    if (!hostConfigTrackerInstance) {\n      hostConfigTrackerInstance = new HostConfigTracker();\n    }\n    return hostConfigTrackerInstance;\n  }\n\n  override addEventListener(eventType: Events, listener: Common.EventTarget.EventListener<EventTypes, Events>):\n      Common.EventTarget.EventDescriptor<EventTypes> {\n    const isFirst = !this.hasEventListeners(eventType);\n    const eventDescriptor = super.addEventListener(eventType, listener);\n    if (isFirst) {\n      window.clearTimeout(this.#pollTimer);\n      void this.pollAidaAvailability();\n    }\n    return eventDescriptor;\n  }\n\n  override removeEventListener(eventType: Events, listener: Common.EventTarget.EventListener<EventTypes, Events>):\n      void {\n    super.removeEventListener(eventType, listener);\n    if (!this.hasEventListeners(eventType)) {\n      window.clearTimeout(this.#pollTimer);\n    }\n  }\n\n  private async pollAidaAvailability(): Promise<void> {\n    this.#pollTimer = window.setTimeout(() => this.pollAidaAvailability(), 2000);\n    const currentAidaAvailability = await AidaClient.checkAccessPreconditions();\n    if (currentAidaAvailability !== this.#aidaAvailability) {\n      this.#aidaAvailability = currentAidaAvailability;\n      const config = await new Promise<Root.Runtime.HostConfig>(\n          resolve => InspectorFrontendHostInstance.getHostConfig(config => resolve(config)));\n      Common.Settings.Settings.instance().setHostConfig(config);\n      this.dispatchEventToListeners(Events.AIDA_AVAILABILITY_CHANGED);\n    }\n  }\n}\n\nexport const enum Events {\n  AIDA_AVAILABILITY_CHANGED = 'aidaAvailabilityChanged',\n}\n\nexport type EventTypes = {\n  [Events.AIDA_AVAILABILITY_CHANGED]: void,\n};\n"],
  "mappings": ";AAIA,YAAY,YAAY;AAGxB,SAAQ,qCAAoC;AAE5C,SAAQ,wBAAuB;AAExB,WAAK,OAAL,kBAAKA,UAAL;AAEL,EAAAA,YAAA,sBAAmB,KAAnB;AAEA,EAAAA,YAAA,UAAO,KAAP;AAEA,EAAAA,YAAA,WAAQ,KAAR;AANU,SAAAA;AAAA,GAAA;AASL,WAAW,SAAX,kBAAWC,YAAX;AACL,EAAAA,QAAA,2BAAwB;AACxB,EAAAA,QAAA,cAAW;AACX,EAAAA,QAAA,cAAW;AAHK,SAAAA;AAAA,GAAA;AA8BX,WAAW,kBAAX,kBAAWC,qBAAX;AACL,EAAAA,kCAAA,YAAS,KAAT;AACA,EAAAA,kCAAA,YAAS,KAAT;AACA,EAAAA,kCAAA,aAAU,KAAV;AACA,EAAAA,kCAAA,aAAU,KAAV;AACA,EAAAA,kCAAA,WAAQ,KAAR;AACA,EAAAA,kCAAA,YAAS,KAAT;AANgB,SAAAA;AAAA,GAAA;AAoDX,WAAK,oBAAL,kBAAKC,uBAAL;AAEL,EAAAA,sCAAA,oCAAiC,KAAjC;AAEA,EAAAA,sCAAA,UAAO,KAAP;AAEA,EAAAA,sCAAA,mBAAgB,KAAhB;AANU,SAAAA;AAAA,GAAA;AASL,WAAK,gBAAL,kBAAKC,mBAAL;AAEL,EAAAA,8BAAA,gCAA6B,KAA7B;AAEA,EAAAA,8BAAA,6BAA0B,KAA1B;AAEA,EAAAA,8BAAA,uBAAoB,KAApB;AAEA,EAAAA,8BAAA,kCAA+B,KAA/B;AAEA,EAAAA,8BAAA,sCAAmC,KAAnC;AAEA,EAAAA,8BAAA,+BAA4B,KAA5B;AAZU,SAAAA;AAAA,GAAA;AAeL,WAAK,WAAL,kBAAKC,cAAL;AAEL,EAAAA,oBAAA,2BAAwB,KAAxB;AAEA,EAAAA,oBAAA,aAAU,KAAV;AAEA,EAAAA,oBAAA,UAAO,KAAP;AAEA,EAAAA,oBAAA,YAAS,KAAT;AARU,SAAAA;AAAA,GAAA;AAyDL,WAAK,mBAAL,kBAAKC,sBAAL;AACL,EAAAA,kBAAA,wBAAqB;AACrB,EAAAA,kBAAA,UAAO;AACP,EAAAA,kBAAA,WAAQ;AACR,EAAAA,kBAAA,eAAY;AACZ,EAAAA,kBAAA,4BAAyB;AALf,SAAAA;AAAA,GAAA;AAoCL,WAAW,0BAAX,kBAAWC,6BAAX;AACL,EAAAA,yBAAA,eAAY;AACZ,EAAAA,yBAAA,sBAAmB;AACnB,EAAAA,yBAAA,iBAAc;AAGd,EAAAA,yBAAA,oBAAiB;AAND,SAAAA;AAAA,GAAA;AASX,aAAM,cAAc;AAE3B,MAAM,uBAAuB;AAEtB,aAAM,uBAAuB,MAAM;AAAC;AACpC,aAAM,uBAAuB,MAAM;AAAC;AAEpC,aAAM,WAAW;AAAA,EACtB,OAAO,4BAA4B,OAA4B;AAC7D,UAAM,UAAuB;AAAA,MAC3B,iBAAiB,EAAC,OAAO,CAAC,EAAC,MAAM,MAAK,CAAC,GAAG,MAAM,aAAS;AAAA,MACzD,QAAQ;AAAA,MACR,oBAAoB;AAAA,MACpB,gBAAgB;AAAA,IAClB;AACA,UAAM,SAAS,OAAO,SAAS,SAAS,SAAS,EAAE,cAAc;AACjE,QAAI,cAAc;AAClB,QAAI,UAAU;AACd,QAAI,OAAO,yBAAyB,SAAS;AAC3C,oBAAc,OAAO,wBAAwB,eAAe;AAC5D,gBAAU,OAAO,wBAAwB,WAAW;AAAA,IACtD;AACA,UAAM,kBAAkB,OAAO,kBAAkB,mBAAmB;AAEpE,QAAI,eAAe,GAAG;AACpB,cAAQ,YAAY,CAAC;AACrB,cAAQ,QAAQ,cAAc;AAAA,IAChC;AACA,QAAI,SAAS;AACX,cAAQ,YAAY,CAAC;AACrB,cAAQ,QAAQ,WAAW;AAAA,IAC7B;AACA,QAAI,iBAAiB;AACnB,cAAQ,WAAW;AAAA,QACjB,8BAA8B;AAAA,MAChC;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,aAAa,2BAA6D;AACxE,QAAI,CAAC,UAAU,QAAQ;AACrB,aAAO;AAAA,IACT;AAEA,UAAM,WAAW,MAAM,IAAI;AAAA,MACvB,aAAW,8BAA8B,mBAAmB,CAAAC,cAAY,QAAQA,SAAQ,CAAC;AAAA,IAAC;AAC9F,QAAI,CAAC,SAAS,cAAc;AAC1B,aAAO;AAAA,IACT;AAEA,QAAI,SAAS,cAAc;AACzB,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAQ,MAAM,SAAsB,SAA4E;AAC9G,QAAI,CAAC,8BAA8B,oBAAoB;AACrD,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AACA,UAAM,UAAU,MAAM;AACpB,UAAI,EAAC,SAAS,SAAS,OAAM,IAAI,QAAQ,cAA2B;AACpE,eAAS,QAAQ,iBAAiB,SAAS,MAAM;AAC/C,eAAO,IAAI,eAAe,CAAC;AAAA,MAC7B,CAAC;AACD,aAAO;AAAA,QACL,OAAO,OAAM,SAAgC;AAC3C,kBAAQ,IAAI;AACZ,WAAC,EAAC,SAAS,SAAS,OAAM,IAAI,QAAQ,cAA2B;AAAA,QACnE;AAAA,QACA,OAAO,YAA0B;AAC/B,kBAAQ,IAAI;AAAA,QACd;AAAA,QACA,MAAM,MAA4B;AAChC,iBAAO;AAAA,QACT;AAAA,QACA,MAAM,CAAC,MAAa,OAAO,CAAC;AAAA,MAC9B;AAAA,IACF,GAAG;AACH,UAAM,WAAW,iBAAiB,MAAM;AACxC,kCAA8B,mBAAmB,KAAK,UAAU,OAAO,GAAG,UAAU,YAAU;AAC5F,UAAI,OAAO,eAAe,KAAK;AAC7B,eAAO,KAAK,IAAI,MAAM,qCAAqC,CAAC;AAAA,MAC9D,WAAW,OAAO,OAAO;AACvB,eAAO,KAAK,IAAI,MAAM,wBAAwB,OAAO,KAAK,IAAI,OAAO,UAAU,EAAE,EAAE,CAAC;AAAA,MACtF,WAAW,OAAO,eAAe,KAAK;AACpC,eAAO,KAAK,IAAI,MAAM,mBAAmB,KAAK,UAAU,MAAM,CAAC,EAAE,CAAC;AAAA,MACpE,OAAO;AACL,aAAK,OAAO,MAAM;AAAA,MACpB;AAAA,IACF,CAAC;AACD,QAAI;AACJ,UAAM,OAAO,CAAC;AACd,QAAI,cAAc;AAClB,QAAI,eAAmD;AACvD,UAAM,WAAiC,EAAC,aAAa,EAAC;AACtD,WAAQ,QAAQ,MAAM,OAAO,KAAK,GAAI;AACpC,UAAI,cAAc;AAMlB,UAAI,CAAC,MAAM,QAAQ;AACjB;AAAA,MACF;AACA,UAAI,MAAM,WAAW,GAAG,GAAG;AACzB,gBAAQ,MAAM,MAAM,CAAC;AAAA,MACvB;AACA,UAAI,CAAC,MAAM,WAAW,GAAG,GAAG;AAC1B,gBAAQ,MAAM;AAAA,MAChB;AACA,UAAI,CAAC,MAAM,SAAS,GAAG,GAAG;AACxB,gBAAQ,QAAQ;AAAA,MAClB;AACA,UAAI;AACJ,UAAI;AACF,kBAAU,KAAK,MAAM,KAAK;AAAA,MAC5B,SAAS,OAAO;AACd,cAAM,IAAI,MAAM,yBAAyB,OAAO,EAAC,OAAO,MAAK,CAAC;AAAA,MAChE;AAEA,iBAAW,UAAU,SAAS;AAC5B,YAAI,cAAc,QAAQ;AACxB,mBAAS,cAAc,OAAO,SAAS;AACvC,cAAI,yBAAyB,OAAO,UAAU;AAC5C,gBAAI,CAAC,SAAS,qBAAqB;AACjC,uBAAS,sBAAsB,CAAC;AAAA,YAClC;AACA,qBAAS,oBAAoB,KAAK,OAAO,SAAS,mBAAmB;AACrE,gBAAI,OAAO,SAAS,oBAAoB,sBAAsB,qBAAwB;AACpF,oBAAM,IAAI,eAAe;AAAA,YAC3B;AAAA,UACF;AAAA,QACF;AACA,YAAI,eAAe,QAAQ;AACzB,cAAI,aAAa;AACf,iBAAK,KAAK,oBAAoB;AAC9B,0BAAc;AAAA,UAChB;AACA,eAAK,KAAK,OAAO,UAAU,IAAI;AAC/B,wBAAc;AAAA,QAChB,WAAW,eAAe,QAAQ;AAChC,cAAI,CAAC,aAAa;AAChB,iBAAK,KAAK,oBAAoB;AAC9B,0BAAc;AAAA,UAChB;AACA,eAAK,KAAK,OAAO,UAAU,IAAI;AAC/B,wBAAc;AAAA,QAChB,WAAW,uBAAuB,QAAQ;AACxC,yBAAe;AAAA,YACb,MAAM,OAAO,kBAAkB,aAAa;AAAA,YAC5C,MAAM,OAAO,kBAAkB,aAAa;AAAA,UAC9C;AAAA,QACF,WAAW,WAAW,QAAQ;AAC5B,gBAAM,IAAI,MAAM,qBAAqB,KAAK,UAAU,MAAM,CAAC,EAAE;AAAA,QAC/D,OAAO;AACL,gBAAM,IAAI,MAAM,sBAAsB;AAAA,QACxC;AAAA,MACF;AACA,UAAI,aAAa;AACf,cAAM;AAAA,UACJ,aAAa,KAAK,KAAK,EAAE,KAAK,cAAc,uBAAuB;AAAA,UACnE;AAAA,UACA,WAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF;AACA,UAAM;AAAA,MACJ,aAAa,KAAK,KAAK,EAAE,KAAK,cAAc,uBAAuB;AAAA,MACnE;AAAA,MACA;AAAA,MACA,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EAEA,oBAAoB,aAAuE;AACzF,UAAM,EAAC,SAAS,QAAO,IAAI,QAAQ,cAAgC;AACnE,kCAA8B;AAAA,MAC1B,KAAK,UAAU;AAAA,QACb,QAAQ;AAAA,QACR,aAAY,oBAAI,KAAK,GAAE,YAAY;AAAA,QACnC,GAAG;AAAA,MACL,CAAC;AAAA,MACD;AAAA,IACJ;AAEA,WAAO;AAAA,EACT;AACF;AAEO,gBAAS,sBAAsB,UAAsC;AAC1E,MAAI,UAAU;AACZ,YAAQ,UAAU;AAAA,MAChB,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,IACX;AAAA,EACF;AACA,SAAO;AACT;AAEA,IAAI;AAEG,aAAM,0BAA0B,OAAO,cAAc,cAA0B;AAAA,EACpF;AAAA,EACA;AAAA,EAEQ,cAAc;AACpB,UAAM;AAAA,EACR;AAAA,EAEA,OAAO,WAA8B;AACnC,QAAI,CAAC,2BAA2B;AAC9B,kCAA4B,IAAI,kBAAkB;AAAA,IACpD;AACA,WAAO;AAAA,EACT;AAAA,EAES,iBAAiB,WAAmB,UACM;AACjD,UAAM,UAAU,CAAC,KAAK,kBAAkB,SAAS;AACjD,UAAM,kBAAkB,MAAM,iBAAiB,WAAW,QAAQ;AAClE,QAAI,SAAS;AACX,aAAO,aAAa,KAAK,UAAU;AACnC,WAAK,KAAK,qBAAqB;AAAA,IACjC;AACA,WAAO;AAAA,EACT;AAAA,EAES,oBAAoB,WAAmB,UACvC;AACP,UAAM,oBAAoB,WAAW,QAAQ;AAC7C,QAAI,CAAC,KAAK,kBAAkB,SAAS,GAAG;AACtC,aAAO,aAAa,KAAK,UAAU;AAAA,IACrC;AAAA,EACF;AAAA,EAEA,MAAc,uBAAsC;AAClD,SAAK,aAAa,OAAO,WAAW,MAAM,KAAK,qBAAqB,GAAG,GAAI;AAC3E,UAAM,0BAA0B,MAAM,WAAW,yBAAyB;AAC1E,QAAI,4BAA4B,KAAK,mBAAmB;AACtD,WAAK,oBAAoB;AACzB,YAAM,SAAS,MAAM,IAAI;AAAA,QACrB,aAAW,8BAA8B,cAAc,CAAAC,YAAU,QAAQA,OAAM,CAAC;AAAA,MAAC;AACrF,aAAO,SAAS,SAAS,SAAS,EAAE,cAAc,MAAM;AACxD,WAAK,yBAAyB,yDAAgC;AAAA,IAChE;AAAA,EACF;AACF;AAEO,WAAW,SAAX,kBAAWC,YAAX;AACL,EAAAA,QAAA,+BAA4B;AADZ,SAAAA;AAAA,GAAA;",
  "names": ["Role", "Rating", "ParametersTypes", "FunctionalityType", "ClientFeature", "UserTier", "RecitationAction", "AidaAccessPreconditions", "syncInfo", "config", "Events"]
}
