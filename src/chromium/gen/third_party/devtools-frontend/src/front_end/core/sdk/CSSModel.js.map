{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/CSSModel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2010 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {CSSFontFace} from './CSSFontFace.js';\nimport {CSSMatchedStyles} from './CSSMatchedStyles.js';\nimport {CSSMedia} from './CSSMedia.js';\nimport {CSSStyleRule} from './CSSRule.js';\nimport {CSSStyleDeclaration, Type} from './CSSStyleDeclaration.js';\nimport {CSSStyleSheetHeader} from './CSSStyleSheetHeader.js';\nimport {DOMModel, type DOMNode} from './DOMModel.js';\nimport {\n  Events as ResourceTreeModelEvents,\n  PrimaryPageChangeType,\n  type ResourceTreeFrame,\n  ResourceTreeModel,\n} from './ResourceTreeModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {SourceMapManager} from './SourceMapManager.js';\nimport {Capability, type Target} from './Target.js';\n\nexport const enum ColorScheme {\n  LIGHT = 'light',\n  DARK = 'dark',\n}\n\nexport class CSSModel extends SDKModel<EventTypes> {\n  readonly agent: ProtocolProxyApi.CSSApi;\n  readonly #domModel: DOMModel;\n  readonly #fontFaces: Map<string, CSSFontFace>;\n  readonly #originalStyleSheetText: Map<CSSStyleSheetHeader, Promise<string|null>>;\n  readonly #resourceTreeModel: ResourceTreeModel|null;\n  readonly #sourceMapManager: SourceMapManager<CSSStyleSheetHeader>;\n  readonly #styleLoader: ComputedStyleLoader;\n  readonly #stylePollingThrottler: Common.Throttler.Throttler;\n  readonly #styleSheetIdsForURL: Map<Platform.DevToolsPath.UrlString, Map<string, Set<Protocol.CSS.StyleSheetId>>>;\n  readonly #styleSheetIdToHeader: Map<Protocol.CSS.StyleSheetId, CSSStyleSheetHeader>;\n  #cachedMatchedCascadeNode: DOMNode|null;\n  #cachedMatchedCascadePromise: Promise<CSSMatchedStyles|null>|null;\n  #cssPropertyTracker: CSSPropertyTracker|null;\n  #isCSSPropertyTrackingEnabled: boolean;\n  #isEnabled: boolean;\n  #isRuleUsageTrackingEnabled: boolean;\n  #isTrackingRequestPending: boolean;\n  #colorScheme: ColorScheme|undefined;\n\n  constructor(target: Target) {\n    super(target);\n    this.#isEnabled = false;\n    this.#cachedMatchedCascadeNode = null;\n    this.#cachedMatchedCascadePromise = null;\n    this.#domModel = (target.model(DOMModel) as DOMModel);\n    this.#sourceMapManager = new SourceMapManager(target);\n    this.agent = target.cssAgent();\n    this.#styleLoader = new ComputedStyleLoader(this);\n    this.#resourceTreeModel = target.model(ResourceTreeModel);\n    if (this.#resourceTreeModel) {\n      this.#resourceTreeModel.addEventListener(\n          ResourceTreeModelEvents.PrimaryPageChanged, this.onPrimaryPageChanged, this);\n    }\n    target.registerCSSDispatcher(new CSSDispatcher(this));\n    if (!target.suspended()) {\n      void this.enable();\n    }\n    this.#styleSheetIdToHeader = new Map();\n    this.#styleSheetIdsForURL = new Map();\n\n    this.#originalStyleSheetText = new Map();\n\n    this.#isRuleUsageTrackingEnabled = false;\n\n    this.#fontFaces = new Map();\n\n    this.#cssPropertyTracker = null;  // TODO: support multiple trackers when we refactor the backend\n    this.#isCSSPropertyTrackingEnabled = false;\n    this.#isTrackingRequestPending = false;\n    this.#stylePollingThrottler = new Common.Throttler.Throttler(StylePollingInterval);\n\n    this.#sourceMapManager.setEnabled(\n        Common.Settings.Settings.instance().moduleSetting('css-source-maps-enabled').get());\n    Common.Settings.Settings.instance()\n        .moduleSetting('css-source-maps-enabled')\n        .addChangeListener(event => this.#sourceMapManager.setEnabled((event.data as boolean)));\n  }\n\n  async colorScheme(): Promise<ColorScheme|undefined> {\n    if (!this.#colorScheme) {\n      const colorSchemeResponse = await this.domModel()?.target().runtimeAgent().invoke_evaluate(\n          {expression: 'window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches'});\n      if (colorSchemeResponse && !colorSchemeResponse.exceptionDetails && !colorSchemeResponse.getError()) {\n        this.#colorScheme = colorSchemeResponse.result.value ? ColorScheme.DARK : ColorScheme.LIGHT;\n      }\n    }\n    return this.#colorScheme;\n  }\n\n  headersForSourceURL(sourceURL: Platform.DevToolsPath.UrlString): CSSStyleSheetHeader[] {\n    const headers = [];\n    for (const headerId of this.getStyleSheetIdsForURL(sourceURL)) {\n      const header = this.styleSheetHeaderForId(headerId);\n      if (header) {\n        headers.push(header);\n      }\n    }\n    return headers;\n  }\n\n  createRawLocationsByURL(\n      sourceURL: Platform.DevToolsPath.UrlString, lineNumber: number,\n      columnNumber: number|undefined = 0): CSSLocation[] {\n    const headers = this.headersForSourceURL(sourceURL);\n    headers.sort(stylesheetComparator);\n    const endIndex = Platform.ArrayUtilities.upperBound(\n        headers, undefined, (_, header) => lineNumber - header.startLine || columnNumber - header.startColumn);\n    if (!endIndex) {\n      return [];\n    }\n    const locations = [];\n    const last = headers[endIndex - 1];\n    for (let index = endIndex - 1;\n         index >= 0 && headers[index].startLine === last.startLine && headers[index].startColumn === last.startColumn;\n         --index) {\n      if (headers[index].containsLocation(lineNumber, columnNumber)) {\n        locations.push(new CSSLocation(headers[index], lineNumber, columnNumber));\n      }\n    }\n\n    return locations;\n    function stylesheetComparator(a: CSSStyleSheetHeader, b: CSSStyleSheetHeader): number {\n      return a.startLine - b.startLine || a.startColumn - b.startColumn || a.id.localeCompare(b.id);\n    }\n  }\n\n  sourceMapManager(): SourceMapManager<CSSStyleSheetHeader> {\n    return this.#sourceMapManager;\n  }\n\n  static readableLayerName(text: string): string {\n    return text || '<anonymous>';\n  }\n\n  static trimSourceURL(text: string): string {\n    let sourceURLIndex = text.lastIndexOf('/*# sourceURL=');\n    if (sourceURLIndex === -1) {\n      sourceURLIndex = text.lastIndexOf('/*@ sourceURL=');\n      if (sourceURLIndex === -1) {\n        return text;\n      }\n    }\n    const sourceURLLineIndex = text.lastIndexOf('\\n', sourceURLIndex);\n    if (sourceURLLineIndex === -1) {\n      return text;\n    }\n    const sourceURLLine = text.substr(sourceURLLineIndex + 1).split('\\n', 1)[0];\n    const sourceURLRegex = /[\\x20\\t]*\\/\\*[#@] sourceURL=[\\x20\\t]*([^\\s]*)[\\x20\\t]*\\*\\/[\\x20\\t]*$/;\n    if (sourceURLLine.search(sourceURLRegex) === -1) {\n      return text;\n    }\n    return text.substr(0, sourceURLLineIndex) + text.substr(sourceURLLineIndex + sourceURLLine.length + 1);\n  }\n\n  domModel(): DOMModel {\n    return this.#domModel;\n  }\n\n  async trackComputedStyleUpdatesForNode(nodeId: Protocol.DOM.NodeId|undefined): Promise<void> {\n    await this.agent.invoke_trackComputedStyleUpdatesForNode({nodeId});\n  }\n\n  async setStyleText(\n      styleSheetId: Protocol.CSS.StyleSheetId, range: TextUtils.TextRange.TextRange, text: string,\n      majorChange: boolean): Promise<boolean> {\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n\n      const {styles} =\n          await this.agent.invoke_setStyleTexts({edits: [{styleSheetId, range: range.serializeToObject(), text}]});\n      if (!styles || styles.length !== 1) {\n        return false;\n      }\n\n      this.#domModel.markUndoableState(!majorChange);\n      const edit = new Edit(styleSheetId, range, text, styles[0]);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n\n  async setSelectorText(styleSheetId: Protocol.CSS.StyleSheetId, range: TextUtils.TextRange.TextRange, text: string):\n      Promise<boolean> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.StyleRuleEdited);\n\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n      const {selectorList} = await this.agent.invoke_setRuleSelector({styleSheetId, range, selector: text});\n\n      if (!selectorList) {\n        return false;\n      }\n      this.#domModel.markUndoableState();\n      const edit = new Edit(styleSheetId, range, text, selectorList);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n\n  async setPropertyRulePropertyName(\n      styleSheetId: Protocol.CSS.StyleSheetId, range: TextUtils.TextRange.TextRange, text: string): Promise<boolean> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.StyleRuleEdited);\n\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n      const {propertyName} =\n          await this.agent.invoke_setPropertyRulePropertyName({styleSheetId, range, propertyName: text});\n\n      if (!propertyName) {\n        return false;\n      }\n      this.#domModel.markUndoableState();\n      const edit = new Edit(styleSheetId, range, text, propertyName);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n\n  async setKeyframeKey(styleSheetId: Protocol.CSS.StyleSheetId, range: TextUtils.TextRange.TextRange, text: string):\n      Promise<boolean> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.StyleRuleEdited);\n\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n      const {keyText} = await this.agent.invoke_setKeyframeKey({styleSheetId, range, keyText: text});\n\n      if (!keyText) {\n        return false;\n      }\n      this.#domModel.markUndoableState();\n      const edit = new Edit(styleSheetId, range, text, keyText);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n\n  startCoverage(): Promise<Protocol.ProtocolResponseWithError> {\n    this.#isRuleUsageTrackingEnabled = true;\n    return this.agent.invoke_startRuleUsageTracking();\n  }\n\n  async takeCoverageDelta(): Promise<{\n    timestamp: number,\n    coverage: Array<Protocol.CSS.RuleUsage>,\n  }> {\n    const r = await this.agent.invoke_takeCoverageDelta();\n    const timestamp = (r && r.timestamp) || 0;\n    const coverage = (r && r.coverage) || [];\n    return {timestamp, coverage};\n  }\n\n  setLocalFontsEnabled(enabled: boolean): Promise<Protocol.ProtocolResponseWithError> {\n    return this.agent.invoke_setLocalFontsEnabled({\n      enabled,\n    });\n  }\n\n  async stopCoverage(): Promise<void> {\n    this.#isRuleUsageTrackingEnabled = false;\n    await this.agent.invoke_stopRuleUsageTracking();\n  }\n\n  async getMediaQueries(): Promise<CSSMedia[]> {\n    const {medias} = await this.agent.invoke_getMediaQueries();\n    return medias ? CSSMedia.parseMediaArrayPayload(this, medias) : [];\n  }\n\n  async getRootLayer(nodeId: Protocol.DOM.NodeId): Promise<Protocol.CSS.CSSLayerData> {\n    const {rootLayer} = await this.agent.invoke_getLayersForNode({nodeId});\n    return rootLayer;\n  }\n\n  isEnabled(): boolean {\n    return this.#isEnabled;\n  }\n\n  private async enable(): Promise<void> {\n    await this.agent.invoke_enable();\n    this.#isEnabled = true;\n    if (this.#isRuleUsageTrackingEnabled) {\n      await this.startCoverage();\n    }\n    this.dispatchEventToListeners(Events.ModelWasEnabled);\n  }\n\n  async getMatchedStyles(nodeId: Protocol.DOM.NodeId): Promise<CSSMatchedStyles|null> {\n    const response = await this.agent.invoke_getMatchedStylesForNode({nodeId});\n\n    if (response.getError()) {\n      return null;\n    }\n\n    const node = this.#domModel.nodeForId(nodeId);\n    if (!node) {\n      return null;\n    }\n\n    return await CSSMatchedStyles.create({\n      cssModel: this,\n      node: (node as DOMNode),\n      inlinePayload: response.inlineStyle || null,\n      attributesPayload: response.attributesStyle || null,\n      matchedPayload: response.matchedCSSRules || [],\n      pseudoPayload: response.pseudoElements || [],\n      inheritedPayload: response.inherited || [],\n      inheritedPseudoPayload: response.inheritedPseudoElements || [],\n      animationsPayload: response.cssKeyframesRules || [],\n      parentLayoutNodeId: response.parentLayoutNodeId,\n      positionTryRules: response.cssPositionTryRules || [],\n      propertyRules: response.cssPropertyRules ?? [],\n      cssPropertyRegistrations: response.cssPropertyRegistrations ?? [],\n      fontPaletteValuesRule: response.cssFontPaletteValuesRule,\n      activePositionFallbackIndex: response.activePositionFallbackIndex ?? -1,\n    });\n  }\n\n  async getClassNames(styleSheetId: Protocol.CSS.StyleSheetId): Promise<string[]> {\n    const {classNames} = await this.agent.invoke_collectClassNames({styleSheetId});\n    return classNames || [];\n  }\n\n  async getComputedStyle(nodeId: Protocol.DOM.NodeId): Promise<Map<string, string>|null> {\n    if (!this.isEnabled()) {\n      await this.enable();\n    }\n    return this.#styleLoader.computedStylePromise(nodeId);\n  }\n\n  async getBackgroundColors(nodeId: Protocol.DOM.NodeId): Promise<ContrastInfo|null> {\n    const response = await this.agent.invoke_getBackgroundColors({nodeId});\n    if (response.getError()) {\n      return null;\n    }\n\n    return {\n      backgroundColors: response.backgroundColors || null,\n      computedFontSize: response.computedFontSize || '',\n      computedFontWeight: response.computedFontWeight || '',\n    };\n  }\n\n  async getPlatformFonts(nodeId: Protocol.DOM.NodeId): Promise<Protocol.CSS.PlatformFontUsage[]|null> {\n    const {fonts} = await this.agent.invoke_getPlatformFontsForNode({nodeId});\n    return fonts;\n  }\n\n  allStyleSheets(): CSSStyleSheetHeader[] {\n    const values = [...this.#styleSheetIdToHeader.values()];\n    function styleSheetComparator(a: CSSStyleSheetHeader, b: CSSStyleSheetHeader): number {\n      if (a.sourceURL < b.sourceURL) {\n        return -1;\n      }\n      if (a.sourceURL > b.sourceURL) {\n        return 1;\n      }\n      return a.startLine - b.startLine || a.startColumn - b.startColumn;\n    }\n    values.sort(styleSheetComparator);\n\n    return values;\n  }\n\n  async getInlineStyles(nodeId: Protocol.DOM.NodeId): Promise<InlineStyleResult|null> {\n    const response = await this.agent.invoke_getInlineStylesForNode({nodeId});\n\n    if (response.getError() || !response.inlineStyle) {\n      return null;\n    }\n    const inlineStyle = new CSSStyleDeclaration(this, null, response.inlineStyle, Type.Inline);\n    const attributesStyle = response.attributesStyle ?\n        new CSSStyleDeclaration(this, null, response.attributesStyle, Type.Attributes) :\n        null;\n    return new InlineStyleResult(inlineStyle, attributesStyle);\n  }\n\n  forcePseudoState(node: DOMNode, pseudoClass: string, enable: boolean): boolean {\n    const forcedPseudoClasses = node.marker<string[]>(PseudoStateMarker) || [];\n    const hasPseudoClass = forcedPseudoClasses.includes(pseudoClass);\n    if (enable) {\n      if (hasPseudoClass) {\n        return false;\n      }\n      forcedPseudoClasses.push(pseudoClass);\n      node.setMarker(PseudoStateMarker, forcedPseudoClasses);\n    } else {\n      if (!hasPseudoClass) {\n        return false;\n      }\n      Platform.ArrayUtilities.removeElement(forcedPseudoClasses, pseudoClass);\n      if (forcedPseudoClasses.length) {\n        node.setMarker(PseudoStateMarker, forcedPseudoClasses);\n      } else {\n        node.setMarker(PseudoStateMarker, null);\n      }\n    }\n\n    if (node.id === undefined) {\n      return false;\n    }\n    void this.agent.invoke_forcePseudoState({nodeId: node.id, forcedPseudoClasses});\n    this.dispatchEventToListeners(Events.PseudoStateForced, {node, pseudoClass, enable});\n    return true;\n  }\n\n  pseudoState(node: DOMNode): string[]|null {\n    return node.marker(PseudoStateMarker) || [];\n  }\n\n  async setMediaText(\n      styleSheetId: Protocol.CSS.StyleSheetId, range: TextUtils.TextRange.TextRange,\n      newMediaText: string): Promise<boolean> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.StyleRuleEdited);\n\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n      const {media} = await this.agent.invoke_setMediaText({styleSheetId, range, text: newMediaText});\n\n      if (!media) {\n        return false;\n      }\n      this.#domModel.markUndoableState();\n      const edit = new Edit(styleSheetId, range, newMediaText, media);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n\n  async setContainerQueryText(\n      styleSheetId: Protocol.CSS.StyleSheetId, range: TextUtils.TextRange.TextRange,\n      newContainerQueryText: string): Promise<boolean> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.StyleRuleEdited);\n\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n      const {containerQuery} =\n          await this.agent.invoke_setContainerQueryText({styleSheetId, range, text: newContainerQueryText});\n\n      if (!containerQuery) {\n        return false;\n      }\n      this.#domModel.markUndoableState();\n      const edit = new Edit(styleSheetId, range, newContainerQueryText, containerQuery);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n\n  async setSupportsText(\n      styleSheetId: Protocol.CSS.StyleSheetId, range: TextUtils.TextRange.TextRange,\n      newSupportsText: string): Promise<boolean> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.StyleRuleEdited);\n\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n      const {supports} = await this.agent.invoke_setSupportsText({styleSheetId, range, text: newSupportsText});\n\n      if (!supports) {\n        return false;\n      }\n      this.#domModel.markUndoableState();\n      const edit = new Edit(styleSheetId, range, newSupportsText, supports);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n\n  async setScopeText(\n      styleSheetId: Protocol.CSS.StyleSheetId, range: TextUtils.TextRange.TextRange,\n      newScopeText: string): Promise<boolean> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.StyleRuleEdited);\n\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n      const {scope} = await this.agent.invoke_setScopeText({styleSheetId, range, text: newScopeText});\n\n      if (!scope) {\n        return false;\n      }\n      this.#domModel.markUndoableState();\n      const edit = new Edit(styleSheetId, range, newScopeText, scope);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n\n  async addRule(styleSheetId: Protocol.CSS.StyleSheetId, ruleText: string, ruleLocation: TextUtils.TextRange.TextRange):\n      Promise<CSSStyleRule|null> {\n    try {\n      await this.ensureOriginalStyleSheetText(styleSheetId);\n      const {rule} = await this.agent.invoke_addRule({styleSheetId, ruleText, location: ruleLocation});\n\n      if (!rule) {\n        return null;\n      }\n      this.#domModel.markUndoableState();\n      const edit = new Edit(styleSheetId, ruleLocation, ruleText, rule);\n      this.fireStyleSheetChanged(styleSheetId, edit);\n      return new CSSStyleRule(this, rule);\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }\n\n  async requestViaInspectorStylesheet(maybeFrameId?: Protocol.Page.FrameId|null): Promise<CSSStyleSheetHeader|null> {\n    const frameId = maybeFrameId ||\n        (this.#resourceTreeModel && this.#resourceTreeModel.mainFrame ? this.#resourceTreeModel.mainFrame.id : null);\n    const headers = [...this.#styleSheetIdToHeader.values()];\n    const styleSheetHeader = headers.find(header => header.frameId === frameId && header.isViaInspector());\n    if (styleSheetHeader) {\n      return styleSheetHeader;\n    }\n    if (!frameId) {\n      return null;\n    }\n\n    try {\n      return await this.createInspectorStylesheet(frameId);\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }\n\n  async createInspectorStylesheet(frameId: Protocol.Page.FrameId): Promise<CSSStyleSheetHeader|null> {\n    const result = await this.agent.invoke_createStyleSheet({frameId});\n    if (result.getError()) {\n      throw new Error(result.getError());\n    }\n    return this.#styleSheetIdToHeader.get(result.styleSheetId) || null;\n  }\n\n  mediaQueryResultChanged(): void {\n    this.#colorScheme = undefined;\n    this.dispatchEventToListeners(Events.MediaQueryResultChanged);\n  }\n\n  fontsUpdated(fontFace?: Protocol.CSS.FontFace|null): void {\n    if (fontFace) {\n      this.#fontFaces.set(fontFace.src, new CSSFontFace(fontFace));\n    }\n    this.dispatchEventToListeners(Events.FontsUpdated);\n  }\n\n  fontFaces(): CSSFontFace[] {\n    return [...this.#fontFaces.values()];\n  }\n\n  fontFaceForSource(src: string): CSSFontFace|undefined {\n    return this.#fontFaces.get(src);\n  }\n\n  styleSheetHeaderForId(id: Protocol.CSS.StyleSheetId): CSSStyleSheetHeader|null {\n    return this.#styleSheetIdToHeader.get(id) || null;\n  }\n\n  styleSheetHeaders(): CSSStyleSheetHeader[] {\n    return [...this.#styleSheetIdToHeader.values()];\n  }\n\n  fireStyleSheetChanged(styleSheetId: Protocol.CSS.StyleSheetId, edit?: Edit): void {\n    this.dispatchEventToListeners(Events.StyleSheetChanged, {styleSheetId, edit});\n  }\n\n  private ensureOriginalStyleSheetText(styleSheetId: Protocol.CSS.StyleSheetId): Promise<string|null> {\n    const header = this.styleSheetHeaderForId(styleSheetId);\n    if (!header) {\n      return Promise.resolve(null);\n    }\n    let promise = this.#originalStyleSheetText.get(header);\n    if (!promise) {\n      promise = this.getStyleSheetText(header.id);\n      this.#originalStyleSheetText.set(header, promise);\n      this.originalContentRequestedForTest(header);\n    }\n    return promise;\n  }\n\n  private originalContentRequestedForTest(_header: CSSStyleSheetHeader): void {\n  }\n\n  originalStyleSheetText(header: CSSStyleSheetHeader): Promise<string|null> {\n    return this.ensureOriginalStyleSheetText(header.id);\n  }\n\n  getAllStyleSheetHeaders(): Iterable<CSSStyleSheetHeader> {\n    return this.#styleSheetIdToHeader.values();\n  }\n\n  computedStyleUpdated(nodeId: Protocol.DOM.NodeId): void {\n    this.dispatchEventToListeners(Events.ComputedStyleUpdated, {nodeId});\n  }\n\n  styleSheetAdded(header: Protocol.CSS.CSSStyleSheetHeader): void {\n    console.assert(!this.#styleSheetIdToHeader.get(header.styleSheetId));\n    if (header.loadingFailed) {\n      // When the stylesheet fails to load, treat it as a constructed stylesheet. Failed sheets can still be modified\n      // from JS, in which case CSS.styleSheetChanged events are sent. So as to not confuse CSSModel clients we don't\n      // just discard the failed sheet here. Treating the failed sheet as a constructed stylesheet lets us keep track\n      // of it cleanly.\n      header.hasSourceURL = false;\n      header.isConstructed = true;\n      header.isInline = false;\n      header.isMutable = false;\n      header.sourceURL = '';\n      header.sourceMapURL = undefined;\n    }\n    const styleSheetHeader = new CSSStyleSheetHeader(this, header);\n    this.#styleSheetIdToHeader.set(header.styleSheetId, styleSheetHeader);\n    const url = styleSheetHeader.resourceURL();\n    let frameIdToStyleSheetIds = this.#styleSheetIdsForURL.get(url);\n    if (!frameIdToStyleSheetIds) {\n      frameIdToStyleSheetIds = new Map();\n      this.#styleSheetIdsForURL.set(url, frameIdToStyleSheetIds);\n    }\n    if (frameIdToStyleSheetIds) {\n      let styleSheetIds = frameIdToStyleSheetIds.get(styleSheetHeader.frameId);\n      if (!styleSheetIds) {\n        styleSheetIds = new Set();\n        frameIdToStyleSheetIds.set(styleSheetHeader.frameId, styleSheetIds);\n      }\n      styleSheetIds.add(styleSheetHeader.id);\n    }\n    this.#sourceMapManager.attachSourceMap(styleSheetHeader, styleSheetHeader.sourceURL, styleSheetHeader.sourceMapURL);\n    this.dispatchEventToListeners(Events.StyleSheetAdded, styleSheetHeader);\n  }\n\n  styleSheetRemoved(id: Protocol.CSS.StyleSheetId): void {\n    const header = this.#styleSheetIdToHeader.get(id);\n    console.assert(Boolean(header));\n    if (!header) {\n      return;\n    }\n    this.#styleSheetIdToHeader.delete(id);\n    const url = header.resourceURL();\n    const frameIdToStyleSheetIds = this.#styleSheetIdsForURL.get(url);\n    console.assert(\n        Boolean(frameIdToStyleSheetIds), 'No frameId to styleSheetId map is available for given style sheet URL.');\n    if (frameIdToStyleSheetIds) {\n      const stylesheetIds = frameIdToStyleSheetIds.get(header.frameId);\n      if (stylesheetIds) {\n        stylesheetIds.delete(id);\n        if (!stylesheetIds.size) {\n          frameIdToStyleSheetIds.delete(header.frameId);\n          if (!frameIdToStyleSheetIds.size) {\n            this.#styleSheetIdsForURL.delete(url);\n          }\n        }\n      }\n    }\n    this.#originalStyleSheetText.delete(header);\n    this.#sourceMapManager.detachSourceMap(header);\n    this.dispatchEventToListeners(Events.StyleSheetRemoved, header);\n  }\n\n  getStyleSheetIdsForURL(url: Platform.DevToolsPath.UrlString): Protocol.CSS.StyleSheetId[] {\n    const frameIdToStyleSheetIds = this.#styleSheetIdsForURL.get(url);\n    if (!frameIdToStyleSheetIds) {\n      return [];\n    }\n\n    const result = [];\n    for (const styleSheetIds of frameIdToStyleSheetIds.values()) {\n      result.push(...styleSheetIds);\n    }\n    return result;\n  }\n\n  async setStyleSheetText(styleSheetId: Protocol.CSS.StyleSheetId, newText: string, majorChange: boolean):\n      Promise<string|null> {\n    const header = this.#styleSheetIdToHeader.get(styleSheetId);\n    if (!header) {\n      return 'Unknown stylesheet in CSS.setStyleSheetText';\n    }\n    newText = CSSModel.trimSourceURL(newText);\n    if (header.hasSourceURL) {\n      newText += '\\n/*# sourceURL=' + header.sourceURL + ' */';\n    }\n\n    await this.ensureOriginalStyleSheetText(styleSheetId);\n    const response = await this.agent.invoke_setStyleSheetText({styleSheetId: header.id, text: newText});\n    const sourceMapURL = response.sourceMapURL as Platform.DevToolsPath.UrlString;\n\n    this.#sourceMapManager.detachSourceMap(header);\n    header.setSourceMapURL(sourceMapURL);\n    this.#sourceMapManager.attachSourceMap(header, header.sourceURL, header.sourceMapURL);\n    if (sourceMapURL === null) {\n      return 'Error in CSS.setStyleSheetText';\n    }\n    this.#domModel.markUndoableState(!majorChange);\n    this.fireStyleSheetChanged(styleSheetId);\n    return null;\n  }\n\n  async getStyleSheetText(styleSheetId: Protocol.CSS.StyleSheetId): Promise<string|null> {\n    const response = await this.agent.invoke_getStyleSheetText({styleSheetId});\n    if (response.getError()) {\n      return null;\n    }\n    const {text} = response;\n    return text && CSSModel.trimSourceURL(text);\n  }\n\n  private async onPrimaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<{frame: ResourceTreeFrame, type: PrimaryPageChangeType}>):\n      Promise<void> {\n    // If the main frame was restored from the back-forward cache, the order of CDP\n    // is different from the regular navigations. In this case, events about CSS\n    // stylesheet has already been received and they are mixed with the previous page\n    // stylesheets. Therefore, we re-enable the CSS agent to get fresh events.\n    // For the regular navigations, we can just clear the local data because events about\n    // stylesheets will arrive later.\n    if (event.data.frame.backForwardCacheDetails.restoredFromCache) {\n      await this.suspendModel();\n      await this.resumeModel();\n    } else if (event.data.type !== PrimaryPageChangeType.ACTIVATION) {\n      this.resetStyleSheets();\n      this.resetFontFaces();\n    }\n  }\n\n  private resetStyleSheets(): void {\n    const headers = [...this.#styleSheetIdToHeader.values()];\n    this.#styleSheetIdsForURL.clear();\n    this.#styleSheetIdToHeader.clear();\n    for (const header of headers) {\n      this.#sourceMapManager.detachSourceMap(header);\n      this.dispatchEventToListeners(Events.StyleSheetRemoved, header);\n    }\n  }\n\n  private resetFontFaces(): void {\n    this.#fontFaces.clear();\n  }\n\n  override async suspendModel(): Promise<void> {\n    this.#isEnabled = false;\n    await this.agent.invoke_disable();\n    this.resetStyleSheets();\n    this.resetFontFaces();\n  }\n\n  override async resumeModel(): Promise<void> {\n    return this.enable();\n  }\n\n  setEffectivePropertyValueForNode(nodeId: Protocol.DOM.NodeId, propertyName: string, value: string): void {\n    void this.agent.invoke_setEffectivePropertyValueForNode({nodeId, propertyName, value});\n  }\n\n  cachedMatchedCascadeForNode(node: DOMNode): Promise<CSSMatchedStyles|null> {\n    if (this.#cachedMatchedCascadeNode !== node) {\n      this.discardCachedMatchedCascade();\n    }\n    this.#cachedMatchedCascadeNode = node;\n    if (!this.#cachedMatchedCascadePromise) {\n      if (node.id) {\n        this.#cachedMatchedCascadePromise = this.getMatchedStyles(node.id);\n      } else {\n        return Promise.resolve(null);\n      }\n    }\n    return this.#cachedMatchedCascadePromise;\n  }\n\n  discardCachedMatchedCascade(): void {\n    this.#cachedMatchedCascadeNode = null;\n    this.#cachedMatchedCascadePromise = null;\n  }\n\n  createCSSPropertyTracker(propertiesToTrack: Protocol.CSS.CSSComputedStyleProperty[]): CSSPropertyTracker {\n    const cssPropertyTracker = new CSSPropertyTracker(this, propertiesToTrack);\n    return cssPropertyTracker;\n  }\n\n  enableCSSPropertyTracker(cssPropertyTracker: CSSPropertyTracker): void {\n    const propertiesToTrack = cssPropertyTracker.getTrackedProperties();\n    if (propertiesToTrack.length === 0) {\n      return;\n    }\n    void this.agent.invoke_trackComputedStyleUpdates({propertiesToTrack});\n    this.#isCSSPropertyTrackingEnabled = true;\n    this.#cssPropertyTracker = cssPropertyTracker;\n    void this.pollComputedStyleUpdates();\n  }\n\n  // Since we only support one tracker at a time, this call effectively disables\n  // style tracking.\n  disableCSSPropertyTracker(): void {\n    this.#isCSSPropertyTrackingEnabled = false;\n    this.#cssPropertyTracker = null;\n    // Sending an empty list to the backend signals the close of style tracking\n    void this.agent.invoke_trackComputedStyleUpdates({propertiesToTrack: []});\n  }\n\n  private async pollComputedStyleUpdates(): Promise<void> {\n    if (this.#isTrackingRequestPending) {\n      return;\n    }\n\n    if (this.#isCSSPropertyTrackingEnabled) {\n      this.#isTrackingRequestPending = true;\n      const result = await this.agent.invoke_takeComputedStyleUpdates();\n      this.#isTrackingRequestPending = false;\n\n      if (result.getError() || !result.nodeIds || !this.#isCSSPropertyTrackingEnabled) {\n        return;\n      }\n\n      if (this.#cssPropertyTracker) {\n        this.#cssPropertyTracker.dispatchEventToListeners(\n            CSSPropertyTrackerEvents.TRACKED_CSS_PROPERTIES_UPDATED,\n            result.nodeIds.map(nodeId => this.#domModel.nodeForId(nodeId)));\n      }\n    }\n\n    if (this.#isCSSPropertyTrackingEnabled) {\n      void this.#stylePollingThrottler.schedule(this.pollComputedStyleUpdates.bind(this));\n    }\n  }\n\n  override dispose(): void {\n    this.disableCSSPropertyTracker();\n    super.dispose();\n    this.dispatchEventToListeners(Events.ModelDisposed, this);\n  }\n\n  getAgent(): ProtocolProxyApi.CSSApi {\n    return this.agent;\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  FontsUpdated = 'FontsUpdated',\n  MediaQueryResultChanged = 'MediaQueryResultChanged',\n  ModelWasEnabled = 'ModelWasEnabled',\n  ModelDisposed = 'ModelDisposed',\n  PseudoStateForced = 'PseudoStateForced',\n  StyleSheetAdded = 'StyleSheetAdded',\n  StyleSheetChanged = 'StyleSheetChanged',\n  StyleSheetRemoved = 'StyleSheetRemoved',\n  ComputedStyleUpdated = 'ComputedStyleUpdated',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface StyleSheetChangedEvent {\n  styleSheetId: Protocol.CSS.StyleSheetId;\n  edit?: Edit;\n}\n\nexport interface PseudoStateForcedEvent {\n  node: DOMNode;\n  pseudoClass: string;\n  enable: boolean;\n}\n\nexport interface ComputedStyleUpdatedEvent {\n  nodeId: Protocol.DOM.NodeId;\n}\n\nexport type EventTypes = {\n  [Events.FontsUpdated]: void,\n  [Events.MediaQueryResultChanged]: void,\n  [Events.ModelWasEnabled]: void,\n  [Events.ModelDisposed]: CSSModel,\n  [Events.PseudoStateForced]: PseudoStateForcedEvent,\n  [Events.StyleSheetAdded]: CSSStyleSheetHeader,\n  [Events.StyleSheetChanged]: StyleSheetChangedEvent,\n  [Events.StyleSheetRemoved]: CSSStyleSheetHeader,\n  [Events.ComputedStyleUpdated]: ComputedStyleUpdatedEvent,\n};\n\nconst PseudoStateMarker = 'pseudo-state-marker';\n\nexport class Edit {\n  styleSheetId: string;\n  oldRange: TextUtils.TextRange.TextRange;\n  newRange: TextUtils.TextRange.TextRange;\n  newText: string;\n  payload: Object|null;\n  constructor(styleSheetId: string, oldRange: TextUtils.TextRange.TextRange, newText: string, payload: Object|null) {\n    this.styleSheetId = styleSheetId;\n    this.oldRange = oldRange;\n    this.newRange = TextUtils.TextRange.TextRange.fromEdit(oldRange, newText);\n    this.newText = newText;\n    this.payload = payload;\n  }\n}\n\nexport class CSSLocation {\n  readonly #cssModelInternal: CSSModel;\n  styleSheetId: Protocol.CSS.StyleSheetId;\n  url: Platform.DevToolsPath.UrlString;\n  lineNumber: number;\n  columnNumber: number;\n  constructor(header: CSSStyleSheetHeader, lineNumber: number, columnNumber?: number) {\n    this.#cssModelInternal = header.cssModel();\n    this.styleSheetId = header.id;\n    this.url = header.resourceURL();\n    this.lineNumber = lineNumber;\n    this.columnNumber = columnNumber || 0;\n  }\n\n  cssModel(): CSSModel {\n    return this.#cssModelInternal;\n  }\n\n  header(): CSSStyleSheetHeader|null {\n    return this.#cssModelInternal.styleSheetHeaderForId(this.styleSheetId);\n  }\n}\n\nclass CSSDispatcher implements ProtocolProxyApi.CSSDispatcher {\n  readonly #cssModel: CSSModel;\n  constructor(cssModel: CSSModel) {\n    this.#cssModel = cssModel;\n  }\n\n  mediaQueryResultChanged(): void {\n    this.#cssModel.mediaQueryResultChanged();\n  }\n\n  fontsUpdated({font}: Protocol.CSS.FontsUpdatedEvent): void {\n    this.#cssModel.fontsUpdated(font);\n  }\n\n  styleSheetChanged({styleSheetId}: Protocol.CSS.StyleSheetChangedEvent): void {\n    this.#cssModel.fireStyleSheetChanged(styleSheetId);\n  }\n\n  styleSheetAdded({header}: Protocol.CSS.StyleSheetAddedEvent): void {\n    this.#cssModel.styleSheetAdded(header);\n  }\n\n  styleSheetRemoved({styleSheetId}: Protocol.CSS.StyleSheetRemovedEvent): void {\n    this.#cssModel.styleSheetRemoved(styleSheetId);\n  }\n\n  computedStyleUpdated({nodeId}: Protocol.CSS.ComputedStyleUpdatedEvent): void {\n    this.#cssModel.computedStyleUpdated(nodeId);\n  }\n}\n\nclass ComputedStyleLoader {\n  #cssModel: CSSModel;\n  #nodeIdToPromise: Map<number, Promise<Map<string, string>|null>>;\n  constructor(cssModel: CSSModel) {\n    this.#cssModel = cssModel;\n    this.#nodeIdToPromise = new Map();\n  }\n\n  computedStylePromise(nodeId: Protocol.DOM.NodeId): Promise<Map<string, string>|null> {\n    let promise = this.#nodeIdToPromise.get(nodeId);\n    if (promise) {\n      return promise;\n    }\n    promise = this.#cssModel.getAgent().invoke_getComputedStyleForNode({nodeId}).then(({computedStyle}) => {\n      this.#nodeIdToPromise.delete(nodeId);\n      if (!computedStyle || !computedStyle.length) {\n        return null;\n      }\n      const result = new Map<string, string>();\n      for (const property of computedStyle) {\n        result.set(property.name, property.value);\n      }\n      return result;\n    });\n    this.#nodeIdToPromise.set(nodeId, promise);\n    return promise;\n  }\n}\n\nexport class InlineStyleResult {\n  inlineStyle: CSSStyleDeclaration|null;\n  attributesStyle: CSSStyleDeclaration|null;\n  constructor(inlineStyle: CSSStyleDeclaration|null, attributesStyle: CSSStyleDeclaration|null) {\n    this.inlineStyle = inlineStyle;\n    this.attributesStyle = attributesStyle;\n  }\n}\n\nexport class CSSPropertyTracker extends Common.ObjectWrapper.ObjectWrapper<CSSPropertyTrackerEventTypes> {\n  readonly #cssModel: CSSModel;\n  readonly #properties: Protocol.CSS.CSSComputedStyleProperty[];\n  constructor(cssModel: CSSModel, propertiesToTrack: Protocol.CSS.CSSComputedStyleProperty[]) {\n    super();\n    this.#cssModel = cssModel;\n    this.#properties = propertiesToTrack;\n  }\n\n  start(): void {\n    this.#cssModel.enableCSSPropertyTracker(this);\n  }\n\n  stop(): void {\n    this.#cssModel.disableCSSPropertyTracker();\n  }\n\n  getTrackedProperties(): Protocol.CSS.CSSComputedStyleProperty[] {\n    return this.#properties;\n  }\n}\n\nconst StylePollingInterval = 1000;  // throttling interval for style polling, in milliseconds\n\nexport const enum CSSPropertyTrackerEvents {\n  TRACKED_CSS_PROPERTIES_UPDATED = 'TrackedCSSPropertiesUpdated',\n}\n\nexport type CSSPropertyTrackerEventTypes = {\n  [CSSPropertyTrackerEvents.TRACKED_CSS_PROPERTIES_UPDATED]: (DOMNode|null)[],\n};\n\nSDKModel.register(CSSModel, {capabilities: Capability.DOM, autostart: true});\nexport interface ContrastInfo {\n  backgroundColors: string[]|null;\n  computedFontSize: string;\n  computedFontWeight: string;\n}\n"],
  "mappings": "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",
  "names": ["ColorScheme", "Events", "CSSPropertyTrackerEvents"]
}
