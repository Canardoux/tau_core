{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/Cookie.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Platform from '../platform/platform.js';\n\nconst OPAQUE_PARTITION_KEY = '<opaque>';\n\nexport class Cookie {\n  readonly #nameInternal: string;\n  readonly #valueInternal: string;\n  readonly #typeInternal: Type|null|undefined;\n  #attributes: Map<Attribute, string|number|boolean|undefined>;\n  #sizeInternal: number;\n  #priorityInternal: Protocol.Network.CookiePriority;\n  #cookieLine: string|null;\n  #partitionKey: Protocol.Network.CookiePartitionKey|undefined;\n\n  constructor(\n      name: string, value: string, type?: Type|null, priority?: Protocol.Network.CookiePriority,\n      partitionKey?: Protocol.Network.CookiePartitionKey) {\n    this.#nameInternal = name;\n    this.#valueInternal = value;\n    this.#typeInternal = type;\n    this.#attributes = new Map();\n    this.#sizeInternal = 0;\n    this.#priorityInternal = (priority || 'Medium' as Protocol.Network.CookiePriority);\n    this.#cookieLine = null;\n    this.#partitionKey = partitionKey;\n  }\n\n  static fromProtocolCookie(protocolCookie: Protocol.Network.Cookie): Cookie {\n    const cookie = new Cookie(protocolCookie.name, protocolCookie.value, null, protocolCookie.priority);\n    cookie.addAttribute(Attribute.DOMAIN, protocolCookie['domain']);\n    cookie.addAttribute(Attribute.PATH, protocolCookie['path']);\n    if (protocolCookie['expires']) {\n      cookie.addAttribute(Attribute.EXPIRES, protocolCookie['expires'] * 1000);\n    }\n    if (protocolCookie['httpOnly']) {\n      cookie.addAttribute(Attribute.HTTP_ONLY);\n    }\n    if (protocolCookie['secure']) {\n      cookie.addAttribute(Attribute.SECURE);\n    }\n    if (protocolCookie['sameSite']) {\n      cookie.addAttribute(Attribute.SAME_SITE, protocolCookie['sameSite']);\n    }\n    if ('sourcePort' in protocolCookie) {\n      cookie.addAttribute(Attribute.SOURCE_PORT, protocolCookie.sourcePort);\n    }\n    if ('sourceScheme' in protocolCookie) {\n      cookie.addAttribute(Attribute.SOURCE_SCHEME, protocolCookie.sourceScheme);\n    }\n    if ('partitionKey' in protocolCookie) {\n      if (protocolCookie.partitionKey) {\n        cookie.setPartitionKey(\n            protocolCookie.partitionKey.topLevelSite, protocolCookie.partitionKey.hasCrossSiteAncestor);\n      }\n    }\n    if ('partitionKeyOpaque' in protocolCookie && protocolCookie.partitionKeyOpaque) {\n      cookie.addAttribute(Attribute.PARTITION_KEY, OPAQUE_PARTITION_KEY);\n    }\n    cookie.setSize(protocolCookie['size']);\n    return cookie;\n  }\n\n  key(): string {\n    return (this.domain() || '-') + ' ' + this.name() + ' ' + (this.path() || '-') + ' ' +\n        (this.partitionKey() ?\n             (this.topLevelSite() + ' ' + (this.hasCrossSiteAncestor() ? 'cross_site' : 'same_site')) :\n             '-');\n  }\n\n  name(): string {\n    return this.#nameInternal;\n  }\n\n  value(): string {\n    return this.#valueInternal;\n  }\n\n  type(): Type|null|undefined {\n    return this.#typeInternal;\n  }\n\n  httpOnly(): boolean {\n    return this.#attributes.has(Attribute.HTTP_ONLY);\n  }\n\n  secure(): boolean {\n    return this.#attributes.has(Attribute.SECURE);\n  }\n\n  partitioned(): boolean {\n    return this.#attributes.has(Attribute.PARTITIONED) || Boolean(this.partitionKey()) || this.partitionKeyOpaque();\n  }\n\n  sameSite(): Protocol.Network.CookieSameSite {\n    // TODO(allada) This should not rely on #attributes and instead store them individually.\n    // when #attributes get added via addAttribute() they are lowercased, hence the lowercasing of samesite here\n    return this.#attributes.get(Attribute.SAME_SITE) as Protocol.Network.CookieSameSite;\n  }\n\n  partitionKey(): Protocol.Network.CookiePartitionKey {\n    return this.#partitionKey as Protocol.Network.CookiePartitionKey;\n  }\n\n  setPartitionKey(topLevelSite: string, hasCrossSiteAncestor: boolean): void {\n    this.#partitionKey = {topLevelSite, hasCrossSiteAncestor};\n    if (!this.#attributes.has(Attribute.PARTITIONED)) {\n      this.addAttribute(Attribute.PARTITIONED);\n    }\n  }\n\n  topLevelSite(): string {\n    if (!this.#partitionKey) {\n      return '';\n    }\n    return this.#partitionKey?.topLevelSite as string;\n  }\n\n  setTopLevelSite(topLevelSite: string, hasCrossSiteAncestor: boolean): void {\n    this.setPartitionKey(topLevelSite, hasCrossSiteAncestor);\n  }\n\n  hasCrossSiteAncestor(): boolean {\n    if (!this.#partitionKey) {\n      return false;\n    }\n    return this.#partitionKey?.hasCrossSiteAncestor as boolean;\n  }\n\n  setHasCrossSiteAncestor(hasCrossSiteAncestor: boolean): void {\n    if (!this.partitionKey() || !Boolean(this.topLevelSite())) {\n      return;\n    }\n    this.setPartitionKey(this.topLevelSite(), hasCrossSiteAncestor);\n  }\n\n  partitionKeyOpaque(): boolean {\n    if (!this.#partitionKey) {\n      return false;\n    }\n    return (this.topLevelSite() === OPAQUE_PARTITION_KEY);\n  }\n\n  setPartitionKeyOpaque(): void {\n    this.addAttribute(Attribute.PARTITION_KEY, OPAQUE_PARTITION_KEY);\n    this.setPartitionKey(OPAQUE_PARTITION_KEY, false);\n  }\n\n  priority(): Protocol.Network.CookiePriority {\n    return this.#priorityInternal;\n  }\n\n  session(): boolean {\n    // RFC 2965 suggests using Discard attribute to mark session cookies, but this does not seem to be widely used.\n    // Check for absence of explicitly max-age or expiry date instead.\n    return !(this.#attributes.has(Attribute.EXPIRES) || this.#attributes.has(Attribute.MAX_AGE));\n  }\n\n  path(): string {\n    return this.#attributes.get(Attribute.PATH) as string;\n  }\n\n  domain(): string {\n    return this.#attributes.get(Attribute.DOMAIN) as string;\n  }\n\n  expires(): number {\n    return this.#attributes.get(Attribute.EXPIRES) as number;\n  }\n\n  maxAge(): number {\n    return this.#attributes.get(Attribute.MAX_AGE) as number;\n  }\n\n  sourcePort(): number {\n    return this.#attributes.get(Attribute.SOURCE_PORT) as number;\n  }\n\n  sourceScheme(): Protocol.Network.CookieSourceScheme {\n    return this.#attributes.get(Attribute.SOURCE_SCHEME) as Protocol.Network.CookieSourceScheme;\n  }\n\n  size(): number {\n    return this.#sizeInternal;\n  }\n\n  /**\n   * @deprecated\n   */\n  url(): Platform.DevToolsPath.UrlString|null {\n    if (!this.domain() || !this.path()) {\n      return null;\n    }\n    let port = '';\n    const sourcePort = this.sourcePort();\n    // Do not include standard ports to ensure the back-end will change standard ports according to the scheme.\n    if (sourcePort && sourcePort !== 80 && sourcePort !== 443) {\n      port = `:${this.sourcePort()}`;\n    }\n    // We must not consider the this.sourceScheme() here, otherwise it will be impossible to set a cookie without\n    // the Secure attribute from a secure origin.\n    return (this.secure() ? 'https://' : 'http://') + this.domain() + port + this.path() as\n        Platform.DevToolsPath.UrlString;\n  }\n\n  setSize(size: number): void {\n    this.#sizeInternal = size;\n  }\n\n  expiresDate(requestDate: Date): Date|null {\n    // RFC 6265 indicates that the max-age attribute takes precedence over the expires attribute\n    if (this.maxAge()) {\n      return new Date(requestDate.getTime() + 1000 * this.maxAge());\n    }\n\n    if (this.expires()) {\n      return new Date(this.expires());\n    }\n\n    return null;\n  }\n\n  addAttribute(key: Attribute|null, value?: string|number|boolean): void {\n    if (!key) {\n      return;\n    }\n    switch (key) {\n      case Attribute.PRIORITY:\n        this.#priorityInternal = (value as Protocol.Network.CookiePriority);\n        break;\n      default:\n        this.#attributes.set(key, value);\n    }\n  }\n\n  setCookieLine(cookieLine: string): void {\n    this.#cookieLine = cookieLine;\n  }\n\n  getCookieLine(): string|null {\n    return this.#cookieLine;\n  }\n\n  matchesSecurityOrigin(securityOrigin: string): boolean {\n    const hostname = new URL(securityOrigin).hostname;\n    return Cookie.isDomainMatch(this.domain(), hostname);\n  }\n\n  static isDomainMatch(domain: string, hostname: string): boolean {\n    // This implementation mirrors\n    // https://source.chromium.org/search?q=net::cookie_util::IsDomainMatch()\n    //\n    // Can domain match in two ways; as a domain cookie (where the cookie\n    // domain begins with \".\") or as a host cookie (where it doesn't).\n\n    // Some consumers of the CookieMonster expect to set cookies on\n    // URLs like http://.strange.url.  To retrieve cookies in this instance,\n    // we allow matching as a host cookie even when the domain_ starts with\n    // a period.\n    if (hostname === domain) {\n      return true;\n    }\n\n    // Domain cookie must have an initial \".\".  To match, it must be\n    // equal to url's host with initial period removed, or a suffix of\n    // it.\n\n    // Arguably this should only apply to \"http\" or \"https\" cookies, but\n    // extension cookie tests currently use the funtionality, and if we\n    // ever decide to implement that it should be done by preventing\n    // such cookies from being set.\n    if (!domain || domain[0] !== '.') {\n      return false;\n    }\n\n    // The host with a \".\" prefixed.\n    if (domain.substr(1) === hostname) {\n      return true;\n    }\n\n    // A pure suffix of the host (ok since we know the domain already\n    // starts with a \".\")\n    return hostname.length > domain.length && hostname.endsWith(domain);\n  }\n}\n\nexport const enum Type {\n  REQUEST = 0,\n  RESPONSE = 1,\n}\n\nexport const enum Attribute {\n  NAME = 'name',\n  VALUE = 'value',\n  SIZE = 'size',\n  DOMAIN = 'domain',\n  PATH = 'path',\n  EXPIRES = 'expires',\n  MAX_AGE = 'max-age',\n  HTTP_ONLY = 'http-only',\n  SECURE = 'secure',\n  SAME_SITE = 'same-site',\n  SOURCE_SCHEME = 'source-scheme',\n  SOURCE_PORT = 'source-port',\n  PRIORITY = 'priority',\n  PARTITIONED = 'partitioned',\n  PARTITION_KEY = 'partition-key',\n  PARTITION_KEY_SITE = 'partition-key-site',\n  HAS_CROSS_SITE_ANCESTOR = 'has-cross-site-ancestor',\n}\n"],
  "mappings": "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",
  "names": ["Type", "Attribute"]
}
