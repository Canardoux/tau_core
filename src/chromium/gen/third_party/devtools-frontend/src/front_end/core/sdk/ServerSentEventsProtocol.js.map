{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/ServerSentEventsProtocol.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\n\n/**\n * Implements Server-Sent-Events protocl parsing as described by\n * https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream\n *\n * Webpages can use SSE over fetch/XHR and not go through EventSource. DevTools\n * only receives the raw binary data in this case, which means we have to decode\n * and parse the event stream ourselves here.\n *\n * Implementation mostly ported over from blink\n * third_party/blink/renderer/modules/eventsource/event_source_parser.cc.\n */\nexport class ServerSentEventsParser {\n  #onEventCallback: (eventType: string, data: string, eventId: string) => void;\n  #decoder: Base64TextDecoder;\n\n  // Parser state.\n  #isRecognizingCrLf = false;\n  #line = '';\n  #id = '';\n  #data = '';\n  #eventType = '';\n\n  constructor(callback: (eventType: string, data: string, eventId: string) => void, encodingLabel?: string) {\n    this.#onEventCallback = callback;\n    this.#decoder = new Base64TextDecoder(this.#onTextChunk.bind(this), encodingLabel);\n  }\n\n  async addBase64Chunk(raw: Protocol.binary): Promise<void> {\n    await this.#decoder.addBase64Chunk(raw);\n  }\n\n  #onTextChunk(chunk: string): void {\n    // A line consists of \"this.#line\" plus a slice of \"chunk[start:<next new cr/lf>]\".\n    let start = 0;\n    for (let i = 0; i < chunk.length; ++i) {\n      if (this.#isRecognizingCrLf && chunk[i] === '\\n') {\n        // We found the latter part of \"\\r\\n\".\n        this.#isRecognizingCrLf = false;\n        ++start;\n        continue;\n      }\n      this.#isRecognizingCrLf = false;\n      if (chunk[i] === '\\r' || chunk[i] === '\\n') {\n        this.#line += chunk.substring(start, i);\n        this.#parseLine();\n        this.#line = '';\n        start = i + 1;\n        this.#isRecognizingCrLf = chunk[i] === '\\r';\n      }\n    }\n    this.#line += chunk.substring(start);\n  }\n\n  #parseLine(): void {\n    if (this.#line.length === 0) {\n      // We dispatch an event when seeing an empty line.\n      if (this.#data.length > 0) {\n        const data = this.#data.slice(0, -1);  // Remove the last newline.\n        this.#onEventCallback(this.#eventType || 'message', data, this.#id);\n        this.#data = '';\n      }\n      this.#eventType = '';\n      return;\n    }\n\n    let fieldNameEnd = this.#line.indexOf(':');\n    let fieldValueStart;\n    if (fieldNameEnd < 0) {\n      fieldNameEnd = this.#line.length;\n      fieldValueStart = fieldNameEnd;\n    } else {\n      fieldValueStart = fieldNameEnd + 1;\n      if (fieldValueStart < this.#line.length && this.#line[fieldValueStart] === ' ') {\n        // Skip a single space preceeding the value.\n        ++fieldValueStart;\n      }\n    }\n    const fieldName = this.#line.substring(0, fieldNameEnd);\n    if (fieldName === 'event') {\n      this.#eventType = this.#line.substring(fieldValueStart);\n      return;\n    }\n    if (fieldName === 'data') {\n      this.#data += this.#line.substring(fieldValueStart);\n      this.#data += '\\n';\n    }\n    if (fieldName === 'id') {\n      // We should do a check here whether the id field contains \"\\0\" and ignore it.\n      this.#id = this.#line.substring(fieldValueStart);\n    }\n    // Ignore all other fields. Also ignore \"retry\", we won't forward that to the backend.\n  }\n}\n\n/**\n * Small helper class that can decode a stream of base64 encoded bytes. Specify the\n * text encoding for the raw bytes via constructor. Default is utf-8.\n */\nclass Base64TextDecoder {\n  #decoder: TextDecoderStream;\n  #writer: WritableStreamDefaultWriter;\n\n  constructor(onTextChunk: (chunk: string) => void, encodingLabel?: string) {\n    this.#decoder = new TextDecoderStream(encodingLabel);\n    this.#writer = this.#decoder.writable.getWriter();\n    void this.#decoder.readable.pipeTo(new WritableStream({write: onTextChunk}));\n  }\n\n  async addBase64Chunk(chunk: Protocol.binary): Promise<void> {\n    const binString = window.atob(chunk);\n    const bytes = Uint8Array.from(binString, m => m.codePointAt(0) as number);\n\n    await this.#writer.ready;\n    await this.#writer.write(bytes);\n  }\n}\n"],
  "mappings": ";AAiBO,aAAM,uBAAuB;AAAA,EAClC;AAAA,EACA;AAAA;AAAA,EAGA,qBAAqB;AAAA,EACrB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,aAAa;AAAA,EAEb,YAAY,UAAsE,eAAwB;AACxG,SAAK,mBAAmB;AACxB,SAAK,WAAW,IAAI,kBAAkB,KAAK,aAAa,KAAK,IAAI,GAAG,aAAa;AAAA,EACnF;AAAA,EAEA,MAAM,eAAe,KAAqC;AACxD,UAAM,KAAK,SAAS,eAAe,GAAG;AAAA,EACxC;AAAA,EAEA,aAAa,OAAqB;AAEhC,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACrC,UAAI,KAAK,sBAAsB,MAAM,CAAC,MAAM,MAAM;AAEhD,aAAK,qBAAqB;AAC1B,UAAE;AACF;AAAA,MACF;AACA,WAAK,qBAAqB;AAC1B,UAAI,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,MAAM,MAAM;AAC1C,aAAK,SAAS,MAAM,UAAU,OAAO,CAAC;AACtC,aAAK,WAAW;AAChB,aAAK,QAAQ;AACb,gBAAQ,IAAI;AACZ,aAAK,qBAAqB,MAAM,CAAC,MAAM;AAAA,MACzC;AAAA,IACF;AACA,SAAK,SAAS,MAAM,UAAU,KAAK;AAAA,EACrC;AAAA,EAEA,aAAmB;AACjB,QAAI,KAAK,MAAM,WAAW,GAAG;AAE3B,UAAI,KAAK,MAAM,SAAS,GAAG;AACzB,cAAM,OAAO,KAAK,MAAM,MAAM,GAAG,EAAE;AACnC,aAAK,iBAAiB,KAAK,cAAc,WAAW,MAAM,KAAK,GAAG;AAClE,aAAK,QAAQ;AAAA,MACf;AACA,WAAK,aAAa;AAClB;AAAA,IACF;AAEA,QAAI,eAAe,KAAK,MAAM,QAAQ,GAAG;AACzC,QAAI;AACJ,QAAI,eAAe,GAAG;AACpB,qBAAe,KAAK,MAAM;AAC1B,wBAAkB;AAAA,IACpB,OAAO;AACL,wBAAkB,eAAe;AACjC,UAAI,kBAAkB,KAAK,MAAM,UAAU,KAAK,MAAM,eAAe,MAAM,KAAK;AAE9E,UAAE;AAAA,MACJ;AAAA,IACF;AACA,UAAM,YAAY,KAAK,MAAM,UAAU,GAAG,YAAY;AACtD,QAAI,cAAc,SAAS;AACzB,WAAK,aAAa,KAAK,MAAM,UAAU,eAAe;AACtD;AAAA,IACF;AACA,QAAI,cAAc,QAAQ;AACxB,WAAK,SAAS,KAAK,MAAM,UAAU,eAAe;AAClD,WAAK,SAAS;AAAA,IAChB;AACA,QAAI,cAAc,MAAM;AAEtB,WAAK,MAAM,KAAK,MAAM,UAAU,eAAe;AAAA,IACjD;AAAA,EAEF;AACF;AAMA,MAAM,kBAAkB;AAAA,EACtB;AAAA,EACA;AAAA,EAEA,YAAY,aAAsC,eAAwB;AACxE,SAAK,WAAW,IAAI,kBAAkB,aAAa;AACnD,SAAK,UAAU,KAAK,SAAS,SAAS,UAAU;AAChD,SAAK,KAAK,SAAS,SAAS,OAAO,IAAI,eAAe,EAAC,OAAO,YAAW,CAAC,CAAC;AAAA,EAC7E;AAAA,EAEA,MAAM,eAAe,OAAuC;AAC1D,UAAM,YAAY,OAAO,KAAK,KAAK;AACnC,UAAM,QAAQ,WAAW,KAAK,WAAW,OAAK,EAAE,YAAY,CAAC,CAAW;AAExE,UAAM,KAAK,QAAQ;AACnB,UAAM,KAAK,QAAQ,MAAM,KAAK;AAAA,EAChC;AACF;",
  "names": []
}
