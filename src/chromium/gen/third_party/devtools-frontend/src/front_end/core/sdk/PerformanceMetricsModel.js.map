{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/PerformanceMetricsModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport {Capability, type Target} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class PerformanceMetricsModel extends SDKModel<void> {\n  readonly #agent: ProtocolProxyApi.PerformanceApi;\n  readonly #metricModes: Map<string, MetricMode>;\n  readonly #metricData: Map<string, {\n    lastValue: (number | undefined),\n    lastTimestamp: (number|undefined),\n  }>;\n\n  constructor(target: Target) {\n    super(target);\n    this.#agent = target.performanceAgent();\n\n    this.#metricModes = new Map([\n      ['TaskDuration', MetricMode.CUMULATIVE_TIME],\n      ['ScriptDuration', MetricMode.CUMULATIVE_TIME],\n      ['LayoutDuration', MetricMode.CUMULATIVE_TIME],\n      ['RecalcStyleDuration', MetricMode.CUMULATIVE_TIME],\n      ['LayoutCount', MetricMode.CUMULATIVE_COUNT],\n      ['RecalcStyleCount', MetricMode.CUMULATIVE_COUNT],\n    ]);\n\n    this.#metricData = new Map();\n  }\n\n  enable(): Promise<Object> {\n    return this.#agent.invoke_enable({});\n  }\n\n  disable(): Promise<Object> {\n    return this.#agent.invoke_disable();\n  }\n\n  async requestMetrics(): Promise<{\n    metrics: Map<string, number>,\n    timestamp: number,\n  }> {\n    const rawMetrics = await this.#agent.invoke_getMetrics() || [];\n    const metrics = new Map<string, number>();\n    const timestamp = performance.now();\n    for (const metric of rawMetrics.metrics) {\n      let data = this.#metricData.get(metric.name);\n      if (!data) {\n        data = {lastValue: undefined, lastTimestamp: undefined};\n        this.#metricData.set(metric.name, data);\n      }\n      let value;\n      switch (this.#metricModes.get(metric.name)) {\n        case MetricMode.CUMULATIVE_TIME:\n          value = (data.lastTimestamp && data.lastValue) ?\n              Platform.NumberUtilities.clamp(\n                  (metric.value - data.lastValue) * 1000 / (timestamp - data.lastTimestamp), 0, 1) :\n              0;\n          data.lastValue = metric.value;\n          data.lastTimestamp = timestamp;\n          break;\n        case MetricMode.CUMULATIVE_COUNT:\n          value = (data.lastTimestamp && data.lastValue) ?\n              Math.max(0, (metric.value - data.lastValue) * 1000 / (timestamp - data.lastTimestamp)) :\n              0;\n          data.lastValue = metric.value;\n          data.lastTimestamp = timestamp;\n          break;\n        default:\n          value = metric.value;\n          break;\n      }\n      metrics.set(metric.name, value);\n    }\n    return {metrics, timestamp};\n  }\n}\n\nconst enum MetricMode {\n  CUMULATIVE_TIME = 'CumulativeTime',\n  CUMULATIVE_COUNT = 'CumulativeCount',\n}\n\nSDKModel.register(PerformanceMetricsModel, {capabilities: Capability.DOM, autostart: false});\n"],
  "mappings": ";AAIA,YAAY,cAAc;AAG1B,SAAQ,kBAA8B;AACtC,SAAQ,gBAAe;AAEhB,aAAM,gCAAgC,SAAe;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EAKT,YAAY,QAAgB;AAC1B,UAAM,MAAM;AACZ,SAAK,SAAS,OAAO,iBAAiB;AAEtC,SAAK,eAAe,oBAAI,IAAI;AAAA,MAC1B,CAAC,gBAAgB,sCAA0B;AAAA,MAC3C,CAAC,kBAAkB,sCAA0B;AAAA,MAC7C,CAAC,kBAAkB,sCAA0B;AAAA,MAC7C,CAAC,uBAAuB,sCAA0B;AAAA,MAClD,CAAC,eAAe,wCAA2B;AAAA,MAC3C,CAAC,oBAAoB,wCAA2B;AAAA,IAClD,CAAC;AAED,SAAK,cAAc,oBAAI,IAAI;AAAA,EAC7B;AAAA,EAEA,SAA0B;AACxB,WAAO,KAAK,OAAO,cAAc,CAAC,CAAC;AAAA,EACrC;AAAA,EAEA,UAA2B;AACzB,WAAO,KAAK,OAAO,eAAe;AAAA,EACpC;AAAA,EAEA,MAAM,iBAGH;AACD,UAAM,aAAa,MAAM,KAAK,OAAO,kBAAkB,KAAK,CAAC;AAC7D,UAAM,UAAU,oBAAI,IAAoB;AACxC,UAAM,YAAY,YAAY,IAAI;AAClC,eAAW,UAAU,WAAW,SAAS;AACvC,UAAI,OAAO,KAAK,YAAY,IAAI,OAAO,IAAI;AAC3C,UAAI,CAAC,MAAM;AACT,eAAO,EAAC,WAAW,QAAW,eAAe,OAAS;AACtD,aAAK,YAAY,IAAI,OAAO,MAAM,IAAI;AAAA,MACxC;AACA,UAAI;AACJ,cAAQ,KAAK,aAAa,IAAI,OAAO,IAAI,GAAG;AAAA,QAC1C,KAAK;AACH,kBAAS,KAAK,iBAAiB,KAAK,YAChC,SAAS,gBAAgB;AAAA,aACpB,OAAO,QAAQ,KAAK,aAAa,OAAQ,YAAY,KAAK;AAAA,YAAgB;AAAA,YAAG;AAAA,UAAC,IACnF;AACJ,eAAK,YAAY,OAAO;AACxB,eAAK,gBAAgB;AACrB;AAAA,QACF,KAAK;AACH,kBAAS,KAAK,iBAAiB,KAAK,YAChC,KAAK,IAAI,IAAI,OAAO,QAAQ,KAAK,aAAa,OAAQ,YAAY,KAAK,cAAc,IACrF;AACJ,eAAK,YAAY,OAAO;AACxB,eAAK,gBAAgB;AACrB;AAAA,QACF;AACE,kBAAQ,OAAO;AACf;AAAA,MACJ;AACA,cAAQ,IAAI,OAAO,MAAM,KAAK;AAAA,IAChC;AACA,WAAO,EAAC,SAAS,UAAS;AAAA,EAC5B;AACF;AAEA,IAAW,aAAX,kBAAWA,gBAAX;AACE,EAAAA,YAAA,qBAAkB;AAClB,EAAAA,YAAA,sBAAmB;AAFV,SAAAA;AAAA,GAAA;AAKX,SAAS,SAAS,yBAAyB,EAAC,cAAc,WAAW,KAAK,WAAW,MAAK,CAAC;",
  "names": ["MetricMode"]
}
