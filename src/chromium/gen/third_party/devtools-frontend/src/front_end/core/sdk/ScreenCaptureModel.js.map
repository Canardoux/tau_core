{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/ScreenCaptureModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {OverlayModel} from './OverlayModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\n\nexport const enum ScreenshotMode {\n  FROM_VIEWPORT = 'fromViewport',\n  FROM_CLIP = 'fromClip',\n  FULLPAGE = 'fullpage',\n}\nexport class ScreenCaptureModel extends SDKModel<void> implements ProtocolProxyApi.PageDispatcher {\n  readonly #agent: ProtocolProxyApi.PageApi;\n  #onScreencastFrame: ((arg0: Protocol.binary, arg1: Protocol.Page.ScreencastFrameMetadata) => void)|null;\n  #onScreencastVisibilityChanged: ((arg0: boolean) => void)|null;\n  constructor(target: Target) {\n    super(target);\n    this.#agent = target.pageAgent();\n    this.#onScreencastFrame = null;\n    this.#onScreencastVisibilityChanged = null;\n    target.registerPageDispatcher(this);\n  }\n\n  startScreencast(\n      format: Protocol.Page.StartScreencastRequestFormat, quality: number, maxWidth: number|undefined,\n      maxHeight: number|undefined, everyNthFrame: number|undefined,\n      onFrame: (arg0: Protocol.binary, arg1: Protocol.Page.ScreencastFrameMetadata) => void,\n      onVisibilityChanged: (arg0: boolean) => void): void {\n    this.#onScreencastFrame = onFrame;\n    this.#onScreencastVisibilityChanged = onVisibilityChanged;\n    void this.#agent.invoke_startScreencast({format, quality, maxWidth, maxHeight, everyNthFrame});\n  }\n\n  stopScreencast(): void {\n    this.#onScreencastFrame = null;\n    this.#onScreencastVisibilityChanged = null;\n    void this.#agent.invoke_stopScreencast();\n  }\n\n  async captureScreenshot(\n      format: Protocol.Page.CaptureScreenshotRequestFormat, quality: number, mode: ScreenshotMode,\n      clip?: Protocol.Page.Viewport): Promise<string|null> {\n    const properties: Protocol.Page.CaptureScreenshotRequest = {\n      format,\n      quality,\n      fromSurface: true,\n    };\n    switch (mode) {\n      case ScreenshotMode.FROM_CLIP:\n        properties.captureBeyondViewport = true;\n        properties.clip = clip;\n        break;\n      case ScreenshotMode.FULLPAGE:\n        properties.captureBeyondViewport = true;\n        break;\n      case ScreenshotMode.FROM_VIEWPORT:\n        properties.captureBeyondViewport = false;\n        break;\n      default:\n        throw new Error('Unexpected or unspecified screnshotMode');\n    }\n\n    await OverlayModel.muteHighlight();\n    const result = await this.#agent.invoke_captureScreenshot(properties);\n    await OverlayModel.unmuteHighlight();\n    return result.data;\n  }\n\n  async fetchLayoutMetrics(): Promise<{\n    viewportX: number,\n    viewportY: number,\n    viewportScale: number,\n    contentWidth: number,\n    contentHeight: number,\n  }|null> {\n    const response = await this.#agent.invoke_getLayoutMetrics();\n    if (response.getError()) {\n      return null;\n    }\n    return {\n      viewportX: response.cssVisualViewport.pageX,\n      viewportY: response.cssVisualViewport.pageY,\n      viewportScale: response.cssVisualViewport.scale,\n      contentWidth: response.cssContentSize.width,\n      contentHeight: response.cssContentSize.height,\n    };\n  }\n\n  screencastFrame({data, metadata, sessionId}: Protocol.Page.ScreencastFrameEvent): void {\n    void this.#agent.invoke_screencastFrameAck({sessionId});\n    if (this.#onScreencastFrame) {\n      this.#onScreencastFrame.call(null, data, metadata);\n    }\n  }\n\n  screencastVisibilityChanged({visible}: Protocol.Page.ScreencastVisibilityChangedEvent): void {\n    if (this.#onScreencastVisibilityChanged) {\n      this.#onScreencastVisibilityChanged.call(null, visible);\n    }\n  }\n\n  backForwardCacheNotUsed(_params: Protocol.Page.BackForwardCacheNotUsedEvent): void {\n  }\n\n  domContentEventFired(_params: Protocol.Page.DomContentEventFiredEvent): void {\n  }\n\n  loadEventFired(_params: Protocol.Page.LoadEventFiredEvent): void {\n  }\n\n  lifecycleEvent(_params: Protocol.Page.LifecycleEventEvent): void {\n  }\n\n  navigatedWithinDocument(_params: Protocol.Page.NavigatedWithinDocumentEvent): void {\n  }\n\n  frameAttached(_params: Protocol.Page.FrameAttachedEvent): void {\n  }\n\n  frameNavigated(_params: Protocol.Page.FrameNavigatedEvent): void {\n  }\n\n  documentOpened(_params: Protocol.Page.DocumentOpenedEvent): void {\n  }\n\n  frameDetached(_params: Protocol.Page.FrameDetachedEvent): void {\n  }\n\n  frameStartedLoading(_params: Protocol.Page.FrameStartedLoadingEvent): void {\n  }\n\n  frameStoppedLoading(_params: Protocol.Page.FrameStoppedLoadingEvent): void {\n  }\n\n  frameRequestedNavigation(_params: Protocol.Page.FrameRequestedNavigationEvent): void {\n  }\n\n  frameSubtreeWillBeDetached(_params: Protocol.Page.FrameSubtreeWillBeDetachedEvent): void {\n  }\n\n  frameScheduledNavigation(_params: Protocol.Page.FrameScheduledNavigationEvent): void {\n  }\n\n  frameClearedScheduledNavigation(_params: Protocol.Page.FrameClearedScheduledNavigationEvent): void {\n  }\n\n  frameResized(): void {\n  }\n\n  javascriptDialogOpening(_params: Protocol.Page.JavascriptDialogOpeningEvent): void {\n  }\n\n  javascriptDialogClosed(_params: Protocol.Page.JavascriptDialogClosedEvent): void {\n  }\n\n  interstitialShown(): void {\n  }\n\n  interstitialHidden(): void {\n  }\n\n  windowOpen(_params: Protocol.Page.WindowOpenEvent): void {\n  }\n\n  fileChooserOpened(_params: Protocol.Page.FileChooserOpenedEvent): void {\n  }\n\n  compilationCacheProduced(_params: Protocol.Page.CompilationCacheProducedEvent): void {\n  }\n\n  downloadWillBegin(_params: Protocol.Page.DownloadWillBeginEvent): void {\n  }\n\n  downloadProgress(): void {\n  }\n\n  prefetchStatusUpdated(_params: Protocol.Preload.PrefetchStatusUpdatedEvent): void {\n  }\n\n  prerenderStatusUpdated(_params: Protocol.Preload.PrerenderStatusUpdatedEvent): void {\n  }\n}\n\nSDKModel.register(ScreenCaptureModel, {capabilities: Capability.SCREEN_CAPTURE, autostart: false});\n"],
  "mappings": "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",
  "names": ["ScreenshotMode"]
}
