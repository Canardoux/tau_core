{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/ConsoleModel.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {FrontendMessageType} from './ConsoleModelTypes.js';\nimport {CPUProfilerModel, type EventData, Events as CPUProfilerModelEvents} from './CPUProfilerModel.js';\nimport {\n  BreakpointType,\n  COND_BREAKPOINT_SOURCE_URL,\n  Events as DebuggerModelEvents,\n  type Location,\n  LOGPOINT_SOURCE_URL,\n} from './DebuggerModel.js';\nimport {LogModel} from './LogModel.js';\nimport {RemoteObject} from './RemoteObject.js';\nimport {\n  Events as ResourceTreeModelEvents,\n  type PrimaryPageChangeType,\n  type ResourceTreeFrame,\n  ResourceTreeModel,\n} from './ResourceTreeModel.js';\nimport {\n  type ConsoleAPICall,\n  Events as RuntimeModelEvents,\n  type ExceptionWithTimestamp,\n  type ExecutionContext,\n  type QueryObjectRequestedEvent,\n  RuntimeModel,\n} from './RuntimeModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target, Type} from './Target.js';\nimport {TargetManager} from './TargetManager.js';\n\nexport {FrontendMessageType} from './ConsoleModelTypes.js';\n\nconst UIStrings = {\n  /**\n   *@description Text shown when the main frame (page) of the website was navigated to a different URL.\n   *@example {https://example.com} PH1\n   */\n  navigatedToS: 'Navigated to {PH1}',\n  /**\n   *@description Text shown when the main frame (page) of the website was navigated to a different URL\n   * and the page was restored from back/forward cache (https://web.dev/bfcache/).\n   *@example {https://example.com} PH1\n   */\n  bfcacheNavigation: 'Navigation to {PH1} was restored from back/forward cache (see https://web.dev/bfcache/)',\n  /**\n   *@description Text shown in the console when a performance profile (with the given name) was started.\n   *@example {title} PH1\n   */\n  profileSStarted: 'Profile \\'\\'{PH1}\\'\\' started.',\n  /**\n   *@description Text shown in the console when a performance profile (with the given name) was stopped.\n   *@example {name} PH1\n   */\n  profileSFinished: 'Profile \\'\\'{PH1}\\'\\' finished.',\n  /**\n   *@description Error message shown in the console after the user tries to save a JavaScript value to a temporary variable.\n   */\n  failedToSaveToTempVariable: 'Failed to save to temp variable.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ConsoleModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ConsoleModel extends SDKModel<EventTypes> {\n  #messagesInternal: ConsoleMessage[];\n  readonly #messagesByTimestamp: Platform.MapUtilities.Multimap<number, ConsoleMessage>;\n  readonly #messageByExceptionId: Map<RuntimeModel, Map<number, ConsoleMessage>>;\n  #warningsInternal: number;\n  #errorsInternal: number;\n  #violationsInternal: number;\n  #pageLoadSequenceNumber: number;\n  readonly #targetListeners: WeakMap<Target, Common.EventTarget.EventDescriptor[]>;\n\n  constructor(target: Target) {\n    super(target);\n\n    this.#messagesInternal = [];\n    this.#messagesByTimestamp = new Platform.MapUtilities.Multimap();\n    this.#messageByExceptionId = new Map();\n    this.#warningsInternal = 0;\n    this.#errorsInternal = 0;\n    this.#violationsInternal = 0;\n    this.#pageLoadSequenceNumber = 0;\n    this.#targetListeners = new WeakMap();\n\n    const resourceTreeModel = target.model(ResourceTreeModel);\n    if (!resourceTreeModel || resourceTreeModel.cachedResourcesLoaded()) {\n      this.initTarget(target);\n      return;\n    }\n\n    const eventListener = resourceTreeModel.addEventListener(ResourceTreeModelEvents.CachedResourcesLoaded, () => {\n      Common.EventTarget.removeEventListeners([eventListener]);\n      this.initTarget(target);\n    });\n  }\n\n  private initTarget(target: Target): void {\n    const eventListeners = [];\n\n    const cpuProfilerModel = target.model(CPUProfilerModel);\n    if (cpuProfilerModel) {\n      eventListeners.push(cpuProfilerModel.addEventListener(\n          CPUProfilerModelEvents.CONSOLE_PROFILE_STARTED, this.consoleProfileStarted.bind(this, cpuProfilerModel)));\n      eventListeners.push(cpuProfilerModel.addEventListener(\n          CPUProfilerModelEvents.CONSOLE_PROFILE_FINISHED, this.consoleProfileFinished.bind(this, cpuProfilerModel)));\n    }\n\n    const resourceTreeModel = target.model(ResourceTreeModel);\n    if (resourceTreeModel && target.parentTarget()?.type() !== Type.FRAME) {\n      eventListeners.push(resourceTreeModel.addEventListener(\n          ResourceTreeModelEvents.PrimaryPageChanged, this.primaryPageChanged, this));\n    }\n\n    const runtimeModel = target.model(RuntimeModel);\n    if (runtimeModel) {\n      eventListeners.push(runtimeModel.addEventListener(\n          RuntimeModelEvents.ExceptionThrown, this.exceptionThrown.bind(this, runtimeModel)));\n      eventListeners.push(runtimeModel.addEventListener(\n          RuntimeModelEvents.ExceptionRevoked, this.exceptionRevoked.bind(this, runtimeModel)));\n      eventListeners.push(runtimeModel.addEventListener(\n          RuntimeModelEvents.ConsoleAPICalled, this.consoleAPICalled.bind(this, runtimeModel)));\n      if (target.parentTarget()?.type() !== Type.FRAME) {\n        eventListeners.push(runtimeModel.debuggerModel().addEventListener(\n            DebuggerModelEvents.GlobalObjectCleared, this.clearIfNecessary, this));\n      }\n      eventListeners.push(runtimeModel.addEventListener(\n          RuntimeModelEvents.QueryObjectRequested, this.queryObjectRequested.bind(this, runtimeModel)));\n    }\n\n    this.#targetListeners.set(target, eventListeners);\n  }\n\n  targetRemoved(target: Target): void {\n    const runtimeModel = target.model(RuntimeModel);\n    if (runtimeModel) {\n      this.#messageByExceptionId.delete(runtimeModel);\n    }\n    Common.EventTarget.removeEventListeners(this.#targetListeners.get(target) || []);\n  }\n\n  async evaluateCommandInConsole(\n      executionContext: ExecutionContext, originatingMessage: ConsoleMessage, expression: string,\n      useCommandLineAPI: boolean): Promise<void> {\n    const result = await executionContext.evaluate(\n        {\n          expression,\n          objectGroup: 'console',\n          includeCommandLineAPI: useCommandLineAPI,\n          silent: false,\n          returnByValue: false,\n          generatePreview: true,\n          replMode: true,\n          allowUnsafeEvalBlockedByCSP: false,\n        },\n        Common.Settings.Settings.instance().moduleSetting('console-user-activation-eval').get(),\n        /* awaitPromise */ false);\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.ConsoleEvaluated);\n    if ('error' in result) {\n      return;\n    }\n    await Common.Console.Console.instance().showPromise();\n    this.dispatchEventToListeners(\n        Events.CommandEvaluated,\n        {result: result.object, commandMessage: originatingMessage, exceptionDetails: result.exceptionDetails});\n  }\n\n  addCommandMessage(executionContext: ExecutionContext, text: string): ConsoleMessage {\n    const commandMessage = new ConsoleMessage(\n        executionContext.runtimeModel, Protocol.Log.LogEntrySource.Javascript, null, text,\n        {type: FrontendMessageType.Command});\n    commandMessage.setExecutionContextId(executionContext.id);\n    this.addMessage(commandMessage);\n    return commandMessage;\n  }\n\n  addMessage(msg: ConsoleMessage): void {\n    msg.setPageLoadSequenceNumber(this.#pageLoadSequenceNumber);\n    if (msg.source === Common.Console.FrontendMessageSource.ConsoleAPI &&\n        msg.type === Protocol.Runtime.ConsoleAPICalledEventType.Clear) {\n      this.clearIfNecessary();\n    }\n\n    this.#messagesInternal.push(msg);\n    this.#messagesByTimestamp.set(msg.timestamp, msg);\n    const runtimeModel = msg.runtimeModel();\n    const exceptionId = msg.getExceptionId();\n    if (exceptionId && runtimeModel) {\n      let modelMap = this.#messageByExceptionId.get(runtimeModel);\n      if (!modelMap) {\n        modelMap = new Map();\n        this.#messageByExceptionId.set(runtimeModel, modelMap);\n      }\n      modelMap.set(exceptionId, msg);\n    }\n    this.incrementErrorWarningCount(msg);\n    this.dispatchEventToListeners(Events.MessageAdded, msg);\n  }\n\n  private exceptionThrown(\n      runtimeModel: RuntimeModel, event: Common.EventTarget.EventTargetEvent<ExceptionWithTimestamp>): void {\n    const exceptionWithTimestamp = event.data;\n    const affectedResources = extractExceptionMetaData(exceptionWithTimestamp.details.exceptionMetaData);\n    const consoleMessage = ConsoleMessage.fromException(\n        runtimeModel, exceptionWithTimestamp.details, undefined, exceptionWithTimestamp.timestamp, undefined,\n        affectedResources);\n    consoleMessage.setExceptionId(exceptionWithTimestamp.details.exceptionId);\n    this.addMessage(consoleMessage);\n  }\n\n  private exceptionRevoked(runtimeModel: RuntimeModel, event: Common.EventTarget.EventTargetEvent<number>): void {\n    const exceptionId = event.data;\n    const modelMap = this.#messageByExceptionId.get(runtimeModel);\n    const exceptionMessage = modelMap ? modelMap.get(exceptionId) : null;\n    if (!exceptionMessage) {\n      return;\n    }\n    this.#errorsInternal--;\n    exceptionMessage.level = Protocol.Log.LogEntryLevel.Verbose;\n    this.dispatchEventToListeners(Events.MessageUpdated, exceptionMessage);\n  }\n\n  private consoleAPICalled(runtimeModel: RuntimeModel, event: Common.EventTarget.EventTargetEvent<ConsoleAPICall>):\n      void {\n    const call = event.data;\n    let level: Protocol.Log.LogEntryLevel = Protocol.Log.LogEntryLevel.Info;\n    if (call.type === Protocol.Runtime.ConsoleAPICalledEventType.Debug) {\n      level = Protocol.Log.LogEntryLevel.Verbose;\n    } else if (\n        call.type === Protocol.Runtime.ConsoleAPICalledEventType.Error ||\n        call.type === Protocol.Runtime.ConsoleAPICalledEventType.Assert) {\n      level = Protocol.Log.LogEntryLevel.Error;\n    } else if (call.type === Protocol.Runtime.ConsoleAPICalledEventType.Warning) {\n      level = Protocol.Log.LogEntryLevel.Warning;\n    } else if (\n        call.type === Protocol.Runtime.ConsoleAPICalledEventType.Info ||\n        call.type === Protocol.Runtime.ConsoleAPICalledEventType.Log) {\n      level = Protocol.Log.LogEntryLevel.Info;\n    }\n    let message = '';\n    if (call.args.length && call.args[0].unserializableValue) {\n      message = call.args[0].unserializableValue;\n    } else if (\n        call.args.length &&\n        ((typeof call.args[0].value !== 'object' && typeof call.args[0].value !== 'undefined') ||\n         call.args[0].value === null)) {\n      message = String(call.args[0].value);\n    } else if (call.args.length && call.args[0].description) {\n      message = call.args[0].description;\n    }\n    const callFrame = call.stackTrace && call.stackTrace.callFrames.length ? call.stackTrace.callFrames[0] : null;\n    const details = {\n      type: call.type,\n      url: callFrame?.url as Platform.DevToolsPath.UrlString | undefined,\n      line: callFrame?.lineNumber,\n      column: callFrame?.columnNumber,\n      parameters: call.args,\n      stackTrace: call.stackTrace,\n      timestamp: call.timestamp,\n      executionContextId: call.executionContextId,\n      context: call.context,\n    };\n    const consoleMessage = new ConsoleMessage(\n        runtimeModel, Common.Console.FrontendMessageSource.ConsoleAPI, level, (message as string), details);\n    for (const msg of this.#messagesByTimestamp.get(consoleMessage.timestamp).values()) {\n      if (consoleMessage.isEqual(msg)) {\n        return;\n      }\n    }\n    this.addMessage(consoleMessage);\n  }\n\n  private queryObjectRequested(\n      runtimeModel: RuntimeModel, event: Common.EventTarget.EventTargetEvent<QueryObjectRequestedEvent>): void {\n    const {objects, executionContextId} = event.data;\n    const details = {\n      type: FrontendMessageType.QueryObjectResult,\n      parameters: [objects],\n      executionContextId,\n    };\n    const consoleMessage = new ConsoleMessage(\n        runtimeModel, Common.Console.FrontendMessageSource.ConsoleAPI, Protocol.Log.LogEntryLevel.Info, '', details);\n    this.addMessage(consoleMessage);\n  }\n\n  private clearIfNecessary(): void {\n    if (!Common.Settings.Settings.instance().moduleSetting('preserve-console-log').get()) {\n      this.clear();\n    }\n    ++this.#pageLoadSequenceNumber;\n  }\n\n  private primaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<{frame: ResourceTreeFrame, type: PrimaryPageChangeType}>): void {\n    if (Common.Settings.Settings.instance().moduleSetting('preserve-console-log').get()) {\n      const {frame} = event.data;\n      if (frame.backForwardCacheDetails.restoredFromCache) {\n        Common.Console.Console.instance().log(i18nString(UIStrings.bfcacheNavigation, {PH1: frame.url}));\n      } else {\n        Common.Console.Console.instance().log(i18nString(UIStrings.navigatedToS, {PH1: frame.url}));\n      }\n    }\n  }\n\n  private consoleProfileStarted(\n      cpuProfilerModel: CPUProfilerModel, event: Common.EventTarget.EventTargetEvent<EventData>): void {\n    const {data} = event;\n    this.addConsoleProfileMessage(\n        cpuProfilerModel, Protocol.Runtime.ConsoleAPICalledEventType.Profile, data.scriptLocation,\n        i18nString(UIStrings.profileSStarted, {PH1: data.title}));\n  }\n\n  private consoleProfileFinished(\n      cpuProfilerModel: CPUProfilerModel, event: Common.EventTarget.EventTargetEvent<EventData>): void {\n    const {data} = event;\n    this.addConsoleProfileMessage(\n        cpuProfilerModel, Protocol.Runtime.ConsoleAPICalledEventType.ProfileEnd, data.scriptLocation,\n        i18nString(UIStrings.profileSFinished, {PH1: data.title}));\n  }\n\n  private addConsoleProfileMessage(\n      cpuProfilerModel: CPUProfilerModel, type: MessageType, scriptLocation: Location, messageText: string): void {\n    const script = scriptLocation.script();\n    const callFrames = [{\n      functionName: '',\n      scriptId: scriptLocation.scriptId,\n      url: script ? script.contentURL() : '',\n      lineNumber: scriptLocation.lineNumber,\n      columnNumber: scriptLocation.columnNumber || 0,\n    }];\n    this.addMessage(new ConsoleMessage(\n        cpuProfilerModel.runtimeModel(), Common.Console.FrontendMessageSource.ConsoleAPI,\n        Protocol.Log.LogEntryLevel.Info, messageText, {type, stackTrace: {callFrames}}));\n  }\n\n  private incrementErrorWarningCount(msg: ConsoleMessage): void {\n    if (msg.source === Protocol.Log.LogEntrySource.Violation) {\n      this.#violationsInternal++;\n      return;\n    }\n    switch (msg.level) {\n      case Protocol.Log.LogEntryLevel.Warning:\n        this.#warningsInternal++;\n        break;\n      case Protocol.Log.LogEntryLevel.Error:\n        this.#errorsInternal++;\n        break;\n    }\n  }\n\n  messages(): ConsoleMessage[] {\n    return this.#messagesInternal;\n  }\n\n  // messages[] are not ordered by timestamp.\n  static allMessagesUnordered(): ConsoleMessage[] {\n    const messages = [];\n    for (const target of TargetManager.instance().targets()) {\n      const targetMessages = target.model(ConsoleModel)?.messages() || [];\n      messages.push(...targetMessages);\n    }\n    return messages;\n  }\n\n  static requestClearMessages(): void {\n    for (const logModel of TargetManager.instance().models(LogModel)) {\n      logModel.requestClear();\n    }\n    for (const runtimeModel of TargetManager.instance().models(RuntimeModel)) {\n      runtimeModel.discardConsoleEntries();\n    }\n    for (const target of TargetManager.instance().targets()) {\n      target.model(ConsoleModel)?.clear();\n    }\n  }\n\n  private clear(): void {\n    this.#messagesInternal = [];\n    this.#messagesByTimestamp.clear();\n    this.#messageByExceptionId.clear();\n    this.#errorsInternal = 0;\n    this.#warningsInternal = 0;\n    this.#violationsInternal = 0;\n    this.dispatchEventToListeners(Events.ConsoleCleared);\n  }\n\n  errors(): number {\n    return this.#errorsInternal;\n  }\n\n  static allErrors(): number {\n    let errors = 0;\n    for (const target of TargetManager.instance().targets()) {\n      errors += target.model(ConsoleModel)?.errors() || 0;\n    }\n    return errors;\n  }\n\n  warnings(): number {\n    return this.#warningsInternal;\n  }\n\n  static allWarnings(): number {\n    let warnings = 0;\n    for (const target of TargetManager.instance().targets()) {\n      warnings += target.model(ConsoleModel)?.warnings() || 0;\n    }\n    return warnings;\n  }\n\n  violations(): number {\n    return this.#violationsInternal;\n  }\n\n  static allViolations(): number {\n    let violations = 0;\n    for (const target of TargetManager.instance().targets()) {\n      violations += target.model(ConsoleModel)?.violations() || 0;\n    }\n    return violations;\n  }\n\n  async saveToTempVariable(currentExecutionContext: ExecutionContext|null, remoteObject: RemoteObject|null):\n      Promise<void> {\n    if (!remoteObject || !currentExecutionContext) {\n      failedToSave(null);\n      return;\n    }\n    const executionContext = (currentExecutionContext as ExecutionContext);\n\n    const result = await executionContext.globalObject(/* objectGroup */ '', /* generatePreview */ false);\n    if ('error' in result || Boolean(result.exceptionDetails) || !result.object) {\n      failedToSave('object' in result && result.object || null);\n      return;\n    }\n\n    const globalObject = result.object;\n    const callFunctionResult =\n        await globalObject.callFunction(saveVariable, [RemoteObject.toCallArgument(remoteObject)]);\n    globalObject.release();\n    if (callFunctionResult.wasThrown || !callFunctionResult.object || callFunctionResult.object.type !== 'string') {\n      failedToSave(callFunctionResult.object || null);\n    } else {\n      const text = (callFunctionResult.object.value as string);\n      const message = this.addCommandMessage(executionContext, text);\n      void this.evaluateCommandInConsole(executionContext, message, text, /* useCommandLineAPI */ false);\n    }\n    if (callFunctionResult.object) {\n      callFunctionResult.object.release();\n    }\n\n    function saveVariable(this: Window, value: Protocol.Runtime.CallArgument): string {\n      const prefix = 'temp';\n      let index = 1;\n      while ((prefix + index) in this) {\n        ++index;\n      }\n      const name = prefix + index;\n      // @ts-ignore Assignment to global object\n      this[name] = value;\n      return name;\n    }\n\n    function failedToSave(result: RemoteObject|null): void {\n      let message = i18nString(UIStrings.failedToSaveToTempVariable);\n      if (result) {\n        message = (message + ' ' + result.description as Common.UIString.LocalizedString);\n      }\n      Common.Console.Console.instance().error(message);\n    }\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  ConsoleCleared = 'ConsoleCleared',\n  MessageAdded = 'MessageAdded',\n  MessageUpdated = 'MessageUpdated',\n  CommandEvaluated = 'CommandEvaluated',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface CommandEvaluatedEvent {\n  result: RemoteObject;\n  commandMessage: ConsoleMessage;\n  exceptionDetails?: Protocol.Runtime.ExceptionDetails|undefined;\n}\n\nexport type EventTypes = {\n  [Events.ConsoleCleared]: void,\n  [Events.MessageAdded]: ConsoleMessage,\n  [Events.MessageUpdated]: ConsoleMessage,\n  [Events.CommandEvaluated]: CommandEvaluatedEvent,\n};\n\nexport interface AffectedResources {\n  requestId?: Protocol.Network.RequestId;\n  issueId?: Protocol.Audits.IssueId;\n}\n\nfunction extractExceptionMetaData(metaData?: {\n  requestId?: Protocol.Network.RequestId,\n  issueId?: Protocol.Audits.IssueId,\n}): AffectedResources|undefined {\n  if (!metaData) {\n    return undefined;\n  }\n  return {requestId: metaData.requestId || undefined, issueId: metaData.issueId || undefined};\n}\n\nfunction areAffectedResourcesEquivalent(a?: AffectedResources, b?: AffectedResources): boolean {\n  // Not considering issueId, as that would prevent de-duplication of console #messages.\n  return a?.requestId === b?.requestId;\n}\n\nfunction areStackTracesEquivalent(\n    stackTrace1?: Protocol.Runtime.StackTrace, stackTrace2?: Protocol.Runtime.StackTrace): boolean {\n  if (!stackTrace1 !== !stackTrace2) {\n    return false;\n  }\n  if (!stackTrace1 || !stackTrace2) {\n    return true;\n  }\n  const callFrames1 = stackTrace1.callFrames;\n  const callFrames2 = stackTrace2.callFrames;\n  if (callFrames1.length !== callFrames2.length) {\n    return false;\n  }\n  for (let i = 0, n = callFrames1.length; i < n; ++i) {\n    if (callFrames1[i].scriptId !== callFrames2[i].scriptId ||\n        callFrames1[i].functionName !== callFrames2[i].functionName ||\n        callFrames1[i].lineNumber !== callFrames2[i].lineNumber ||\n        callFrames1[i].columnNumber !== callFrames2[i].columnNumber) {\n      return false;\n    }\n  }\n  return areStackTracesEquivalent(stackTrace1.parent, stackTrace2.parent);\n}\n\nexport interface ConsoleMessageDetails {\n  type?: MessageType;\n  url?: Platform.DevToolsPath.UrlString;\n  line?: number;\n  column?: number;\n  parameters?: (string|RemoteObject|Protocol.Runtime.RemoteObject)[];\n  stackTrace?: Protocol.Runtime.StackTrace;\n  timestamp?: number;\n  executionContextId?: number;\n  scriptId?: Protocol.Runtime.ScriptId;\n  workerId?: string;\n  context?: string;\n  affectedResources?: AffectedResources;\n  category?: Protocol.Log.LogEntryCategory;\n}\n\nexport class ConsoleMessage {\n  readonly #runtimeModelInternal: RuntimeModel|null;\n  source: MessageSource;\n  level: Protocol.Log.LogEntryLevel|null;\n  messageText: string;\n  readonly type: MessageType;\n  url: Platform.DevToolsPath.UrlString|undefined;\n  line: number;\n  column: number;\n  parameters: (string|RemoteObject|Protocol.Runtime.RemoteObject)[]|undefined;\n  stackTrace: Protocol.Runtime.StackTrace|undefined;\n  timestamp: number;\n  #executionContextId: number;\n  scriptId?: Protocol.Runtime.ScriptId;\n  workerId?: string;\n  context?: string;\n  #originatingConsoleMessage: ConsoleMessage|null = null;\n  #pageLoadSequenceNumber?: number = undefined;\n  #exceptionId?: number = undefined;\n  #affectedResources?: AffectedResources;\n  category?: Protocol.Log.LogEntryCategory;\n\n  /**\n   * The parent frame of the `console.log` call of logpoints or conditional breakpoints\n   * if they called `console.*` explicitly. The parent frame is where V8 paused\n   * and consequently where the logpoint is set.\n   *\n   * Is `null` for page console.logs, commands, command results, etc.\n   */\n  readonly stackFrameWithBreakpoint: Protocol.Runtime.CallFrame|null = null;\n  readonly #originatingBreakpointType: BreakpointType|null = null;\n\n  constructor(\n      runtimeModel: RuntimeModel|null, source: MessageSource, level: Protocol.Log.LogEntryLevel|null,\n      messageText: string, details?: ConsoleMessageDetails) {\n    this.#runtimeModelInternal = runtimeModel;\n    this.source = source;\n    this.level = (level as Protocol.Log.LogEntryLevel | null);\n    this.messageText = messageText;\n    this.type = details?.type || Protocol.Runtime.ConsoleAPICalledEventType.Log;\n    this.url = details?.url;\n    this.line = details?.line || 0;\n    this.column = details?.column || 0;\n    this.parameters = details?.parameters;\n    this.stackTrace = details?.stackTrace;\n    this.timestamp = details?.timestamp || Date.now();\n    this.#executionContextId = details?.executionContextId || 0;\n    this.scriptId = details?.scriptId;\n    this.workerId = details?.workerId;\n    this.#affectedResources = details?.affectedResources;\n    this.category = details?.category;\n\n    if (!this.#executionContextId && this.#runtimeModelInternal) {\n      if (this.scriptId) {\n        this.#executionContextId = this.#runtimeModelInternal.executionContextIdForScriptId(this.scriptId);\n      } else if (this.stackTrace) {\n        this.#executionContextId = this.#runtimeModelInternal.executionContextForStackTrace(this.stackTrace);\n      }\n    }\n\n    if (details?.context) {\n      const match = details?.context.match(/[^#]*/);\n      this.context = match?.[0];\n    }\n\n    if (this.stackTrace) {\n      const {callFrame, type} = ConsoleMessage.#stackFrameWithBreakpoint(this.stackTrace);\n      this.stackFrameWithBreakpoint = callFrame;\n      this.#originatingBreakpointType = type;\n    }\n  }\n\n  getAffectedResources(): AffectedResources|undefined {\n    return this.#affectedResources;\n  }\n\n  setPageLoadSequenceNumber(pageLoadSequenceNumber: number): void {\n    this.#pageLoadSequenceNumber = pageLoadSequenceNumber;\n  }\n\n  static fromException(\n      runtimeModel: RuntimeModel, exceptionDetails: Protocol.Runtime.ExceptionDetails,\n      messageType?: Protocol.Runtime.ConsoleAPICalledEventType|FrontendMessageType, timestamp?: number,\n      forceUrl?: Platform.DevToolsPath.UrlString, affectedResources?: AffectedResources): ConsoleMessage {\n    const details = {\n      type: messageType,\n      url: forceUrl || exceptionDetails.url as Platform.DevToolsPath.UrlString,\n      line: exceptionDetails.lineNumber,\n      column: exceptionDetails.columnNumber,\n      parameters: exceptionDetails.exception ?\n          [RemoteObject.fromLocalObject(exceptionDetails.text), exceptionDetails.exception] :\n          undefined,\n      stackTrace: exceptionDetails.stackTrace,\n      timestamp,\n      executionContextId: exceptionDetails.executionContextId,\n      scriptId: exceptionDetails.scriptId,\n      affectedResources,\n    };\n    return new ConsoleMessage(\n        runtimeModel, Protocol.Log.LogEntrySource.Javascript, Protocol.Log.LogEntryLevel.Error,\n        RuntimeModel.simpleTextFromException(exceptionDetails), details);\n  }\n\n  runtimeModel(): RuntimeModel|null {\n    return this.#runtimeModelInternal;\n  }\n\n  target(): Target|null {\n    return this.#runtimeModelInternal ? this.#runtimeModelInternal.target() : null;\n  }\n\n  setOriginatingMessage(originatingMessage: ConsoleMessage): void {\n    this.#originatingConsoleMessage = originatingMessage;\n    this.#executionContextId = originatingMessage.#executionContextId;\n  }\n\n  originatingMessage(): ConsoleMessage|null {\n    return this.#originatingConsoleMessage;\n  }\n\n  setExecutionContextId(executionContextId: number): void {\n    this.#executionContextId = executionContextId;\n  }\n\n  getExecutionContextId(): number {\n    return this.#executionContextId;\n  }\n\n  getExceptionId(): number|undefined {\n    return this.#exceptionId;\n  }\n\n  setExceptionId(exceptionId: number): void {\n    this.#exceptionId = exceptionId;\n  }\n\n  isGroupMessage(): boolean {\n    return this.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroup ||\n        this.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed ||\n        this.type === Protocol.Runtime.ConsoleAPICalledEventType.EndGroup;\n  }\n\n  isGroupStartMessage(): boolean {\n    return this.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroup ||\n        this.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed;\n  }\n\n  isErrorOrWarning(): boolean {\n    return (this.level === Protocol.Log.LogEntryLevel.Warning || this.level === Protocol.Log.LogEntryLevel.Error);\n  }\n\n  isGroupable(): boolean {\n    const isUngroupableError = this.level === Protocol.Log.LogEntryLevel.Error &&\n        (this.source === Protocol.Log.LogEntrySource.Javascript || this.source === Protocol.Log.LogEntrySource.Network);\n    return (\n        this.source !== Common.Console.FrontendMessageSource.ConsoleAPI && this.type !== FrontendMessageType.Command &&\n        this.type !== FrontendMessageType.Result && this.type !== FrontendMessageType.System && !isUngroupableError);\n  }\n\n  groupCategoryKey(): string {\n    return [this.source, this.level, this.type, this.#pageLoadSequenceNumber].join(':');\n  }\n\n  isEqual(msg: ConsoleMessage|null): boolean {\n    if (!msg) {\n      return false;\n    }\n\n    if (this.parameters) {\n      if (!msg.parameters || this.parameters.length !== msg.parameters.length) {\n        return false;\n      }\n\n      for (let i = 0; i < msg.parameters.length; ++i) {\n        const msgParam = msg.parameters[i];\n        const param = this.parameters[i];\n        if (typeof msgParam === 'string' || typeof param === 'string') {\n          // TODO(chromium:1136435): Remove this case.\n          return false;\n        }\n        if (msgParam.type === 'object' && msgParam.subtype !== 'error') {\n          if (!msgParam.objectId || msgParam.objectId !== param.objectId || msg.timestamp !== this.timestamp) {\n            return false;\n          }\n        }\n        if (param.type !== msgParam.type || param.value !== msgParam.value ||\n            param.description !== msgParam.description) {\n          return false;\n        }\n      }\n    }\n\n    return (this.runtimeModel() === msg.runtimeModel()) && (this.source === msg.source) && (this.type === msg.type) &&\n        (this.level === msg.level) && (this.line === msg.line) && (this.url === msg.url) &&\n        (this.scriptId === msg.scriptId) && (this.messageText === msg.messageText) &&\n        (this.#executionContextId === msg.#executionContextId) &&\n        areAffectedResourcesEquivalent(this.#affectedResources, msg.#affectedResources) &&\n        areStackTracesEquivalent(this.stackTrace, msg.stackTrace);\n  }\n\n  get originatesFromLogpoint(): boolean {\n    return this.#originatingBreakpointType === BreakpointType.LOGPOINT;\n  }\n\n  /** @returns true, iff this was a console.* call in a conditional breakpoint */\n  get originatesFromConditionalBreakpoint(): boolean {\n    return this.#originatingBreakpointType === BreakpointType.CONDITIONAL_BREAKPOINT;\n  }\n\n  static #stackFrameWithBreakpoint({callFrames}: Protocol.Runtime.StackTrace):\n      {callFrame: Protocol.Runtime.CallFrame|null, type: BreakpointType|null} {\n    // Note that breakpoint condition code could in theory call into user JS and back into\n    // \"condition-defined\" functions. This means that the top-most\n    // stack frame is not necessarily the `console.log` call, but there could be other things\n    // on top. We want the LAST marker frame in the stack.\n    // We search FROM THE TOP for the last marked stack frame and\n    // return it's parent (successor).\n    const markerSourceUrls = [COND_BREAKPOINT_SOURCE_URL, LOGPOINT_SOURCE_URL];\n    const lastBreakpointFrameIndex = callFrames.findLastIndex(({url}) => markerSourceUrls.includes(url));\n    if (lastBreakpointFrameIndex === -1 || lastBreakpointFrameIndex === callFrames.length - 1) {\n      // We either didn't find any breakpoint or we didn't capture enough stack\n      // frames and the breakpoint condition is the bottom-most frame.\n      return {callFrame: null, type: null};\n    }\n\n    const type = callFrames[lastBreakpointFrameIndex].url === LOGPOINT_SOURCE_URL ?\n        BreakpointType.LOGPOINT :\n        BreakpointType.CONDITIONAL_BREAKPOINT;\n    return {callFrame: callFrames[lastBreakpointFrameIndex + 1], type};\n  }\n}\n\nSDKModel.register(ConsoleModel, {capabilities: Capability.JS, autostart: true});\n\nexport type MessageSource = Protocol.Log.LogEntrySource|Common.Console.FrontendMessageSource;\nexport type MessageLevel = Protocol.Log.LogEntryLevel;\nexport type MessageType = Protocol.Runtime.ConsoleAPICalledEventType|FrontendMessageType;\n\nexport const MessageSourceDisplayName = new Map<MessageSource, string>(([\n  [Protocol.Log.LogEntrySource.XML, 'xml'],\n  [Protocol.Log.LogEntrySource.Javascript, 'javascript'],\n  [Protocol.Log.LogEntrySource.Network, 'network'],\n  [Common.Console.FrontendMessageSource.ConsoleAPI, 'console-api'],\n  [Protocol.Log.LogEntrySource.Storage, 'storage'],\n  [Protocol.Log.LogEntrySource.Appcache, 'appcache'],\n  [Protocol.Log.LogEntrySource.Rendering, 'rendering'],\n  [Common.Console.FrontendMessageSource.CSS, 'css'],\n  [Protocol.Log.LogEntrySource.Security, 'security'],\n  [Protocol.Log.LogEntrySource.Deprecation, 'deprecation'],\n  [Protocol.Log.LogEntrySource.Worker, 'worker'],\n  [Protocol.Log.LogEntrySource.Violation, 'violation'],\n  [Protocol.Log.LogEntrySource.Intervention, 'intervention'],\n  [Protocol.Log.LogEntrySource.Recommendation, 'recommendation'],\n  [Protocol.Log.LogEntrySource.Other, 'other'],\n  [Common.Console.FrontendMessageSource.ISSUE_PANEL, 'issue-panel'],\n]));\n"],
  "mappings": "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",
  "names": ["result", "Events"]
}
