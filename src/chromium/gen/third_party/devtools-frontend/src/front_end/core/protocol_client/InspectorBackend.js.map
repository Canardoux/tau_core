{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/protocol_client/InspectorBackend.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport {NodeURL} from './NodeURL.js';\nimport type * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport const DevToolsStubErrorCode = -32015;\n// TODO(dgozman): we are not reporting generic errors in tests, but we should\n// instead report them and just have some expected errors in test expectations.\nconst GenericErrorCode = -32000;\nconst ConnectionClosedErrorCode = -32001;\n\ntype MessageParams = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any,\n};\n\ntype ProtocolDomainName = ProtocolProxyApi.ProtocolDomainName;\n\nexport interface MessageError {\n  code: number;\n  message: string;\n  data?: string|null;\n}\n\nexport type Message = {\n  sessionId?: string,\n  url?: Platform.DevToolsPath.UrlString,\n  id?: number,\n  error?: MessageError|null,\n  result?: Object|null,\n  method?: QualifiedName,\n  params?: MessageParams|null,\n};\n\ninterface EventMessage extends Message {\n  method: QualifiedName;\n  params?: MessageParams|null;\n}\n\n/** A qualified name, e.g. Domain.method */\nexport type QualifiedName = string&{qualifiedEventNameTag: string | undefined};\n/** A qualified name, e.g. method */\nexport type UnqualifiedName = string&{unqualifiedEventNameTag: string | undefined};\n\nexport const splitQualifiedName = (string: QualifiedName): [string, UnqualifiedName] => {\n  const [domain, eventName] = string.split('.');\n  return [domain, eventName as UnqualifiedName];\n};\n\nexport const qualifyName = (domain: string, name: UnqualifiedName): QualifiedName => {\n  return `${domain}.${name}` as QualifiedName;\n};\n\ntype EventParameterNames = Map<QualifiedName, string[]>;\ntype ReadonlyEventParameterNames = ReadonlyMap<QualifiedName, string[]>;\n\ninterface CommandParameter {\n  name: string;\n  type: string;\n  optional: boolean;\n  description: string;\n}\n\ntype Callback = (error: MessageError|null, arg1: Object|null) => void;\n\ninterface CallbackWithDebugInfo {\n  callback: Callback;\n  method: string;\n}\n\nexport class InspectorBackend {\n  readonly agentPrototypes: Map<ProtocolDomainName, AgentPrototype> = new Map();\n  #initialized: boolean = false;\n  #eventParameterNamesForDomain = new Map<ProtocolDomainName, EventParameterNames>();\n  readonly typeMap = new Map<QualifiedName, CommandParameter[]>();\n  readonly enumMap = new Map<QualifiedName, Record<string, string>>();\n\n  private getOrCreateEventParameterNamesForDomain(domain: ProtocolDomainName): EventParameterNames {\n    let map = this.#eventParameterNamesForDomain.get(domain);\n    if (!map) {\n      map = new Map();\n      this.#eventParameterNamesForDomain.set(domain, map);\n    }\n    return map;\n  }\n\n  getOrCreateEventParameterNamesForDomainForTesting(domain: ProtocolDomainName): EventParameterNames {\n    return this.getOrCreateEventParameterNamesForDomain(domain);\n  }\n\n  getEventParameterNames(): ReadonlyMap<ProtocolDomainName, ReadonlyEventParameterNames> {\n    return this.#eventParameterNamesForDomain;\n  }\n\n  static reportProtocolError(error: string, messageObject: Object): void {\n    console.error(error + ': ' + JSON.stringify(messageObject));\n  }\n\n  static reportProtocolWarning(error: string, messageObject: Object): void {\n    console.warn(error + ': ' + JSON.stringify(messageObject));\n  }\n\n  isInitialized(): boolean {\n    return this.#initialized;\n  }\n\n  private agentPrototype(domain: ProtocolDomainName): AgentPrototype {\n    let prototype = this.agentPrototypes.get(domain);\n    if (!prototype) {\n      prototype = new AgentPrototype(domain);\n      this.agentPrototypes.set(domain, prototype);\n    }\n    return prototype;\n  }\n\n  registerCommand(method: QualifiedName, parameters: CommandParameter[], replyArgs: string[], description: string):\n      void {\n    const [domain, command] = splitQualifiedName(method);\n    this.agentPrototype(domain as ProtocolDomainName).registerCommand(command, parameters, replyArgs, description);\n    this.#initialized = true;\n  }\n\n  registerEnum(type: QualifiedName, values: Record<string, string>): void {\n    const [domain, name] = splitQualifiedName(type);\n    // @ts-ignore globalThis global namespace pollution\n    if (!globalThis.Protocol[domain]) {\n      // @ts-ignore globalThis global namespace pollution\n      globalThis.Protocol[domain] = {};\n    }\n\n    // @ts-ignore globalThis global namespace pollution\n    globalThis.Protocol[domain][name] = values;\n    this.enumMap.set(type, values);\n    this.#initialized = true;\n  }\n\n  registerType(method: QualifiedName, parameters: CommandParameter[]): void {\n    this.typeMap.set(method, parameters);\n    this.#initialized = true;\n  }\n\n  registerEvent(eventName: QualifiedName, params: string[]): void {\n    const domain = eventName.split('.')[0];\n    const eventParameterNames = this.getOrCreateEventParameterNamesForDomain(domain as ProtocolDomainName);\n    eventParameterNames.set(eventName, params);\n    this.#initialized = true;\n  }\n}\n\nlet connectionFactory: () => Connection;\n\nexport class Connection {\n  onMessage!: ((arg0: Object) => void)|null;\n  constructor() {\n  }\n\n  setOnMessage(_onMessage: (arg0: (Object|string)) => void): void {\n  }\n\n  setOnDisconnect(_onDisconnect: (arg0: string) => void): void {\n  }\n\n  sendRawMessage(_message: string): void {\n  }\n\n  disconnect(): Promise<void> {\n    throw new Error('not implemented');\n  }\n\n  static setFactory(factory: () => Connection): void {\n    connectionFactory = factory;\n  }\n\n  static getFactory(): () => Connection {\n    return connectionFactory;\n  }\n}\n\ntype SendRawMessageCallback = (...args: unknown[]) => void;\n\nexport const test = {\n  /**\n   * This will get called for every protocol message.\n   * ProtocolClient.test.dumpProtocol = console.log\n   */\n  dumpProtocol: null as ((arg0: string) => void) | null,\n\n  /**\n   * Runs a function when no protocol activity is present.\n   * ProtocolClient.test.deprecatedRunAfterPendingDispatches(() => console.log('done'))\n   */\n  deprecatedRunAfterPendingDispatches: null as ((arg0: () => void) => void) | null,\n\n  /**\n   * Sends a raw message over main connection.\n   * ProtocolClient.test.sendRawMessage('Page.enable', {}, console.log)\n   */\n  sendRawMessage: null as ((method: QualifiedName, args: Object|null, arg2: SendRawMessageCallback) => void) | null,\n\n  /**\n   * Set to true to not log any errors.\n   */\n  suppressRequestErrors: false as boolean,\n\n  /**\n   * Set to get notified about any messages sent over protocol.\n   */\n  onMessageSent: null as\n          ((message: {domain: string, method: string, params: Object, id: number, sessionId?: string},\n            target: TargetBase|null) => void) |\n      null,\n\n  /**\n   * Set to get notified about any messages received over protocol.\n   */\n  onMessageReceived: null as ((message: Object, target: TargetBase|null) => void) | null,\n};\n\nconst LongPollingMethods = new Set<string>(['CSS.takeComputedStyleUpdates']);\n\nexport class SessionRouter {\n  readonly #connectionInternal: Connection;\n  #lastMessageId: number;\n  #pendingResponsesCount: number;\n  readonly #pendingLongPollingMessageIds: Set<number>;\n  readonly #sessions: Map<string, {\n    target: TargetBase,\n    callbacks: Map<number, CallbackWithDebugInfo>,\n    proxyConnection: ((Connection | undefined)|null),\n  }>;\n  #pendingScripts: (() => void)[];\n\n  constructor(connection: Connection) {\n    this.#connectionInternal = connection;\n    this.#lastMessageId = 1;\n    this.#pendingResponsesCount = 0;\n    this.#pendingLongPollingMessageIds = new Set();\n\n    this.#sessions = new Map();\n\n    this.#pendingScripts = [];\n\n    test.deprecatedRunAfterPendingDispatches = this.deprecatedRunAfterPendingDispatches.bind(this);\n    test.sendRawMessage = this.sendRawMessageForTesting.bind(this);\n\n    this.#connectionInternal.setOnMessage(this.onMessage.bind(this));\n\n    this.#connectionInternal.setOnDisconnect(reason => {\n      const session = this.#sessions.get('');\n      if (session) {\n        session.target.dispose(reason);\n      }\n    });\n  }\n\n  registerSession(target: TargetBase, sessionId: string, proxyConnection?: Connection|null): void {\n    // Only the Audits panel uses proxy connections. If it is ever possible to have multiple active at the\n    // same time, it should be tested thoroughly.\n    if (proxyConnection) {\n      for (const session of this.#sessions.values()) {\n        if (session.proxyConnection) {\n          console.error('Multiple simultaneous proxy connections are currently unsupported');\n          break;\n        }\n      }\n    }\n\n    this.#sessions.set(sessionId, {target, callbacks: new Map(), proxyConnection});\n  }\n\n  unregisterSession(sessionId: string): void {\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      return;\n    }\n    for (const callback of session.callbacks.values()) {\n      SessionRouter.dispatchUnregisterSessionError(callback);\n    }\n    this.#sessions.delete(sessionId);\n  }\n\n  private getTargetBySessionId(sessionId: string): TargetBase|null {\n    const session = this.#sessions.get(sessionId ? sessionId : '');\n    if (!session) {\n      return null;\n    }\n    return session.target;\n  }\n\n  private nextMessageId(): number {\n    return this.#lastMessageId++;\n  }\n\n  connection(): Connection {\n    return this.#connectionInternal;\n  }\n\n  sendMessage(sessionId: string, domain: string, method: QualifiedName, params: Object|null, callback: Callback): void {\n    const messageId = this.nextMessageId();\n    const messageObject: Message = {\n      id: messageId,\n      method,\n    };\n\n    if (params) {\n      messageObject.params = params;\n    }\n    if (sessionId) {\n      messageObject.sessionId = sessionId;\n    }\n\n    if (test.dumpProtocol) {\n      test.dumpProtocol('frontend: ' + JSON.stringify(messageObject));\n    }\n\n    if (test.onMessageSent) {\n      const paramsObject = JSON.parse(JSON.stringify(params || {}));\n      test.onMessageSent(\n          {domain, method, params: (paramsObject as Object), id: messageId, sessionId},\n          this.getTargetBySessionId(sessionId));\n    }\n\n    ++this.#pendingResponsesCount;\n    if (LongPollingMethods.has(method)) {\n      this.#pendingLongPollingMessageIds.add(messageId);\n    }\n\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      return;\n    }\n    session.callbacks.set(messageId, {callback, method});\n    this.#connectionInternal.sendRawMessage(JSON.stringify(messageObject));\n  }\n\n  private sendRawMessageForTesting(method: QualifiedName, params: Object|null, callback: Callback|null, sessionId = ''):\n      void {\n    const domain = method.split('.')[0];\n    this.sendMessage(sessionId, domain, method, params, callback || (() => {}));\n  }\n\n  private onMessage(message: string|Object): void {\n    if (test.dumpProtocol) {\n      test.dumpProtocol('backend: ' + ((typeof message === 'string') ? message : JSON.stringify(message)));\n    }\n\n    if (test.onMessageReceived) {\n      const messageObjectCopy = JSON.parse((typeof message === 'string') ? message : JSON.stringify(message));\n      test.onMessageReceived(messageObjectCopy, this.getTargetBySessionId(messageObjectCopy.sessionId));\n    }\n\n    const messageObject = ((typeof message === 'string') ? JSON.parse(message) : message) as Message;\n\n    // Send all messages to proxy connections.\n    let suppressUnknownMessageErrors = false;\n    for (const session of this.#sessions.values()) {\n      if (!session.proxyConnection) {\n        continue;\n      }\n\n      if (!session.proxyConnection.onMessage) {\n        InspectorBackend.reportProtocolError(\n            'Protocol Error: the session has a proxyConnection with no _onMessage', messageObject);\n        continue;\n      }\n\n      session.proxyConnection.onMessage(messageObject);\n      suppressUnknownMessageErrors = true;\n    }\n\n    const sessionId = messageObject.sessionId || '';\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      if (!suppressUnknownMessageErrors) {\n        InspectorBackend.reportProtocolError('Protocol Error: the message with wrong session id', messageObject);\n      }\n      return;\n    }\n\n    // If this message is directly for the target controlled by the proxy connection, don't handle it.\n    if (session.proxyConnection) {\n      return;\n    }\n\n    if (session.target.getNeedsNodeJSPatching()) {\n      NodeURL.patch(messageObject);\n    }\n\n    if (messageObject.id !== undefined) {  // just a response for some request\n      const callback = session.callbacks.get(messageObject.id);\n      session.callbacks.delete(messageObject.id);\n      if (!callback) {\n        if (messageObject.error?.code === ConnectionClosedErrorCode) {\n          // Ignore the errors that are sent as responses after the session closes.\n          return;\n        }\n        if (!suppressUnknownMessageErrors) {\n          InspectorBackend.reportProtocolError('Protocol Error: the message with wrong id', messageObject);\n        }\n        return;\n      }\n\n      callback.callback(messageObject.error || null, messageObject.result || null);\n      --this.#pendingResponsesCount;\n      this.#pendingLongPollingMessageIds.delete(messageObject.id);\n\n      if (this.#pendingScripts.length && !this.hasOutstandingNonLongPollingRequests()) {\n        this.deprecatedRunAfterPendingDispatches();\n      }\n    } else {\n      if (messageObject.method === undefined) {\n        InspectorBackend.reportProtocolError('Protocol Error: the message without method', messageObject);\n        return;\n      }\n      // This cast is justified as we just checked for the presence of messageObject.method.\n      const eventMessage = messageObject as EventMessage;\n      session.target.dispatch(eventMessage);\n    }\n  }\n\n  private hasOutstandingNonLongPollingRequests(): boolean {\n    return this.#pendingResponsesCount - this.#pendingLongPollingMessageIds.size > 0;\n  }\n\n  private deprecatedRunAfterPendingDispatches(script?: (() => void)): void {\n    if (script) {\n      this.#pendingScripts.push(script);\n    }\n\n    // Execute all promises.\n    window.setTimeout(() => {\n      if (!this.hasOutstandingNonLongPollingRequests()) {\n        this.executeAfterPendingDispatches();\n      } else {\n        this.deprecatedRunAfterPendingDispatches();\n      }\n    }, 0);\n  }\n\n  private executeAfterPendingDispatches(): void {\n    if (!this.hasOutstandingNonLongPollingRequests()) {\n      const scripts = this.#pendingScripts;\n      this.#pendingScripts = [];\n      for (let id = 0; id < scripts.length; ++id) {\n        scripts[id]();\n      }\n    }\n  }\n\n  static dispatchConnectionError(callback: Callback, method: string): void {\n    const error = {\n      message: `Connection is closed, can\\'t dispatch pending call to ${method}`,\n      code: ConnectionClosedErrorCode,\n      data: null,\n    };\n    window.setTimeout(() => callback(error, null), 0);\n  }\n\n  static dispatchUnregisterSessionError({callback, method}: CallbackWithDebugInfo): void {\n    const error = {\n      message: `Session is unregistering, can\\'t dispatch pending call to ${method}`,\n      code: ConnectionClosedErrorCode,\n      data: null,\n    };\n    window.setTimeout(() => callback(error, null), 0);\n  }\n}\n\n/**\n * Make sure that `Domain` in get/set is only ever instantiated with one protocol domain\n * name, because if `Domain` allows multiple domains, the type is unsound.\n */\ninterface AgentsMap extends Map<ProtocolDomainName, ProtocolProxyApi.ProtocolApi[ProtocolDomainName]> {\n  get<Domain extends ProtocolDomainName>(key: Domain): ProtocolProxyApi.ProtocolApi[Domain]|undefined;\n  set<Domain extends ProtocolDomainName>(key: Domain, value: ProtocolProxyApi.ProtocolApi[Domain]): this;\n}\n\n/**\n * Make sure that `Domain` in get/set is only ever instantiated with one protocol domain\n * name, because if `Domain` allows multiple domains, the type is unsound.\n */\ninterface DispatcherMap extends Map<ProtocolDomainName, ProtocolProxyApi.ProtocolDispatchers[ProtocolDomainName]> {\n  get<Domain extends ProtocolDomainName>(key: Domain): DispatcherManager<Domain>|undefined;\n  set<Domain extends ProtocolDomainName>(key: Domain, value: DispatcherManager<Domain>): this;\n}\n\nexport class TargetBase {\n  needsNodeJSPatching: boolean;\n  readonly sessionId: string;\n  routerInternal: SessionRouter|null;\n  #agents: AgentsMap = new Map();\n  #dispatchers: DispatcherMap = new Map();\n\n  constructor(\n      needsNodeJSPatching: boolean, parentTarget: TargetBase|null, sessionId: string, connection: Connection|null) {\n    this.needsNodeJSPatching = needsNodeJSPatching;\n    this.sessionId = sessionId;\n\n    if ((!parentTarget && connection) || (!parentTarget && sessionId) || (connection && sessionId)) {\n      throw new Error('Either connection or sessionId (but not both) must be supplied for a child target');\n    }\n\n    let router: SessionRouter;\n    if (sessionId && parentTarget && parentTarget.routerInternal) {\n      router = parentTarget.routerInternal;\n    } else if (connection) {\n      router = new SessionRouter(connection);\n    } else {\n      router = new SessionRouter(connectionFactory());\n    }\n\n    this.routerInternal = router;\n\n    router.registerSession(this, this.sessionId);\n\n    for (const [domain, agentPrototype] of inspectorBackend.agentPrototypes) {\n      const agent = Object.create((agentPrototype as AgentPrototype));\n      agent.target = this;\n      this.#agents.set(domain, agent);\n    }\n\n    for (const [domain, eventParameterNames] of inspectorBackend.getEventParameterNames().entries()) {\n      this.#dispatchers.set(domain, new DispatcherManager(eventParameterNames));\n    }\n  }\n\n  dispatch(eventMessage: EventMessage): void {\n    const [domainName, method] = splitQualifiedName(eventMessage.method);\n    const dispatcher = this.#dispatchers.get(domainName as ProtocolDomainName);\n    if (!dispatcher) {\n      InspectorBackend.reportProtocolError(\n          `Protocol Error: the message ${eventMessage.method} is for non-existing domain '${domainName}'`,\n          eventMessage);\n      return;\n    }\n    dispatcher.dispatch(method, eventMessage);\n  }\n\n  dispose(_reason: string): void {\n    if (!this.routerInternal) {\n      return;\n    }\n    this.routerInternal.unregisterSession(this.sessionId);\n    this.routerInternal = null;\n  }\n\n  isDisposed(): boolean {\n    return !this.routerInternal;\n  }\n\n  markAsNodeJSForTest(): void {\n    this.needsNodeJSPatching = true;\n  }\n\n  router(): SessionRouter|null {\n    return this.routerInternal;\n  }\n\n  // Agent accessors, keep alphabetically sorted.\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private getAgent<Domain extends ProtocolDomainName>(domain: Domain): ProtocolProxyApi.ProtocolApi[Domain] {\n    const agent = this.#agents.get<Domain>(domain);\n    if (!agent) {\n      throw new Error('Accessing undefined agent');\n    }\n    return agent;\n  }\n\n  accessibilityAgent(): ProtocolProxyApi.AccessibilityApi {\n    return this.getAgent('Accessibility');\n  }\n\n  animationAgent(): ProtocolProxyApi.AnimationApi {\n    return this.getAgent('Animation');\n  }\n\n  auditsAgent(): ProtocolProxyApi.AuditsApi {\n    return this.getAgent('Audits');\n  }\n\n  autofillAgent(): ProtocolProxyApi.AutofillApi {\n    return this.getAgent('Autofill');\n  }\n\n  browserAgent(): ProtocolProxyApi.BrowserApi {\n    return this.getAgent('Browser');\n  }\n\n  backgroundServiceAgent(): ProtocolProxyApi.BackgroundServiceApi {\n    return this.getAgent('BackgroundService');\n  }\n\n  cacheStorageAgent(): ProtocolProxyApi.CacheStorageApi {\n    return this.getAgent('CacheStorage');\n  }\n\n  cssAgent(): ProtocolProxyApi.CSSApi {\n    return this.getAgent('CSS');\n  }\n\n  databaseAgent(): ProtocolProxyApi.DatabaseApi {\n    return this.getAgent('Database');\n  }\n\n  debuggerAgent(): ProtocolProxyApi.DebuggerApi {\n    return this.getAgent('Debugger');\n  }\n\n  deviceOrientationAgent(): ProtocolProxyApi.DeviceOrientationApi {\n    return this.getAgent('DeviceOrientation');\n  }\n\n  domAgent(): ProtocolProxyApi.DOMApi {\n    return this.getAgent('DOM');\n  }\n\n  domdebuggerAgent(): ProtocolProxyApi.DOMDebuggerApi {\n    return this.getAgent('DOMDebugger');\n  }\n\n  domsnapshotAgent(): ProtocolProxyApi.DOMSnapshotApi {\n    return this.getAgent('DOMSnapshot');\n  }\n\n  domstorageAgent(): ProtocolProxyApi.DOMStorageApi {\n    return this.getAgent('DOMStorage');\n  }\n\n  emulationAgent(): ProtocolProxyApi.EmulationApi {\n    return this.getAgent('Emulation');\n  }\n\n  eventBreakpointsAgent(): ProtocolProxyApi.EventBreakpointsApi {\n    return this.getAgent('EventBreakpoints');\n  }\n\n  extensionsAgent(): ProtocolProxyApi.ExtensionsApi {\n    return this.getAgent('Extensions');\n  }\n\n  fetchAgent(): ProtocolProxyApi.FetchApi {\n    return this.getAgent('Fetch');\n  }\n\n  heapProfilerAgent(): ProtocolProxyApi.HeapProfilerApi {\n    return this.getAgent('HeapProfiler');\n  }\n\n  indexedDBAgent(): ProtocolProxyApi.IndexedDBApi {\n    return this.getAgent('IndexedDB');\n  }\n\n  inputAgent(): ProtocolProxyApi.InputApi {\n    return this.getAgent('Input');\n  }\n\n  ioAgent(): ProtocolProxyApi.IOApi {\n    return this.getAgent('IO');\n  }\n\n  inspectorAgent(): ProtocolProxyApi.InspectorApi {\n    return this.getAgent('Inspector');\n  }\n\n  layerTreeAgent(): ProtocolProxyApi.LayerTreeApi {\n    return this.getAgent('LayerTree');\n  }\n\n  logAgent(): ProtocolProxyApi.LogApi {\n    return this.getAgent('Log');\n  }\n\n  mediaAgent(): ProtocolProxyApi.MediaApi {\n    return this.getAgent('Media');\n  }\n\n  memoryAgent(): ProtocolProxyApi.MemoryApi {\n    return this.getAgent('Memory');\n  }\n\n  networkAgent(): ProtocolProxyApi.NetworkApi {\n    return this.getAgent('Network');\n  }\n\n  overlayAgent(): ProtocolProxyApi.OverlayApi {\n    return this.getAgent('Overlay');\n  }\n\n  pageAgent(): ProtocolProxyApi.PageApi {\n    return this.getAgent('Page');\n  }\n\n  preloadAgent(): ProtocolProxyApi.PreloadApi {\n    return this.getAgent('Preload');\n  }\n\n  profilerAgent(): ProtocolProxyApi.ProfilerApi {\n    return this.getAgent('Profiler');\n  }\n\n  performanceAgent(): ProtocolProxyApi.PerformanceApi {\n    return this.getAgent('Performance');\n  }\n\n  runtimeAgent(): ProtocolProxyApi.RuntimeApi {\n    return this.getAgent('Runtime');\n  }\n\n  securityAgent(): ProtocolProxyApi.SecurityApi {\n    return this.getAgent('Security');\n  }\n\n  serviceWorkerAgent(): ProtocolProxyApi.ServiceWorkerApi {\n    return this.getAgent('ServiceWorker');\n  }\n\n  storageAgent(): ProtocolProxyApi.StorageApi {\n    return this.getAgent('Storage');\n  }\n\n  systemInfo(): ProtocolProxyApi.SystemInfoApi {\n    return this.getAgent('SystemInfo');\n  }\n\n  targetAgent(): ProtocolProxyApi.TargetApi {\n    return this.getAgent('Target');\n  }\n\n  tracingAgent(): ProtocolProxyApi.TracingApi {\n    return this.getAgent('Tracing');\n  }\n\n  webAudioAgent(): ProtocolProxyApi.WebAudioApi {\n    return this.getAgent('WebAudio');\n  }\n\n  webAuthnAgent(): ProtocolProxyApi.WebAuthnApi {\n    return this.getAgent('WebAuthn');\n  }\n\n  // Dispatcher registration and de-registration, keep alphabetically sorted.\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private registerDispatcher<Domain extends ProtocolDomainName>(\n      domain: Domain, dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const manager = this.#dispatchers.get(domain);\n    if (!manager) {\n      return;\n    }\n    manager.addDomainDispatcher(dispatcher);\n  }\n\n  /**\n   * Make sure that `Domain` is only ever instantiated with one protocol domain\n   * name, because if `Domain` allows multiple domains, the type is unsound.\n   */\n  private unregisterDispatcher<Domain extends ProtocolDomainName>(\n      domain: Domain, dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const manager = this.#dispatchers.get(domain);\n    if (!manager) {\n      return;\n    }\n    manager.removeDomainDispatcher(dispatcher);\n  }\n\n  registerAccessibilityDispatcher(dispatcher: ProtocolProxyApi.AccessibilityDispatcher): void {\n    this.registerDispatcher('Accessibility', dispatcher);\n  }\n\n  registerAutofillDispatcher(dispatcher: ProtocolProxyApi.AutofillDispatcher): void {\n    this.registerDispatcher('Autofill', dispatcher);\n  }\n\n  registerAnimationDispatcher(dispatcher: ProtocolProxyApi.AnimationDispatcher): void {\n    this.registerDispatcher('Animation', dispatcher);\n  }\n\n  registerAuditsDispatcher(dispatcher: ProtocolProxyApi.AuditsDispatcher): void {\n    this.registerDispatcher('Audits', dispatcher);\n  }\n\n  registerCSSDispatcher(dispatcher: ProtocolProxyApi.CSSDispatcher): void {\n    this.registerDispatcher('CSS', dispatcher);\n  }\n\n  registerDatabaseDispatcher(dispatcher: ProtocolProxyApi.DatabaseDispatcher): void {\n    this.registerDispatcher('Database', dispatcher);\n  }\n\n  registerBackgroundServiceDispatcher(dispatcher: ProtocolProxyApi.BackgroundServiceDispatcher): void {\n    this.registerDispatcher('BackgroundService', dispatcher);\n  }\n\n  registerDebuggerDispatcher(dispatcher: ProtocolProxyApi.DebuggerDispatcher): void {\n    this.registerDispatcher('Debugger', dispatcher);\n  }\n\n  unregisterDebuggerDispatcher(dispatcher: ProtocolProxyApi.DebuggerDispatcher): void {\n    this.unregisterDispatcher('Debugger', dispatcher);\n  }\n\n  registerDOMDispatcher(dispatcher: ProtocolProxyApi.DOMDispatcher): void {\n    this.registerDispatcher('DOM', dispatcher);\n  }\n\n  registerDOMStorageDispatcher(dispatcher: ProtocolProxyApi.DOMStorageDispatcher): void {\n    this.registerDispatcher('DOMStorage', dispatcher);\n  }\n\n  registerFetchDispatcher(dispatcher: ProtocolProxyApi.FetchDispatcher): void {\n    this.registerDispatcher('Fetch', dispatcher);\n  }\n\n  registerHeapProfilerDispatcher(dispatcher: ProtocolProxyApi.HeapProfilerDispatcher): void {\n    this.registerDispatcher('HeapProfiler', dispatcher);\n  }\n\n  registerInspectorDispatcher(dispatcher: ProtocolProxyApi.InspectorDispatcher): void {\n    this.registerDispatcher('Inspector', dispatcher);\n  }\n\n  registerLayerTreeDispatcher(dispatcher: ProtocolProxyApi.LayerTreeDispatcher): void {\n    this.registerDispatcher('LayerTree', dispatcher);\n  }\n\n  registerLogDispatcher(dispatcher: ProtocolProxyApi.LogDispatcher): void {\n    this.registerDispatcher('Log', dispatcher);\n  }\n\n  registerMediaDispatcher(dispatcher: ProtocolProxyApi.MediaDispatcher): void {\n    this.registerDispatcher('Media', dispatcher);\n  }\n\n  registerNetworkDispatcher(dispatcher: ProtocolProxyApi.NetworkDispatcher): void {\n    this.registerDispatcher('Network', dispatcher);\n  }\n\n  registerOverlayDispatcher(dispatcher: ProtocolProxyApi.OverlayDispatcher): void {\n    this.registerDispatcher('Overlay', dispatcher);\n  }\n\n  registerPageDispatcher(dispatcher: ProtocolProxyApi.PageDispatcher): void {\n    this.registerDispatcher('Page', dispatcher);\n  }\n\n  registerPreloadDispatcher(dispatcher: ProtocolProxyApi.PreloadDispatcher): void {\n    this.registerDispatcher('Preload', dispatcher);\n  }\n\n  registerProfilerDispatcher(dispatcher: ProtocolProxyApi.ProfilerDispatcher): void {\n    this.registerDispatcher('Profiler', dispatcher);\n  }\n\n  registerRuntimeDispatcher(dispatcher: ProtocolProxyApi.RuntimeDispatcher): void {\n    this.registerDispatcher('Runtime', dispatcher);\n  }\n\n  registerSecurityDispatcher(dispatcher: ProtocolProxyApi.SecurityDispatcher): void {\n    this.registerDispatcher('Security', dispatcher);\n  }\n\n  registerServiceWorkerDispatcher(dispatcher: ProtocolProxyApi.ServiceWorkerDispatcher): void {\n    this.registerDispatcher('ServiceWorker', dispatcher);\n  }\n\n  registerStorageDispatcher(dispatcher: ProtocolProxyApi.StorageDispatcher): void {\n    this.registerDispatcher('Storage', dispatcher);\n  }\n\n  registerTargetDispatcher(dispatcher: ProtocolProxyApi.TargetDispatcher): void {\n    this.registerDispatcher('Target', dispatcher);\n  }\n\n  registerTracingDispatcher(dispatcher: ProtocolProxyApi.TracingDispatcher): void {\n    this.registerDispatcher('Tracing', dispatcher);\n  }\n\n  registerWebAudioDispatcher(dispatcher: ProtocolProxyApi.WebAudioDispatcher): void {\n    this.registerDispatcher('WebAudio', dispatcher);\n  }\n\n  registerWebAuthnDispatcher(dispatcher: ProtocolProxyApi.WebAuthnDispatcher): void {\n    this.registerDispatcher('WebAuthn', dispatcher);\n  }\n\n  getNeedsNodeJSPatching(): boolean {\n    return this.needsNodeJSPatching;\n  }\n}\n\n/**\n * This is a class that serves as the prototype for a domains #agents (every target\n * has it's own set of #agents). The InspectorBackend keeps an instance of this class\n * per domain, and each TargetBase creates its #agents (via Object.create) and installs\n * this instance as prototype.\n *\n * The reasons this is done is so that on the prototypes we can install the implementations\n * of the invoke_enable, etc. methods that the front-end uses.\n */\nclass AgentPrototype {\n  replyArgs: {\n    [x: string]: string[],\n  };\n  description = '';\n  metadata: {[commandName: string]: {parameters: CommandParameter[], description: string, replyArgs: string[]}};\n  readonly domain: string;\n  target!: TargetBase;\n  constructor(domain: string) {\n    this.replyArgs = {};\n    this.domain = domain;\n    this.metadata = {};\n  }\n\n  registerCommand(\n      methodName: UnqualifiedName, parameters: CommandParameter[], replyArgs: string[], description: string): void {\n    const domainAndMethod = qualifyName(this.domain, methodName);\n    function sendMessagePromise(this: AgentPrototype, ...args: unknown[]): Promise<unknown> {\n      return AgentPrototype.prototype.sendMessageToBackendPromise.call(this, domainAndMethod, parameters, args);\n    }\n    // @ts-ignore Method code generation\n    this[methodName] = sendMessagePromise;\n    this.metadata[domainAndMethod] = {parameters, description, replyArgs};\n\n    function invoke(this: AgentPrototype, request: Object|undefined = {}): Promise<Protocol.ProtocolResponseWithError> {\n      return this.invoke(domainAndMethod, request);\n    }\n\n    // @ts-ignore Method code generation\n    this['invoke_' + methodName] = invoke;\n    this.replyArgs[domainAndMethod] = replyArgs;\n  }\n\n  private prepareParameters(\n      method: string, parameters: CommandParameter[], args: unknown[], errorCallback: (arg0: string) => void): Object\n      |null {\n    const params: {[x: string]: unknown} = {};\n    let hasParams = false;\n\n    for (const param of parameters) {\n      const paramName = param.name;\n      const typeName = param.type;\n      const optionalFlag = param.optional;\n\n      if (!args.length && !optionalFlag) {\n        errorCallback(\n            `Protocol Error: Invalid number of arguments for method '${method}' call. ` +\n            `It must have the following arguments ${JSON.stringify(parameters)}'.`);\n        return null;\n      }\n\n      const value = args.shift();\n      if (optionalFlag && typeof value === 'undefined') {\n        continue;\n      }\n      const expectedJSType = typeName === 'array' ? 'object' : typeName;\n      if (typeof value !== expectedJSType) {\n        errorCallback(\n            `Protocol Error: Invalid type of argument '${paramName}' for method '${method}' call. ` +\n            `It must be '${typeName}' but it is '${typeof value}'.`);\n        return null;\n      }\n\n      params[paramName] = value;\n      hasParams = true;\n    }\n\n    if (args.length) {\n      errorCallback(`Protocol Error: Extra ${args.length} arguments in a call to method '${method}'.`);\n      return null;\n    }\n\n    return hasParams ? params : null;\n  }\n\n  private sendMessageToBackendPromise(method: QualifiedName, parameters: CommandParameter[], args: unknown[]):\n      Promise<unknown> {\n    let errorMessage;\n    function onError(message: string): void {\n      console.error(message);\n      errorMessage = message;\n    }\n    const params = this.prepareParameters(method, parameters, args, onError);\n    if (errorMessage) {\n      return Promise.resolve(null);\n    }\n\n    return new Promise(resolve => {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const callback: Callback = (error: MessageError|null, result: any|null): void => {\n        if (error) {\n          if (!test.suppressRequestErrors && error.code !== DevToolsStubErrorCode && error.code !== GenericErrorCode &&\n              error.code !== ConnectionClosedErrorCode) {\n            console.error('Request ' + method + ' failed. ' + JSON.stringify(error));\n          }\n\n          resolve(null);\n          return;\n        }\n\n        const args = this.replyArgs[method];\n        resolve(result && args.length ? result[args[0]] : undefined);\n      };\n\n      const router = this.target.router();\n      if (!router) {\n        SessionRouter.dispatchConnectionError(callback, method);\n      } else {\n        router.sendMessage(this.target.sessionId, this.domain, method, params, callback);\n      }\n    });\n  }\n\n  private invoke(method: QualifiedName, request: Object|null): Promise<Protocol.ProtocolResponseWithError> {\n    return new Promise(fulfill => {\n      const callback: Callback = (error: MessageError|undefined|null, result: Object|null): void => {\n        if (error && !test.suppressRequestErrors && error.code !== DevToolsStubErrorCode &&\n            error.code !== GenericErrorCode && error.code !== ConnectionClosedErrorCode) {\n          console.error('Request ' + method + ' failed. ' + JSON.stringify(error));\n        }\n\n        const errorMessage = error?.message;\n        fulfill({...result, getError: () => errorMessage});\n      };\n\n      const router = this.target.router();\n      if (!router) {\n        SessionRouter.dispatchConnectionError(callback, method);\n      } else {\n        router.sendMessage(this.target.sessionId, this.domain, method, request, callback);\n      }\n    });\n  }\n}\n\n/**\n * A `DispatcherManager` has a collection of #dispatchers that implement one of the\n * `ProtocolProxyApi.{Foo}Dispatcher` interfaces. Each target uses one of these per\n * domain to manage the registered #dispatchers. The class knows the parameter names\n * of the events via `#eventArgs`, which is a map managed by the inspector back-end\n * so that there is only one map per domain that is shared among all DispatcherManagers.\n */\nclass DispatcherManager<Domain extends ProtocolDomainName> {\n  #eventArgs: ReadonlyEventParameterNames;\n  #dispatchers: ProtocolProxyApi.ProtocolDispatchers[Domain][] = [];\n\n  constructor(eventArgs: ReadonlyEventParameterNames) {\n    this.#eventArgs = eventArgs;\n  }\n\n  addDomainDispatcher(dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    this.#dispatchers.push(dispatcher);\n  }\n\n  removeDomainDispatcher(dispatcher: ProtocolProxyApi.ProtocolDispatchers[Domain]): void {\n    const index = this.#dispatchers.indexOf(dispatcher);\n    if (index === -1) {\n      return;\n    }\n    this.#dispatchers.splice(index, 1);\n  }\n\n  dispatch(event: UnqualifiedName, messageObject: EventMessage): void {\n    if (!this.#dispatchers.length) {\n      return;\n    }\n\n    if (!this.#eventArgs.has(messageObject.method)) {\n      InspectorBackend.reportProtocolWarning(\n          `Protocol Warning: Attempted to dispatch an unspecified event '${messageObject.method}'`, messageObject);\n      return;\n    }\n\n    const messageParams = {...messageObject.params};\n    for (let index = 0; index < this.#dispatchers.length; ++index) {\n      const dispatcher = this.#dispatchers[index];\n\n      if (event in dispatcher) {\n        const f = dispatcher[event as string as keyof ProtocolProxyApi.ProtocolDispatchers[Domain]];\n        // @ts-ignore Can't type check the dispatch.\n        f.call(dispatcher, messageParams);\n      }\n    }\n  }\n}\n\nexport const inspectorBackend = new InspectorBackend();\n"],
  "mappings": "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",
  "names": ["session", "args"]
}
