{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/CSSRule.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {CSSContainerQuery} from './CSSContainerQuery.js';\nimport {CSSLayer} from './CSSLayer.js';\nimport {CSSMedia} from './CSSMedia.js';\nimport type {CSSModel, Edit} from './CSSModel.js';\nimport {CSSScope} from './CSSScope.js';\nimport {CSSStyleDeclaration, Type} from './CSSStyleDeclaration.js';\nimport type {CSSStyleSheetHeader} from './CSSStyleSheetHeader.js';\nimport {CSSSupports} from './CSSSupports.js';\n\nexport class CSSRule {\n  readonly cssModelInternal: CSSModel;\n  styleSheetId: Protocol.CSS.StyleSheetId|undefined;\n  sourceURL: string|undefined;\n  origin: Protocol.CSS.StyleSheetOrigin;\n  style: CSSStyleDeclaration;\n\n  constructor(cssModel: CSSModel, payload: {\n    style: Protocol.CSS.CSSStyle,\n    styleSheetId: Protocol.CSS.StyleSheetId|undefined,\n    origin: Protocol.CSS.StyleSheetOrigin,\n  }) {\n    this.cssModelInternal = cssModel;\n    this.styleSheetId = payload.styleSheetId;\n\n    if (this.styleSheetId) {\n      const styleSheetHeader = this.getStyleSheetHeader(this.styleSheetId);\n      this.sourceURL = styleSheetHeader.sourceURL;\n    }\n    this.origin = payload.origin;\n    this.style = new CSSStyleDeclaration(this.cssModelInternal, this, payload.style, Type.Regular);\n  }\n\n  rebase(edit: Edit): void {\n    if (this.styleSheetId !== edit.styleSheetId) {\n      return;\n    }\n    this.style.rebase(edit);\n  }\n\n  resourceURL(): Platform.DevToolsPath.UrlString {\n    if (!this.styleSheetId) {\n      return Platform.DevToolsPath.EmptyUrlString;\n    }\n    const styleSheetHeader = this.getStyleSheetHeader(this.styleSheetId);\n    return styleSheetHeader.resourceURL();\n  }\n\n  isUserAgent(): boolean {\n    return this.origin === Protocol.CSS.StyleSheetOrigin.UserAgent;\n  }\n\n  isInjected(): boolean {\n    return this.origin === Protocol.CSS.StyleSheetOrigin.Injected;\n  }\n\n  isViaInspector(): boolean {\n    return this.origin === Protocol.CSS.StyleSheetOrigin.Inspector;\n  }\n\n  isRegular(): boolean {\n    return this.origin === Protocol.CSS.StyleSheetOrigin.Regular;\n  }\n\n  isKeyframeRule(): boolean {\n    return false;\n  }\n\n  cssModel(): CSSModel {\n    return this.cssModelInternal;\n  }\n\n  getStyleSheetHeader(styleSheetId: Protocol.CSS.StyleSheetId): CSSStyleSheetHeader {\n    const styleSheetHeader = this.cssModelInternal.styleSheetHeaderForId(styleSheetId);\n    console.assert(styleSheetHeader !== null);\n    return styleSheetHeader as CSSStyleSheetHeader;\n  }\n}\n\nclass CSSValue {\n  text: string;\n  range: TextUtils.TextRange.TextRange|undefined;\n  specificity: Protocol.CSS.Specificity|undefined;\n  constructor(payload: Protocol.CSS.Value) {\n    this.text = payload.text;\n    if (payload.range) {\n      this.range = TextUtils.TextRange.TextRange.fromObject(payload.range);\n    }\n    if (payload.specificity) {\n      this.specificity = payload.specificity;\n    }\n  }\n\n  rebase(edit: Edit): void {\n    if (!this.range) {\n      return;\n    }\n    this.range = this.range.rebaseAfterTextEdit(edit.oldRange, edit.newRange);\n  }\n}\n\nexport class CSSStyleRule extends CSSRule {\n  selectors!: CSSValue[];\n  nestingSelectors?: string[];\n  media: CSSMedia[];\n  containerQueries: CSSContainerQuery[];\n  supports: CSSSupports[];\n  scopes: CSSScope[];\n  layers: CSSLayer[];\n  ruleTypes: Protocol.CSS.CSSRuleType[];\n  wasUsed: boolean;\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSRule, wasUsed?: boolean) {\n    super(cssModel, {origin: payload.origin, style: payload.style, styleSheetId: payload.styleSheetId});\n    this.reinitializeSelectors(payload.selectorList);\n    this.nestingSelectors = payload.nestingSelectors;\n    this.media = payload.media ? CSSMedia.parseMediaArrayPayload(cssModel, payload.media) : [];\n    this.containerQueries = payload.containerQueries ?\n        CSSContainerQuery.parseContainerQueriesPayload(cssModel, payload.containerQueries) :\n        [];\n    this.scopes = payload.scopes ? CSSScope.parseScopesPayload(cssModel, payload.scopes) : [];\n    this.supports = payload.supports ? CSSSupports.parseSupportsPayload(cssModel, payload.supports) : [];\n    this.layers = payload.layers ? CSSLayer.parseLayerPayload(cssModel, payload.layers) : [];\n    this.ruleTypes = payload.ruleTypes || [];\n    this.wasUsed = wasUsed || false;\n  }\n\n  static createDummyRule(cssModel: CSSModel, selectorText: string): CSSStyleRule {\n    const dummyPayload = {\n      selectorList: {\n        text: '',\n        selectors: [{text: selectorText, value: undefined}],\n      },\n      style: {\n        styleSheetId: '0' as Protocol.CSS.StyleSheetId,\n        range: new TextUtils.TextRange.TextRange(0, 0, 0, 0),\n        shorthandEntries: [],\n        cssProperties: [],\n      },\n      origin: Protocol.CSS.StyleSheetOrigin.Inspector,\n    };\n    return new CSSStyleRule(cssModel, (dummyPayload as Protocol.CSS.CSSRule));\n  }\n\n  private reinitializeSelectors(selectorList: Protocol.CSS.SelectorList): void {\n    this.selectors = [];\n    for (let i = 0; i < selectorList.selectors.length; ++i) {\n      this.selectors.push(new CSSValue(selectorList.selectors[i]));\n    }\n  }\n\n  setSelectorText(newSelector: string): Promise<boolean> {\n    const styleSheetId = this.styleSheetId;\n    if (!styleSheetId) {\n      throw 'No rule stylesheet id';\n    }\n    const range = this.selectorRange();\n    if (!range) {\n      throw 'Rule selector is not editable';\n    }\n    return this.cssModelInternal.setSelectorText(styleSheetId, range, newSelector);\n  }\n\n  selectorText(): string {\n    return this.selectors.map(selector => selector.text).join(', ');\n  }\n\n  selectorRange(): TextUtils.TextRange.TextRange|null {\n    // Nested group rules might not contain a selector.\n    // https://www.w3.org/TR/css-nesting-1/#conditionals\n    if (this.selectors.length === 0) {\n      return null;\n    }\n\n    const firstRange = this.selectors[0].range;\n    const lastRange = this.selectors[this.selectors.length - 1].range;\n    if (!firstRange || !lastRange) {\n      return null;\n    }\n    return new TextUtils.TextRange.TextRange(\n        firstRange.startLine, firstRange.startColumn, lastRange.endLine, lastRange.endColumn);\n  }\n\n  lineNumberInSource(selectorIndex: number): number {\n    const selector = this.selectors[selectorIndex];\n    if (!selector || !selector.range || !this.styleSheetId) {\n      return 0;\n    }\n    const styleSheetHeader = this.getStyleSheetHeader(this.styleSheetId);\n    return styleSheetHeader.lineNumberInSource(selector.range.startLine);\n  }\n\n  columnNumberInSource(selectorIndex: number): number|undefined {\n    const selector = this.selectors[selectorIndex];\n    if (!selector || !selector.range || !this.styleSheetId) {\n      return undefined;\n    }\n    const styleSheetHeader = this.getStyleSheetHeader(this.styleSheetId);\n    return styleSheetHeader.columnNumberInSource(selector.range.startLine, selector.range.startColumn);\n  }\n\n  override rebase(edit: Edit): void {\n    if (this.styleSheetId !== edit.styleSheetId) {\n      return;\n    }\n    const range = this.selectorRange();\n    if (range && range.equal(edit.oldRange)) {\n      this.reinitializeSelectors((edit.payload as Protocol.CSS.SelectorList));\n    } else {\n      for (let i = 0; i < this.selectors.length; ++i) {\n        this.selectors[i].rebase(edit);\n      }\n    }\n    this.media.forEach(media => media.rebase(edit));\n    this.containerQueries.forEach(cq => cq.rebase(edit));\n    this.scopes.forEach(scope => scope.rebase(edit));\n    this.supports.forEach(supports => supports.rebase(edit));\n\n    super.rebase(edit);\n  }\n}\n\nexport class CSSPropertyRule extends CSSRule {\n  #name: CSSValue;\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSPropertyRule) {\n    super(cssModel, {origin: payload.origin, style: payload.style, styleSheetId: payload.styleSheetId});\n    this.#name = new CSSValue(payload.propertyName);\n  }\n\n  propertyName(): CSSValue {\n    return this.#name;\n  }\n\n  initialValue(): string|null {\n    return this.style.hasActiveProperty('initial-value') ? this.style.getPropertyValue('initial-value') : null;\n  }\n\n  syntax(): string {\n    return this.style.getPropertyValue('syntax');\n  }\n  inherits(): boolean {\n    return this.style.getPropertyValue('inherits') === 'true';\n  }\n  setPropertyName(newPropertyName: string): Promise<boolean> {\n    const styleSheetId = this.styleSheetId;\n    if (!styleSheetId) {\n      throw new Error('No rule stylesheet id');\n    }\n    const range = this.#name.range;\n    if (!range) {\n      throw new Error('Property name is not editable');\n    }\n    return this.cssModelInternal.setPropertyRulePropertyName(styleSheetId, range, newPropertyName);\n  }\n}\n\nexport class CSSFontPaletteValuesRule extends CSSRule {\n  readonly #paletteName: CSSValue;\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSFontPaletteValuesRule) {\n    super(cssModel, {origin: payload.origin, style: payload.style, styleSheetId: payload.styleSheetId});\n    this.#paletteName = new CSSValue(payload.fontPaletteName);\n  }\n\n  name(): CSSValue {\n    return this.#paletteName;\n  }\n}\n\nexport class CSSKeyframesRule {\n  readonly #animationName: CSSValue;\n  readonly #keyframesInternal: CSSKeyframeRule[];\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSKeyframesRule) {\n    this.#animationName = new CSSValue(payload.animationName);\n    this.#keyframesInternal = payload.keyframes.map(keyframeRule => new CSSKeyframeRule(cssModel, keyframeRule));\n  }\n\n  name(): CSSValue {\n    return this.#animationName;\n  }\n\n  keyframes(): CSSKeyframeRule[] {\n    return this.#keyframesInternal;\n  }\n}\n\nexport class CSSKeyframeRule extends CSSRule {\n  #keyText!: CSSValue;\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSKeyframeRule) {\n    super(cssModel, {origin: payload.origin, style: payload.style, styleSheetId: payload.styleSheetId});\n    this.reinitializeKey(payload.keyText);\n  }\n\n  key(): CSSValue {\n    return this.#keyText;\n  }\n\n  private reinitializeKey(payload: Protocol.CSS.Value): void {\n    this.#keyText = new CSSValue(payload);\n  }\n\n  override rebase(edit: Edit): void {\n    if (this.styleSheetId !== edit.styleSheetId || !this.#keyText.range) {\n      return;\n    }\n    if (edit.oldRange.equal(this.#keyText.range)) {\n      this.reinitializeKey((edit.payload as Protocol.CSS.Value));\n    } else {\n      this.#keyText.rebase(edit);\n    }\n\n    super.rebase(edit);\n  }\n\n  override isKeyframeRule(): boolean {\n    return true;\n  }\n\n  setKeyText(newKeyText: string): Promise<boolean> {\n    const styleSheetId = this.styleSheetId;\n    if (!styleSheetId) {\n      throw 'No rule stylesheet id';\n    }\n    const range = this.#keyText.range;\n    if (!range) {\n      throw 'Keyframe key is not editable';\n    }\n    return this.cssModelInternal.setKeyframeKey(styleSheetId, range, newKeyText);\n  }\n}\n\nexport class CSSPositionTryRule extends CSSRule {\n  readonly #name: CSSValue;\n  readonly #active: boolean;\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSPositionTryRule) {\n    super(cssModel, {origin: payload.origin, style: payload.style, styleSheetId: payload.styleSheetId});\n    this.#name = new CSSValue(payload.name);\n    this.#active = payload.active;\n  }\n\n  name(): CSSValue {\n    return this.#name;\n  }\n\n  active(): boolean {\n    return this.#active;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
