{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/IsolateManager.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nimport type {HeapProfilerModel} from './HeapProfilerModel.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport {type SDKModelObserver, TargetManager} from './TargetManager.js';\n\nlet isolateManagerInstance: IsolateManager;\n\nexport class IsolateManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDKModelObserver<RuntimeModel> {\n  readonly #isolatesInternal: Map<string, Isolate>;\n  #isolateIdByModel: Map<RuntimeModel, string|null>;\n  #observers: Set<Observer>;\n  #pollId: number;\n\n  constructor() {\n    super();\n    this.#isolatesInternal = new Map();\n    // #isolateIdByModel contains null while the isolateId is being retrieved.\n    this.#isolateIdByModel = new Map();\n    this.#observers = new Set();\n    TargetManager.instance().observeModels(RuntimeModel, this);\n    this.#pollId = 0;\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): IsolateManager {\n    if (!isolateManagerInstance || forceNew) {\n      isolateManagerInstance = new IsolateManager();\n    }\n\n    return isolateManagerInstance;\n  }\n\n  observeIsolates(observer: Observer): void {\n    if (this.#observers.has(observer)) {\n      throw new Error('Observer can only be registered once');\n    }\n    if (!this.#observers.size) {\n      void this.poll();\n    }\n    this.#observers.add(observer);\n    for (const isolate of this.#isolatesInternal.values()) {\n      observer.isolateAdded(isolate);\n    }\n  }\n\n  unobserveIsolates(observer: Observer): void {\n    this.#observers.delete(observer);\n    if (!this.#observers.size) {\n      ++this.#pollId;\n    }  // Stops the current polling loop.\n  }\n\n  modelAdded(model: RuntimeModel): void {\n    void this.modelAddedInternal(model);\n  }\n\n  private async modelAddedInternal(model: RuntimeModel): Promise<void> {\n    this.#isolateIdByModel.set(model, null);\n    const isolateId = await model.isolateId();\n    if (!this.#isolateIdByModel.has(model)) {\n      // The model has been removed during await.\n      return;\n    }\n    if (!isolateId) {\n      this.#isolateIdByModel.delete(model);\n      return;\n    }\n    this.#isolateIdByModel.set(model, isolateId);\n    let isolate = this.#isolatesInternal.get(isolateId);\n    if (!isolate) {\n      isolate = new Isolate(isolateId);\n      this.#isolatesInternal.set(isolateId, isolate);\n    }\n    isolate.modelsInternal.add(model);\n    if (isolate.modelsInternal.size === 1) {\n      for (const observer of this.#observers) {\n        observer.isolateAdded(isolate);\n      }\n    } else {\n      for (const observer of this.#observers) {\n        observer.isolateChanged(isolate);\n      }\n    }\n  }\n\n  modelRemoved(model: RuntimeModel): void {\n    const isolateId = this.#isolateIdByModel.get(model);\n    this.#isolateIdByModel.delete(model);\n    if (!isolateId) {\n      return;\n    }\n    const isolate = this.#isolatesInternal.get(isolateId);\n    if (!isolate) {\n      return;\n    }\n    isolate.modelsInternal.delete(model);\n    if (isolate.modelsInternal.size) {\n      for (const observer of this.#observers) {\n        observer.isolateChanged(isolate);\n      }\n      return;\n    }\n    for (const observer of this.#observers) {\n      observer.isolateRemoved(isolate);\n    }\n    this.#isolatesInternal.delete(isolateId);\n  }\n\n  isolateByModel(model: RuntimeModel): Isolate|null {\n    return this.#isolatesInternal.get(this.#isolateIdByModel.get(model) || '') || null;\n  }\n\n  isolates(): Iterable<Isolate> {\n    return this.#isolatesInternal.values();\n  }\n\n  private async poll(): Promise<void> {\n    const pollId = this.#pollId;\n    while (pollId === this.#pollId) {\n      await Promise.all(Array.from(this.isolates(), isolate => isolate.update()));\n      await new Promise(r => window.setTimeout(r, PollIntervalMs));\n    }\n  }\n}\n\nexport interface Observer {\n  isolateAdded(isolate: Isolate): void;\n\n  isolateRemoved(isolate: Isolate): void;\n  isolateChanged(isolate: Isolate): void;\n}\n\nexport const enum Events {\n  MEMORY_CHANGED = 'MemoryChanged',\n}\n\nexport type EventTypes = {\n  [Events.MEMORY_CHANGED]: Isolate,\n};\n\nexport const MemoryTrendWindowMs = 120e3;\nconst PollIntervalMs = 2e3;\n\nexport class Isolate {\n  readonly #idInternal: string;\n  readonly modelsInternal: Set<RuntimeModel>;\n  #usedHeapSizeInternal: number;\n  readonly #memoryTrend: MemoryTrend;\n\n  constructor(id: string) {\n    this.#idInternal = id;\n    this.modelsInternal = new Set();\n    this.#usedHeapSizeInternal = 0;\n    const count = MemoryTrendWindowMs / PollIntervalMs;\n    this.#memoryTrend = new MemoryTrend(count);\n  }\n\n  id(): string {\n    return this.#idInternal;\n  }\n\n  models(): Set<RuntimeModel> {\n    return this.modelsInternal;\n  }\n\n  runtimeModel(): RuntimeModel|null {\n    return this.modelsInternal.values().next().value || null;\n  }\n\n  heapProfilerModel(): HeapProfilerModel|null {\n    const runtimeModel = this.runtimeModel();\n    return runtimeModel && runtimeModel.heapProfilerModel();\n  }\n\n  async update(): Promise<void> {\n    const model = this.runtimeModel();\n    const usage = model && await model.heapUsage();\n    if (!usage) {\n      return;\n    }\n    this.#usedHeapSizeInternal = usage.usedSize;\n    this.#memoryTrend.add(this.#usedHeapSizeInternal);\n    IsolateManager.instance().dispatchEventToListeners(Events.MEMORY_CHANGED, this);\n  }\n\n  samplesCount(): number {\n    return this.#memoryTrend.count();\n  }\n\n  usedHeapSize(): number {\n    return this.#usedHeapSizeInternal;\n  }\n\n  /**\n   * bytes per millisecond\n   */\n  usedHeapSizeGrowRate(): number {\n    return this.#memoryTrend.fitSlope();\n  }\n}\n\nexport class MemoryTrend {\n  #maxCount: number;\n  #base!: number;\n  #index!: number;\n  #x!: number[];\n  #y!: number[];\n  #sx!: number;\n  #sy!: number;\n  #sxx!: number;\n  #sxy!: number;\n  constructor(maxCount: number) {\n    this.#maxCount = maxCount | 0;\n    this.reset();\n  }\n\n  reset(): void {\n    this.#base = Date.now();\n    this.#index = 0;\n    this.#x = [];\n    this.#y = [];\n    this.#sx = 0;\n    this.#sy = 0;\n    this.#sxx = 0;\n    this.#sxy = 0;\n  }\n\n  count(): number {\n    return this.#x.length;\n  }\n\n  add(heapSize: number, timestamp?: number): void {\n    const x = typeof timestamp === 'number' ? timestamp : Date.now() - this.#base;\n    const y = heapSize;\n    if (this.#x.length === this.#maxCount) {\n      // Turns into a cyclic buffer once it reaches the |#maxCount|.\n      const x0 = this.#x[this.#index];\n      const y0 = this.#y[this.#index];\n      this.#sx -= x0;\n      this.#sy -= y0;\n      this.#sxx -= x0 * x0;\n      this.#sxy -= x0 * y0;\n    }\n    this.#sx += x;\n    this.#sy += y;\n    this.#sxx += x * x;\n    this.#sxy += x * y;\n    this.#x[this.#index] = x;\n    this.#y[this.#index] = y;\n    this.#index = (this.#index + 1) % this.#maxCount;\n  }\n\n  fitSlope(): number {\n    // We use the linear regression model to find the slope.\n    const n = this.count();\n    return n < 2 ? 0 : (this.#sxy - this.#sx * this.#sy / n) / (this.#sxx - this.#sx * this.#sx / n);\n  }\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
