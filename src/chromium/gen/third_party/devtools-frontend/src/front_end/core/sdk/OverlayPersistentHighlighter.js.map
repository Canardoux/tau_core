{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/OverlayPersistentHighlighter.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\n\nimport type {DOMModel} from './DOMModel.js';\nimport {OverlayColorGenerator} from './OverlayColorGenerator.js';\n\nexport const enum HighlightType {\n  FLEX = 'FLEX',\n  GRID = 'GRID',\n  SCROLL_SNAP = 'SCROLL_SNAP',\n  CONTAINER_QUERY = 'CONTAINER_QUERY',\n  ISOLATED_ELEMENT = 'ISOLATED_ELEMENT',\n}\n\nexport interface PersistentHighlightSettingItem {\n  url: Platform.DevToolsPath.UrlString;\n  path: string;\n  type: HighlightType;\n}\n\nexport interface PersistentHighlighterCallbacks {\n  onGridOverlayStateChanged: ({nodeId, enabled}: {nodeId: Protocol.DOM.NodeId, enabled: boolean}) => void;\n  onFlexOverlayStateChanged: ({nodeId, enabled}: {nodeId: Protocol.DOM.NodeId, enabled: boolean}) => void;\n  onScrollSnapOverlayStateChanged: ({nodeId, enabled}: {nodeId: Protocol.DOM.NodeId, enabled: boolean}) => void;\n  onContainerQueryOverlayStateChanged: ({nodeId, enabled}: {nodeId: Protocol.DOM.NodeId, enabled: boolean}) => void;\n}\n\nexport class OverlayPersistentHighlighter {\n  readonly #model: OverlayModel;\n  readonly #colors: Map<Protocol.DOM.NodeId, Common.Color.Color>;\n  readonly #persistentHighlightSetting: Common.Settings.Setting<PersistentHighlightSettingItem[]>;\n  #gridHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.GridHighlightConfig>;\n  #scrollSnapHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.ScrollSnapContainerHighlightConfig>;\n  #flexHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.FlexContainerHighlightConfig>;\n  #containerQueryHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.ContainerQueryContainerHighlightConfig>;\n  #isolatedElementHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.IsolationModeHighlightConfig>;\n  #gridColorGenerator: OverlayColorGenerator;\n  #flexColorGenerator: OverlayColorGenerator;\n\n  /**\n   * @see `front_end/core/sdk/sdk-meta.ts`\n   */\n  readonly #showGridLineLabelsSetting: Common.Settings.Setting<string>;\n  readonly #extendGridLinesSetting: Common.Settings.Setting<boolean>;\n  readonly #showGridAreasSetting: Common.Settings.Setting<boolean>;\n  readonly #showGridTrackSizesSetting: Common.Settings.Setting<boolean>;\n\n  readonly #callbacks: PersistentHighlighterCallbacks;\n  constructor(model: OverlayModel, callbacks: PersistentHighlighterCallbacks) {\n    this.#model = model;\n    this.#callbacks = callbacks;\n\n    this.#persistentHighlightSetting =\n        Common.Settings.Settings.instance().createLocalSetting('persistent-highlight-setting', []);\n\n    this.#gridHighlights = new Map();\n\n    this.#scrollSnapHighlights = new Map();\n\n    this.#flexHighlights = new Map();\n\n    this.#containerQueryHighlights = new Map();\n\n    this.#isolatedElementHighlights = new Map();\n\n    this.#colors = new Map();\n\n    this.#gridColorGenerator = new OverlayColorGenerator();\n    this.#flexColorGenerator = new OverlayColorGenerator();\n\n    this.#showGridLineLabelsSetting = Common.Settings.Settings.instance().moduleSetting('show-grid-line-labels');\n    this.#showGridLineLabelsSetting.addChangeListener(this.onSettingChange, this);\n    this.#extendGridLinesSetting = Common.Settings.Settings.instance().moduleSetting('extend-grid-lines');\n    this.#extendGridLinesSetting.addChangeListener(this.onSettingChange, this);\n    this.#showGridAreasSetting = Common.Settings.Settings.instance().moduleSetting('show-grid-areas');\n    this.#showGridAreasSetting.addChangeListener(this.onSettingChange, this);\n    this.#showGridTrackSizesSetting = Common.Settings.Settings.instance().moduleSetting('show-grid-track-sizes');\n    this.#showGridTrackSizesSetting.addChangeListener(this.onSettingChange, this);\n  }\n\n  private onSettingChange(): void {\n    this.resetOverlay();\n  }\n\n  private buildGridHighlightConfig(nodeId: Protocol.DOM.NodeId): Protocol.Overlay.GridHighlightConfig {\n    const mainColor = this.colorOfGrid(nodeId).asLegacyColor();\n    const background = mainColor.setAlpha(0.1).asLegacyColor();\n    const gapBackground = mainColor.setAlpha(0.3).asLegacyColor();\n    const gapHatch = mainColor.setAlpha(0.8).asLegacyColor();\n\n    const showGridExtensionLines = this.#extendGridLinesSetting.get();\n    const showPositiveLineNumbers = this.#showGridLineLabelsSetting.get() === 'lineNumbers';\n    const showNegativeLineNumbers = showPositiveLineNumbers;\n    const showLineNames = this.#showGridLineLabelsSetting.get() === 'lineNames';\n    return {\n      rowGapColor: gapBackground.toProtocolRGBA(),\n      rowHatchColor: gapHatch.toProtocolRGBA(),\n      columnGapColor: gapBackground.toProtocolRGBA(),\n      columnHatchColor: gapHatch.toProtocolRGBA(),\n      gridBorderColor: mainColor.toProtocolRGBA(),\n      gridBorderDash: false,\n      rowLineColor: mainColor.toProtocolRGBA(),\n      columnLineColor: mainColor.toProtocolRGBA(),\n      rowLineDash: true,\n      columnLineDash: true,\n      showGridExtensionLines,\n      showPositiveLineNumbers,\n      showNegativeLineNumbers,\n      showLineNames,\n      showAreaNames: this.#showGridAreasSetting.get(),\n      showTrackSizes: this.#showGridTrackSizesSetting.get(),\n      areaBorderColor: mainColor.toProtocolRGBA(),\n      gridBackgroundColor: background.toProtocolRGBA(),\n    };\n  }\n\n  private buildFlexContainerHighlightConfig(nodeId: Protocol.DOM.NodeId):\n      Protocol.Overlay.FlexContainerHighlightConfig {\n    const mainColor = this.colorOfFlex(nodeId).asLegacyColor();\n    return {\n      containerBorder: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dashed},\n      itemSeparator: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dotted},\n      lineSeparator: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dashed},\n      mainDistributedSpace: {hatchColor: mainColor.toProtocolRGBA()},\n      crossDistributedSpace: {hatchColor: mainColor.toProtocolRGBA()},\n    };\n  }\n\n  private buildScrollSnapContainerHighlightConfig(_nodeId: number):\n      Protocol.Overlay.ScrollSnapContainerHighlightConfig {\n    return {\n      snapAreaBorder: {\n        color: Common.Color.PageHighlight.GridBorder.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n      snapportBorder: {color: Common.Color.PageHighlight.GridBorder.toProtocolRGBA()},\n      scrollMarginColor: Common.Color.PageHighlight.Margin.toProtocolRGBA(),\n      scrollPaddingColor: Common.Color.PageHighlight.Padding.toProtocolRGBA(),\n    };\n  }\n\n  highlightGridInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#gridHighlights.set(nodeId, this.buildGridHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n    this.savePersistentHighlightSetting();\n    this.#callbacks.onGridOverlayStateChanged({nodeId, enabled: true});\n  }\n\n  isGridHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#gridHighlights.has(nodeId);\n  }\n\n  colorOfGrid(nodeId: Protocol.DOM.NodeId): Common.Color.Color {\n    let color = this.#colors.get(nodeId);\n    if (!color) {\n      color = this.#gridColorGenerator.next();\n      this.#colors.set(nodeId, color);\n    }\n\n    return color;\n  }\n\n  setColorOfGrid(nodeId: Protocol.DOM.NodeId, color: Common.Color.Color): void {\n    this.#colors.set(nodeId, color);\n  }\n\n  hideGridInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#gridHighlights.has(nodeId)) {\n      this.#gridHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n      this.savePersistentHighlightSetting();\n      this.#callbacks.onGridOverlayStateChanged({nodeId, enabled: false});\n    }\n  }\n\n  highlightScrollSnapInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#scrollSnapHighlights.set(nodeId, this.buildScrollSnapContainerHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n    this.#callbacks.onScrollSnapOverlayStateChanged({nodeId, enabled: true});\n    this.savePersistentHighlightSetting();\n  }\n\n  isScrollSnapHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#scrollSnapHighlights.has(nodeId);\n  }\n\n  hideScrollSnapInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#scrollSnapHighlights.has(nodeId)) {\n      this.#scrollSnapHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n      this.#callbacks.onScrollSnapOverlayStateChanged({nodeId, enabled: false});\n      this.savePersistentHighlightSetting();\n    }\n  }\n\n  highlightFlexInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#flexHighlights.set(nodeId, this.buildFlexContainerHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n    this.savePersistentHighlightSetting();\n    this.#callbacks.onFlexOverlayStateChanged({nodeId, enabled: true});\n  }\n\n  isFlexHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#flexHighlights.has(nodeId);\n  }\n\n  colorOfFlex(nodeId: Protocol.DOM.NodeId): Common.Color.Color {\n    let color = this.#colors.get(nodeId);\n    if (!color) {\n      color = this.#flexColorGenerator.next();\n      this.#colors.set(nodeId, color);\n    }\n\n    return color;\n  }\n\n  setColorOfFlex(nodeId: Protocol.DOM.NodeId, color: Common.Color.Color): void {\n    this.#colors.set(nodeId, color);\n  }\n\n  hideFlexInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#flexHighlights.has(nodeId)) {\n      this.#flexHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n      this.savePersistentHighlightSetting();\n      this.#callbacks.onFlexOverlayStateChanged({nodeId, enabled: false});\n    }\n  }\n\n  highlightContainerQueryInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#containerQueryHighlights.set(nodeId, this.buildContainerQueryContainerHighlightConfig());\n    this.updateHighlightsInOverlay();\n    this.savePersistentHighlightSetting();\n    this.#callbacks.onContainerQueryOverlayStateChanged({nodeId, enabled: true});\n  }\n\n  hideContainerQueryInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#containerQueryHighlights.has(nodeId)) {\n      this.#containerQueryHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n      this.savePersistentHighlightSetting();\n      this.#callbacks.onContainerQueryOverlayStateChanged({nodeId, enabled: false});\n    }\n  }\n\n  isContainerQueryHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#containerQueryHighlights.has(nodeId);\n  }\n\n  private buildContainerQueryContainerHighlightConfig(): Protocol.Overlay.ContainerQueryContainerHighlightConfig {\n    return {\n      containerBorder: {\n        color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n      descendantBorder: {\n        color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n    };\n  }\n\n  highlightIsolatedElementInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#isolatedElementHighlights.set(nodeId, this.buildIsolationModeHighlightConfig());\n    this.updateHighlightsInOverlay();\n    this.savePersistentHighlightSetting();\n  }\n\n  hideIsolatedElementInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#isolatedElementHighlights.has(nodeId)) {\n      this.#isolatedElementHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n      this.savePersistentHighlightSetting();\n    }\n  }\n\n  isIsolatedElementHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#isolatedElementHighlights.has(nodeId);\n  }\n\n  private buildIsolationModeHighlightConfig(): Protocol.Overlay.IsolationModeHighlightConfig {\n    return {\n      resizerColor: Common.Color.IsolationModeHighlight.Resizer.toProtocolRGBA(),\n      resizerHandleColor: Common.Color.IsolationModeHighlight.ResizerHandle.toProtocolRGBA(),\n      maskColor: Common.Color.IsolationModeHighlight.Mask.toProtocolRGBA(),\n    };\n  }\n\n  hideAllInOverlayWithoutSave(): void {\n    this.#flexHighlights.clear();\n    this.#gridHighlights.clear();\n    this.#scrollSnapHighlights.clear();\n    this.#containerQueryHighlights.clear();\n    this.#isolatedElementHighlights.clear();\n    this.updateHighlightsInOverlay();\n  }\n\n  refreshHighlights(): void {\n    const gridsNeedUpdate = this.updateHighlightsForDeletedNodes(this.#gridHighlights);\n    const flexboxesNeedUpdate = this.updateHighlightsForDeletedNodes(this.#flexHighlights);\n    const scrollSnapsNeedUpdate = this.updateHighlightsForDeletedNodes(this.#scrollSnapHighlights);\n    const containerQueriesNeedUpdate = this.updateHighlightsForDeletedNodes(this.#containerQueryHighlights);\n    const isolatedElementsNeedUpdate = this.updateHighlightsForDeletedNodes(this.#isolatedElementHighlights);\n    if (flexboxesNeedUpdate || gridsNeedUpdate || scrollSnapsNeedUpdate || containerQueriesNeedUpdate ||\n        isolatedElementsNeedUpdate) {\n      this.updateHighlightsInOverlay();\n      this.savePersistentHighlightSetting();\n    }\n  }\n\n  private updateHighlightsForDeletedNodes(highlights: Map<Protocol.DOM.NodeId, unknown>): boolean {\n    let needsUpdate = false;\n    for (const nodeId of highlights.keys()) {\n      if (this.#model.getDOMModel().nodeForId(nodeId) === null) {\n        highlights.delete(nodeId);\n        needsUpdate = true;\n      }\n    }\n    return needsUpdate;\n  }\n\n  resetOverlay(): void {\n    for (const nodeId of this.#gridHighlights.keys()) {\n      this.#gridHighlights.set(nodeId, this.buildGridHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.#flexHighlights.keys()) {\n      this.#flexHighlights.set(nodeId, this.buildFlexContainerHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.#scrollSnapHighlights.keys()) {\n      this.#scrollSnapHighlights.set(nodeId, this.buildScrollSnapContainerHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.#containerQueryHighlights.keys()) {\n      this.#containerQueryHighlights.set(nodeId, this.buildContainerQueryContainerHighlightConfig());\n    }\n    for (const nodeId of this.#isolatedElementHighlights.keys()) {\n      this.#isolatedElementHighlights.set(nodeId, this.buildIsolationModeHighlightConfig());\n    }\n    this.updateHighlightsInOverlay();\n  }\n\n  private updateHighlightsInOverlay(): void {\n    const hasNodesToHighlight = this.#gridHighlights.size > 0 || this.#flexHighlights.size > 0 ||\n        this.#containerQueryHighlights.size > 0 || this.#isolatedElementHighlights.size > 0;\n    this.#model.setShowViewportSizeOnResize(!hasNodesToHighlight);\n    this.updateGridHighlightsInOverlay();\n    this.updateFlexHighlightsInOverlay();\n    this.updateScrollSnapHighlightsInOverlay();\n    this.updateContainerQueryHighlightsInOverlay();\n    this.updateIsolatedElementHighlightsInOverlay();\n  }\n\n  private updateGridHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const gridNodeHighlightConfigs = [];\n    for (const [nodeId, gridHighlightConfig] of this.#gridHighlights.entries()) {\n      gridNodeHighlightConfigs.push({nodeId, gridHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowGridOverlays({gridNodeHighlightConfigs});\n  }\n\n  private updateFlexHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const flexNodeHighlightConfigs = [];\n    for (const [nodeId, flexContainerHighlightConfig] of this.#flexHighlights.entries()) {\n      flexNodeHighlightConfigs.push({nodeId, flexContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowFlexOverlays({flexNodeHighlightConfigs});\n  }\n\n  private updateScrollSnapHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const scrollSnapHighlightConfigs = [];\n    for (const [nodeId, scrollSnapContainerHighlightConfig] of this.#scrollSnapHighlights.entries()) {\n      scrollSnapHighlightConfigs.push({nodeId, scrollSnapContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowScrollSnapOverlays({scrollSnapHighlightConfigs});\n  }\n\n  updateContainerQueryHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const containerQueryHighlightConfigs = [];\n    for (const [nodeId, containerQueryContainerHighlightConfig] of this.#containerQueryHighlights.entries()) {\n      containerQueryHighlightConfigs.push({nodeId, containerQueryContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowContainerQueryOverlays({containerQueryHighlightConfigs});\n  }\n\n  updateIsolatedElementHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const isolatedElementHighlightConfigs = [];\n    for (const [nodeId, isolationModeHighlightConfig] of this.#isolatedElementHighlights.entries()) {\n      isolatedElementHighlightConfigs.push({nodeId, isolationModeHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowIsolatedElements({isolatedElementHighlightConfigs});\n  }\n\n  async restoreHighlightsForDocument(): Promise<void> {\n    this.#flexHighlights = new Map();\n    this.#gridHighlights = new Map();\n    this.#scrollSnapHighlights = new Map();\n    this.#containerQueryHighlights = new Map();\n    this.#isolatedElementHighlights = new Map();\n\n    // this.currentURL() is empty when the page is reloaded because the\n    // new document has not been requested yet and the old one has been\n    // removed. Therefore, we need to request the document and wait for it.\n    // Note that requestDocument() caches the document so that it is requested\n    // only once.\n    const document = await this.#model.getDOMModel().requestDocument();\n    const currentURL = document ? document.documentURL : Platform.DevToolsPath.EmptyUrlString;\n    await Promise.all(this.#persistentHighlightSetting.get().map(async persistentHighlight => {\n      if (persistentHighlight.url === currentURL) {\n        return this.#model.getDOMModel().pushNodeByPathToFrontend(persistentHighlight.path).then(nodeId => {\n          const node = this.#model.getDOMModel().nodeForId(nodeId);\n          if (!node) {\n            return;\n          }\n\n          switch (persistentHighlight.type) {\n            case HighlightType.GRID:\n              this.#gridHighlights.set(node.id, this.buildGridHighlightConfig(node.id));\n              this.#callbacks.onGridOverlayStateChanged({nodeId: node.id, enabled: true});\n              break;\n            case HighlightType.FLEX:\n              this.#flexHighlights.set(node.id, this.buildFlexContainerHighlightConfig(node.id));\n              this.#callbacks.onFlexOverlayStateChanged({nodeId: node.id, enabled: true});\n              break;\n            case HighlightType.CONTAINER_QUERY:\n              this.#containerQueryHighlights.set(node.id, this.buildContainerQueryContainerHighlightConfig());\n              this.#callbacks.onContainerQueryOverlayStateChanged({nodeId: node.id, enabled: true});\n              break;\n            case HighlightType.SCROLL_SNAP:\n              this.#scrollSnapHighlights.set(node.id, this.buildScrollSnapContainerHighlightConfig(node.id));\n              this.#callbacks.onScrollSnapOverlayStateChanged({nodeId: node.id, enabled: true});\n              break;\n            case HighlightType.ISOLATED_ELEMENT:\n              this.#isolatedElementHighlights.set(node.id, this.buildIsolationModeHighlightConfig());\n              break;\n          }\n        });\n      }\n    }));\n\n    this.updateHighlightsInOverlay();\n  }\n\n  private currentUrl(): Platform.DevToolsPath.UrlString {\n    const domDocument = this.#model.getDOMModel().existingDocument();\n    return domDocument ? domDocument.documentURL : Platform.DevToolsPath.EmptyUrlString;\n  }\n\n  private getPersistentHighlightSettingForOneType(highlights: Map<Protocol.DOM.NodeId, unknown>, type: HighlightType):\n      PersistentHighlightSettingItem[] {\n    const persistentHighlights: PersistentHighlightSettingItem[] = [];\n    for (const nodeId of highlights.keys()) {\n      const node = this.#model.getDOMModel().nodeForId(nodeId);\n      if (node) {\n        persistentHighlights.push({url: this.currentUrl(), path: node.path(), type});\n      }\n    }\n\n    return persistentHighlights;\n  }\n\n  private savePersistentHighlightSetting(): void {\n    const currentURL = this.currentUrl();\n\n    // Keep the highlights that are not related to this document.\n    const highlightsInOtherDocuments =\n        this.#persistentHighlightSetting.get().filter((persistentSetting: {\n                                                        url: Platform.DevToolsPath.UrlString,\n                                                      }) => persistentSetting.url !== currentURL);\n\n    const persistentHighlights = [\n      ...highlightsInOtherDocuments,\n      ...this.getPersistentHighlightSettingForOneType(this.#gridHighlights, HighlightType.GRID),\n      ...this.getPersistentHighlightSettingForOneType(this.#flexHighlights, HighlightType.FLEX),\n      ...this.getPersistentHighlightSettingForOneType(this.#containerQueryHighlights, HighlightType.CONTAINER_QUERY),\n      ...this.getPersistentHighlightSettingForOneType(this.#scrollSnapHighlights, HighlightType.SCROLL_SNAP),\n      ...this.getPersistentHighlightSettingForOneType(this.#isolatedElementHighlights, HighlightType.ISOLATED_ELEMENT),\n    ];\n\n    this.#persistentHighlightSetting.set(persistentHighlights);\n  }\n}\n\nexport interface OverlayAgent {\n  /* eslint-disable @typescript-eslint/naming-convention */\n  invoke_setShowGridOverlays(param: {\n    gridNodeHighlightConfigs: Array<{\n      nodeId: number,\n      gridHighlightConfig: Protocol.Overlay.GridHighlightConfig,\n    }>,\n  }): void;\n\n  invoke_setShowFlexOverlays(param: {\n    flexNodeHighlightConfigs: Array<{\n      nodeId: number,\n      flexContainerHighlightConfig: Protocol.Overlay.FlexContainerHighlightConfig,\n    }>,\n  }): void;\n\n  invoke_setShowScrollSnapOverlays(param: {\n    scrollSnapHighlightConfigs: Array<{\n      nodeId: number,\n    }>,\n  }): void;\n\n  invoke_setShowContainerQueryOverlays(param: {\n    containerQueryHighlightConfigs: Array<{\n      nodeId: number,\n      containerQueryContainerHighlightConfig: Protocol.Overlay.ContainerQueryContainerHighlightConfig,\n    }>,\n  }): void;\n\n  invoke_setShowIsolatedElements(param: {\n    isolatedElementHighlightConfigs: Array<{\n      nodeId: number,\n      isolationModeHighlightConfig: Protocol.Overlay.IsolationModeHighlightConfig,\n    }>,\n  }): void;\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface Target {\n  overlayAgent(): OverlayAgent;\n}\n\nexport interface OverlayModel {\n  getDOMModel(): DOMModel;\n\n  target(): Target;\n\n  setShowViewportSizeOnResize(value: boolean): void;\n}\n"],
  "mappings": "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",
  "names": ["HighlightType"]
}
