{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/LogModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../host/host.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Capability, type Target} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class LogModel extends SDKModel<EventTypes> implements ProtocolProxyApi.LogDispatcher {\n  readonly #logAgent: ProtocolProxyApi.LogApi;\n  constructor(target: Target) {\n    super(target);\n    target.registerLogDispatcher(this);\n    this.#logAgent = target.logAgent();\n    void this.#logAgent.invoke_enable();\n    if (!Host.InspectorFrontendHost.isUnderTest()) {\n      void this.#logAgent.invoke_startViolationsReport({\n        config: [\n          {name: Protocol.Log.ViolationSettingName.LongTask, threshold: 200},\n          {name: Protocol.Log.ViolationSettingName.LongLayout, threshold: 30},\n          {name: Protocol.Log.ViolationSettingName.BlockedEvent, threshold: 100},\n          {name: Protocol.Log.ViolationSettingName.BlockedParser, threshold: -1},\n          {name: Protocol.Log.ViolationSettingName.Handler, threshold: 150},\n          {name: Protocol.Log.ViolationSettingName.RecurringHandler, threshold: 50},\n          {name: Protocol.Log.ViolationSettingName.DiscouragedAPIUse, threshold: -1},\n        ],\n      });\n    }\n  }\n\n  entryAdded({entry}: Protocol.Log.EntryAddedEvent): void {\n    this.dispatchEventToListeners(Events.ENTRY_ADDED, {logModel: this, entry});\n  }\n\n  requestClear(): void {\n    void this.#logAgent.invoke_clear();\n  }\n}\n\nexport const enum Events {\n  ENTRY_ADDED = 'EntryAdded',\n}\n\nexport interface EntryAddedEvent {\n  logModel: LogModel;\n  entry: Protocol.Log.LogEntry;\n}\n\nexport type EventTypes = {\n  [Events.ENTRY_ADDED]: EntryAddedEvent,\n};\n\nSDKModel.register(LogModel, {capabilities: Capability.LOG, autostart: true});\n"],
  "mappings": ";AAIA,YAAY,UAAU;AAEtB,YAAY,cAAc;AAE1B,SAAQ,kBAA8B;AACtC,SAAQ,gBAAe;AAEhB,aAAM,iBAAiB,SAA+D;AAAA,EAClF;AAAA,EACT,YAAY,QAAgB;AAC1B,UAAM,MAAM;AACZ,WAAO,sBAAsB,IAAI;AACjC,SAAK,YAAY,OAAO,SAAS;AACjC,SAAK,KAAK,UAAU,cAAc;AAClC,QAAI,CAAC,KAAK,sBAAsB,YAAY,GAAG;AAC7C,WAAK,KAAK,UAAU,6BAA6B;AAAA,QAC/C,QAAQ;AAAA,UACN,EAAC,MAAM,SAAS,IAAI,qBAAqB,UAAU,WAAW,IAAG;AAAA,UACjE,EAAC,MAAM,SAAS,IAAI,qBAAqB,YAAY,WAAW,GAAE;AAAA,UAClE,EAAC,MAAM,SAAS,IAAI,qBAAqB,cAAc,WAAW,IAAG;AAAA,UACrE,EAAC,MAAM,SAAS,IAAI,qBAAqB,eAAe,WAAW,GAAE;AAAA,UACrE,EAAC,MAAM,SAAS,IAAI,qBAAqB,SAAS,WAAW,IAAG;AAAA,UAChE,EAAC,MAAM,SAAS,IAAI,qBAAqB,kBAAkB,WAAW,GAAE;AAAA,UACxE,EAAC,MAAM,SAAS,IAAI,qBAAqB,mBAAmB,WAAW,GAAE;AAAA,QAC3E;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,WAAW,EAAC,MAAK,GAAuC;AACtD,SAAK,yBAAyB,gCAAoB,EAAC,UAAU,MAAM,MAAK,CAAC;AAAA,EAC3E;AAAA,EAEA,eAAqB;AACnB,SAAK,KAAK,UAAU,aAAa;AAAA,EACnC;AACF;AAEO,WAAW,SAAX,kBAAWA,YAAX;AACL,EAAAA,QAAA,iBAAc;AADE,SAAAA;AAAA,GAAA;AAalB,SAAS,SAAS,UAAU,EAAC,cAAc,WAAW,KAAK,WAAW,KAAI,CAAC;",
  "names": ["Events"]
}
