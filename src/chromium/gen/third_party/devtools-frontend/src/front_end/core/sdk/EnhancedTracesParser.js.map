{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/EnhancedTracesParser.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport {UserVisibleError} from '../platform/platform.js';\n\nimport type {\n  HydratingDataPerTarget, RehydratingExecutionContext, RehydratingScript, RehydratingTarget} from\n  './RehydratingObject.js';\n\ninterface RehydratingTraceBase {\n  cat: string;\n  pid: number;\n}\n\ninterface TraceEventTargetRundown extends RehydratingTraceBase {\n  cat: 'disabled-by-default-devtools.target-rundown';\n  args: {\n    data: {\n      frame: Protocol.Page.FrameId,\n      frameType: string,\n      url: string,\n      isolate: string,\n      v8context: string,\n      origin: string,\n      scriptId: Protocol.Runtime.ScriptId,\n      isDefault?: boolean,\n      contextType?: string,\n    },\n  };\n}\n\ninterface TraceEventScriptRundown extends RehydratingTraceBase {\n  cat: 'disabled-by-default-devtools.v8-source-rundown';\n  args: {\n    data: {\n      isolate: string,\n      executionContextId: Protocol.Runtime.ExecutionContextId,\n      scriptId: Protocol.Runtime.ScriptId,\n      startLine: number,\n      startColumn: number,\n      endLine: number,\n      endColumn: number,\n      url: string,\n      hash: string,\n      isModule: boolean,\n      hasSourceUrl: boolean,\n      sourceMapUrl?: string,\n    },\n  };\n}\n\ninterface TraceEventScriptRundownSource extends RehydratingTraceBase {\n  cat: 'disabled-by-default-devtools.v8-source-rundown-sources';\n  args: {\n    data: {\n      isolate: string,\n      scriptId: Protocol.Runtime.ScriptId,\n      length?: number,\n      sourceText?: string,\n    },\n  };\n}\n\nexport class EnhancedTracesParser {\n  #scriptRundownEvents: TraceEventScriptRundown[] = [];\n  #scriptToV8Context: Map<string, string> = new Map<string, string>();\n  #scriptToScriptSource: Map<string, string> = new Map<string, string>();\n  #largeScriptToScriptSource: Map<string, string[]> = new Map<string, string[]>();\n  #scriptToSourceLength: Map<string, number> = new Map<string, number>();\n  #targets: RehydratingTarget[] = [];\n  #executionContexts: RehydratingExecutionContext[] = [];\n  #scripts: RehydratingScript[] = [];\n  static readonly enhancedTraceVersion: number = 1;\n\n  constructor(traceEvents: unknown[]) {\n    // Initialize with the trace events provided.\n    try {\n      this.parseEnhancedTrace(traceEvents);\n    } catch (e) {\n      throw new UserVisibleError.UserVisibleError(e);\n    }\n  }\n\n  parseEnhancedTrace(traceEvents: unknown[]): void {\n    for (const event of traceEvents) {\n      if (this.isTargetRundownEvent(event)) {\n        // Set up script to v8 context mapping\n        const data = event.args?.data;\n        this.#scriptToV8Context.set(this.getScriptIsolateId(data.isolate, data.scriptId), data.v8context);\n        // Add target\n        if (!this.#targets.find(target => target.targetId === data.frame)) {\n          this.#targets.push({\n            targetId: data.frame,\n            type: data.frameType,\n            isolate: data.isolate,\n            pid: event.pid,\n            url: data.url,\n          });\n        }\n        // Add execution context, need to put back execution context id with info from other traces\n        if (!this.#executionContexts.find(executionContext => executionContext.v8Context === data.v8context)) {\n          this.#executionContexts.push({\n            id: -1 as Protocol.Runtime.ExecutionContextId,\n            origin: data.origin,\n            v8Context: data.v8context,\n            auxData: {\n              frameId: data.frame,\n              isDefault: data.isDefault,\n              type: data.contextType,\n            },\n            isolate: data.isolate,\n          });\n        }\n      } else if (this.isScriptRundownEvent(event)) {\n        this.#scriptRundownEvents.push(event);\n        const data = event.args.data;\n        // Add script\n        if (!this.#scripts.find(script => script.scriptId === data.scriptId && script.isolate === data.isolate)) {\n          this.#scripts.push({\n            scriptId: data.scriptId,\n            isolate: data.isolate,\n            executionContextId: data.executionContextId,\n            startLine: data.startLine,\n            startColumn: data.startColumn,\n            endLine: data.endLine,\n            endColumn: data.endColumn,\n            hash: data.hash,\n            isModule: data.isModule,\n            url: data.url,\n            hasSourceUrl: data.hasSourceUrl,\n            sourceMapUrl: data.sourceMapUrl,\n          });\n        }\n      } else if (this.isScriptRundownSourceEvent(event)) {\n        // Set up script to source text and length mapping\n        const data = event.args.data;\n        const scriptIsolateId = this.getScriptIsolateId(data.isolate, data.scriptId);\n        if ('splitIndex' in data && 'splitCount' in data) {\n          if (!this.#largeScriptToScriptSource.has(scriptIsolateId)) {\n            this.#largeScriptToScriptSource.set(scriptIsolateId, new Array(data.splitCount).fill('') as string[]);\n          }\n          const splittedSource = this.#largeScriptToScriptSource.get(scriptIsolateId);\n          if (splittedSource && data.sourceText) {\n            splittedSource[data.splitIndex as number] = data.sourceText;\n          }\n        } else {\n          if (data.sourceText) {\n            this.#scriptToScriptSource.set(scriptIsolateId, data.sourceText);\n          }\n          if (data.length) {\n            this.#scriptToSourceLength.set(scriptIsolateId, data.length);\n          }\n        }\n      }\n    }\n  }\n\n  data(): HydratingDataPerTarget {\n    // Put back execution context id\n    const v8ContextToExecutionContextId: Map<string, Protocol.Runtime.ExecutionContextId> =\n        new Map<string, Protocol.Runtime.ExecutionContextId>();\n    this.#scriptRundownEvents.forEach(scriptRundownEvent => {\n      const data = scriptRundownEvent.args.data;\n      const v8Context = this.#scriptToV8Context.get(this.getScriptIsolateId(data.isolate, data.scriptId));\n      if (v8Context) {\n        v8ContextToExecutionContextId.set(v8Context, data.executionContextId);\n      }\n    });\n    this.#executionContexts.forEach(executionContext => {\n      if (executionContext.v8Context) {\n        const id = v8ContextToExecutionContextId.get(executionContext.v8Context);\n        if (id) {\n          executionContext.id = id;\n        }\n      }\n    });\n\n    // Put back script source text and length\n    this.#scripts.forEach(script => {\n      const scriptIsolateId = this.getScriptIsolateId(script.isolate, script.scriptId);\n      if (this.#scriptToScriptSource.has(scriptIsolateId)) {\n        script.sourceText = this.#scriptToScriptSource.get(scriptIsolateId);\n        script.length = this.#scriptToSourceLength.get(scriptIsolateId);\n      } else if (this.#largeScriptToScriptSource.has(scriptIsolateId)) {\n        const splittedSources = this.#largeScriptToScriptSource.get(scriptIsolateId);\n        if (splittedSources) {\n          script.sourceText = splittedSources.join('');\n          script.length = script.sourceText.length;\n        }\n      }\n      // put in the aux data\n      script.auxData =\n          this.#executionContexts\n              .find(context => context.id === script.executionContextId && context.isolate === script.isolate)\n              ?.auxData;\n    });\n    const data = new Map<RehydratingTarget, [RehydratingExecutionContext[], RehydratingScript[]]>();\n    for (const target of this.#targets) {\n      data.set(target, this.groupContextsAndScriptsUnderTarget(target, this.#executionContexts, this.#scripts));\n    }\n    return data;\n  }\n\n  private getScriptIsolateId(isolate: string, scriptId: Protocol.Runtime.ScriptId): string {\n    return scriptId + '@' + isolate;\n  }\n\n  private isTraceEvent(event: unknown): event is RehydratingTraceBase {\n    return 'cat' in (event as RehydratingTraceBase) && 'pid' in (event as RehydratingTraceBase);\n  }\n\n  private isTargetRundownEvent(event: unknown): event is TraceEventTargetRundown {\n    return this.isTraceEvent(event) && event.cat === 'disabled-by-default-devtools.target-rundown';\n  }\n\n  private isScriptRundownEvent(event: unknown): event is TraceEventScriptRundown {\n    return this.isTraceEvent(event) && event.cat === 'disabled-by-default-devtools.v8-source-rundown';\n  }\n\n  private isScriptRundownSourceEvent(event: unknown): event is TraceEventScriptRundownSource {\n    return this.isTraceEvent(event) && event.cat === 'disabled-by-default-devtools.v8-source-rundown-sources';\n  }\n\n  private groupContextsAndScriptsUnderTarget(\n      target: RehydratingTarget, executionContexts: RehydratingExecutionContext[],\n      scripts: RehydratingScript[]): [RehydratingExecutionContext[], RehydratingScript[]] {\n    const filteredExecutionContexts: RehydratingExecutionContext[] = [];\n    const filteredScripts: RehydratingScript[] = [];\n    for (const executionContext of executionContexts) {\n      if (executionContext.auxData?.frameId === target.targetId) {\n        filteredExecutionContexts.push(executionContext);\n      }\n    }\n    for (const script of scripts) {\n      if (script.auxData === null) {\n        console.error(script + ' missing aux data');\n      }\n      if (script.auxData?.frameId === target.targetId) {\n        filteredScripts.push(script);\n      }\n    }\n    return [filteredExecutionContexts, filteredScripts];\n  }\n}\n"],
  "mappings": "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",
  "names": ["data"]
}
