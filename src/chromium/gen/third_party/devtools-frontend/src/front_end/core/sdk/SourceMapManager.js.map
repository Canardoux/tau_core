{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/SourceMapManager.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\n\nimport type {FrameAssociated} from './FrameAssociated.js';\nimport {PageResourceLoader, type PageResourceLoadInitiator} from './PageResourceLoader.js';\nimport {parseSourceMap, SourceMap, type SourceMapV3} from './SourceMap.js';\nimport {type Target, Type} from './Target.js';\n\nexport class SourceMapManager<T extends FrameAssociated> extends Common.ObjectWrapper.ObjectWrapper<EventTypes<T>> {\n  readonly #target: Target;\n  #isEnabled: boolean;\n  readonly #clientData: Map<T, ClientData>;\n  readonly #sourceMaps: Map<SourceMap, T>;\n  #attachingClient: T|null;\n\n  constructor(target: Target) {\n    super();\n\n    this.#target = target;\n    this.#isEnabled = true;\n    this.#attachingClient = null;\n    this.#clientData = new Map();\n    this.#sourceMaps = new Map();\n  }\n\n  setEnabled(isEnabled: boolean): void {\n    if (isEnabled === this.#isEnabled) {\n      return;\n    }\n\n    // We need this copy, because `this.#clientData` is getting modified\n    // in the loop body and trying to iterate over it at the same time\n    // leads to an infinite loop.\n    const clientData = [...this.#clientData.entries()];\n    for (const [client] of clientData) {\n      this.detachSourceMap(client);\n    }\n    this.#isEnabled = isEnabled;\n    for (const [client, {relativeSourceURL, relativeSourceMapURL}] of clientData) {\n      this.attachSourceMap(client, relativeSourceURL, relativeSourceMapURL);\n    }\n  }\n\n  private static getBaseUrl(target: Target|null): Platform.DevToolsPath.UrlString {\n    while (target && target.type() !== Type.FRAME) {\n      target = target.parentTarget();\n    }\n    return target?.inspectedURL() ?? Platform.DevToolsPath.EmptyUrlString;\n  }\n\n  static resolveRelativeSourceURL(target: Target|null, url: Platform.DevToolsPath.UrlString):\n      Platform.DevToolsPath.UrlString {\n    url = Common.ParsedURL.ParsedURL.completeURL(SourceMapManager.getBaseUrl(target), url) ?? url;\n    return url;\n  }\n\n  sourceMapForClient(client: T): SourceMap|undefined {\n    return this.#clientData.get(client)?.sourceMap;\n  }\n\n  // This method actively awaits the source map, if still loading.\n  sourceMapForClientPromise(client: T): Promise<SourceMap|undefined> {\n    const clientData = this.#clientData.get(client);\n    if (!clientData) {\n      return Promise.resolve(undefined);\n    }\n\n    return clientData.sourceMapPromise;\n  }\n\n  clientForSourceMap(sourceMap: SourceMap): T|undefined {\n    return this.#sourceMaps.get(sourceMap);\n  }\n\n  // TODO(bmeurer): We are lying about the type of |relativeSourceURL| here.\n  attachSourceMap(\n      client: T, relativeSourceURL: Platform.DevToolsPath.UrlString, relativeSourceMapURL: string|undefined): void {\n    if (this.#clientData.has(client)) {\n      throw new Error('SourceMap is already attached or being attached to client');\n    }\n    if (!relativeSourceMapURL) {\n      return;\n    }\n\n    let clientData: ClientData|null = {\n      relativeSourceURL,\n      relativeSourceMapURL,\n      sourceMap: undefined,\n      sourceMapPromise: Promise.resolve(undefined),\n    };\n    if (this.#isEnabled) {\n      // The `// #sourceURL=foo` can be a random string, but is generally an absolute path.\n      // Complete it to inspected page url for relative links.\n      const sourceURL = SourceMapManager.resolveRelativeSourceURL(this.#target, relativeSourceURL);\n      const sourceMapURL = Common.ParsedURL.ParsedURL.completeURL(sourceURL, relativeSourceMapURL);\n      if (sourceMapURL) {\n        if (this.#attachingClient) {\n          // This should not happen\n          console.error('Attaching source map may cancel previously attaching source map');\n        }\n        this.#attachingClient = client;\n        this.dispatchEventToListeners(Events.SourceMapWillAttach, {client});\n\n        if (this.#attachingClient === client) {\n          this.#attachingClient = null;\n          const initiator = client.createPageResourceLoadInitiator();\n          clientData.sourceMapPromise =\n              loadSourceMap(sourceMapURL, initiator)\n                  .then(\n                      payload => {\n                        const sourceMap = new SourceMap(sourceURL, sourceMapURL, payload);\n                        if (this.#clientData.get(client) === clientData) {\n                          clientData.sourceMap = sourceMap;\n                          this.#sourceMaps.set(sourceMap, client);\n                          this.dispatchEventToListeners(Events.SourceMapAttached, {client, sourceMap});\n                        }\n                        return sourceMap;\n                      },\n                      () => {\n                        if (this.#clientData.get(client) === clientData) {\n                          this.dispatchEventToListeners(Events.SourceMapFailedToAttach, {client});\n                        }\n                        return undefined;\n                      });\n        } else {\n          // Assume cancelAttachSourceMap was called.\n          if (this.#attachingClient) {\n            // This should not happen\n            console.error('Cancelling source map attach because another source map is attaching');\n          }\n          clientData = null;\n          this.dispatchEventToListeners(Events.SourceMapFailedToAttach, {client});\n        }\n      }\n    }\n    if (clientData) {\n      this.#clientData.set(client, clientData);\n    }\n  }\n\n  cancelAttachSourceMap(client: T): void {\n    if (client === this.#attachingClient) {\n      this.#attachingClient = null;\n    } else {\n      // This should not happen.\n      if (this.#attachingClient) {\n        console.error('cancel attach source map requested but a different source map was being attached');\n      } else {\n        console.error('cancel attach source map requested but no source map was being attached');\n      }\n    }\n  }\n\n  detachSourceMap(client: T): void {\n    const clientData = this.#clientData.get(client);\n    if (!clientData) {\n      return;\n    }\n    this.#clientData.delete(client);\n    if (!this.#isEnabled) {\n      return;\n    }\n    const {sourceMap} = clientData;\n    if (sourceMap) {\n      this.#sourceMaps.delete(sourceMap);\n      this.dispatchEventToListeners(Events.SourceMapDetached, {client, sourceMap});\n    } else {\n      this.dispatchEventToListeners(Events.SourceMapFailedToAttach, {client});\n    }\n  }\n}\n\nasync function loadSourceMap(\n    url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): Promise<SourceMapV3> {\n  try {\n    const {content} = await PageResourceLoader.instance().loadResource(url, initiator);\n    return parseSourceMap(content);\n  } catch (cause) {\n    throw new Error(`Could not load content for ${url}: ${cause.message}`, {cause});\n  }\n}\n\ntype ClientData = {\n  relativeSourceURL: Platform.DevToolsPath.UrlString,\n  // Stores the raw sourceMappingURL as provided by V8. These are not guaranteed to\n  // be valid URLs and will be checked and resolved once `attachSourceMap` is called.\n  relativeSourceMapURL: string,\n  sourceMap: SourceMap|undefined,\n  sourceMapPromise: Promise<SourceMap|undefined>,\n};\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  SourceMapWillAttach = 'SourceMapWillAttach',\n  SourceMapFailedToAttach = 'SourceMapFailedToAttach',\n  SourceMapAttached = 'SourceMapAttached',\n  SourceMapDetached = 'SourceMapDetached',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport type EventTypes<T extends FrameAssociated> = {\n  [Events.SourceMapWillAttach]: {client: T},\n  [Events.SourceMapFailedToAttach]: {client: T},\n  [Events.SourceMapAttached]: {client: T, sourceMap: SourceMap},\n  [Events.SourceMapDetached]: {client: T, sourceMap: SourceMap},\n};\n"],
  "mappings": "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",
  "names": ["Events"]
}
