{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/PageResourceLoader.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport {FrameManager} from './FrameManager.js';\nimport {IOModel} from './IOModel.js';\nimport {MultitargetNetworkManager, NetworkManager} from './NetworkManager.js';\nimport {\n  Events as ResourceTreeModelEvents,\n  PrimaryPageChangeType,\n  type ResourceTreeFrame,\n  ResourceTreeModel,\n} from './ResourceTreeModel.js';\nimport type {Target} from './Target.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   *@description Error message for canceled source map loads\n   */\n  loadCanceledDueToReloadOf: 'Load canceled due to reload of inspected page',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/PageResourceLoader.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ExtensionInitiator {\n  target: null;\n  frameId: null;\n  initiatorUrl: Platform.DevToolsPath.UrlString;\n  extensionId: string;\n}\n\nexport type PageResourceLoadInitiator = {\n  target: null,\n  frameId: Protocol.Page.FrameId,\n  initiatorUrl: Platform.DevToolsPath.UrlString|null,\n}|{\n  target: Target,\n  frameId: Protocol.Page.FrameId | null,\n  initiatorUrl: Platform.DevToolsPath.UrlString | null,\n}|ExtensionInitiator;\n\nfunction isExtensionInitiator(initiator: PageResourceLoadInitiator): initiator is ExtensionInitiator {\n  return 'extensionId' in initiator;\n}\n\nexport interface PageResource {\n  success: boolean|null;\n  errorMessage?: string;\n  initiator: PageResourceLoadInitiator;\n  url: Platform.DevToolsPath.UrlString;\n  size: number|null;\n}\n\n// Used for revealing a resource.\nexport class ResourceKey {\n  readonly key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n\nlet pageResourceLoader: PageResourceLoader|null = null;\n\ninterface LoadQueueEntry {\n  resolve: () => void;\n  reject: (arg0: Error) => void;\n}\n\n/**\n * The page resource loader is a bottleneck for all DevTools-initiated resource loads. For each such load, it keeps a\n * `PageResource` object around that holds meta information. This can be as the basis for reporting to the user which\n * resources were loaded, and whether there was a load error.\n */\nexport class PageResourceLoader extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #currentlyLoading: number;\n  #currentlyLoadingPerTarget: Map<Protocol.Target.TargetID|'main', number>;\n  readonly #maxConcurrentLoads: number;\n  #pageResources: Map<string, PageResource>;\n  #queuedLoads: LoadQueueEntry[];\n  readonly #loadOverride: ((arg0: string) => Promise<{\n                             success: boolean,\n                             content: string,\n                             errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                           }>)|null;\n  constructor(\n      loadOverride: ((arg0: string) => Promise<{\n                       success: boolean,\n                       content: string,\n                       errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                     }>)|null,\n      maxConcurrentLoads: number) {\n    super();\n    this.#currentlyLoading = 0;\n    this.#currentlyLoadingPerTarget = new Map();\n    this.#maxConcurrentLoads = maxConcurrentLoads;\n    this.#pageResources = new Map();\n    this.#queuedLoads = [];\n    TargetManager.instance().addModelListener(\n        ResourceTreeModel, ResourceTreeModelEvents.PrimaryPageChanged, this.onPrimaryPageChanged, this);\n    this.#loadOverride = loadOverride;\n  }\n\n  static instance({forceNew, loadOverride, maxConcurrentLoads}: {\n    forceNew: boolean,\n    loadOverride: (null|((arg0: string) => Promise<{\n                           success: boolean,\n                           content: string,\n                           errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                         }>)),\n    maxConcurrentLoads: number,\n  } = {\n    forceNew: false,\n    loadOverride: null,\n    maxConcurrentLoads: 500,\n  }): PageResourceLoader {\n    if (!pageResourceLoader || forceNew) {\n      pageResourceLoader = new PageResourceLoader(loadOverride, maxConcurrentLoads);\n    }\n\n    return pageResourceLoader;\n  }\n\n  static removeInstance(): void {\n    pageResourceLoader = null;\n  }\n\n  onPrimaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<{frame: ResourceTreeFrame, type: PrimaryPageChangeType}>): void {\n    const {frame: mainFrame, type} = event.data;\n    if (!mainFrame.isOutermostFrame()) {\n      return;\n    }\n    for (const {reject} of this.#queuedLoads) {\n      reject(new Error(i18nString(UIStrings.loadCanceledDueToReloadOf)));\n    }\n    this.#queuedLoads = [];\n    const mainFrameTarget = mainFrame.resourceTreeModel().target();\n    const keptResources = new Map<string, PageResource>();\n    // If the navigation is a prerender-activation, the pageResources for the destination page have\n    // already been preloaded. In such cases, we therefore don't just discard all pageResources, but\n    // instead make sure to keep the pageResources for the prerendered target.\n    for (const [key, pageResource] of this.#pageResources.entries()) {\n      if ((type === PrimaryPageChangeType.ACTIVATION) && mainFrameTarget === pageResource.initiator.target) {\n        keptResources.set(key, pageResource);\n      }\n    }\n    this.#pageResources = keptResources;\n    this.dispatchEventToListeners(Events.UPDATE);\n  }\n\n  getResourcesLoaded(): Map<string, PageResource> {\n    return this.#pageResources;\n  }\n\n  getScopedResourcesLoaded(): Map<string, PageResource> {\n    return new Map([...this.#pageResources].filter(\n        ([_, pageResource]) => TargetManager.instance().isInScope(pageResource.initiator.target) ||\n            isExtensionInitiator(pageResource.initiator)));\n  }\n\n  /**\n   * Loading is the number of currently loading and queued items. Resources is the total number of resources,\n   * including loading and queued resources, but not including resources that are still loading but scheduled\n   * for cancelation.;\n   */\n  getNumberOfResources(): {\n    loading: number,\n    queued: number,\n    resources: number,\n  } {\n    return {loading: this.#currentlyLoading, queued: this.#queuedLoads.length, resources: this.#pageResources.size};\n  }\n\n  getScopedNumberOfResources(): {\n    loading: number,\n    resources: number,\n  } {\n    const targetManager = TargetManager.instance();\n    let loadingCount = 0;\n    for (const [targetId, count] of this.#currentlyLoadingPerTarget) {\n      const target = targetManager.targetById(targetId);\n      if (targetManager.isInScope(target)) {\n        loadingCount += count;\n      }\n    }\n    return {loading: loadingCount, resources: this.getScopedResourcesLoaded().size};\n  }\n\n  private async acquireLoadSlot(target: Target|null): Promise<void> {\n    this.#currentlyLoading++;\n    if (target) {\n      const currentCount = this.#currentlyLoadingPerTarget.get(target.id()) || 0;\n      this.#currentlyLoadingPerTarget.set(target.id(), currentCount + 1);\n    }\n    if (this.#currentlyLoading > this.#maxConcurrentLoads) {\n      const entry: LoadQueueEntry = {resolve: () => {}, reject: (): void => {}};\n      const waitForCapacity = new Promise<void>((resolve, reject) => {\n        entry.resolve = resolve;\n        entry.reject = reject;\n      });\n      this.#queuedLoads.push(entry);\n      await waitForCapacity;\n    }\n  }\n\n  private releaseLoadSlot(target: Target|null): void {\n    this.#currentlyLoading--;\n    if (target) {\n      const currentCount = this.#currentlyLoadingPerTarget.get(target.id());\n      if (currentCount) {\n        this.#currentlyLoadingPerTarget.set(target.id(), currentCount - 1);\n      }\n    }\n    const entry = this.#queuedLoads.shift();\n    if (entry) {\n      entry.resolve();\n    }\n  }\n\n  static makeExtensionKey(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): string {\n    if (isExtensionInitiator(initiator) && initiator.extensionId) {\n      return `${url}-${initiator.extensionId}`;\n    }\n    throw new Error('Invalid initiator');\n  }\n\n  static makeKey(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): string {\n    if (initiator.frameId) {\n      return `${url}-${initiator.frameId}`;\n    }\n    if (initiator.target) {\n      return `${url}-${initiator.target.id()}`;\n    }\n    throw new Error('Invalid initiator');\n  }\n\n  resourceLoadedThroughExtension(pageResource: PageResource): void {\n    const key = PageResourceLoader.makeExtensionKey(pageResource.url, pageResource.initiator);\n    this.#pageResources.set(key, pageResource);\n    this.dispatchEventToListeners(Events.UPDATE);\n  }\n\n  async loadResource(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): Promise<{\n    content: string,\n  }> {\n    if (isExtensionInitiator(initiator)) {\n      throw new Error('Invalid initiator');\n    }\n    const key = PageResourceLoader.makeKey(url, initiator);\n    const pageResource: PageResource = {success: null, size: null, errorMessage: undefined, url, initiator};\n    this.#pageResources.set(key, pageResource);\n    this.dispatchEventToListeners(Events.UPDATE);\n    try {\n      await this.acquireLoadSlot(initiator.target);\n      const resultPromise = this.dispatchLoad(url, initiator);\n      const result = await resultPromise;\n      pageResource.errorMessage = result.errorDescription.message;\n      pageResource.success = result.success;\n      if (result.success) {\n        pageResource.size = result.content.length;\n        return {content: result.content};\n      }\n      throw new Error(result.errorDescription.message);\n    } catch (e) {\n      if (pageResource.errorMessage === undefined) {\n        pageResource.errorMessage = e.message;\n      }\n      if (pageResource.success === null) {\n        pageResource.success = false;\n      }\n      throw e;\n    } finally {\n      this.releaseLoadSlot(initiator.target);\n      this.dispatchEventToListeners(Events.UPDATE);\n    }\n  }\n\n  private async dispatchLoad(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): Promise<{\n    success: boolean,\n    content: string,\n    errorDescription: Host.ResourceLoader.LoadErrorDescription,\n  }> {\n    if (isExtensionInitiator(initiator)) {\n      throw new Error('Invalid initiator');\n    }\n\n    let failureReason: string|null = null;\n    if (this.#loadOverride) {\n      return this.#loadOverride(url);\n    }\n    const parsedURL = new Common.ParsedURL.ParsedURL(url);\n    const eligibleForLoadFromTarget = getLoadThroughTargetSetting().get() && parsedURL && parsedURL.scheme !== 'file' &&\n        parsedURL.scheme !== 'data' && parsedURL.scheme !== 'devtools';\n    Host.userMetrics.developerResourceScheme(this.getDeveloperResourceScheme(parsedURL));\n    if (eligibleForLoadFromTarget) {\n      try {\n        if (initiator.target) {\n          Host.userMetrics.developerResourceLoaded(\n              Host.UserMetrics.DeveloperResourceLoaded.LOAD_THROUGH_PAGE_VIA_TARGET);\n          const result = await this.loadFromTarget(initiator.target, initiator.frameId, url);\n          return result;\n        }\n        const frame = FrameManager.instance().getFrame(initiator.frameId);\n        if (frame) {\n          Host.userMetrics.developerResourceLoaded(\n              Host.UserMetrics.DeveloperResourceLoaded.LOAD_THROUGH_PAGE_VIA_FRAME);\n          const result = await this.loadFromTarget(frame.resourceTreeModel().target(), initiator.frameId, url);\n          return result;\n        }\n      } catch (e) {\n        if (e instanceof Error) {\n          Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.LOAD_THROUGH_PAGE_FAILURE);\n          failureReason = e.message;\n        }\n      }\n      Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.LOAD_THROUGH_PAGE_FALLBACK);\n    } else {\n      const code = getLoadThroughTargetSetting().get() ?\n          Host.UserMetrics.DeveloperResourceLoaded.FALLBACK_PER_PROTOCOL :\n          Host.UserMetrics.DeveloperResourceLoaded.FALLBACK_PER_OVERRIDE;\n      Host.userMetrics.developerResourceLoaded(code);\n    }\n\n    const result = await MultitargetNetworkManager.instance().loadResource(url);\n    if (eligibleForLoadFromTarget && !result.success) {\n      Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.FALLBACK_FAILURE);\n    }\n    if (failureReason) {\n      // In case we have a success, add a note about why the load through the target failed.\n      result.errorDescription.message =\n          `Fetch through target failed: ${failureReason}; Fallback: ${result.errorDescription.message}`;\n    }\n    return result;\n  }\n\n  private getDeveloperResourceScheme(parsedURL: Common.ParsedURL.ParsedURL|\n                                     null): Host.UserMetrics.DeveloperResourceScheme {\n    if (!parsedURL || parsedURL.scheme === '') {\n      return Host.UserMetrics.DeveloperResourceScheme.UKNOWN;\n    }\n    const isLocalhost = parsedURL.host === 'localhost' || parsedURL.host.endsWith('.localhost');\n    switch (parsedURL.scheme) {\n      case 'file':\n        return Host.UserMetrics.DeveloperResourceScheme.FILE;\n      case 'data':\n        return Host.UserMetrics.DeveloperResourceScheme.DATA;\n      case 'blob':\n        return Host.UserMetrics.DeveloperResourceScheme.BLOB;\n      case 'http':\n        return isLocalhost ? Host.UserMetrics.DeveloperResourceScheme.HTTP_LOCALHOST :\n                             Host.UserMetrics.DeveloperResourceScheme.HTTP;\n      case 'https':\n        return isLocalhost ? Host.UserMetrics.DeveloperResourceScheme.HTTPS_LOCALHOST :\n                             Host.UserMetrics.DeveloperResourceScheme.HTTPS;\n    }\n    return Host.UserMetrics.DeveloperResourceScheme.OTHER;\n  }\n\n  private async loadFromTarget(\n      target: Target, frameId: Protocol.Page.FrameId|null, url: Platform.DevToolsPath.UrlString): Promise<{\n    success: boolean,\n    content: string,\n    errorDescription: {\n      statusCode: number,\n      netError: number|undefined,\n      netErrorName: string|undefined,\n      message: string,\n      urlValid: undefined,\n    },\n  }> {\n    const networkManager = (target.model(NetworkManager) as NetworkManager);\n    const ioModel = (target.model(IOModel) as IOModel);\n    const disableCache = Common.Settings.Settings.instance().moduleSetting('cache-disabled').get();\n    const resource = await networkManager.loadNetworkResource(frameId, url, {disableCache, includeCredentials: true});\n    try {\n      const content = resource.stream ? await ioModel.readToString(resource.stream) : '';\n      return {\n        success: resource.success,\n        content,\n        errorDescription: {\n          statusCode: resource.httpStatusCode || 0,\n          netError: resource.netError,\n          netErrorName: resource.netErrorName,\n          message: Host.ResourceLoader.netErrorToMessage(\n                       resource.netError, resource.httpStatusCode, resource.netErrorName) ||\n              '',\n          urlValid: undefined,\n        },\n      };\n    } finally {\n      if (resource.stream) {\n        void ioModel.close(resource.stream);\n      }\n    }\n  }\n}\n\nexport function getLoadThroughTargetSetting(): Common.Settings.Setting<boolean> {\n  return Common.Settings.Settings.instance().createSetting('load-through-target', true);\n}\n\nexport const enum Events {\n  UPDATE = 'Update',\n}\n\nexport type EventTypes = {\n  [Events.UPDATE]: void,\n};\n"],
  "mappings": "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",
  "names": ["result", "Events"]
}
