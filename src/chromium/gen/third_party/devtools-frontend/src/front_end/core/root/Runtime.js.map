{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/root/Runtime.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nconst queryParamsObject = new URLSearchParams(location.search);\n\nlet runtimePlatform = '';\n\nlet runtimeInstance: Runtime|undefined;\n\nexport function getRemoteBase(location: string = self.location.toString()): {\n  base: string,\n  version: string,\n}|null {\n  const url = new URL(location);\n  const remoteBase = url.searchParams.get('remoteBase');\n  if (!remoteBase) {\n    return null;\n  }\n\n  const version = /\\/serve_file\\/(@[0-9a-zA-Z]+)\\/?$/.exec(remoteBase);\n  if (!version) {\n    return null;\n  }\n\n  return {base: `devtools://devtools/remote/serve_file/${version[1]}/`, version: version[1]};\n}\n\nexport function getPathName(): string {\n  return window.location.pathname;\n}\n\nexport class Runtime {\n  private constructor() {\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): Runtime {\n    const {forceNew} = opts;\n    if (!runtimeInstance || forceNew) {\n      runtimeInstance = new Runtime();\n    }\n\n    return runtimeInstance;\n  }\n\n  static removeInstance(): void {\n    runtimeInstance = undefined;\n  }\n\n  static queryParam(name: string): string|null {\n    return queryParamsObject.get(name);\n  }\n\n  static setQueryParamForTesting(name: string, value: string): void {\n    queryParamsObject.set(name, value);\n  }\n\n  static experimentsSetting(): {\n    [x: string]: boolean,\n  } {\n    try {\n      return Platform.StringUtilities.toKebabCaseKeys(\n          JSON.parse(self.localStorage && self.localStorage['experiments'] ? self.localStorage['experiments'] : '{}') as\n          {\n            [x: string]: boolean,\n          });\n    } catch (e) {\n      console.error('Failed to parse localStorage[\\'experiments\\']');\n      return {};\n    }\n  }\n\n  static setPlatform(platform: string): void {\n    runtimePlatform = platform;\n  }\n\n  static platform(): string {\n    return runtimePlatform;\n  }\n\n  static isDescriptorEnabled(\n      descriptor: {\n        experiment: ((string | undefined)|null),\n        condition?: Condition,\n      },\n      config?: HostConfig): boolean {\n    const {experiment} = descriptor;\n    if (experiment === '*') {\n      return true;\n    }\n    if (experiment && experiment.startsWith('!') && experiments.isEnabled(experiment.substring(1))) {\n      return false;\n    }\n    if (experiment && !experiment.startsWith('!') && !experiments.isEnabled(experiment)) {\n      return false;\n    }\n    const {condition} = descriptor;\n    return condition ? condition(config) : true;\n  }\n\n  loadLegacyModule(modulePath: string): Promise<void> {\n    const importPath =\n        `../../${modulePath}`;  // Extracted as a variable so esbuild doesn't attempt to bundle all the things.\n    return import(importPath);\n  }\n}\n\nexport interface Option {\n  title: string;\n  value: string|boolean;\n  raw?: boolean;\n  text?: string;\n}\n\nexport class ExperimentsSupport {\n  #experiments: Experiment[];\n  #experimentNames: Set<string>;\n  #enabledTransiently: Set<string>;\n  readonly #enabledByDefault: Set<string>;\n  readonly #serverEnabled: Set<string>;\n  constructor() {\n    this.#experiments = [];\n    this.#experimentNames = new Set();\n    this.#enabledTransiently = new Set();\n    this.#enabledByDefault = new Set();\n    this.#serverEnabled = new Set();\n  }\n\n  allConfigurableExperiments(): Experiment[] {\n    const result = [];\n    for (const experiment of this.#experiments) {\n      if (!this.#enabledTransiently.has(experiment.name)) {\n        result.push(experiment);\n      }\n    }\n    return result;\n  }\n\n  private setExperimentsSetting(value: Object): void {\n    if (!self.localStorage) {\n      return;\n    }\n    self.localStorage['experiments'] = JSON.stringify(value);\n  }\n\n  register(\n      experimentName: string, experimentTitle: string, unstable?: boolean, docLink?: string,\n      feedbackLink?: string): void {\n    if (this.#experimentNames.has(experimentName)) {\n      throw new Error(`Duplicate registraction of experiment '${experimentName}'`);\n    }\n    this.#experimentNames.add(experimentName);\n    this.#experiments.push(new Experiment(\n        this, experimentName, experimentTitle, Boolean(unstable),\n        docLink as Platform.DevToolsPath.UrlString ?? Platform.DevToolsPath.EmptyUrlString,\n        feedbackLink as Platform.DevToolsPath.UrlString ?? Platform.DevToolsPath.EmptyUrlString));\n  }\n\n  isEnabled(experimentName: string): boolean {\n    this.checkExperiment(experimentName);\n    // Check for explicitly disabled #experiments first - the code could call setEnable(false) on the experiment enabled\n    // by default and we should respect that.\n    if (Runtime.experimentsSetting()[experimentName] === false) {\n      return false;\n    }\n    if (this.#enabledTransiently.has(experimentName) || this.#enabledByDefault.has(experimentName)) {\n      return true;\n    }\n    if (this.#serverEnabled.has(experimentName)) {\n      return true;\n    }\n\n    return Boolean(Runtime.experimentsSetting()[experimentName]);\n  }\n\n  setEnabled(experimentName: string, enabled: boolean): void {\n    this.checkExperiment(experimentName);\n    const experimentsSetting = Runtime.experimentsSetting();\n    experimentsSetting[experimentName] = enabled;\n    this.setExperimentsSetting(experimentsSetting);\n  }\n\n  enableExperimentsTransiently(experimentNames: string[]): void {\n    for (const experimentName of experimentNames) {\n      this.checkExperiment(experimentName);\n      this.#enabledTransiently.add(experimentName);\n    }\n  }\n\n  enableExperimentsByDefault(experimentNames: string[]): void {\n    for (const experimentName of experimentNames) {\n      this.checkExperiment(experimentName);\n      this.#enabledByDefault.add(experimentName);\n    }\n  }\n\n  setServerEnabledExperiments(experimentNames: string[]): void {\n    for (const experiment of experimentNames) {\n      this.checkExperiment(experiment);\n      this.#serverEnabled.add(experiment);\n    }\n  }\n\n  enableForTest(experimentName: string): void {\n    this.checkExperiment(experimentName);\n    this.#enabledTransiently.add(experimentName);\n  }\n\n  disableForTest(experimentName: string): void {\n    this.checkExperiment(experimentName);\n    this.#enabledTransiently.delete(experimentName);\n  }\n\n  clearForTest(): void {\n    this.#experiments = [];\n    this.#experimentNames.clear();\n    this.#enabledTransiently.clear();\n    this.#enabledByDefault.clear();\n    this.#serverEnabled.clear();\n  }\n\n  cleanUpStaleExperiments(): void {\n    const experimentsSetting = Runtime.experimentsSetting();\n    const cleanedUpExperimentSetting: {\n      [x: string]: boolean,\n    } = {};\n    for (const {name: experimentName} of this.#experiments) {\n      if (experimentsSetting.hasOwnProperty(experimentName)) {\n        const isEnabled = experimentsSetting[experimentName];\n        if (isEnabled || this.#enabledByDefault.has(experimentName)) {\n          cleanedUpExperimentSetting[experimentName] = isEnabled;\n        }\n      }\n    }\n    this.setExperimentsSetting(cleanedUpExperimentSetting);\n  }\n\n  private checkExperiment(experimentName: string): void {\n    if (!this.#experimentNames.has(experimentName)) {\n      throw new Error(`Unknown experiment '${experimentName}'`);\n    }\n  }\n}\n\nexport class Experiment {\n  name: string;\n  title: string;\n  unstable: boolean;\n  docLink?: Platform.DevToolsPath.UrlString;\n  readonly feedbackLink?: Platform.DevToolsPath.UrlString;\n  readonly #experiments: ExperimentsSupport;\n  constructor(\n      experiments: ExperimentsSupport, name: string, title: string, unstable: boolean,\n      docLink: Platform.DevToolsPath.UrlString, feedbackLink: Platform.DevToolsPath.UrlString) {\n    this.name = name;\n    this.title = title;\n    this.unstable = unstable;\n    this.docLink = docLink;\n    this.feedbackLink = feedbackLink;\n    this.#experiments = experiments;\n  }\n\n  isEnabled(): boolean {\n    return this.#experiments.isEnabled(this.name);\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.#experiments.setEnabled(this.name, enabled);\n  }\n}\n\n// This must be constructed after the query parameters have been parsed.\nexport const experiments = new ExperimentsSupport();\n\nexport const enum ExperimentName {\n  CAPTURE_NODE_CREATION_STACKS = 'capture-node-creation-stacks',\n  CSS_OVERVIEW = 'css-overview',\n  LIVE_HEAP_PROFILE = 'live-heap-profile',\n  ALL = '*',\n  PROTOCOL_MONITOR = 'protocol-monitor',\n  FULL_ACCESSIBILITY_TREE = 'full-accessibility-tree',\n  STYLES_PANE_CSS_CHANGES = 'styles-pane-css-changes',\n  HEADER_OVERRIDES = 'header-overrides',\n  INSTRUMENTATION_BREAKPOINTS = 'instrumentation-breakpoints',\n  AUTHORED_DEPLOYED_GROUPING = 'authored-deployed-grouping',\n  JUST_MY_CODE = 'just-my-code',\n  HIGHLIGHT_ERRORS_ELEMENTS_PANEL = 'highlight-errors-elements-panel',\n  USE_SOURCE_MAP_SCOPES = 'use-source-map-scopes',\n  NETWORK_PANEL_FILTER_BAR_REDESIGN = 'network-panel-filter-bar-redesign',\n  AUTOFILL_VIEW = 'autofill-view',\n  TIMELINE_SHOW_POST_MESSAGE_EVENTS = 'timeline-show-postmessage-events',\n  TIMELINE_DEBUG_MODE = 'timeline-debug-mode',\n  TIMELINE_ENHANCED_TRACES = 'timeline-enhanced-traces',\n  TIMELINE_SERVER_TIMINGS = 'timeline-server-timings',\n  FLOATING_ENTRY_POINTS_FOR_AI_ASSISTANCE = 'floating-entry-points-for-ai-assistance',\n  TIMELINE_EXPERIMENTAL_INSIGHTS = 'timeline-experimental-insights',\n  TIMELINE_DIM_UNRELATED_EVENTS = 'timeline-dim-unrelated-events',\n  TIMELINE_ALTERNATIVE_NAVIGATION = 'timeline-alternative-navigation',\n  TIMELINE_IGNORE_LIST = 'timeline-ignore-list',\n  // when adding to this enum, you'll need to also add to REGISTERED_EXPERIMENTS in EnvironmentHelpers.ts\n}\n\nexport enum GenAiEnterprisePolicyValue {\n  ALLOW = 0,\n  ALLOW_WITHOUT_LOGGING = 1,\n  DISABLE = 2,\n}\n\nexport interface AidaAvailability {\n  enabled: boolean;\n  blockedByAge: boolean;\n  blockedByEnterprisePolicy: boolean;\n  blockedByGeo: boolean;\n  disallowLogging: boolean;\n  enterprisePolicyValue: number;\n}\n\nexport interface HostConfigConsoleInsights {\n  modelId: string;\n  temperature: number;\n  enabled: boolean;\n}\n\nexport enum HostConfigFreestylerExecutionMode {\n  ALL_SCRIPTS = 'ALL_SCRIPTS',\n  SIDE_EFFECT_FREE_SCRIPTS_ONLY = 'SIDE_EFFECT_FREE_SCRIPTS_ONLY',\n  NO_SCRIPTS = 'NO_SCRIPTS',\n}\n\nexport interface HostConfigFreestyler {\n  modelId: string;\n  temperature: number;\n  enabled: boolean;\n  userTier: string;\n  executionMode?: HostConfigFreestylerExecutionMode;\n}\n\nexport interface HostConfigAiAssistanceNetworkAgent {\n  modelId: string;\n  temperature: number;\n  enabled: boolean;\n  userTier: string;\n}\n\nexport interface HostConfigAiAssistancePerformanceAgent {\n  modelId: string;\n  temperature: number;\n  enabled: boolean;\n  userTier: string;\n}\n\nexport interface HostConfigAiAssistanceFileAgent {\n  modelId: string;\n  temperature: number;\n  enabled: boolean;\n  userTier: string;\n}\n\nexport interface HostConfigVeLogging {\n  enabled: boolean;\n  testing: boolean;\n}\n\nexport interface HostConfigPrivacyUI {\n  enabled: boolean;\n}\n\nexport interface HostConfigEnableOriginBoundCookies {\n  portBindingEnabled: boolean;\n  schemeBindingEnabled: boolean;\n}\n\n// We use `RecursivePartial` here to enforce that DevTools code is able to\n// handle `HostConfig` objects of an unexpected shape. This can happen if\n// the implementation in the Chromium backend is changed without correctly\n// updating the DevTools frontend. Or if remote debugging a different version\n// of Chrome, resulting in the local browser window and the local DevTools\n// window being of different versions, and consequently potentially having\n// differently shaped `HostConfig`s.\nexport type HostConfig = Platform.TypeScriptUtilities.RecursivePartial<{\n  aidaAvailability: AidaAvailability,\n  devToolsConsoleInsights: HostConfigConsoleInsights,\n  devToolsFreestyler: HostConfigFreestyler,\n  devToolsAiAssistanceNetworkAgent: HostConfigAiAssistanceNetworkAgent,\n  devToolsAiAssistanceFileAgent: HostConfigAiAssistanceFileAgent,\n  devToolsAiAssistancePerformanceAgent: HostConfigAiAssistancePerformanceAgent,\n  devToolsVeLogging: HostConfigVeLogging,\n  devToolsPrivacyUI: HostConfigPrivacyUI,\n  /**\n   * OffTheRecord here indicates that the user's profile is either incognito,\n   * or guest mode, rather than a \"normal\" profile.\n   */\n  isOffTheRecord: boolean,\n  devToolsEnableOriginBoundCookies: HostConfigEnableOriginBoundCookies,\n}>;\n\n/**\n * When defining conditions make sure that objects used by the function have\n * been instantiated.\n */\nexport type Condition = (config?: HostConfig) => boolean;\n\nexport const conditions = {\n  canDock: () => Boolean(Runtime.queryParam('can_dock')),\n};\n"],
  "mappings": "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",
  "names": ["location", "experiments", "ExperimentName", "GenAiEnterprisePolicyValue", "HostConfigFreestylerExecutionMode"]
}
