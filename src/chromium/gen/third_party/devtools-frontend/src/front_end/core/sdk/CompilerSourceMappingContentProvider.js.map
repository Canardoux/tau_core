{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/CompilerSourceMappingContentProvider.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport {PageResourceLoader, type PageResourceLoadInitiator} from './PageResourceLoader.js';\n\nconst UIStrings = {\n  /**\n   *@description Error message when failing to fetch a resource referenced in a source map\n   *@example {https://example.com/sourcemap.map} PH1\n   *@example {An error occurred} PH2\n   */\n  couldNotLoadContentForSS: 'Could not load content for {PH1} ({PH2})',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/CompilerSourceMappingContentProvider.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class CompilerSourceMappingContentProvider implements TextUtils.ContentProvider.ContentProvider {\n  readonly #sourceURL: Platform.DevToolsPath.UrlString;\n  readonly #contentTypeInternal: Common.ResourceType.ResourceType;\n  readonly #initiator: PageResourceLoadInitiator;\n\n  constructor(\n      sourceURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      initiator: PageResourceLoadInitiator) {\n    this.#sourceURL = sourceURL;\n    this.#contentTypeInternal = contentType;\n    this.#initiator = initiator;\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.#sourceURL;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.#contentTypeInternal;\n  }\n\n  async requestContent(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    const contentData = await this.requestContentData();\n    return TextUtils.ContentData.ContentData.asDeferredContent(contentData);\n  }\n\n  async requestContentData(): Promise<TextUtils.ContentData.ContentDataOrError> {\n    try {\n      const {content} = await PageResourceLoader.instance().loadResource(this.#sourceURL, this.#initiator);\n      return new TextUtils.ContentData.ContentData(\n          content, /* isBase64=*/ false, this.#contentTypeInternal.canonicalMimeType());\n    } catch (e) {\n      const error = i18nString(UIStrings.couldNotLoadContentForSS, {PH1: this.#sourceURL, PH2: e.message});\n      console.error(error);\n      return {error};\n    }\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const contentData = await this.requestContentData();\n    return TextUtils.TextUtils.performSearchInContentData(contentData, query, caseSensitive, isRegex);\n  }\n}\n"],
  "mappings": ";AA8BA,YAAY,eAAe;AAE3B,YAAY,UAAU;AAGtB,SAAQ,0BAAyD;AAEjE,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,0BAA0B;AAC5B;AAEA,MAAM,OAAO,KAAK,KAAK,kBAAkB,oDAAoD,SAAS;AACtG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW,IAAI;AAE7D,aAAM,qCAA0F;AAAA,EAC5F;AAAA,EACA;AAAA,EACA;AAAA,EAET,YACI,WAA4C,aAC5C,WAAsC;AACxC,SAAK,aAAa;AAClB,SAAK,uBAAuB;AAC5B,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,aAA8C;AAC5C,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,cAAgD;AAC9C,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,iBAAqE;AACzE,UAAM,cAAc,MAAM,KAAK,mBAAmB;AAClD,WAAO,UAAU,YAAY,YAAY,kBAAkB,WAAW;AAAA,EACxE;AAAA,EAEA,MAAM,qBAAwE;AAC5E,QAAI;AACF,YAAM,EAAC,QAAO,IAAI,MAAM,mBAAmB,SAAS,EAAE,aAAa,KAAK,YAAY,KAAK,UAAU;AACnG,aAAO,IAAI,UAAU,YAAY;AAAA,QAC7B;AAAA;AAAA,QAAwB;AAAA,QAAO,KAAK,qBAAqB,kBAAkB;AAAA,MAAC;AAAA,IAClF,SAAS,GAAG;AACV,YAAM,QAAQ,WAAW,UAAU,0BAA0B,EAAC,KAAK,KAAK,YAAY,KAAK,EAAE,QAAO,CAAC;AACnG,cAAQ,MAAM,KAAK;AACnB,aAAO,EAAC,MAAK;AAAA,IACf;AAAA,EACF;AAAA,EAEA,MAAM,gBAAgB,OAAe,eAAwB,SACR;AACnD,UAAM,cAAc,MAAM,KAAK,mBAAmB;AAClD,WAAO,UAAU,UAAU,2BAA2B,aAAa,OAAO,eAAe,OAAO;AAAA,EAClG;AACF;",
  "names": []
}
