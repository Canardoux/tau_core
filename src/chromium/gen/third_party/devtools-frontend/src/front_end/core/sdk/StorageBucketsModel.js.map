{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/StorageBucketsModel.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2023 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../common/common.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport {Capability, type Target} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Events as StorageKeyManagerEvents, StorageKeyManager} from './StorageKeyManager.js';\n\nexport class StorageBucketsModel extends SDKModel<EventTypes> implements ProtocolProxyApi.StorageDispatcher {\n  private enabled: boolean = false;\n  readonly storageAgent: ProtocolProxyApi.StorageApi;\n  private readonly storageKeyManager: StorageKeyManager|null;\n  private bucketsById: Map<string, Protocol.Storage.StorageBucketInfo> = new Map();\n  private trackedStorageKeys: Set<string> = new Set();\n\n  constructor(target: Target) {\n    super(target);\n    target.registerStorageDispatcher(this);\n    this.storageAgent = target.storageAgent();\n    this.storageKeyManager = target.model(StorageKeyManager);\n  }\n\n  getBuckets(): Set<Protocol.Storage.StorageBucketInfo> {\n    return new Set(this.bucketsById.values());\n  }\n\n  getBucketsForStorageKey(storageKey: string): Set<Protocol.Storage.StorageBucketInfo> {\n    const buckets = [...this.bucketsById.values()];\n    return new Set(buckets.filter(({bucket}) => bucket.storageKey === storageKey));\n  }\n\n  getDefaultBucketForStorageKey(storageKey: string): Protocol.Storage.StorageBucketInfo|null {\n    const buckets = [...this.bucketsById.values()];\n    return buckets.find(({bucket}) => bucket.storageKey === storageKey && bucket.name === undefined) ?? null;\n  }\n\n  getBucketById(bucketId: string): Protocol.Storage.StorageBucketInfo|null {\n    return this.bucketsById.get(bucketId) ?? null;\n  }\n\n  getBucketByName(storageKey: string, bucketName?: string): Protocol.Storage.StorageBucketInfo|null {\n    if (!bucketName) {\n      return this.getDefaultBucketForStorageKey(storageKey);\n    }\n    const buckets = [...this.bucketsById.values()];\n    return buckets.find(({bucket}) => bucket.storageKey === storageKey && bucket.name === bucketName) ?? null;\n  }\n\n  deleteBucket(bucket: Protocol.Storage.StorageBucket): void {\n    void this.storageAgent.invoke_deleteStorageBucket({bucket});\n  }\n\n  enable(): void {\n    if (this.enabled) {\n      return;\n    }\n\n    if (this.storageKeyManager) {\n      this.storageKeyManager.addEventListener(StorageKeyManagerEvents.STORAGE_KEY_ADDED, this.storageKeyAdded, this);\n      this.storageKeyManager.addEventListener(\n          StorageKeyManagerEvents.STORAGE_KEY_REMOVED, this.storageKeyRemoved, this);\n      for (const storageKey of this.storageKeyManager.storageKeys()) {\n        this.addStorageKey(storageKey);\n      }\n    }\n\n    this.enabled = true;\n  }\n\n  private storageKeyAdded(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.addStorageKey(event.data);\n  }\n  private storageKeyRemoved(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.removeStorageKey(event.data);\n  }\n\n  private addStorageKey(storageKey: string): void {\n    if (this.trackedStorageKeys.has(storageKey)) {\n      throw new Error('Can\\'t call addStorageKey for a storage key if it has already been added.');\n    }\n\n    this.trackedStorageKeys.add(storageKey);\n    void this.storageAgent.invoke_setStorageBucketTracking({storageKey, enable: true});\n  }\n\n  private removeStorageKey(storageKey: string): void {\n    if (!this.trackedStorageKeys.has(storageKey)) {\n      throw new Error('Can\\'t call removeStorageKey for a storage key if it hasn\\'t already been added.');\n    }\n    const bucketsForStorageKey = this.getBucketsForStorageKey(storageKey);\n    for (const bucket of bucketsForStorageKey) {\n      this.bucketRemoved(bucket);\n    }\n    this.trackedStorageKeys.delete(storageKey);\n    void this.storageAgent.invoke_setStorageBucketTracking({storageKey, enable: false});\n  }\n\n  private bucketAdded(bucketInfo: Protocol.Storage.StorageBucketInfo): void {\n    this.bucketsById.set(bucketInfo.id, bucketInfo);\n    this.dispatchEventToListeners(Events.BUCKET_ADDED, {model: this, bucketInfo});\n  }\n\n  private bucketRemoved(bucketInfo: Protocol.Storage.StorageBucketInfo): void {\n    this.bucketsById.delete(bucketInfo.id);\n    this.dispatchEventToListeners(Events.BUCKET_REMOVED, {model: this, bucketInfo});\n  }\n\n  private bucketChanged(bucketInfo: Protocol.Storage.StorageBucketInfo): void {\n    this.dispatchEventToListeners(Events.BUCKET_CHANGED, {model: this, bucketInfo});\n  }\n\n  private bucketInfosAreEqual(\n      bucketInfo1: Protocol.Storage.StorageBucketInfo, bucketInfo2: Protocol.Storage.StorageBucketInfo): boolean {\n    return bucketInfo1.bucket.storageKey === bucketInfo2.bucket.storageKey && bucketInfo1.id === bucketInfo2.id &&\n        bucketInfo1.bucket.name === bucketInfo2.bucket.name && bucketInfo1.expiration === bucketInfo2.expiration &&\n        bucketInfo1.quota === bucketInfo2.quota && bucketInfo1.persistent === bucketInfo2.persistent &&\n        bucketInfo1.durability === bucketInfo2.durability;\n  }\n\n  storageBucketCreatedOrUpdated({bucketInfo}: Protocol.Storage.StorageBucketCreatedOrUpdatedEvent): void {\n    const curBucket = this.getBucketById(bucketInfo.id);\n    if (curBucket) {\n      if (!this.bucketInfosAreEqual(curBucket, bucketInfo)) {\n        this.bucketChanged(bucketInfo);\n      }\n    } else {\n      this.bucketAdded(bucketInfo);\n    }\n  }\n\n  storageBucketDeleted({bucketId}: Protocol.Storage.StorageBucketDeletedEvent): void {\n    const curBucket = this.getBucketById(bucketId);\n    if (curBucket) {\n      this.bucketRemoved(curBucket);\n    } else {\n      throw new Error(\n          `Received an event that Storage Bucket '${bucketId}' was deleted, but it wasn't in the StorageBucketsModel.`);\n    }\n  }\n\n  attributionReportingTriggerRegistered(_event: Protocol.Storage.AttributionReportingTriggerRegisteredEvent): void {\n  }\n\n  interestGroupAccessed(_event: Protocol.Storage.InterestGroupAccessedEvent): void {\n  }\n\n  interestGroupAuctionEventOccurred(_event: Protocol.Storage.InterestGroupAuctionEventOccurredEvent): void {\n  }\n\n  interestGroupAuctionNetworkRequestCreated(_event: Protocol.Storage.InterestGroupAuctionNetworkRequestCreatedEvent):\n      void {\n  }\n\n  indexedDBListUpdated(_event: Protocol.Storage.IndexedDBListUpdatedEvent): void {\n  }\n\n  indexedDBContentUpdated(_event: Protocol.Storage.IndexedDBContentUpdatedEvent): void {\n  }\n\n  cacheStorageListUpdated(_event: Protocol.Storage.CacheStorageListUpdatedEvent): void {\n  }\n\n  cacheStorageContentUpdated(_event: Protocol.Storage.CacheStorageContentUpdatedEvent): void {\n  }\n\n  sharedStorageAccessed(_event: Protocol.Storage.SharedStorageAccessedEvent): void {\n  }\n\n  attributionReportingSourceRegistered(_event: Protocol.Storage.AttributionReportingSourceRegisteredEvent): void {\n  }\n}\n\nSDKModel.register(StorageBucketsModel, {capabilities: Capability.STORAGE, autostart: false});\n\nexport const enum Events {\n  BUCKET_ADDED = 'BucketAdded',\n  BUCKET_REMOVED = 'BucketRemoved',\n  BUCKET_CHANGED = 'BucketChanged',\n}\n\nexport interface BucketEvent {\n  model: StorageBucketsModel;\n  bucketInfo: Protocol.Storage.StorageBucketInfo;\n}\n\nexport type EventTypes = {\n  [Events.BUCKET_ADDED]: BucketEvent,\n  [Events.BUCKET_REMOVED]: BucketEvent,\n  [Events.BUCKET_CHANGED]: BucketEvent,\n};\n"],
  "mappings": ";AAkCA,SAAQ,kBAA8B;AACtC,SAAQ,gBAAe;AACvB,SAAQ,UAAU,yBAAyB,yBAAwB;AAE5D,aAAM,4BAA4B,SAAmE;AAAA,EAClG,UAAmB;AAAA,EAClB;AAAA,EACQ;AAAA,EACT,cAA+D,oBAAI,IAAI;AAAA,EACvE,qBAAkC,oBAAI,IAAI;AAAA,EAElD,YAAY,QAAgB;AAC1B,UAAM,MAAM;AACZ,WAAO,0BAA0B,IAAI;AACrC,SAAK,eAAe,OAAO,aAAa;AACxC,SAAK,oBAAoB,OAAO,MAAM,iBAAiB;AAAA,EACzD;AAAA,EAEA,aAAsD;AACpD,WAAO,IAAI,IAAI,KAAK,YAAY,OAAO,CAAC;AAAA,EAC1C;AAAA,EAEA,wBAAwB,YAA6D;AACnF,UAAM,UAAU,CAAC,GAAG,KAAK,YAAY,OAAO,CAAC;AAC7C,WAAO,IAAI,IAAI,QAAQ,OAAO,CAAC,EAAC,OAAM,MAAM,OAAO,eAAe,UAAU,CAAC;AAAA,EAC/E;AAAA,EAEA,8BAA8B,YAA6D;AACzF,UAAM,UAAU,CAAC,GAAG,KAAK,YAAY,OAAO,CAAC;AAC7C,WAAO,QAAQ,KAAK,CAAC,EAAC,OAAM,MAAM,OAAO,eAAe,cAAc,OAAO,SAAS,MAAS,KAAK;AAAA,EACtG;AAAA,EAEA,cAAc,UAA2D;AACvE,WAAO,KAAK,YAAY,IAAI,QAAQ,KAAK;AAAA,EAC3C;AAAA,EAEA,gBAAgB,YAAoB,YAA8D;AAChG,QAAI,CAAC,YAAY;AACf,aAAO,KAAK,8BAA8B,UAAU;AAAA,IACtD;AACA,UAAM,UAAU,CAAC,GAAG,KAAK,YAAY,OAAO,CAAC;AAC7C,WAAO,QAAQ,KAAK,CAAC,EAAC,OAAM,MAAM,OAAO,eAAe,cAAc,OAAO,SAAS,UAAU,KAAK;AAAA,EACvG;AAAA,EAEA,aAAa,QAA8C;AACzD,SAAK,KAAK,aAAa,2BAA2B,EAAC,OAAM,CAAC;AAAA,EAC5D;AAAA,EAEA,SAAe;AACb,QAAI,KAAK,SAAS;AAChB;AAAA,IACF;AAEA,QAAI,KAAK,mBAAmB;AAC1B,WAAK,kBAAkB,iBAAiB,wBAAwB,mBAAmB,KAAK,iBAAiB,IAAI;AAC7G,WAAK,kBAAkB;AAAA,QACnB,wBAAwB;AAAA,QAAqB,KAAK;AAAA,QAAmB;AAAA,MAAI;AAC7E,iBAAW,cAAc,KAAK,kBAAkB,YAAY,GAAG;AAC7D,aAAK,cAAc,UAAU;AAAA,MAC/B;AAAA,IACF;AAEA,SAAK,UAAU;AAAA,EACjB;AAAA,EAEQ,gBAAgB,OAA0D;AAChF,SAAK,cAAc,MAAM,IAAI;AAAA,EAC/B;AAAA,EACQ,kBAAkB,OAA0D;AAClF,SAAK,iBAAiB,MAAM,IAAI;AAAA,EAClC;AAAA,EAEQ,cAAc,YAA0B;AAC9C,QAAI,KAAK,mBAAmB,IAAI,UAAU,GAAG;AAC3C,YAAM,IAAI,MAAM,0EAA2E;AAAA,IAC7F;AAEA,SAAK,mBAAmB,IAAI,UAAU;AACtC,SAAK,KAAK,aAAa,gCAAgC,EAAC,YAAY,QAAQ,KAAI,CAAC;AAAA,EACnF;AAAA,EAEQ,iBAAiB,YAA0B;AACjD,QAAI,CAAC,KAAK,mBAAmB,IAAI,UAAU,GAAG;AAC5C,YAAM,IAAI,MAAM,gFAAkF;AAAA,IACpG;AACA,UAAM,uBAAuB,KAAK,wBAAwB,UAAU;AACpE,eAAW,UAAU,sBAAsB;AACzC,WAAK,cAAc,MAAM;AAAA,IAC3B;AACA,SAAK,mBAAmB,OAAO,UAAU;AACzC,SAAK,KAAK,aAAa,gCAAgC,EAAC,YAAY,QAAQ,MAAK,CAAC;AAAA,EACpF;AAAA,EAEQ,YAAY,YAAsD;AACxE,SAAK,YAAY,IAAI,WAAW,IAAI,UAAU;AAC9C,SAAK,yBAAyB,kCAAqB,EAAC,OAAO,MAAM,WAAU,CAAC;AAAA,EAC9E;AAAA,EAEQ,cAAc,YAAsD;AAC1E,SAAK,YAAY,OAAO,WAAW,EAAE;AACrC,SAAK,yBAAyB,sCAAuB,EAAC,OAAO,MAAM,WAAU,CAAC;AAAA,EAChF;AAAA,EAEQ,cAAc,YAAsD;AAC1E,SAAK,yBAAyB,sCAAuB,EAAC,OAAO,MAAM,WAAU,CAAC;AAAA,EAChF;AAAA,EAEQ,oBACJ,aAAiD,aAA0D;AAC7G,WAAO,YAAY,OAAO,eAAe,YAAY,OAAO,cAAc,YAAY,OAAO,YAAY,MACrG,YAAY,OAAO,SAAS,YAAY,OAAO,QAAQ,YAAY,eAAe,YAAY,cAC9F,YAAY,UAAU,YAAY,SAAS,YAAY,eAAe,YAAY,cAClF,YAAY,eAAe,YAAY;AAAA,EAC7C;AAAA,EAEA,8BAA8B,EAAC,WAAU,GAA8D;AACrG,UAAM,YAAY,KAAK,cAAc,WAAW,EAAE;AAClD,QAAI,WAAW;AACb,UAAI,CAAC,KAAK,oBAAoB,WAAW,UAAU,GAAG;AACpD,aAAK,cAAc,UAAU;AAAA,MAC/B;AAAA,IACF,OAAO;AACL,WAAK,YAAY,UAAU;AAAA,IAC7B;AAAA,EACF;AAAA,EAEA,qBAAqB,EAAC,SAAQ,GAAqD;AACjF,UAAM,YAAY,KAAK,cAAc,QAAQ;AAC7C,QAAI,WAAW;AACb,WAAK,cAAc,SAAS;AAAA,IAC9B,OAAO;AACL,YAAM,IAAI;AAAA,QACN,0CAA0C,QAAQ;AAAA,MAA0D;AAAA,IAClH;AAAA,EACF;AAAA,EAEA,sCAAsC,QAA2E;AAAA,EACjH;AAAA,EAEA,sBAAsB,QAA2D;AAAA,EACjF;AAAA,EAEA,kCAAkC,QAAuE;AAAA,EACzG;AAAA,EAEA,0CAA0C,QACjC;AAAA,EACT;AAAA,EAEA,qBAAqB,QAA0D;AAAA,EAC/E;AAAA,EAEA,wBAAwB,QAA6D;AAAA,EACrF;AAAA,EAEA,wBAAwB,QAA6D;AAAA,EACrF;AAAA,EAEA,2BAA2B,QAAgE;AAAA,EAC3F;AAAA,EAEA,sBAAsB,QAA2D;AAAA,EACjF;AAAA,EAEA,qCAAqC,QAA0E;AAAA,EAC/G;AACF;AAEA,SAAS,SAAS,qBAAqB,EAAC,cAAc,WAAW,SAAS,WAAW,MAAK,CAAC;AAEpF,WAAW,SAAX,kBAAWA,YAAX;AACL,EAAAA,QAAA,kBAAe;AACf,EAAAA,QAAA,oBAAiB;AACjB,EAAAA,QAAA,oBAAiB;AAHD,SAAAA;AAAA,GAAA;",
  "names": ["Events"]
}
