{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/Connections.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport type * as Platform from '../platform/platform.js';\nimport * as ProtocolClient from '../protocol_client/protocol_client.js';\nimport * as Root from '../root/root.js';\n\nexport class MainConnection implements ProtocolClient.InspectorBackend.Connection {\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  #messageBuffer: string;\n  #messageSize: number;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n  constructor() {\n    this.onMessage = null;\n    this.#onDisconnect = null;\n    this.#messageBuffer = '';\n    this.#messageSize = 0;\n    this.#eventListeners = [\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n          Host.InspectorFrontendHostAPI.Events.DispatchMessage, this.dispatchMessage, this),\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n          Host.InspectorFrontendHostAPI.Events.DispatchMessageChunk, this.dispatchMessageChunk, this),\n    ];\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    if (this.onMessage) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.sendMessageToBackend(message);\n    }\n  }\n\n  private dispatchMessage(event: Common.EventTarget.EventTargetEvent<string>): void {\n    if (this.onMessage) {\n      this.onMessage.call(null, event.data);\n    }\n  }\n\n  private dispatchMessageChunk(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.DispatchMessageChunkEvent>): void {\n    const {messageChunk, messageSize} = event.data;\n    if (messageSize) {\n      this.#messageBuffer = '';\n      this.#messageSize = messageSize;\n    }\n    this.#messageBuffer += messageChunk;\n    if (this.#messageBuffer.length === this.#messageSize && this.onMessage) {\n      this.onMessage.call(null, this.#messageBuffer);\n      this.#messageBuffer = '';\n      this.#messageSize = 0;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    const onDisconnect = this.#onDisconnect;\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.#onDisconnect = null;\n    this.onMessage = null;\n\n    if (onDisconnect) {\n      onDisconnect.call(null, 'force disconnect');\n    }\n  }\n}\n\nexport class WebSocketConnection implements ProtocolClient.InspectorBackend.Connection {\n  #socket: WebSocket|null;\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  #onWebSocketDisconnect: (() => void)|null;\n  #connected: boolean;\n  #messages: string[];\n  constructor(url: Platform.DevToolsPath.UrlString, onWebSocketDisconnect: () => void) {\n    this.#socket = new WebSocket(url);\n    this.#socket.onerror = this.onError.bind(this);\n    this.#socket.onopen = this.onOpen.bind(this);\n    this.#socket.onmessage = (messageEvent: MessageEvent<string>): void => {\n      if (this.onMessage) {\n        this.onMessage.call(null, messageEvent.data);\n      }\n    };\n    this.#socket.onclose = this.onClose.bind(this);\n\n    this.onMessage = null;\n    this.#onDisconnect = null;\n    this.#onWebSocketDisconnect = onWebSocketDisconnect;\n    this.#connected = false;\n    this.#messages = [];\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  private onError(): void {\n    if (this.#onWebSocketDisconnect) {\n      this.#onWebSocketDisconnect.call(null);\n    }\n    if (this.#onDisconnect) {\n      // This is called if error occurred while connecting.\n      this.#onDisconnect.call(null, 'connection failed');\n    }\n    this.close();\n  }\n\n  private onOpen(): void {\n    this.#connected = true;\n    if (this.#socket) {\n      this.#socket.onerror = console.error;\n      for (const message of this.#messages) {\n        this.#socket.send(message);\n      }\n    }\n    this.#messages = [];\n  }\n\n  private onClose(): void {\n    if (this.#onWebSocketDisconnect) {\n      this.#onWebSocketDisconnect.call(null);\n    }\n    if (this.#onDisconnect) {\n      this.#onDisconnect.call(null, 'websocket closed');\n    }\n    this.close();\n  }\n\n  private close(callback?: (() => void)): void {\n    if (this.#socket) {\n      this.#socket.onerror = null;\n      this.#socket.onopen = null;\n      this.#socket.onclose = callback || null;\n      this.#socket.onmessage = null;\n      this.#socket.close();\n      this.#socket = null;\n    }\n    this.#onWebSocketDisconnect = null;\n  }\n\n  sendRawMessage(message: string): void {\n    if (this.#connected && this.#socket) {\n      this.#socket.send(message);\n    } else {\n      this.#messages.push(message);\n    }\n  }\n\n  disconnect(): Promise<void> {\n    return new Promise(fulfill => {\n      this.close(() => {\n        if (this.#onDisconnect) {\n          this.#onDisconnect.call(null, 'force disconnect');\n        }\n        fulfill();\n      });\n    });\n  }\n}\n\nexport class StubConnection implements ProtocolClient.InspectorBackend.Connection {\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  constructor() {\n    this.onMessage = null;\n    this.#onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    window.setTimeout(this.respondWithError.bind(this, message), 0);\n  }\n\n  private respondWithError(message: string): void {\n    const messageObject = JSON.parse(message);\n    const error = {\n      message: 'This is a stub connection, can\\'t dispatch message.',\n      code: ProtocolClient.InspectorBackend.DevToolsStubErrorCode,\n      data: messageObject,\n    };\n    if (this.onMessage) {\n      this.onMessage.call(null, {id: messageObject.id, error});\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.#onDisconnect) {\n      this.#onDisconnect.call(null, 'force disconnect');\n    }\n    this.#onDisconnect = null;\n    this.onMessage = null;\n  }\n}\n\nexport interface ParallelConnectionInterface extends ProtocolClient.InspectorBackend.Connection {\n  getSessionId: () => string;\n  getOnDisconnect: () => ((arg0: string) => void) | null;\n}\n\nexport class ParallelConnection implements ParallelConnectionInterface {\n  readonly #connection: ProtocolClient.InspectorBackend.Connection;\n  #sessionId: string;\n  onMessage: ((arg0: Object) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  constructor(connection: ProtocolClient.InspectorBackend.Connection, sessionId: string) {\n    this.#connection = connection;\n    this.#sessionId = sessionId;\n    this.onMessage = null;\n    this.#onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: Object) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  getOnDisconnect(): ((arg0: string) => void)|null {\n    return this.#onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    const messageObject = JSON.parse(message);\n    // If the message isn't for a specific session, it must be for the root session.\n    if (!messageObject.sessionId) {\n      messageObject.sessionId = this.#sessionId;\n    }\n    this.#connection.sendRawMessage(JSON.stringify(messageObject));\n  }\n\n  getSessionId(): string {\n    return this.#sessionId;\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.#onDisconnect) {\n      this.#onDisconnect.call(null, 'force disconnect');\n    }\n    this.#onDisconnect = null;\n    this.onMessage = null;\n  }\n}\n\nexport async function initMainConnection(\n    createRootTarget: () => Promise<void>, websocketConnectionLost: () => void): Promise<void> {\n  ProtocolClient.InspectorBackend.Connection.setFactory(createMainConnection.bind(null, websocketConnectionLost));\n  await createRootTarget();\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.connectionReady();\n}\n\nfunction createMainConnection(websocketConnectionLost: () => void): ProtocolClient.InspectorBackend.Connection {\n  const wsParam = Root.Runtime.Runtime.queryParam('ws');\n  const wssParam = Root.Runtime.Runtime.queryParam('wss');\n  if (wsParam || wssParam) {\n    const ws = (wsParam ? `ws://${wsParam}` : `wss://${wssParam}`) as Platform.DevToolsPath.UrlString;\n    return new WebSocketConnection(ws, websocketConnectionLost);\n  }\n  if (Host.InspectorFrontendHost.InspectorFrontendHostInstance.isHostedMode()) {\n    return new StubConnection();\n  }\n\n  return new MainConnection();\n}\n"],
  "mappings": "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",
  "names": []
}
