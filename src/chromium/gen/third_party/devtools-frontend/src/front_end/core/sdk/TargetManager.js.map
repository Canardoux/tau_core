{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/TargetManager.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as Platform from '../platform/platform.js';\nimport {assertNotNullOrUndefined} from '../platform/platform.js';\nimport type * as ProtocolClient from '../protocol_client/protocol_client.js';\nimport * as Root from '../root/root.js';\n\nimport {SDKModel} from './SDKModel.js';\nimport {Target, Type as TargetType} from './Target.js';\n\nlet targetManagerInstance: TargetManager|undefined;\ntype ModelClass<T = SDKModel> = new (arg1: Target) => T;\n\nexport class TargetManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #targetsInternal: Set<Target>;\n  readonly #observers: Set<Observer>;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  #modelListeners: Platform.MapUtilities.Multimap<string|symbol|number, {\n    modelClass: ModelClass,\n    thisObject: Object|undefined,\n    listener: Common.EventTarget.EventListener<any, any>,\n    wrappedListener: Common.EventTarget.EventListener<any, any>,\n  }>;\n  readonly #modelObservers: Platform.MapUtilities.Multimap<ModelClass, SDKModelObserver<any>>;\n  #scopedObservers: WeakSet<Observer|SDKModelObserver<any>>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  #isSuspended: boolean;\n  #browserTargetInternal: Target|null;\n  #scopeTarget: Target|null;\n  #defaultScopeSet: boolean;\n  readonly #scopeChangeListeners: Set<() => void>;\n\n  private constructor() {\n    super();\n    this.#targetsInternal = new Set();\n    this.#observers = new Set();\n    this.#modelListeners = new Platform.MapUtilities.Multimap();\n    this.#modelObservers = new Platform.MapUtilities.Multimap();\n    this.#isSuspended = false;\n    this.#browserTargetInternal = null;\n    this.#scopeTarget = null;\n    this.#scopedObservers = new WeakSet();\n    this.#defaultScopeSet = false;\n    this.#scopeChangeListeners = new Set();\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): TargetManager {\n    if (!targetManagerInstance || forceNew) {\n      targetManagerInstance = new TargetManager();\n    }\n\n    return targetManagerInstance;\n  }\n\n  static removeInstance(): void {\n    targetManagerInstance = undefined;\n  }\n\n  onInspectedURLChange(target: Target): void {\n    if (target !== this.#scopeTarget) {\n      return;\n    }\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.inspectedURLChanged(\n        target.inspectedURL() || Platform.DevToolsPath.EmptyUrlString);\n    this.dispatchEventToListeners(Events.INSPECTED_URL_CHANGED, target);\n  }\n\n  onNameChange(target: Target): void {\n    this.dispatchEventToListeners(Events.NAME_CHANGED, target);\n  }\n\n  async suspendAllTargets(reason?: string): Promise<void> {\n    if (this.#isSuspended) {\n      return;\n    }\n    this.#isSuspended = true;\n    this.dispatchEventToListeners(Events.SUSPEND_STATE_CHANGED);\n    const suspendPromises = Array.from(this.#targetsInternal.values(), target => target.suspend(reason));\n    await Promise.all(suspendPromises);\n  }\n\n  async resumeAllTargets(): Promise<void> {\n    if (!this.#isSuspended) {\n      return;\n    }\n    this.#isSuspended = false;\n    this.dispatchEventToListeners(Events.SUSPEND_STATE_CHANGED);\n    const resumePromises = Array.from(this.#targetsInternal.values(), target => target.resume());\n    await Promise.all(resumePromises);\n  }\n\n  allTargetsSuspended(): boolean {\n    return this.#isSuspended;\n  }\n\n  models<T extends SDKModel>(modelClass: ModelClass<T>, opts?: {scoped: boolean}): T[] {\n    const result = [];\n    for (const target of this.#targetsInternal) {\n      if (opts?.scoped && !this.isInScope(target)) {\n        continue;\n      }\n      const model = target.model(modelClass);\n      if (!model) {\n        continue;\n      }\n      result.push(model);\n    }\n    return result;\n  }\n\n  inspectedURL(): string {\n    const mainTarget = this.primaryPageTarget();\n    return mainTarget ? mainTarget.inspectedURL() : '';\n  }\n\n  observeModels<T extends SDKModel>(modelClass: ModelClass<T>, observer: SDKModelObserver<T>, opts?: {scoped: boolean}):\n      void {\n    const models = this.models(modelClass, opts);\n    this.#modelObservers.set(modelClass, observer);\n    if (opts?.scoped) {\n      this.#scopedObservers.add(observer);\n    }\n    for (const model of models) {\n      observer.modelAdded(model);\n    }\n  }\n\n  unobserveModels<T extends SDKModel>(modelClass: ModelClass<T>, observer: SDKModelObserver<T>): void {\n    this.#modelObservers.delete(modelClass, observer);\n    this.#scopedObservers.delete(observer);\n  }\n\n  modelAdded(target: Target, modelClass: ModelClass, model: SDKModel, inScope: boolean): void {\n    for (const observer of this.#modelObservers.get(modelClass).values()) {\n      if (!this.#scopedObservers.has(observer) || inScope) {\n        observer.modelAdded(model);\n      }\n    }\n  }\n\n  private modelRemoved(target: Target, modelClass: ModelClass, model: SDKModel, inScope: boolean): void {\n    for (const observer of this.#modelObservers.get(modelClass).values()) {\n      if (!this.#scopedObservers.has(observer) || inScope) {\n        observer.modelRemoved(model);\n      }\n    }\n  }\n\n  addModelListener<Events, T extends keyof Events>(\n      modelClass: ModelClass<SDKModel<Events>>, eventType: T, listener: Common.EventTarget.EventListener<Events, T>,\n      thisObject?: Object, opts?: {scoped: boolean}): void {\n    const wrappedListener = (event: Common.EventTarget.EventTargetEvent<Events[T], Events>): void => {\n      if (!opts?.scoped || this.isInScope(event)) {\n        listener.call(thisObject, event);\n      }\n    };\n    for (const model of this.models(modelClass)) {\n      model.addEventListener(eventType, wrappedListener);\n    }\n    this.#modelListeners.set(eventType, {modelClass, thisObject, listener, wrappedListener});\n  }\n\n  removeModelListener<Events, T extends keyof Events>(\n      modelClass: ModelClass<SDKModel<Events>>, eventType: T, listener: Common.EventTarget.EventListener<Events, T>,\n      thisObject?: Object): void {\n    if (!this.#modelListeners.has(eventType)) {\n      return;\n    }\n    let wrappedListener = null;\n    for (const info of this.#modelListeners.get(eventType)) {\n      if (info.modelClass === modelClass && info.listener === listener && info.thisObject === thisObject) {\n        wrappedListener = info.wrappedListener;\n        this.#modelListeners.delete(eventType, info);\n      }\n    }\n    if (wrappedListener) {\n      for (const model of this.models(modelClass)) {\n        model.removeEventListener(eventType, wrappedListener);\n      }\n    }\n  }\n\n  observeTargets(targetObserver: Observer, opts?: {scoped: boolean}): void {\n    if (this.#observers.has(targetObserver)) {\n      throw new Error('Observer can only be registered once');\n    }\n    if (opts?.scoped) {\n      this.#scopedObservers.add(targetObserver);\n    }\n    for (const target of this.#targetsInternal) {\n      if (!opts?.scoped || this.isInScope(target)) {\n        targetObserver.targetAdded(target);\n      }\n    }\n    this.#observers.add(targetObserver);\n  }\n\n  unobserveTargets(targetObserver: Observer): void {\n    this.#observers.delete(targetObserver);\n    this.#scopedObservers.delete(targetObserver);\n  }\n\n  createTarget(\n      id: Protocol.Target.TargetID|'main', name: string, type: TargetType, parentTarget: Target|null,\n      sessionId?: string, waitForDebuggerInPage?: boolean, connection?: ProtocolClient.InspectorBackend.Connection,\n      targetInfo?: Protocol.Target.TargetInfo): Target {\n    const target = new Target(\n        this, id, name, type, parentTarget, sessionId || '', this.#isSuspended, connection || null, targetInfo);\n    if (waitForDebuggerInPage) {\n      void target.pageAgent().invoke_waitForDebugger();\n    }\n    target.createModels(new Set(this.#modelObservers.keysArray()));\n    this.#targetsInternal.add(target);\n\n    const inScope = this.isInScope(target);\n    // Iterate over a copy. #observers might be modified during iteration.\n    for (const observer of [...this.#observers]) {\n      if (!this.#scopedObservers.has(observer) || inScope) {\n        observer.targetAdded(target);\n      }\n    }\n\n    for (const [modelClass, model] of target.models().entries()) {\n      this.modelAdded(target, modelClass, model, inScope);\n    }\n\n    for (const key of this.#modelListeners.keysArray()) {\n      for (const info of this.#modelListeners.get(key)) {\n        const model = target.model(info.modelClass);\n        if (model) {\n          model.addEventListener(key, info.wrappedListener);\n        }\n      }\n    }\n\n    if ((target === target.outermostTarget() &&\n         (target.type() !== TargetType.FRAME || target === this.primaryPageTarget())) &&\n        !this.#defaultScopeSet) {\n      this.setScopeTarget(target);\n    }\n\n    return target;\n  }\n\n  removeTarget(target: Target): void {\n    if (!this.#targetsInternal.has(target)) {\n      return;\n    }\n\n    const inScope = this.isInScope(target);\n    this.#targetsInternal.delete(target);\n    for (const modelClass of target.models().keys()) {\n      const model = target.models().get(modelClass);\n      assertNotNullOrUndefined(model);\n      this.modelRemoved(target, modelClass, model, inScope);\n    }\n\n    // Iterate over a copy. #observers might be modified during iteration.\n    for (const observer of [...this.#observers]) {\n      if (!this.#scopedObservers.has(observer) || inScope) {\n        observer.targetRemoved(target);\n      }\n    }\n\n    for (const key of this.#modelListeners.keysArray()) {\n      for (const info of this.#modelListeners.get(key)) {\n        const model = target.model(info.modelClass);\n        if (model) {\n          model.removeEventListener(key, info.wrappedListener);\n        }\n      }\n    }\n  }\n\n  targets(): Target[] {\n    return [...this.#targetsInternal];\n  }\n\n  targetById(id: string): Target|null {\n    // TODO(dgozman): add a map #id -> #target.\n    return this.targets().find(target => target.id() === id) || null;\n  }\n\n  rootTarget(): Target|null {\n    if (this.#targetsInternal.size === 0) {\n      return null;\n    }\n    return this.#targetsInternal.values().next().value ?? null;\n  }\n\n  primaryPageTarget(): Target|null {\n    let target = this.rootTarget();\n    if (target?.type() === TargetType.TAB) {\n      target =\n          this.targets().find(\n              t => t.parentTarget() === target && t.type() === TargetType.FRAME && !t.targetInfo()?.subtype?.length) ||\n          null;\n    }\n    return target;\n  }\n\n  browserTarget(): Target|null {\n    return this.#browserTargetInternal;\n  }\n\n  async maybeAttachInitialTarget(): Promise<boolean> {\n    if (!Boolean(Root.Runtime.Runtime.queryParam('browserConnection'))) {\n      return false;\n    }\n    if (!this.#browserTargetInternal) {\n      this.#browserTargetInternal = new Target(\n          this, /* #id*/ 'main', /* #name*/ 'browser', TargetType.BROWSER, /* #parentTarget*/ null,\n          /* #sessionId */ '', /* suspended*/ false, /* #connection*/ null, /* targetInfo*/ undefined);\n      this.#browserTargetInternal.createModels(new Set(this.#modelObservers.keysArray()));\n    }\n    const targetId =\n        await Host.InspectorFrontendHost.InspectorFrontendHostInstance.initialTargetId() as Protocol.Target.TargetID;\n    // Do not await for Target.autoAttachRelated to return, as it goes throguh the renderer and we don't want to block early\n    // at front-end initialization if a renderer is stuck. The rest of #target discovery and auto-attach process should happen\n    // asynchronously upon Target.attachedToTarget.\n    void this.#browserTargetInternal.targetAgent().invoke_autoAttachRelated({\n      targetId,\n      waitForDebuggerOnStart: true,\n    });\n    return true;\n  }\n\n  clearAllTargetsForTest(): void {\n    this.#targetsInternal.clear();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isInScope(arg: SDKModel|Target|Common.EventTarget.EventTargetEvent<any, any>|null): boolean {\n    if (!arg) {\n      return false;\n    }\n    if (isSDKModelEvent(arg)) {\n      arg = arg.source as SDKModel;\n    }\n    if (arg instanceof SDKModel) {\n      arg = arg.target();\n    }\n    while (arg && arg !== this.#scopeTarget) {\n      arg = arg.parentTarget();\n    }\n    return Boolean(arg) && arg === this.#scopeTarget;\n  }\n\n  // Sets a root of a scope substree.\n  // TargetManager API invoked with `scoped: true` will behave as if targets\n  // outside of the scope subtree don't exist. Concretely this means that\n  // target observers, model observers and model listeners won't be invoked for targets outside of the\n  // scope tree. This method will invoke targetRemoved and modelRemoved for\n  // objects in the previous scope, as if they disappear and then will invoke\n  // targetAdded and modelAdded as if they just appeared.\n  // Note that scopeTarget could be null, which will effectively prevent scoped\n  // observes from getting any events.\n  setScopeTarget(scopeTarget: Target|null): void {\n    if (scopeTarget === this.#scopeTarget) {\n      return;\n    }\n    for (const target of this.targets()) {\n      if (!this.isInScope(target)) {\n        continue;\n      }\n      for (const modelClass of this.#modelObservers.keysArray()) {\n        const model = target.models().get(modelClass);\n        if (!model) {\n          continue;\n        }\n        for (const observer of [...this.#modelObservers.get(modelClass)].filter(o => this.#scopedObservers.has(o))) {\n          observer.modelRemoved(model);\n        }\n      }\n\n      // Iterate over a copy. #observers might be modified during iteration.\n      for (const observer of [...this.#observers].filter(o => this.#scopedObservers.has(o))) {\n        observer.targetRemoved(target);\n      }\n    }\n    this.#scopeTarget = scopeTarget;\n    for (const target of this.targets()) {\n      if (!this.isInScope(target)) {\n        continue;\n      }\n\n      for (const observer of [...this.#observers].filter(o => this.#scopedObservers.has(o))) {\n        observer.targetAdded(target);\n      }\n\n      for (const [modelClass, model] of target.models().entries()) {\n        for (const observer of [...this.#modelObservers.get(modelClass)].filter(o => this.#scopedObservers.has(o))) {\n          observer.modelAdded(model);\n        }\n      }\n    }\n    for (const scopeChangeListener of this.#scopeChangeListeners) {\n      scopeChangeListener();\n    }\n    if (scopeTarget && scopeTarget.inspectedURL()) {\n      this.onInspectedURLChange(scopeTarget);\n    }\n  }\n\n  addScopeChangeListener(listener: () => void): void {\n    this.#scopeChangeListeners.add(listener);\n  }\n\n  removeScopeChangeListener(listener: () => void): void {\n    this.#scopeChangeListeners.delete(listener);\n  }\n\n  scopeTarget(): Target|null {\n    return this.#scopeTarget;\n  }\n}\n\nexport const enum Events {\n  AVAILABLE_TARGETS_CHANGED = 'AvailableTargetsChanged',\n  INSPECTED_URL_CHANGED = 'InspectedURLChanged',\n  NAME_CHANGED = 'NameChanged',\n  SUSPEND_STATE_CHANGED = 'SuspendStateChanged',\n}\n\nexport type EventTypes = {\n  [Events.AVAILABLE_TARGETS_CHANGED]: Protocol.Target.TargetInfo[],\n  [Events.INSPECTED_URL_CHANGED]: Target,\n  [Events.NAME_CHANGED]: Target,\n  [Events.SUSPEND_STATE_CHANGED]: void,\n};\n\nexport class Observer {\n  targetAdded(_target: Target): void {\n  }\n  targetRemoved(_target: Target): void {\n  }\n}\n\nexport class SDKModelObserver<T> {\n  modelAdded(_model: T): void {\n  }\n  modelRemoved(_model: T): void {\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isSDKModelEvent(arg: Object): arg is Common.EventTarget.EventTargetEvent<any, any> {\n  return 'source' in arg && arg.source instanceof SDKModel;\n}\n"],
  "mappings": "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",
  "names": ["Events"]
}
