{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/NetworkManager.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Common from '../common/common.js';\nimport type {Serializer} from '../common/Settings.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {Cookie} from './Cookie.js';\nimport {\n  type BlockedCookieWithReason,\n  Events as NetworkRequestEvents,\n  type ExtraRequestInfo,\n  type ExtraResponseInfo,\n  type IncludedCookieWithReason,\n  type NameValue,\n  NetworkRequest,\n  type WebBundleInfo,\n  type WebBundleInnerRequestInfo,\n} from './NetworkRequest.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\nimport {type SDKModelObserver, TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   *@description Explanation why no content is shown for WebSocket connection.\n   */\n  noContentForWebSocket: 'Content for WebSockets is currently not supported',\n  /**\n   *@description Explanation why no content is shown for redirect response.\n   */\n  noContentForRedirect: 'No content available because this request was redirected',\n  /**\n   *@description Explanation why no content is shown for preflight request.\n   */\n  noContentForPreflight: 'No content available for preflight request',\n  /**\n   *@description Text to indicate that network throttling is disabled\n   */\n  noThrottling: 'No throttling',\n  /**\n   *@description Text to indicate the network connectivity is offline\n   */\n  offline: 'Offline',\n  /**\n   *@description Text in Network Manager representing the \"3G\" throttling preset.\n   */\n  slowG: '3G',  // Named `slowG` for legacy reasons and because this value\n                // is serialized locally on the user's machine: if we\n                // change it we break their stored throttling settings.\n                // (See crrev.com/c/2947255)\n  /**\n   *@description Text in Network Manager representing the \"Slow 4G\" throttling preset\n   */\n  fastG: 'Slow 4G',  // Named `fastG` for legacy reasons and because this value\n                     // is serialized locally on the user's machine: if we\n                     // change it we break their stored throttling settings.\n                     // (See crrev.com/c/2947255)\n  /**\n   *@description Text in Network Manager representing the \"Fast 4G\" throttling preset\n   */\n  fast4G: 'Fast 4G',\n  /**\n   *@description Text in Network Manager\n   *@example {https://example.com} PH1\n   */\n  requestWasBlockedByDevtoolsS: 'Request was blocked by DevTools: \"{PH1}\"',\n  /**\n   *@description Message in Network Manager\n   *@example {XHR} PH1\n   *@example {GET} PH2\n   *@example {https://example.com} PH3\n   */\n  sFailedLoadingSS: '{PH1} failed loading: {PH2} \"{PH3}\".',\n  /**\n   *@description Message in Network Manager\n   *@example {XHR} PH1\n   *@example {GET} PH2\n   *@example {https://example.com} PH3\n   */\n  sFinishedLoadingSS: '{PH1} finished loading: {PH2} \"{PH3}\".',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/NetworkManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nconst requestToManagerMap = new WeakMap<NetworkRequest, NetworkManager>();\n\nconst CONNECTION_TYPES = new Map([\n  ['2g', Protocol.Network.ConnectionType.Cellular2g],\n  ['3g', Protocol.Network.ConnectionType.Cellular3g],\n  ['4g', Protocol.Network.ConnectionType.Cellular4g],\n  ['bluetooth', Protocol.Network.ConnectionType.Bluetooth],\n  ['wifi', Protocol.Network.ConnectionType.Wifi],\n  ['wimax', Protocol.Network.ConnectionType.Wimax],\n]);\n\nexport class NetworkManager extends SDKModel<EventTypes> {\n  readonly dispatcher: NetworkDispatcher;\n  readonly fetchDispatcher: FetchDispatcher;\n  readonly #networkAgent: ProtocolProxyApi.NetworkApi;\n  readonly #bypassServiceWorkerSetting: Common.Settings.Setting<boolean>;\n\n  constructor(target: Target) {\n    super(target);\n    this.dispatcher = new NetworkDispatcher(this);\n    this.fetchDispatcher = new FetchDispatcher(target.fetchAgent(), this);\n    this.#networkAgent = target.networkAgent();\n    target.registerNetworkDispatcher(this.dispatcher);\n    target.registerFetchDispatcher(this.fetchDispatcher);\n    if (Common.Settings.Settings.instance().moduleSetting('cache-disabled').get()) {\n      void this.#networkAgent.invoke_setCacheDisabled({cacheDisabled: true});\n    }\n\n    void this.#networkAgent.invoke_enable({maxPostDataSize: MAX_EAGER_POST_REQUEST_BODY_LENGTH});\n    void this.#networkAgent.invoke_setAttachDebugStack({enabled: true});\n\n    this.#bypassServiceWorkerSetting =\n        Common.Settings.Settings.instance().createSetting('bypass-service-worker', false);\n    if (this.#bypassServiceWorkerSetting.get()) {\n      this.bypassServiceWorkerChanged();\n    }\n    this.#bypassServiceWorkerSetting.addChangeListener(this.bypassServiceWorkerChanged, this);\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('cache-disabled')\n        .addChangeListener(this.cacheDisabledSettingChanged, this);\n  }\n\n  static forRequest(request: NetworkRequest): NetworkManager|null {\n    return requestToManagerMap.get(request) || null;\n  }\n\n  static canReplayRequest(request: NetworkRequest): boolean {\n    return Boolean(requestToManagerMap.get(request)) && Boolean(request.backendRequestId()) && !request.isRedirect() &&\n        request.resourceType() === Common.ResourceType.resourceTypes.XHR;\n  }\n\n  static replayRequest(request: NetworkRequest): void {\n    const manager = requestToManagerMap.get(request);\n    const requestId = request.backendRequestId();\n    if (!manager || !requestId || request.isRedirect()) {\n      return;\n    }\n    void manager.#networkAgent.invoke_replayXHR({requestId});\n  }\n\n  static async searchInRequest(request: NetworkRequest, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const manager = NetworkManager.forRequest(request);\n    const requestId = request.backendRequestId();\n    if (!manager || !requestId || request.isRedirect()) {\n      return [];\n    }\n    const response =\n        await manager.#networkAgent.invoke_searchInResponseBody({requestId, query, caseSensitive, isRegex});\n    return TextUtils.TextUtils.performSearchInSearchMatches(response.result || [], query, caseSensitive, isRegex);\n  }\n\n  static async requestContentData(request: NetworkRequest): Promise<TextUtils.ContentData.ContentDataOrError> {\n    if (request.resourceType() === Common.ResourceType.resourceTypes.WebSocket) {\n      return {error: i18nString(UIStrings.noContentForWebSocket)};\n    }\n    if (!request.finished) {\n      await request.once(NetworkRequestEvents.FINISHED_LOADING);\n    }\n    if (request.isRedirect()) {\n      return {error: i18nString(UIStrings.noContentForRedirect)};\n    }\n    if (request.isPreflightRequest()) {\n      return {error: i18nString(UIStrings.noContentForPreflight)};\n    }\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return {error: 'No network manager for request'};\n    }\n    const requestId = request.backendRequestId();\n    if (!requestId) {\n      return {error: 'No backend request id for request'};\n    }\n    const response = await manager.#networkAgent.invoke_getResponseBody({requestId});\n    const error = response.getError();\n    if (error) {\n      return {error};\n    }\n    return new TextUtils.ContentData.ContentData(\n        response.body, response.base64Encoded, request.mimeType, request.charset() ?? undefined);\n  }\n\n  /**\n   * Returns the already received bytes for an in-flight request. After calling this method\n   * \"dataReceived\" events will contain additional data.\n   */\n  static async streamResponseBody(request: NetworkRequest): Promise<TextUtils.ContentData.ContentDataOrError> {\n    if (request.finished) {\n      return {error: 'Streaming the response body is only available for in-flight requests.'};\n    }\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return {error: 'No network manager for request'};\n    }\n    const requestId = request.backendRequestId();\n    if (!requestId) {\n      return {error: 'No backend request id for request'};\n    }\n    const response = await manager.#networkAgent.invoke_streamResourceContent({requestId});\n    const error = response.getError();\n    if (error) {\n      return {error};\n    }\n    // Wait for at least the `responseReceived event so we have accurate mimetype and charset.\n    await request.waitForResponseReceived();\n    return new TextUtils.ContentData.ContentData(\n        response.bufferedData, /* isBase64=*/ true, request.mimeType, request.charset() ?? undefined);\n  }\n\n  static async requestPostData(request: NetworkRequest): Promise<string|null> {\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      console.error('No network manager for request');\n      return null;\n    }\n    const requestId = request.backendRequestId();\n    if (!requestId) {\n      console.error('No backend request id for request');\n      return null;\n    }\n    try {\n      const {postData} = await manager.#networkAgent.invoke_getRequestPostData({requestId});\n      return postData;\n    } catch (e) {\n      return e.message;\n    }\n  }\n\n  static connectionType(conditions: Conditions): Protocol.Network.ConnectionType {\n    if (!conditions.download && !conditions.upload) {\n      return Protocol.Network.ConnectionType.None;\n    }\n    try {\n      const title =\n          typeof conditions.title === 'function' ? conditions.title().toLowerCase() : conditions.title.toLowerCase();\n      for (const [name, protocolType] of CONNECTION_TYPES) {\n        if (title.includes(name)) {\n          return protocolType;\n        }\n      }\n    } catch {\n      // If the i18nKey for this condition has changed, calling conditions.title() will break, so in that case we reset to NONE\n      return Protocol.Network.ConnectionType.None;\n    }\n\n    return Protocol.Network.ConnectionType.Other;\n  }\n\n  static lowercaseHeaders(headers: Protocol.Network.Headers): Protocol.Network.Headers {\n    const newHeaders: Protocol.Network.Headers = {};\n    for (const headerName in headers) {\n      newHeaders[headerName.toLowerCase()] = headers[headerName];\n    }\n    return newHeaders;\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): NetworkRequest|null {\n    return this.dispatcher.requestForURL(url);\n  }\n\n  requestForId(id: string): NetworkRequest|null {\n    return this.dispatcher.requestForId(id);\n  }\n\n  requestForLoaderId(loaderId: Protocol.Network.LoaderId): NetworkRequest|null {\n    return this.dispatcher.requestForLoaderId(loaderId);\n  }\n\n  private cacheDisabledSettingChanged({data: enabled}: Common.EventTarget.EventTargetEvent<boolean>): void {\n    void this.#networkAgent.invoke_setCacheDisabled({cacheDisabled: enabled});\n  }\n\n  override dispose(): void {\n    Common.Settings.Settings.instance()\n        .moduleSetting('cache-disabled')\n        .removeChangeListener(this.cacheDisabledSettingChanged, this);\n  }\n\n  private bypassServiceWorkerChanged(): void {\n    void this.#networkAgent.invoke_setBypassServiceWorker({bypass: this.#bypassServiceWorkerSetting.get()});\n  }\n\n  async getSecurityIsolationStatus(frameId: Protocol.Page.FrameId|\n                                   null): Promise<Protocol.Network.SecurityIsolationStatus|null> {\n    const result = await this.#networkAgent.invoke_getSecurityIsolationStatus({frameId: frameId ?? undefined});\n    if (result.getError()) {\n      return null;\n    }\n    return result.status;\n  }\n\n  async enableReportingApi(enable: boolean = true): Promise<Promise<Protocol.ProtocolResponseWithError>> {\n    return this.#networkAgent.invoke_enableReportingApi({enable});\n  }\n\n  async loadNetworkResource(\n      frameId: Protocol.Page.FrameId|null, url: Platform.DevToolsPath.UrlString,\n      options: Protocol.Network.LoadNetworkResourceOptions): Promise<Protocol.Network.LoadNetworkResourcePageResult> {\n    const result = await this.#networkAgent.invoke_loadNetworkResource({frameId: frameId ?? undefined, url, options});\n    if (result.getError()) {\n      throw new Error(result.getError());\n    }\n    return result.resource;\n  }\n\n  clearRequests(): void {\n    this.dispatcher.clearRequests();\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  RequestStarted = 'RequestStarted',\n  RequestUpdated = 'RequestUpdated',\n  RequestFinished = 'RequestFinished',\n  RequestUpdateDropped = 'RequestUpdateDropped',\n  ResponseReceived = 'ResponseReceived',\n  MessageGenerated = 'MessageGenerated',\n  RequestRedirected = 'RequestRedirected',\n  LoadingFinished = 'LoadingFinished',\n  ReportingApiReportAdded = 'ReportingApiReportAdded',\n  ReportingApiReportUpdated = 'ReportingApiReportUpdated',\n  ReportingApiEndpointsChangedForOrigin = 'ReportingApiEndpointsChangedForOrigin',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface RequestStartedEvent {\n  request: NetworkRequest;\n  originalRequest: Protocol.Network.Request|null;\n}\n\nexport interface ResponseReceivedEvent {\n  request: NetworkRequest;\n  response: Protocol.Network.Response;\n}\n\nexport interface MessageGeneratedEvent {\n  message: Common.UIString.LocalizedString;\n  requestId: string;\n  warning: boolean;\n}\n\nexport type EventTypes = {\n  [Events.RequestStarted]: RequestStartedEvent,\n  [Events.RequestUpdated]: NetworkRequest,\n  [Events.RequestFinished]: NetworkRequest,\n  [Events.RequestUpdateDropped]: RequestUpdateDroppedEventData,\n  [Events.ResponseReceived]: ResponseReceivedEvent,\n  [Events.MessageGenerated]: MessageGeneratedEvent,\n  [Events.RequestRedirected]: NetworkRequest,\n  [Events.LoadingFinished]: NetworkRequest,\n  [Events.ReportingApiReportAdded]: Protocol.Network.ReportingApiReport,\n  [Events.ReportingApiReportUpdated]: Protocol.Network.ReportingApiReport,\n  [Events.ReportingApiEndpointsChangedForOrigin]: Protocol.Network.ReportingApiEndpointsChangedForOriginEvent,\n};\n\n/**\n * Define some built-in DevTools throttling presets.\n * Note that for the download, upload and RTT values we multiply them by adjustment factors to make DevTools' emulation more accurate.\n * @see https://docs.google.com/document/d/10lfVdS1iDWCRKQXPfbxEn4Or99D64mvNlugP1AQuFlE/edit for historical context.\n * @see https://crbug.com/342406608#comment10 for context around the addition of 4G presets in June 2024.\n */\n\nexport const NoThrottlingConditions: Conditions = {\n  title: i18nLazyString(UIStrings.noThrottling),\n  i18nTitleKey: UIStrings.noThrottling,\n  download: -1,\n  upload: -1,\n  latency: 0,\n};\n\nexport const OfflineConditions: Conditions = {\n  title: i18nLazyString(UIStrings.offline),\n  i18nTitleKey: UIStrings.offline,\n  download: 0,\n  upload: 0,\n  latency: 0,\n};\n\nconst slow3GTargetLatency = 400;\nexport const Slow3GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.slowG),\n  i18nTitleKey: UIStrings.slowG,\n  // ~500Kbps down\n  download: 500 * 1000 / 8 * .8,\n  // ~500Kbps up\n  upload: 500 * 1000 / 8 * .8,\n  // 400ms RTT\n  latency: slow3GTargetLatency * 5,\n  targetLatency: slow3GTargetLatency,\n};\n\n// Note for readers: this used to be called \"Fast 3G\" but it was renamed in May\n// 2024 to align with LH (crbug.com/342406608).\nconst slow4GTargetLatency = 150;\nexport const Slow4GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.fastG),\n  i18nTitleKey: UIStrings.fastG,\n  // ~1.6 Mbps down\n  download: 1.6 * 1000 * 1000 / 8 * .9,\n  // ~0.75 Mbps up\n  upload: 750 * 1000 / 8 * .9,\n  // 150ms RTT\n  latency: slow4GTargetLatency * 3.75,\n  targetLatency: slow4GTargetLatency,\n};\n\nconst fast4GTargetLatency = 60;\nexport const Fast4GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.fast4G),\n  i18nTitleKey: UIStrings.fast4G,\n  // 9 Mbps down\n  download: 9 * 1000 * 1000 / 8 * .9,\n  // 1.5 Mbps up\n  upload: 1.5 * 1000 * 1000 / 8 * .9,\n  // 60ms RTT\n  latency: fast4GTargetLatency * 2.75,\n  targetLatency: fast4GTargetLatency,\n};\n\nconst MAX_EAGER_POST_REQUEST_BODY_LENGTH = 64 * 1024;  // bytes\n\nexport class FetchDispatcher implements ProtocolProxyApi.FetchDispatcher {\n  readonly #fetchAgent: ProtocolProxyApi.FetchApi;\n  readonly #manager: NetworkManager;\n\n  constructor(agent: ProtocolProxyApi.FetchApi, manager: NetworkManager) {\n    this.#fetchAgent = agent;\n    this.#manager = manager;\n  }\n\n  requestPaused({requestId, request, resourceType, responseStatusCode, responseHeaders, networkId}:\n                    Protocol.Fetch.RequestPausedEvent): void {\n    const networkRequest = networkId ? this.#manager.requestForId(networkId) : null;\n    // If there was no 'Network.responseReceivedExtraInfo' event (e.g. for 'file:/' URLSs),\n    // populate 'originalResponseHeaders' with the headers from the 'Fetch.requestPaused' event.\n    if (networkRequest?.originalResponseHeaders.length === 0 && responseHeaders) {\n      networkRequest.originalResponseHeaders = responseHeaders;\n    }\n    void MultitargetNetworkManager.instance().requestIntercepted(new InterceptedRequest(\n        this.#fetchAgent, request, resourceType, requestId, networkRequest, responseStatusCode, responseHeaders));\n  }\n\n  authRequired({}: Protocol.Fetch.AuthRequiredEvent): void {\n  }\n}\n\nexport class NetworkDispatcher implements ProtocolProxyApi.NetworkDispatcher {\n  readonly #manager: NetworkManager;\n  #requestsById: Map<string, NetworkRequest>;\n  #requestsByURL: Map<Platform.DevToolsPath.UrlString, NetworkRequest>;\n  #requestsByLoaderId: Map<Protocol.Network.LoaderId, NetworkRequest>;\n  #requestIdToExtraInfoBuilder: Map<string, ExtraInfoBuilder>;\n  readonly #requestIdToTrustTokenEvent: Map<string, Protocol.Network.TrustTokenOperationDoneEvent>;\n  constructor(manager: NetworkManager) {\n    this.#manager = manager;\n    this.#requestsById = new Map();\n    this.#requestsByURL = new Map();\n    this.#requestsByLoaderId = new Map();\n    this.#requestIdToExtraInfoBuilder = new Map();\n    /**\n     * In case of an early abort or a cache hit, the Trust Token done event is\n     * reported before the request itself is created in `requestWillBeSent`.\n     * This causes the event to be lost as no `NetworkRequest` instance has been\n     * created yet.\n     * This map caches the events temporarliy and populates the NetworKRequest\n     * once it is created in `requestWillBeSent`.\n     */\n    this.#requestIdToTrustTokenEvent = new Map();\n\n    MultitargetNetworkManager.instance().addEventListener(\n        MultitargetNetworkManager.Events.REQUEST_INTERCEPTED, this.#markAsIntercepted.bind(this));\n  }\n\n  #markAsIntercepted(event: Common.EventTarget.EventTargetEvent<string>): void {\n    const request = this.requestForId(event.data);\n    if (request) {\n      request.setWasIntercepted(true);\n    }\n  }\n\n  private headersMapToHeadersArray(headersMap: Protocol.Network.Headers): NameValue[] {\n    const result = [];\n    for (const name in headersMap) {\n      const values = headersMap[name].split('\\n');\n      for (let i = 0; i < values.length; ++i) {\n        result.push({name, value: values[i]});\n      }\n    }\n    return result;\n  }\n\n  private updateNetworkRequestWithRequest(networkRequest: NetworkRequest, request: Protocol.Network.Request): void {\n    networkRequest.requestMethod = request.method;\n    networkRequest.setRequestHeaders(this.headersMapToHeadersArray(request.headers));\n    networkRequest.setRequestFormData(Boolean(request.hasPostData), request.postData || null);\n    networkRequest.setInitialPriority(request.initialPriority);\n    networkRequest.mixedContentType = request.mixedContentType || Protocol.Security.MixedContentType.None;\n    networkRequest.setReferrerPolicy(request.referrerPolicy);\n    networkRequest.setIsSameSite(request.isSameSite || false);\n  }\n\n  private updateNetworkRequestWithResponse(networkRequest: NetworkRequest, response: Protocol.Network.Response): void {\n    if (response.url && networkRequest.url() !== response.url) {\n      networkRequest.setUrl(response.url as Platform.DevToolsPath.UrlString);\n    }\n    networkRequest.mimeType = response.mimeType;\n    networkRequest.setCharset(response.charset);\n    if (!networkRequest.statusCode || networkRequest.wasIntercepted()) {\n      networkRequest.statusCode = response.status;\n    }\n    if (!networkRequest.statusText || networkRequest.wasIntercepted()) {\n      networkRequest.statusText = response.statusText;\n    }\n    if (!networkRequest.hasExtraResponseInfo() || networkRequest.wasIntercepted()) {\n      networkRequest.responseHeaders = this.headersMapToHeadersArray(response.headers);\n    }\n\n    if (response.encodedDataLength >= 0) {\n      networkRequest.setTransferSize(response.encodedDataLength);\n    }\n\n    if (response.requestHeaders && !networkRequest.hasExtraRequestInfo()) {\n      // TODO(http://crbug.com/1004979): Stop using response.requestHeaders and\n      //   response.requestHeadersText once shared workers\n      //   emit Network.*ExtraInfo events for their network #requests.\n      networkRequest.setRequestHeaders(this.headersMapToHeadersArray(response.requestHeaders));\n      networkRequest.setRequestHeadersText(response.requestHeadersText || '');\n    }\n\n    networkRequest.connectionReused = response.connectionReused;\n    networkRequest.connectionId = String(response.connectionId);\n    if (response.remoteIPAddress) {\n      networkRequest.setRemoteAddress(response.remoteIPAddress, response.remotePort || -1);\n    }\n\n    if (response.fromServiceWorker) {\n      networkRequest.fetchedViaServiceWorker = true;\n    }\n\n    if (response.fromDiskCache) {\n      networkRequest.setFromDiskCache();\n    }\n\n    if (response.fromPrefetchCache) {\n      networkRequest.setFromPrefetchCache();\n    }\n\n    if (response.fromEarlyHints) {\n      networkRequest.setFromEarlyHints();\n    }\n\n    if (response.cacheStorageCacheName) {\n      networkRequest.setResponseCacheStorageCacheName(response.cacheStorageCacheName);\n    }\n\n    if (response.serviceWorkerRouterInfo) {\n      networkRequest.serviceWorkerRouterInfo = response.serviceWorkerRouterInfo;\n    }\n\n    if (response.responseTime) {\n      networkRequest.setResponseRetrievalTime(new Date(response.responseTime));\n    }\n\n    networkRequest.timing = response.timing;\n\n    networkRequest.protocol = response.protocol || '';\n\n    networkRequest.alternateProtocolUsage = response.alternateProtocolUsage;\n\n    if (response.serviceWorkerResponseSource) {\n      networkRequest.setServiceWorkerResponseSource(response.serviceWorkerResponseSource);\n    }\n\n    networkRequest.setSecurityState(response.securityState);\n\n    if (response.securityDetails) {\n      networkRequest.setSecurityDetails(response.securityDetails);\n    }\n\n    const newResourceType = Common.ResourceType.ResourceType.fromMimeTypeOverride(networkRequest.mimeType);\n    if (newResourceType) {\n      networkRequest.setResourceType(newResourceType);\n    }\n    if (networkRequest.responseReceivedPromiseResolve) {\n      // Anyone interested in waiting for response headers being available?\n      networkRequest.responseReceivedPromiseResolve();\n    } else {\n      // If not, make sure no one will wait on it in the future.\n      networkRequest.responseReceivedPromise = Promise.resolve();\n    }\n  }\n\n  requestForId(id: string): NetworkRequest|null {\n    return this.#requestsById.get(id) || null;\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): NetworkRequest|null {\n    return this.#requestsByURL.get(url) || null;\n  }\n\n  requestForLoaderId(loaderId: Protocol.Network.LoaderId): NetworkRequest|null {\n    return this.#requestsByLoaderId.get(loaderId) || null;\n  }\n\n  resourceChangedPriority({requestId, newPriority}: Protocol.Network.ResourceChangedPriorityEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (networkRequest) {\n      networkRequest.setPriority(newPriority);\n    }\n  }\n\n  signedExchangeReceived({requestId, info}: Protocol.Network.SignedExchangeReceivedEvent): void {\n    // While loading a signed exchange, a signedExchangeReceived event is sent\n    // between two requestWillBeSent events.\n    // 1. The first requestWillBeSent is sent while starting the navigation (or\n    //    prefetching).\n    // 2. This signedExchangeReceived event is sent when the browser detects the\n    //    signed exchange.\n    // 3. The second requestWillBeSent is sent with the generated redirect\n    //    response and a new redirected request which URL is the inner request\n    //    URL of the signed exchange.\n    let networkRequest = this.#requestsById.get(requestId);\n    // |requestId| is available only for navigation #requests. If the request was\n    // sent from a renderer process for prefetching, it is not available. In the\n    // case, need to fallback to look for the URL.\n    // TODO(crbug/841076): Sends the request ID of prefetching to the browser\n    // process and DevTools to find the matching request.\n    if (!networkRequest) {\n      networkRequest = this.#requestsByURL.get(info.outerResponse.url as Platform.DevToolsPath.UrlString);\n      if (!networkRequest) {\n        return;\n      }\n    }\n    networkRequest.setSignedExchangeInfo(info);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.SignedExchange);\n\n    this.updateNetworkRequestWithResponse(networkRequest, info.outerResponse);\n    this.updateNetworkRequest(networkRequest);\n    this.#manager.dispatchEventToListeners(\n        Events.ResponseReceived, {request: networkRequest, response: info.outerResponse});\n  }\n\n  requestWillBeSent({\n    requestId,\n    loaderId,\n    documentURL,\n    request,\n    timestamp,\n    wallTime,\n    initiator,\n    redirectResponse,\n    type,\n    frameId,\n    hasUserGesture,\n  }: Protocol.Network.RequestWillBeSentEvent): void {\n    let networkRequest = this.#requestsById.get(requestId);\n    if (networkRequest) {\n      // FIXME: move this check to the backend.\n      if (!redirectResponse) {\n        return;\n      }\n      // If signedExchangeReceived event has already been sent for the request,\n      // ignores the internally generated |redirectResponse|. The\n      // |outerResponse| of SignedExchangeInfo was set to |networkRequest| in\n      // signedExchangeReceived().\n      if (!networkRequest.signedExchangeInfo()) {\n        this.responseReceived({\n          requestId,\n          loaderId,\n          timestamp,\n          type: type || Protocol.Network.ResourceType.Other,\n          response: redirectResponse,\n          hasExtraInfo: false,\n          frameId,\n        });\n      }\n      networkRequest = this.appendRedirect(requestId, timestamp, request.url as Platform.DevToolsPath.UrlString);\n      this.#manager.dispatchEventToListeners(Events.RequestRedirected, networkRequest);\n    } else {\n      networkRequest = NetworkRequest.create(\n          requestId, request.url as Platform.DevToolsPath.UrlString, documentURL as Platform.DevToolsPath.UrlString,\n          frameId ?? null, loaderId, initiator, hasUserGesture);\n      requestToManagerMap.set(networkRequest, this.#manager);\n    }\n    networkRequest.hasNetworkData = true;\n    this.updateNetworkRequestWithRequest(networkRequest, request);\n    networkRequest.setIssueTime(timestamp, wallTime);\n    networkRequest.setResourceType(\n        type ? Common.ResourceType.resourceTypes[type] : Common.ResourceType.resourceTypes.Other);\n    if (request.trustTokenParams) {\n      networkRequest.setTrustTokenParams(request.trustTokenParams);\n    }\n    const maybeTrustTokenEvent = this.#requestIdToTrustTokenEvent.get(requestId);\n    if (maybeTrustTokenEvent) {\n      networkRequest.setTrustTokenOperationDoneEvent(maybeTrustTokenEvent);\n      this.#requestIdToTrustTokenEvent.delete(requestId);\n    }\n\n    this.getExtraInfoBuilder(requestId).addRequest(networkRequest);\n\n    this.startNetworkRequest(networkRequest, request);\n  }\n\n  requestServedFromCache({requestId}: Protocol.Network.RequestServedFromCacheEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.setFromMemoryCache();\n  }\n\n  responseReceived({requestId, loaderId, timestamp, type, response, frameId}: Protocol.Network.ResponseReceivedEvent):\n      void {\n    const networkRequest = this.#requestsById.get(requestId);\n    const lowercaseHeaders = NetworkManager.lowercaseHeaders(response.headers);\n    if (!networkRequest) {\n      const lastModifiedHeader = lowercaseHeaders['last-modified'];\n      // We missed the requestWillBeSent.\n      const eventData: RequestUpdateDroppedEventData = {\n        url: response.url as Platform.DevToolsPath.UrlString,\n        frameId: frameId ?? null,\n        loaderId,\n        resourceType: type,\n        mimeType: response.mimeType,\n        lastModified: lastModifiedHeader ? new Date(lastModifiedHeader) : null,\n      };\n      this.#manager.dispatchEventToListeners(Events.RequestUpdateDropped, eventData);\n      return;\n    }\n\n    networkRequest.responseReceivedTime = timestamp;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[type]);\n\n    this.updateNetworkRequestWithResponse(networkRequest, response);\n\n    this.updateNetworkRequest(networkRequest);\n    this.#manager.dispatchEventToListeners(Events.ResponseReceived, {request: networkRequest, response});\n  }\n\n  dataReceived(event: Protocol.Network.DataReceivedEvent): void {\n    let networkRequest: NetworkRequest|null|undefined = this.#requestsById.get(event.requestId);\n    if (!networkRequest) {\n      networkRequest = this.maybeAdoptMainResourceRequest(event.requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n    networkRequest.addDataReceivedEvent(event);\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  loadingFinished({requestId, timestamp: finishTime, encodedDataLength}: Protocol.Network.LoadingFinishedEvent): void {\n    let networkRequest: NetworkRequest|null|undefined = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      networkRequest = this.maybeAdoptMainResourceRequest(requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n    this.getExtraInfoBuilder(requestId).finished();\n    this.finishNetworkRequest(networkRequest, finishTime, encodedDataLength);\n    this.#manager.dispatchEventToListeners(Events.LoadingFinished, networkRequest);\n  }\n\n  loadingFailed({\n    requestId,\n    timestamp: time,\n    type: resourceType,\n    errorText: localizedDescription,\n    canceled,\n    blockedReason,\n    corsErrorStatus,\n  }: Protocol.Network.LoadingFailedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.failed = true;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[resourceType]);\n    networkRequest.canceled = Boolean(canceled);\n    if (blockedReason) {\n      networkRequest.setBlockedReason(blockedReason);\n      if (blockedReason === Protocol.Network.BlockedReason.Inspector) {\n        const message = i18nString(UIStrings.requestWasBlockedByDevtoolsS, {PH1: networkRequest.url()});\n        this.#manager.dispatchEventToListeners(Events.MessageGenerated, {message, requestId, warning: true});\n      }\n    }\n    if (corsErrorStatus) {\n      networkRequest.setCorsErrorStatus(corsErrorStatus);\n    }\n    networkRequest.localizedFailDescription = localizedDescription;\n    this.getExtraInfoBuilder(requestId).finished();\n    this.finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  webSocketCreated({requestId, url: requestURL, initiator}: Protocol.Network.WebSocketCreatedEvent): void {\n    const networkRequest =\n        NetworkRequest.createForWebSocket(requestId, requestURL as Platform.DevToolsPath.UrlString, initiator);\n    requestToManagerMap.set(networkRequest, this.#manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebSocket);\n    this.startNetworkRequest(networkRequest, null);\n  }\n\n  webSocketWillSendHandshakeRequest({requestId, timestamp: time, wallTime, request}:\n                                        Protocol.Network.WebSocketWillSendHandshakeRequestEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.requestMethod = 'GET';\n    networkRequest.setRequestHeaders(this.headersMapToHeadersArray(request.headers));\n    networkRequest.setIssueTime(time, wallTime);\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketHandshakeResponseReceived({requestId, timestamp: time, response}:\n                                         Protocol.Network.WebSocketHandshakeResponseReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.statusCode = response.status;\n    networkRequest.statusText = response.statusText;\n    networkRequest.responseHeaders = this.headersMapToHeadersArray(response.headers);\n    networkRequest.responseHeadersText = response.headersText || '';\n    if (response.requestHeaders) {\n      networkRequest.setRequestHeaders(this.headersMapToHeadersArray(response.requestHeaders));\n    }\n    if (response.requestHeadersText) {\n      networkRequest.setRequestHeadersText(response.requestHeadersText);\n    }\n    networkRequest.responseReceivedTime = time;\n    networkRequest.protocol = 'websocket';\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameReceived({requestId, timestamp: time, response}: Protocol.Network.WebSocketFrameReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, false);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameSent({requestId, timestamp: time, response}: Protocol.Network.WebSocketFrameSentEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, true);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameError({requestId, timestamp: time, errorMessage}: Protocol.Network.WebSocketFrameErrorEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrameError(errorMessage, time);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketClosed({requestId, timestamp: time}: Protocol.Network.WebSocketClosedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    this.finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  eventSourceMessageReceived({requestId, timestamp: time, eventName, eventId, data}:\n                                 Protocol.Network.EventSourceMessageReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    networkRequest.addEventSourceMessage(time, eventName, eventId, data);\n  }\n\n  requestIntercepted({}: Protocol.Network.RequestInterceptedEvent): void {\n  }\n\n  requestWillBeSentExtraInfo(\n      {requestId, associatedCookies, headers, clientSecurityState, connectTiming, siteHasCookieInOtherPartition}:\n          Protocol.Network.RequestWillBeSentExtraInfoEvent): void {\n    const blockedRequestCookies: BlockedCookieWithReason[] = [];\n    const includedRequestCookies: IncludedCookieWithReason[] = [];\n    for (const {blockedReasons, exemptionReason, cookie} of associatedCookies) {\n      if (blockedReasons.length === 0) {\n        includedRequestCookies.push({exemptionReason, cookie: Cookie.fromProtocolCookie(cookie)});\n      } else {\n        blockedRequestCookies.push({blockedReasons, cookie: Cookie.fromProtocolCookie(cookie)});\n      }\n    }\n    const extraRequestInfo = {\n      blockedRequestCookies,\n      includedRequestCookies,\n      requestHeaders: this.headersMapToHeadersArray(headers),\n      clientSecurityState,\n      connectTiming,\n      siteHasCookieInOtherPartition,\n    };\n    this.getExtraInfoBuilder(requestId).addRequestExtraInfo(extraRequestInfo);\n  }\n\n  responseReceivedEarlyHints({\n    requestId,\n    headers,\n  }: Protocol.Network.ResponseReceivedEarlyHintsEvent): void {\n    this.getExtraInfoBuilder(requestId).setEarlyHintsHeaders(this.headersMapToHeadersArray(headers));\n  }\n\n  responseReceivedExtraInfo({\n    requestId,\n    blockedCookies,\n    headers,\n    headersText,\n    resourceIPAddressSpace,\n    statusCode,\n    cookiePartitionKey,\n    cookiePartitionKeyOpaque,\n    exemptedCookies,\n  }: Protocol.Network.ResponseReceivedExtraInfoEvent): void {\n    const extraResponseInfo: ExtraResponseInfo = {\n      blockedResponseCookies:\n          blockedCookies.map(blockedCookie => ({\n                               blockedReasons: blockedCookie.blockedReasons,\n                               cookieLine: blockedCookie.cookieLine,\n                               cookie: blockedCookie.cookie ? Cookie.fromProtocolCookie(blockedCookie.cookie) : null,\n                             })),\n      responseHeaders: this.headersMapToHeadersArray(headers),\n      responseHeadersText: headersText,\n      resourceIPAddressSpace,\n      statusCode,\n      cookiePartitionKey,\n      cookiePartitionKeyOpaque,\n      exemptedResponseCookies: exemptedCookies?.map(exemptedCookie => ({\n                                                      cookie: Cookie.fromProtocolCookie(exemptedCookie.cookie),\n                                                      cookieLine: exemptedCookie.cookieLine,\n                                                      exemptionReason: exemptedCookie.exemptionReason,\n                                                    })),\n    };\n    this.getExtraInfoBuilder(requestId).addResponseExtraInfo(extraResponseInfo);\n  }\n\n  private getExtraInfoBuilder(requestId: string): ExtraInfoBuilder {\n    let builder: ExtraInfoBuilder;\n    if (!this.#requestIdToExtraInfoBuilder.has(requestId)) {\n      builder = new ExtraInfoBuilder();\n      this.#requestIdToExtraInfoBuilder.set(requestId, builder);\n    } else {\n      builder = (this.#requestIdToExtraInfoBuilder.get(requestId) as ExtraInfoBuilder);\n    }\n    return builder;\n  }\n\n  private appendRedirect(\n      requestId: Protocol.Network.RequestId, time: number,\n      redirectURL: Platform.DevToolsPath.UrlString): NetworkRequest {\n    const originalNetworkRequest = this.#requestsById.get(requestId);\n    if (!originalNetworkRequest) {\n      throw new Error(`Could not find original network request for ${requestId}`);\n    }\n    let redirectCount = 0;\n    for (let redirect = originalNetworkRequest.redirectSource(); redirect; redirect = redirect.redirectSource()) {\n      redirectCount++;\n    }\n\n    originalNetworkRequest.markAsRedirect(redirectCount);\n    this.finishNetworkRequest(originalNetworkRequest, time, -1);\n    const newNetworkRequest = NetworkRequest.create(\n        requestId, redirectURL, originalNetworkRequest.documentURL, originalNetworkRequest.frameId,\n        originalNetworkRequest.loaderId, originalNetworkRequest.initiator(),\n        originalNetworkRequest.hasUserGesture() ?? undefined);\n    requestToManagerMap.set(newNetworkRequest, this.#manager);\n    newNetworkRequest.setRedirectSource(originalNetworkRequest);\n    originalNetworkRequest.setRedirectDestination(newNetworkRequest);\n    return newNetworkRequest;\n  }\n\n  private maybeAdoptMainResourceRequest(requestId: string): NetworkRequest|null {\n    const request = MultitargetNetworkManager.instance().inflightMainResourceRequests.get(requestId);\n    if (!request) {\n      return null;\n    }\n    const oldDispatcher = (NetworkManager.forRequest(request) as NetworkManager).dispatcher;\n    oldDispatcher.#requestsById.delete(requestId);\n    oldDispatcher.#requestsByURL.delete(request.url());\n    const loaderId = request.loaderId;\n    if (loaderId) {\n      oldDispatcher.#requestsByLoaderId.delete(loaderId);\n    }\n    const builder = oldDispatcher.#requestIdToExtraInfoBuilder.get(requestId);\n    oldDispatcher.#requestIdToExtraInfoBuilder.delete(requestId);\n    this.#requestsById.set(requestId, request);\n    this.#requestsByURL.set(request.url(), request);\n    if (loaderId) {\n      this.#requestsByLoaderId.set(loaderId, request);\n    }\n    if (builder) {\n      this.#requestIdToExtraInfoBuilder.set(requestId, builder);\n    }\n    requestToManagerMap.set(request, this.#manager);\n    return request;\n  }\n\n  private startNetworkRequest(networkRequest: NetworkRequest, originalRequest: Protocol.Network.Request|null): void {\n    this.#requestsById.set(networkRequest.requestId(), networkRequest);\n    this.#requestsByURL.set(networkRequest.url(), networkRequest);\n    const loaderId = networkRequest.loaderId;\n    if (loaderId) {\n      this.#requestsByLoaderId.set(loaderId, networkRequest);\n    }\n    // The following relies on the fact that loaderIds and requestIds are\n    // globally unique and that the main request has them equal.\n    if (networkRequest.loaderId === networkRequest.requestId()) {\n      MultitargetNetworkManager.instance().inflightMainResourceRequests.set(networkRequest.requestId(), networkRequest);\n    }\n\n    this.#manager.dispatchEventToListeners(Events.RequestStarted, {request: networkRequest, originalRequest});\n  }\n\n  private updateNetworkRequest(networkRequest: NetworkRequest): void {\n    this.#manager.dispatchEventToListeners(Events.RequestUpdated, networkRequest);\n  }\n\n  private finishNetworkRequest(\n      networkRequest: NetworkRequest,\n      finishTime: number,\n      encodedDataLength: number,\n      ): void {\n    networkRequest.endTime = finishTime;\n    networkRequest.finished = true;\n    if (encodedDataLength >= 0) {\n      const redirectSource = networkRequest.redirectSource();\n      if (redirectSource && redirectSource.signedExchangeInfo()) {\n        networkRequest.setTransferSize(0);\n        redirectSource.setTransferSize(encodedDataLength);\n        this.updateNetworkRequest(redirectSource);\n      } else {\n        networkRequest.setTransferSize(encodedDataLength);\n      }\n    }\n    this.#manager.dispatchEventToListeners(Events.RequestFinished, networkRequest);\n    MultitargetNetworkManager.instance().inflightMainResourceRequests.delete(networkRequest.requestId());\n\n    if (Common.Settings.Settings.instance().moduleSetting('monitoring-xhr-enabled').get() &&\n        networkRequest.resourceType().category() === Common.ResourceType.resourceCategories.XHR) {\n      let message;\n      const failedToLoad = networkRequest.failed || networkRequest.hasErrorStatusCode();\n      if (failedToLoad) {\n        message = i18nString(\n            UIStrings.sFailedLoadingSS,\n            {PH1: networkRequest.resourceType().title(), PH2: networkRequest.requestMethod, PH3: networkRequest.url()});\n      } else {\n        message = i18nString(\n            UIStrings.sFinishedLoadingSS,\n            {PH1: networkRequest.resourceType().title(), PH2: networkRequest.requestMethod, PH3: networkRequest.url()});\n      }\n\n      this.#manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message, requestId: networkRequest.requestId(), warning: false});\n    }\n  }\n\n  clearRequests(): void {\n    for (const [requestId, request] of this.#requestsById) {\n      if (request.finished) {\n        this.#requestsById.delete(requestId);\n      }\n    }\n    for (const [requestURL, request] of this.#requestsByURL) {\n      if (request.finished) {\n        this.#requestsByURL.delete(requestURL);\n      }\n    }\n    for (const [requestLoaderId, request] of this.#requestsByLoaderId) {\n      if (request.finished) {\n        this.#requestsByLoaderId.delete(requestLoaderId);\n      }\n    }\n    for (const [requestId, builder] of this.#requestIdToExtraInfoBuilder) {\n      if (builder.isFinished()) {\n        this.#requestIdToExtraInfoBuilder.delete(requestId);\n      }\n    }\n  }\n\n  webTransportCreated({transportId, url: requestURL, timestamp: time, initiator}:\n                          Protocol.Network.WebTransportCreatedEvent): void {\n    const networkRequest =\n        NetworkRequest.createForWebSocket(transportId, requestURL as Platform.DevToolsPath.UrlString, initiator);\n    networkRequest.hasNetworkData = true;\n    requestToManagerMap.set(networkRequest, this.#manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebTransport);\n    networkRequest.setIssueTime(time, 0);\n    // TODO(yoichio): Add appropreate events to address abort cases.\n    this.startNetworkRequest(networkRequest, null);\n  }\n\n  webTransportConnectionEstablished({transportId, timestamp: time}:\n                                        Protocol.Network.WebTransportConnectionEstablishedEvent): void {\n    const networkRequest = this.#requestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    // This dummy deltas are needed to show this request as being\n    // downloaded(blue) given typical WebTransport is kept for a while.\n    // TODO(yoichio): Add appropreate events to fix these dummy datas.\n    // DNS lookup?\n    networkRequest.responseReceivedTime = time;\n    networkRequest.endTime = time + 0.001;\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webTransportClosed({transportId, timestamp: time}: Protocol.Network.WebTransportClosedEvent): void {\n    const networkRequest = this.#requestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.endTime = time;\n    this.finishNetworkRequest(networkRequest, time, 0);\n  }\n\n  trustTokenOperationDone(event: Protocol.Network.TrustTokenOperationDoneEvent): void {\n    const request = this.#requestsById.get(event.requestId);\n    if (!request) {\n      this.#requestIdToTrustTokenEvent.set(event.requestId, event);\n      return;\n    }\n    request.setTrustTokenOperationDoneEvent(event);\n  }\n\n  subresourceWebBundleMetadataReceived({requestId, urls}: Protocol.Network.SubresourceWebBundleMetadataReceivedEvent):\n      void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(requestId);\n    extraInfoBuilder.setWebBundleInfo({resourceUrls: urls as Platform.DevToolsPath.UrlString[]});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleMetadataError({requestId, errorMessage}: Protocol.Network.SubresourceWebBundleMetadataErrorEvent):\n      void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(requestId);\n    extraInfoBuilder.setWebBundleInfo({errorMessage});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleInnerResponseParsed({innerRequestId, bundleRequestId}:\n                                              Protocol.Network.SubresourceWebBundleInnerResponseParsedEvent): void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(innerRequestId);\n    extraInfoBuilder.setWebBundleInnerRequestInfo({bundleRequestId});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleInnerResponseError({innerRequestId, errorMessage}:\n                                             Protocol.Network.SubresourceWebBundleInnerResponseErrorEvent): void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(innerRequestId);\n    extraInfoBuilder.setWebBundleInnerRequestInfo({errorMessage});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  reportingApiReportAdded(data: Protocol.Network.ReportingApiReportAddedEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiReportAdded, data.report);\n  }\n\n  reportingApiReportUpdated(data: Protocol.Network.ReportingApiReportUpdatedEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiReportUpdated, data.report);\n  }\n\n  reportingApiEndpointsChangedForOrigin(data: Protocol.Network.ReportingApiEndpointsChangedForOriginEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiEndpointsChangedForOrigin, data);\n  }\n\n  policyUpdated(): void {\n  }\n\n  /**\n   * @deprecated\n   * This method is only kept for usage in a web test.\n   */\n  private createNetworkRequest(\n      requestId: Protocol.Network.RequestId, frameId: Protocol.Page.FrameId, loaderId: Protocol.Network.LoaderId,\n      url: string, documentURL: string, initiator: Protocol.Network.Initiator|null): NetworkRequest {\n    const request = NetworkRequest.create(\n        requestId, url as Platform.DevToolsPath.UrlString, documentURL as Platform.DevToolsPath.UrlString, frameId,\n        loaderId, initiator);\n    requestToManagerMap.set(request, this.#manager);\n    return request;\n  }\n}\n\nlet multiTargetNetworkManagerInstance: MultitargetNetworkManager|null;\n\nexport class MultitargetNetworkManager extends Common.ObjectWrapper.ObjectWrapper<MultitargetNetworkManager.EventTypes>\n    implements SDKModelObserver<NetworkManager> {\n  #userAgentOverrideInternal: string;\n  #userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null;\n  #customAcceptedEncodings: Protocol.Network.ContentEncoding[]|null;\n  readonly #networkAgents: Set<ProtocolProxyApi.NetworkApi>;\n  readonly #fetchAgents: Set<ProtocolProxyApi.FetchApi>;\n  readonly inflightMainResourceRequests: Map<string, NetworkRequest>;\n  #networkConditionsInternal: Conditions;\n  #updatingInterceptionPatternsPromise: Promise<void>|null;\n  readonly #blockingEnabledSetting: Common.Settings.Setting<boolean>;\n  readonly #blockedPatternsSetting: Common.Settings.Setting<BlockedPattern[]>;\n  #effectiveBlockedURLs: string[];\n  readonly #urlsForRequestInterceptor:\n      Platform.MapUtilities.Multimap<(arg0: InterceptedRequest) => Promise<void>, InterceptionPattern>;\n  #extraHeaders?: Protocol.Network.Headers;\n  #customUserAgent?: string;\n\n  constructor() {\n    super();\n    this.#userAgentOverrideInternal = '';\n    this.#userAgentMetadataOverride = null;\n    this.#customAcceptedEncodings = null;\n    this.#networkAgents = new Set();\n    this.#fetchAgents = new Set();\n    this.inflightMainResourceRequests = new Map();\n    this.#networkConditionsInternal = NoThrottlingConditions;\n    this.#updatingInterceptionPatternsPromise = null;\n\n    // TODO(allada) Remove these and merge it with request interception.\n    const blockedPatternChanged: () => void = () => {\n      this.updateBlockedPatterns();\n      this.dispatchEventToListeners(MultitargetNetworkManager.Events.BLOCKED_PATTERNS_CHANGED);\n    };\n    this.#blockingEnabledSetting = Common.Settings.Settings.instance().moduleSetting('request-blocking-enabled');\n    this.#blockingEnabledSetting.addChangeListener(blockedPatternChanged);\n    this.#blockedPatternsSetting = Common.Settings.Settings.instance().createSetting('network-blocked-patterns', []);\n    this.#blockedPatternsSetting.addChangeListener(blockedPatternChanged);\n    this.#effectiveBlockedURLs = [];\n    this.updateBlockedPatterns();\n\n    this.#urlsForRequestInterceptor = new Platform.MapUtilities.Multimap();\n\n    TargetManager.instance().observeModels(NetworkManager, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): MultitargetNetworkManager {\n    const {forceNew} = opts;\n    if (!multiTargetNetworkManagerInstance || forceNew) {\n      multiTargetNetworkManagerInstance = new MultitargetNetworkManager();\n    }\n\n    return multiTargetNetworkManagerInstance;\n  }\n\n  static dispose(): void {\n    multiTargetNetworkManagerInstance = null;\n  }\n\n  static getChromeVersion(): string {\n    const chromeRegex = /(?:^|\\W)(?:Chrome|HeadlessChrome)\\/(\\S+)/;\n    const chromeMatch = navigator.userAgent.match(chromeRegex);\n    if (chromeMatch && chromeMatch.length > 1) {\n      return chromeMatch[1];\n    }\n    return '';\n  }\n\n  static patchUserAgentWithChromeVersion(uaString: string): string {\n    // Patches Chrome/ChrOS version from user #agent (\"1.2.3.4\" when user #agent is: \"Chrome/1.2.3.4\").\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length > 0) {\n      // \"1.2.3.4\" becomes \"1.0.100.0\"\n      const additionalAppVersion = chromeVersion.split('.', 1)[0] + '.0.100.0';\n      return Platform.StringUtilities.sprintf(uaString, chromeVersion, additionalAppVersion);\n    }\n    return uaString;\n  }\n\n  static patchUserAgentMetadataWithChromeVersion(userAgentMetadata: Protocol.Emulation.UserAgentMetadata): void {\n    // Patches Chrome/ChrOS version from user #agent metadata (\"1.2.3.4\" when user #agent is: \"Chrome/1.2.3.4\").\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    if (!userAgentMetadata.brands) {\n      return;\n    }\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length === 0) {\n      return;\n    }\n\n    const majorVersion = chromeVersion.split('.', 1)[0];\n    for (const brand of userAgentMetadata.brands) {\n      if (brand.version.includes('%s')) {\n        brand.version = Platform.StringUtilities.sprintf(brand.version, majorVersion);\n      }\n    }\n\n    if (userAgentMetadata.fullVersion) {\n      if (userAgentMetadata.fullVersion.includes('%s')) {\n        userAgentMetadata.fullVersion = Platform.StringUtilities.sprintf(userAgentMetadata.fullVersion, chromeVersion);\n      }\n    }\n  }\n\n  modelAdded(networkManager: NetworkManager): void {\n    const networkAgent = networkManager.target().networkAgent();\n    const fetchAgent = networkManager.target().fetchAgent();\n    if (this.#extraHeaders) {\n      void networkAgent.invoke_setExtraHTTPHeaders({headers: this.#extraHeaders});\n    }\n    if (this.currentUserAgent()) {\n      void networkAgent.invoke_setUserAgentOverride(\n          {userAgent: this.currentUserAgent(), userAgentMetadata: this.#userAgentMetadataOverride || undefined});\n    }\n    if (this.#effectiveBlockedURLs.length) {\n      void networkAgent.invoke_setBlockedURLs({urls: this.#effectiveBlockedURLs});\n    }\n    if (this.isIntercepting()) {\n      void fetchAgent.invoke_enable({patterns: this.#urlsForRequestInterceptor.valuesArray()});\n    }\n    if (this.#customAcceptedEncodings === null) {\n      void networkAgent.invoke_clearAcceptedEncodingsOverride();\n    } else {\n      void networkAgent.invoke_setAcceptedEncodings({encodings: this.#customAcceptedEncodings});\n    }\n    this.#networkAgents.add(networkAgent);\n    this.#fetchAgents.add(fetchAgent);\n    if (this.isThrottling()) {\n      this.updateNetworkConditions(networkAgent);\n    }\n  }\n\n  modelRemoved(networkManager: NetworkManager): void {\n    for (const entry of this.inflightMainResourceRequests) {\n      const manager = NetworkManager.forRequest((entry[1] as NetworkRequest));\n      if (manager !== networkManager) {\n        continue;\n      }\n      this.inflightMainResourceRequests.delete((entry[0] as string));\n    }\n    this.#networkAgents.delete(networkManager.target().networkAgent());\n    this.#fetchAgents.delete(networkManager.target().fetchAgent());\n  }\n\n  isThrottling(): boolean {\n    return this.#networkConditionsInternal.download >= 0 || this.#networkConditionsInternal.upload >= 0 ||\n        this.#networkConditionsInternal.latency > 0;\n  }\n\n  isOffline(): boolean {\n    return !this.#networkConditionsInternal.download && !this.#networkConditionsInternal.upload;\n  }\n\n  setNetworkConditions(conditions: Conditions): void {\n    this.#networkConditionsInternal = conditions;\n    for (const agent of this.#networkAgents) {\n      this.updateNetworkConditions(agent);\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.CONDITIONS_CHANGED);\n  }\n\n  networkConditions(): Conditions {\n    return this.#networkConditionsInternal;\n  }\n\n  private updateNetworkConditions(networkAgent: ProtocolProxyApi.NetworkApi): void {\n    const conditions = this.#networkConditionsInternal;\n    if (!this.isThrottling()) {\n      void networkAgent.invoke_emulateNetworkConditions({\n        offline: false,\n        latency: 0,\n        downloadThroughput: 0,\n        uploadThroughput: 0,\n      });\n    } else {\n      void networkAgent.invoke_emulateNetworkConditions({\n        offline: this.isOffline(),\n        latency: conditions.latency,\n        downloadThroughput: conditions.download < 0 ? 0 : conditions.download,\n        uploadThroughput: conditions.upload < 0 ? 0 : conditions.upload,\n        packetLoss: (conditions.packetLoss ?? 0) < 0 ? 0 : conditions.packetLoss,\n        packetQueueLength: conditions.packetQueueLength,\n        packetReordering: conditions.packetReordering,\n        connectionType: NetworkManager.connectionType(conditions),\n      });\n    }\n  }\n\n  setExtraHTTPHeaders(headers: Protocol.Network.Headers): void {\n    this.#extraHeaders = headers;\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setExtraHTTPHeaders({headers: this.#extraHeaders});\n    }\n  }\n\n  currentUserAgent(): string {\n    return this.#customUserAgent ? this.#customUserAgent : this.#userAgentOverrideInternal;\n  }\n\n  private updateUserAgentOverride(): void {\n    const userAgent = this.currentUserAgent();\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setUserAgentOverride(\n          {userAgent, userAgentMetadata: this.#userAgentMetadataOverride || undefined});\n    }\n  }\n\n  setUserAgentOverride(userAgent: string, userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null): void {\n    const uaChanged = (this.#userAgentOverrideInternal !== userAgent);\n    this.#userAgentOverrideInternal = userAgent;\n    if (!this.#customUserAgent) {\n      this.#userAgentMetadataOverride = userAgentMetadataOverride;\n      this.updateUserAgentOverride();\n    } else {\n      this.#userAgentMetadataOverride = null;\n    }\n\n    if (uaChanged) {\n      this.dispatchEventToListeners(MultitargetNetworkManager.Events.USER_AGENT_CHANGED);\n    }\n  }\n\n  userAgentOverride(): string {\n    return this.#userAgentOverrideInternal;\n  }\n\n  setCustomUserAgentOverride(\n      userAgent: string, userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null = null): void {\n    this.#customUserAgent = userAgent;\n    this.#userAgentMetadataOverride = userAgentMetadataOverride;\n    this.updateUserAgentOverride();\n  }\n\n  setCustomAcceptedEncodingsOverride(acceptedEncodings: Protocol.Network.ContentEncoding[]): void {\n    this.#customAcceptedEncodings = acceptedEncodings;\n    this.updateAcceptedEncodingsOverride();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.ACCEPTED_ENCODINGS_CHANGED);\n  }\n\n  clearCustomAcceptedEncodingsOverride(): void {\n    this.#customAcceptedEncodings = null;\n    this.updateAcceptedEncodingsOverride();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.ACCEPTED_ENCODINGS_CHANGED);\n  }\n\n  isAcceptedEncodingOverrideSet(): boolean {\n    return this.#customAcceptedEncodings !== null;\n  }\n\n  private updateAcceptedEncodingsOverride(): void {\n    const customAcceptedEncodings = this.#customAcceptedEncodings;\n    for (const agent of this.#networkAgents) {\n      if (customAcceptedEncodings === null) {\n        void agent.invoke_clearAcceptedEncodingsOverride();\n      } else {\n        void agent.invoke_setAcceptedEncodings({encodings: customAcceptedEncodings});\n      }\n    }\n  }\n\n  // TODO(allada) Move all request blocking into interception and let view manage blocking.\n  blockedPatterns(): BlockedPattern[] {\n    return this.#blockedPatternsSetting.get().slice();\n  }\n\n  blockingEnabled(): boolean {\n    return this.#blockingEnabledSetting.get();\n  }\n\n  isBlocking(): boolean {\n    return Boolean(this.#effectiveBlockedURLs.length);\n  }\n\n  setBlockedPatterns(patterns: BlockedPattern[]): void {\n    this.#blockedPatternsSetting.set(patterns);\n  }\n\n  setBlockingEnabled(enabled: boolean): void {\n    if (this.#blockingEnabledSetting.get() === enabled) {\n      return;\n    }\n    this.#blockingEnabledSetting.set(enabled);\n  }\n\n  private updateBlockedPatterns(): void {\n    const urls = [];\n    if (this.#blockingEnabledSetting.get()) {\n      for (const pattern of this.#blockedPatternsSetting.get()) {\n        if (pattern.enabled) {\n          urls.push(pattern.url);\n        }\n      }\n    }\n\n    if (!urls.length && !this.#effectiveBlockedURLs.length) {\n      return;\n    }\n    this.#effectiveBlockedURLs = urls;\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setBlockedURLs({urls: this.#effectiveBlockedURLs});\n    }\n  }\n\n  isIntercepting(): boolean {\n    return Boolean(this.#urlsForRequestInterceptor.size);\n  }\n\n  setInterceptionHandlerForPatterns(\n      patterns: InterceptionPattern[], requestInterceptor: (arg0: InterceptedRequest) => Promise<void>): Promise<void> {\n    // Note: requestInterceptors may receive interception #requests for patterns they did not subscribe to.\n    this.#urlsForRequestInterceptor.deleteAll(requestInterceptor);\n    for (const newPattern of patterns) {\n      this.#urlsForRequestInterceptor.set(requestInterceptor, newPattern);\n    }\n    return this.updateInterceptionPatternsOnNextTick();\n  }\n\n  private updateInterceptionPatternsOnNextTick(): Promise<void> {\n    // This is used so we can register and unregister patterns in loops without sending lots of protocol messages.\n    if (!this.#updatingInterceptionPatternsPromise) {\n      this.#updatingInterceptionPatternsPromise = Promise.resolve().then(this.updateInterceptionPatterns.bind(this));\n    }\n    return this.#updatingInterceptionPatternsPromise;\n  }\n\n  private async updateInterceptionPatterns(): Promise<void> {\n    if (!Common.Settings.Settings.instance().moduleSetting('cache-disabled').get()) {\n      Common.Settings.Settings.instance().moduleSetting('cache-disabled').set(true);\n    }\n    this.#updatingInterceptionPatternsPromise = null;\n    const promises = ([] as Promise<unknown>[]);\n    for (const agent of this.#fetchAgents) {\n      promises.push(agent.invoke_enable({patterns: this.#urlsForRequestInterceptor.valuesArray()}));\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.INTERCEPTORS_CHANGED);\n    await Promise.all(promises);\n  }\n\n  async requestIntercepted(interceptedRequest: InterceptedRequest): Promise<void> {\n    for (const requestInterceptor of this.#urlsForRequestInterceptor.keysArray()) {\n      await requestInterceptor(interceptedRequest);\n      if (interceptedRequest.hasResponded() && interceptedRequest.networkRequest) {\n        this.dispatchEventToListeners(\n            MultitargetNetworkManager.Events.REQUEST_INTERCEPTED, interceptedRequest.networkRequest.requestId());\n        return;\n      }\n    }\n    if (!interceptedRequest.hasResponded()) {\n      interceptedRequest.continueRequestWithoutChange();\n    }\n  }\n\n  clearBrowserCache(): void {\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_clearBrowserCache();\n    }\n  }\n\n  clearBrowserCookies(): void {\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_clearBrowserCookies();\n    }\n  }\n\n  async getCertificate(origin: string): Promise<string[]> {\n    const target = TargetManager.instance().primaryPageTarget();\n    if (!target) {\n      return [];\n    }\n    const certificate = await target.networkAgent().invoke_getCertificate({origin});\n    if (!certificate) {\n      return [];\n    }\n    return certificate.tableNames;\n  }\n\n  async loadResource(url: Platform.DevToolsPath.UrlString): Promise<{\n    success: boolean,\n    content: string,\n    errorDescription: Host.ResourceLoader.LoadErrorDescription,\n  }> {\n    const headers: {\n      [x: string]: string,\n    } = {};\n\n    const currentUserAgent = this.currentUserAgent();\n    if (currentUserAgent) {\n      headers['User-Agent'] = currentUserAgent;\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('cache-disabled').get()) {\n      headers['Cache-Control'] = 'no-cache';\n    }\n\n    const allowRemoteFilePaths =\n        Common.Settings.Settings.instance().moduleSetting('network.enable-remote-file-loading').get();\n\n    return new Promise(\n        resolve => Host.ResourceLoader.load(url, headers, (success, _responseHeaders, content, errorDescription) => {\n          resolve({success, content, errorDescription});\n        }, allowRemoteFilePaths));\n  }\n}\n\nexport namespace MultitargetNetworkManager {\n  export const enum Events {\n    BLOCKED_PATTERNS_CHANGED = 'BlockedPatternsChanged',\n    CONDITIONS_CHANGED = 'ConditionsChanged',\n    USER_AGENT_CHANGED = 'UserAgentChanged',\n    INTERCEPTORS_CHANGED = 'InterceptorsChanged',\n    ACCEPTED_ENCODINGS_CHANGED = 'AcceptedEncodingsChanged',\n    REQUEST_INTERCEPTED = 'RequestIntercepted',\n    REQUEST_FULFILLED = 'RequestFulfilled',\n  }\n\n  export type EventTypes = {\n    [Events.BLOCKED_PATTERNS_CHANGED]: void,\n    [Events.CONDITIONS_CHANGED]: void,\n    [Events.USER_AGENT_CHANGED]: void,\n    [Events.INTERCEPTORS_CHANGED]: void,\n    [Events.ACCEPTED_ENCODINGS_CHANGED]: void,\n    [Events.REQUEST_INTERCEPTED]: string,\n    [Events.REQUEST_FULFILLED]: Platform.DevToolsPath.UrlString,\n  };\n}\n\nexport class InterceptedRequest {\n  readonly #fetchAgent: ProtocolProxyApi.FetchApi;\n  #hasRespondedInternal: boolean;\n  request: Protocol.Network.Request;\n  resourceType: Protocol.Network.ResourceType;\n  responseStatusCode: number|undefined;\n  responseHeaders: Protocol.Fetch.HeaderEntry[]|undefined;\n  requestId: Protocol.Fetch.RequestId;\n  networkRequest: NetworkRequest|null;\n\n  constructor(\n      fetchAgent: ProtocolProxyApi.FetchApi,\n      request: Protocol.Network.Request,\n      resourceType: Protocol.Network.ResourceType,\n      requestId: Protocol.Fetch.RequestId,\n      networkRequest: NetworkRequest|null,\n      responseStatusCode?: number,\n      responseHeaders?: Protocol.Fetch.HeaderEntry[],\n  ) {\n    this.#fetchAgent = fetchAgent;\n    this.#hasRespondedInternal = false;\n    this.request = request;\n    this.resourceType = resourceType;\n    this.responseStatusCode = responseStatusCode;\n    this.responseHeaders = responseHeaders;\n    this.requestId = requestId;\n    this.networkRequest = networkRequest;\n  }\n\n  hasResponded(): boolean {\n    return this.#hasRespondedInternal;\n  }\n\n  static mergeSetCookieHeaders(\n      originalSetCookieHeaders: Protocol.Fetch.HeaderEntry[],\n      setCookieHeadersFromOverrides: Protocol.Fetch.HeaderEntry[]): Protocol.Fetch.HeaderEntry[] {\n    // Generates a map containing the `set-cookie` headers. Valid `set-cookie`\n    // headers are stored by the cookie name. Malformed `set-cookie` headers are\n    // stored by the whole header value. Duplicates are allowed.\n    const generateHeaderMap = (headers: Protocol.Fetch.HeaderEntry[]): Map<string, string[]> => {\n      const result = new Map<string, string[]>();\n      for (const header of headers) {\n        // The regex matches cookie headers of the form '<header-name>=<header-value>'.\n        // <header-name> is a token as defined in https://www.rfc-editor.org/rfc/rfc9110.html#name-tokens.\n        // The shape of <header-value> is not being validated at all here.\n        const match = header.value.match(/^([a-zA-Z0-9!#$%&'*+.^_`|~-]+=)(.*)$/);\n        if (match) {\n          if (result.has(match[1])) {\n            result.get(match[1])?.push(header.value);\n          } else {\n            result.set(match[1], [header.value]);\n          }\n        } else {\n          if (result.has(header.value)) {\n            result.get(header.value)?.push(header.value);\n          } else {\n            result.set(header.value, [header.value]);\n          }\n        }\n      }\n      return result;\n    };\n\n    const originalHeadersMap = generateHeaderMap(originalSetCookieHeaders);\n    const overridesHeaderMap = generateHeaderMap(setCookieHeadersFromOverrides);\n\n    // Iterate over original headers. If the same key is found among the\n    // overrides, use those instead.\n    const mergedHeaders: Protocol.Fetch.HeaderEntry[] = [];\n    for (const [key, headerValues] of originalHeadersMap) {\n      if (overridesHeaderMap.has(key)) {\n        for (const headerValue of overridesHeaderMap.get(key) || []) {\n          mergedHeaders.push({name: 'set-cookie', value: headerValue});\n        }\n      } else {\n        for (const headerValue of headerValues) {\n          mergedHeaders.push({name: 'set-cookie', value: headerValue});\n        }\n      }\n    }\n\n    // Finally add all overrides which have not been added yet.\n    for (const [key, headerValues] of overridesHeaderMap) {\n      if (originalHeadersMap.has(key)) {\n        continue;\n      }\n      for (const headerValue of headerValues) {\n        mergedHeaders.push({name: 'set-cookie', value: headerValue});\n      }\n    }\n    return mergedHeaders;\n  }\n\n  async continueRequestWithContent(\n      contentBlob: Blob, encoded: boolean, responseHeaders: Protocol.Fetch.HeaderEntry[],\n      isBodyOverridden: boolean): Promise<void> {\n    this.#hasRespondedInternal = true;\n    const body = encoded ? await contentBlob.text() : await Common.Base64.encode(contentBlob).catch(err => {\n      console.error(err);\n      return '';\n    });\n    const responseCode = isBodyOverridden ? 200 : (this.responseStatusCode || 200);\n\n    if (this.networkRequest) {\n      const originalSetCookieHeaders =\n          this.networkRequest?.originalResponseHeaders.filter(header => header.name === 'set-cookie') || [];\n      const setCookieHeadersFromOverrides = responseHeaders.filter(header => header.name === 'set-cookie');\n      this.networkRequest.setCookieHeaders =\n          InterceptedRequest.mergeSetCookieHeaders(originalSetCookieHeaders, setCookieHeadersFromOverrides);\n      this.networkRequest.hasOverriddenContent = isBodyOverridden;\n    }\n\n    void this.#fetchAgent.invoke_fulfillRequest({requestId: this.requestId, responseCode, body, responseHeaders});\n    MultitargetNetworkManager.instance().dispatchEventToListeners(\n        MultitargetNetworkManager.Events.REQUEST_FULFILLED, this.request.url as Platform.DevToolsPath.UrlString);\n  }\n\n  continueRequestWithoutChange(): void {\n    console.assert(!this.#hasRespondedInternal);\n    this.#hasRespondedInternal = true;\n    void this.#fetchAgent.invoke_continueRequest({requestId: this.requestId});\n  }\n\n  continueRequestWithError(errorReason: Protocol.Network.ErrorReason): void {\n    console.assert(!this.#hasRespondedInternal);\n    this.#hasRespondedInternal = true;\n    void this.#fetchAgent.invoke_failRequest({requestId: this.requestId, errorReason});\n  }\n\n  async responseBody(): Promise<TextUtils.ContentData.ContentDataOrError> {\n    const response = await this.#fetchAgent.invoke_getResponseBody({requestId: this.requestId});\n    const error = response.getError();\n    if (error) {\n      return {error};\n    }\n\n    const {mimeType, charset} = this.getMimeTypeAndCharset();\n    return new TextUtils.ContentData.ContentData(\n        response.body, response.base64Encoded, mimeType ?? 'application/octet-stream', charset ?? undefined);\n  }\n\n  isRedirect(): boolean {\n    return this.responseStatusCode !== undefined && this.responseStatusCode >= 300 && this.responseStatusCode < 400;\n  }\n\n  /**\n   * Tries to determine the MIME type and charset for this intercepted request.\n   * Looks at the interecepted response headers first (for Content-Type header), then\n   * checks the `NetworkRequest` if we have one.\n   */\n  getMimeTypeAndCharset(): {mimeType: string|null, charset: string|null} {\n    for (const header of this.responseHeaders ?? []) {\n      if (header.name.toLowerCase() === 'content-type') {\n        return Platform.MimeType.parseContentType(header.value);\n      }\n    }\n\n    const mimeType = this.networkRequest?.mimeType ?? null;\n    const charset = this.networkRequest?.charset() ?? null;\n    return {mimeType, charset};\n  }\n}\n\n/**\n * Helper class to match #requests created from requestWillBeSent with\n * requestWillBeSentExtraInfo and responseReceivedExtraInfo when they have the\n * same requestId due to redirects.\n */\nclass ExtraInfoBuilder {\n  readonly #requests: NetworkRequest[];\n  #requestExtraInfos: (ExtraRequestInfo|null)[];\n  #responseExtraInfos: (ExtraResponseInfo|null)[];\n  #responseEarlyHintsHeaders: NameValue[];\n  #finishedInternal: boolean;\n  #webBundleInfo: WebBundleInfo|null;\n  #webBundleInnerRequestInfo: WebBundleInnerRequestInfo|null;\n\n  constructor() {\n    this.#requests = [];\n    this.#requestExtraInfos = [];\n    this.#responseEarlyHintsHeaders = [];\n    this.#responseExtraInfos = [];\n    this.#finishedInternal = false;\n    this.#webBundleInfo = null;\n    this.#webBundleInnerRequestInfo = null;\n  }\n\n  addRequest(req: NetworkRequest): void {\n    this.#requests.push(req);\n    this.sync(this.#requests.length - 1);\n  }\n\n  addRequestExtraInfo(info: ExtraRequestInfo): void {\n    this.#requestExtraInfos.push(info);\n    this.sync(this.#requestExtraInfos.length - 1);\n  }\n\n  addResponseExtraInfo(info: ExtraResponseInfo): void {\n    this.#responseExtraInfos.push(info);\n    this.sync(this.#responseExtraInfos.length - 1);\n  }\n\n  setEarlyHintsHeaders(earlyHintsHeaders: NameValue[]): void {\n    this.#responseEarlyHintsHeaders = earlyHintsHeaders;\n    this.updateFinalRequest();\n  }\n\n  setWebBundleInfo(info: WebBundleInfo): void {\n    this.#webBundleInfo = info;\n    this.updateFinalRequest();\n  }\n\n  setWebBundleInnerRequestInfo(info: WebBundleInnerRequestInfo): void {\n    this.#webBundleInnerRequestInfo = info;\n    this.updateFinalRequest();\n  }\n\n  finished(): void {\n    this.#finishedInternal = true;\n    this.updateFinalRequest();\n  }\n\n  isFinished(): boolean {\n    return this.#finishedInternal;\n  }\n\n  private sync(index: number): void {\n    const req = this.#requests[index];\n    if (!req) {\n      return;\n    }\n\n    const requestExtraInfo = this.#requestExtraInfos[index];\n    if (requestExtraInfo) {\n      req.addExtraRequestInfo(requestExtraInfo);\n      this.#requestExtraInfos[index] = null;\n    }\n\n    const responseExtraInfo = this.#responseExtraInfos[index];\n    if (responseExtraInfo) {\n      req.addExtraResponseInfo(responseExtraInfo);\n      this.#responseExtraInfos[index] = null;\n    }\n  }\n\n  finalRequest(): NetworkRequest|null {\n    if (!this.#finishedInternal) {\n      return null;\n    }\n    return this.#requests[this.#requests.length - 1] || null;\n  }\n\n  private updateFinalRequest(): void {\n    if (!this.#finishedInternal) {\n      return;\n    }\n    const finalRequest = this.finalRequest();\n    finalRequest?.setWebBundleInfo(this.#webBundleInfo);\n    finalRequest?.setWebBundleInnerRequestInfo(this.#webBundleInnerRequestInfo);\n    finalRequest?.setEarlyHintsHeaders(this.#responseEarlyHintsHeaders);\n  }\n}\n\nSDKModel.register(NetworkManager, {capabilities: Capability.NETWORK, autostart: true});\n\nexport class ConditionsSerializer implements Serializer<Conditions, Conditions> {\n  stringify(value: unknown): string {\n    const conditions = value as Conditions;\n    return JSON.stringify({\n      ...conditions,\n      title: typeof conditions.title === 'function' ? conditions.title() : conditions.title,\n    });\n  }\n\n  parse(serialized: string): Conditions {\n    const parsed = JSON.parse(serialized);\n    return {\n      ...parsed,\n      // eslint-disable-next-line rulesdir/l10n_i18nString_call_only_with_uistrings\n      title: parsed.i18nTitleKey ? i18nLazyString(parsed.i18nTitleKey) : parsed.title,\n    };\n  }\n}\n\nexport function networkConditionsEqual(first: Conditions, second: Conditions): boolean {\n  // Caution: titles might be different function instances, which produce\n  // the same value.\n  // We prefer to use the i18nTitleKey to prevent against locale changes or\n  // UIString changes that might change the value vs what the user has stored\n  // locally.\n  const firstTitle = first.i18nTitleKey || (typeof first.title === 'function' ? first.title() : first.title);\n  const secondTitle = second.i18nTitleKey || (typeof second.title === 'function' ? second.title() : second.title);\n  return second.download === first.download && second.upload === first.upload && second.latency === first.latency &&\n      first.packetLoss === second.packetLoss && first.packetQueueLength === second.packetQueueLength &&\n      first.packetReordering === second.packetReordering && secondTitle === firstTitle;\n}\n\nexport interface Conditions {\n  download: number;\n  upload: number;\n  latency: number;\n  packetLoss?: number;\n  packetQueueLength?: number;\n  packetReordering?: boolean;\n  // TODO(crbug.com/1219425): In the future, it might be worthwhile to\n  // consider avoiding mixing up presentation state (e.g.: displayed\n  // titles) with behavioral state (e.g.: the throttling amounts). In\n  // this particular case, the title (along with other properties)\n  // doubles as both part of group of fields which (loosely) uniquely\n  // identify instances, as well as the literal string displayed in the\n  // UI, which leads to complications around persistance.\n  title: string|(() => string);\n  // Instances may be serialized to local storage, so localized titles\n  // should not be irrecoverably baked, just in case the string changes\n  // (or the user switches locales).\n  i18nTitleKey?: string;\n  /**\n   * RTT values are multiplied by adjustment factors to make DevTools' emulation more accurate.\n   * This value represents the RTT value *before* the adjustment factor is applied.\n   * @see https://docs.google.com/document/d/10lfVdS1iDWCRKQXPfbxEn4Or99D64mvNlugP1AQuFlE/edit for historical context.\n   */\n  targetLatency?: number;\n}\n\nexport interface BlockedPattern {\n  url: string;\n  enabled: boolean;\n}\n\nexport interface Message {\n  message: string;\n  requestId: string;\n  warning: boolean;\n}\n\nexport interface InterceptionPattern {\n  urlPattern: string;\n  requestStage: Protocol.Fetch.RequestStage;\n}\n\nexport type RequestInterceptor = (request: InterceptedRequest) => Promise<void>;\n\nexport interface RequestUpdateDroppedEventData {\n  url: Platform.DevToolsPath.UrlString;\n  frameId: Protocol.Page.FrameId|null;\n  loaderId: Protocol.Network.LoaderId;\n  resourceType: Protocol.Network.ResourceType;\n  mimeType: string;\n  lastModified: Date|null;\n}\n"],
  "mappings": "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",
  "names": ["Events", "MultitargetNetworkManager"]
}
