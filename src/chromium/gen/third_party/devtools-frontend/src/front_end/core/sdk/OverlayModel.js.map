{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/OverlayModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Root from '../root/root.js';\n\nimport type {CSSModel} from './CSSModel.js';\nimport {DebuggerModel, Events as DebuggerModelEvents} from './DebuggerModel.js';\nimport {DeferredDOMNode, DOMModel, type DOMNode, Events as DOMModelEvents} from './DOMModel.js';\nimport {OverlayPersistentHighlighter} from './OverlayPersistentHighlighter.js';\nimport type {RemoteObject} from './RemoteObject.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Overlay Model\n   */\n  pausedInDebugger: 'Paused in debugger',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/OverlayModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface HighlightColor {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport interface HighlightRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  color: HighlightColor;\n  outlineColor: HighlightColor;\n}\nexport interface Hinge {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n  contentColor: HighlightColor;\n  outlineColor: HighlightColor;\n}\n\nexport const enum EmulatedOSType {\n  WINDOWS = 'Windows',\n  MAC = 'Mac',\n  LINUX = 'Linux',\n}\n\ninterface PlatformOverlayDimensions {\n  mac: {x: number, y: number, width: number, height: number};\n  linux: {x: number, y: number, width: number, height: number};\n  windows: {x: number, y: number, width: number, height: number};\n}\n\nconst platformOverlayDimensions: Readonly<PlatformOverlayDimensions> = {\n  mac: {x: 85, y: 0, width: 185, height: 40},\n  linux: {x: 0, y: 0, width: 196, height: 34},\n  windows: {x: 0, y: 0, width: 238, height: 33},\n};\n\nexport class OverlayModel extends SDKModel<EventTypes> implements ProtocolProxyApi.OverlayDispatcher {\n  readonly #domModel: DOMModel;\n  overlayAgent: ProtocolProxyApi.OverlayApi;\n  readonly #debuggerModel: DebuggerModel|null;\n  #inspectModeEnabledInternal: boolean;\n  #hideHighlightTimeout: number|null;\n  #defaultHighlighter: Highlighter;\n  #highlighter: Highlighter;\n  #showPaintRectsSetting: Common.Settings.Setting<boolean>;\n  #showLayoutShiftRegionsSetting: Common.Settings.Setting<boolean>;\n  #showAdHighlightsSetting: Common.Settings.Setting<boolean>;\n  #showDebugBordersSetting: Common.Settings.Setting<boolean>;\n  #showFPSCounterSetting: Common.Settings.Setting<boolean>;\n  #showScrollBottleneckRectsSetting: Common.Settings.Setting<boolean>;\n  #registeredListeners: Common.EventTarget.EventDescriptor[];\n  #showViewportSizeOnResize: boolean;\n  #persistentHighlighter: OverlayPersistentHighlighter|null;\n  readonly #sourceOrderHighlighter: SourceOrderHighlighter;\n  #sourceOrderModeActiveInternal: boolean;\n  #windowControls: WindowControls;\n\n  constructor(target: Target) {\n    super(target);\n    this.#domModel = (target.model(DOMModel) as DOMModel);\n\n    target.registerOverlayDispatcher(this);\n    this.overlayAgent = target.overlayAgent();\n\n    this.#debuggerModel = target.model(DebuggerModel);\n    if (this.#debuggerModel) {\n      Common.Settings.Settings.instance()\n          .moduleSetting('disable-paused-state-overlay')\n          .addChangeListener(this.updatePausedInDebuggerMessage, this);\n      this.#debuggerModel.addEventListener(\n          DebuggerModelEvents.DebuggerPaused, this.updatePausedInDebuggerMessage, this);\n      this.#debuggerModel.addEventListener(\n          DebuggerModelEvents.DebuggerResumed, this.updatePausedInDebuggerMessage, this);\n      // TODO(dgozman): we should get DebuggerResumed on navigations instead of listening to GlobalObjectCleared.\n      this.#debuggerModel.addEventListener(\n          DebuggerModelEvents.GlobalObjectCleared, this.updatePausedInDebuggerMessage, this);\n    }\n\n    this.#inspectModeEnabledInternal = false;\n\n    this.#hideHighlightTimeout = null;\n    this.#defaultHighlighter = new DefaultHighlighter(this);\n    this.#highlighter = this.#defaultHighlighter;\n\n    this.#showPaintRectsSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('show-paint-rects');\n    this.#showLayoutShiftRegionsSetting =\n        Common.Settings.Settings.instance().moduleSetting<boolean>('show-layout-shift-regions');\n    this.#showAdHighlightsSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('show-ad-highlights');\n    this.#showDebugBordersSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('show-debug-borders');\n    this.#showFPSCounterSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('show-fps-counter');\n    this.#showScrollBottleneckRectsSetting =\n        Common.Settings.Settings.instance().moduleSetting<boolean>('show-scroll-bottleneck-rects');\n\n    this.#registeredListeners = [];\n    this.#showViewportSizeOnResize = true;\n    if (!target.suspended()) {\n      void this.overlayAgent.invoke_enable();\n      void this.wireAgentToSettings();\n    }\n\n    this.#persistentHighlighter = new OverlayPersistentHighlighter(this, {\n      onGridOverlayStateChanged: ({nodeId, enabled}) =>\n          this.dispatchEventToListeners(Events.PERSISTENT_GRID_OVERLAY_STATE_CHANGED, {nodeId, enabled}),\n      onFlexOverlayStateChanged: ({nodeId, enabled}) =>\n          this.dispatchEventToListeners(Events.PERSISTENT_FLEX_CONTAINER_OVERLAY_STATE_CHANGED, {nodeId, enabled}),\n      onContainerQueryOverlayStateChanged: ({nodeId, enabled}) =>\n          this.dispatchEventToListeners(Events.PERSISTENT_CONTAINER_QUERY_OVERLAY_STATE_CHANGED, {nodeId, enabled}),\n      onScrollSnapOverlayStateChanged: ({nodeId, enabled}) =>\n          this.dispatchEventToListeners(Events.PERSISTENT_SCROLL_SNAP_OVERLAY_STATE_CHANGED, {nodeId, enabled}),\n    });\n    this.#domModel.addEventListener(DOMModelEvents.NodeRemoved, () => {\n      if (!this.#persistentHighlighter) {\n        return;\n      }\n\n      this.#persistentHighlighter.refreshHighlights();\n    });\n\n    this.#domModel.addEventListener(DOMModelEvents.DocumentUpdated, () => {\n      if (!this.#persistentHighlighter) {\n        return;\n      }\n\n      // Hide all the overlays initially after document update\n      this.#persistentHighlighter.hideAllInOverlayWithoutSave();\n\n      if (!target.suspended()) {\n        void this.#persistentHighlighter.restoreHighlightsForDocument();\n      }\n    });\n\n    this.#sourceOrderHighlighter = new SourceOrderHighlighter(this);\n    this.#sourceOrderModeActiveInternal = false;\n    this.#windowControls = new WindowControls(this.#domModel.cssModel());\n  }\n\n  static highlightObjectAsDOMNode(object: RemoteObject): void {\n    const domModel = object.runtimeModel().target().model(DOMModel);\n    if (domModel) {\n      domModel.overlayModel().highlightInOverlay({object, selectorList: undefined});\n    }\n  }\n\n  static hideDOMNodeHighlight(): void {\n    for (const overlayModel of TargetManager.instance().models(OverlayModel)) {\n      overlayModel.delayedHideHighlight(0);\n    }\n  }\n\n  static async muteHighlight(): Promise<void[]> {\n    return Promise.all(TargetManager.instance().models(OverlayModel).map(model => model.suspendModel()));\n  }\n\n  static async unmuteHighlight(): Promise<void[]> {\n    return Promise.all(TargetManager.instance().models(OverlayModel).map(model => model.resumeModel()));\n  }\n\n  static highlightRect(rect: HighlightRect): void {\n    for (const overlayModel of TargetManager.instance().models(OverlayModel)) {\n      void overlayModel.highlightRect(rect);\n    }\n  }\n\n  static clearHighlight(): void {\n    for (const overlayModel of TargetManager.instance().models(OverlayModel)) {\n      void overlayModel.clearHighlight();\n    }\n  }\n\n  getDOMModel(): DOMModel {\n    return this.#domModel;\n  }\n\n  highlightRect({x, y, width, height, color, outlineColor}: HighlightRect):\n      Promise<Protocol.ProtocolResponseWithError> {\n    const highlightColor = color || {r: 255, g: 0, b: 255, a: 0.3};\n    const highlightOutlineColor = outlineColor || {r: 255, g: 0, b: 255, a: 0.5};\n    return this.overlayAgent.invoke_highlightRect(\n        {x, y, width, height, color: highlightColor, outlineColor: highlightOutlineColor});\n  }\n\n  clearHighlight(): Promise<Protocol.ProtocolResponseWithError> {\n    return this.overlayAgent.invoke_hideHighlight();\n  }\n\n  private async wireAgentToSettings(): Promise<void> {\n    this.#registeredListeners = [\n      this.#showPaintRectsSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowPaintRects({result: this.#showPaintRectsSetting.get()})),\n      this.#showLayoutShiftRegionsSetting.addChangeListener(\n          () =>\n              this.overlayAgent.invoke_setShowLayoutShiftRegions({result: this.#showLayoutShiftRegionsSetting.get()})),\n      this.#showAdHighlightsSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowAdHighlights({show: this.#showAdHighlightsSetting.get()})),\n      this.#showDebugBordersSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowDebugBorders({show: this.#showDebugBordersSetting.get()})),\n      this.#showFPSCounterSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowFPSCounter({show: this.#showFPSCounterSetting.get()})),\n      this.#showScrollBottleneckRectsSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowScrollBottleneckRects(\n              {show: this.#showScrollBottleneckRectsSetting.get()})),\n    ];\n\n    if (this.#showPaintRectsSetting.get()) {\n      void this.overlayAgent.invoke_setShowPaintRects({result: true});\n    }\n    if (this.#showLayoutShiftRegionsSetting.get()) {\n      void this.overlayAgent.invoke_setShowLayoutShiftRegions({result: true});\n    }\n    if (this.#showAdHighlightsSetting.get()) {\n      void this.overlayAgent.invoke_setShowAdHighlights({show: true});\n    }\n    if (this.#showDebugBordersSetting.get()) {\n      void this.overlayAgent.invoke_setShowDebugBorders({show: true});\n    }\n    if (this.#showFPSCounterSetting.get()) {\n      void this.overlayAgent.invoke_setShowFPSCounter({show: true});\n    }\n    if (this.#showScrollBottleneckRectsSetting.get()) {\n      void this.overlayAgent.invoke_setShowScrollBottleneckRects({show: true});\n    }\n    if (this.#debuggerModel && this.#debuggerModel.isPaused()) {\n      this.updatePausedInDebuggerMessage();\n    }\n    await this.overlayAgent.invoke_setShowViewportSizeOnResize({show: this.#showViewportSizeOnResize});\n    this.#persistentHighlighter?.resetOverlay();\n  }\n\n  override async suspendModel(): Promise<void> {\n    Common.EventTarget.removeEventListeners(this.#registeredListeners);\n    await this.overlayAgent.invoke_disable();\n  }\n\n  override async resumeModel(): Promise<void> {\n    await Promise.all([this.overlayAgent.invoke_enable(), this.wireAgentToSettings()]);\n  }\n\n  setShowViewportSizeOnResize(show: boolean): void {\n    if (this.#showViewportSizeOnResize === show) {\n      return;\n    }\n\n    this.#showViewportSizeOnResize = show;\n    if (this.target().suspended()) {\n      return;\n    }\n    void this.overlayAgent.invoke_setShowViewportSizeOnResize({show});\n  }\n\n  private updatePausedInDebuggerMessage(): void {\n    if (this.target().suspended()) {\n      return;\n    }\n    const message = this.#debuggerModel && this.#debuggerModel.isPaused() &&\n            !Common.Settings.Settings.instance().moduleSetting('disable-paused-state-overlay').get() ?\n        i18nString(UIStrings.pausedInDebugger) :\n        undefined;\n    void this.overlayAgent.invoke_setPausedInDebuggerMessage({message});\n  }\n\n  setHighlighter(highlighter: Highlighter|null): void {\n    this.#highlighter = highlighter || this.#defaultHighlighter;\n  }\n\n  async setInspectMode(mode: Protocol.Overlay.InspectMode, showDetailedTooltip: boolean|undefined = true):\n      Promise<void> {\n    await this.#domModel.requestDocument();\n    this.#inspectModeEnabledInternal = mode !== Protocol.Overlay.InspectMode.None;\n    this.dispatchEventToListeners(Events.INSPECT_MODE_WILL_BE_TOGGLED, this);\n    void this.#highlighter.setInspectMode(mode, this.buildHighlightConfig('all', showDetailedTooltip));\n  }\n\n  inspectModeEnabled(): boolean {\n    return this.#inspectModeEnabledInternal;\n  }\n\n  highlightInOverlay(data: HighlightData, mode?: string, showInfo?: boolean): void {\n    if (this.#sourceOrderModeActiveInternal) {\n      // Return early if the source order is currently being shown the in the\n      // overlay, so that it is not cleared by the highlight\n      return;\n    }\n    if (this.#hideHighlightTimeout) {\n      clearTimeout(this.#hideHighlightTimeout);\n      this.#hideHighlightTimeout = null;\n    }\n    const highlightConfig = this.buildHighlightConfig(mode);\n    if (typeof showInfo !== 'undefined') {\n      highlightConfig.showInfo = showInfo;\n    }\n    this.#highlighter.highlightInOverlay(data, highlightConfig);\n  }\n\n  highlightInOverlayForTwoSeconds(data: HighlightData): void {\n    this.highlightInOverlay(data);\n    this.delayedHideHighlight(2000);\n  }\n\n  highlightGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightGridInOverlay(nodeId);\n  }\n\n  isHighlightedGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isGridHighlighted(nodeId);\n  }\n\n  hideGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideGridInOverlay(nodeId);\n  }\n\n  highlightScrollSnapInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightScrollSnapInOverlay(nodeId);\n  }\n\n  isHighlightedScrollSnapInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isScrollSnapHighlighted(nodeId);\n  }\n\n  hideScrollSnapInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideScrollSnapInOverlay(nodeId);\n  }\n\n  highlightFlexContainerInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightFlexInOverlay(nodeId);\n  }\n\n  isHighlightedFlexContainerInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isFlexHighlighted(nodeId);\n  }\n\n  hideFlexContainerInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideFlexInOverlay(nodeId);\n  }\n\n  highlightContainerQueryInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightContainerQueryInOverlay(nodeId);\n  }\n\n  isHighlightedContainerQueryInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isContainerQueryHighlighted(nodeId);\n  }\n\n  hideContainerQueryInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideContainerQueryInOverlay(nodeId);\n  }\n\n  highlightSourceOrderInOverlay(node: DOMNode): void {\n    const sourceOrderConfig = {\n      parentOutlineColor: Common.Color.SourceOrderHighlight.ParentOutline.toProtocolRGBA(),\n      childOutlineColor: Common.Color.SourceOrderHighlight.ChildOutline.toProtocolRGBA(),\n    };\n    this.#sourceOrderHighlighter.highlightSourceOrderInOverlay(node, sourceOrderConfig);\n  }\n\n  colorOfGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId): string|null {\n    if (!this.#persistentHighlighter) {\n      return null;\n    }\n    return this.#persistentHighlighter.colorOfGrid(nodeId).asString(Common.Color.Format.HEX);\n  }\n\n  setColorOfGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId, colorStr: string): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    const color = Common.Color.parse(colorStr);\n    if (!color) {\n      return;\n    }\n    this.#persistentHighlighter.setColorOfGrid(nodeId, color);\n    this.#persistentHighlighter.resetOverlay();\n  }\n\n  colorOfFlexInPersistentOverlay(nodeId: Protocol.DOM.NodeId): string|null {\n    if (!this.#persistentHighlighter) {\n      return null;\n    }\n    return this.#persistentHighlighter.colorOfFlex(nodeId).asString(Common.Color.Format.HEX);\n  }\n\n  setColorOfFlexInPersistentOverlay(nodeId: Protocol.DOM.NodeId, colorStr: string): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    const color = Common.Color.parse(colorStr);\n    if (!color) {\n      return;\n    }\n    this.#persistentHighlighter.setColorOfFlex(nodeId, color);\n    this.#persistentHighlighter.resetOverlay();\n  }\n\n  hideSourceOrderInOverlay(): void {\n    this.#sourceOrderHighlighter.hideSourceOrderHighlight();\n  }\n\n  setSourceOrderActive(isActive: boolean): void {\n    this.#sourceOrderModeActiveInternal = isActive;\n  }\n\n  sourceOrderModeActive(): boolean {\n    return this.#sourceOrderModeActiveInternal;\n  }\n\n  highlightIsolatedElementInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightIsolatedElementInOverlay(nodeId);\n  }\n\n  hideIsolatedElementInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideIsolatedElementInOverlay(nodeId);\n  }\n\n  isHighlightedIsolatedElementInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isIsolatedElementHighlighted(nodeId);\n  }\n\n  private delayedHideHighlight(delay: number): void {\n    if (this.#hideHighlightTimeout === null) {\n      this.#hideHighlightTimeout = window.setTimeout(() => this.highlightInOverlay({clear: true}), delay);\n    }\n  }\n\n  highlightFrame(frameId: Protocol.Page.FrameId): void {\n    if (this.#hideHighlightTimeout) {\n      clearTimeout(this.#hideHighlightTimeout);\n      this.#hideHighlightTimeout = null;\n    }\n    this.#highlighter.highlightFrame(frameId);\n  }\n\n  showHingeForDualScreen(hinge: Hinge|null): void {\n    if (hinge) {\n      const {x, y, width, height, contentColor, outlineColor} = hinge;\n      void this.overlayAgent.invoke_setShowHinge({\n        hingeConfig: {rect: {x, y, width, height}, contentColor, outlineColor},\n      });\n    } else {\n      void this.overlayAgent.invoke_setShowHinge({});\n    }\n  }\n\n  setWindowControlsPlatform(selectedPlatform: EmulatedOSType): void {\n    this.#windowControls.selectedPlatform = selectedPlatform;\n  }\n\n  setWindowControlsThemeColor(themeColor: string): void {\n    this.#windowControls.themeColor = themeColor;\n  }\n\n  getWindowControlsConfig(): Protocol.Overlay.WindowControlsOverlayConfig {\n    return this.#windowControls.config;\n  }\n\n  async toggleWindowControlsToolbar(show: boolean): Promise<void> {\n    const wcoConfigObj = show ? {windowControlsOverlayConfig: this.#windowControls.config} : {};\n\n    const setWindowControlsOverlayOperation = this.overlayAgent.invoke_setShowWindowControlsOverlay(wcoConfigObj);\n    const toggleStylesheetOperation = this.#windowControls.toggleEmulatedOverlay(show);\n\n    await Promise.all([setWindowControlsOverlayOperation, toggleStylesheetOperation]);\n\n    this.setShowViewportSizeOnResize(!show);\n  }\n\n  private buildHighlightConfig(mode: string|undefined = 'all', showDetailedToolip: boolean|undefined = false):\n      Protocol.Overlay.HighlightConfig {\n    const showRulers = Common.Settings.Settings.instance().moduleSetting('show-metrics-rulers').get();\n    const highlightConfig: Protocol.Overlay.HighlightConfig = {\n      showInfo: mode === 'all' || mode === 'container-outline',\n      showRulers,\n      showStyles: showDetailedToolip,\n      showAccessibilityInfo: showDetailedToolip,\n      showExtensionLines: showRulers,\n      gridHighlightConfig: {},\n      flexContainerHighlightConfig: {},\n      flexItemHighlightConfig: {},\n      contrastAlgorithm: Root.Runtime.experiments.isEnabled('apca') ? Protocol.Overlay.ContrastAlgorithm.Apca :\n                                                                      Protocol.Overlay.ContrastAlgorithm.Aa,\n    };\n\n    if (mode === 'all' || mode === 'content') {\n      highlightConfig.contentColor = Common.Color.PageHighlight.Content.toProtocolRGBA();\n    }\n\n    if (mode === 'all' || mode === 'padding') {\n      highlightConfig.paddingColor = Common.Color.PageHighlight.Padding.toProtocolRGBA();\n    }\n\n    if (mode === 'all' || mode === 'border') {\n      highlightConfig.borderColor = Common.Color.PageHighlight.Border.toProtocolRGBA();\n    }\n\n    if (mode === 'all' || mode === 'margin') {\n      highlightConfig.marginColor = Common.Color.PageHighlight.Margin.toProtocolRGBA();\n    }\n\n    if (mode === 'all') {\n      highlightConfig.eventTargetColor = Common.Color.PageHighlight.EventTarget.toProtocolRGBA();\n      highlightConfig.shapeColor = Common.Color.PageHighlight.Shape.toProtocolRGBA();\n      highlightConfig.shapeMarginColor = Common.Color.PageHighlight.ShapeMargin.toProtocolRGBA();\n\n      highlightConfig.gridHighlightConfig = {\n        rowGapColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        rowHatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n        columnGapColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        columnHatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n        rowLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        columnLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        rowLineDash: true,\n        columnLineDash: true,\n      };\n\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        itemSeparator: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dotted,\n        },\n        lineSeparator: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        mainDistributedSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n        crossDistributedSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n        rowGapSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n        columnGapSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n      };\n\n      highlightConfig.flexItemHighlightConfig = {\n        baseSizeBox: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n        },\n        baseSizeBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dotted,\n        },\n        flexibilityArrow: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        },\n      };\n    }\n\n    if (mode.endsWith('gap')) {\n      highlightConfig.gridHighlightConfig = {\n        gridBorderColor: Common.Color.PageHighlight.GridBorder.toProtocolRGBA(),\n        gridBorderDash: true,\n      };\n\n      if (mode === 'gap' || mode === 'row-gap') {\n        highlightConfig.gridHighlightConfig.rowGapColor = Common.Color.PageHighlight.GapBackground.toProtocolRGBA();\n        highlightConfig.gridHighlightConfig.rowHatchColor = Common.Color.PageHighlight.GapHatch.toProtocolRGBA();\n      }\n      if (mode === 'gap' || mode === 'column-gap') {\n        highlightConfig.gridHighlightConfig.columnGapColor = Common.Color.PageHighlight.GapBackground.toProtocolRGBA();\n        highlightConfig.gridHighlightConfig.columnHatchColor = Common.Color.PageHighlight.GapHatch.toProtocolRGBA();\n      }\n    }\n\n    if (mode.endsWith('gap')) {\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n      };\n\n      if (mode === 'gap' || mode === 'row-gap') {\n        highlightConfig.flexContainerHighlightConfig.rowGapSpace = {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        };\n      }\n      if (mode === 'gap' || mode === 'column-gap') {\n        highlightConfig.flexContainerHighlightConfig.columnGapSpace = {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        };\n      }\n    }\n\n    if (mode === 'grid-areas') {\n      highlightConfig.gridHighlightConfig = {\n        rowLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        columnLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        rowLineDash: true,\n        columnLineDash: true,\n        showAreaNames: true,\n        areaBorderColor: Common.Color.PageHighlight.GridAreaBorder.toProtocolRGBA(),\n      };\n    }\n\n    if (mode === 'grid-template-columns') {\n      highlightConfig.contentColor = Common.Color.PageHighlight.Content.toProtocolRGBA();\n      highlightConfig.gridHighlightConfig = {\n        columnLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        columnLineDash: true,\n      };\n    }\n\n    if (mode === 'grid-template-rows') {\n      highlightConfig.contentColor = Common.Color.PageHighlight.Content.toProtocolRGBA();\n      highlightConfig.gridHighlightConfig = {\n        rowLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        rowLineDash: true,\n      };\n    }\n\n    if (mode === 'justify-content') {\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        mainDistributedSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n      };\n    }\n\n    if (mode === 'align-content') {\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        crossDistributedSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n      };\n    }\n\n    if (mode === 'align-items') {\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        lineSeparator: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        crossAlignment: {color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA()},\n      };\n    }\n\n    if (mode === 'flexibility') {\n      highlightConfig.flexItemHighlightConfig = {\n        baseSizeBox: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n        },\n        baseSizeBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dotted,\n        },\n        flexibilityArrow: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        },\n      };\n    }\n\n    if (mode === 'container-outline') {\n      highlightConfig.containerQueryContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n      };\n    }\n\n    return highlightConfig;\n  }\n\n  nodeHighlightRequested({nodeId}: Protocol.Overlay.NodeHighlightRequestedEvent): void {\n    const node = this.#domModel.nodeForId(nodeId);\n    if (node) {\n      this.dispatchEventToListeners(Events.HIGHLIGHT_NODE_REQUESTED, node);\n    }\n  }\n\n  static setInspectNodeHandler(handler: (arg0: DOMNode) => void): void {\n    OverlayModel.inspectNodeHandler = handler;\n  }\n\n  inspectNodeRequested({backendNodeId}: Protocol.Overlay.InspectNodeRequestedEvent): void {\n    const deferredNode = new DeferredDOMNode(this.target(), backendNodeId);\n    if (OverlayModel.inspectNodeHandler) {\n      void deferredNode.resolvePromise().then(node => {\n        if (node && OverlayModel.inspectNodeHandler) {\n          OverlayModel.inspectNodeHandler(node);\n        }\n      });\n    } else {\n      void Common.Revealer.reveal(deferredNode);\n    }\n    this.dispatchEventToListeners(Events.EXITED_INSPECT_MODE);\n  }\n\n  screenshotRequested({viewport}: Protocol.Overlay.ScreenshotRequestedEvent): void {\n    this.dispatchEventToListeners(Events.SCREENSHOT_REQUESTED, viewport);\n    this.dispatchEventToListeners(Events.EXITED_INSPECT_MODE);\n  }\n\n  inspectModeCanceled(): void {\n    this.dispatchEventToListeners(Events.EXITED_INSPECT_MODE);\n  }\n\n  static inspectNodeHandler: ((node: DOMNode) => void)|null = null;\n\n  getOverlayAgent(): ProtocolProxyApi.OverlayApi {\n    return this.overlayAgent;\n  }\n\n  async hasStyleSheetText(url: Platform.DevToolsPath.UrlString): Promise<boolean> {\n    return this.#windowControls.initializeStyleSheetText(url);\n  }\n}\n\nexport class WindowControls {\n  readonly #cssModel: CSSModel;\n  #originalStylesheetText: string|undefined;\n  #stylesheetId?: Protocol.CSS.StyleSheetId;\n  #currentUrl: Platform.DevToolsPath.UrlString|undefined;\n\n  #config: Protocol.Overlay.WindowControlsOverlayConfig = {\n    showCSS: false,\n    selectedPlatform: EmulatedOSType.WINDOWS,\n    themeColor: '#ffffff',\n  };\n\n  constructor(cssModel: CSSModel) {\n    this.#cssModel = cssModel;\n  }\n\n  get selectedPlatform(): string {\n    return this.#config.selectedPlatform;\n  }\n\n  set selectedPlatform(osType: EmulatedOSType) {\n    this.#config.selectedPlatform = osType;\n  }\n\n  get themeColor(): string {\n    return this.#config.themeColor;\n  }\n\n  set themeColor(color: string) {\n    this.#config.themeColor = color;\n  }\n\n  get config(): Protocol.Overlay.WindowControlsOverlayConfig {\n    return this.#config;\n  }\n\n  async initializeStyleSheetText(url: Platform.DevToolsPath.UrlString): Promise<boolean> {\n    if (this.#originalStylesheetText && url === this.#currentUrl) {\n      return true;\n    }\n\n    const cssSourceUrl = this.#fetchCssSourceUrl(url);\n    if (!cssSourceUrl) {\n      return false;\n    }\n\n    this.#stylesheetId = this.#fetchCurrentStyleSheet(cssSourceUrl);\n    if (!this.#stylesheetId) {\n      return false;\n    }\n\n    const stylesheetText = await this.#cssModel.getStyleSheetText(this.#stylesheetId);\n\n    if (!stylesheetText) {\n      return false;\n    }\n\n    this.#originalStylesheetText = stylesheetText;\n    this.#currentUrl = url;\n\n    return true;\n  }\n\n  async toggleEmulatedOverlay(showOverlay: boolean): Promise<void> {\n    if (!this.#stylesheetId || !this.#originalStylesheetText) {\n      return;\n    }\n    if (showOverlay) {\n      const styleSheetText = WindowControls.#getStyleSheetForPlatform(\n          this.#config.selectedPlatform.toLowerCase(), this.#originalStylesheetText);\n      if (styleSheetText) {\n        await this.#cssModel.setStyleSheetText(this.#stylesheetId, styleSheetText, false);\n      }\n    } else {\n      // Restore the original stylesheet\n      await this.#cssModel.setStyleSheetText(this.#stylesheetId, this.#originalStylesheetText, false);\n    }\n  }\n\n  static #getStyleSheetForPlatform(platform: string, originalStyleSheet: string|undefined): string|undefined {\n    const overlayDimensions = platformOverlayDimensions[platform as keyof PlatformOverlayDimensions];\n    return WindowControls.#transformStyleSheet(\n        overlayDimensions.x, overlayDimensions.y, overlayDimensions.width, overlayDimensions.height,\n        originalStyleSheet);\n  }\n\n  #fetchCssSourceUrl(url: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString|undefined {\n    const parentURL = Common.ParsedURL.ParsedURL.extractOrigin(url);\n    const cssHeaders = this.#cssModel.styleSheetHeaders();\n    const header = cssHeaders.find(header => header.sourceURL && header.sourceURL.includes(parentURL));\n    return header?.sourceURL;\n  }\n\n  #fetchCurrentStyleSheet(cssSourceUrl: Platform.DevToolsPath.UrlString): Protocol.CSS.StyleSheetId|undefined {\n    const stylesheetIds = this.#cssModel.getStyleSheetIdsForURL(cssSourceUrl);\n    return stylesheetIds.length > 0 ? stylesheetIds[0] : undefined;\n  }\n\n  // The primary objective of this function is to adjust certain CSS environment variables within the existing stylesheet\n  // and provide it as the style sheet for the emulated overlay.\n  static #transformStyleSheet(\n      x: number, y: number, width: number, height: number, originalStyleSheet: string|undefined): string|undefined {\n    if (!originalStyleSheet) {\n      return undefined;\n    }\n    const stylesheetText = originalStyleSheet;\n\n    const updatedStylesheet =\n        stylesheetText.replace(/: env\\(titlebar-area-x(?:,[^)]*)?\\);/g, `: env(titlebar-area-x, ${x}px);`)\n            .replace(/: env\\(titlebar-area-y(?:,[^)]*)?\\);/g, `: env(titlebar-area-y, ${y}px);`)\n            .replace(\n                /: env\\(titlebar-area-width(?:,[^)]*)?\\);/g, `: env(titlebar-area-width, calc(100% - ${width}px));`)\n            .replace(/: env\\(titlebar-area-height(?:,[^)]*)?\\);/g, `: env(titlebar-area-height, ${height}px);`);\n\n    return updatedStylesheet;\n  }\n\n  transformStyleSheetforTesting(\n      x: number, y: number, width: number, height: number, originalStyleSheet: string|undefined): string|undefined {\n    return WindowControls.#transformStyleSheet(x, y, width, height, originalStyleSheet);\n  }\n}\n\nexport const enum Events {\n  INSPECT_MODE_WILL_BE_TOGGLED = 'InspectModeWillBeToggled',\n  EXITED_INSPECT_MODE = 'InspectModeExited',\n  HIGHLIGHT_NODE_REQUESTED = 'HighlightNodeRequested',\n  SCREENSHOT_REQUESTED = 'ScreenshotRequested',\n  PERSISTENT_GRID_OVERLAY_STATE_CHANGED = 'PersistentGridOverlayStateChanged',\n  PERSISTENT_FLEX_CONTAINER_OVERLAY_STATE_CHANGED = 'PersistentFlexContainerOverlayStateChanged',\n  PERSISTENT_SCROLL_SNAP_OVERLAY_STATE_CHANGED = 'PersistentScrollSnapOverlayStateChanged',\n  PERSISTENT_CONTAINER_QUERY_OVERLAY_STATE_CHANGED = 'PersistentContainerQueryOverlayStateChanged',\n}\n\nexport interface ChangedNodeId {\n  nodeId: number;\n  enabled: boolean;\n}\n\nexport type EventTypes = {\n  [Events.INSPECT_MODE_WILL_BE_TOGGLED]: OverlayModel,\n  [Events.EXITED_INSPECT_MODE]: void,\n  [Events.HIGHLIGHT_NODE_REQUESTED]: DOMNode,\n  [Events.SCREENSHOT_REQUESTED]: Protocol.Page.Viewport,\n  [Events.PERSISTENT_GRID_OVERLAY_STATE_CHANGED]: ChangedNodeId,\n  [Events.PERSISTENT_FLEX_CONTAINER_OVERLAY_STATE_CHANGED]: ChangedNodeId,\n  [Events.PERSISTENT_SCROLL_SNAP_OVERLAY_STATE_CHANGED]: ChangedNodeId,\n  [Events.PERSISTENT_CONTAINER_QUERY_OVERLAY_STATE_CHANGED]: ChangedNodeId,\n};\n\nexport interface Highlighter {\n  highlightInOverlay(data: HighlightData, config: Protocol.Overlay.HighlightConfig): void;\n\n  setInspectMode(mode: Protocol.Overlay.InspectMode, config: Protocol.Overlay.HighlightConfig): Promise<void>;\n\n  highlightFrame(frameId: Protocol.Page.FrameId): void;\n}\n\nclass DefaultHighlighter implements Highlighter {\n  readonly #model: OverlayModel;\n  constructor(model: OverlayModel) {\n    this.#model = model;\n  }\n\n  highlightInOverlay(data: HighlightData, highlightConfig: Protocol.Overlay.HighlightConfig): void {\n    const {node, deferredNode, object, selectorList} =\n        {node: undefined, deferredNode: undefined, object: undefined, selectorList: undefined, ...data};\n    const nodeId = node ? node.id : undefined;\n    const backendNodeId = deferredNode ? deferredNode.backendNodeId() : undefined;\n    const objectId = object ? object.objectId : undefined;\n    if (nodeId || backendNodeId || objectId) {\n      void this.#model.target().overlayAgent().invoke_highlightNode(\n          {highlightConfig, nodeId, backendNodeId, objectId, selector: selectorList});\n    } else {\n      void this.#model.target().overlayAgent().invoke_hideHighlight();\n    }\n  }\n\n  async setInspectMode(mode: Protocol.Overlay.InspectMode, highlightConfig: Protocol.Overlay.HighlightConfig):\n      Promise<void> {\n    await this.#model.target().overlayAgent().invoke_setInspectMode({mode, highlightConfig});\n  }\n\n  highlightFrame(frameId: Protocol.Page.FrameId): void {\n    void this.#model.target().overlayAgent().invoke_highlightFrame({\n      frameId,\n      contentColor: Common.Color.PageHighlight.Content.toProtocolRGBA(),\n      contentOutlineColor: Common.Color.PageHighlight.ContentOutline.toProtocolRGBA(),\n    });\n  }\n}\n\nexport class SourceOrderHighlighter {\n  readonly #model: OverlayModel;\n  constructor(model: OverlayModel) {\n    this.#model = model;\n  }\n\n  highlightSourceOrderInOverlay(node: DOMNode, sourceOrderConfig: Protocol.Overlay.SourceOrderConfig): void {\n    this.#model.setSourceOrderActive(true);\n    this.#model.setShowViewportSizeOnResize(false);\n    void this.#model.getOverlayAgent().invoke_highlightSourceOrder({sourceOrderConfig, nodeId: node.id});\n  }\n\n  hideSourceOrderHighlight(): void {\n    this.#model.setSourceOrderActive(false);\n    this.#model.setShowViewportSizeOnResize(true);\n    void this.#model.clearHighlight();\n  }\n}\n\nSDKModel.register(OverlayModel, {capabilities: Capability.DOM, autostart: true});\n\nexport interface HighlightNodeData {\n  node: DOMNode;\n  selectorList?: string;\n}\n\nexport interface HighlightDeferredNode {\n  deferredNode: DeferredDOMNode;\n}\n\nexport interface HighlightObjectData {\n  object: RemoteObject;\n  selectorList?: string;\n}\n\nexport type HighlightData = HighlightNodeData|HighlightDeferredNode|HighlightObjectData|{clear: boolean};\n"],
  "mappings": "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",
  "names": ["EmulatedOSType", "header", "Events"]
}
