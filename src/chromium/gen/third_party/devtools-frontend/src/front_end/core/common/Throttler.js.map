{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/common/Throttler.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport type FinishCallback = (err: Error) => void;\n\nexport class Throttler {\n  readonly #timeout: number;\n  #isRunningProcess: boolean;\n  #asSoonAsPossible: boolean;\n  #process: (() => (Promise<unknown>))|null;\n  #lastCompleteTime: number;\n  #schedulePromise: Promise<unknown>;\n  #scheduleResolve!: (value: unknown) => void;\n  #processTimeout?: number;\n\n  constructor(timeout: number) {\n    this.#timeout = timeout;\n    this.#isRunningProcess = false;\n    this.#asSoonAsPossible = false;\n    this.#process = null;\n    this.#lastCompleteTime = 0;\n\n    this.#schedulePromise = new Promise(fulfill => {\n      this.#scheduleResolve = fulfill;\n    });\n  }\n\n  #processCompleted(): void {\n    this.#lastCompleteTime = this.getTime();\n    this.#isRunningProcess = false;\n    if (this.#process) {\n      this.innerSchedule(false);\n    }\n    this.processCompletedForTests();\n  }\n\n  private processCompletedForTests(): void {\n    // For sniffing in tests.\n  }\n\n  get process(): (() => (Promise<unknown>))|null {\n    return this.#process;\n  }\n\n  get processCompleted(): Promise<unknown>|null {\n    return this.#process ? this.#schedulePromise : null;\n  }\n\n  private onTimeout(): void {\n    this.#processTimeout = undefined;\n    this.#asSoonAsPossible = false;\n    this.#isRunningProcess = true;\n\n    void Promise.resolve()\n        .then(this.#process)\n        .catch(console.error.bind(console))\n        .then(this.#processCompleted.bind(this))\n        .then(this.#scheduleResolve);\n    this.#schedulePromise = new Promise(fulfill => {\n      this.#scheduleResolve = fulfill;\n    });\n    this.#process = null;\n  }\n\n  schedule(process: () => (Promise<unknown>), scheduling = Scheduling.DEFAULT): Promise<void> {\n    // Deliberately skip previous #process.\n    this.#process = process;\n\n    // Run the first scheduled task instantly.\n    const hasScheduledTasks = Boolean(this.#processTimeout) || this.#isRunningProcess;\n    const okToFire = this.getTime() - this.#lastCompleteTime > this.#timeout;\n    const asSoonAsPossible = scheduling === Scheduling.AS_SOON_AS_POSSIBLE ||\n        (scheduling === Scheduling.DEFAULT && !hasScheduledTasks && okToFire);\n\n    const forceTimerUpdate = asSoonAsPossible && !this.#asSoonAsPossible;\n    this.#asSoonAsPossible = this.#asSoonAsPossible || asSoonAsPossible;\n\n    this.innerSchedule(forceTimerUpdate);\n\n    return this.#schedulePromise as Promise<void>;\n  }\n\n  private innerSchedule(forceTimerUpdate: boolean): void {\n    if (this.#isRunningProcess) {\n      return;\n    }\n    if (this.#processTimeout && !forceTimerUpdate) {\n      return;\n    }\n    if (this.#processTimeout) {\n      this.clearTimeout(this.#processTimeout);\n    }\n\n    const timeout = this.#asSoonAsPossible ? 0 : this.#timeout;\n    this.#processTimeout = this.setTimeout(this.onTimeout.bind(this), timeout);\n  }\n\n  private clearTimeout(timeoutId: number): void {\n    clearTimeout(timeoutId);\n  }\n\n  private setTimeout(operation: () => void, timeout: number): number {\n    return window.setTimeout(operation, timeout);\n  }\n\n  private getTime(): number {\n    return window.performance.now();\n  }\n}\n\nexport const enum Scheduling {\n  // If the throttler has run another task recently (i.e. time since the last run is less then the\n  // throttling delay), schedule the task to be run after the throttling delay. Otherwise scheule\n  // the task after the next tick.\n  DEFAULT = 'Default',\n  // Schedule the task to run at the next tick, even if the throttler has run another task recently.\n  AS_SOON_AS_POSSIBLE = 'AsSoonAsPossible',\n  // Schedule the task to run after the throttling delay, even if the throttler has not run any\n  // task recently.\n  DELAYED = 'Delayed',\n}\n"],
  "mappings": ";AAMO,aAAM,UAAU;AAAA,EACZ;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,SAAiB;AAC3B,SAAK,WAAW;AAChB,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AACzB,SAAK,WAAW;AAChB,SAAK,oBAAoB;AAEzB,SAAK,mBAAmB,IAAI,QAAQ,aAAW;AAC7C,WAAK,mBAAmB;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA,EAEA,oBAA0B;AACxB,SAAK,oBAAoB,KAAK,QAAQ;AACtC,SAAK,oBAAoB;AACzB,QAAI,KAAK,UAAU;AACjB,WAAK,cAAc,KAAK;AAAA,IAC1B;AACA,SAAK,yBAAyB;AAAA,EAChC;AAAA,EAEQ,2BAAiC;AAAA,EAEzC;AAAA,EAEA,IAAI,UAA2C;AAC7C,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,mBAA0C;AAC5C,WAAO,KAAK,WAAW,KAAK,mBAAmB;AAAA,EACjD;AAAA,EAEQ,YAAkB;AACxB,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AAEzB,SAAK,QAAQ,QAAQ,EAChB,KAAK,KAAK,QAAQ,EAClB,MAAM,QAAQ,MAAM,KAAK,OAAO,CAAC,EACjC,KAAK,KAAK,kBAAkB,KAAK,IAAI,CAAC,EACtC,KAAK,KAAK,gBAAgB;AAC/B,SAAK,mBAAmB,IAAI,QAAQ,aAAW;AAC7C,WAAK,mBAAmB;AAAA,IAC1B,CAAC;AACD,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,SAAS,SAAmC,aAAa,yBAAmC;AAE1F,SAAK,WAAW;AAGhB,UAAM,oBAAoB,QAAQ,KAAK,eAAe,KAAK,KAAK;AAChE,UAAM,WAAW,KAAK,QAAQ,IAAI,KAAK,oBAAoB,KAAK;AAChE,UAAM,mBAAmB,eAAe,gDACnC,eAAe,2BAAsB,CAAC,qBAAqB;AAEhE,UAAM,mBAAmB,oBAAoB,CAAC,KAAK;AACnD,SAAK,oBAAoB,KAAK,qBAAqB;AAEnD,SAAK,cAAc,gBAAgB;AAEnC,WAAO,KAAK;AAAA,EACd;AAAA,EAEQ,cAAc,kBAAiC;AACrD,QAAI,KAAK,mBAAmB;AAC1B;AAAA,IACF;AACA,QAAI,KAAK,mBAAmB,CAAC,kBAAkB;AAC7C;AAAA,IACF;AACA,QAAI,KAAK,iBAAiB;AACxB,WAAK,aAAa,KAAK,eAAe;AAAA,IACxC;AAEA,UAAM,UAAU,KAAK,oBAAoB,IAAI,KAAK;AAClD,SAAK,kBAAkB,KAAK,WAAW,KAAK,UAAU,KAAK,IAAI,GAAG,OAAO;AAAA,EAC3E;AAAA,EAEQ,aAAa,WAAyB;AAC5C,iBAAa,SAAS;AAAA,EACxB;AAAA,EAEQ,WAAW,WAAuB,SAAyB;AACjE,WAAO,OAAO,WAAW,WAAW,OAAO;AAAA,EAC7C;AAAA,EAEQ,UAAkB;AACxB,WAAO,OAAO,YAAY,IAAI;AAAA,EAChC;AACF;AAEO,WAAW,aAAX,kBAAWA,gBAAX;AAIL,EAAAA,YAAA,aAAU;AAEV,EAAAA,YAAA,yBAAsB;AAGtB,EAAAA,YAAA,aAAU;AATM,SAAAA;AAAA,GAAA;",
  "names": ["Scheduling"]
}
