{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/NetworkRequest.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {Attribute, type Cookie} from './Cookie.js';\nimport {CookieModel} from './CookieModel.js';\nimport {CookieParser} from './CookieParser.js';\nimport * as HttpReasonPhraseStrings from './HttpReasonPhraseStrings.js';\nimport {Events as NetworkManagerEvents, NetworkManager} from './NetworkManager.js';\nimport {ServerSentEvents} from './ServerSentEvents.js';\nimport {ServerTiming} from './ServerTiming.js';\nimport {Type} from './Target.js';\n\n// clang-format off\nconst UIStrings = {\n  /**\n   *@description Text in Network Request\n   */\n  binary: '(binary)',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  secureOnly: 'This cookie was blocked because it had the \"`Secure`\" attribute and the connection was not secure.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  notOnPath: 'This cookie was blocked because its path was not an exact match for or a superdirectory of the request url\\'s path.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  domainMismatch: 'This cookie was blocked because neither did the request URL\\'s domain exactly match the cookie\\'s domain, nor was the request URL\\'s domain a subdomain of the cookie\\'s Domain attribute value.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  sameSiteStrict: 'This cookie was blocked because it had the \"`SameSite=Strict`\" attribute and the request was made from a different site. This includes top-level navigation requests initiated by other sites.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  sameSiteLax: 'This cookie was blocked because it had the \"`SameSite=Lax`\" attribute and the request was made from a different site and was not initiated by a top-level navigation.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  sameSiteUnspecifiedTreatedAsLax: 'This cookie didn\\'t specify a \"`SameSite`\" attribute when it was stored and was defaulted to \"SameSite=Lax,\" and was blocked because the request was made from a different site and was not initiated by a top-level navigation. The cookie had to have been set with \"`SameSite=None`\" to enable cross-site usage.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  sameSiteNoneInsecure: 'This cookie was blocked because it had the \"`SameSite=None`\" attribute but was not marked \"Secure\". Cookies without SameSite restrictions must be marked \"Secure\" and sent over a secure connection.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  userPreferences: 'This cookie was blocked due to user preferences.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  thirdPartyPhaseout: 'This cookie was blocked either because of Chrome flags or browser configuration. Learn more in the Issues panel.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  unknownError: 'An unknown error was encountered when trying to send this cookie.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n   */\n  schemefulSameSiteStrict: 'This cookie was blocked because it had the \"`SameSite=Strict`\" attribute but the request was cross-site. This includes top-level navigation requests initiated by other sites. This request is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n   */\n  schemefulSameSiteLax: 'This cookie was blocked because it had the \"`SameSite=Lax`\" attribute but the request was cross-site and was not initiated by a top-level navigation. This request is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n   */\n  schemefulSameSiteUnspecifiedTreatedAsLax: 'This cookie didn\\'t specify a \"`SameSite`\" attribute when it was stored, was defaulted to \"`SameSite=Lax\"`, and was blocked because the request was cross-site and was not initiated by a top-level navigation. This request is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to SameParty\n   */\n  samePartyFromCrossPartyContext: 'This cookie was blocked because it had the \"`SameParty`\" attribute but the request was cross-party. The request was considered cross-party because the domain of the resource\\'s URL and the domains of the resource\\'s enclosing frames/documents are neither owners nor members in the same First-Party Set.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to exceeding the maximum size\n   */\n  nameValuePairExceedsMaxSize: 'This cookie was blocked because it was too large. The combined size of the name and value must be less than or equal to 4096 characters.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n  thisSetcookieWasBlockedDueToUser: 'This attempt to set a cookie via a `Set-Cookie` header was blocked due to user preferences.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n   thisSetcookieWasBlockedDueThirdPartyPhaseout: 'Setting this cookie was blocked either because of Chrome flags or browser configuration. Learn more in the Issues panel.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n  thisSetcookieHadInvalidSyntax: 'This `Set-Cookie` header had invalid syntax.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  thisSetcookieHadADisallowedCharacter: 'This `Set-Cookie` header contained a disallowed character (a forbidden ASCII control character, or the tab character if it appears in the middle of the cookie name, value, an attribute name, or an attribute value).',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  theSchemeOfThisConnectionIsNot: 'The scheme of this connection is not allowed to store cookies.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked\n   */\n  anUnknownErrorWasEncounteredWhenTrying: 'An unknown error was encountered when trying to store this cookie.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n   *@example {SameSite=Strict} PH1\n   */\n  thisSetcookieWasBlockedBecauseItHadTheSamesiteStrictLax: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"{PH1}\" attribute but came from a cross-site response which was not the response to a top-level navigation. This response is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n   */\n  thisSetcookieDidntSpecifyASamesite: 'This `Set-Cookie` header didn\\'t specify a \"`SameSite`\" attribute, was defaulted to \"`SameSite=Lax\"`, and was blocked because it came from a cross-site response which was not the response to a top-level navigation. This response is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to SameParty\n   */\n  thisSetcookieWasBlockedBecauseItHadTheSameparty: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"`SameParty`\" attribute but the request was cross-party. The request was considered cross-party because the domain of the resource\\'s URL and the domains of the resource\\'s enclosing frames/documents are neither owners nor members in the same First-Party Set.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked due to SameParty\n   */\n  thisSetcookieWasBlockedBecauseItHadTheSamepartyAttribute: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"`SameParty`\" attribute but also had other conflicting attributes. Chrome requires cookies that use the \"`SameParty`\" attribute to also have the \"Secure\" attribute, and to not be restricted to \"`SameSite=Strict`\".',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n  blockedReasonSecureOnly: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"Secure\" attribute but was not received over a secure connection.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n   *@example {SameSite=Strict} PH1\n   */\n  blockedReasonSameSiteStrictLax: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"{PH1}\" attribute but came from a cross-site response which was not the response to a top-level navigation.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n  blockedReasonSameSiteUnspecifiedTreatedAsLax: 'This `Set-Cookie` header didn\\'t specify a \"`SameSite`\" attribute and was defaulted to \"`SameSite=Lax,`\" and was blocked because it came from a cross-site response which was not the response to a top-level navigation. The `Set-Cookie` had to have been set with \"`SameSite=None`\" to enable cross-site usage.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n  blockedReasonSameSiteNoneInsecure: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"`SameSite=None`\" attribute but did not have the \"Secure\" attribute, which is required in order to use \"`SameSite=None`\".',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n  blockedReasonOverwriteSecure: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it was not sent over a secure connection and would have overwritten a cookie with the Secure attribute.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n  blockedReasonInvalidDomain: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because its Domain attribute was invalid with regards to the current host url.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n   */\n  blockedReasonInvalidPrefix: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it used the \"`__Secure-`\" or \"`__Host-`\" prefix in its name and broke the additional rules applied to cookies with these prefixes as defined in `https://tools.ietf.org/html/draft-west-cookie-prefixes-05`.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked when the size of the #name plus the size of the value exceeds the max size.\n   */\n  thisSetcookieWasBlockedBecauseTheNameValuePairExceedsMaxSize: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because the cookie was too large. The combined size of the name and value must be less than or equal to 4096 characters.',\n  /**\n   *@description Text in Network Manager\n   *@example {https://example.com} PH1\n   */\n  setcookieHeaderIsIgnoredIn: 'Set-Cookie header is ignored in response from url: {PH1}. The combined size of the name and value must be less than or equal to 4096 characters.',\n  /**\n   *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n   */\n   exemptionReasonUserSetting: 'This cookie is allowed by user preference.',\n   /**\n    *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n    */\n   exemptionReasonTPCDMetadata: 'This cookie is allowed by a third-party cookie deprecation trial grace period. Learn more: goo.gle/dt-grace.',\n   /**\n    *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n    */\n   exemptionReasonTPCDDeprecationTrial: 'This cookie is allowed by third-party cookie deprecation trial. Learn more: goo.gle/ps-dt.',\n   /**\n    *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n    */\n  exemptionReasonTopLevelTPCDDeprecationTrial: 'This cookie is allowed by top-level third-party cookie deprecation trial. Learn more: goo.gle/ps-dt.',\n   /**\n    *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n    */\n   exemptionReasonTPCDHeuristics: 'This cookie is allowed by third-party cookie heuristics. Learn more: goo.gle/hbe',\n   /**\n    *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n    */\n   exemptionReasonEnterprisePolicy: 'This cookie is allowed by Chrome Enterprise policy. Learn more: goo.gle/ce-3pc',\n   /**\n    *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n    */\n   exemptionReasonStorageAccessAPI: 'This cookie is allowed by the Storage Access API. Learn more: goo.gle/saa',\n   /**\n    *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n    */\n   exemptionReasonTopLevelStorageAccessAPI: 'This cookie is allowed by the top-level Storage Access API. Learn more: goo.gle/saa-top',\n   /**\n    *@description Tooltip to explain why the cookie should have been blocked by third-party cookie phaseout but is exempted.\n    */\n    exemptionReasonScheme: 'This cookie is allowed by the top-level url scheme',\n};\n// clang-format on\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/NetworkRequest.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class NetworkRequest extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    TextUtils.ContentProvider.StreamingContentProvider {\n  #requestIdInternal: string;\n  #backendRequestIdInternal?: Protocol.Network.RequestId;\n  readonly #documentURLInternal: Platform.DevToolsPath.UrlString;\n  readonly #frameIdInternal: Protocol.Page.FrameId|null;\n  readonly #loaderIdInternal: Protocol.Network.LoaderId|null;\n  readonly #hasUserGesture: boolean|undefined;\n  readonly #initiatorInternal: Protocol.Network.Initiator|null|undefined;\n  #redirectSourceInternal: NetworkRequest|null;\n  #preflightRequestInternal: NetworkRequest|null;\n  #preflightInitiatorRequestInternal: NetworkRequest|null;\n  #isRedirectInternal: boolean;\n  #redirectDestinationInternal: NetworkRequest|null;\n  #issueTimeInternal: number;\n  #startTimeInternal: number;\n  #endTimeInternal: number;\n  #blockedReasonInternal: Protocol.Network.BlockedReason|undefined;\n  #corsErrorStatusInternal: Protocol.Network.CorsErrorStatus|undefined;\n  statusCode: number;\n  statusText: string;\n  requestMethod: string;\n  requestTime: number;\n  protocol: string;\n  alternateProtocolUsage: Protocol.Network.AlternateProtocolUsage|undefined;\n  mixedContentType: Protocol.Security.MixedContentType;\n  #initialPriorityInternal: Protocol.Network.ResourcePriority|null;\n  #currentPriority: Protocol.Network.ResourcePriority|null;\n  #signedExchangeInfoInternal: Protocol.Network.SignedExchangeInfo|null;\n  #webBundleInfoInternal: WebBundleInfo|null;\n  #webBundleInnerRequestInfoInternal: WebBundleInnerRequestInfo|null;\n  #resourceTypeInternal: Common.ResourceType.ResourceType;\n  #contentDataInternal: Promise<TextUtils.ContentData.ContentDataOrError>|null;\n  #streamingContentData: Promise<TextUtils.StreamingContentData.StreamingContentDataOrError>|null;\n  readonly #framesInternal: WebSocketFrame[];\n  #responseHeaderValues: {\n    [x: string]: string|undefined,\n  };\n  #responseHeadersTextInternal: string;\n  #originalResponseHeaders: Protocol.Fetch.HeaderEntry[];\n  #sortedOriginalResponseHeaders?: NameValue[];\n\n  // This field is only used when intercepting and overriding requests, because\n  // in that case 'this.responseHeaders' does not contain 'set-cookie' headers.\n  #setCookieHeaders: Protocol.Fetch.HeaderEntry[];\n\n  #requestHeadersInternal: NameValue[];\n  #requestHeaderValues: {\n    [x: string]: string|undefined,\n  };\n  #remoteAddressInternal: string;\n  #remoteAddressSpaceInternal: Protocol.Network.IPAddressSpace;\n  #referrerPolicyInternal: Protocol.Network.RequestReferrerPolicy|null;\n  #securityStateInternal: Protocol.Security.SecurityState;\n  #securityDetailsInternal: Protocol.Network.SecurityDetails|null;\n  connectionId: string;\n  connectionReused: boolean;\n  hasNetworkData: boolean;\n  #formParametersPromise: Promise<NameValue[]|null>|null;\n  #requestFormDataPromise: Promise<string|null>|null;\n  #hasExtraRequestInfoInternal: boolean;\n  #hasExtraResponseInfoInternal: boolean;\n  #blockedRequestCookiesInternal: BlockedCookieWithReason[];\n  #includedRequestCookiesInternal: IncludedCookieWithReason[];\n  #blockedResponseCookiesInternal: BlockedSetCookieWithReason[];\n  #exemptedResponseCookiesInternal: ExemptedSetCookieWithReason[];\n  #responseCookiesPartitionKey: Protocol.Network.CookiePartitionKey|null;\n  #responseCookiesPartitionKeyOpaque: boolean|null;\n  #siteHasCookieInOtherPartition: boolean;\n  localizedFailDescription: string|null;\n  #urlInternal!: Platform.DevToolsPath.UrlString;\n  #responseReceivedTimeInternal!: number;\n  #transferSizeInternal!: number;\n  #finishedInternal!: boolean;\n  #failedInternal!: boolean;\n  #canceledInternal!: boolean;\n  #preservedInternal!: boolean;\n  #mimeTypeInternal!: string;\n  #charset!: string;\n  #parsedURLInternal!: Common.ParsedURL.ParsedURL;\n  #nameInternal!: string|undefined;\n  #pathInternal!: string|undefined;\n  #clientSecurityStateInternal!: Protocol.Network.ClientSecurityState|undefined;\n  #trustTokenParamsInternal!: Protocol.Network.TrustTokenParams|undefined;\n  #trustTokenOperationDoneEventInternal!: Protocol.Network.TrustTokenOperationDoneEvent|undefined;\n  #responseCacheStorageCacheName?: string;\n  #serviceWorkerResponseSourceInternal?: Protocol.Network.ServiceWorkerResponseSource;\n  #wallIssueTime?: number;\n  #responseRetrievalTime?: Date;\n  #resourceSizeInternal?: number;\n  #fromMemoryCache?: boolean;\n  #fromDiskCache?: boolean;\n  #fromPrefetchCacheInternal?: boolean;\n  #fromEarlyHints?: boolean;\n  #fetchedViaServiceWorkerInternal?: boolean;\n  #serviceWorkerRouterInfoInternal?: Protocol.Network.ServiceWorkerRouterInfo;\n  #timingInternal?: Protocol.Network.ResourceTiming;\n  #requestHeadersTextInternal?: string;\n  #responseHeadersInternal?: NameValue[];\n  #earlyHintsHeadersInternal?: NameValue[];\n  #sortedResponseHeadersInternal?: NameValue[];\n  #responseCookiesInternal?: Cookie[];\n  #serverTimingsInternal?: ServerTiming[]|null;\n  #queryStringInternal?: string|null;\n  #parsedQueryParameters?: NameValue[];\n  #contentDataProvider?: (() => Promise<TextUtils.ContentData.ContentDataOrError>);\n  #isSameSiteInternal: boolean|null;\n  #wasIntercepted: boolean;\n  #associatedData = new Map<string, object>();\n  #hasOverriddenContent: boolean;\n  #hasThirdPartyCookiePhaseoutIssue: boolean;\n  #serverSentEvents?: ServerSentEvents;\n  responseReceivedPromise?: Promise<void>;\n  responseReceivedPromiseResolve?: () => void;\n\n  constructor(\n      requestId: string, backendRequestId: Protocol.Network.RequestId|undefined, url: Platform.DevToolsPath.UrlString,\n      documentURL: Platform.DevToolsPath.UrlString, frameId: Protocol.Page.FrameId|null,\n      loaderId: Protocol.Network.LoaderId|null, initiator: Protocol.Network.Initiator|null, hasUserGesture?: boolean) {\n    super();\n\n    this.#requestIdInternal = requestId;\n    this.#backendRequestIdInternal = backendRequestId;\n    this.setUrl(url);\n    this.#documentURLInternal = documentURL;\n    this.#frameIdInternal = frameId;\n    this.#loaderIdInternal = loaderId;\n    this.#initiatorInternal = initiator;\n    this.#hasUserGesture = hasUserGesture;\n    this.#redirectSourceInternal = null;\n    this.#preflightRequestInternal = null;\n    this.#preflightInitiatorRequestInternal = null;\n    this.#isRedirectInternal = false;\n    this.#redirectDestinationInternal = null;\n    this.#issueTimeInternal = -1;\n    this.#startTimeInternal = -1;\n    this.#endTimeInternal = -1;\n    this.#blockedReasonInternal = undefined;\n    this.#corsErrorStatusInternal = undefined;\n\n    this.statusCode = 0;\n    this.statusText = '';\n    this.requestMethod = '';\n    this.requestTime = 0;\n    this.protocol = '';\n    this.alternateProtocolUsage = undefined;\n    this.mixedContentType = Protocol.Security.MixedContentType.None;\n\n    this.#initialPriorityInternal = null;\n    this.#currentPriority = null;\n\n    this.#signedExchangeInfoInternal = null;\n    this.#webBundleInfoInternal = null;\n    this.#webBundleInnerRequestInfoInternal = null;\n\n    this.#resourceTypeInternal = Common.ResourceType.resourceTypes.Other;\n    this.#contentDataInternal = null;\n    this.#streamingContentData = null;\n    this.#framesInternal = [];\n\n    this.#responseHeaderValues = {};\n    this.#responseHeadersTextInternal = '';\n    this.#originalResponseHeaders = [];\n    this.#setCookieHeaders = [];\n\n    this.#requestHeadersInternal = [];\n    this.#requestHeaderValues = {};\n\n    this.#remoteAddressInternal = '';\n    this.#remoteAddressSpaceInternal = Protocol.Network.IPAddressSpace.Unknown;\n\n    this.#referrerPolicyInternal = null;\n\n    this.#securityStateInternal = Protocol.Security.SecurityState.Unknown;\n    this.#securityDetailsInternal = null;\n\n    this.connectionId = '0';\n    this.connectionReused = false;\n    this.hasNetworkData = false;\n    this.#formParametersPromise = null;\n    this.#requestFormDataPromise = (Promise.resolve(null) as Promise<string|null>| null);\n\n    this.#hasExtraRequestInfoInternal = false;\n    this.#hasExtraResponseInfoInternal = false;\n\n    this.#blockedRequestCookiesInternal = [];\n    this.#includedRequestCookiesInternal = [];\n    this.#blockedResponseCookiesInternal = [];\n    this.#exemptedResponseCookiesInternal = [];\n    this.#siteHasCookieInOtherPartition = false;\n    this.#responseCookiesPartitionKey = null;\n    this.#responseCookiesPartitionKeyOpaque = null;\n\n    this.localizedFailDescription = null;\n    this.#isSameSiteInternal = null;\n\n    this.#wasIntercepted = false;\n    this.#hasOverriddenContent = false;\n    this.#hasThirdPartyCookiePhaseoutIssue = false;\n  }\n\n  static create(\n      backendRequestId: Protocol.Network.RequestId, url: Platform.DevToolsPath.UrlString,\n      documentURL: Platform.DevToolsPath.UrlString, frameId: Protocol.Page.FrameId|null,\n      loaderId: Protocol.Network.LoaderId|null, initiator: Protocol.Network.Initiator|null,\n      hasUserGesture?: boolean): NetworkRequest {\n    return new NetworkRequest(\n        backendRequestId, backendRequestId, url, documentURL, frameId, loaderId, initiator, hasUserGesture);\n  }\n\n  static createForWebSocket(\n      backendRequestId: Protocol.Network.RequestId, requestURL: Platform.DevToolsPath.UrlString,\n      initiator?: Protocol.Network.Initiator): NetworkRequest {\n    return new NetworkRequest(\n        backendRequestId, backendRequestId, requestURL, Platform.DevToolsPath.EmptyUrlString, null, null,\n        initiator || null);\n  }\n\n  static createWithoutBackendRequest(\n      requestId: string, url: Platform.DevToolsPath.UrlString, documentURL: Platform.DevToolsPath.UrlString,\n      initiator: Protocol.Network.Initiator|null): NetworkRequest {\n    return new NetworkRequest(requestId, undefined, url, documentURL, null, null, initiator);\n  }\n\n  identityCompare(other: NetworkRequest): number {\n    const thisId = this.requestId();\n    const thatId = other.requestId();\n    if (thisId > thatId) {\n      return 1;\n    }\n    if (thisId < thatId) {\n      return -1;\n    }\n    return 0;\n  }\n\n  requestId(): string {\n    return this.#requestIdInternal;\n  }\n\n  backendRequestId(): Protocol.Network.RequestId|undefined {\n    return this.#backendRequestIdInternal;\n  }\n\n  url(): Platform.DevToolsPath.UrlString {\n    return this.#urlInternal;\n  }\n\n  isBlobRequest(): boolean {\n    return Common.ParsedURL.schemeIs(this.#urlInternal, 'blob:');\n  }\n\n  setUrl(x: Platform.DevToolsPath.UrlString): void {\n    if (this.#urlInternal === x) {\n      return;\n    }\n\n    this.#urlInternal = x;\n    this.#parsedURLInternal = new Common.ParsedURL.ParsedURL(x);\n    this.#queryStringInternal = undefined;\n    this.#parsedQueryParameters = undefined;\n    this.#nameInternal = undefined;\n    this.#pathInternal = undefined;\n  }\n\n  get documentURL(): Platform.DevToolsPath.UrlString {\n    return this.#documentURLInternal;\n  }\n\n  get parsedURL(): Common.ParsedURL.ParsedURL {\n    return this.#parsedURLInternal;\n  }\n\n  get frameId(): Protocol.Page.FrameId|null {\n    return this.#frameIdInternal;\n  }\n\n  get loaderId(): Protocol.Network.LoaderId|null {\n    return this.#loaderIdInternal;\n  }\n\n  setRemoteAddress(ip: string, port: number): void {\n    this.#remoteAddressInternal = ip + ':' + port;\n    this.dispatchEventToListeners(Events.REMOTE_ADDRESS_CHANGED, this);\n  }\n\n  remoteAddress(): string {\n    return this.#remoteAddressInternal;\n  }\n\n  remoteAddressSpace(): Protocol.Network.IPAddressSpace {\n    return this.#remoteAddressSpaceInternal;\n  }\n\n  /**\n   * The cache #name of the CacheStorage from where the response is served via\n   * the ServiceWorker.\n   */\n  getResponseCacheStorageCacheName(): string|undefined {\n    return this.#responseCacheStorageCacheName;\n  }\n\n  setResponseCacheStorageCacheName(x: string): void {\n    this.#responseCacheStorageCacheName = x;\n  }\n\n  serviceWorkerResponseSource(): Protocol.Network.ServiceWorkerResponseSource|undefined {\n    return this.#serviceWorkerResponseSourceInternal;\n  }\n\n  setServiceWorkerResponseSource(serviceWorkerResponseSource: Protocol.Network.ServiceWorkerResponseSource): void {\n    this.#serviceWorkerResponseSourceInternal = serviceWorkerResponseSource;\n  }\n\n  setReferrerPolicy(referrerPolicy: Protocol.Network.RequestReferrerPolicy): void {\n    this.#referrerPolicyInternal = referrerPolicy;\n  }\n\n  referrerPolicy(): Protocol.Network.RequestReferrerPolicy|null {\n    return this.#referrerPolicyInternal;\n  }\n\n  securityState(): Protocol.Security.SecurityState {\n    return this.#securityStateInternal;\n  }\n\n  setSecurityState(securityState: Protocol.Security.SecurityState): void {\n    this.#securityStateInternal = securityState;\n  }\n\n  securityDetails(): Protocol.Network.SecurityDetails|null {\n    return this.#securityDetailsInternal;\n  }\n\n  securityOrigin(): string {\n    return this.#parsedURLInternal.securityOrigin();\n  }\n\n  setSecurityDetails(securityDetails: Protocol.Network.SecurityDetails): void {\n    this.#securityDetailsInternal = securityDetails;\n  }\n\n  get startTime(): number {\n    return this.#startTimeInternal || -1;\n  }\n\n  setIssueTime(monotonicTime: number, wallTime: number): void {\n    this.#issueTimeInternal = monotonicTime;\n    this.#wallIssueTime = wallTime;\n    this.#startTimeInternal = monotonicTime;\n  }\n\n  issueTime(): number {\n    return this.#issueTimeInternal;\n  }\n\n  pseudoWallTime(monotonicTime: number): number {\n    return this.#wallIssueTime ? this.#wallIssueTime - this.#issueTimeInternal + monotonicTime : monotonicTime;\n  }\n\n  get responseReceivedTime(): number {\n    return this.#responseReceivedTimeInternal || -1;\n  }\n\n  set responseReceivedTime(x: number) {\n    this.#responseReceivedTimeInternal = x;\n  }\n\n  /**\n   * The time at which the returned response was generated. For cached\n   * responses, this is the last time the cache entry was validated.\n   */\n  getResponseRetrievalTime(): Date|undefined {\n    return this.#responseRetrievalTime;\n  }\n\n  setResponseRetrievalTime(x: Date): void {\n    this.#responseRetrievalTime = x;\n  }\n\n  get endTime(): number {\n    return this.#endTimeInternal || -1;\n  }\n\n  set endTime(x: number) {\n    if (this.timing && this.timing.requestTime) {\n      // Check against accurate responseReceivedTime.\n      this.#endTimeInternal = Math.max(x, this.responseReceivedTime);\n    } else {\n      // Prefer endTime since it might be from the network stack.\n      this.#endTimeInternal = x;\n      if (this.#responseReceivedTimeInternal > x) {\n        this.#responseReceivedTimeInternal = x;\n      }\n    }\n    this.dispatchEventToListeners(Events.TIMING_CHANGED, this);\n  }\n\n  get duration(): number {\n    if (this.#endTimeInternal === -1 || this.#startTimeInternal === -1) {\n      return -1;\n    }\n    return this.#endTimeInternal - this.#startTimeInternal;\n  }\n\n  get latency(): number {\n    if (this.#responseReceivedTimeInternal === -1 || this.#startTimeInternal === -1) {\n      return -1;\n    }\n    return this.#responseReceivedTimeInternal - this.#startTimeInternal;\n  }\n\n  get resourceSize(): number {\n    return this.#resourceSizeInternal || 0;\n  }\n\n  set resourceSize(x: number) {\n    this.#resourceSizeInternal = x;\n  }\n\n  get transferSize(): number {\n    return this.#transferSizeInternal || 0;\n  }\n\n  increaseTransferSize(x: number): void {\n    this.#transferSizeInternal = (this.#transferSizeInternal || 0) + x;\n  }\n\n  setTransferSize(x: number): void {\n    this.#transferSizeInternal = x;\n  }\n\n  get finished(): boolean {\n    return this.#finishedInternal;\n  }\n\n  set finished(x: boolean) {\n    if (this.#finishedInternal === x) {\n      return;\n    }\n\n    this.#finishedInternal = x;\n\n    if (x) {\n      this.dispatchEventToListeners(Events.FINISHED_LOADING, this);\n    }\n  }\n\n  get failed(): boolean {\n    return this.#failedInternal;\n  }\n\n  set failed(x: boolean) {\n    this.#failedInternal = x;\n  }\n\n  get canceled(): boolean {\n    return this.#canceledInternal;\n  }\n\n  set canceled(x: boolean) {\n    this.#canceledInternal = x;\n  }\n\n  get preserved(): boolean {\n    return this.#preservedInternal;\n  }\n\n  set preserved(x: boolean) {\n    this.#preservedInternal = x;\n  }\n\n  blockedReason(): Protocol.Network.BlockedReason|undefined {\n    return this.#blockedReasonInternal;\n  }\n\n  setBlockedReason(reason: Protocol.Network.BlockedReason): void {\n    this.#blockedReasonInternal = reason;\n  }\n\n  corsErrorStatus(): Protocol.Network.CorsErrorStatus|undefined {\n    return this.#corsErrorStatusInternal;\n  }\n\n  setCorsErrorStatus(corsErrorStatus: Protocol.Network.CorsErrorStatus): void {\n    this.#corsErrorStatusInternal = corsErrorStatus;\n  }\n\n  wasBlocked(): boolean {\n    return Boolean(this.#blockedReasonInternal);\n  }\n\n  cached(): boolean {\n    return (Boolean(this.#fromMemoryCache) || Boolean(this.#fromDiskCache)) && !this.#transferSizeInternal;\n  }\n\n  cachedInMemory(): boolean {\n    return Boolean(this.#fromMemoryCache) && !this.#transferSizeInternal;\n  }\n\n  fromPrefetchCache(): boolean {\n    return Boolean(this.#fromPrefetchCacheInternal);\n  }\n\n  setFromMemoryCache(): void {\n    this.#fromMemoryCache = true;\n    this.#timingInternal = undefined;\n  }\n\n  get fromDiskCache(): boolean|undefined {\n    return this.#fromDiskCache;\n  }\n\n  setFromDiskCache(): void {\n    this.#fromDiskCache = true;\n  }\n\n  setFromPrefetchCache(): void {\n    this.#fromPrefetchCacheInternal = true;\n  }\n\n  fromEarlyHints(): boolean {\n    return Boolean(this.#fromEarlyHints);\n  }\n\n  setFromEarlyHints(): void {\n    this.#fromEarlyHints = true;\n  }\n\n  /**\n   * Returns true if the request was intercepted by a service worker and it\n   * provided its own response.\n   */\n  get fetchedViaServiceWorker(): boolean {\n    return Boolean(this.#fetchedViaServiceWorkerInternal);\n  }\n\n  set fetchedViaServiceWorker(x: boolean) {\n    this.#fetchedViaServiceWorkerInternal = x;\n  }\n\n  get serviceWorkerRouterInfo(): Protocol.Network.ServiceWorkerRouterInfo|undefined {\n    return this.#serviceWorkerRouterInfoInternal;\n  }\n\n  set serviceWorkerRouterInfo(x: Protocol.Network.ServiceWorkerRouterInfo) {\n    this.#serviceWorkerRouterInfoInternal = x;\n  }\n\n  /**\n   * Returns true if the request was sent by a service worker.\n   */\n  initiatedByServiceWorker(): boolean {\n    const networkManager = NetworkManager.forRequest(this);\n    if (!networkManager) {\n      return false;\n    }\n    return networkManager.target().type() === Type.ServiceWorker;\n  }\n\n  get timing(): Protocol.Network.ResourceTiming|undefined {\n    return this.#timingInternal;\n  }\n\n  set timing(timingInfo: Protocol.Network.ResourceTiming|undefined) {\n    if (!timingInfo || this.#fromMemoryCache) {\n      return;\n    }\n    // Take startTime and responseReceivedTime from timing data for better accuracy.\n    // Timing's requestTime is a baseline in seconds, rest of the numbers there are ticks in millis.\n    this.#startTimeInternal = timingInfo.requestTime;\n    const headersReceivedTime = timingInfo.requestTime + timingInfo.receiveHeadersEnd / 1000.0;\n    if ((this.#responseReceivedTimeInternal || -1) < 0 || this.#responseReceivedTimeInternal > headersReceivedTime) {\n      this.#responseReceivedTimeInternal = headersReceivedTime;\n    }\n    if (this.#startTimeInternal > this.#responseReceivedTimeInternal) {\n      this.#responseReceivedTimeInternal = this.#startTimeInternal;\n    }\n\n    this.#timingInternal = timingInfo;\n    this.dispatchEventToListeners(Events.TIMING_CHANGED, this);\n  }\n\n  private setConnectTimingFromExtraInfo(connectTiming: Protocol.Network.ConnectTiming): void {\n    this.#startTimeInternal = connectTiming.requestTime;\n    this.dispatchEventToListeners(Events.TIMING_CHANGED, this);\n  }\n\n  get mimeType(): string {\n    return this.#mimeTypeInternal;\n  }\n\n  set mimeType(x: string) {\n    this.#mimeTypeInternal = x;\n    if (x === Platform.MimeType.MimeType.EVENTSTREAM && !this.#serverSentEvents) {\n      const parseFromStreamedData = this.resourceType() !== Common.ResourceType.resourceTypes.EventSource;\n      this.#serverSentEvents = new ServerSentEvents(this, parseFromStreamedData);\n    }\n  }\n\n  get displayName(): string {\n    return this.#parsedURLInternal.displayName;\n  }\n\n  name(): string {\n    if (this.#nameInternal) {\n      return this.#nameInternal;\n    }\n    this.parseNameAndPathFromURL();\n    return this.#nameInternal as string;\n  }\n\n  path(): string {\n    if (this.#pathInternal) {\n      return this.#pathInternal;\n    }\n    this.parseNameAndPathFromURL();\n    return this.#pathInternal as string;\n  }\n\n  private parseNameAndPathFromURL(): void {\n    if (this.#parsedURLInternal.isDataURL()) {\n      this.#nameInternal = this.#parsedURLInternal.dataURLDisplayName();\n      this.#pathInternal = '';\n    } else if (this.#parsedURLInternal.isBlobURL()) {\n      this.#nameInternal = this.#parsedURLInternal.url;\n      this.#pathInternal = '';\n    } else if (this.#parsedURLInternal.isAboutBlank()) {\n      this.#nameInternal = this.#parsedURLInternal.url;\n      this.#pathInternal = '';\n    } else {\n      this.#pathInternal = this.#parsedURLInternal.host + this.#parsedURLInternal.folderPathComponents;\n\n      const networkManager = NetworkManager.forRequest(this);\n      const inspectedURL =\n          networkManager ? Common.ParsedURL.ParsedURL.fromString(networkManager.target().inspectedURL()) : null;\n      this.#pathInternal = Platform.StringUtilities.trimURL(this.#pathInternal, inspectedURL ? inspectedURL.host : '');\n      if (this.#parsedURLInternal.lastPathComponent || this.#parsedURLInternal.queryParams) {\n        this.#nameInternal = this.#parsedURLInternal.lastPathComponent +\n            (this.#parsedURLInternal.queryParams ? '?' + this.#parsedURLInternal.queryParams : '');\n      } else if (this.#parsedURLInternal.folderPathComponents) {\n        this.#nameInternal = this.#parsedURLInternal.folderPathComponents.substring(\n                                 this.#parsedURLInternal.folderPathComponents.lastIndexOf('/') + 1) +\n            '/';\n        this.#pathInternal = this.#pathInternal.substring(0, this.#pathInternal.lastIndexOf('/'));\n      } else {\n        this.#nameInternal = this.#parsedURLInternal.host;\n        this.#pathInternal = '';\n      }\n    }\n  }\n\n  get folder(): string {\n    let path: string = this.#parsedURLInternal.path;\n    const indexOfQuery = path.indexOf('?');\n    if (indexOfQuery !== -1) {\n      path = path.substring(0, indexOfQuery);\n    }\n    const lastSlashIndex = path.lastIndexOf('/');\n    return lastSlashIndex !== -1 ? path.substring(0, lastSlashIndex) : '';\n  }\n\n  get pathname(): string {\n    return this.#parsedURLInternal.path;\n  }\n\n  resourceType(): Common.ResourceType.ResourceType {\n    return this.#resourceTypeInternal;\n  }\n\n  setResourceType(resourceType: Common.ResourceType.ResourceType): void {\n    this.#resourceTypeInternal = resourceType;\n  }\n\n  get domain(): string {\n    return this.#parsedURLInternal.host;\n  }\n\n  get scheme(): string {\n    return this.#parsedURLInternal.scheme;\n  }\n\n  getInferredStatusText(): string {\n    return this.statusText || HttpReasonPhraseStrings.getStatusText(this.statusCode);\n  }\n\n  redirectSource(): NetworkRequest|null {\n    return this.#redirectSourceInternal;\n  }\n\n  setRedirectSource(originatingRequest: NetworkRequest|null): void {\n    this.#redirectSourceInternal = originatingRequest;\n  }\n\n  preflightRequest(): NetworkRequest|null {\n    return this.#preflightRequestInternal;\n  }\n\n  setPreflightRequest(preflightRequest: NetworkRequest|null): void {\n    this.#preflightRequestInternal = preflightRequest;\n  }\n\n  preflightInitiatorRequest(): NetworkRequest|null {\n    return this.#preflightInitiatorRequestInternal;\n  }\n\n  setPreflightInitiatorRequest(preflightInitiatorRequest: NetworkRequest|null): void {\n    this.#preflightInitiatorRequestInternal = preflightInitiatorRequest;\n  }\n\n  isPreflightRequest(): boolean {\n    return this.#initiatorInternal !== null && this.#initiatorInternal !== undefined &&\n        this.#initiatorInternal.type === Protocol.Network.InitiatorType.Preflight;\n  }\n\n  redirectDestination(): NetworkRequest|null {\n    return this.#redirectDestinationInternal;\n  }\n\n  setRedirectDestination(redirectDestination: NetworkRequest|null): void {\n    this.#redirectDestinationInternal = redirectDestination;\n  }\n\n  requestHeaders(): NameValue[] {\n    return this.#requestHeadersInternal;\n  }\n\n  setRequestHeaders(headers: NameValue[]): void {\n    this.#requestHeadersInternal = headers;\n\n    this.dispatchEventToListeners(Events.REQUEST_HEADERS_CHANGED);\n  }\n\n  requestHeadersText(): string|undefined {\n    return this.#requestHeadersTextInternal;\n  }\n\n  setRequestHeadersText(text: string): void {\n    this.#requestHeadersTextInternal = text;\n\n    this.dispatchEventToListeners(Events.REQUEST_HEADERS_CHANGED);\n  }\n\n  requestHeaderValue(headerName: string): string|undefined {\n    if (this.#requestHeaderValues[headerName]) {\n      return this.#requestHeaderValues[headerName];\n    }\n    this.#requestHeaderValues[headerName] = this.computeHeaderValue(this.requestHeaders(), headerName);\n    return this.#requestHeaderValues[headerName];\n  }\n\n  requestFormData(): Promise<string|null> {\n    if (!this.#requestFormDataPromise) {\n      this.#requestFormDataPromise = NetworkManager.requestPostData(this);\n    }\n    return this.#requestFormDataPromise;\n  }\n\n  setRequestFormData(hasData: boolean, data: string|null): void {\n    this.#requestFormDataPromise = (hasData && data === null) ? null : Promise.resolve(data);\n    this.#formParametersPromise = null;\n  }\n\n  private filteredProtocolName(): string {\n    const protocol = this.protocol.toLowerCase();\n    if (protocol === 'h2') {\n      return 'http/2.0';\n    }\n    return protocol.replace(/^http\\/2(\\.0)?\\+/, 'http/2.0+');\n  }\n\n  requestHttpVersion(): string {\n    const headersText = this.requestHeadersText();\n    if (!headersText) {\n      const version = this.requestHeaderValue('version') || this.requestHeaderValue(':version');\n      if (version) {\n        return version;\n      }\n      return this.filteredProtocolName();\n    }\n    const firstLine = headersText.split(/\\r\\n/)[0];\n    const match = firstLine.match(/(HTTP\\/\\d+\\.\\d+)$/);\n    return match ? match[1] : 'HTTP/0.9';\n  }\n\n  get responseHeaders(): NameValue[] {\n    return this.#responseHeadersInternal || [];\n  }\n\n  set responseHeaders(x: NameValue[]) {\n    this.#responseHeadersInternal = x;\n    this.#sortedResponseHeadersInternal = undefined;\n    this.#serverTimingsInternal = undefined;\n    this.#responseCookiesInternal = undefined;\n    this.#responseHeaderValues = {};\n\n    this.dispatchEventToListeners(Events.RESPONSE_HEADERS_CHANGED);\n  }\n\n  get earlyHintsHeaders(): NameValue[] {\n    return this.#earlyHintsHeadersInternal || [];\n  }\n\n  set earlyHintsHeaders(x: NameValue[]) {\n    this.#earlyHintsHeadersInternal = x;\n  }\n\n  get originalResponseHeaders(): Protocol.Fetch.HeaderEntry[] {\n    return this.#originalResponseHeaders;\n  }\n\n  set originalResponseHeaders(headers: Protocol.Fetch.HeaderEntry[]) {\n    this.#originalResponseHeaders = headers;\n    this.#sortedOriginalResponseHeaders = undefined;\n  }\n\n  get setCookieHeaders(): Protocol.Fetch.HeaderEntry[] {\n    return this.#setCookieHeaders;\n  }\n\n  set setCookieHeaders(headers: Protocol.Fetch.HeaderEntry[]) {\n    this.#setCookieHeaders = headers;\n  }\n\n  get responseHeadersText(): string {\n    return this.#responseHeadersTextInternal;\n  }\n\n  set responseHeadersText(x: string) {\n    this.#responseHeadersTextInternal = x;\n\n    this.dispatchEventToListeners(Events.RESPONSE_HEADERS_CHANGED);\n  }\n\n  get sortedResponseHeaders(): NameValue[] {\n    if (this.#sortedResponseHeadersInternal !== undefined) {\n      return this.#sortedResponseHeadersInternal;\n    }\n\n    this.#sortedResponseHeadersInternal = this.responseHeaders.slice();\n    return this.#sortedResponseHeadersInternal.sort(function(a, b) {\n      return Platform.StringUtilities.compare(a.name.toLowerCase(), b.name.toLowerCase());\n    });\n  }\n\n  get sortedOriginalResponseHeaders(): NameValue[] {\n    if (this.#sortedOriginalResponseHeaders !== undefined) {\n      return this.#sortedOriginalResponseHeaders;\n    }\n\n    this.#sortedOriginalResponseHeaders = this.originalResponseHeaders.slice();\n    return this.#sortedOriginalResponseHeaders.sort(function(a, b) {\n      return Platform.StringUtilities.compare(a.name.toLowerCase(), b.name.toLowerCase());\n    });\n  }\n\n  get overrideTypes(): OverrideType[] {\n    const types: OverrideType[] = [];\n\n    if (this.hasOverriddenContent) {\n      types.push('content');\n    }\n\n    if (this.hasOverriddenHeaders()) {\n      types.push('headers');\n    }\n\n    return types;\n  }\n\n  get hasOverriddenContent(): boolean {\n    return this.#hasOverriddenContent;\n  }\n\n  set hasOverriddenContent(value: boolean) {\n    this.#hasOverriddenContent = value;\n  }\n\n  #deduplicateHeaders(sortedHeaders: NameValue[]): NameValue[] {\n    const dedupedHeaders: NameValue[] = [];\n    for (const header of sortedHeaders) {\n      if (dedupedHeaders.length && dedupedHeaders[dedupedHeaders.length - 1].name === header.name) {\n        dedupedHeaders[dedupedHeaders.length - 1].value += `, ${header.value}`;\n      } else {\n        dedupedHeaders.push({name: header.name, value: header.value});\n      }\n    }\n    return dedupedHeaders;\n  }\n\n  hasOverriddenHeaders(): boolean {\n    if (!this.#originalResponseHeaders.length) {\n      return false;\n    }\n    const responseHeaders = this.#deduplicateHeaders(this.sortedResponseHeaders);\n    const originalResponseHeaders = this.#deduplicateHeaders(this.sortedOriginalResponseHeaders);\n    if (responseHeaders.length !== originalResponseHeaders.length) {\n      return true;\n    }\n    for (let i = 0; i < responseHeaders.length; i++) {\n      if (responseHeaders[i].name.toLowerCase() !== originalResponseHeaders[i].name.toLowerCase()) {\n        return true;\n      }\n      if (responseHeaders[i].value !== originalResponseHeaders[i].value) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  responseHeaderValue(headerName: string): string|undefined {\n    if (headerName in this.#responseHeaderValues) {\n      return this.#responseHeaderValues[headerName];\n    }\n    this.#responseHeaderValues[headerName] = this.computeHeaderValue(this.responseHeaders, headerName);\n    return this.#responseHeaderValues[headerName];\n  }\n\n  wasIntercepted(): boolean {\n    return this.#wasIntercepted;\n  }\n\n  setWasIntercepted(wasIntercepted: boolean): void {\n    this.#wasIntercepted = wasIntercepted;\n  }\n\n  setEarlyHintsHeaders(headers: NameValue[]): void {\n    this.earlyHintsHeaders = headers;\n  }\n\n  get responseCookies(): Cookie[] {\n    if (!this.#responseCookiesInternal) {\n      this.#responseCookiesInternal =\n          CookieParser.parseSetCookie(this.responseHeaderValue('Set-Cookie'), this.domain) || [];\n      if (this.#responseCookiesPartitionKey) {\n        for (const cookie of this.#responseCookiesInternal) {\n          if (cookie.partitioned()) {\n            cookie.setPartitionKey(\n                this.#responseCookiesPartitionKey.topLevelSite, this.#responseCookiesPartitionKey.hasCrossSiteAncestor);\n          }\n        }\n      } else if (this.#responseCookiesPartitionKeyOpaque) {\n        for (const cookie of this.#responseCookiesInternal) {\n          // Do not check cookie.partitioned() since most opaque partitions\n          // are fenced/credentialless frames partitioned by default.\n          cookie.setPartitionKeyOpaque();\n        }\n      }\n    }\n    return this.#responseCookiesInternal;\n  }\n\n  responseLastModified(): string|undefined {\n    return this.responseHeaderValue('last-modified');\n  }\n\n  allCookiesIncludingBlockedOnes(): Cookie[] {\n    return [\n      ...this.includedRequestCookies().map(includedRequestCookie => includedRequestCookie.cookie),\n      ...this.responseCookies,\n      ...this.blockedRequestCookies().map(blockedRequestCookie => blockedRequestCookie.cookie),\n      ...this.blockedResponseCookies().map(blockedResponseCookie => blockedResponseCookie.cookie),\n    ].filter(v => Boolean(v)) as Cookie[];\n  }\n\n  get serverTimings(): ServerTiming[]|null {\n    if (typeof this.#serverTimingsInternal === 'undefined') {\n      this.#serverTimingsInternal = ServerTiming.parseHeaders(this.responseHeaders);\n    }\n    return this.#serverTimingsInternal;\n  }\n\n  queryString(): string|null {\n    if (this.#queryStringInternal !== undefined) {\n      return this.#queryStringInternal;\n    }\n\n    let queryString: string|null = null;\n    const url = this.url();\n    const questionMarkPosition = url.indexOf('?');\n    if (questionMarkPosition !== -1) {\n      queryString = url.substring(questionMarkPosition + 1);\n      const hashSignPosition = queryString.indexOf('#');\n      if (hashSignPosition !== -1) {\n        queryString = queryString.substring(0, hashSignPosition);\n      }\n    }\n    this.#queryStringInternal = queryString;\n    return this.#queryStringInternal;\n  }\n\n  get queryParameters(): NameValue[]|null {\n    if (this.#parsedQueryParameters) {\n      return this.#parsedQueryParameters;\n    }\n    const queryString = this.queryString();\n    if (!queryString) {\n      return null;\n    }\n    this.#parsedQueryParameters = this.parseParameters(queryString);\n    return this.#parsedQueryParameters;\n  }\n\n  private async parseFormParameters(): Promise<NameValue[]|null> {\n    const requestContentType = this.requestContentType();\n\n    if (!requestContentType) {\n      return null;\n    }\n\n    // Handling application/#x-www-form-urlencoded request bodies.\n    if (requestContentType.match(/^application\\/x-www-form-urlencoded\\s*(;.*)?$/i)) {\n      const formData = await this.requestFormData();\n      if (!formData) {\n        return null;\n      }\n\n      return this.parseParameters(formData);\n    }\n\n    // Handling multipart/form-data request bodies.\n    const multipartDetails = requestContentType.match(/^multipart\\/form-data\\s*;\\s*boundary\\s*=\\s*(\\S+)\\s*$/);\n\n    if (!multipartDetails) {\n      return null;\n    }\n\n    const boundary = multipartDetails[1];\n    if (!boundary) {\n      return null;\n    }\n\n    const formData = await this.requestFormData();\n    if (!formData) {\n      return null;\n    }\n\n    return this.parseMultipartFormDataParameters(formData, boundary);\n  }\n\n  formParameters(): Promise<NameValue[]|null> {\n    if (!this.#formParametersPromise) {\n      this.#formParametersPromise = this.parseFormParameters();\n    }\n    return this.#formParametersPromise;\n  }\n\n  responseHttpVersion(): string {\n    const headersText = this.#responseHeadersTextInternal;\n    if (!headersText) {\n      const version = this.responseHeaderValue('version') || this.responseHeaderValue(':version');\n      if (version) {\n        return version;\n      }\n      return this.filteredProtocolName();\n    }\n    const firstLine = headersText.split(/\\r\\n/)[0];\n    const match = firstLine.match(/^(HTTP\\/\\d+\\.\\d+)/);\n    return match ? match[1] : 'HTTP/0.9';\n  }\n\n  private parseParameters(queryString: string): NameValue[] {\n    function parseNameValue(pair: string): {\n      name: string,\n      value: string,\n    } {\n      const position = pair.indexOf('=');\n      if (position === -1) {\n        return {name: pair, value: ''};\n      }\n      return {name: pair.substring(0, position), value: pair.substring(position + 1)};\n    }\n    return queryString.split('&').map(parseNameValue);\n  }\n\n  /**\n   * Parses multipart/form-data; boundary=boundaryString request bodies -\n   * --boundaryString\n   * Content-Disposition: form-data; #name=\"field-#name\"; filename=\"r.gif\"\n   * Content-Type: application/octet-stream\n   *\n   * optionalValue\n   * --boundaryString\n   * Content-Disposition: form-data; #name=\"field-#name-2\"\n   *\n   * optionalValue2\n   * --boundaryString--\n   */\n  private parseMultipartFormDataParameters(data: string, boundary: string): NameValue[] {\n    const sanitizedBoundary = Platform.StringUtilities.escapeForRegExp(boundary);\n    const keyValuePattern = new RegExp(\n        // Header with an optional file #name.\n        '^\\\\r\\\\ncontent-disposition\\\\s*:\\\\s*form-data\\\\s*;\\\\s*name=\"([^\"]*)\"(?:\\\\s*;\\\\s*filename=\"([^\"]*)\")?' +\n            // Optional secondary header with the content type.\n            '(?:\\\\r\\\\ncontent-type\\\\s*:\\\\s*([^\\\\r\\\\n]*))?' +\n            // Padding.\n            '\\\\r\\\\n\\\\r\\\\n' +\n            // Value\n            '(.*)' +\n            // Padding.\n            '\\\\r\\\\n$',\n        'is');\n    const fields = data.split(new RegExp(`--${sanitizedBoundary}(?:--\\s*$)?`, 'g'));\n    return fields.reduce(parseMultipartField, []);\n\n    function parseMultipartField(result: NameValue[], field: string): NameValue[] {\n      const [match, name, filename, contentType, value] = field.match(keyValuePattern) || [];\n\n      if (!match) {\n        return result;\n      }\n\n      const processedValue = (filename || contentType) ? i18nString(UIStrings.binary) : value;\n      result.push({name, value: processedValue});\n\n      return result;\n    }\n  }\n\n  private computeHeaderValue(headers: NameValue[], headerName: string): string|undefined {\n    headerName = headerName.toLowerCase();\n\n    const values = [];\n    for (let i = 0; i < headers.length; ++i) {\n      if (headers[i].name.toLowerCase() === headerName) {\n        values.push(headers[i].value);\n      }\n    }\n    if (!values.length) {\n      return undefined;\n    }\n    // Set-Cookie #values should be separated by '\\n', not comma, otherwise cookies could not be parsed.\n    if (headerName === 'set-cookie') {\n      return values.join('\\n');\n    }\n    return values.join(', ');\n  }\n\n  requestContentData(): Promise<TextUtils.ContentData.ContentDataOrError> {\n    if (this.#contentDataInternal) {\n      return this.#contentDataInternal;\n    }\n    if (this.#contentDataProvider) {\n      this.#contentDataInternal = this.#contentDataProvider();\n    } else {\n      this.#contentDataInternal = NetworkManager.requestContentData(this);\n    }\n    return this.#contentDataInternal;\n  }\n\n  setContentDataProvider(dataProvider: () => Promise<TextUtils.ContentData.ContentDataOrError>): void {\n    console.assert(!this.#contentDataInternal, 'contentData can only be set once.');\n    this.#contentDataProvider = dataProvider;\n  }\n\n  requestStreamingContent(): Promise<TextUtils.StreamingContentData.StreamingContentDataOrError> {\n    if (this.#streamingContentData) {\n      return this.#streamingContentData;\n    }\n\n    const contentPromise = this.finished ? this.requestContentData() : NetworkManager.streamResponseBody(this);\n    this.#streamingContentData = contentPromise.then(contentData => {\n      if (TextUtils.ContentData.ContentData.isError(contentData)) {\n        return contentData;\n      }\n      // Note that this is save: \"streamResponseBody()\" always creates base64-based ContentData and\n      // for \"contentData()\" we'll never call \"addChunk\".\n      return TextUtils.StreamingContentData.StreamingContentData.from(contentData);\n    });\n\n    return this.#streamingContentData;\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.#urlInternal;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.#resourceTypeInternal;\n  }\n\n  async requestContent(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    return TextUtils.ContentData.ContentData.asDeferredContent(await this.requestContentData());\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    if (!this.#contentDataProvider) {\n      return NetworkManager.searchInRequest(this, query, caseSensitive, isRegex);\n    }\n\n    const contentData = await this.requestContentData();\n    if (TextUtils.ContentData.ContentData.isError(contentData) || !contentData.isTextContent) {\n      return [];\n    }\n    return TextUtils.TextUtils.performSearchInContentData(contentData, query, caseSensitive, isRegex);\n  }\n\n  isHttpFamily(): boolean {\n    return Boolean(this.url().match(/^https?:/i));\n  }\n\n  requestContentType(): string|undefined {\n    return this.requestHeaderValue('Content-Type');\n  }\n\n  hasErrorStatusCode(): boolean {\n    return this.statusCode >= 400;\n  }\n\n  setInitialPriority(priority: Protocol.Network.ResourcePriority): void {\n    this.#initialPriorityInternal = priority;\n  }\n\n  initialPriority(): Protocol.Network.ResourcePriority|null {\n    return this.#initialPriorityInternal;\n  }\n\n  setPriority(priority: Protocol.Network.ResourcePriority): void {\n    this.#currentPriority = priority;\n  }\n\n  priority(): Protocol.Network.ResourcePriority|null {\n    return this.#currentPriority || this.#initialPriorityInternal || null;\n  }\n\n  setSignedExchangeInfo(info: Protocol.Network.SignedExchangeInfo): void {\n    this.#signedExchangeInfoInternal = info;\n  }\n\n  signedExchangeInfo(): Protocol.Network.SignedExchangeInfo|null {\n    return this.#signedExchangeInfoInternal;\n  }\n\n  setWebBundleInfo(info: WebBundleInfo|null): void {\n    this.#webBundleInfoInternal = info;\n  }\n\n  webBundleInfo(): WebBundleInfo|null {\n    return this.#webBundleInfoInternal;\n  }\n\n  setWebBundleInnerRequestInfo(info: WebBundleInnerRequestInfo|null): void {\n    this.#webBundleInnerRequestInfoInternal = info;\n  }\n\n  webBundleInnerRequestInfo(): WebBundleInnerRequestInfo|null {\n    return this.#webBundleInnerRequestInfoInternal;\n  }\n\n  async populateImageSource(image: HTMLImageElement): Promise<void> {\n    const contentData = await this.requestContentData();\n    if (TextUtils.ContentData.ContentData.isError(contentData)) {\n      return;\n    }\n    let imageSrc = contentData.asDataUrl();\n    if (imageSrc === null && !this.#failedInternal) {\n      const cacheControl = this.responseHeaderValue('cache-control') || '';\n      if (!cacheControl.includes('no-cache')) {\n        imageSrc = this.#urlInternal;\n      }\n    }\n    if (imageSrc !== null) {\n      image.src = imageSrc;\n    }\n  }\n\n  initiator(): Protocol.Network.Initiator|null {\n    return this.#initiatorInternal || null;\n  }\n\n  hasUserGesture(): boolean|null {\n    return this.#hasUserGesture ?? null;\n  }\n\n  frames(): WebSocketFrame[] {\n    return this.#framesInternal;\n  }\n\n  addProtocolFrameError(errorMessage: string, time: number): void {\n    this.addFrame(\n        {type: WebSocketFrameType.Error, text: errorMessage, time: this.pseudoWallTime(time), opCode: -1, mask: false});\n  }\n\n  addProtocolFrame(response: Protocol.Network.WebSocketFrame, time: number, sent: boolean): void {\n    const type = sent ? WebSocketFrameType.Send : WebSocketFrameType.Receive;\n    this.addFrame({\n      type,\n      text: response.payloadData,\n      time: this.pseudoWallTime(time),\n      opCode: response.opcode,\n      mask: response.mask,\n    });\n  }\n\n  addFrame(frame: WebSocketFrame): void {\n    this.#framesInternal.push(frame);\n    this.dispatchEventToListeners(Events.WEBSOCKET_FRAME_ADDED, frame);\n  }\n\n  eventSourceMessages(): readonly EventSourceMessage[] {\n    return this.#serverSentEvents?.eventSourceMessages ?? [];\n  }\n\n  addEventSourceMessage(time: number, eventName: string, eventId: string, data: string): void {\n    this.#serverSentEvents?.onProtocolEventSourceMessageReceived(eventName, data, eventId, this.pseudoWallTime(time));\n  }\n\n  markAsRedirect(redirectCount: number): void {\n    this.#isRedirectInternal = true;\n    this.#requestIdInternal = `${this.#backendRequestIdInternal}:redirected.${redirectCount}`;\n  }\n\n  isRedirect(): boolean {\n    return this.#isRedirectInternal;\n  }\n\n  setRequestIdForTest(requestId: Protocol.Network.RequestId): void {\n    this.#backendRequestIdInternal = requestId;\n    this.#requestIdInternal = requestId;\n  }\n\n  charset(): string|null {\n    return this.#charset ?? null;\n  }\n\n  setCharset(charset: string): void {\n    this.#charset = charset;\n  }\n\n  addExtraRequestInfo(extraRequestInfo: ExtraRequestInfo): void {\n    this.#blockedRequestCookiesInternal = extraRequestInfo.blockedRequestCookies;\n    this.#includedRequestCookiesInternal = extraRequestInfo.includedRequestCookies;\n    this.setRequestHeaders(extraRequestInfo.requestHeaders);\n    this.#hasExtraRequestInfoInternal = true;\n    this.setRequestHeadersText('');  // Mark request headers as non-provisional\n    this.#clientSecurityStateInternal = extraRequestInfo.clientSecurityState;\n    this.setConnectTimingFromExtraInfo(extraRequestInfo.connectTiming);\n    this.#siteHasCookieInOtherPartition = extraRequestInfo.siteHasCookieInOtherPartition ?? false;\n\n    this.#hasThirdPartyCookiePhaseoutIssue = this.#blockedRequestCookiesInternal.some(\n        item => item.blockedReasons.includes(Protocol.Network.CookieBlockedReason.ThirdPartyPhaseout));\n  }\n\n  hasExtraRequestInfo(): boolean {\n    return this.#hasExtraRequestInfoInternal;\n  }\n\n  blockedRequestCookies(): BlockedCookieWithReason[] {\n    return this.#blockedRequestCookiesInternal;\n  }\n\n  includedRequestCookies(): IncludedCookieWithReason[] {\n    return this.#includedRequestCookiesInternal;\n  }\n\n  hasRequestCookies(): boolean {\n    return this.#includedRequestCookiesInternal.length > 0 || this.#blockedRequestCookiesInternal.length > 0;\n  }\n\n  siteHasCookieInOtherPartition(): boolean {\n    return this.#siteHasCookieInOtherPartition;\n  }\n\n  // Parse the status text from the first line of the response headers text.\n  // See net::HttpResponseHeaders::GetStatusText.\n  static parseStatusTextFromResponseHeadersText(responseHeadersText: string): string {\n    const firstLineParts = responseHeadersText.split('\\r')[0].split(' ');\n    return firstLineParts.slice(2).join(' ');\n  }\n\n  addExtraResponseInfo(extraResponseInfo: ExtraResponseInfo): void {\n    this.#blockedResponseCookiesInternal = extraResponseInfo.blockedResponseCookies;\n    if (extraResponseInfo.exemptedResponseCookies) {\n      this.#exemptedResponseCookiesInternal = extraResponseInfo.exemptedResponseCookies;\n    }\n    this.#responseCookiesPartitionKey =\n        extraResponseInfo.cookiePartitionKey ? extraResponseInfo.cookiePartitionKey : null;\n    this.#responseCookiesPartitionKeyOpaque = extraResponseInfo.cookiePartitionKeyOpaque || null;\n    this.responseHeaders = extraResponseInfo.responseHeaders;\n    // We store a copy of the headers we initially received, so that after\n    // potential header overrides, we can compare actual with original headers.\n    this.originalResponseHeaders = extraResponseInfo.responseHeaders.map(headerEntry => ({...headerEntry}));\n\n    if (extraResponseInfo.responseHeadersText) {\n      this.responseHeadersText = extraResponseInfo.responseHeadersText;\n\n      if (!this.requestHeadersText()) {\n        // Generate request headers text from raw headers in extra request info because\n        // Network.requestWillBeSentExtraInfo doesn't include headers text.\n        let requestHeadersText = `${this.requestMethod} ${this.parsedURL.path}`;\n        if (this.parsedURL.queryParams) {\n          requestHeadersText += `?${this.parsedURL.queryParams}`;\n        }\n        requestHeadersText += ' HTTP/1.1\\r\\n';\n\n        for (const {name, value} of this.requestHeaders()) {\n          requestHeadersText += `${name}: ${value}\\r\\n`;\n        }\n        this.setRequestHeadersText(requestHeadersText);\n      }\n\n      this.statusText = NetworkRequest.parseStatusTextFromResponseHeadersText(extraResponseInfo.responseHeadersText);\n    }\n    this.#remoteAddressSpaceInternal = extraResponseInfo.resourceIPAddressSpace;\n\n    if (extraResponseInfo.statusCode) {\n      this.statusCode = extraResponseInfo.statusCode;\n    }\n\n    this.#hasExtraResponseInfoInternal = true;\n\n    // TODO(crbug.com/1252463) Explore replacing this with a DevTools Issue.\n    const networkManager = NetworkManager.forRequest(this);\n    if (!networkManager) {\n      return;\n    }\n    for (const blockedCookie of this.#blockedResponseCookiesInternal) {\n      if (blockedCookie.blockedReasons.includes(Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize)) {\n        const message = i18nString(UIStrings.setcookieHeaderIsIgnoredIn, {PH1: this.url()});\n        networkManager.dispatchEventToListeners(\n            NetworkManagerEvents.MessageGenerated, {message, requestId: this.#requestIdInternal, warning: true});\n      }\n    }\n\n    const cookieModel = networkManager.target().model(CookieModel);\n    if (!cookieModel) {\n      return;\n    }\n    for (const exemptedCookie of this.#exemptedResponseCookiesInternal) {\n      cookieModel.removeBlockedCookie(exemptedCookie.cookie);\n    }\n    for (const blockedCookie of this.#blockedResponseCookiesInternal) {\n      const cookie = blockedCookie.cookie;\n      if (!cookie) {\n        continue;\n      }\n      if (blockedCookie.blockedReasons.includes(Protocol.Network.SetCookieBlockedReason.ThirdPartyPhaseout)) {\n        this.#hasThirdPartyCookiePhaseoutIssue = true;\n      }\n      cookieModel.addBlockedCookie(\n          cookie, blockedCookie.blockedReasons.map(blockedReason => ({\n                                                     attribute: setCookieBlockedReasonToAttribute(blockedReason),\n                                                     uiString: setCookieBlockedReasonToUiString(blockedReason),\n                                                   })));\n    }\n  }\n\n  hasExtraResponseInfo(): boolean {\n    return this.#hasExtraResponseInfoInternal;\n  }\n\n  blockedResponseCookies(): BlockedSetCookieWithReason[] {\n    return this.#blockedResponseCookiesInternal;\n  }\n\n  exemptedResponseCookies(): ExemptedSetCookieWithReason[] {\n    return this.#exemptedResponseCookiesInternal;\n  }\n\n  nonBlockedResponseCookies(): Cookie[] {\n    const blockedCookieLines: (string|null)[] =\n        this.blockedResponseCookies().map(blockedCookie => blockedCookie.cookieLine);\n    // Use array and remove 1 by 1 to handle the (potential) case of multiple\n    // identical cookies, only some of which are blocked.\n    const responseCookies = this.responseCookies.filter(cookie => {\n      const index = blockedCookieLines.indexOf(cookie.getCookieLine());\n      if (index !== -1) {\n        blockedCookieLines[index] = null;\n        return false;\n      }\n      return true;\n    });\n    return responseCookies;\n  }\n\n  responseCookiesPartitionKey(): Protocol.Network.CookiePartitionKey|null {\n    return this.#responseCookiesPartitionKey;\n  }\n\n  responseCookiesPartitionKeyOpaque(): boolean|null {\n    return this.#responseCookiesPartitionKeyOpaque;\n  }\n\n  redirectSourceSignedExchangeInfoHasNoErrors(): boolean {\n    return this.#redirectSourceInternal !== null && this.#redirectSourceInternal.#signedExchangeInfoInternal !== null &&\n        !this.#redirectSourceInternal.#signedExchangeInfoInternal.errors;\n  }\n\n  clientSecurityState(): Protocol.Network.ClientSecurityState|undefined {\n    return this.#clientSecurityStateInternal;\n  }\n\n  setTrustTokenParams(trustTokenParams: Protocol.Network.TrustTokenParams): void {\n    this.#trustTokenParamsInternal = trustTokenParams;\n  }\n\n  trustTokenParams(): Protocol.Network.TrustTokenParams|undefined {\n    return this.#trustTokenParamsInternal;\n  }\n\n  setTrustTokenOperationDoneEvent(doneEvent: Protocol.Network.TrustTokenOperationDoneEvent): void {\n    this.#trustTokenOperationDoneEventInternal = doneEvent;\n\n    this.dispatchEventToListeners(Events.TRUST_TOKEN_RESULT_ADDED);\n  }\n\n  trustTokenOperationDoneEvent(): Protocol.Network.TrustTokenOperationDoneEvent|undefined {\n    return this.#trustTokenOperationDoneEventInternal;\n  }\n\n  setIsSameSite(isSameSite: boolean): void {\n    this.#isSameSiteInternal = isSameSite;\n  }\n\n  isSameSite(): boolean|null {\n    return this.#isSameSiteInternal;\n  }\n\n  getAssociatedData(key: string): object|null {\n    return this.#associatedData.get(key) || null;\n  }\n\n  setAssociatedData(key: string, data: object): void {\n    this.#associatedData.set(key, data);\n  }\n\n  deleteAssociatedData(key: string): void {\n    this.#associatedData.delete(key);\n  }\n\n  hasThirdPartyCookiePhaseoutIssue(): boolean {\n    return this.#hasThirdPartyCookiePhaseoutIssue;\n  }\n\n  addDataReceivedEvent({timestamp, dataLength, encodedDataLength, data}: Protocol.Network.DataReceivedEvent): void {\n    this.resourceSize += dataLength;\n    if (encodedDataLength !== -1) {\n      this.increaseTransferSize(encodedDataLength);\n    }\n    this.endTime = timestamp;\n    if (data) {\n      void this.#streamingContentData?.then(contentData => {\n        if (!TextUtils.StreamingContentData.isError(contentData)) {\n          contentData.addChunk(data);\n        }\n      });\n    }\n  }\n\n  waitForResponseReceived(): Promise<void> {\n    if (this.responseReceivedPromise) {\n      return this.responseReceivedPromise;\n    }\n    const {promise, resolve} = Promise.withResolvers<void>();\n    this.responseReceivedPromise = promise;\n    this.responseReceivedPromiseResolve = resolve;\n    return this.responseReceivedPromise;\n  }\n}\n\nexport enum Events {\n  FINISHED_LOADING = 'FinishedLoading',\n  TIMING_CHANGED = 'TimingChanged',\n  REMOTE_ADDRESS_CHANGED = 'RemoteAddressChanged',\n  REQUEST_HEADERS_CHANGED = 'RequestHeadersChanged',\n  RESPONSE_HEADERS_CHANGED = 'ResponseHeadersChanged',\n  WEBSOCKET_FRAME_ADDED = 'WebsocketFrameAdded',\n  EVENT_SOURCE_MESSAGE_ADDED = 'EventSourceMessageAdded',\n  TRUST_TOKEN_RESULT_ADDED = 'TrustTokenResultAdded',\n}\n\nexport type EventTypes = {\n  [Events.FINISHED_LOADING]: NetworkRequest,\n  [Events.TIMING_CHANGED]: NetworkRequest,\n  [Events.REMOTE_ADDRESS_CHANGED]: NetworkRequest,\n  [Events.REQUEST_HEADERS_CHANGED]: void,\n  [Events.RESPONSE_HEADERS_CHANGED]: void,\n  [Events.WEBSOCKET_FRAME_ADDED]: WebSocketFrame,\n  [Events.EVENT_SOURCE_MESSAGE_ADDED]: EventSourceMessage,\n  [Events.TRUST_TOKEN_RESULT_ADDED]: void,\n};\n\nexport const enum InitiatorType {\n  OTHER = 'other',\n  PARSER = 'parser',\n  REDIRECT = 'redirect',\n  SCRIPT = 'script',\n  PRELOAD = 'preload',\n  SIGNED_EXCHANGE = 'signedExchange',\n  PREFLIGHT = 'preflight',\n}\n\nexport enum WebSocketFrameType {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  Send = 'send',\n  Receive = 'receive',\n  Error = 'error',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport const cookieExemptionReasonToUiString = function(exemptionReason: Protocol.Network.CookieExemptionReason):\n    string {\n      switch (exemptionReason) {\n        case Protocol.Network.CookieExemptionReason.UserSetting:\n          return i18nString(UIStrings.exemptionReasonUserSetting);\n        case Protocol.Network.CookieExemptionReason.TPCDMetadata:\n          return i18nString(UIStrings.exemptionReasonTPCDMetadata);\n        case Protocol.Network.CookieExemptionReason.TopLevelTPCDDeprecationTrial:\n          return i18nString(UIStrings.exemptionReasonTopLevelTPCDDeprecationTrial);\n        case Protocol.Network.CookieExemptionReason.TPCDDeprecationTrial:\n          return i18nString(UIStrings.exemptionReasonTPCDDeprecationTrial);\n        case Protocol.Network.CookieExemptionReason.TPCDHeuristics:\n          return i18nString(UIStrings.exemptionReasonTPCDHeuristics);\n        case Protocol.Network.CookieExemptionReason.EnterprisePolicy:\n          return i18nString(UIStrings.exemptionReasonEnterprisePolicy);\n        case Protocol.Network.CookieExemptionReason.StorageAccess:\n          return i18nString(UIStrings.exemptionReasonStorageAccessAPI);\n        case Protocol.Network.CookieExemptionReason.TopLevelStorageAccess:\n          return i18nString(UIStrings.exemptionReasonTopLevelStorageAccessAPI);\n        case Protocol.Network.CookieExemptionReason.Scheme:\n          return i18nString(UIStrings.exemptionReasonScheme);\n      }\n      return '';\n    };\n\nexport const cookieBlockedReasonToUiString = function(blockedReason: Protocol.Network.CookieBlockedReason): string {\n  switch (blockedReason) {\n    case Protocol.Network.CookieBlockedReason.SecureOnly:\n      return i18nString(UIStrings.secureOnly);\n    case Protocol.Network.CookieBlockedReason.NotOnPath:\n      return i18nString(UIStrings.notOnPath);\n    case Protocol.Network.CookieBlockedReason.DomainMismatch:\n      return i18nString(UIStrings.domainMismatch);\n    case Protocol.Network.CookieBlockedReason.SameSiteStrict:\n      return i18nString(UIStrings.sameSiteStrict);\n    case Protocol.Network.CookieBlockedReason.SameSiteLax:\n      return i18nString(UIStrings.sameSiteLax);\n    case Protocol.Network.CookieBlockedReason.SameSiteUnspecifiedTreatedAsLax:\n      return i18nString(UIStrings.sameSiteUnspecifiedTreatedAsLax);\n    case Protocol.Network.CookieBlockedReason.SameSiteNoneInsecure:\n      return i18nString(UIStrings.sameSiteNoneInsecure);\n    case Protocol.Network.CookieBlockedReason.UserPreferences:\n      return i18nString(UIStrings.userPreferences);\n    case Protocol.Network.CookieBlockedReason.UnknownError:\n      return i18nString(UIStrings.unknownError);\n    case Protocol.Network.CookieBlockedReason.SchemefulSameSiteStrict:\n      return i18nString(UIStrings.schemefulSameSiteStrict);\n    case Protocol.Network.CookieBlockedReason.SchemefulSameSiteLax:\n      return i18nString(UIStrings.schemefulSameSiteLax);\n    case Protocol.Network.CookieBlockedReason.SchemefulSameSiteUnspecifiedTreatedAsLax:\n      return i18nString(UIStrings.schemefulSameSiteUnspecifiedTreatedAsLax);\n    case Protocol.Network.CookieBlockedReason.SamePartyFromCrossPartyContext:\n      return i18nString(UIStrings.samePartyFromCrossPartyContext);\n    case Protocol.Network.CookieBlockedReason.NameValuePairExceedsMaxSize:\n      return i18nString(UIStrings.nameValuePairExceedsMaxSize);\n    case Protocol.Network.CookieBlockedReason.ThirdPartyPhaseout:\n      return i18nString(UIStrings.thirdPartyPhaseout);\n  }\n  return '';\n};\n\nexport const setCookieBlockedReasonToUiString = function(\n    blockedReason: Protocol.Network.SetCookieBlockedReason): string {\n  switch (blockedReason) {\n    case Protocol.Network.SetCookieBlockedReason.SecureOnly:\n      return i18nString(UIStrings.blockedReasonSecureOnly);\n    case Protocol.Network.SetCookieBlockedReason.SameSiteStrict:\n      return i18nString(UIStrings.blockedReasonSameSiteStrictLax, {PH1: 'SameSite=Strict'});\n    case Protocol.Network.SetCookieBlockedReason.SameSiteLax:\n      return i18nString(UIStrings.blockedReasonSameSiteStrictLax, {PH1: 'SameSite=Lax'});\n    case Protocol.Network.SetCookieBlockedReason.SameSiteUnspecifiedTreatedAsLax:\n      return i18nString(UIStrings.blockedReasonSameSiteUnspecifiedTreatedAsLax);\n    case Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure:\n      return i18nString(UIStrings.blockedReasonSameSiteNoneInsecure);\n    case Protocol.Network.SetCookieBlockedReason.UserPreferences:\n      return i18nString(UIStrings.thisSetcookieWasBlockedDueToUser);\n    case Protocol.Network.SetCookieBlockedReason.SyntaxError:\n      return i18nString(UIStrings.thisSetcookieHadInvalidSyntax);\n    case Protocol.Network.SetCookieBlockedReason.SchemeNotSupported:\n      return i18nString(UIStrings.theSchemeOfThisConnectionIsNot);\n    case Protocol.Network.SetCookieBlockedReason.OverwriteSecure:\n      return i18nString(UIStrings.blockedReasonOverwriteSecure);\n    case Protocol.Network.SetCookieBlockedReason.InvalidDomain:\n      return i18nString(UIStrings.blockedReasonInvalidDomain);\n    case Protocol.Network.SetCookieBlockedReason.InvalidPrefix:\n      return i18nString(UIStrings.blockedReasonInvalidPrefix);\n    case Protocol.Network.SetCookieBlockedReason.UnknownError:\n      return i18nString(UIStrings.anUnknownErrorWasEncounteredWhenTrying);\n    case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteStrict:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseItHadTheSamesiteStrictLax, {PH1: 'SameSite=Strict'});\n    case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteLax:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseItHadTheSamesiteStrictLax, {PH1: 'SameSite=Lax'});\n    case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteUnspecifiedTreatedAsLax:\n      return i18nString(UIStrings.thisSetcookieDidntSpecifyASamesite);\n    case Protocol.Network.SetCookieBlockedReason.SamePartyFromCrossPartyContext:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseItHadTheSameparty);\n    case Protocol.Network.SetCookieBlockedReason.SamePartyConflictsWithOtherAttributes:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseItHadTheSamepartyAttribute);\n    case Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseTheNameValuePairExceedsMaxSize);\n    case Protocol.Network.SetCookieBlockedReason.DisallowedCharacter:\n      return i18nString(UIStrings.thisSetcookieHadADisallowedCharacter);\n    case Protocol.Network.SetCookieBlockedReason.ThirdPartyPhaseout:\n      return i18nString(UIStrings.thisSetcookieWasBlockedDueThirdPartyPhaseout);\n  }\n  return '';\n};\n\nexport const cookieBlockedReasonToAttribute = function(blockedReason: Protocol.Network.CookieBlockedReason): Attribute|\n    null {\n      switch (blockedReason) {\n        case Protocol.Network.CookieBlockedReason.SecureOnly:\n          return Attribute.SECURE;\n        case Protocol.Network.CookieBlockedReason.NotOnPath:\n          return Attribute.PATH;\n        case Protocol.Network.CookieBlockedReason.DomainMismatch:\n          return Attribute.DOMAIN;\n        case Protocol.Network.CookieBlockedReason.SameSiteStrict:\n        case Protocol.Network.CookieBlockedReason.SameSiteLax:\n        case Protocol.Network.CookieBlockedReason.SameSiteUnspecifiedTreatedAsLax:\n        case Protocol.Network.CookieBlockedReason.SameSiteNoneInsecure:\n        case Protocol.Network.CookieBlockedReason.SchemefulSameSiteStrict:\n        case Protocol.Network.CookieBlockedReason.SchemefulSameSiteLax:\n        case Protocol.Network.CookieBlockedReason.SchemefulSameSiteUnspecifiedTreatedAsLax:\n          return Attribute.SAME_SITE;\n        case Protocol.Network.CookieBlockedReason.SamePartyFromCrossPartyContext:\n        case Protocol.Network.CookieBlockedReason.NameValuePairExceedsMaxSize:\n        case Protocol.Network.CookieBlockedReason.UserPreferences:\n        case Protocol.Network.CookieBlockedReason.ThirdPartyPhaseout:\n        case Protocol.Network.CookieBlockedReason.UnknownError:\n          return null;\n      }\n      return null;\n    };\n\nexport const setCookieBlockedReasonToAttribute = function(blockedReason: Protocol.Network.SetCookieBlockedReason):\n    Attribute|null {\n      switch (blockedReason) {\n        case Protocol.Network.SetCookieBlockedReason.SecureOnly:\n        case Protocol.Network.SetCookieBlockedReason.OverwriteSecure:\n          return Attribute.SECURE;\n        case Protocol.Network.SetCookieBlockedReason.SameSiteStrict:\n        case Protocol.Network.SetCookieBlockedReason.SameSiteLax:\n        case Protocol.Network.SetCookieBlockedReason.SameSiteUnspecifiedTreatedAsLax:\n        case Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure:\n        case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteStrict:\n        case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteLax:\n        case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteUnspecifiedTreatedAsLax:\n          return Attribute.SAME_SITE;\n        case Protocol.Network.SetCookieBlockedReason.InvalidDomain:\n          return Attribute.DOMAIN;\n        case Protocol.Network.SetCookieBlockedReason.InvalidPrefix:\n          return Attribute.NAME;\n        case Protocol.Network.SetCookieBlockedReason.SamePartyConflictsWithOtherAttributes:\n        case Protocol.Network.SetCookieBlockedReason.SamePartyFromCrossPartyContext:\n        case Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize:\n        case Protocol.Network.SetCookieBlockedReason.UserPreferences:\n        case Protocol.Network.SetCookieBlockedReason.ThirdPartyPhaseout:\n        case Protocol.Network.SetCookieBlockedReason.SyntaxError:\n        case Protocol.Network.SetCookieBlockedReason.SchemeNotSupported:\n        case Protocol.Network.SetCookieBlockedReason.UnknownError:\n        case Protocol.Network.SetCookieBlockedReason.DisallowedCharacter:\n          return null;\n      }\n      return null;\n    };\n\nexport interface NameValue {\n  name: string;\n  value: string;\n}\n\nexport interface WebSocketFrame {\n  type: WebSocketFrameType;\n  time: number;\n  text: string;\n  opCode: number;\n  mask: boolean;\n}\n\nexport interface BlockedSetCookieWithReason {\n  blockedReasons: Protocol.Network.SetCookieBlockedReason[];\n  cookieLine: string;\n  cookie: Cookie|null;\n}\n\nexport interface BlockedCookieWithReason {\n  cookie: Cookie;\n  blockedReasons: Protocol.Network.CookieBlockedReason[];\n}\n\nexport interface IncludedCookieWithReason {\n  cookie: Cookie;\n  exemptionReason: Protocol.Network.CookieExemptionReason|undefined;\n}\n\nexport interface ExemptedSetCookieWithReason {\n  cookie: Cookie;\n  cookieLine: string;\n  exemptionReason: Protocol.Network.CookieExemptionReason;\n}\n\nexport interface EventSourceMessage {\n  time: number;\n  eventName: string;\n  eventId: string;\n  data: string;\n}\n\nexport interface ExtraRequestInfo {\n  blockedRequestCookies: {\n    blockedReasons: Protocol.Network.CookieBlockedReason[],\n    cookie: Cookie,\n  }[];\n  requestHeaders: NameValue[];\n  includedRequestCookies: IncludedCookieWithReason[];\n  clientSecurityState?: Protocol.Network.ClientSecurityState;\n  connectTiming: Protocol.Network.ConnectTiming;\n  siteHasCookieInOtherPartition?: boolean;\n}\n\nexport interface ExtraResponseInfo {\n  blockedResponseCookies: {\n    blockedReasons: Protocol.Network.SetCookieBlockedReason[],\n    cookieLine: string,\n    cookie: Cookie|null,\n  }[];\n  responseHeaders: NameValue[];\n  responseHeadersText?: string;\n  resourceIPAddressSpace: Protocol.Network.IPAddressSpace;\n  statusCode: number|undefined;\n  cookiePartitionKey?: Protocol.Network.CookiePartitionKey;\n  cookiePartitionKeyOpaque: boolean|undefined;\n  exemptedResponseCookies: {\n    cookie: Cookie,\n    cookieLine: string,\n    exemptionReason: Protocol.Network.CookieExemptionReason,\n  }[]|undefined;\n}\n\nexport interface EarlyHintsInfo {\n  responseHeaders: NameValue[];\n}\n\nexport interface WebBundleInfo {\n  resourceUrls?: Platform.DevToolsPath.UrlString[];\n  errorMessage?: string;\n}\n\nexport interface WebBundleInnerRequestInfo {\n  bundleRequestId?: string;\n  errorMessage?: string;\n}\n\nexport type OverrideType = 'content'|'headers';\n"],
  "mappings": "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",
  "names": ["formData", "Events", "InitiatorType", "WebSocketFrameType"]
}
