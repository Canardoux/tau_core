{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/CSSStyleDeclaration.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport {cssMetadata} from './CSSMetadata.js';\nimport type {CSSModel, Edit} from './CSSModel.js';\nimport {CSSProperty} from './CSSProperty.js';\nimport type {CSSRule} from './CSSRule.js';\nimport type {Target} from './Target.js';\n\nexport class CSSStyleDeclaration {\n  readonly #cssModelInternal: CSSModel;\n  parentRule: CSSRule|null;\n  #allPropertiesInternal!: CSSProperty[];\n  styleSheetId!: Protocol.CSS.StyleSheetId|undefined;\n  range!: TextUtils.TextRange.TextRange|null;\n  cssText!: string|undefined;\n  #shorthandValues!: Map<string, string>;\n  #shorthandIsImportant!: Set<string>;\n  #activePropertyMap!: Map<string, CSSProperty>;\n  #leadingPropertiesInternal!: CSSProperty[]|null;\n  type: Type;\n  constructor(cssModel: CSSModel, parentRule: CSSRule|null, payload: Protocol.CSS.CSSStyle, type: Type) {\n    this.#cssModelInternal = cssModel;\n    this.parentRule = parentRule;\n    this.#reinitialize(payload);\n    this.type = type;\n  }\n\n  rebase(edit: Edit): void {\n    if (this.styleSheetId !== edit.styleSheetId || !this.range) {\n      return;\n    }\n    if (edit.oldRange.equal(this.range)) {\n      this.#reinitialize((edit.payload as Protocol.CSS.CSSStyle));\n    } else {\n      this.range = this.range.rebaseAfterTextEdit(edit.oldRange, edit.newRange);\n      for (let i = 0; i < this.#allPropertiesInternal.length; ++i) {\n        this.#allPropertiesInternal[i].rebase(edit);\n      }\n    }\n  }\n\n  #reinitialize(payload: Protocol.CSS.CSSStyle): void {\n    this.styleSheetId = payload.styleSheetId;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n\n    const shorthandEntries = payload.shorthandEntries;\n    this.#shorthandValues = new Map();\n    this.#shorthandIsImportant = new Set();\n    for (let i = 0; i < shorthandEntries.length; ++i) {\n      this.#shorthandValues.set(shorthandEntries[i].name, shorthandEntries[i].value);\n      if (shorthandEntries[i].important) {\n        this.#shorthandIsImportant.add(shorthandEntries[i].name);\n      }\n    }\n\n    this.#allPropertiesInternal = [];\n\n    if (payload.cssText && this.range) {\n      const longhands = [];\n      for (const cssProperty of payload.cssProperties) {\n        const range = cssProperty.range;\n        if (!range) {\n          continue;\n        }\n        const parsedProperty = CSSProperty.parsePayload(this, this.#allPropertiesInternal.length, cssProperty);\n        this.#allPropertiesInternal.push(parsedProperty);\n        for (const longhand of parsedProperty.getLonghandProperties()) {\n          longhands.push(longhand);\n        }\n      }\n      for (const longhand of longhands) {\n        longhand.index = this.#allPropertiesInternal.length;\n        this.#allPropertiesInternal.push(longhand);\n      }\n    } else {\n      for (const cssProperty of payload.cssProperties) {\n        this.#allPropertiesInternal.push(\n            CSSProperty.parsePayload(this, this.#allPropertiesInternal.length, cssProperty));\n      }\n    }\n\n    this.#generateSyntheticPropertiesIfNeeded();\n    this.#computeInactiveProperties();\n\n    // TODO(changhaohan): verify if this #activePropertyMap is still necessary, or if it is\n    // providing different information against the activeness in allPropertiesInternal.\n    this.#activePropertyMap = new Map();\n    for (const property of this.#allPropertiesInternal) {\n      if (!property.activeInStyle()) {\n        continue;\n      }\n      this.#activePropertyMap.set(property.name, property);\n    }\n\n    this.cssText = payload.cssText;\n    this.#leadingPropertiesInternal = null;\n  }\n\n  #generateSyntheticPropertiesIfNeeded(): void {\n    if (this.range) {\n      return;\n    }\n\n    if (!this.#shorthandValues.size) {\n      return;\n    }\n\n    const propertiesSet = new Set<string>();\n    for (const property of this.#allPropertiesInternal) {\n      propertiesSet.add(property.name);\n    }\n\n    const generatedProperties = [];\n    // For style-based properties, generate #shorthands with values when possible.\n    for (const property of this.#allPropertiesInternal) {\n      // For style-based properties, try generating #shorthands.\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      for (const shorthand of shorthands) {\n        if (propertiesSet.has(shorthand)) {\n          continue;\n        }  // There already is a shorthand this #longhand falls under.\n        const shorthandValue = this.#shorthandValues.get(shorthand);\n        if (!shorthandValue) {\n          continue;\n        }  // Never generate synthetic #shorthands when no value is available.\n\n        // Generate synthetic shorthand we have a value for.\n        const shorthandImportance = Boolean(this.#shorthandIsImportant.has(shorthand));\n        const shorthandProperty = new CSSProperty(\n            this, this.allProperties().length, shorthand, shorthandValue, shorthandImportance, false, true, false);\n        generatedProperties.push(shorthandProperty);\n        propertiesSet.add(shorthand);\n      }\n    }\n    this.#allPropertiesInternal = this.#allPropertiesInternal.concat(generatedProperties);\n  }\n\n  #computeLeadingProperties(): CSSProperty[] {\n    function propertyHasRange(property: CSSProperty): boolean {\n      return Boolean(property.range);\n    }\n\n    if (this.range) {\n      return this.#allPropertiesInternal.filter(propertyHasRange);\n    }\n\n    const leadingProperties = [];\n    for (const property of this.#allPropertiesInternal) {\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      let belongToAnyShorthand = false;\n      for (const shorthand of shorthands) {\n        if (this.#shorthandValues.get(shorthand)) {\n          belongToAnyShorthand = true;\n          break;\n        }\n      }\n      if (!belongToAnyShorthand) {\n        leadingProperties.push(property);\n      }\n    }\n\n    return leadingProperties;\n  }\n\n  leadingProperties(): CSSProperty[] {\n    if (!this.#leadingPropertiesInternal) {\n      this.#leadingPropertiesInternal = this.#computeLeadingProperties();\n    }\n    return this.#leadingPropertiesInternal;\n  }\n\n  target(): Target {\n    return this.#cssModelInternal.target();\n  }\n\n  cssModel(): CSSModel {\n    return this.#cssModelInternal;\n  }\n\n  #computeInactiveProperties(): void {\n    const activeProperties = new Map<string, CSSProperty>();\n    // The order of the properties are:\n    // 1. regular property, including shorthands\n    // 2. longhand components from shorthands, in the order of their shorthands.\n    const processedLonghands = new Set();\n    for (const property of this.#allPropertiesInternal) {\n      const metadata = cssMetadata();\n      const canonicalName = metadata.canonicalPropertyName(property.name);\n      if (property.disabled || !property.parsedOk) {\n        if (!property.disabled && metadata.isCustomProperty(property.name)) {\n          // Variable declarations that aren't parsedOk still \"overload\" other previous active declarations.\n          activeProperties.get(canonicalName)?.setActive(false);\n          activeProperties.delete(canonicalName);\n        }\n        property.setActive(false);\n        continue;\n      }\n      if (processedLonghands.has(property)) {\n        continue;\n      }\n      for (const longhand of property.getLonghandProperties()) {\n        const activeLonghand = activeProperties.get(longhand.name);\n        if (!activeLonghand) {\n          activeProperties.set(longhand.name, longhand);\n        } else if (!activeLonghand.important || longhand.important) {\n          activeLonghand.setActive(false);\n          activeProperties.set(longhand.name, longhand);\n        } else {\n          longhand.setActive(false);\n        }\n        processedLonghands.add(longhand);\n      }\n\n      const activeProperty = activeProperties.get(canonicalName);\n      if (!activeProperty) {\n        activeProperties.set(canonicalName, property);\n      } else if (!activeProperty.important || property.important) {\n        activeProperty.setActive(false);\n        activeProperties.set(canonicalName, property);\n      } else {\n        property.setActive(false);\n      }\n    }\n  }\n\n  allProperties(): CSSProperty[] {\n    return this.#allPropertiesInternal;\n  }\n\n  hasActiveProperty(name: string): boolean {\n    return this.#activePropertyMap.has(name);\n  }\n\n  getPropertyValue(name: string): string {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.value : '';\n  }\n\n  isPropertyImplicit(name: string): boolean {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.implicit : false;\n  }\n\n  propertyAt(index: number): CSSProperty|null {\n    return (index < this.allProperties().length) ? this.allProperties()[index] : null;\n  }\n\n  pastLastSourcePropertyIndex(): number {\n    for (let i = this.allProperties().length - 1; i >= 0; --i) {\n      if (this.allProperties()[i].range) {\n        return i + 1;\n      }\n    }\n    return 0;\n  }\n\n  #insertionRange(index: number): TextUtils.TextRange.TextRange {\n    const property = this.propertyAt(index);\n    if (property && property.range) {\n      return property.range.collapseToStart();\n    }\n    if (!this.range) {\n      throw new Error('CSSStyleDeclaration.range is null');\n    }\n    return this.range.collapseToEnd();\n  }\n\n  newBlankProperty(index?: number): CSSProperty {\n    index = (typeof index === 'undefined') ? this.pastLastSourcePropertyIndex() : index;\n    const property = new CSSProperty(this, index, '', '', false, false, true, false, '', this.#insertionRange(index));\n    return property;\n  }\n\n  setText(text: string, majorChange: boolean): Promise<boolean> {\n    if (!this.range || !this.styleSheetId) {\n      return Promise.resolve(false);\n    }\n    return this.#cssModelInternal.setStyleText(this.styleSheetId, this.range, text, majorChange);\n  }\n\n  insertPropertyAt(index: number, name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    void this.newBlankProperty(index).setText(name + ': ' + value + ';', false, true).then(userCallback);\n  }\n\n  appendProperty(name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    this.insertPropertyAt(this.allProperties().length, name, value, userCallback);\n  }\n}\n\nexport enum Type {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  Regular = 'Regular',\n  Inline = 'Inline',\n  Attributes = 'Attributes',\n  Pseudo = 'Pseudo',  // This type is for style declarations generated by devtools\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n"],
  "mappings": "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",
  "names": ["Type"]
}
