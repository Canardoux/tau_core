{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/common/SegmentedRange.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nexport class Segment<T> {\n  begin: number;\n  end: number;\n  data: T;\n\n  constructor(begin: number, end: number, data: T) {\n    if (begin > end) {\n      throw new Error('Invalid segment');\n    }\n    this.begin = begin;\n    this.end = end;\n    this.data = data;\n  }\n\n  intersects(that: Segment<T>): boolean {\n    return this.begin < that.end && that.begin < this.end;\n  }\n}\n\nexport class SegmentedRange<T> {\n  #segmentsInternal: Segment<T>[];\n  readonly #mergeCallback: ((arg0: Segment<T>, arg1: Segment<T>) => Segment<T>| null)|undefined;\n\n  constructor(mergeCallback?: ((arg0: Segment<T>, arg1: Segment<T>) => Segment<T>| null)) {\n    this.#segmentsInternal = [];\n    this.#mergeCallback = mergeCallback;\n  }\n\n  append(newSegment: Segment<T>): void {\n    // 1. Find the proper insertion point for new segment\n    let startIndex =\n        Platform.ArrayUtilities.lowerBound(this.#segmentsInternal, newSegment, (a, b) => a.begin - b.begin);\n    let endIndex = startIndex;\n    let merged: (Segment<T>|null)|null = null;\n    if (startIndex > 0) {\n      // 2. Try mering the preceding segment\n      const precedingSegment = this.#segmentsInternal[startIndex - 1];\n      merged = this.tryMerge(precedingSegment, newSegment);\n      if (merged) {\n        --startIndex;\n        newSegment = merged;\n      } else if (this.#segmentsInternal[startIndex - 1].end >= newSegment.begin) {\n        // 2a. If merge failed and segments overlap, adjust preceding segment.\n        // If an old segment entirely contains new one, split it in two.\n        if (newSegment.end < precedingSegment.end) {\n          this.#segmentsInternal.splice(\n              startIndex, 0, new Segment<T>(newSegment.end, precedingSegment.end, precedingSegment.data));\n        }\n        precedingSegment.end = newSegment.begin;\n      }\n    }\n    // 3. Consume all segments that are entirely covered by the new one.\n    while (endIndex < this.#segmentsInternal.length && this.#segmentsInternal[endIndex].end <= newSegment.end) {\n      ++endIndex;\n    }\n    // 4. Merge or adjust the succeeding segment if it overlaps.\n    if (endIndex < this.#segmentsInternal.length) {\n      merged = this.tryMerge(newSegment, this.#segmentsInternal[endIndex]);\n      if (merged) {\n        endIndex++;\n        newSegment = merged;\n      } else if (newSegment.intersects(this.#segmentsInternal[endIndex])) {\n        this.#segmentsInternal[endIndex].begin = newSegment.end;\n      }\n    }\n    this.#segmentsInternal.splice(startIndex, endIndex - startIndex, newSegment);\n  }\n\n  appendRange(that: SegmentedRange<T>): void {\n    that.segments().forEach(segment => this.append(segment));\n  }\n\n  segments(): Segment<T>[] {\n    return this.#segmentsInternal;\n  }\n\n  private tryMerge(first: Segment<T>, second: Segment<T>): Segment<T>|null {\n    const merged = this.#mergeCallback && this.#mergeCallback(first, second);\n    if (!merged) {\n      return null;\n    }\n    merged.begin = first.begin;\n    merged.end = Math.max(first.end, second.end);\n    return merged;\n  }\n}\n"],
  "mappings": ";AAIA,YAAY,cAAc;AAEnB,aAAM,QAAW;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,OAAe,KAAa,MAAS;AAC/C,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,iBAAiB;AAAA,IACnC;AACA,SAAK,QAAQ;AACb,SAAK,MAAM;AACX,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,WAAW,MAA2B;AACpC,WAAO,KAAK,QAAQ,KAAK,OAAO,KAAK,QAAQ,KAAK;AAAA,EACpD;AACF;AAEO,aAAM,eAAkB;AAAA,EAC7B;AAAA,EACS;AAAA,EAET,YAAY,eAA4E;AACtF,SAAK,oBAAoB,CAAC;AAC1B,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,OAAO,YAA8B;AAEnC,QAAI,aACA,SAAS,eAAe,WAAW,KAAK,mBAAmB,YAAY,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AACtG,QAAI,WAAW;AACf,QAAI,SAAiC;AACrC,QAAI,aAAa,GAAG;AAElB,YAAM,mBAAmB,KAAK,kBAAkB,aAAa,CAAC;AAC9D,eAAS,KAAK,SAAS,kBAAkB,UAAU;AACnD,UAAI,QAAQ;AACV,UAAE;AACF,qBAAa;AAAA,MACf,WAAW,KAAK,kBAAkB,aAAa,CAAC,EAAE,OAAO,WAAW,OAAO;AAGzE,YAAI,WAAW,MAAM,iBAAiB,KAAK;AACzC,eAAK,kBAAkB;AAAA,YACnB;AAAA,YAAY;AAAA,YAAG,IAAI,QAAW,WAAW,KAAK,iBAAiB,KAAK,iBAAiB,IAAI;AAAA,UAAC;AAAA,QAChG;AACA,yBAAiB,MAAM,WAAW;AAAA,MACpC;AAAA,IACF;AAEA,WAAO,WAAW,KAAK,kBAAkB,UAAU,KAAK,kBAAkB,QAAQ,EAAE,OAAO,WAAW,KAAK;AACzG,QAAE;AAAA,IACJ;AAEA,QAAI,WAAW,KAAK,kBAAkB,QAAQ;AAC5C,eAAS,KAAK,SAAS,YAAY,KAAK,kBAAkB,QAAQ,CAAC;AACnE,UAAI,QAAQ;AACV;AACA,qBAAa;AAAA,MACf,WAAW,WAAW,WAAW,KAAK,kBAAkB,QAAQ,CAAC,GAAG;AAClE,aAAK,kBAAkB,QAAQ,EAAE,QAAQ,WAAW;AAAA,MACtD;AAAA,IACF;AACA,SAAK,kBAAkB,OAAO,YAAY,WAAW,YAAY,UAAU;AAAA,EAC7E;AAAA,EAEA,YAAY,MAA+B;AACzC,SAAK,SAAS,EAAE,QAAQ,aAAW,KAAK,OAAO,OAAO,CAAC;AAAA,EACzD;AAAA,EAEA,WAAyB;AACvB,WAAO,KAAK;AAAA,EACd;AAAA,EAEQ,SAAS,OAAmB,QAAqC;AACvE,UAAM,SAAS,KAAK,kBAAkB,KAAK,eAAe,OAAO,MAAM;AACvE,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,IACT;AACA,WAAO,QAAQ,MAAM;AACrB,WAAO,MAAM,KAAK,IAAI,MAAM,KAAK,OAAO,GAAG;AAC3C,WAAO;AAAA,EACT;AACF;",
  "names": []
}
