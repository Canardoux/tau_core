{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/EmulationModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {CSSModel} from './CSSModel.js';\nimport {MultitargetNetworkManager} from './NetworkManager.js';\nimport {Events, OverlayModel} from './OverlayModel.js';\n\nimport {Capability, type Target} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class EmulationModel extends SDKModel<void> {\n  readonly #emulationAgent: ProtocolProxyApi.EmulationApi;\n  readonly #deviceOrientationAgent: ProtocolProxyApi.DeviceOrientationApi;\n  #cssModel: CSSModel|null;\n  readonly #overlayModelInternal: OverlayModel|null;\n  readonly #mediaConfiguration: Map<string, string>;\n  #cpuPressureEnabled: boolean;\n  #touchEnabled: boolean;\n  #touchMobile: boolean;\n  #touchEmulationAllowed: boolean;\n  #customTouchEnabled: boolean;\n  #touchConfiguration: {\n    enabled: boolean,\n    configuration: Protocol.Emulation.SetEmitTouchEventsForMouseRequestConfiguration,\n  };\n\n  constructor(target: Target) {\n    super(target);\n    this.#emulationAgent = target.emulationAgent();\n    this.#deviceOrientationAgent = target.deviceOrientationAgent();\n    this.#cssModel = target.model(CSSModel);\n    this.#overlayModelInternal = target.model(OverlayModel);\n    if (this.#overlayModelInternal) {\n      this.#overlayModelInternal.addEventListener(Events.INSPECT_MODE_WILL_BE_TOGGLED, () => {\n        void this.updateTouch();\n      }, this);\n    }\n\n    const disableJavascriptSetting = Common.Settings.Settings.instance().moduleSetting('java-script-disabled');\n    disableJavascriptSetting.addChangeListener(\n        async () =>\n            await this.#emulationAgent.invoke_setScriptExecutionDisabled({value: disableJavascriptSetting.get()}));\n    if (disableJavascriptSetting.get()) {\n      void this.#emulationAgent.invoke_setScriptExecutionDisabled({value: true});\n    }\n\n    const touchSetting = Common.Settings.Settings.instance().moduleSetting('emulation.touch');\n    touchSetting.addChangeListener(() => {\n      const settingValue = touchSetting.get();\n\n      void this.overrideEmulateTouch(settingValue === 'force');\n    });\n\n    const idleDetectionSetting = Common.Settings.Settings.instance().moduleSetting('emulation.idle-detection');\n    idleDetectionSetting.addChangeListener(async () => {\n      const settingValue = idleDetectionSetting.get();\n      if (settingValue === 'none') {\n        await this.clearIdleOverride();\n        return;\n      }\n\n      const emulationParams = (JSON.parse(settingValue) as {\n        isUserActive: boolean,\n        isScreenUnlocked: boolean,\n      });\n      await this.setIdleOverride(emulationParams);\n    });\n\n    const cpuPressureDetectionSetting = Common.Settings.Settings.instance().moduleSetting('emulation.cpu-pressure');\n    cpuPressureDetectionSetting.addChangeListener(async () => {\n      const settingValue = cpuPressureDetectionSetting.get();\n\n      if (settingValue === 'none') {\n        await this.setPressureSourceOverrideEnabled(false);\n        this.#cpuPressureEnabled = false;\n        return;\n      }\n\n      if (!this.#cpuPressureEnabled) {\n        this.#cpuPressureEnabled = true;\n        await this.setPressureSourceOverrideEnabled(true);\n      }\n\n      await this.setPressureStateOverride(settingValue);\n    });\n\n    const mediaTypeSetting = Common.Settings.Settings.instance().moduleSetting<string>('emulated-css-media');\n    const mediaFeatureColorGamutSetting =\n        Common.Settings.Settings.instance().moduleSetting<string>('emulated-css-media-feature-color-gamut');\n    const mediaFeaturePrefersColorSchemeSetting =\n        Common.Settings.Settings.instance().moduleSetting<string>('emulated-css-media-feature-prefers-color-scheme');\n    const mediaFeatureForcedColorsSetting =\n        Common.Settings.Settings.instance().moduleSetting('emulated-css-media-feature-forced-colors');\n    const mediaFeaturePrefersContrastSetting =\n        Common.Settings.Settings.instance().moduleSetting<string>('emulated-css-media-feature-prefers-contrast');\n    const mediaFeaturePrefersReducedDataSetting =\n        Common.Settings.Settings.instance().moduleSetting<string>('emulated-css-media-feature-prefers-reduced-data');\n    const mediaFeaturePrefersReducedTransparencySetting = Common.Settings.Settings.instance().moduleSetting<string>(\n        'emulated-css-media-feature-prefers-reduced-transparency');\n    const mediaFeaturePrefersReducedMotionSetting =\n        Common.Settings.Settings.instance().moduleSetting<string>('emulated-css-media-feature-prefers-reduced-motion');\n    // Note: this uses a different format than what the CDP API expects,\n    // because we want to update these values per media type/feature\n    // without having to search the `features` array (inefficient) or\n    // hardcoding the indices (not readable/maintainable).\n    this.#mediaConfiguration = new Map([\n      ['type', mediaTypeSetting.get()],\n      ['color-gamut', mediaFeatureColorGamutSetting.get()],\n      ['prefers-color-scheme', mediaFeaturePrefersColorSchemeSetting.get()],\n      ['forced-colors', mediaFeatureForcedColorsSetting.get()],\n      ['prefers-contrast', mediaFeaturePrefersContrastSetting.get()],\n      ['prefers-reduced-data', mediaFeaturePrefersReducedDataSetting.get()],\n      ['prefers-reduced-motion', mediaFeaturePrefersReducedMotionSetting.get()],\n      ['prefers-reduced-transparency', mediaFeaturePrefersReducedTransparencySetting.get()],\n    ]);\n    mediaTypeSetting.addChangeListener(() => {\n      this.#mediaConfiguration.set('type', mediaTypeSetting.get());\n      void this.updateCssMedia();\n    });\n    mediaFeatureColorGamutSetting.addChangeListener(() => {\n      this.#mediaConfiguration.set('color-gamut', mediaFeatureColorGamutSetting.get());\n      void this.updateCssMedia();\n    });\n    mediaFeaturePrefersColorSchemeSetting.addChangeListener(() => {\n      this.#mediaConfiguration.set('prefers-color-scheme', mediaFeaturePrefersColorSchemeSetting.get());\n      void this.updateCssMedia();\n    });\n    mediaFeatureForcedColorsSetting.addChangeListener(() => {\n      this.#mediaConfiguration.set('forced-colors', mediaFeatureForcedColorsSetting.get());\n      void this.updateCssMedia();\n    });\n    mediaFeaturePrefersContrastSetting.addChangeListener(() => {\n      this.#mediaConfiguration.set('prefers-contrast', mediaFeaturePrefersContrastSetting.get());\n      void this.updateCssMedia();\n    });\n    mediaFeaturePrefersReducedDataSetting.addChangeListener(() => {\n      this.#mediaConfiguration.set('prefers-reduced-data', mediaFeaturePrefersReducedDataSetting.get());\n      void this.updateCssMedia();\n    });\n    mediaFeaturePrefersReducedMotionSetting.addChangeListener(() => {\n      this.#mediaConfiguration.set('prefers-reduced-motion', mediaFeaturePrefersReducedMotionSetting.get());\n      void this.updateCssMedia();\n    });\n    mediaFeaturePrefersReducedTransparencySetting.addChangeListener(() => {\n      this.#mediaConfiguration.set('prefers-reduced-transparency', mediaFeaturePrefersReducedTransparencySetting.get());\n      void this.updateCssMedia();\n    });\n    void this.updateCssMedia();\n\n    const autoDarkModeSetting = Common.Settings.Settings.instance().moduleSetting('emulate-auto-dark-mode');\n    autoDarkModeSetting.addChangeListener(() => {\n      const enabled = autoDarkModeSetting.get();\n      mediaFeaturePrefersColorSchemeSetting.setDisabled(enabled);\n      mediaFeaturePrefersColorSchemeSetting.set(enabled ? 'dark' : '');\n      void this.emulateAutoDarkMode(enabled);\n    });\n    if (autoDarkModeSetting.get()) {\n      mediaFeaturePrefersColorSchemeSetting.setDisabled(true);\n      mediaFeaturePrefersColorSchemeSetting.set('dark');\n      void this.emulateAutoDarkMode(true);\n    }\n\n    const visionDeficiencySetting = Common.Settings.Settings.instance().moduleSetting('emulated-vision-deficiency');\n    visionDeficiencySetting.addChangeListener(() => this.emulateVisionDeficiency(visionDeficiencySetting.get()));\n    if (visionDeficiencySetting.get()) {\n      void this.emulateVisionDeficiency(visionDeficiencySetting.get());\n    }\n\n    const localFontsDisabledSetting = Common.Settings.Settings.instance().moduleSetting('local-fonts-disabled');\n    localFontsDisabledSetting.addChangeListener(() => this.setLocalFontsDisabled(localFontsDisabledSetting.get()));\n    if (localFontsDisabledSetting.get()) {\n      this.setLocalFontsDisabled(localFontsDisabledSetting.get());\n    }\n\n    const avifFormatDisabledSetting = Common.Settings.Settings.instance().moduleSetting('avif-format-disabled');\n    const webpFormatDisabledSetting = Common.Settings.Settings.instance().moduleSetting('webp-format-disabled');\n\n    const updateDisabledImageFormats = (): void => {\n      const types = [];\n      if (avifFormatDisabledSetting.get()) {\n        types.push(Protocol.Emulation.DisabledImageType.Avif);\n      }\n      if (webpFormatDisabledSetting.get()) {\n        types.push(Protocol.Emulation.DisabledImageType.Webp);\n      }\n      this.setDisabledImageTypes(types);\n    };\n\n    avifFormatDisabledSetting.addChangeListener(updateDisabledImageFormats);\n    webpFormatDisabledSetting.addChangeListener(updateDisabledImageFormats);\n\n    if (avifFormatDisabledSetting.get() || webpFormatDisabledSetting.get()) {\n      updateDisabledImageFormats();\n    }\n\n    this.#cpuPressureEnabled = false;\n    this.#touchEmulationAllowed = true;\n    this.#touchEnabled = false;\n    this.#touchMobile = false;\n    this.#customTouchEnabled = false;\n    this.#touchConfiguration = {\n      enabled: false,\n      configuration: Protocol.Emulation.SetEmitTouchEventsForMouseRequestConfiguration.Mobile,\n    };\n  }\n\n  setTouchEmulationAllowed(touchEmulationAllowed: boolean): void {\n    this.#touchEmulationAllowed = touchEmulationAllowed;\n  }\n\n  supportsDeviceEmulation(): boolean {\n    return this.target().hasAllCapabilities(Capability.DEVICE_EMULATION);\n  }\n\n  async resetPageScaleFactor(): Promise<void> {\n    await this.#emulationAgent.invoke_resetPageScaleFactor();\n  }\n\n  async emulateDevice(metrics: Protocol.Page.SetDeviceMetricsOverrideRequest|null): Promise<void> {\n    if (metrics) {\n      await this.#emulationAgent.invoke_setDeviceMetricsOverride(metrics);\n    } else {\n      await this.#emulationAgent.invoke_clearDeviceMetricsOverride();\n    }\n  }\n\n  overlayModel(): OverlayModel|null {\n    return this.#overlayModelInternal;\n  }\n\n  async setPressureSourceOverrideEnabled(enabled: boolean): Promise<void> {\n    await this.#emulationAgent.invoke_setPressureSourceOverrideEnabled(\n        {source: Protocol.Emulation.PressureSource.Cpu, enabled});\n  }\n\n  async setPressureStateOverride(pressureState: string): Promise<void> {\n    await this.#emulationAgent.invoke_setPressureStateOverride({\n      source: Protocol.Emulation.PressureSource.Cpu,\n      state: pressureState as Protocol.Emulation.PressureState,\n    });\n  }\n\n  async emulateLocation(location: Location|null): Promise<void> {\n    if (!location) {\n      await Promise.all([\n        this.#emulationAgent.invoke_clearGeolocationOverride(),\n        this.#emulationAgent.invoke_setTimezoneOverride({timezoneId: ''}),\n        this.#emulationAgent.invoke_setLocaleOverride({locale: ''}),\n        this.#emulationAgent.invoke_setUserAgentOverride(\n            {userAgent: MultitargetNetworkManager.instance().currentUserAgent()}),\n      ]);\n    } else if (location.unavailable) {\n      await Promise.all([\n        this.#emulationAgent.invoke_setGeolocationOverride({}),\n        this.#emulationAgent.invoke_setTimezoneOverride({timezoneId: ''}),\n        this.#emulationAgent.invoke_setLocaleOverride({locale: ''}),\n        this.#emulationAgent.invoke_setUserAgentOverride(\n            {userAgent: MultitargetNetworkManager.instance().currentUserAgent()}),\n      ]);\n    } else {\n      function processEmulationResult(errorType: string, result: Protocol.ProtocolResponseWithError): Promise<void> {\n        const errorMessage = result.getError();\n        if (errorMessage) {\n          return Promise.reject({\n            type: errorType,\n            message: errorMessage,\n          });\n        }\n        return Promise.resolve();\n      }\n\n      await Promise.all([\n        this.#emulationAgent\n            .invoke_setGeolocationOverride({\n              latitude: location.latitude,\n              longitude: location.longitude,\n              accuracy: Location.defaultGeoMockAccuracy,\n            })\n            .then(result => processEmulationResult('emulation-set-location', result)),\n        this.#emulationAgent\n            .invoke_setTimezoneOverride({\n              timezoneId: location.timezoneId,\n            })\n            .then(result => processEmulationResult('emulation-set-timezone', result)),\n        this.#emulationAgent\n            .invoke_setLocaleOverride({\n              locale: location.locale,\n            })\n            .then(result => processEmulationResult('emulation-set-locale', result)),\n        this.#emulationAgent\n            .invoke_setUserAgentOverride({\n              userAgent: MultitargetNetworkManager.instance().currentUserAgent(),\n              acceptLanguage: location.locale,\n            })\n            .then(result => processEmulationResult('emulation-set-user-agent', result)),\n      ]);\n    }\n  }\n\n  async emulateDeviceOrientation(deviceOrientation: DeviceOrientation|null): Promise<void> {\n    if (deviceOrientation) {\n      await this.#deviceOrientationAgent.invoke_setDeviceOrientationOverride(\n          {alpha: deviceOrientation.alpha, beta: deviceOrientation.beta, gamma: deviceOrientation.gamma});\n    } else {\n      await this.#deviceOrientationAgent.invoke_clearDeviceOrientationOverride();\n    }\n  }\n\n  async setIdleOverride(emulationParams: {\n    isUserActive: boolean,\n    isScreenUnlocked: boolean,\n  }): Promise<void> {\n    await this.#emulationAgent.invoke_setIdleOverride(emulationParams);\n  }\n\n  async clearIdleOverride(): Promise<void> {\n    await this.#emulationAgent.invoke_clearIdleOverride();\n  }\n\n  private async emulateCSSMedia(type: string, features: {\n    name: string,\n    value: string,\n  }[]): Promise<void> {\n    await this.#emulationAgent.invoke_setEmulatedMedia({media: type, features});\n    if (this.#cssModel) {\n      this.#cssModel.mediaQueryResultChanged();\n    }\n  }\n\n  private async emulateAutoDarkMode(enabled: boolean): Promise<void> {\n    if (enabled) {\n      this.#mediaConfiguration.set('prefers-color-scheme', 'dark');\n      await this.updateCssMedia();\n    }\n    // We never send `enabled: false` since that would explicitly disable\n    // autodark mode. We either enable it or clear any existing override.\n    await this.#emulationAgent.invoke_setAutoDarkModeOverride({enabled: enabled || undefined});\n  }\n\n  private async emulateVisionDeficiency(type: Protocol.Emulation.SetEmulatedVisionDeficiencyRequestType):\n      Promise<void> {\n    await this.#emulationAgent.invoke_setEmulatedVisionDeficiency({type});\n  }\n\n  private setLocalFontsDisabled(disabled: boolean): void {\n    if (!this.#cssModel) {\n      return;\n    }\n    void this.#cssModel.setLocalFontsEnabled(!disabled);\n  }\n\n  private setDisabledImageTypes(imageTypes: Protocol.Emulation.DisabledImageType[]): void {\n    void this.#emulationAgent.invoke_setDisabledImageTypes({imageTypes});\n  }\n\n  async setCPUThrottlingRate(rate: number): Promise<void> {\n    await this.#emulationAgent.invoke_setCPUThrottlingRate({rate});\n  }\n\n  async setHardwareConcurrency(hardwareConcurrency: number): Promise<void> {\n    if (hardwareConcurrency < 1) {\n      throw new Error('hardwareConcurrency must be a positive value');\n    }\n    await this.#emulationAgent.invoke_setHardwareConcurrencyOverride({hardwareConcurrency});\n  }\n\n  async emulateTouch(enabled: boolean, mobile: boolean): Promise<void> {\n    this.#touchEnabled = enabled && this.#touchEmulationAllowed;\n    this.#touchMobile = mobile && this.#touchEmulationAllowed;\n    await this.updateTouch();\n  }\n\n  async overrideEmulateTouch(enabled: boolean): Promise<void> {\n    this.#customTouchEnabled = enabled && this.#touchEmulationAllowed;\n    await this.updateTouch();\n  }\n\n  private async updateTouch(): Promise<void> {\n    let configuration = {\n      enabled: this.#touchEnabled,\n      configuration: this.#touchMobile ? Protocol.Emulation.SetEmitTouchEventsForMouseRequestConfiguration.Mobile :\n                                         Protocol.Emulation.SetEmitTouchEventsForMouseRequestConfiguration.Desktop,\n    };\n    if (this.#customTouchEnabled) {\n      configuration = {\n        enabled: true,\n        configuration: Protocol.Emulation.SetEmitTouchEventsForMouseRequestConfiguration.Mobile,\n      };\n    }\n\n    if (this.#overlayModelInternal && this.#overlayModelInternal.inspectModeEnabled()) {\n      configuration = {\n        enabled: false,\n        configuration: Protocol.Emulation.SetEmitTouchEventsForMouseRequestConfiguration.Mobile,\n      };\n    }\n\n    if (!this.#touchConfiguration.enabled && !configuration.enabled) {\n      return;\n    }\n    if (this.#touchConfiguration.enabled && configuration.enabled &&\n        this.#touchConfiguration.configuration === configuration.configuration) {\n      return;\n    }\n\n    this.#touchConfiguration = configuration;\n    await this.#emulationAgent.invoke_setTouchEmulationEnabled({enabled: configuration.enabled, maxTouchPoints: 1});\n    await this.#emulationAgent.invoke_setEmitTouchEventsForMouse(\n        {enabled: configuration.enabled, configuration: configuration.configuration});\n  }\n\n  private async updateCssMedia(): Promise<void> {\n    // See the note above, where this.#mediaConfiguration is defined.\n    const type = this.#mediaConfiguration.get('type') ?? '';\n    const features = [\n      {\n        name: 'color-gamut',\n        value: this.#mediaConfiguration.get('color-gamut') ?? '',\n      },\n      {\n        name: 'prefers-color-scheme',\n        value: this.#mediaConfiguration.get('prefers-color-scheme') ?? '',\n      },\n      {\n        name: 'forced-colors',\n        value: this.#mediaConfiguration.get('forced-colors') ?? '',\n      },\n      {\n        name: 'prefers-contrast',\n        value: this.#mediaConfiguration.get('prefers-contrast') ?? '',\n      },\n      {\n        name: 'prefers-reduced-data',\n        value: this.#mediaConfiguration.get('prefers-reduced-data') ?? '',\n      },\n      {\n        name: 'prefers-reduced-motion',\n        value: this.#mediaConfiguration.get('prefers-reduced-motion') ?? '',\n      },\n      {\n        name: 'prefers-reduced-transparency',\n        value: this.#mediaConfiguration.get('prefers-reduced-transparency') ?? '',\n      },\n    ];\n    return this.emulateCSSMedia(type, features);\n  }\n}\n\nexport class Location {\n  latitude: number;\n  longitude: number;\n  timezoneId: string;\n  locale: string;\n  unavailable: boolean;\n\n  constructor(latitude: number, longitude: number, timezoneId: string, locale: string, unavailable: boolean) {\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.timezoneId = timezoneId;\n    this.locale = locale;\n    this.unavailable = unavailable;\n  }\n\n  static parseSetting(value: string): Location {\n    if (value) {\n      const [position, timezoneId, locale, unavailable] = value.split(':');\n      const [latitude, longitude] = position.split('@');\n      return new Location(parseFloat(latitude), parseFloat(longitude), timezoneId, locale, Boolean(unavailable));\n    }\n    return new Location(0, 0, '', '', false);\n  }\n\n  static parseUserInput(latitudeString: string, longitudeString: string, timezoneId: string, locale: string): Location\n      |null {\n    if (!latitudeString && !longitudeString) {\n      return null;\n    }\n\n    const {valid: isLatitudeValid} = Location.latitudeValidator(latitudeString);\n    const {valid: isLongitudeValid} = Location.longitudeValidator(longitudeString);\n\n    if (!isLatitudeValid && !isLongitudeValid) {\n      return null;\n    }\n\n    const latitude = isLatitudeValid ? parseFloat(latitudeString) : -1;\n    const longitude = isLongitudeValid ? parseFloat(longitudeString) : -1;\n    return new Location(latitude, longitude, timezoneId, locale, false);\n  }\n\n  static latitudeValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    const numValue = parseFloat(value);\n    const valid = /^([+-]?[\\d]+(\\.\\d+)?|[+-]?\\.\\d+)$/.test(value) && numValue >= -90 && numValue <= 90;\n    return {valid, errorMessage: undefined};\n  }\n\n  static longitudeValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    const numValue = parseFloat(value);\n    const valid = /^([+-]?[\\d]+(\\.\\d+)?|[+-]?\\.\\d+)$/.test(value) && numValue >= -180 && numValue <= 180;\n    return {valid, errorMessage: undefined};\n  }\n\n  static timezoneIdValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    // Chromium uses ICU's timezone implementation, which is very\n    // liberal in what it accepts. ICU does not simply use an allowlist\n    // but instead tries to make sense of the input, even for\n    // weird-looking timezone IDs. There's not much point in validating\n    // the input other than checking if it contains at least one alphabet.\n    // The empty string resets the override, and is accepted as well.\n    const valid = value === '' || /[a-zA-Z]/.test(value);\n    return {valid, errorMessage: undefined};\n  }\n\n  static localeValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    // Similarly to timezone IDs, there's not much point in validating\n    // input locales other than checking if it contains at least two\n    // alphabetic characters.\n    // https://unicode.org/reports/tr35/#Unicode_language_identifier\n    // The empty string resets the override, and is accepted as\n    // well.\n    const valid = value === '' || /[a-zA-Z]{2}/.test(value);\n    return {valid, errorMessage: undefined};\n  }\n\n  toSetting(): string {\n    return `${this.latitude}@${this.longitude}:${this.timezoneId}:${this.locale}:${this.unavailable || ''}`;\n  }\n\n  static defaultGeoMockAccuracy = 150;\n}\n\nexport class DeviceOrientation {\n  alpha: number;\n  beta: number;\n  gamma: number;\n\n  constructor(alpha: number, beta: number, gamma: number) {\n    this.alpha = alpha;\n    this.beta = beta;\n    this.gamma = gamma;\n  }\n\n  static parseSetting(value: string): DeviceOrientation {\n    if (value) {\n      const jsonObject = JSON.parse(value);\n      return new DeviceOrientation(jsonObject.alpha, jsonObject.beta, jsonObject.gamma);\n    }\n    return new DeviceOrientation(0, 0, 0);\n  }\n\n  static parseUserInput(alphaString: string, betaString: string, gammaString: string): DeviceOrientation|null {\n    if (!alphaString && !betaString && !gammaString) {\n      return null;\n    }\n\n    const {valid: isAlphaValid} = DeviceOrientation.alphaAngleValidator(alphaString);\n    const {valid: isBetaValid} = DeviceOrientation.betaAngleValidator(betaString);\n    const {valid: isGammaValid} = DeviceOrientation.gammaAngleValidator(gammaString);\n\n    if (!isAlphaValid && !isBetaValid && !isGammaValid) {\n      return null;\n    }\n\n    const alpha = isAlphaValid ? parseFloat(alphaString) : -1;\n    const beta = isBetaValid ? parseFloat(betaString) : -1;\n    const gamma = isGammaValid ? parseFloat(gammaString) : -1;\n\n    return new DeviceOrientation(alpha, beta, gamma);\n  }\n\n  static angleRangeValidator(value: string, interval: {\n    minimum: number,\n    maximum: number,\n  }): {\n    valid: boolean,\n    errorMessage: undefined,\n  } {\n    const numValue = parseFloat(value);\n    const valid =\n        /^([+-]?[\\d]+(\\.\\d+)?|[+-]?\\.\\d+)$/.test(value) && numValue >= interval.minimum && numValue < interval.maximum;\n    return {valid, errorMessage: undefined};\n  }\n\n  static alphaAngleValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    // https://w3c.github.io/deviceorientation/#device-orientation-model\n    // Alpha must be within the [0, 360) interval.\n    return DeviceOrientation.angleRangeValidator(value, {minimum: 0, maximum: 360});\n  }\n\n  static betaAngleValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    // https://w3c.github.io/deviceorientation/#device-orientation-model\n    // Beta must be within the [-180, 180) interval.\n    return DeviceOrientation.angleRangeValidator(value, {minimum: -180, maximum: 180});\n  }\n\n  static gammaAngleValidator(value: string): {\n    valid: boolean,\n    errorMessage: (string|undefined),\n  } {\n    // https://w3c.github.io/deviceorientation/#device-orientation-model\n    // Gamma must be within the [-90, 90) interval.\n    return DeviceOrientation.angleRangeValidator(value, {minimum: -90, maximum: 90});\n  }\n\n  toSetting(): string {\n    return JSON.stringify(this);\n  }\n}\n\nSDKModel.register(EmulationModel, {capabilities: Capability.EMULATION, autostart: true});\n"],
  "mappings": "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",
  "names": ["processEmulationResult"]
}
