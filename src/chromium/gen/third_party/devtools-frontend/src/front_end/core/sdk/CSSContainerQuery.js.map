{
  "version": 3,
  "sources": ["../../../../../../../../../third_party/devtools-frontend/src/front_end/core/sdk/CSSContainerQuery.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport type {CSSModel} from './CSSModel.js';\nimport {CSSQuery} from './CSSQuery.js';\nimport type {DOMNode} from './DOMModel.js';\n\nexport class CSSContainerQuery extends CSSQuery {\n  name?: string;\n  physicalAxes?: Protocol.DOM.PhysicalAxes;\n  logicalAxes?: Protocol.DOM.LogicalAxes;\n  queriesScrollState?: boolean;\n\n  static parseContainerQueriesPayload(cssModel: CSSModel, payload: Protocol.CSS.CSSContainerQuery[]):\n      CSSContainerQuery[] {\n    return payload.map(cq => new CSSContainerQuery(cssModel, cq));\n  }\n\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSContainerQuery) {\n    super(cssModel);\n    this.reinitialize(payload);\n  }\n\n  reinitialize(payload: Protocol.CSS.CSSContainerQuery): void {\n    this.text = payload.text;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n    this.styleSheetId = payload.styleSheetId;\n    this.name = payload.name;\n    this.physicalAxes = payload.physicalAxes;\n    this.logicalAxes = payload.logicalAxes;\n    this.queriesScrollState = payload.queriesScrollState;\n  }\n\n  active(): boolean {\n    return true;\n  }\n\n  async getContainerForNode(nodeId: Protocol.DOM.NodeId): Promise<CSSContainerQueryContainer|undefined> {\n    const containerNode = await this.cssModel.domModel().getContainerForNode(\n        nodeId, this.name, this.physicalAxes, this.logicalAxes, this.queriesScrollState);\n    if (!containerNode) {\n      return;\n    }\n    return new CSSContainerQueryContainer(containerNode);\n  }\n}\n\nexport class CSSContainerQueryContainer {\n  readonly containerNode: DOMNode;\n\n  constructor(containerNode: DOMNode) {\n    this.containerNode = containerNode;\n  }\n\n  async getContainerSizeDetails(): Promise<ContainerQueriedSizeDetails|undefined> {\n    const styles = await this.containerNode.domModel().cssModel().getComputedStyle(this.containerNode.id);\n    if (!styles) {\n      return;\n    }\n    const containerType = styles.get('container-type');\n    const writingMode = styles.get('writing-mode');\n    if (!containerType || !writingMode) {\n      return;\n    }\n\n    const queryAxis = getQueryAxisFromContainerType(`${containerType}`);\n    const physicalAxis = getPhysicalAxisFromQueryAxis(queryAxis, writingMode);\n    let width, height;\n    if (physicalAxis === PhysicalAxis.BOTH || physicalAxis === PhysicalAxis.HORIZONTAL) {\n      width = styles.get('width');\n    }\n    if (physicalAxis === PhysicalAxis.BOTH || physicalAxis === PhysicalAxis.VERTICAL) {\n      height = styles.get('height');\n    }\n\n    return {\n      queryAxis,\n      physicalAxis,\n      width,\n      height,\n    };\n  }\n}\n\nexport const getQueryAxisFromContainerType = (propertyValue: string): QueryAxis => {\n  const segments = propertyValue.split(' ');\n  let isInline = false;\n  for (const segment of segments) {\n    if (segment === 'size') {\n      return QueryAxis.BOTH;\n    }\n    isInline = isInline || segment === 'inline-size';\n  }\n  if (isInline) {\n    return QueryAxis.INLINE;\n  }\n  return QueryAxis.NONE;\n};\n\nexport const getPhysicalAxisFromQueryAxis = (queryAxis: QueryAxis, writingMode: string): PhysicalAxis => {\n  const isVerticalWritingMode = writingMode.startsWith('vertical');\n  switch (queryAxis) {\n    case QueryAxis.NONE:\n      return PhysicalAxis.NONE;\n    case QueryAxis.BOTH:\n      return PhysicalAxis.BOTH;\n    case QueryAxis.INLINE:\n      return isVerticalWritingMode ? PhysicalAxis.VERTICAL : PhysicalAxis.HORIZONTAL;\n    case QueryAxis.BLOCK:\n      return isVerticalWritingMode ? PhysicalAxis.HORIZONTAL : PhysicalAxis.VERTICAL;\n  }\n};\n\nexport interface ContainerQueriedSizeDetails {\n  queryAxis: QueryAxis;\n  physicalAxis: PhysicalAxis;\n  width?: string;\n  height?: string;\n}\n\nexport const enum QueryAxis {\n  NONE = '',\n  INLINE = 'inline-size',\n  BLOCK = 'block-size',\n  BOTH = 'size',\n}\n\nexport const enum PhysicalAxis {\n  NONE = '',\n  HORIZONTAL = 'Horizontal',\n  VERTICAL = 'Vertical',\n  BOTH = 'Both',\n}\n"],
  "mappings": "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",
  "names": ["QueryAxis", "PhysicalAxis"]
}
